
L151_interrupter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00012510  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0801264c  0801264c  0002264c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08012c4c  08012c4c  0003026c  2**0
                  CONTENTS
  4 .ARM          00000008  08012c4c  08012c4c  00022c4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08012c54  08012c54  0003026c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08012c54  08012c54  00022c54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08012c58  08012c58  00022c58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000026c  20000000  08012c5c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000021a0  20000270  08012ec8  00030270  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002410  08012ec8  00032410  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0003026c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030295  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001c501  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004884  00000000  00000000  0004c7d9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001998  00000000  00000000  00051060  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013af  00000000  00000000  000529f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a2ad  00000000  00000000  00053da7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00023b04  00000000  00000000  0006e054  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008bfe9  00000000  00000000  00091b58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000719c  00000000  00000000  0011db44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00124ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000270 	.word	0x20000270
 8000158:	00000000 	.word	0x00000000
 800015c:	08012634 	.word	0x08012634

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000274 	.word	0x20000274
 8000178:	08012634 	.word	0x08012634

0800017c <strlen>:
 800017c:	4603      	mov	r3, r0
 800017e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000182:	2a00      	cmp	r2, #0
 8000184:	d1fb      	bne.n	800017e <strlen+0x2>
 8000186:	1a18      	subs	r0, r3, r0
 8000188:	3801      	subs	r0, #1
 800018a:	4770      	bx	lr

0800018c <__aeabi_drsub>:
 800018c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000190:	e002      	b.n	8000198 <__adddf3>
 8000192:	bf00      	nop

08000194 <__aeabi_dsub>:
 8000194:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000198 <__adddf3>:
 8000198:	b530      	push	{r4, r5, lr}
 800019a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800019e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a2:	ea94 0f05 	teq	r4, r5
 80001a6:	bf08      	it	eq
 80001a8:	ea90 0f02 	teqeq	r0, r2
 80001ac:	bf1f      	itttt	ne
 80001ae:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b2:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001b6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001ba:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001be:	f000 80e2 	beq.w	8000386 <__adddf3+0x1ee>
 80001c2:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001c6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ca:	bfb8      	it	lt
 80001cc:	426d      	neglt	r5, r5
 80001ce:	dd0c      	ble.n	80001ea <__adddf3+0x52>
 80001d0:	442c      	add	r4, r5
 80001d2:	ea80 0202 	eor.w	r2, r0, r2
 80001d6:	ea81 0303 	eor.w	r3, r1, r3
 80001da:	ea82 0000 	eor.w	r0, r2, r0
 80001de:	ea83 0101 	eor.w	r1, r3, r1
 80001e2:	ea80 0202 	eor.w	r2, r0, r2
 80001e6:	ea81 0303 	eor.w	r3, r1, r3
 80001ea:	2d36      	cmp	r5, #54	; 0x36
 80001ec:	bf88      	it	hi
 80001ee:	bd30      	pophi	{r4, r5, pc}
 80001f0:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001f8:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001fc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000200:	d002      	beq.n	8000208 <__adddf3+0x70>
 8000202:	4240      	negs	r0, r0
 8000204:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000208:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800020c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000210:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000214:	d002      	beq.n	800021c <__adddf3+0x84>
 8000216:	4252      	negs	r2, r2
 8000218:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800021c:	ea94 0f05 	teq	r4, r5
 8000220:	f000 80a7 	beq.w	8000372 <__adddf3+0x1da>
 8000224:	f1a4 0401 	sub.w	r4, r4, #1
 8000228:	f1d5 0e20 	rsbs	lr, r5, #32
 800022c:	db0d      	blt.n	800024a <__adddf3+0xb2>
 800022e:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000232:	fa22 f205 	lsr.w	r2, r2, r5
 8000236:	1880      	adds	r0, r0, r2
 8000238:	f141 0100 	adc.w	r1, r1, #0
 800023c:	fa03 f20e 	lsl.w	r2, r3, lr
 8000240:	1880      	adds	r0, r0, r2
 8000242:	fa43 f305 	asr.w	r3, r3, r5
 8000246:	4159      	adcs	r1, r3
 8000248:	e00e      	b.n	8000268 <__adddf3+0xd0>
 800024a:	f1a5 0520 	sub.w	r5, r5, #32
 800024e:	f10e 0e20 	add.w	lr, lr, #32
 8000252:	2a01      	cmp	r2, #1
 8000254:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000258:	bf28      	it	cs
 800025a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800025e:	fa43 f305 	asr.w	r3, r3, r5
 8000262:	18c0      	adds	r0, r0, r3
 8000264:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000268:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800026c:	d507      	bpl.n	800027e <__adddf3+0xe6>
 800026e:	f04f 0e00 	mov.w	lr, #0
 8000272:	f1dc 0c00 	rsbs	ip, ip, #0
 8000276:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027a:	eb6e 0101 	sbc.w	r1, lr, r1
 800027e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000282:	d31b      	bcc.n	80002bc <__adddf3+0x124>
 8000284:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000288:	d30c      	bcc.n	80002a4 <__adddf3+0x10c>
 800028a:	0849      	lsrs	r1, r1, #1
 800028c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000290:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000294:	f104 0401 	add.w	r4, r4, #1
 8000298:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800029c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a0:	f080 809a 	bcs.w	80003d8 <__adddf3+0x240>
 80002a4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002a8:	bf08      	it	eq
 80002aa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ae:	f150 0000 	adcs.w	r0, r0, #0
 80002b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002b6:	ea41 0105 	orr.w	r1, r1, r5
 80002ba:	bd30      	pop	{r4, r5, pc}
 80002bc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c0:	4140      	adcs	r0, r0
 80002c2:	eb41 0101 	adc.w	r1, r1, r1
 80002c6:	3c01      	subs	r4, #1
 80002c8:	bf28      	it	cs
 80002ca:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002ce:	d2e9      	bcs.n	80002a4 <__adddf3+0x10c>
 80002d0:	f091 0f00 	teq	r1, #0
 80002d4:	bf04      	itt	eq
 80002d6:	4601      	moveq	r1, r0
 80002d8:	2000      	moveq	r0, #0
 80002da:	fab1 f381 	clz	r3, r1
 80002de:	bf08      	it	eq
 80002e0:	3320      	addeq	r3, #32
 80002e2:	f1a3 030b 	sub.w	r3, r3, #11
 80002e6:	f1b3 0220 	subs.w	r2, r3, #32
 80002ea:	da0c      	bge.n	8000306 <__adddf3+0x16e>
 80002ec:	320c      	adds	r2, #12
 80002ee:	dd08      	ble.n	8000302 <__adddf3+0x16a>
 80002f0:	f102 0c14 	add.w	ip, r2, #20
 80002f4:	f1c2 020c 	rsb	r2, r2, #12
 80002f8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002fc:	fa21 f102 	lsr.w	r1, r1, r2
 8000300:	e00c      	b.n	800031c <__adddf3+0x184>
 8000302:	f102 0214 	add.w	r2, r2, #20
 8000306:	bfd8      	it	le
 8000308:	f1c2 0c20 	rsble	ip, r2, #32
 800030c:	fa01 f102 	lsl.w	r1, r1, r2
 8000310:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000314:	bfdc      	itt	le
 8000316:	ea41 010c 	orrle.w	r1, r1, ip
 800031a:	4090      	lslle	r0, r2
 800031c:	1ae4      	subs	r4, r4, r3
 800031e:	bfa2      	ittt	ge
 8000320:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000324:	4329      	orrge	r1, r5
 8000326:	bd30      	popge	{r4, r5, pc}
 8000328:	ea6f 0404 	mvn.w	r4, r4
 800032c:	3c1f      	subs	r4, #31
 800032e:	da1c      	bge.n	800036a <__adddf3+0x1d2>
 8000330:	340c      	adds	r4, #12
 8000332:	dc0e      	bgt.n	8000352 <__adddf3+0x1ba>
 8000334:	f104 0414 	add.w	r4, r4, #20
 8000338:	f1c4 0220 	rsb	r2, r4, #32
 800033c:	fa20 f004 	lsr.w	r0, r0, r4
 8000340:	fa01 f302 	lsl.w	r3, r1, r2
 8000344:	ea40 0003 	orr.w	r0, r0, r3
 8000348:	fa21 f304 	lsr.w	r3, r1, r4
 800034c:	ea45 0103 	orr.w	r1, r5, r3
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	f1c4 040c 	rsb	r4, r4, #12
 8000356:	f1c4 0220 	rsb	r2, r4, #32
 800035a:	fa20 f002 	lsr.w	r0, r0, r2
 800035e:	fa01 f304 	lsl.w	r3, r1, r4
 8000362:	ea40 0003 	orr.w	r0, r0, r3
 8000366:	4629      	mov	r1, r5
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	fa21 f004 	lsr.w	r0, r1, r4
 800036e:	4629      	mov	r1, r5
 8000370:	bd30      	pop	{r4, r5, pc}
 8000372:	f094 0f00 	teq	r4, #0
 8000376:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037a:	bf06      	itte	eq
 800037c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000380:	3401      	addeq	r4, #1
 8000382:	3d01      	subne	r5, #1
 8000384:	e74e      	b.n	8000224 <__adddf3+0x8c>
 8000386:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038a:	bf18      	it	ne
 800038c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000390:	d029      	beq.n	80003e6 <__adddf3+0x24e>
 8000392:	ea94 0f05 	teq	r4, r5
 8000396:	bf08      	it	eq
 8000398:	ea90 0f02 	teqeq	r0, r2
 800039c:	d005      	beq.n	80003aa <__adddf3+0x212>
 800039e:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a2:	bf04      	itt	eq
 80003a4:	4619      	moveq	r1, r3
 80003a6:	4610      	moveq	r0, r2
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea91 0f03 	teq	r1, r3
 80003ae:	bf1e      	ittt	ne
 80003b0:	2100      	movne	r1, #0
 80003b2:	2000      	movne	r0, #0
 80003b4:	bd30      	popne	{r4, r5, pc}
 80003b6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003ba:	d105      	bne.n	80003c8 <__adddf3+0x230>
 80003bc:	0040      	lsls	r0, r0, #1
 80003be:	4149      	adcs	r1, r1
 80003c0:	bf28      	it	cs
 80003c2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003c6:	bd30      	pop	{r4, r5, pc}
 80003c8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003cc:	bf3c      	itt	cc
 80003ce:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d2:	bd30      	popcc	{r4, r5, pc}
 80003d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003dc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e0:	f04f 0000 	mov.w	r0, #0
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ea:	bf1a      	itte	ne
 80003ec:	4619      	movne	r1, r3
 80003ee:	4610      	movne	r0, r2
 80003f0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f4:	bf1c      	itt	ne
 80003f6:	460b      	movne	r3, r1
 80003f8:	4602      	movne	r2, r0
 80003fa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003fe:	bf06      	itte	eq
 8000400:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000404:	ea91 0f03 	teqeq	r1, r3
 8000408:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	bf00      	nop

08000410 <__aeabi_ui2d>:
 8000410:	f090 0f00 	teq	r0, #0
 8000414:	bf04      	itt	eq
 8000416:	2100      	moveq	r1, #0
 8000418:	4770      	bxeq	lr
 800041a:	b530      	push	{r4, r5, lr}
 800041c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000420:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000424:	f04f 0500 	mov.w	r5, #0
 8000428:	f04f 0100 	mov.w	r1, #0
 800042c:	e750      	b.n	80002d0 <__adddf3+0x138>
 800042e:	bf00      	nop

08000430 <__aeabi_i2d>:
 8000430:	f090 0f00 	teq	r0, #0
 8000434:	bf04      	itt	eq
 8000436:	2100      	moveq	r1, #0
 8000438:	4770      	bxeq	lr
 800043a:	b530      	push	{r4, r5, lr}
 800043c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000440:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000444:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000448:	bf48      	it	mi
 800044a:	4240      	negmi	r0, r0
 800044c:	f04f 0100 	mov.w	r1, #0
 8000450:	e73e      	b.n	80002d0 <__adddf3+0x138>
 8000452:	bf00      	nop

08000454 <__aeabi_f2d>:
 8000454:	0042      	lsls	r2, r0, #1
 8000456:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045a:	ea4f 0131 	mov.w	r1, r1, rrx
 800045e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000462:	bf1f      	itttt	ne
 8000464:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000468:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800046c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000470:	4770      	bxne	lr
 8000472:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000476:	bf08      	it	eq
 8000478:	4770      	bxeq	lr
 800047a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800047e:	bf04      	itt	eq
 8000480:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 7460 	mov.w	r4, #896	; 0x380
 800048c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000490:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000494:	e71c      	b.n	80002d0 <__adddf3+0x138>
 8000496:	bf00      	nop

08000498 <__aeabi_ul2d>:
 8000498:	ea50 0201 	orrs.w	r2, r0, r1
 800049c:	bf08      	it	eq
 800049e:	4770      	bxeq	lr
 80004a0:	b530      	push	{r4, r5, lr}
 80004a2:	f04f 0500 	mov.w	r5, #0
 80004a6:	e00a      	b.n	80004be <__aeabi_l2d+0x16>

080004a8 <__aeabi_l2d>:
 80004a8:	ea50 0201 	orrs.w	r2, r0, r1
 80004ac:	bf08      	it	eq
 80004ae:	4770      	bxeq	lr
 80004b0:	b530      	push	{r4, r5, lr}
 80004b2:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004b6:	d502      	bpl.n	80004be <__aeabi_l2d+0x16>
 80004b8:	4240      	negs	r0, r0
 80004ba:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004be:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c2:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c6:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ca:	f43f aed8 	beq.w	800027e <__adddf3+0xe6>
 80004ce:	f04f 0203 	mov.w	r2, #3
 80004d2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004d6:	bf18      	it	ne
 80004d8:	3203      	addne	r2, #3
 80004da:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004de:	bf18      	it	ne
 80004e0:	3203      	addne	r2, #3
 80004e2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004e6:	f1c2 0320 	rsb	r3, r2, #32
 80004ea:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ee:	fa20 f002 	lsr.w	r0, r0, r2
 80004f2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004f6:	ea40 000e 	orr.w	r0, r0, lr
 80004fa:	fa21 f102 	lsr.w	r1, r1, r2
 80004fe:	4414      	add	r4, r2
 8000500:	e6bd      	b.n	800027e <__adddf3+0xe6>
 8000502:	bf00      	nop

08000504 <__aeabi_dmul>:
 8000504:	b570      	push	{r4, r5, r6, lr}
 8000506:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800050e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000512:	bf1d      	ittte	ne
 8000514:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000518:	ea94 0f0c 	teqne	r4, ip
 800051c:	ea95 0f0c 	teqne	r5, ip
 8000520:	f000 f8de 	bleq	80006e0 <__aeabi_dmul+0x1dc>
 8000524:	442c      	add	r4, r5
 8000526:	ea81 0603 	eor.w	r6, r1, r3
 800052a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800052e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000532:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000536:	bf18      	it	ne
 8000538:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 800053c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000544:	d038      	beq.n	80005b8 <__aeabi_dmul+0xb4>
 8000546:	fba0 ce02 	umull	ip, lr, r0, r2
 800054a:	f04f 0500 	mov.w	r5, #0
 800054e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000552:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000556:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055a:	f04f 0600 	mov.w	r6, #0
 800055e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000562:	f09c 0f00 	teq	ip, #0
 8000566:	bf18      	it	ne
 8000568:	f04e 0e01 	orrne.w	lr, lr, #1
 800056c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000570:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000574:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000578:	d204      	bcs.n	8000584 <__aeabi_dmul+0x80>
 800057a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800057e:	416d      	adcs	r5, r5
 8000580:	eb46 0606 	adc.w	r6, r6, r6
 8000584:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000588:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800058c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000590:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000594:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000598:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800059c:	bf88      	it	hi
 800059e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a2:	d81e      	bhi.n	80005e2 <__aeabi_dmul+0xde>
 80005a4:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005a8:	bf08      	it	eq
 80005aa:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ae:	f150 0000 	adcs.w	r0, r0, #0
 80005b2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005b6:	bd70      	pop	{r4, r5, r6, pc}
 80005b8:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005bc:	ea46 0101 	orr.w	r1, r6, r1
 80005c0:	ea40 0002 	orr.w	r0, r0, r2
 80005c4:	ea81 0103 	eor.w	r1, r1, r3
 80005c8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005cc:	bfc2      	ittt	gt
 80005ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005d6:	bd70      	popgt	{r4, r5, r6, pc}
 80005d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005dc:	f04f 0e00 	mov.w	lr, #0
 80005e0:	3c01      	subs	r4, #1
 80005e2:	f300 80ab 	bgt.w	800073c <__aeabi_dmul+0x238>
 80005e6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ea:	bfde      	ittt	le
 80005ec:	2000      	movle	r0, #0
 80005ee:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f2:	bd70      	pople	{r4, r5, r6, pc}
 80005f4:	f1c4 0400 	rsb	r4, r4, #0
 80005f8:	3c20      	subs	r4, #32
 80005fa:	da35      	bge.n	8000668 <__aeabi_dmul+0x164>
 80005fc:	340c      	adds	r4, #12
 80005fe:	dc1b      	bgt.n	8000638 <__aeabi_dmul+0x134>
 8000600:	f104 0414 	add.w	r4, r4, #20
 8000604:	f1c4 0520 	rsb	r5, r4, #32
 8000608:	fa00 f305 	lsl.w	r3, r0, r5
 800060c:	fa20 f004 	lsr.w	r0, r0, r4
 8000610:	fa01 f205 	lsl.w	r2, r1, r5
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 800061c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000620:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000624:	fa21 f604 	lsr.w	r6, r1, r4
 8000628:	eb42 0106 	adc.w	r1, r2, r6
 800062c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000630:	bf08      	it	eq
 8000632:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000636:	bd70      	pop	{r4, r5, r6, pc}
 8000638:	f1c4 040c 	rsb	r4, r4, #12
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f304 	lsl.w	r3, r0, r4
 8000644:	fa20 f005 	lsr.w	r0, r0, r5
 8000648:	fa01 f204 	lsl.w	r2, r1, r4
 800064c:	ea40 0002 	orr.w	r0, r0, r2
 8000650:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	f141 0100 	adc.w	r1, r1, #0
 800065c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000660:	bf08      	it	eq
 8000662:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f205 	lsl.w	r2, r0, r5
 8000670:	ea4e 0e02 	orr.w	lr, lr, r2
 8000674:	fa20 f304 	lsr.w	r3, r0, r4
 8000678:	fa01 f205 	lsl.w	r2, r1, r5
 800067c:	ea43 0302 	orr.w	r3, r3, r2
 8000680:	fa21 f004 	lsr.w	r0, r1, r4
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	fa21 f204 	lsr.w	r2, r1, r4
 800068c:	ea20 0002 	bic.w	r0, r0, r2
 8000690:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000694:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000698:	bf08      	it	eq
 800069a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069e:	bd70      	pop	{r4, r5, r6, pc}
 80006a0:	f094 0f00 	teq	r4, #0
 80006a4:	d10f      	bne.n	80006c6 <__aeabi_dmul+0x1c2>
 80006a6:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006aa:	0040      	lsls	r0, r0, #1
 80006ac:	eb41 0101 	adc.w	r1, r1, r1
 80006b0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b4:	bf08      	it	eq
 80006b6:	3c01      	subeq	r4, #1
 80006b8:	d0f7      	beq.n	80006aa <__aeabi_dmul+0x1a6>
 80006ba:	ea41 0106 	orr.w	r1, r1, r6
 80006be:	f095 0f00 	teq	r5, #0
 80006c2:	bf18      	it	ne
 80006c4:	4770      	bxne	lr
 80006c6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ca:	0052      	lsls	r2, r2, #1
 80006cc:	eb43 0303 	adc.w	r3, r3, r3
 80006d0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d4:	bf08      	it	eq
 80006d6:	3d01      	subeq	r5, #1
 80006d8:	d0f7      	beq.n	80006ca <__aeabi_dmul+0x1c6>
 80006da:	ea43 0306 	orr.w	r3, r3, r6
 80006de:	4770      	bx	lr
 80006e0:	ea94 0f0c 	teq	r4, ip
 80006e4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006e8:	bf18      	it	ne
 80006ea:	ea95 0f0c 	teqne	r5, ip
 80006ee:	d00c      	beq.n	800070a <__aeabi_dmul+0x206>
 80006f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f4:	bf18      	it	ne
 80006f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fa:	d1d1      	bne.n	80006a0 <__aeabi_dmul+0x19c>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	bd70      	pop	{r4, r5, r6, pc}
 800070a:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800070e:	bf06      	itte	eq
 8000710:	4610      	moveq	r0, r2
 8000712:	4619      	moveq	r1, r3
 8000714:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000718:	d019      	beq.n	800074e <__aeabi_dmul+0x24a>
 800071a:	ea94 0f0c 	teq	r4, ip
 800071e:	d102      	bne.n	8000726 <__aeabi_dmul+0x222>
 8000720:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000724:	d113      	bne.n	800074e <__aeabi_dmul+0x24a>
 8000726:	ea95 0f0c 	teq	r5, ip
 800072a:	d105      	bne.n	8000738 <__aeabi_dmul+0x234>
 800072c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000730:	bf1c      	itt	ne
 8000732:	4610      	movne	r0, r2
 8000734:	4619      	movne	r1, r3
 8000736:	d10a      	bne.n	800074e <__aeabi_dmul+0x24a>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000744:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000748:	f04f 0000 	mov.w	r0, #0
 800074c:	bd70      	pop	{r4, r5, r6, pc}
 800074e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000752:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000756:	bd70      	pop	{r4, r5, r6, pc}

08000758 <__aeabi_ddiv>:
 8000758:	b570      	push	{r4, r5, r6, lr}
 800075a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800075e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000762:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000766:	bf1d      	ittte	ne
 8000768:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800076c:	ea94 0f0c 	teqne	r4, ip
 8000770:	ea95 0f0c 	teqne	r5, ip
 8000774:	f000 f8a7 	bleq	80008c6 <__aeabi_ddiv+0x16e>
 8000778:	eba4 0405 	sub.w	r4, r4, r5
 800077c:	ea81 0e03 	eor.w	lr, r1, r3
 8000780:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000784:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000788:	f000 8088 	beq.w	800089c <__aeabi_ddiv+0x144>
 800078c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000790:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000794:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000798:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800079c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a0:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a4:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007a8:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007ac:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b0:	429d      	cmp	r5, r3
 80007b2:	bf08      	it	eq
 80007b4:	4296      	cmpeq	r6, r2
 80007b6:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ba:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007be:	d202      	bcs.n	80007c6 <__aeabi_ddiv+0x6e>
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	1ab6      	subs	r6, r6, r2
 80007c8:	eb65 0503 	sbc.w	r5, r5, r3
 80007cc:	085b      	lsrs	r3, r3, #1
 80007ce:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d2:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007d6:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 800081c:	085b      	lsrs	r3, r3, #1
 800081e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000822:	ebb6 0e02 	subs.w	lr, r6, r2
 8000826:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082a:	bf22      	ittt	cs
 800082c:	1ab6      	subcs	r6, r6, r2
 800082e:	4675      	movcs	r5, lr
 8000830:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000834:	ea55 0e06 	orrs.w	lr, r5, r6
 8000838:	d018      	beq.n	800086c <__aeabi_ddiv+0x114>
 800083a:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800083e:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000842:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000846:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800084e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000852:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000856:	d1c0      	bne.n	80007da <__aeabi_ddiv+0x82>
 8000858:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800085c:	d10b      	bne.n	8000876 <__aeabi_ddiv+0x11e>
 800085e:	ea41 0100 	orr.w	r1, r1, r0
 8000862:	f04f 0000 	mov.w	r0, #0
 8000866:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086a:	e7b6      	b.n	80007da <__aeabi_ddiv+0x82>
 800086c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000870:	bf04      	itt	eq
 8000872:	4301      	orreq	r1, r0
 8000874:	2000      	moveq	r0, #0
 8000876:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087a:	bf88      	it	hi
 800087c:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000880:	f63f aeaf 	bhi.w	80005e2 <__aeabi_dmul+0xde>
 8000884:	ebb5 0c03 	subs.w	ip, r5, r3
 8000888:	bf04      	itt	eq
 800088a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800088e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000892:	f150 0000 	adcs.w	r0, r0, #0
 8000896:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089a:	bd70      	pop	{r4, r5, r6, pc}
 800089c:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a0:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a4:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008a8:	bfc2      	ittt	gt
 80008aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b2:	bd70      	popgt	{r4, r5, r6, pc}
 80008b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b8:	f04f 0e00 	mov.w	lr, #0
 80008bc:	3c01      	subs	r4, #1
 80008be:	e690      	b.n	80005e2 <__aeabi_dmul+0xde>
 80008c0:	ea45 0e06 	orr.w	lr, r5, r6
 80008c4:	e68d      	b.n	80005e2 <__aeabi_dmul+0xde>
 80008c6:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ca:	ea94 0f0c 	teq	r4, ip
 80008ce:	bf08      	it	eq
 80008d0:	ea95 0f0c 	teqeq	r5, ip
 80008d4:	f43f af3b 	beq.w	800074e <__aeabi_dmul+0x24a>
 80008d8:	ea94 0f0c 	teq	r4, ip
 80008dc:	d10a      	bne.n	80008f4 <__aeabi_ddiv+0x19c>
 80008de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e2:	f47f af34 	bne.w	800074e <__aeabi_dmul+0x24a>
 80008e6:	ea95 0f0c 	teq	r5, ip
 80008ea:	f47f af25 	bne.w	8000738 <__aeabi_dmul+0x234>
 80008ee:	4610      	mov	r0, r2
 80008f0:	4619      	mov	r1, r3
 80008f2:	e72c      	b.n	800074e <__aeabi_dmul+0x24a>
 80008f4:	ea95 0f0c 	teq	r5, ip
 80008f8:	d106      	bne.n	8000908 <__aeabi_ddiv+0x1b0>
 80008fa:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008fe:	f43f aefd 	beq.w	80006fc <__aeabi_dmul+0x1f8>
 8000902:	4610      	mov	r0, r2
 8000904:	4619      	mov	r1, r3
 8000906:	e722      	b.n	800074e <__aeabi_dmul+0x24a>
 8000908:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800090c:	bf18      	it	ne
 800090e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000912:	f47f aec5 	bne.w	80006a0 <__aeabi_dmul+0x19c>
 8000916:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091a:	f47f af0d 	bne.w	8000738 <__aeabi_dmul+0x234>
 800091e:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000922:	f47f aeeb 	bne.w	80006fc <__aeabi_dmul+0x1f8>
 8000926:	e712      	b.n	800074e <__aeabi_dmul+0x24a>

08000928 <__aeabi_d2uiz>:
 8000928:	004a      	lsls	r2, r1, #1
 800092a:	d211      	bcs.n	8000950 <__aeabi_d2uiz+0x28>
 800092c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000930:	d211      	bcs.n	8000956 <__aeabi_d2uiz+0x2e>
 8000932:	d50d      	bpl.n	8000950 <__aeabi_d2uiz+0x28>
 8000934:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000938:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800093c:	d40e      	bmi.n	800095c <__aeabi_d2uiz+0x34>
 800093e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000942:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000946:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800094a:	fa23 f002 	lsr.w	r0, r3, r2
 800094e:	4770      	bx	lr
 8000950:	f04f 0000 	mov.w	r0, #0
 8000954:	4770      	bx	lr
 8000956:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 800095a:	d102      	bne.n	8000962 <__aeabi_d2uiz+0x3a>
 800095c:	f04f 30ff 	mov.w	r0, #4294967295
 8000960:	4770      	bx	lr
 8000962:	f04f 0000 	mov.w	r0, #0
 8000966:	4770      	bx	lr

08000968 <__aeabi_frsub>:
 8000968:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 800096c:	e002      	b.n	8000974 <__addsf3>
 800096e:	bf00      	nop

08000970 <__aeabi_fsub>:
 8000970:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000974 <__addsf3>:
 8000974:	0042      	lsls	r2, r0, #1
 8000976:	bf1f      	itttt	ne
 8000978:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 800097c:	ea92 0f03 	teqne	r2, r3
 8000980:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000984:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000988:	d06a      	beq.n	8000a60 <__addsf3+0xec>
 800098a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 800098e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000992:	bfc1      	itttt	gt
 8000994:	18d2      	addgt	r2, r2, r3
 8000996:	4041      	eorgt	r1, r0
 8000998:	4048      	eorgt	r0, r1
 800099a:	4041      	eorgt	r1, r0
 800099c:	bfb8      	it	lt
 800099e:	425b      	neglt	r3, r3
 80009a0:	2b19      	cmp	r3, #25
 80009a2:	bf88      	it	hi
 80009a4:	4770      	bxhi	lr
 80009a6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009aa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009b2:	bf18      	it	ne
 80009b4:	4240      	negne	r0, r0
 80009b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009be:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009c2:	bf18      	it	ne
 80009c4:	4249      	negne	r1, r1
 80009c6:	ea92 0f03 	teq	r2, r3
 80009ca:	d03f      	beq.n	8000a4c <__addsf3+0xd8>
 80009cc:	f1a2 0201 	sub.w	r2, r2, #1
 80009d0:	fa41 fc03 	asr.w	ip, r1, r3
 80009d4:	eb10 000c 	adds.w	r0, r0, ip
 80009d8:	f1c3 0320 	rsb	r3, r3, #32
 80009dc:	fa01 f103 	lsl.w	r1, r1, r3
 80009e0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009e4:	d502      	bpl.n	80009ec <__addsf3+0x78>
 80009e6:	4249      	negs	r1, r1
 80009e8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80009ec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 80009f0:	d313      	bcc.n	8000a1a <__addsf3+0xa6>
 80009f2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80009f6:	d306      	bcc.n	8000a06 <__addsf3+0x92>
 80009f8:	0840      	lsrs	r0, r0, #1
 80009fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80009fe:	f102 0201 	add.w	r2, r2, #1
 8000a02:	2afe      	cmp	r2, #254	; 0xfe
 8000a04:	d251      	bcs.n	8000aaa <__addsf3+0x136>
 8000a06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a0e:	bf08      	it	eq
 8000a10:	f020 0001 	biceq.w	r0, r0, #1
 8000a14:	ea40 0003 	orr.w	r0, r0, r3
 8000a18:	4770      	bx	lr
 8000a1a:	0049      	lsls	r1, r1, #1
 8000a1c:	eb40 0000 	adc.w	r0, r0, r0
 8000a20:	3a01      	subs	r2, #1
 8000a22:	bf28      	it	cs
 8000a24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a28:	d2ed      	bcs.n	8000a06 <__addsf3+0x92>
 8000a2a:	fab0 fc80 	clz	ip, r0
 8000a2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a32:	ebb2 020c 	subs.w	r2, r2, ip
 8000a36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a3a:	bfaa      	itet	ge
 8000a3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a40:	4252      	neglt	r2, r2
 8000a42:	4318      	orrge	r0, r3
 8000a44:	bfbc      	itt	lt
 8000a46:	40d0      	lsrlt	r0, r2
 8000a48:	4318      	orrlt	r0, r3
 8000a4a:	4770      	bx	lr
 8000a4c:	f092 0f00 	teq	r2, #0
 8000a50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a54:	bf06      	itte	eq
 8000a56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a5a:	3201      	addeq	r2, #1
 8000a5c:	3b01      	subne	r3, #1
 8000a5e:	e7b5      	b.n	80009cc <__addsf3+0x58>
 8000a60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a68:	bf18      	it	ne
 8000a6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a6e:	d021      	beq.n	8000ab4 <__addsf3+0x140>
 8000a70:	ea92 0f03 	teq	r2, r3
 8000a74:	d004      	beq.n	8000a80 <__addsf3+0x10c>
 8000a76:	f092 0f00 	teq	r2, #0
 8000a7a:	bf08      	it	eq
 8000a7c:	4608      	moveq	r0, r1
 8000a7e:	4770      	bx	lr
 8000a80:	ea90 0f01 	teq	r0, r1
 8000a84:	bf1c      	itt	ne
 8000a86:	2000      	movne	r0, #0
 8000a88:	4770      	bxne	lr
 8000a8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000a8e:	d104      	bne.n	8000a9a <__addsf3+0x126>
 8000a90:	0040      	lsls	r0, r0, #1
 8000a92:	bf28      	it	cs
 8000a94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000a98:	4770      	bx	lr
 8000a9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000a9e:	bf3c      	itt	cc
 8000aa0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000aa4:	4770      	bxcc	lr
 8000aa6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000aaa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000aae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ab2:	4770      	bx	lr
 8000ab4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ab8:	bf16      	itet	ne
 8000aba:	4608      	movne	r0, r1
 8000abc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ac0:	4601      	movne	r1, r0
 8000ac2:	0242      	lsls	r2, r0, #9
 8000ac4:	bf06      	itte	eq
 8000ac6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aca:	ea90 0f01 	teqeq	r0, r1
 8000ace:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ad2:	4770      	bx	lr

08000ad4 <__aeabi_ui2f>:
 8000ad4:	f04f 0300 	mov.w	r3, #0
 8000ad8:	e004      	b.n	8000ae4 <__aeabi_i2f+0x8>
 8000ada:	bf00      	nop

08000adc <__aeabi_i2f>:
 8000adc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ae0:	bf48      	it	mi
 8000ae2:	4240      	negmi	r0, r0
 8000ae4:	ea5f 0c00 	movs.w	ip, r0
 8000ae8:	bf08      	it	eq
 8000aea:	4770      	bxeq	lr
 8000aec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000af0:	4601      	mov	r1, r0
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	e01c      	b.n	8000b32 <__aeabi_l2f+0x2a>

08000af8 <__aeabi_ul2f>:
 8000af8:	ea50 0201 	orrs.w	r2, r0, r1
 8000afc:	bf08      	it	eq
 8000afe:	4770      	bxeq	lr
 8000b00:	f04f 0300 	mov.w	r3, #0
 8000b04:	e00a      	b.n	8000b1c <__aeabi_l2f+0x14>
 8000b06:	bf00      	nop

08000b08 <__aeabi_l2f>:
 8000b08:	ea50 0201 	orrs.w	r2, r0, r1
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b14:	d502      	bpl.n	8000b1c <__aeabi_l2f+0x14>
 8000b16:	4240      	negs	r0, r0
 8000b18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b1c:	ea5f 0c01 	movs.w	ip, r1
 8000b20:	bf02      	ittt	eq
 8000b22:	4684      	moveq	ip, r0
 8000b24:	4601      	moveq	r1, r0
 8000b26:	2000      	moveq	r0, #0
 8000b28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b2c:	bf08      	it	eq
 8000b2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b36:	fabc f28c 	clz	r2, ip
 8000b3a:	3a08      	subs	r2, #8
 8000b3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b40:	db10      	blt.n	8000b64 <__aeabi_l2f+0x5c>
 8000b42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b46:	4463      	add	r3, ip
 8000b48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b4c:	f1c2 0220 	rsb	r2, r2, #32
 8000b50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b54:	fa20 f202 	lsr.w	r2, r0, r2
 8000b58:	eb43 0002 	adc.w	r0, r3, r2
 8000b5c:	bf08      	it	eq
 8000b5e:	f020 0001 	biceq.w	r0, r0, #1
 8000b62:	4770      	bx	lr
 8000b64:	f102 0220 	add.w	r2, r2, #32
 8000b68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6c:	f1c2 0220 	rsb	r2, r2, #32
 8000b70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b74:	fa21 f202 	lsr.w	r2, r1, r2
 8000b78:	eb43 0002 	adc.w	r0, r3, r2
 8000b7c:	bf08      	it	eq
 8000b7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b82:	4770      	bx	lr

08000b84 <__aeabi_fmul>:
 8000b84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000b92:	ea92 0f0c 	teqne	r2, ip
 8000b96:	ea93 0f0c 	teqne	r3, ip
 8000b9a:	d06f      	beq.n	8000c7c <__aeabi_fmul+0xf8>
 8000b9c:	441a      	add	r2, r3
 8000b9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000ba2:	0240      	lsls	r0, r0, #9
 8000ba4:	bf18      	it	ne
 8000ba6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000baa:	d01e      	beq.n	8000bea <__aeabi_fmul+0x66>
 8000bac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bb0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bb4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bb8:	fba0 3101 	umull	r3, r1, r0, r1
 8000bbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bc4:	bf3e      	ittt	cc
 8000bc6:	0049      	lslcc	r1, r1, #1
 8000bc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bcc:	005b      	lslcc	r3, r3, #1
 8000bce:	ea40 0001 	orr.w	r0, r0, r1
 8000bd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bd6:	2afd      	cmp	r2, #253	; 0xfd
 8000bd8:	d81d      	bhi.n	8000c16 <__aeabi_fmul+0x92>
 8000bda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	4770      	bx	lr
 8000bea:	f090 0f00 	teq	r0, #0
 8000bee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000bf2:	bf08      	it	eq
 8000bf4:	0249      	lsleq	r1, r1, #9
 8000bf6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000bfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000bfe:	3a7f      	subs	r2, #127	; 0x7f
 8000c00:	bfc2      	ittt	gt
 8000c02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c0a:	4770      	bxgt	lr
 8000c0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	3a01      	subs	r2, #1
 8000c16:	dc5d      	bgt.n	8000cd4 <__aeabi_fmul+0x150>
 8000c18:	f112 0f19 	cmn.w	r2, #25
 8000c1c:	bfdc      	itt	le
 8000c1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c22:	4770      	bxle	lr
 8000c24:	f1c2 0200 	rsb	r2, r2, #0
 8000c28:	0041      	lsls	r1, r0, #1
 8000c2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000c2e:	f1c2 0220 	rsb	r2, r2, #32
 8000c32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c3a:	f140 0000 	adc.w	r0, r0, #0
 8000c3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c42:	bf08      	it	eq
 8000c44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c48:	4770      	bx	lr
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c52:	bf02      	ittt	eq
 8000c54:	0040      	lsleq	r0, r0, #1
 8000c56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c5a:	3a01      	subeq	r2, #1
 8000c5c:	d0f9      	beq.n	8000c52 <__aeabi_fmul+0xce>
 8000c5e:	ea40 000c 	orr.w	r0, r0, ip
 8000c62:	f093 0f00 	teq	r3, #0
 8000c66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c6a:	bf02      	ittt	eq
 8000c6c:	0049      	lsleq	r1, r1, #1
 8000c6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c72:	3b01      	subeq	r3, #1
 8000c74:	d0f9      	beq.n	8000c6a <__aeabi_fmul+0xe6>
 8000c76:	ea41 010c 	orr.w	r1, r1, ip
 8000c7a:	e78f      	b.n	8000b9c <__aeabi_fmul+0x18>
 8000c7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c80:	ea92 0f0c 	teq	r2, ip
 8000c84:	bf18      	it	ne
 8000c86:	ea93 0f0c 	teqne	r3, ip
 8000c8a:	d00a      	beq.n	8000ca2 <__aeabi_fmul+0x11e>
 8000c8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000c90:	bf18      	it	ne
 8000c92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000c96:	d1d8      	bne.n	8000c4a <__aeabi_fmul+0xc6>
 8000c98:	ea80 0001 	eor.w	r0, r0, r1
 8000c9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ca0:	4770      	bx	lr
 8000ca2:	f090 0f00 	teq	r0, #0
 8000ca6:	bf17      	itett	ne
 8000ca8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cac:	4608      	moveq	r0, r1
 8000cae:	f091 0f00 	teqne	r1, #0
 8000cb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cb6:	d014      	beq.n	8000ce2 <__aeabi_fmul+0x15e>
 8000cb8:	ea92 0f0c 	teq	r2, ip
 8000cbc:	d101      	bne.n	8000cc2 <__aeabi_fmul+0x13e>
 8000cbe:	0242      	lsls	r2, r0, #9
 8000cc0:	d10f      	bne.n	8000ce2 <__aeabi_fmul+0x15e>
 8000cc2:	ea93 0f0c 	teq	r3, ip
 8000cc6:	d103      	bne.n	8000cd0 <__aeabi_fmul+0x14c>
 8000cc8:	024b      	lsls	r3, r1, #9
 8000cca:	bf18      	it	ne
 8000ccc:	4608      	movne	r0, r1
 8000cce:	d108      	bne.n	8000ce2 <__aeabi_fmul+0x15e>
 8000cd0:	ea80 0001 	eor.w	r0, r0, r1
 8000cd4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cd8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cdc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce0:	4770      	bx	lr
 8000ce2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cea:	4770      	bx	lr

08000cec <__aeabi_fdiv>:
 8000cec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cf4:	bf1e      	ittt	ne
 8000cf6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cfa:	ea92 0f0c 	teqne	r2, ip
 8000cfe:	ea93 0f0c 	teqne	r3, ip
 8000d02:	d069      	beq.n	8000dd8 <__aeabi_fdiv+0xec>
 8000d04:	eba2 0203 	sub.w	r2, r2, r3
 8000d08:	ea80 0c01 	eor.w	ip, r0, r1
 8000d0c:	0249      	lsls	r1, r1, #9
 8000d0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d12:	d037      	beq.n	8000d84 <__aeabi_fdiv+0x98>
 8000d14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d24:	428b      	cmp	r3, r1
 8000d26:	bf38      	it	cc
 8000d28:	005b      	lslcc	r3, r3, #1
 8000d2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d32:	428b      	cmp	r3, r1
 8000d34:	bf24      	itt	cs
 8000d36:	1a5b      	subcs	r3, r3, r1
 8000d38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d40:	bf24      	itt	cs
 8000d42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d4e:	bf24      	itt	cs
 8000d50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d5c:	bf24      	itt	cs
 8000d5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d66:	011b      	lsls	r3, r3, #4
 8000d68:	bf18      	it	ne
 8000d6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d6e:	d1e0      	bne.n	8000d32 <__aeabi_fdiv+0x46>
 8000d70:	2afd      	cmp	r2, #253	; 0xfd
 8000d72:	f63f af50 	bhi.w	8000c16 <__aeabi_fmul+0x92>
 8000d76:	428b      	cmp	r3, r1
 8000d78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d7c:	bf08      	it	eq
 8000d7e:	f020 0001 	biceq.w	r0, r0, #1
 8000d82:	4770      	bx	lr
 8000d84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d8c:	327f      	adds	r2, #127	; 0x7f
 8000d8e:	bfc2      	ittt	gt
 8000d90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d98:	4770      	bxgt	lr
 8000d9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d9e:	f04f 0300 	mov.w	r3, #0
 8000da2:	3a01      	subs	r2, #1
 8000da4:	e737      	b.n	8000c16 <__aeabi_fmul+0x92>
 8000da6:	f092 0f00 	teq	r2, #0
 8000daa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dae:	bf02      	ittt	eq
 8000db0:	0040      	lsleq	r0, r0, #1
 8000db2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000db6:	3a01      	subeq	r2, #1
 8000db8:	d0f9      	beq.n	8000dae <__aeabi_fdiv+0xc2>
 8000dba:	ea40 000c 	orr.w	r0, r0, ip
 8000dbe:	f093 0f00 	teq	r3, #0
 8000dc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dc6:	bf02      	ittt	eq
 8000dc8:	0049      	lsleq	r1, r1, #1
 8000dca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dce:	3b01      	subeq	r3, #1
 8000dd0:	d0f9      	beq.n	8000dc6 <__aeabi_fdiv+0xda>
 8000dd2:	ea41 010c 	orr.w	r1, r1, ip
 8000dd6:	e795      	b.n	8000d04 <__aeabi_fdiv+0x18>
 8000dd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ddc:	ea92 0f0c 	teq	r2, ip
 8000de0:	d108      	bne.n	8000df4 <__aeabi_fdiv+0x108>
 8000de2:	0242      	lsls	r2, r0, #9
 8000de4:	f47f af7d 	bne.w	8000ce2 <__aeabi_fmul+0x15e>
 8000de8:	ea93 0f0c 	teq	r3, ip
 8000dec:	f47f af70 	bne.w	8000cd0 <__aeabi_fmul+0x14c>
 8000df0:	4608      	mov	r0, r1
 8000df2:	e776      	b.n	8000ce2 <__aeabi_fmul+0x15e>
 8000df4:	ea93 0f0c 	teq	r3, ip
 8000df8:	d104      	bne.n	8000e04 <__aeabi_fdiv+0x118>
 8000dfa:	024b      	lsls	r3, r1, #9
 8000dfc:	f43f af4c 	beq.w	8000c98 <__aeabi_fmul+0x114>
 8000e00:	4608      	mov	r0, r1
 8000e02:	e76e      	b.n	8000ce2 <__aeabi_fmul+0x15e>
 8000e04:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e08:	bf18      	it	ne
 8000e0a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e0e:	d1ca      	bne.n	8000da6 <__aeabi_fdiv+0xba>
 8000e10:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e14:	f47f af5c 	bne.w	8000cd0 <__aeabi_fmul+0x14c>
 8000e18:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e1c:	f47f af3c 	bne.w	8000c98 <__aeabi_fmul+0x114>
 8000e20:	e75f      	b.n	8000ce2 <__aeabi_fmul+0x15e>
 8000e22:	bf00      	nop

08000e24 <__aeabi_f2uiz>:
 8000e24:	0042      	lsls	r2, r0, #1
 8000e26:	d20e      	bcs.n	8000e46 <__aeabi_f2uiz+0x22>
 8000e28:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e2c:	d30b      	bcc.n	8000e46 <__aeabi_f2uiz+0x22>
 8000e2e:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e32:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e36:	d409      	bmi.n	8000e4c <__aeabi_f2uiz+0x28>
 8000e38:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e3c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e40:	fa23 f002 	lsr.w	r0, r3, r2
 8000e44:	4770      	bx	lr
 8000e46:	f04f 0000 	mov.w	r0, #0
 8000e4a:	4770      	bx	lr
 8000e4c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e50:	d101      	bne.n	8000e56 <__aeabi_f2uiz+0x32>
 8000e52:	0242      	lsls	r2, r0, #9
 8000e54:	d102      	bne.n	8000e5c <__aeabi_f2uiz+0x38>
 8000e56:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5a:	4770      	bx	lr
 8000e5c:	f04f 0000 	mov.w	r0, #0
 8000e60:	4770      	bx	lr
 8000e62:	bf00      	nop

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295
 8000e78:	f000 b972 	b.w	8001160 <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f806 	bl	8000e94 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__udivmoddi4>:
 8000e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000e98:	9e08      	ldr	r6, [sp, #32]
 8000e9a:	460d      	mov	r5, r1
 8000e9c:	4604      	mov	r4, r0
 8000e9e:	468e      	mov	lr, r1
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d14c      	bne.n	8000f3e <__udivmoddi4+0xaa>
 8000ea4:	428a      	cmp	r2, r1
 8000ea6:	4694      	mov	ip, r2
 8000ea8:	d967      	bls.n	8000f7a <__udivmoddi4+0xe6>
 8000eaa:	fab2 f382 	clz	r3, r2
 8000eae:	b153      	cbz	r3, 8000ec6 <__udivmoddi4+0x32>
 8000eb0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000eb4:	f1c3 0220 	rsb	r2, r3, #32
 8000eb8:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ebc:	fa20 f202 	lsr.w	r2, r0, r2
 8000ec0:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ec4:	409c      	lsls	r4, r3
 8000ec6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000eca:	fbbe f1f7 	udiv	r1, lr, r7
 8000ece:	fa1f f58c 	uxth.w	r5, ip
 8000ed2:	fb07 ee11 	mls	lr, r7, r1, lr
 8000ed6:	fb01 f005 	mul.w	r0, r1, r5
 8000eda:	0c22      	lsrs	r2, r4, #16
 8000edc:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000ee0:	4290      	cmp	r0, r2
 8000ee2:	d90a      	bls.n	8000efa <__udivmoddi4+0x66>
 8000ee4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ee8:	f101 3eff 	add.w	lr, r1, #4294967295
 8000eec:	f080 8119 	bcs.w	8001122 <__udivmoddi4+0x28e>
 8000ef0:	4290      	cmp	r0, r2
 8000ef2:	f240 8116 	bls.w	8001122 <__udivmoddi4+0x28e>
 8000ef6:	3902      	subs	r1, #2
 8000ef8:	4462      	add	r2, ip
 8000efa:	1a12      	subs	r2, r2, r0
 8000efc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f00:	fb07 2210 	mls	r2, r7, r0, r2
 8000f04:	fb00 f505 	mul.w	r5, r0, r5
 8000f08:	b2a4      	uxth	r4, r4
 8000f0a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f0e:	42a5      	cmp	r5, r4
 8000f10:	d90a      	bls.n	8000f28 <__udivmoddi4+0x94>
 8000f12:	eb1c 0404 	adds.w	r4, ip, r4
 8000f16:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f1a:	f080 8104 	bcs.w	8001126 <__udivmoddi4+0x292>
 8000f1e:	42a5      	cmp	r5, r4
 8000f20:	f240 8101 	bls.w	8001126 <__udivmoddi4+0x292>
 8000f24:	4464      	add	r4, ip
 8000f26:	3802      	subs	r0, #2
 8000f28:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f2c:	2100      	movs	r1, #0
 8000f2e:	1b64      	subs	r4, r4, r5
 8000f30:	b11e      	cbz	r6, 8000f3a <__udivmoddi4+0xa6>
 8000f32:	40dc      	lsrs	r4, r3
 8000f34:	2300      	movs	r3, #0
 8000f36:	e9c6 4300 	strd	r4, r3, [r6]
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	428b      	cmp	r3, r1
 8000f40:	d908      	bls.n	8000f54 <__udivmoddi4+0xc0>
 8000f42:	2e00      	cmp	r6, #0
 8000f44:	f000 80ea 	beq.w	800111c <__udivmoddi4+0x288>
 8000f48:	2100      	movs	r1, #0
 8000f4a:	e9c6 0500 	strd	r0, r5, [r6]
 8000f4e:	4608      	mov	r0, r1
 8000f50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f54:	fab3 f183 	clz	r1, r3
 8000f58:	2900      	cmp	r1, #0
 8000f5a:	d148      	bne.n	8000fee <__udivmoddi4+0x15a>
 8000f5c:	42ab      	cmp	r3, r5
 8000f5e:	d302      	bcc.n	8000f66 <__udivmoddi4+0xd2>
 8000f60:	4282      	cmp	r2, r0
 8000f62:	f200 80f8 	bhi.w	8001156 <__udivmoddi4+0x2c2>
 8000f66:	1a84      	subs	r4, r0, r2
 8000f68:	eb65 0203 	sbc.w	r2, r5, r3
 8000f6c:	2001      	movs	r0, #1
 8000f6e:	4696      	mov	lr, r2
 8000f70:	2e00      	cmp	r6, #0
 8000f72:	d0e2      	beq.n	8000f3a <__udivmoddi4+0xa6>
 8000f74:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f78:	e7df      	b.n	8000f3a <__udivmoddi4+0xa6>
 8000f7a:	b902      	cbnz	r2, 8000f7e <__udivmoddi4+0xea>
 8000f7c:	deff      	udf	#255	; 0xff
 8000f7e:	fab2 f382 	clz	r3, r2
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	f040 808e 	bne.w	80010a4 <__udivmoddi4+0x210>
 8000f88:	1a88      	subs	r0, r1, r2
 8000f8a:	2101      	movs	r1, #1
 8000f8c:	0c17      	lsrs	r7, r2, #16
 8000f8e:	fa1f fe82 	uxth.w	lr, r2
 8000f92:	fbb0 f5f7 	udiv	r5, r0, r7
 8000f96:	fb07 0015 	mls	r0, r7, r5, r0
 8000f9a:	0c22      	lsrs	r2, r4, #16
 8000f9c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fa0:	fb0e f005 	mul.w	r0, lr, r5
 8000fa4:	4290      	cmp	r0, r2
 8000fa6:	d908      	bls.n	8000fba <__udivmoddi4+0x126>
 8000fa8:	eb1c 0202 	adds.w	r2, ip, r2
 8000fac:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fb0:	d202      	bcs.n	8000fb8 <__udivmoddi4+0x124>
 8000fb2:	4290      	cmp	r0, r2
 8000fb4:	f200 80cc 	bhi.w	8001150 <__udivmoddi4+0x2bc>
 8000fb8:	4645      	mov	r5, r8
 8000fba:	1a12      	subs	r2, r2, r0
 8000fbc:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fc0:	fb07 2210 	mls	r2, r7, r0, r2
 8000fc4:	fb0e fe00 	mul.w	lr, lr, r0
 8000fc8:	b2a4      	uxth	r4, r4
 8000fca:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fce:	45a6      	cmp	lr, r4
 8000fd0:	d908      	bls.n	8000fe4 <__udivmoddi4+0x150>
 8000fd2:	eb1c 0404 	adds.w	r4, ip, r4
 8000fd6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fda:	d202      	bcs.n	8000fe2 <__udivmoddi4+0x14e>
 8000fdc:	45a6      	cmp	lr, r4
 8000fde:	f200 80b4 	bhi.w	800114a <__udivmoddi4+0x2b6>
 8000fe2:	4610      	mov	r0, r2
 8000fe4:	eba4 040e 	sub.w	r4, r4, lr
 8000fe8:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000fec:	e7a0      	b.n	8000f30 <__udivmoddi4+0x9c>
 8000fee:	f1c1 0720 	rsb	r7, r1, #32
 8000ff2:	408b      	lsls	r3, r1
 8000ff4:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ff8:	ea4c 0c03 	orr.w	ip, ip, r3
 8000ffc:	fa25 fa07 	lsr.w	sl, r5, r7
 8001000:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001004:	fbba f8f9 	udiv	r8, sl, r9
 8001008:	408d      	lsls	r5, r1
 800100a:	fa20 f307 	lsr.w	r3, r0, r7
 800100e:	fb09 aa18 	mls	sl, r9, r8, sl
 8001012:	fa1f fe8c 	uxth.w	lr, ip
 8001016:	432b      	orrs	r3, r5
 8001018:	fa00 f501 	lsl.w	r5, r0, r1
 800101c:	fb08 f00e 	mul.w	r0, r8, lr
 8001020:	0c1c      	lsrs	r4, r3, #16
 8001022:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8001026:	42a0      	cmp	r0, r4
 8001028:	fa02 f201 	lsl.w	r2, r2, r1
 800102c:	d90b      	bls.n	8001046 <__udivmoddi4+0x1b2>
 800102e:	eb1c 0404 	adds.w	r4, ip, r4
 8001032:	f108 3aff 	add.w	sl, r8, #4294967295
 8001036:	f080 8086 	bcs.w	8001146 <__udivmoddi4+0x2b2>
 800103a:	42a0      	cmp	r0, r4
 800103c:	f240 8083 	bls.w	8001146 <__udivmoddi4+0x2b2>
 8001040:	f1a8 0802 	sub.w	r8, r8, #2
 8001044:	4464      	add	r4, ip
 8001046:	1a24      	subs	r4, r4, r0
 8001048:	b298      	uxth	r0, r3
 800104a:	fbb4 f3f9 	udiv	r3, r4, r9
 800104e:	fb09 4413 	mls	r4, r9, r3, r4
 8001052:	fb03 fe0e 	mul.w	lr, r3, lr
 8001056:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800105a:	45a6      	cmp	lr, r4
 800105c:	d908      	bls.n	8001070 <__udivmoddi4+0x1dc>
 800105e:	eb1c 0404 	adds.w	r4, ip, r4
 8001062:	f103 30ff 	add.w	r0, r3, #4294967295
 8001066:	d26a      	bcs.n	800113e <__udivmoddi4+0x2aa>
 8001068:	45a6      	cmp	lr, r4
 800106a:	d968      	bls.n	800113e <__udivmoddi4+0x2aa>
 800106c:	3b02      	subs	r3, #2
 800106e:	4464      	add	r4, ip
 8001070:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001074:	fba0 9302 	umull	r9, r3, r0, r2
 8001078:	eba4 040e 	sub.w	r4, r4, lr
 800107c:	429c      	cmp	r4, r3
 800107e:	46c8      	mov	r8, r9
 8001080:	469e      	mov	lr, r3
 8001082:	d354      	bcc.n	800112e <__udivmoddi4+0x29a>
 8001084:	d051      	beq.n	800112a <__udivmoddi4+0x296>
 8001086:	2e00      	cmp	r6, #0
 8001088:	d067      	beq.n	800115a <__udivmoddi4+0x2c6>
 800108a:	ebb5 0308 	subs.w	r3, r5, r8
 800108e:	eb64 040e 	sbc.w	r4, r4, lr
 8001092:	40cb      	lsrs	r3, r1
 8001094:	fa04 f707 	lsl.w	r7, r4, r7
 8001098:	431f      	orrs	r7, r3
 800109a:	40cc      	lsrs	r4, r1
 800109c:	e9c6 7400 	strd	r7, r4, [r6]
 80010a0:	2100      	movs	r1, #0
 80010a2:	e74a      	b.n	8000f3a <__udivmoddi4+0xa6>
 80010a4:	fa02 fc03 	lsl.w	ip, r2, r3
 80010a8:	f1c3 0020 	rsb	r0, r3, #32
 80010ac:	40c1      	lsrs	r1, r0
 80010ae:	409d      	lsls	r5, r3
 80010b0:	fa24 f000 	lsr.w	r0, r4, r0
 80010b4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010b8:	4328      	orrs	r0, r5
 80010ba:	fbb1 f5f7 	udiv	r5, r1, r7
 80010be:	fb07 1115 	mls	r1, r7, r5, r1
 80010c2:	fa1f fe8c 	uxth.w	lr, ip
 80010c6:	0c02      	lsrs	r2, r0, #16
 80010c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010cc:	fb05 f10e 	mul.w	r1, r5, lr
 80010d0:	4291      	cmp	r1, r2
 80010d2:	fa04 f403 	lsl.w	r4, r4, r3
 80010d6:	d908      	bls.n	80010ea <__udivmoddi4+0x256>
 80010d8:	eb1c 0202 	adds.w	r2, ip, r2
 80010dc:	f105 38ff 	add.w	r8, r5, #4294967295
 80010e0:	d22f      	bcs.n	8001142 <__udivmoddi4+0x2ae>
 80010e2:	4291      	cmp	r1, r2
 80010e4:	d92d      	bls.n	8001142 <__udivmoddi4+0x2ae>
 80010e6:	3d02      	subs	r5, #2
 80010e8:	4462      	add	r2, ip
 80010ea:	1a52      	subs	r2, r2, r1
 80010ec:	fbb2 f1f7 	udiv	r1, r2, r7
 80010f0:	fb07 2211 	mls	r2, r7, r1, r2
 80010f4:	b280      	uxth	r0, r0
 80010f6:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80010fa:	fb01 f20e 	mul.w	r2, r1, lr
 80010fe:	4282      	cmp	r2, r0
 8001100:	d908      	bls.n	8001114 <__udivmoddi4+0x280>
 8001102:	eb1c 0000 	adds.w	r0, ip, r0
 8001106:	f101 38ff 	add.w	r8, r1, #4294967295
 800110a:	d216      	bcs.n	800113a <__udivmoddi4+0x2a6>
 800110c:	4282      	cmp	r2, r0
 800110e:	d914      	bls.n	800113a <__udivmoddi4+0x2a6>
 8001110:	3902      	subs	r1, #2
 8001112:	4460      	add	r0, ip
 8001114:	1a80      	subs	r0, r0, r2
 8001116:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800111a:	e73a      	b.n	8000f92 <__udivmoddi4+0xfe>
 800111c:	4631      	mov	r1, r6
 800111e:	4630      	mov	r0, r6
 8001120:	e70b      	b.n	8000f3a <__udivmoddi4+0xa6>
 8001122:	4671      	mov	r1, lr
 8001124:	e6e9      	b.n	8000efa <__udivmoddi4+0x66>
 8001126:	4610      	mov	r0, r2
 8001128:	e6fe      	b.n	8000f28 <__udivmoddi4+0x94>
 800112a:	454d      	cmp	r5, r9
 800112c:	d2ab      	bcs.n	8001086 <__udivmoddi4+0x1f2>
 800112e:	ebb9 0802 	subs.w	r8, r9, r2
 8001132:	eb63 0e0c 	sbc.w	lr, r3, ip
 8001136:	3801      	subs	r0, #1
 8001138:	e7a5      	b.n	8001086 <__udivmoddi4+0x1f2>
 800113a:	4641      	mov	r1, r8
 800113c:	e7ea      	b.n	8001114 <__udivmoddi4+0x280>
 800113e:	4603      	mov	r3, r0
 8001140:	e796      	b.n	8001070 <__udivmoddi4+0x1dc>
 8001142:	4645      	mov	r5, r8
 8001144:	e7d1      	b.n	80010ea <__udivmoddi4+0x256>
 8001146:	46d0      	mov	r8, sl
 8001148:	e77d      	b.n	8001046 <__udivmoddi4+0x1b2>
 800114a:	4464      	add	r4, ip
 800114c:	3802      	subs	r0, #2
 800114e:	e749      	b.n	8000fe4 <__udivmoddi4+0x150>
 8001150:	3d02      	subs	r5, #2
 8001152:	4462      	add	r2, ip
 8001154:	e731      	b.n	8000fba <__udivmoddi4+0x126>
 8001156:	4608      	mov	r0, r1
 8001158:	e70a      	b.n	8000f70 <__udivmoddi4+0xdc>
 800115a:	4631      	mov	r1, r6
 800115c:	e6ed      	b.n	8000f3a <__udivmoddi4+0xa6>
 800115e:	bf00      	nop

08001160 <__aeabi_idiv0>:
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop

08001164 <initLCD>:
//HAL_I2C_Master_Receive

/*
 * Initializes LCD struct, resets the LCD, and sets it to 4 bit mode
 */
HAL_StatusTypeDef initLCD(LCD *dev, I2C_HandleTypeDef *handle, uint8_t nRows, uint8_t nCols, uint8_t address){
 8001164:	b580      	push	{r7, lr}
 8001166:	b086      	sub	sp, #24
 8001168:	af00      	add	r7, sp, #0
 800116a:	60f8      	str	r0, [r7, #12]
 800116c:	60b9      	str	r1, [r7, #8]
 800116e:	4611      	mov	r1, r2
 8001170:	461a      	mov	r2, r3
 8001172:	460b      	mov	r3, r1
 8001174:	71fb      	strb	r3, [r7, #7]
 8001176:	4613      	mov	r3, r2
 8001178:	71bb      	strb	r3, [r7, #6]
	dev->cols = nCols;
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	79ba      	ldrb	r2, [r7, #6]
 800117e:	705a      	strb	r2, [r3, #1]
	dev->rows = nRows;
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	79fa      	ldrb	r2, [r7, #7]
 8001184:	701a      	strb	r2, [r3, #0]
	dev->addr = address<<1;
 8001186:	f897 3020 	ldrb.w	r3, [r7, #32]
 800118a:	005b      	lsls	r3, r3, #1
 800118c:	b2da      	uxtb	r2, r3
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	709a      	strb	r2, [r3, #2]
	dev->handle = *handle;
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	68ba      	ldr	r2, [r7, #8]
 8001196:	3304      	adds	r3, #4
 8001198:	4611      	mov	r1, r2
 800119a:	2254      	movs	r2, #84	; 0x54
 800119c:	4618      	mov	r0, r3
 800119e:	f010 fdeb 	bl	8011d78 <memcpy>

	//page 46 of datasheet
	HAL_Delay(50);
 80011a2:	2032      	movs	r0, #50	; 0x32
 80011a4:	f003 fb46 	bl	8004834 <HAL_Delay>
	HAL_StatusTypeDef stat = write4BitsToInstructionReg(dev, 0b0000);
 80011a8:	2100      	movs	r1, #0
 80011aa:	68f8      	ldr	r0, [r7, #12]
 80011ac:	f000 f9a3 	bl	80014f6 <write4BitsToInstructionReg>
 80011b0:	4603      	mov	r3, r0
 80011b2:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80011b4:	2032      	movs	r0, #50	; 0x32
 80011b6:	f003 fb3d 	bl	8004834 <HAL_Delay>
	write4BitsToInstructionReg(dev, 0b0010);
 80011ba:	2102      	movs	r1, #2
 80011bc:	68f8      	ldr	r0, [r7, #12]
 80011be:	f000 f99a 	bl	80014f6 <write4BitsToInstructionReg>
	HAL_Delay(50);
 80011c2:	2032      	movs	r0, #50	; 0x32
 80011c4:	f003 fb36 	bl	8004834 <HAL_Delay>
	//	write4BitsToInstructionReg(dev, 0b0010);
	//	HAL_Delay(50);

	//clear display
	stat |= writeToRegister(dev, 0b00000001, INSTRUCTION);
 80011c8:	2200      	movs	r2, #0
 80011ca:	2101      	movs	r1, #1
 80011cc:	68f8      	ldr	r0, [r7, #12]
 80011ce:	f000 f950 	bl	8001472 <writeToRegister>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	7dfb      	ldrb	r3, [r7, #23]
 80011d8:	4313      	orrs	r3, r2
 80011da:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80011dc:	2032      	movs	r0, #50	; 0x32
 80011de:	f003 fb29 	bl	8004834 <HAL_Delay>

	stat |= writeToRegister(dev, 0b00000010, INSTRUCTION);
 80011e2:	2200      	movs	r2, #0
 80011e4:	2102      	movs	r1, #2
 80011e6:	68f8      	ldr	r0, [r7, #12]
 80011e8:	f000 f943 	bl	8001472 <writeToRegister>
 80011ec:	4603      	mov	r3, r0
 80011ee:	461a      	mov	r2, r3
 80011f0:	7dfb      	ldrb	r3, [r7, #23]
 80011f2:	4313      	orrs	r3, r2
 80011f4:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80011f6:	2032      	movs	r0, #50	; 0x32
 80011f8:	f003 fb1c 	bl	8004834 <HAL_Delay>

	stat |= writeToRegister(dev, 0b00001101, INSTRUCTION);
 80011fc:	2200      	movs	r2, #0
 80011fe:	210d      	movs	r1, #13
 8001200:	68f8      	ldr	r0, [r7, #12]
 8001202:	f000 f936 	bl	8001472 <writeToRegister>
 8001206:	4603      	mov	r3, r0
 8001208:	461a      	mov	r2, r3
 800120a:	7dfb      	ldrb	r3, [r7, #23]
 800120c:	4313      	orrs	r3, r2
 800120e:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8001210:	2032      	movs	r0, #50	; 0x32
 8001212:	f003 fb0f 	bl	8004834 <HAL_Delay>

	return stat;
 8001216:	7dfb      	ldrb	r3, [r7, #23]
}
 8001218:	4618      	mov	r0, r3
 800121a:	3718      	adds	r7, #24
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}

08001220 <setCursor>:
 * 			row 0: 0  1  2 ...19
 * 			row 1: 40 42 43...59
 * 			row 2: 20 22 23...39
 * 			row 3: 60 61 62...79
 */
HAL_StatusTypeDef setCursor(LCD *dev, uint8_t col, uint8_t row){
 8001220:	b580      	push	{r7, lr}
 8001222:	b084      	sub	sp, #16
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
 8001228:	460b      	mov	r3, r1
 800122a:	70fb      	strb	r3, [r7, #3]
 800122c:	4613      	mov	r3, r2
 800122e:	70bb      	strb	r3, [r7, #2]
	if(row < 0 || row > (dev->rows - 1) || col < 0 || col > (dev->cols - 1))return HAL_ERROR;
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	78ba      	ldrb	r2, [r7, #2]
 8001236:	429a      	cmp	r2, r3
 8001238:	d204      	bcs.n	8001244 <setCursor+0x24>
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	785b      	ldrb	r3, [r3, #1]
 800123e:	78fa      	ldrb	r2, [r7, #3]
 8001240:	429a      	cmp	r2, r3
 8001242:	d301      	bcc.n	8001248 <setCursor+0x28>
 8001244:	2301      	movs	r3, #1
 8001246:	e021      	b.n	800128c <setCursor+0x6c>
	uint8_t addr = 0;
 8001248:	2300      	movs	r3, #0
 800124a:	73fb      	strb	r3, [r7, #15]
	if(row == 0) addr = col;
 800124c:	78bb      	ldrb	r3, [r7, #2]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d102      	bne.n	8001258 <setCursor+0x38>
 8001252:	78fb      	ldrb	r3, [r7, #3]
 8001254:	73fb      	strb	r3, [r7, #15]
 8001256:	e013      	b.n	8001280 <setCursor+0x60>
	else if (row == 1) addr = col+64;
 8001258:	78bb      	ldrb	r3, [r7, #2]
 800125a:	2b01      	cmp	r3, #1
 800125c:	d103      	bne.n	8001266 <setCursor+0x46>
 800125e:	78fb      	ldrb	r3, [r7, #3]
 8001260:	3340      	adds	r3, #64	; 0x40
 8001262:	73fb      	strb	r3, [r7, #15]
 8001264:	e00c      	b.n	8001280 <setCursor+0x60>
	else if(row == 2) addr = col+20;
 8001266:	78bb      	ldrb	r3, [r7, #2]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d103      	bne.n	8001274 <setCursor+0x54>
 800126c:	78fb      	ldrb	r3, [r7, #3]
 800126e:	3314      	adds	r3, #20
 8001270:	73fb      	strb	r3, [r7, #15]
 8001272:	e005      	b.n	8001280 <setCursor+0x60>
	else if(row == 3) addr = col+84;
 8001274:	78bb      	ldrb	r3, [r7, #2]
 8001276:	2b03      	cmp	r3, #3
 8001278:	d102      	bne.n	8001280 <setCursor+0x60>
 800127a:	78fb      	ldrb	r3, [r7, #3]
 800127c:	3354      	adds	r3, #84	; 0x54
 800127e:	73fb      	strb	r3, [r7, #15]

	return setDDRAMAddress(dev, addr);
 8001280:	7bfb      	ldrb	r3, [r7, #15]
 8001282:	4619      	mov	r1, r3
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f000 f89b 	bl	80013c0 <setDDRAMAddress>
 800128a:	4603      	mov	r3, r0
}
 800128c:	4618      	mov	r0, r3
 800128e:	3710      	adds	r7, #16
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}

08001294 <LCDPrint>:

/**
 *	@brief	prints a given char array to the screen. Set the position first.
 */
HAL_StatusTypeDef LCDPrint(LCD *dev, char *pString){
 8001294:	b580      	push	{r7, lr}
 8001296:	b086      	sub	sp, #24
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
 800129c:	6039      	str	r1, [r7, #0]
	uint8_t len = strlen(pString);
 800129e:	6838      	ldr	r0, [r7, #0]
 80012a0:	f7fe ff6c 	bl	800017c <strlen>
 80012a4:	4603      	mov	r3, r0
 80012a6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef stat = HAL_OK;
 80012a8:	2300      	movs	r3, #0
 80012aa:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i<len; i++){
 80012ac:	2300      	movs	r3, #0
 80012ae:	613b      	str	r3, [r7, #16]
 80012b0:	e014      	b.n	80012dc <LCDPrint+0x48>
		stat |= writeToRegister(dev, *pString, DATA);
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	2201      	movs	r2, #1
 80012b8:	4619      	mov	r1, r3
 80012ba:	6878      	ldr	r0, [r7, #4]
 80012bc:	f000 f8d9 	bl	8001472 <writeToRegister>
 80012c0:	4603      	mov	r3, r0
 80012c2:	461a      	mov	r2, r3
 80012c4:	7dfb      	ldrb	r3, [r7, #23]
 80012c6:	4313      	orrs	r3, r2
 80012c8:	75fb      	strb	r3, [r7, #23]
		pString++;
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	3301      	adds	r3, #1
 80012ce:	603b      	str	r3, [r7, #0]
		HAL_Delay(1);
 80012d0:	2001      	movs	r0, #1
 80012d2:	f003 faaf 	bl	8004834 <HAL_Delay>
	for(int i = 0; i<len; i++){
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	3301      	adds	r3, #1
 80012da:	613b      	str	r3, [r7, #16]
 80012dc:	7bfb      	ldrb	r3, [r7, #15]
 80012de:	693a      	ldr	r2, [r7, #16]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	dbe6      	blt.n	80012b2 <LCDPrint+0x1e>
		//		delayMicroseconds(50); //takes 37 microseconds
	}
	return stat;
 80012e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	3718      	adds	r7, #24
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
	...

080012f0 <LCDPrintNumber>:

HAL_StatusTypeDef LCDPrintNumber(LCD *dev, uint16_t num, uint8_t col, uint8_t row, uint8_t spaceNum){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b088      	sub	sp, #32
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	4608      	mov	r0, r1
 80012fa:	4611      	mov	r1, r2
 80012fc:	461a      	mov	r2, r3
 80012fe:	4603      	mov	r3, r0
 8001300:	807b      	strh	r3, [r7, #2]
 8001302:	460b      	mov	r3, r1
 8001304:	707b      	strb	r3, [r7, #1]
 8001306:	4613      	mov	r3, r2
 8001308:	703b      	strb	r3, [r7, #0]

	int digits = 0;
 800130a:	2300      	movs	r3, #0
 800130c:	61fb      	str	r3, [r7, #28]
	uint16_t n = num;
 800130e:	887b      	ldrh	r3, [r7, #2]
 8001310:	837b      	strh	r3, [r7, #26]
	char numberString[12];

	while (n != 0) {
 8001312:	e008      	b.n	8001326 <LCDPrintNumber+0x36>
		n /= 10;
 8001314:	8b7b      	ldrh	r3, [r7, #26]
 8001316:	4a18      	ldr	r2, [pc, #96]	; (8001378 <LCDPrintNumber+0x88>)
 8001318:	fba2 2303 	umull	r2, r3, r2, r3
 800131c:	08db      	lsrs	r3, r3, #3
 800131e:	837b      	strh	r3, [r7, #26]
		digits++;
 8001320:	69fb      	ldr	r3, [r7, #28]
 8001322:	3301      	adds	r3, #1
 8001324:	61fb      	str	r3, [r7, #28]
	while (n != 0) {
 8001326:	8b7b      	ldrh	r3, [r7, #26]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f3      	bne.n	8001314 <LCDPrintNumber+0x24>
	}

	if (num == 0) {
 800132c:	887b      	ldrh	r3, [r7, #2]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d101      	bne.n	8001336 <LCDPrintNumber+0x46>
		digits = 1;
 8001332:	2301      	movs	r3, #1
 8001334:	61fb      	str	r3, [r7, #28]
	}

	sprintf(numberString, "%0*d", spaceNum , num);
 8001336:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800133a:	887b      	ldrh	r3, [r7, #2]
 800133c:	f107 000c 	add.w	r0, r7, #12
 8001340:	490e      	ldr	r1, [pc, #56]	; (800137c <LCDPrintNumber+0x8c>)
 8001342:	f010 fcb1 	bl	8011ca8 <siprintf>

	HAL_StatusTypeDef stat = setCursor(dev, col, row);
 8001346:	783a      	ldrb	r2, [r7, #0]
 8001348:	787b      	ldrb	r3, [r7, #1]
 800134a:	4619      	mov	r1, r3
 800134c:	6878      	ldr	r0, [r7, #4]
 800134e:	f7ff ff67 	bl	8001220 <setCursor>
 8001352:	4603      	mov	r3, r0
 8001354:	767b      	strb	r3, [r7, #25]

	stat |= LCDPrintAtPos(dev, numberString, col, row);
 8001356:	783b      	ldrb	r3, [r7, #0]
 8001358:	787a      	ldrb	r2, [r7, #1]
 800135a:	f107 010c 	add.w	r1, r7, #12
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f80e 	bl	8001380 <LCDPrintAtPos>
 8001364:	4603      	mov	r3, r0
 8001366:	461a      	mov	r2, r3
 8001368:	7e7b      	ldrb	r3, [r7, #25]
 800136a:	4313      	orrs	r3, r2
 800136c:	767b      	strb	r3, [r7, #25]



	return stat;
 800136e:	7e7b      	ldrb	r3, [r7, #25]
}
 8001370:	4618      	mov	r0, r3
 8001372:	3720      	adds	r7, #32
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	cccccccd 	.word	0xcccccccd
 800137c:	0801264c 	.word	0x0801264c

08001380 <LCDPrintAtPos>:

HAL_StatusTypeDef LCDPrintAtPos(LCD *dev, char *pString, uint8_t col, uint8_t row){
 8001380:	b580      	push	{r7, lr}
 8001382:	b086      	sub	sp, #24
 8001384:	af00      	add	r7, sp, #0
 8001386:	60f8      	str	r0, [r7, #12]
 8001388:	60b9      	str	r1, [r7, #8]
 800138a:	4611      	mov	r1, r2
 800138c:	461a      	mov	r2, r3
 800138e:	460b      	mov	r3, r1
 8001390:	71fb      	strb	r3, [r7, #7]
 8001392:	4613      	mov	r3, r2
 8001394:	71bb      	strb	r3, [r7, #6]
	//	uint8_t len = strlen(pString);
	HAL_StatusTypeDef stat = setCursor(dev, col, row);
 8001396:	79ba      	ldrb	r2, [r7, #6]
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	4619      	mov	r1, r3
 800139c:	68f8      	ldr	r0, [r7, #12]
 800139e:	f7ff ff3f 	bl	8001220 <setCursor>
 80013a2:	4603      	mov	r3, r0
 80013a4:	75fb      	strb	r3, [r7, #23]
	return stat | LCDPrint(dev, pString);
 80013a6:	68b9      	ldr	r1, [r7, #8]
 80013a8:	68f8      	ldr	r0, [r7, #12]
 80013aa:	f7ff ff73 	bl	8001294 <LCDPrint>
 80013ae:	4603      	mov	r3, r0
 80013b0:	461a      	mov	r2, r3
 80013b2:	7dfb      	ldrb	r3, [r7, #23]
 80013b4:	4313      	orrs	r3, r2
 80013b6:	b2db      	uxtb	r3, r3
}
 80013b8:	4618      	mov	r0, r3
 80013ba:	3718      	adds	r7, #24
 80013bc:	46bd      	mov	sp, r7
 80013be:	bd80      	pop	{r7, pc}

080013c0 <setDDRAMAddress>:
}

/**
 * @brief	sets the DDRAM address (cursor position). Address is 7 bits
 */
HAL_StatusTypeDef setDDRAMAddress(LCD *dev, uint8_t addr){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b084      	sub	sp, #16
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]
 80013c8:	460b      	mov	r3, r1
 80013ca:	70fb      	strb	r3, [r7, #3]
	//				  			command    7 bits of address
	uint8_t dataByte = SET_DDRAM_ADDR_BIT | (addr & 0b01111111);
 80013cc:	78fb      	ldrb	r3, [r7, #3]
 80013ce:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013d2:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef bruh = writeToRegister(dev, dataByte, INSTRUCTION);
 80013d4:	7bfb      	ldrb	r3, [r7, #15]
 80013d6:	2200      	movs	r2, #0
 80013d8:	4619      	mov	r1, r3
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f849 	bl	8001472 <writeToRegister>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73bb      	strb	r3, [r7, #14]
	return bruh;
 80013e4:	7bbb      	ldrb	r3, [r7, #14]
}
 80013e6:	4618      	mov	r0, r3
 80013e8:	3710      	adds	r7, #16
 80013ea:	46bd      	mov	sp, r7
 80013ec:	bd80      	pop	{r7, pc}

080013ee <clearDisplay>:
 * 			sets the cursor to home (top left corner)
 * 			7		6		5		4		3		2		1		0
 * 	byte1	db7		db6		db5		db4		BT		EN		RW		RS
 * 	byte2	db3		db2		db1		db0
 */
HAL_StatusTypeDef clearDisplay(LCD *dev){
 80013ee:	b580      	push	{r7, lr}
 80013f0:	b084      	sub	sp, #16
 80013f2:	af00      	add	r7, sp, #0
 80013f4:	6078      	str	r0, [r7, #4]
	uint8_t dataByte = 0b00000001; //instruction from datasheet
 80013f6:	2301      	movs	r3, #1
 80013f8:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef bruh = writeToRegister(dev, dataByte, 0);
 80013fa:	7bfb      	ldrb	r3, [r7, #15]
 80013fc:	2200      	movs	r2, #0
 80013fe:	4619      	mov	r1, r3
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f000 f836 	bl	8001472 <writeToRegister>
 8001406:	4603      	mov	r3, r0
 8001408:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 800140a:	2001      	movs	r0, #1
 800140c:	f003 fa12 	bl	8004834 <HAL_Delay>
	return bruh;
 8001410:	7bbb      	ldrb	r3, [r7, #14]
}
 8001412:	4618      	mov	r0, r3
 8001414:	3710      	adds	r7, #16
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}

0800141a <LCDCursorOffBlinkOn>:
	uint8_t dataByte = 0b00001111;
	HAL_StatusTypeDef bruh = writeToRegister(dev, dataByte, 0);
	HAL_Delay(1);
	return bruh;
}
HAL_StatusTypeDef LCDCursorOffBlinkOn(LCD *dev){
 800141a:	b580      	push	{r7, lr}
 800141c:	b084      	sub	sp, #16
 800141e:	af00      	add	r7, sp, #0
 8001420:	6078      	str	r0, [r7, #4]
	uint8_t dataByte = 0b00001101;
 8001422:	230d      	movs	r3, #13
 8001424:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef bruh = writeToRegister(dev, dataByte, 0);
 8001426:	7bfb      	ldrb	r3, [r7, #15]
 8001428:	2200      	movs	r2, #0
 800142a:	4619      	mov	r1, r3
 800142c:	6878      	ldr	r0, [r7, #4]
 800142e:	f000 f820 	bl	8001472 <writeToRegister>
 8001432:	4603      	mov	r3, r0
 8001434:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 8001436:	2001      	movs	r0, #1
 8001438:	f003 f9fc 	bl	8004834 <HAL_Delay>
	return bruh;
 800143c:	7bbb      	ldrb	r3, [r7, #14]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}

08001446 <LCDCursorOffBlinkOff>:
HAL_StatusTypeDef LCDCursorOffBlinkOff(LCD *dev){
 8001446:	b580      	push	{r7, lr}
 8001448:	b084      	sub	sp, #16
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
	uint8_t dataByte = 0b00001100;
 800144e:	230c      	movs	r3, #12
 8001450:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef bruh = writeToRegister(dev, dataByte, 0);
 8001452:	7bfb      	ldrb	r3, [r7, #15]
 8001454:	2200      	movs	r2, #0
 8001456:	4619      	mov	r1, r3
 8001458:	6878      	ldr	r0, [r7, #4]
 800145a:	f000 f80a 	bl	8001472 <writeToRegister>
 800145e:	4603      	mov	r3, r0
 8001460:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 8001462:	2001      	movs	r0, #1
 8001464:	f003 f9e6 	bl	8004834 <HAL_Delay>
	return bruh;
 8001468:	7bbb      	ldrb	r3, [r7, #14]
}
 800146a:	4618      	mov	r0, r3
 800146c:	3710      	adds	r7, #16
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}

08001472 <writeToRegister>:
 * @brief	mid level function writes db0-db7 (byte) to a register (rs)
 * @param 	dev - pointer to the LCD object
 * @param	byte - what to send to pins db0-db7
 * @param	rs - register select. 1 for data, 0 for instruction
 */
HAL_StatusTypeDef writeToRegister(LCD *dev, uint8_t byte, uint8_t rs){
 8001472:	b580      	push	{r7, lr}
 8001474:	b084      	sub	sp, #16
 8001476:	af00      	add	r7, sp, #0
 8001478:	6078      	str	r0, [r7, #4]
 800147a:	460b      	mov	r3, r1
 800147c:	70fb      	strb	r3, [r7, #3]
 800147e:	4613      	mov	r3, r2
 8001480:	70bb      	strb	r3, [r7, #2]
	//	uint8_t second = ((byte & 0x0F) << 4) | rs<<RS | 1<<BT;
	//	first  &= ~(1<<RW);
	//	second &= ~(1<<RW);	//make sure write is high
	//	HAL_StatusTypeDef bruh = writeAByte(dev, first);
	//	bruh |= writeAByte(dev, second);
	HAL_StatusTypeDef bruh = HAL_OK;
 8001482:	2300      	movs	r3, #0
 8001484:	73fb      	strb	r3, [r7, #15]
	if(rs == INSTRUCTION){
 8001486:	78bb      	ldrb	r3, [r7, #2]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d116      	bne.n	80014ba <writeToRegister+0x48>
		bruh = write4BitsToInstructionReg(dev, (byte & 0xF0) >> 4);
 800148c:	78fb      	ldrb	r3, [r7, #3]
 800148e:	091b      	lsrs	r3, r3, #4
 8001490:	b2db      	uxtb	r3, r3
 8001492:	4619      	mov	r1, r3
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f000 f82e 	bl	80014f6 <write4BitsToInstructionReg>
 800149a:	4603      	mov	r3, r0
 800149c:	73fb      	strb	r3, [r7, #15]
		bruh |= write4BitsToInstructionReg(dev, byte & 0x0F);
 800149e:	78fb      	ldrb	r3, [r7, #3]
 80014a0:	f003 030f 	and.w	r3, r3, #15
 80014a4:	b2db      	uxtb	r3, r3
 80014a6:	4619      	mov	r1, r3
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f000 f824 	bl	80014f6 <write4BitsToInstructionReg>
 80014ae:	4603      	mov	r3, r0
 80014b0:	461a      	mov	r2, r3
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4313      	orrs	r3, r2
 80014b6:	73fb      	strb	r3, [r7, #15]
 80014b8:	e018      	b.n	80014ec <writeToRegister+0x7a>
	}
	else if(rs == DATA){
 80014ba:	78bb      	ldrb	r3, [r7, #2]
 80014bc:	2b01      	cmp	r3, #1
 80014be:	d115      	bne.n	80014ec <writeToRegister+0x7a>
		bruh = write4BitsToDataReg(dev, (byte & 0xF0) >> 4);
 80014c0:	78fb      	ldrb	r3, [r7, #3]
 80014c2:	091b      	lsrs	r3, r3, #4
 80014c4:	b2db      	uxtb	r3, r3
 80014c6:	4619      	mov	r1, r3
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f000 f86b 	bl	80015a4 <write4BitsToDataReg>
 80014ce:	4603      	mov	r3, r0
 80014d0:	73fb      	strb	r3, [r7, #15]
		bruh |= write4BitsToDataReg(dev, byte & 0x0F);
 80014d2:	78fb      	ldrb	r3, [r7, #3]
 80014d4:	f003 030f 	and.w	r3, r3, #15
 80014d8:	b2db      	uxtb	r3, r3
 80014da:	4619      	mov	r1, r3
 80014dc:	6878      	ldr	r0, [r7, #4]
 80014de:	f000 f861 	bl	80015a4 <write4BitsToDataReg>
 80014e2:	4603      	mov	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	4313      	orrs	r3, r2
 80014ea:	73fb      	strb	r3, [r7, #15]
	}
	return bruh;
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ee:	4618      	mov	r0, r3
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}

080014f6 <write4BitsToInstructionReg>:

/**
 * @brief	puts the LS nibble of bits onto db4-7
 */
HAL_StatusTypeDef write4BitsToInstructionReg(LCD *dev, uint8_t bits){
 80014f6:	b580      	push	{r7, lr}
 80014f8:	b086      	sub	sp, #24
 80014fa:	af02      	add	r7, sp, #8
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	460b      	mov	r3, r1
 8001500:	70fb      	strb	r3, [r7, #3]
	uint8_t expanderVal = 0;
 8001502:	2300      	movs	r3, #0
 8001504:	73bb      	strb	r3, [r7, #14]
	expanderVal |= (bits & 0x0F) << 4;
 8001506:	78fb      	ldrb	r3, [r7, #3]
 8001508:	011b      	lsls	r3, r3, #4
 800150a:	b25a      	sxtb	r2, r3
 800150c:	7bbb      	ldrb	r3, [r7, #14]
 800150e:	b25b      	sxtb	r3, r3
 8001510:	4313      	orrs	r3, r2
 8001512:	b25b      	sxtb	r3, r3
 8001514:	b2db      	uxtb	r3, r3
 8001516:	73bb      	strb	r3, [r7, #14]
	expanderVal |= 1 << BT;
 8001518:	7bbb      	ldrb	r3, [r7, #14]
 800151a:	f043 0308 	orr.w	r3, r3, #8
 800151e:	b2db      	uxtb	r3, r3
 8001520:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	1d18      	adds	r0, r3, #4
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	b299      	uxth	r1, r3
 800152c:	f107 020e 	add.w	r2, r7, #14
 8001530:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001534:	9300      	str	r3, [sp, #0]
 8001536:	2301      	movs	r3, #1
 8001538:	f004 f998 	bl	800586c <HAL_I2C_Master_Transmit>
 800153c:	4603      	mov	r3, r0
 800153e:	73fb      	strb	r3, [r7, #15]
	expanderVal |= 1<<EN;
 8001540:	7bbb      	ldrb	r3, [r7, #14]
 8001542:	f043 0304 	orr.w	r3, r3, #4
 8001546:	b2db      	uxtb	r3, r3
 8001548:	73bb      	strb	r3, [r7, #14]
	stat |= HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	1d18      	adds	r0, r3, #4
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	789b      	ldrb	r3, [r3, #2]
 8001552:	b299      	uxth	r1, r3
 8001554:	f107 020e 	add.w	r2, r7, #14
 8001558:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800155c:	9300      	str	r3, [sp, #0]
 800155e:	2301      	movs	r3, #1
 8001560:	f004 f984 	bl	800586c <HAL_I2C_Master_Transmit>
 8001564:	4603      	mov	r3, r0
 8001566:	461a      	mov	r2, r3
 8001568:	7bfb      	ldrb	r3, [r7, #15]
 800156a:	4313      	orrs	r3, r2
 800156c:	73fb      	strb	r3, [r7, #15]
	expanderVal &= ~(1<<EN);
 800156e:	7bbb      	ldrb	r3, [r7, #14]
 8001570:	f023 0304 	bic.w	r3, r3, #4
 8001574:	b2db      	uxtb	r3, r3
 8001576:	73bb      	strb	r3, [r7, #14]
	return stat | HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	1d18      	adds	r0, r3, #4
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	789b      	ldrb	r3, [r3, #2]
 8001580:	b299      	uxth	r1, r3
 8001582:	f107 020e 	add.w	r2, r7, #14
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	9300      	str	r3, [sp, #0]
 800158c:	2301      	movs	r3, #1
 800158e:	f004 f96d 	bl	800586c <HAL_I2C_Master_Transmit>
 8001592:	4603      	mov	r3, r0
 8001594:	461a      	mov	r2, r3
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	4313      	orrs	r3, r2
 800159a:	b2db      	uxtb	r3, r3
}
 800159c:	4618      	mov	r0, r3
 800159e:	3710      	adds	r7, #16
 80015a0:	46bd      	mov	sp, r7
 80015a2:	bd80      	pop	{r7, pc}

080015a4 <write4BitsToDataReg>:

HAL_StatusTypeDef write4BitsToDataReg(LCD *dev, uint8_t bits){
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b086      	sub	sp, #24
 80015a8:	af02      	add	r7, sp, #8
 80015aa:	6078      	str	r0, [r7, #4]
 80015ac:	460b      	mov	r3, r1
 80015ae:	70fb      	strb	r3, [r7, #3]
	uint8_t expanderVal = 0;
 80015b0:	2300      	movs	r3, #0
 80015b2:	73bb      	strb	r3, [r7, #14]
	expanderVal |= (bits & 0x0F)<<4;
 80015b4:	78fb      	ldrb	r3, [r7, #3]
 80015b6:	011b      	lsls	r3, r3, #4
 80015b8:	b25a      	sxtb	r2, r3
 80015ba:	7bbb      	ldrb	r3, [r7, #14]
 80015bc:	b25b      	sxtb	r3, r3
 80015be:	4313      	orrs	r3, r2
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	73bb      	strb	r3, [r7, #14]
	expanderVal |= 1 << BT | 1 << RS;
 80015c6:	7bbb      	ldrb	r3, [r7, #14]
 80015c8:	f043 0309 	orr.w	r3, r3, #9
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	1d18      	adds	r0, r3, #4
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	789b      	ldrb	r3, [r3, #2]
 80015d8:	b299      	uxth	r1, r3
 80015da:	f107 020e 	add.w	r2, r7, #14
 80015de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	2301      	movs	r3, #1
 80015e6:	f004 f941 	bl	800586c <HAL_I2C_Master_Transmit>
 80015ea:	4603      	mov	r3, r0
 80015ec:	73fb      	strb	r3, [r7, #15]
	expanderVal |= 1<<EN;
 80015ee:	7bbb      	ldrb	r3, [r7, #14]
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	73bb      	strb	r3, [r7, #14]
	stat |= HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	1d18      	adds	r0, r3, #4
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	789b      	ldrb	r3, [r3, #2]
 8001600:	b299      	uxth	r1, r3
 8001602:	f107 020e 	add.w	r2, r7, #14
 8001606:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800160a:	9300      	str	r3, [sp, #0]
 800160c:	2301      	movs	r3, #1
 800160e:	f004 f92d 	bl	800586c <HAL_I2C_Master_Transmit>
 8001612:	4603      	mov	r3, r0
 8001614:	461a      	mov	r2, r3
 8001616:	7bfb      	ldrb	r3, [r7, #15]
 8001618:	4313      	orrs	r3, r2
 800161a:	73fb      	strb	r3, [r7, #15]
	expanderVal &= ~(1<<EN);
 800161c:	7bbb      	ldrb	r3, [r7, #14]
 800161e:	f023 0304 	bic.w	r3, r3, #4
 8001622:	b2db      	uxtb	r3, r3
 8001624:	73bb      	strb	r3, [r7, #14]
	return stat | HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	1d18      	adds	r0, r3, #4
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	789b      	ldrb	r3, [r3, #2]
 800162e:	b299      	uxth	r1, r3
 8001630:	f107 020e 	add.w	r2, r7, #14
 8001634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001638:	9300      	str	r3, [sp, #0]
 800163a:	2301      	movs	r3, #1
 800163c:	f004 f916 	bl	800586c <HAL_I2C_Master_Transmit>
 8001640:	4603      	mov	r3, r0
 8001642:	461a      	mov	r2, r3
 8001644:	7bfb      	ldrb	r3, [r7, #15]
 8001646:	4313      	orrs	r3, r2
 8001648:	b2db      	uxtb	r3, r3
}
 800164a:	4618      	mov	r0, r3
 800164c:	3710      	adds	r7, #16
 800164e:	46bd      	mov	sp, r7
 8001650:	bd80      	pop	{r7, pc}
	...

08001654 <setTimerFrequencyPulseWidth>:
 * @brief 	sets a given timer to a frequency of freq (Hz) and pulseWidth (us). Set pulsewidth to 0 to turn off
 * @param	pTim pointer to the timer struct
 * @param	freq frequency in hertz
 * @param	pulseWidth desired pulsewidth in microseconds. Be careful of low frequencies!
 */
void setTimerFrequencyPulseWidth(TIM_HandleTypeDef* pTim, uint16_t freq, uint16_t pulseWidth, uint32_t channel){
 8001654:	b580      	push	{r7, lr}
 8001656:	b08a      	sub	sp, #40	; 0x28
 8001658:	af00      	add	r7, sp, #0
 800165a:	60f8      	str	r0, [r7, #12]
 800165c:	607b      	str	r3, [r7, #4]
 800165e:	460b      	mov	r3, r1
 8001660:	817b      	strh	r3, [r7, #10]
 8001662:	4613      	mov	r3, r2
 8001664:	813b      	strh	r3, [r7, #8]

	//foo->bar = (*foo).bar
	//frequency of auto reload (pwm frequency) = FCLK/(PSC+1)/(ARR+1)

	//disable interrupts. turn timer off first tho
	pTim->Instance->CCR1 = 0;
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	2200      	movs	r2, #0
 800166c:	635a      	str	r2, [r3, #52]	; 0x34
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800166e:	b672      	cpsid	i
}
 8001670:	bf00      	nop

	__disable_irq();


	if(pulseWidth != 0 && freq > 0){
 8001672:	893b      	ldrh	r3, [r7, #8]
 8001674:	2b00      	cmp	r3, #0
 8001676:	f000 8098 	beq.w	80017aa <setTimerFrequencyPulseWidth+0x156>
 800167a:	897b      	ldrh	r3, [r7, #10]
 800167c:	2b00      	cmp	r3, #0
 800167e:	f000 8094 	beq.w	80017aa <setTimerFrequencyPulseWidth+0x156>

		uint16_t autoReloadReg, prescaler;
		//set bounds
		//if(freq < 1)freq = 1;
		if(freq>MAX_FREQUENCY) freq = MAX_FREQUENCY;
 8001682:	897b      	ldrh	r3, [r7, #10]
 8001684:	f240 32b6 	movw	r2, #950	; 0x3b6
 8001688:	4293      	cmp	r3, r2
 800168a:	d902      	bls.n	8001692 <setTimerFrequencyPulseWidth+0x3e>
 800168c:	f240 33b6 	movw	r3, #950	; 0x3b6
 8001690:	817b      	strh	r3, [r7, #10]

		int minPulseWidth = 16/freq;	//for low frequencies. We only have an accuracy of 16us at 1 Hz
 8001692:	897b      	ldrh	r3, [r7, #10]
 8001694:	2210      	movs	r2, #16
 8001696:	fb92 f3f3 	sdiv	r3, r2, r3
 800169a:	623b      	str	r3, [r7, #32]
		if(minPulseWidth < 5)minPulseWidth = 5;
 800169c:	6a3b      	ldr	r3, [r7, #32]
 800169e:	2b04      	cmp	r3, #4
 80016a0:	dc01      	bgt.n	80016a6 <setTimerFrequencyPulseWidth+0x52>
 80016a2:	2305      	movs	r3, #5
 80016a4:	623b      	str	r3, [r7, #32]

		if(pulseWidth > MAX_PULSE_WIDTH) pulseWidth = MAX_PULSE_WIDTH;
 80016a6:	893b      	ldrh	r3, [r7, #8]
 80016a8:	2b7d      	cmp	r3, #125	; 0x7d
 80016aa:	d901      	bls.n	80016b0 <setTimerFrequencyPulseWidth+0x5c>
 80016ac:	237d      	movs	r3, #125	; 0x7d
 80016ae:	813b      	strh	r3, [r7, #8]
		if(pulseWidth < minPulseWidth) pulseWidth = minPulseWidth;
 80016b0:	893b      	ldrh	r3, [r7, #8]
 80016b2:	6a3a      	ldr	r2, [r7, #32]
 80016b4:	429a      	cmp	r2, r3
 80016b6:	dd01      	ble.n	80016bc <setTimerFrequencyPulseWidth+0x68>
 80016b8:	6a3b      	ldr	r3, [r7, #32]
 80016ba:	813b      	strh	r3, [r7, #8]

		//Precalculated prescalers. We could calculate these every function call,
		//but why waste the time.
		if(freq == 1)        prescaler = 512 - 1;
 80016bc:	897b      	ldrh	r3, [r7, #10]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d103      	bne.n	80016ca <setTimerFrequencyPulseWidth+0x76>
 80016c2:	f240 13ff 	movw	r3, #511	; 0x1ff
 80016c6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016c8:	e032      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 3)   prescaler = 256-1;
 80016ca:	897b      	ldrh	r3, [r7, #10]
 80016cc:	2b03      	cmp	r3, #3
 80016ce:	d802      	bhi.n	80016d6 <setTimerFrequencyPulseWidth+0x82>
 80016d0:	23ff      	movs	r3, #255	; 0xff
 80016d2:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016d4:	e02c      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 7)   prescaler = 128-1;
 80016d6:	897b      	ldrh	r3, [r7, #10]
 80016d8:	2b07      	cmp	r3, #7
 80016da:	d802      	bhi.n	80016e2 <setTimerFrequencyPulseWidth+0x8e>
 80016dc:	237f      	movs	r3, #127	; 0x7f
 80016de:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016e0:	e026      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 15)  prescaler = 64-1;
 80016e2:	897b      	ldrh	r3, [r7, #10]
 80016e4:	2b0f      	cmp	r3, #15
 80016e6:	d802      	bhi.n	80016ee <setTimerFrequencyPulseWidth+0x9a>
 80016e8:	233f      	movs	r3, #63	; 0x3f
 80016ea:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016ec:	e020      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 32)  prescaler = 32-1;
 80016ee:	897b      	ldrh	r3, [r7, #10]
 80016f0:	2b20      	cmp	r3, #32
 80016f2:	d802      	bhi.n	80016fa <setTimerFrequencyPulseWidth+0xa6>
 80016f4:	231f      	movs	r3, #31
 80016f6:	84fb      	strh	r3, [r7, #38]	; 0x26
 80016f8:	e01a      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 63)  prescaler = 16-1;
 80016fa:	897b      	ldrh	r3, [r7, #10]
 80016fc:	2b3f      	cmp	r3, #63	; 0x3f
 80016fe:	d802      	bhi.n	8001706 <setTimerFrequencyPulseWidth+0xb2>
 8001700:	230f      	movs	r3, #15
 8001702:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001704:	e014      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 127) prescaler = 8-1;
 8001706:	897b      	ldrh	r3, [r7, #10]
 8001708:	2b7f      	cmp	r3, #127	; 0x7f
 800170a:	d802      	bhi.n	8001712 <setTimerFrequencyPulseWidth+0xbe>
 800170c:	2307      	movs	r3, #7
 800170e:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001710:	e00e      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 255) prescaler = 4-1;
 8001712:	897b      	ldrh	r3, [r7, #10]
 8001714:	2bff      	cmp	r3, #255	; 0xff
 8001716:	d802      	bhi.n	800171e <setTimerFrequencyPulseWidth+0xca>
 8001718:	2303      	movs	r3, #3
 800171a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800171c:	e008      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else if(freq <= 511) prescaler = 2-1;
 800171e:	897b      	ldrh	r3, [r7, #10]
 8001720:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001724:	d202      	bcs.n	800172c <setTimerFrequencyPulseWidth+0xd8>
 8001726:	2301      	movs	r3, #1
 8001728:	84fb      	strh	r3, [r7, #38]	; 0x26
 800172a:	e001      	b.n	8001730 <setTimerFrequencyPulseWidth+0xdc>
		else prescaler = 1-1;
 800172c:	2300      	movs	r3, #0
 800172e:	84fb      	strh	r3, [r7, #38]	; 0x26

		//always round down
		autoReloadReg = CPU_CLK / ((prescaler+1) * freq);
 8001730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001732:	3301      	adds	r3, #1
 8001734:	897a      	ldrh	r2, [r7, #10]
 8001736:	fb02 f303 	mul.w	r3, r2, r3
 800173a:	4a24      	ldr	r2, [pc, #144]	; (80017cc <setTimerFrequencyPulseWidth+0x178>)
 800173c:	fb92 f3f3 	sdiv	r3, r2, r3
 8001740:	83fb      	strh	r3, [r7, #30]

		//float usPerBit = ((float)(prescaler+1) / 32000000.0) * 1000000.0;
		//int bits = (int)((float)pulseWidth / usPerBit);
		float usPerBit = (float)(prescaler+1) / 32.0;
 8001742:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001744:	3301      	adds	r3, #1
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9c8 	bl	8000adc <__aeabi_i2f>
 800174c:	4603      	mov	r3, r0
 800174e:	f04f 4184 	mov.w	r1, #1107296256	; 0x42000000
 8001752:	4618      	mov	r0, r3
 8001754:	f7ff faca 	bl	8000cec <__aeabi_fdiv>
 8001758:	4603      	mov	r3, r0
 800175a:	61bb      	str	r3, [r7, #24]
		uint32_t bits = (uint32_t)((float)pulseWidth / usPerBit);
 800175c:	893b      	ldrh	r3, [r7, #8]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f9b8 	bl	8000ad4 <__aeabi_ui2f>
 8001764:	4603      	mov	r3, r0
 8001766:	69b9      	ldr	r1, [r7, #24]
 8001768:	4618      	mov	r0, r3
 800176a:	f7ff fabf 	bl	8000cec <__aeabi_fdiv>
 800176e:	4603      	mov	r3, r0
 8001770:	4618      	mov	r0, r3
 8001772:	f7ff fb57 	bl	8000e24 <__aeabi_f2uiz>
 8001776:	4603      	mov	r3, r0
 8001778:	617b      	str	r3, [r7, #20]

		pTim->Instance->ARR = autoReloadReg;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	8bfa      	ldrh	r2, [r7, #30]
 8001780:	62da      	str	r2, [r3, #44]	; 0x2c
		pTim->Instance->PSC = prescaler;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001788:	629a      	str	r2, [r3, #40]	; 0x28
		if(channel == TIM_CHANNEL_1)     pTim->Instance->CCR1 = bits;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d104      	bne.n	800179a <setTimerFrequencyPulseWidth+0x146>
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	697a      	ldr	r2, [r7, #20]
 8001796:	635a      	str	r2, [r3, #52]	; 0x34
	if(pulseWidth != 0 && freq > 0){
 8001798:	e010      	b.n	80017bc <setTimerFrequencyPulseWidth+0x168>
		else if(channel == TIM_CHANNEL_2)pTim->Instance->CCR2 = bits;
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	2b04      	cmp	r3, #4
 800179e:	d10d      	bne.n	80017bc <setTimerFrequencyPulseWidth+0x168>
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	697a      	ldr	r2, [r7, #20]
 80017a6:	639a      	str	r2, [r3, #56]	; 0x38
	if(pulseWidth != 0 && freq > 0){
 80017a8:	e008      	b.n	80017bc <setTimerFrequencyPulseWidth+0x168>
	}
	else{
		pTim->Instance->CCR1 = 0;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	2200      	movs	r2, #0
 80017b0:	635a      	str	r2, [r3, #52]	; 0x34
		pTim->Instance->CCR2 = 0;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	2200      	movs	r2, #0
 80017b8:	639a      	str	r2, [r3, #56]	; 0x38
 80017ba:	e000      	b.n	80017be <setTimerFrequencyPulseWidth+0x16a>
	if(pulseWidth != 0 && freq > 0){
 80017bc:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 80017be:	b662      	cpsie	i
}
 80017c0:	bf00      	nop
		//		HAL_TIM_PWM_Stop(ptim, channel);
	}
	//enable interrupts
	__enable_irq();
}
 80017c2:	bf00      	nop
 80017c4:	3728      	adds	r7, #40	; 0x28
 80017c6:	46bd      	mov	sp, r7
 80017c8:	bd80      	pop	{r7, pc}
 80017ca:	bf00      	nop
 80017cc:	01e84800 	.word	0x01e84800

080017d0 <findTimForThisCombo>:
			break;
		} //end of switch
	} //end if velocity == 0
}

TIM_HandleTypeDef *findTimForThisCombo(uint8_t track, uint16_t freq, uint8_t velocity){
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	71fb      	strb	r3, [r7, #7]
 80017da:	460b      	mov	r3, r1
 80017dc:	80bb      	strh	r3, [r7, #4]
 80017de:	4613      	mov	r3, r2
 80017e0:	71bb      	strb	r3, [r7, #6]
	//if velocity is 0, turn off that coil
	//if velocity is not 0, push the note down the chain
	//scaling not yet implemented
	if (velocity != 0) {
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d06a      	beq.n	80018be <findTimForThisCombo+0xee>
		switch (track) {
 80017e8:	79fb      	ldrb	r3, [r7, #7]
 80017ea:	3b01      	subs	r3, #1
 80017ec:	2b04      	cmp	r3, #4
 80017ee:	f200 80f1 	bhi.w	80019d4 <findTimForThisCombo+0x204>
 80017f2:	a201      	add	r2, pc, #4	; (adr r2, 80017f8 <findTimForThisCombo+0x28>)
 80017f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017f8:	0800180d 	.word	0x0800180d
 80017fc:	08001833 	.word	0x08001833
 8001800:	08001859 	.word	0x08001859
 8001804:	0800187f 	.word	0x0800187f
 8001808:	080018a5 	.word	0x080018a5
		case 1:
			if (!coil1On) {
 800180c:	4b73      	ldr	r3, [pc, #460]	; (80019dc <findTimForThisCombo+0x20c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	2b00      	cmp	r3, #0
 8001812:	d107      	bne.n	8001824 <findTimForThisCombo+0x54>
				//setTimerFrequencyPulseWidth(&COIL1, freq, velocity, COIL1_CH);
				coil1On = true;
 8001814:	4b71      	ldr	r3, [pc, #452]	; (80019dc <findTimForThisCombo+0x20c>)
 8001816:	2201      	movs	r2, #1
 8001818:	701a      	strb	r2, [r3, #0]
				coil1Freq = freq;
 800181a:	4a71      	ldr	r2, [pc, #452]	; (80019e0 <findTimForThisCombo+0x210>)
 800181c:	88bb      	ldrh	r3, [r7, #4]
 800181e:	8013      	strh	r3, [r2, #0]
				return &COIL1;
 8001820:	4b70      	ldr	r3, [pc, #448]	; (80019e4 <findTimForThisCombo+0x214>)
 8001822:	e0d7      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(2, freq, velocity);
 8001824:	79ba      	ldrb	r2, [r7, #6]
 8001826:	88bb      	ldrh	r3, [r7, #4]
 8001828:	4619      	mov	r1, r3
 800182a:	2002      	movs	r0, #2
 800182c:	f7ff ffd0 	bl	80017d0 <findTimForThisCombo>
			break;
 8001830:	e0d0      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 2:
			if (!coil2On) {
 8001832:	4b6d      	ldr	r3, [pc, #436]	; (80019e8 <findTimForThisCombo+0x218>)
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d107      	bne.n	800184a <findTimForThisCombo+0x7a>
				//setTimerFrequencyPulseWidth(&COIL2, freq, velocity, COIL2_CH);
				coil2On = true;
 800183a:	4b6b      	ldr	r3, [pc, #428]	; (80019e8 <findTimForThisCombo+0x218>)
 800183c:	2201      	movs	r2, #1
 800183e:	701a      	strb	r2, [r3, #0]
				coil2Freq = freq;
 8001840:	4a6a      	ldr	r2, [pc, #424]	; (80019ec <findTimForThisCombo+0x21c>)
 8001842:	88bb      	ldrh	r3, [r7, #4]
 8001844:	8013      	strh	r3, [r2, #0]
				return &COIL2;
 8001846:	4b6a      	ldr	r3, [pc, #424]	; (80019f0 <findTimForThisCombo+0x220>)
 8001848:	e0c4      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(3, freq, velocity);
 800184a:	79ba      	ldrb	r2, [r7, #6]
 800184c:	88bb      	ldrh	r3, [r7, #4]
 800184e:	4619      	mov	r1, r3
 8001850:	2003      	movs	r0, #3
 8001852:	f7ff ffbd 	bl	80017d0 <findTimForThisCombo>
			break;
 8001856:	e0bd      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 3:
			if (!coil3On) {
 8001858:	4b66      	ldr	r3, [pc, #408]	; (80019f4 <findTimForThisCombo+0x224>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	2b00      	cmp	r3, #0
 800185e:	d107      	bne.n	8001870 <findTimForThisCombo+0xa0>
//				setTimerFrequencyPulseWidth(&COIL3, freq, velocity, COIL3_CH);
				coil3On = true;
 8001860:	4b64      	ldr	r3, [pc, #400]	; (80019f4 <findTimForThisCombo+0x224>)
 8001862:	2201      	movs	r2, #1
 8001864:	701a      	strb	r2, [r3, #0]
				coil3Freq = freq;
 8001866:	4a64      	ldr	r2, [pc, #400]	; (80019f8 <findTimForThisCombo+0x228>)
 8001868:	88bb      	ldrh	r3, [r7, #4]
 800186a:	8013      	strh	r3, [r2, #0]
				return &COIL3;
 800186c:	4b63      	ldr	r3, [pc, #396]	; (80019fc <findTimForThisCombo+0x22c>)
 800186e:	e0b1      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(4, freq, velocity);
 8001870:	79ba      	ldrb	r2, [r7, #6]
 8001872:	88bb      	ldrh	r3, [r7, #4]
 8001874:	4619      	mov	r1, r3
 8001876:	2004      	movs	r0, #4
 8001878:	f7ff ffaa 	bl	80017d0 <findTimForThisCombo>
			break;
 800187c:	e0aa      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 4:
			if (!coil4On) {
 800187e:	4b60      	ldr	r3, [pc, #384]	; (8001a00 <findTimForThisCombo+0x230>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d107      	bne.n	8001896 <findTimForThisCombo+0xc6>
//				setTimerFrequencyPulseWidth(&COIL4, freq, velocity, COIL4_CH);
				coil4On = true;
 8001886:	4b5e      	ldr	r3, [pc, #376]	; (8001a00 <findTimForThisCombo+0x230>)
 8001888:	2201      	movs	r2, #1
 800188a:	701a      	strb	r2, [r3, #0]
				coil4Freq = freq;
 800188c:	4a5d      	ldr	r2, [pc, #372]	; (8001a04 <findTimForThisCombo+0x234>)
 800188e:	88bb      	ldrh	r3, [r7, #4]
 8001890:	8013      	strh	r3, [r2, #0]
				return &COIL4;
 8001892:	4b5d      	ldr	r3, [pc, #372]	; (8001a08 <findTimForThisCombo+0x238>)
 8001894:	e09e      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(5, freq, velocity);
 8001896:	79ba      	ldrb	r2, [r7, #6]
 8001898:	88bb      	ldrh	r3, [r7, #4]
 800189a:	4619      	mov	r1, r3
 800189c:	2005      	movs	r0, #5
 800189e:	f7ff ff97 	bl	80017d0 <findTimForThisCombo>
			break;
 80018a2:	e097      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 5:
			if (!coil5On) {
 80018a4:	4b59      	ldr	r3, [pc, #356]	; (8001a0c <findTimForThisCombo+0x23c>)
 80018a6:	781b      	ldrb	r3, [r3, #0]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	f040 8090 	bne.w	80019ce <findTimForThisCombo+0x1fe>
//				setTimerFrequencyPulseWidth(&COIL5, freq, velocity, COIL5_CH);
				coil5On = true;
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <findTimForThisCombo+0x23c>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
				coil5Freq = freq;
 80018b4:	4a56      	ldr	r2, [pc, #344]	; (8001a10 <findTimForThisCombo+0x240>)
 80018b6:	88bb      	ldrh	r3, [r7, #4]
 80018b8:	8013      	strh	r3, [r2, #0]
				return &COIL5;
 80018ba:	4b56      	ldr	r3, [pc, #344]	; (8001a14 <findTimForThisCombo+0x244>)
 80018bc:	e08a      	b.n	80019d4 <findTimForThisCombo+0x204>
			}
			break;
		}
	}			//end if (velocity != 0)
	else if (velocity == 0) {
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	f040 8087 	bne.w	80019d4 <findTimForThisCombo+0x204>
		switch (track) {
 80018c6:	79fb      	ldrb	r3, [r7, #7]
 80018c8:	3b01      	subs	r3, #1
 80018ca:	2b04      	cmp	r3, #4
 80018cc:	f200 8082 	bhi.w	80019d4 <findTimForThisCombo+0x204>
 80018d0:	a201      	add	r2, pc, #4	; (adr r2, 80018d8 <findTimForThisCombo+0x108>)
 80018d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018d6:	bf00      	nop
 80018d8:	080018ed 	.word	0x080018ed
 80018dc:	0800191d 	.word	0x0800191d
 80018e0:	0800194d 	.word	0x0800194d
 80018e4:	0800197d 	.word	0x0800197d
 80018e8:	080019ad 	.word	0x080019ad
		case 1:
			if (coil1On && coil1Freq == freq) {
 80018ec:	4b3b      	ldr	r3, [pc, #236]	; (80019dc <findTimForThisCombo+0x20c>)
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d00c      	beq.n	800190e <findTimForThisCombo+0x13e>
 80018f4:	4b3a      	ldr	r3, [pc, #232]	; (80019e0 <findTimForThisCombo+0x210>)
 80018f6:	881b      	ldrh	r3, [r3, #0]
 80018f8:	88ba      	ldrh	r2, [r7, #4]
 80018fa:	429a      	cmp	r2, r3
 80018fc:	d107      	bne.n	800190e <findTimForThisCombo+0x13e>
				//setTimerFrequencyPulseWidth(&COIL1, 0, 0, COIL1_CH);
				coil1On = false;
 80018fe:	4b37      	ldr	r3, [pc, #220]	; (80019dc <findTimForThisCombo+0x20c>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
				coil1Freq = 0;
 8001904:	4b36      	ldr	r3, [pc, #216]	; (80019e0 <findTimForThisCombo+0x210>)
 8001906:	2200      	movs	r2, #0
 8001908:	801a      	strh	r2, [r3, #0]
				return &COIL1;
 800190a:	4b36      	ldr	r3, [pc, #216]	; (80019e4 <findTimForThisCombo+0x214>)
 800190c:	e062      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(2, freq, 0);
 800190e:	88bb      	ldrh	r3, [r7, #4]
 8001910:	2200      	movs	r2, #0
 8001912:	4619      	mov	r1, r3
 8001914:	2002      	movs	r0, #2
 8001916:	f7ff ff5b 	bl	80017d0 <findTimForThisCombo>
			break;
 800191a:	e05b      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 2:
			if (coil2On && coil2Freq == freq) {
 800191c:	4b32      	ldr	r3, [pc, #200]	; (80019e8 <findTimForThisCombo+0x218>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d00c      	beq.n	800193e <findTimForThisCombo+0x16e>
 8001924:	4b31      	ldr	r3, [pc, #196]	; (80019ec <findTimForThisCombo+0x21c>)
 8001926:	881b      	ldrh	r3, [r3, #0]
 8001928:	88ba      	ldrh	r2, [r7, #4]
 800192a:	429a      	cmp	r2, r3
 800192c:	d107      	bne.n	800193e <findTimForThisCombo+0x16e>
//				setTimerFrequencyPulseWidth(&COIL2, 0, 0, COIL2_CH);
				coil2On = false;
 800192e:	4b2e      	ldr	r3, [pc, #184]	; (80019e8 <findTimForThisCombo+0x218>)
 8001930:	2200      	movs	r2, #0
 8001932:	701a      	strb	r2, [r3, #0]
				coil2Freq = 0;
 8001934:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <findTimForThisCombo+0x21c>)
 8001936:	2200      	movs	r2, #0
 8001938:	801a      	strh	r2, [r3, #0]
				return &COIL2;
 800193a:	4b2d      	ldr	r3, [pc, #180]	; (80019f0 <findTimForThisCombo+0x220>)
 800193c:	e04a      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(3, freq, 0);
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	2200      	movs	r2, #0
 8001942:	4619      	mov	r1, r3
 8001944:	2003      	movs	r0, #3
 8001946:	f7ff ff43 	bl	80017d0 <findTimForThisCombo>
			break;
 800194a:	e043      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 3:
			if (coil3On && coil3Freq == freq) {
 800194c:	4b29      	ldr	r3, [pc, #164]	; (80019f4 <findTimForThisCombo+0x224>)
 800194e:	781b      	ldrb	r3, [r3, #0]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d00c      	beq.n	800196e <findTimForThisCombo+0x19e>
 8001954:	4b28      	ldr	r3, [pc, #160]	; (80019f8 <findTimForThisCombo+0x228>)
 8001956:	881b      	ldrh	r3, [r3, #0]
 8001958:	88ba      	ldrh	r2, [r7, #4]
 800195a:	429a      	cmp	r2, r3
 800195c:	d107      	bne.n	800196e <findTimForThisCombo+0x19e>
//				setTimerFrequencyPulseWidth(&COIL3, 0, 0, COIL3_CH);
				coil3On = false;
 800195e:	4b25      	ldr	r3, [pc, #148]	; (80019f4 <findTimForThisCombo+0x224>)
 8001960:	2200      	movs	r2, #0
 8001962:	701a      	strb	r2, [r3, #0]
				coil3Freq = 0;
 8001964:	4b24      	ldr	r3, [pc, #144]	; (80019f8 <findTimForThisCombo+0x228>)
 8001966:	2200      	movs	r2, #0
 8001968:	801a      	strh	r2, [r3, #0]
				return &COIL3;
 800196a:	4b24      	ldr	r3, [pc, #144]	; (80019fc <findTimForThisCombo+0x22c>)
 800196c:	e032      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(4, freq, 0);
 800196e:	88bb      	ldrh	r3, [r7, #4]
 8001970:	2200      	movs	r2, #0
 8001972:	4619      	mov	r1, r3
 8001974:	2004      	movs	r0, #4
 8001976:	f7ff ff2b 	bl	80017d0 <findTimForThisCombo>
			break;
 800197a:	e02b      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 4:
			if (coil4On && coil4Freq == freq) {
 800197c:	4b20      	ldr	r3, [pc, #128]	; (8001a00 <findTimForThisCombo+0x230>)
 800197e:	781b      	ldrb	r3, [r3, #0]
 8001980:	2b00      	cmp	r3, #0
 8001982:	d00c      	beq.n	800199e <findTimForThisCombo+0x1ce>
 8001984:	4b1f      	ldr	r3, [pc, #124]	; (8001a04 <findTimForThisCombo+0x234>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	88ba      	ldrh	r2, [r7, #4]
 800198a:	429a      	cmp	r2, r3
 800198c:	d107      	bne.n	800199e <findTimForThisCombo+0x1ce>
//				setTimerFrequencyPulseWidth(&COIL4, 0, 0, COIL4_CH);
				coil4On = false;
 800198e:	4b1c      	ldr	r3, [pc, #112]	; (8001a00 <findTimForThisCombo+0x230>)
 8001990:	2200      	movs	r2, #0
 8001992:	701a      	strb	r2, [r3, #0]
				coil4Freq = 0;
 8001994:	4b1b      	ldr	r3, [pc, #108]	; (8001a04 <findTimForThisCombo+0x234>)
 8001996:	2200      	movs	r2, #0
 8001998:	801a      	strh	r2, [r3, #0]
				return &COIL4;
 800199a:	4b1b      	ldr	r3, [pc, #108]	; (8001a08 <findTimForThisCombo+0x238>)
 800199c:	e01a      	b.n	80019d4 <findTimForThisCombo+0x204>
			} else
				findTimForThisCombo(5, freq, 0);
 800199e:	88bb      	ldrh	r3, [r7, #4]
 80019a0:	2200      	movs	r2, #0
 80019a2:	4619      	mov	r1, r3
 80019a4:	2005      	movs	r0, #5
 80019a6:	f7ff ff13 	bl	80017d0 <findTimForThisCombo>
			break;
 80019aa:	e013      	b.n	80019d4 <findTimForThisCombo+0x204>
		case 5:
			if (coil5On && coil5Freq == freq) {
 80019ac:	4b17      	ldr	r3, [pc, #92]	; (8001a0c <findTimForThisCombo+0x23c>)
 80019ae:	781b      	ldrb	r3, [r3, #0]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d00e      	beq.n	80019d2 <findTimForThisCombo+0x202>
 80019b4:	4b16      	ldr	r3, [pc, #88]	; (8001a10 <findTimForThisCombo+0x240>)
 80019b6:	881b      	ldrh	r3, [r3, #0]
 80019b8:	88ba      	ldrh	r2, [r7, #4]
 80019ba:	429a      	cmp	r2, r3
 80019bc:	d109      	bne.n	80019d2 <findTimForThisCombo+0x202>
//				setTimerFrequencyPulseWidth(&COIL5, 0, 0, COIL5_CH);
				coil5On = false;
 80019be:	4b13      	ldr	r3, [pc, #76]	; (8001a0c <findTimForThisCombo+0x23c>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	701a      	strb	r2, [r3, #0]
				coil5Freq = 0;
 80019c4:	4b12      	ldr	r3, [pc, #72]	; (8001a10 <findTimForThisCombo+0x240>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	801a      	strh	r2, [r3, #0]
				return &COIL4;
 80019ca:	4b0f      	ldr	r3, [pc, #60]	; (8001a08 <findTimForThisCombo+0x238>)
 80019cc:	e002      	b.n	80019d4 <findTimForThisCombo+0x204>
			break;
 80019ce:	bf00      	nop
 80019d0:	e000      	b.n	80019d4 <findTimForThisCombo+0x204>
//				setTimerFrequencyPulseWidth(&COIL2, 0, 0, COIL2_CH);
//				setTimerFrequencyPulseWidth(&COIL3, 0, 0, COIL3_CH);
//				setTimerFrequencyPulseWidth(&COIL4, 0, 0, COIL4_CH);
//				setTimerFrequencyPulseWidth(&COIL5, 0, 0, COIL5_CH);
			}
			break;
 80019d2:	bf00      	nop
		} //end of switch
	} //end if velocity == 0
}
 80019d4:	4618      	mov	r0, r3
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	20000ecf 	.word	0x20000ecf
 80019e0:	20000ed4 	.word	0x20000ed4
 80019e4:	200003e4 	.word	0x200003e4
 80019e8:	20000ed0 	.word	0x20000ed0
 80019ec:	20000ed6 	.word	0x20000ed6
 80019f0:	20000524 	.word	0x20000524
 80019f4:	20000ed1 	.word	0x20000ed1
 80019f8:	20000ed8 	.word	0x20000ed8
 80019fc:	20000424 	.word	0x20000424
 8001a00:	20000ed2 	.word	0x20000ed2
 8001a04:	20000eda 	.word	0x20000eda
 8001a08:	20000464 	.word	0x20000464
 8001a0c:	20000ed3 	.word	0x20000ed3
 8001a10:	20000edc 	.word	0x20000edc
 8001a14:	20000564 	.word	0x20000564

08001a18 <turnOffAllCoils>:
			break;
		} //end of switch
	} //end if velocity == 0
}

void turnOffAllCoils() {
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
	setTimerFrequencyPulseWidth(&COIL1, 0, 0, COIL1_CH);
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	2200      	movs	r2, #0
 8001a20:	2100      	movs	r1, #0
 8001a22:	481d      	ldr	r0, [pc, #116]	; (8001a98 <turnOffAllCoils+0x80>)
 8001a24:	f7ff fe16 	bl	8001654 <setTimerFrequencyPulseWidth>
	coil1On = false;
 8001a28:	4b1c      	ldr	r3, [pc, #112]	; (8001a9c <turnOffAllCoils+0x84>)
 8001a2a:	2200      	movs	r2, #0
 8001a2c:	701a      	strb	r2, [r3, #0]
	coil1Freq = 0;
 8001a2e:	4b1c      	ldr	r3, [pc, #112]	; (8001aa0 <turnOffAllCoils+0x88>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL2, 0, 0, COIL2_CH);
 8001a34:	2304      	movs	r3, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	2100      	movs	r1, #0
 8001a3a:	481a      	ldr	r0, [pc, #104]	; (8001aa4 <turnOffAllCoils+0x8c>)
 8001a3c:	f7ff fe0a 	bl	8001654 <setTimerFrequencyPulseWidth>
	coil2On = false;
 8001a40:	4b19      	ldr	r3, [pc, #100]	; (8001aa8 <turnOffAllCoils+0x90>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	701a      	strb	r2, [r3, #0]
	coil2Freq = 0;
 8001a46:	4b19      	ldr	r3, [pc, #100]	; (8001aac <turnOffAllCoils+0x94>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL3, 0, 0, COIL3_CH);
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	2200      	movs	r2, #0
 8001a50:	2100      	movs	r1, #0
 8001a52:	4817      	ldr	r0, [pc, #92]	; (8001ab0 <turnOffAllCoils+0x98>)
 8001a54:	f7ff fdfe 	bl	8001654 <setTimerFrequencyPulseWidth>
	coil3On = false;
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <turnOffAllCoils+0x9c>)
 8001a5a:	2200      	movs	r2, #0
 8001a5c:	701a      	strb	r2, [r3, #0]
	coil3Freq = 0;
 8001a5e:	4b16      	ldr	r3, [pc, #88]	; (8001ab8 <turnOffAllCoils+0xa0>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL4, 0, 0, COIL4_CH);
 8001a64:	2300      	movs	r3, #0
 8001a66:	2200      	movs	r2, #0
 8001a68:	2100      	movs	r1, #0
 8001a6a:	4814      	ldr	r0, [pc, #80]	; (8001abc <turnOffAllCoils+0xa4>)
 8001a6c:	f7ff fdf2 	bl	8001654 <setTimerFrequencyPulseWidth>
	coil4On = false;
 8001a70:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <turnOffAllCoils+0xa8>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]
	coil4Freq = 0;
 8001a76:	4b13      	ldr	r3, [pc, #76]	; (8001ac4 <turnOffAllCoils+0xac>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL5, 0, 0, COIL5_CH);
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	2200      	movs	r2, #0
 8001a80:	2100      	movs	r1, #0
 8001a82:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <turnOffAllCoils+0xb0>)
 8001a84:	f7ff fde6 	bl	8001654 <setTimerFrequencyPulseWidth>
	coil5On = false;
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <turnOffAllCoils+0xb4>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	701a      	strb	r2, [r3, #0]
	coil5Freq = 0;
 8001a8e:	4b10      	ldr	r3, [pc, #64]	; (8001ad0 <turnOffAllCoils+0xb8>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	801a      	strh	r2, [r3, #0]

}
 8001a94:	bf00      	nop
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	200003e4 	.word	0x200003e4
 8001a9c:	20000ecf 	.word	0x20000ecf
 8001aa0:	20000ed4 	.word	0x20000ed4
 8001aa4:	20000524 	.word	0x20000524
 8001aa8:	20000ed0 	.word	0x20000ed0
 8001aac:	20000ed6 	.word	0x20000ed6
 8001ab0:	20000424 	.word	0x20000424
 8001ab4:	20000ed1 	.word	0x20000ed1
 8001ab8:	20000ed8 	.word	0x20000ed8
 8001abc:	20000464 	.word	0x20000464
 8001ac0:	20000ed2 	.word	0x20000ed2
 8001ac4:	20000eda 	.word	0x20000eda
 8001ac8:	20000564 	.word	0x20000564
 8001acc:	20000ed3 	.word	0x20000ed3
 8001ad0:	20000edc 	.word	0x20000edc

08001ad4 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b082      	sub	sp, #8
 8001ad8:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001ada:	f002 fe3c 	bl	8004756 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001ade:	f001 f819 	bl	8002b14 <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001ae2:	f001 fc5b 	bl	800339c <MX_GPIO_Init>
	MX_ADC_Init();
 8001ae6:	f001 f865 	bl	8002bb4 <MX_ADC_Init>
	MX_TIM2_Init();
 8001aea:	f001 f953 	bl	8002d94 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001aee:	f001 f9d9 	bl	8002ea4 <MX_TIM3_Init>
	MX_TIM4_Init();
 8001af2:	f001 fa4b 	bl	8002f8c <MX_TIM4_Init>
	MX_TIM9_Init();
 8001af6:	f001 fb3b 	bl	8003170 <MX_TIM9_Init>
	MX_TIM10_Init();
 8001afa:	f001 fbad 	bl	8003258 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001afe:	f001 fc0b 	bl	8003318 <MX_TIM11_Init>
	MX_I2C2_Init();
 8001b02:	f001 f8b1 	bl	8002c68 <MX_I2C2_Init>
	MX_SPI1_Init();
 8001b06:	f001 f8dd 	bl	8002cc4 <MX_SPI1_Init>
	MX_SPI2_Init();
 8001b0a:	f001 f90f 	bl	8002d2c <MX_SPI2_Init>
	MX_FATFS_Init();
 8001b0e:	f00a fafd 	bl	800c10c <MX_FATFS_Init>
	MX_TIM6_Init();
 8001b12:	f001 fac3 	bl	800309c <MX_TIM6_Init>
	MX_USB_DEVICE_Init();
 8001b16:	f00f fc13 	bl	8011340 <MX_USB_DEVICE_Init>
	MX_TIM7_Init();
 8001b1a:	f001 faf3 	bl	8003104 <MX_TIM7_Init>


	/* USER CODE BEGIN 2 */
	//HAL_TIM_Base_Start_IT(&htim6);	//microseconds counter
	HAL_TIM_Base_Start_IT(&htim7);
 8001b1e:	48aa      	ldr	r0, [pc, #680]	; (8001dc8 <main+0x2f4>)
 8001b20:	f006 fe9e 	bl	8008860 <HAL_TIM_Base_Start_IT>

	initLCD(&lcd, &hi2c2, MAX_ROW, 20, 0x27);
 8001b24:	2327      	movs	r3, #39	; 0x27
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2314      	movs	r3, #20
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	49a7      	ldr	r1, [pc, #668]	; (8001dcc <main+0x2f8>)
 8001b2e:	48a8      	ldr	r0, [pc, #672]	; (8001dd0 <main+0x2fc>)
 8001b30:	f7ff fb18 	bl	8001164 <initLCD>
	setCursor(&lcd, 0, 0);
 8001b34:	2200      	movs	r2, #0
 8001b36:	2100      	movs	r1, #0
 8001b38:	48a5      	ldr	r0, [pc, #660]	; (8001dd0 <main+0x2fc>)
 8001b3a:	f7ff fb71 	bl	8001220 <setCursor>

	HAL_ADC_Start(&hadc);
 8001b3e:	48a5      	ldr	r0, [pc, #660]	; (8001dd4 <main+0x300>)
 8001b40:	f002 ffe0 	bl	8004b04 <HAL_ADC_Start>


	HAL_GPIO_WritePin(GPIOB, Flash__wp_Pin | Flash__Hold_Pin, GPIO_PIN_SET);//active low signals
 8001b44:	2201      	movs	r2, #1
 8001b46:	2106      	movs	r1, #6
 8001b48:	48a3      	ldr	r0, [pc, #652]	; (8001dd8 <main+0x304>)
 8001b4a:	f003 fd02 	bl	8005552 <HAL_GPIO_WritePin>

	writeStatusLED(0b11001100);
 8001b4e:	20cc      	movs	r0, #204	; 0xcc
 8001b50:	f001 fcea 	bl	8003528 <writeStatusLED>

	HAL_ADC_Start_IT(&hadc);
 8001b54:	489f      	ldr	r0, [pc, #636]	; (8001dd4 <main+0x300>)
 8001b56:	f003 f835 	bl	8004bc4 <HAL_ADC_Start_IT>

	HAL_Delay(50);
 8001b5a:	2032      	movs	r0, #50	; 0x32
 8001b5c:	f002 fe6a 	bl	8004834 <HAL_Delay>
	fresult = f_mount(&fs, "", 1);
 8001b60:	2201      	movs	r2, #1
 8001b62:	499e      	ldr	r1, [pc, #632]	; (8001ddc <main+0x308>)
 8001b64:	489e      	ldr	r0, [pc, #632]	; (8001de0 <main+0x30c>)
 8001b66:	f00e fe0d 	bl	8010784 <f_mount>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	4b9d      	ldr	r3, [pc, #628]	; (8001de4 <main+0x310>)
 8001b70:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001b72:	4b9c      	ldr	r3, [pc, #624]	; (8001de4 <main+0x310>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d002      	beq.n	8001b80 <main+0xac>
		printToUSB("Error mounting SD card");
 8001b7a:	489b      	ldr	r0, [pc, #620]	; (8001de8 <main+0x314>)
 8001b7c:	f001 fd50 	bl	8003620 <printToUSB>


	/* USER CODE END 2 */

	HAL_TIM_PWM_Start(&COIL1, COIL1_CH);	//IFe96 1
 8001b80:	2100      	movs	r1, #0
 8001b82:	489a      	ldr	r0, [pc, #616]	; (8001dec <main+0x318>)
 8001b84:	f006 ff46 	bl	8008a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL2, COIL2_CH);	//IFe96 2
 8001b88:	2104      	movs	r1, #4
 8001b8a:	4899      	ldr	r0, [pc, #612]	; (8001df0 <main+0x31c>)
 8001b8c:	f006 ff42 	bl	8008a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL3, COIL3_CH);	//IFe96 3
 8001b90:	2100      	movs	r1, #0
 8001b92:	4898      	ldr	r0, [pc, #608]	; (8001df4 <main+0x320>)
 8001b94:	f006 ff3e 	bl	8008a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL4, COIL4_CH);	//IFe96 4
 8001b98:	2100      	movs	r1, #0
 8001b9a:	4897      	ldr	r0, [pc, #604]	; (8001df8 <main+0x324>)
 8001b9c:	f006 ff3a 	bl	8008a14 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL5, COIL5_CH);	//IFe96 5
 8001ba0:	2100      	movs	r1, #0
 8001ba2:	4896      	ldr	r0, [pc, #600]	; (8001dfc <main+0x328>)
 8001ba4:	f006 ff36 	bl	8008a14 <HAL_TIM_PWM_Start>
	htim2.Instance->CCR1 = 0;
 8001ba8:	4b90      	ldr	r3, [pc, #576]	; (8001dec <main+0x318>)
 8001baa:	681b      	ldr	r3, [r3, #0]
 8001bac:	2200      	movs	r2, #0
 8001bae:	635a      	str	r2, [r3, #52]	; 0x34
	htim9.Instance->CCR2 = 0;
 8001bb0:	4b8f      	ldr	r3, [pc, #572]	; (8001df0 <main+0x31c>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR1 = 0;
 8001bb8:	4b8e      	ldr	r3, [pc, #568]	; (8001df4 <main+0x320>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR1 = 0;
 8001bc0:	4b8d      	ldr	r3, [pc, #564]	; (8001df8 <main+0x324>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	635a      	str	r2, [r3, #52]	; 0x34
	htim10.Instance->CCR1 = 0;
 8001bc8:	4b8c      	ldr	r3, [pc, #560]	; (8001dfc <main+0x328>)
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	2200      	movs	r2, #0
 8001bce:	635a      	str	r2, [r3, #52]	; 0x34
	/* USER CODE BEGIN 3 */

	//Open SD card and store all file names in an array
	fresult = f_opendir(&dir, "");
 8001bd0:	4982      	ldr	r1, [pc, #520]	; (8001ddc <main+0x308>)
 8001bd2:	488b      	ldr	r0, [pc, #556]	; (8001e00 <main+0x32c>)
 8001bd4:	f00f f9c1 	bl	8010f5a <f_opendir>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	461a      	mov	r2, r3
 8001bdc:	4b81      	ldr	r3, [pc, #516]	; (8001de4 <main+0x310>)
 8001bde:	701a      	strb	r2, [r3, #0]


	if (fresult == FR_OK) {
 8001be0:	4b80      	ldr	r3, [pc, #512]	; (8001de4 <main+0x310>)
 8001be2:	781b      	ldrb	r3, [r3, #0]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d128      	bne.n	8001c3a <main+0x166>
		// Read the directory and store file names
		for (;;) {
			fresult = f_readdir(&dir, &fno);
 8001be8:	4986      	ldr	r1, [pc, #536]	; (8001e04 <main+0x330>)
 8001bea:	4885      	ldr	r0, [pc, #532]	; (8001e00 <main+0x32c>)
 8001bec:	f00f fa4e 	bl	801108c <f_readdir>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	4b7b      	ldr	r3, [pc, #492]	; (8001de4 <main+0x310>)
 8001bf6:	701a      	strb	r2, [r3, #0]
			if (fresult != FR_OK || fno.fname[0] == 0) {
 8001bf8:	4b7a      	ldr	r3, [pc, #488]	; (8001de4 <main+0x310>)
 8001bfa:	781b      	ldrb	r3, [r3, #0]
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d119      	bne.n	8001c34 <main+0x160>
 8001c00:	4b80      	ldr	r3, [pc, #512]	; (8001e04 <main+0x330>)
 8001c02:	7d9b      	ldrb	r3, [r3, #22]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d015      	beq.n	8001c34 <main+0x160>
				break; // No more files in the directory or an error occurred
			}
			if (fno.fattrib & AM_DIR) {
 8001c08:	4b7e      	ldr	r3, [pc, #504]	; (8001e04 <main+0x330>)
 8001c0a:	7a1b      	ldrb	r3, [r3, #8]
 8001c0c:	f003 0310 	and.w	r3, r3, #16
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d10d      	bne.n	8001c30 <main+0x15c>
				// Skip directories
				continue;
			}

			// Copy the file name to the array
			strncpy(fileNames[fileCount++], fno.fname, 30);
 8001c14:	4b7c      	ldr	r3, [pc, #496]	; (8001e08 <main+0x334>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	497b      	ldr	r1, [pc, #492]	; (8001e08 <main+0x334>)
 8001c1c:	600a      	str	r2, [r1, #0]
 8001c1e:	015b      	lsls	r3, r3, #5
 8001c20:	4a7a      	ldr	r2, [pc, #488]	; (8001e0c <main+0x338>)
 8001c22:	4413      	add	r3, r2
 8001c24:	221e      	movs	r2, #30
 8001c26:	497a      	ldr	r1, [pc, #488]	; (8001e10 <main+0x33c>)
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f010 f865 	bl	8011cf8 <strncpy>
 8001c2e:	e7db      	b.n	8001be8 <main+0x114>
				continue;
 8001c30:	bf00      	nop
			fresult = f_readdir(&dir, &fno);
 8001c32:	e7d9      	b.n	8001be8 <main+0x114>
		}
		f_closedir(&dir);
 8001c34:	4872      	ldr	r0, [pc, #456]	; (8001e00 <main+0x32c>)
 8001c36:	f00f fa03 	bl	8011040 <f_closedir>
	}

	//The last option is always "BACK" to mode selection
	strncpy(fileNames[fileCount], "BACK", 30);
 8001c3a:	4b73      	ldr	r3, [pc, #460]	; (8001e08 <main+0x334>)
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	015b      	lsls	r3, r3, #5
 8001c40:	4a72      	ldr	r2, [pc, #456]	; (8001e0c <main+0x338>)
 8001c42:	4413      	add	r3, r2
 8001c44:	221e      	movs	r2, #30
 8001c46:	4973      	ldr	r1, [pc, #460]	; (8001e14 <main+0x340>)
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f010 f855 	bl	8011cf8 <strncpy>
	(void)LCDCursorOffBlinkOff(&lcd);
 8001c4e:	4860      	ldr	r0, [pc, #384]	; (8001dd0 <main+0x2fc>)
 8001c50:	f7ff fbf9 	bl	8001446 <LCDCursorOffBlinkOff>


	while (1) {
		time = HAL_GetTick();
 8001c54:	f002 fde4 	bl	8004820 <HAL_GetTick>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	4a6f      	ldr	r2, [pc, #444]	; (8001e18 <main+0x344>)
 8001c5c:	6013      	str	r3, [r2, #0]

		switch (state) {
 8001c5e:	4b6f      	ldr	r3, [pc, #444]	; (8001e1c <main+0x348>)
 8001c60:	781b      	ldrb	r3, [r3, #0]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	f200 84b3 	bhi.w	80025ce <main+0xafa>
 8001c68:	a201      	add	r2, pc, #4	; (adr r2, 8001c70 <main+0x19c>)
 8001c6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c6e:	bf00      	nop
 8001c70:	08001c81 	.word	0x08001c81
 8001c74:	08001dbf 	.word	0x08001dbf
 8001c78:	08001e51 	.word	0x08001e51
 8001c7c:	08002285 	.word	0x08002285
		case MODE_SELECT:
			songNum = 0;
 8001c80:	4b67      	ldr	r3, [pc, #412]	; (8001e20 <main+0x34c>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	701a      	strb	r2, [r3, #0]

			//List all modes
			if (!printed) {
 8001c86:	4b67      	ldr	r3, [pc, #412]	; (8001e24 <main+0x350>)
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d128      	bne.n	8001ce0 <main+0x20c>
				LCDPrintAtPos(&lcd, "Select mode:", 0, 0);
 8001c8e:	2300      	movs	r3, #0
 8001c90:	2200      	movs	r2, #0
 8001c92:	4965      	ldr	r1, [pc, #404]	; (8001e28 <main+0x354>)
 8001c94:	484e      	ldr	r0, [pc, #312]	; (8001dd0 <main+0x2fc>)
 8001c96:	f7ff fb73 	bl	8001380 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, ">", 1, modeNum);
 8001c9a:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <main+0x358>)
 8001c9c:	781b      	ldrb	r3, [r3, #0]
 8001c9e:	2201      	movs	r2, #1
 8001ca0:	4963      	ldr	r1, [pc, #396]	; (8001e30 <main+0x35c>)
 8001ca2:	484b      	ldr	r0, [pc, #300]	; (8001dd0 <main+0x2fc>)
 8001ca4:	f7ff fb6c 	bl	8001380 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "1.SD Card", 2, 1);
 8001ca8:	2301      	movs	r3, #1
 8001caa:	2202      	movs	r2, #2
 8001cac:	4961      	ldr	r1, [pc, #388]	; (8001e34 <main+0x360>)
 8001cae:	4848      	ldr	r0, [pc, #288]	; (8001dd0 <main+0x2fc>)
 8001cb0:	f7ff fb66 	bl	8001380 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "2.Burst", 2, 2);
 8001cb4:	2302      	movs	r3, #2
 8001cb6:	2202      	movs	r2, #2
 8001cb8:	495f      	ldr	r1, [pc, #380]	; (8001e38 <main+0x364>)
 8001cba:	4845      	ldr	r0, [pc, #276]	; (8001dd0 <main+0x2fc>)
 8001cbc:	f7ff fb60 	bl	8001380 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "3.Fixed", 2, 3);
 8001cc0:	2303      	movs	r3, #3
 8001cc2:	2202      	movs	r2, #2
 8001cc4:	495d      	ldr	r1, [pc, #372]	; (8001e3c <main+0x368>)
 8001cc6:	4842      	ldr	r0, [pc, #264]	; (8001dd0 <main+0x2fc>)
 8001cc8:	f7ff fb5a 	bl	8001380 <LCDPrintAtPos>
				setCursor(&lcd, 1, modeNum);
 8001ccc:	4b57      	ldr	r3, [pc, #348]	; (8001e2c <main+0x358>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	483e      	ldr	r0, [pc, #248]	; (8001dd0 <main+0x2fc>)
 8001cd6:	f7ff faa3 	bl	8001220 <setCursor>
				printed = true;
 8001cda:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <main+0x350>)
 8001cdc:	2201      	movs	r2, #1
 8001cde:	701a      	strb	r2, [r3, #0]
			}

			// Choosing the mode
			if(rotaryVal != prevRotaryVal)
 8001ce0:	4b57      	ldr	r3, [pc, #348]	; (8001e40 <main+0x36c>)
 8001ce2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001ce6:	4b57      	ldr	r3, [pc, #348]	; (8001e44 <main+0x370>)
 8001ce8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d03e      	beq.n	8001d6e <main+0x29a>
			{
				LCDPrintAtPos(&lcd, " ", 1, modeNum);
 8001cf0:	4b4e      	ldr	r3, [pc, #312]	; (8001e2c <main+0x358>)
 8001cf2:	781b      	ldrb	r3, [r3, #0]
 8001cf4:	2201      	movs	r2, #1
 8001cf6:	4954      	ldr	r1, [pc, #336]	; (8001e48 <main+0x374>)
 8001cf8:	4835      	ldr	r0, [pc, #212]	; (8001dd0 <main+0x2fc>)
 8001cfa:	f7ff fb41 	bl	8001380 <LCDPrintAtPos>

				//Move down
				if (rotaryVal > prevRotaryVal){
 8001cfe:	4b50      	ldr	r3, [pc, #320]	; (8001e40 <main+0x36c>)
 8001d00:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d04:	4b4f      	ldr	r3, [pc, #316]	; (8001e44 <main+0x370>)
 8001d06:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d0a:	429a      	cmp	r2, r3
 8001d0c:	dd0e      	ble.n	8001d2c <main+0x258>
					modeNum == MODE_NUM ? modeNum = 1 : modeNum ++;
 8001d0e:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <main+0x358>)
 8001d10:	781b      	ldrb	r3, [r3, #0]
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d103      	bne.n	8001d1e <main+0x24a>
 8001d16:	4b45      	ldr	r3, [pc, #276]	; (8001e2c <main+0x358>)
 8001d18:	2201      	movs	r2, #1
 8001d1a:	701a      	strb	r2, [r3, #0]
 8001d1c:	e014      	b.n	8001d48 <main+0x274>
 8001d1e:	4b43      	ldr	r3, [pc, #268]	; (8001e2c <main+0x358>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	3301      	adds	r3, #1
 8001d24:	b2da      	uxtb	r2, r3
 8001d26:	4b41      	ldr	r3, [pc, #260]	; (8001e2c <main+0x358>)
 8001d28:	701a      	strb	r2, [r3, #0]
 8001d2a:	e00d      	b.n	8001d48 <main+0x274>
				}
				//Move up
				else {
					(modeNum == 1)? modeNum = MODE_NUM : modeNum --;
 8001d2c:	4b3f      	ldr	r3, [pc, #252]	; (8001e2c <main+0x358>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b01      	cmp	r3, #1
 8001d32:	d103      	bne.n	8001d3c <main+0x268>
 8001d34:	4b3d      	ldr	r3, [pc, #244]	; (8001e2c <main+0x358>)
 8001d36:	2203      	movs	r2, #3
 8001d38:	701a      	strb	r2, [r3, #0]
 8001d3a:	e005      	b.n	8001d48 <main+0x274>
 8001d3c:	4b3b      	ldr	r3, [pc, #236]	; (8001e2c <main+0x358>)
 8001d3e:	781b      	ldrb	r3, [r3, #0]
 8001d40:	3b01      	subs	r3, #1
 8001d42:	b2da      	uxtb	r2, r3
 8001d44:	4b39      	ldr	r3, [pc, #228]	; (8001e2c <main+0x358>)
 8001d46:	701a      	strb	r2, [r3, #0]
				}

				LCDPrintAtPos(&lcd, ">", 1, modeNum);
 8001d48:	4b38      	ldr	r3, [pc, #224]	; (8001e2c <main+0x358>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	4938      	ldr	r1, [pc, #224]	; (8001e30 <main+0x35c>)
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <main+0x2fc>)
 8001d52:	f7ff fb15 	bl	8001380 <LCDPrintAtPos>
				setCursor(&lcd, 1, modeNum);
 8001d56:	4b35      	ldr	r3, [pc, #212]	; (8001e2c <main+0x358>)
 8001d58:	781b      	ldrb	r3, [r3, #0]
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	2101      	movs	r1, #1
 8001d5e:	481c      	ldr	r0, [pc, #112]	; (8001dd0 <main+0x2fc>)
 8001d60:	f7ff fa5e 	bl	8001220 <setCursor>
				prevRotaryVal =  rotaryVal;
 8001d64:	4b36      	ldr	r3, [pc, #216]	; (8001e40 <main+0x36c>)
 8001d66:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d6a:	4b36      	ldr	r3, [pc, #216]	; (8001e44 <main+0x370>)
 8001d6c:	801a      	strh	r2, [r3, #0]
			}

			// Button pushed, change state
			if (buttonPushed) {
 8001d6e:	4b37      	ldr	r3, [pc, #220]	; (8001e4c <main+0x378>)
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	f000 842d 	beq.w	80025d2 <main+0xafe>
				buttonPushed = false;
 8001d78:	4b34      	ldr	r3, [pc, #208]	; (8001e4c <main+0x378>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	701a      	strb	r2, [r3, #0]
				printed = false;
 8001d7e:	4b29      	ldr	r3, [pc, #164]	; (8001e24 <main+0x350>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	701a      	strb	r2, [r3, #0]
				clearDisplay(&lcd);
 8001d84:	4812      	ldr	r0, [pc, #72]	; (8001dd0 <main+0x2fc>)
 8001d86:	f7ff fb32 	bl	80013ee <clearDisplay>

				switch (modeNum)
 8001d8a:	4b28      	ldr	r3, [pc, #160]	; (8001e2c <main+0x358>)
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	2b03      	cmp	r3, #3
 8001d90:	d00e      	beq.n	8001db0 <main+0x2dc>
 8001d92:	2b03      	cmp	r3, #3
 8001d94:	dc10      	bgt.n	8001db8 <main+0x2e4>
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d002      	beq.n	8001da0 <main+0x2cc>
 8001d9a:	2b02      	cmp	r3, #2
 8001d9c:	d004      	beq.n	8001da8 <main+0x2d4>
					break;
				case FIXED_MODE:
					state = FIXED_MODE;
					break;
				default:
					break;
 8001d9e:	e00b      	b.n	8001db8 <main+0x2e4>
					state = SD_MODE;
 8001da0:	4b1e      	ldr	r3, [pc, #120]	; (8001e1c <main+0x348>)
 8001da2:	2201      	movs	r2, #1
 8001da4:	701a      	strb	r2, [r3, #0]
					break;
 8001da6:	e008      	b.n	8001dba <main+0x2e6>
					state = BURST_MODE;
 8001da8:	4b1c      	ldr	r3, [pc, #112]	; (8001e1c <main+0x348>)
 8001daa:	2202      	movs	r2, #2
 8001dac:	701a      	strb	r2, [r3, #0]
					break;
 8001dae:	e004      	b.n	8001dba <main+0x2e6>
					state = FIXED_MODE;
 8001db0:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <main+0x348>)
 8001db2:	2203      	movs	r2, #3
 8001db4:	701a      	strb	r2, [r3, #0]
					break;
 8001db6:	e000      	b.n	8001dba <main+0x2e6>
					break;
 8001db8:	bf00      	nop
				}
			}

			break;
 8001dba:	f000 bc0a 	b.w	80025d2 <main+0xafe>

		case SD_MODE:
			SDMode();
 8001dbe:	f001 fee5 	bl	8003b8c <SDMode>
			break;
 8001dc2:	f000 bc0b 	b.w	80025dc <main+0xb08>
 8001dc6:	bf00      	nop
 8001dc8:	200004e4 	.word	0x200004e4
 8001dcc:	200002e0 	.word	0x200002e0
 8001dd0:	200005e4 	.word	0x200005e4
 8001dd4:	2000028c 	.word	0x2000028c
 8001dd8:	40020400 	.word	0x40020400
 8001ddc:	08012654 	.word	0x08012654
 8001de0:	20000654 	.word	0x20000654
 8001de4:	20000ab8 	.word	0x20000ab8
 8001de8:	08012658 	.word	0x08012658
 8001dec:	200003e4 	.word	0x200003e4
 8001df0:	20000524 	.word	0x20000524
 8001df4:	20000424 	.word	0x20000424
 8001df8:	20000464 	.word	0x20000464
 8001dfc:	20000564 	.word	0x20000564
 8001e00:	20000bd4 	.word	0x20000bd4
 8001e04:	20000abc 	.word	0x20000abc
 8001e08:	20000c38 	.word	0x20000c38
 8001e0c:	20000c3c 	.word	0x20000c3c
 8001e10:	20000ad2 	.word	0x20000ad2
 8001e14:	08012670 	.word	0x08012670
 8001e18:	20000c08 	.word	0x20000c08
 8001e1c:	20000c28 	.word	0x20000c28
 8001e20:	20000c29 	.word	0x20000c29
 8001e24:	20000c2c 	.word	0x20000c2c
 8001e28:	08012678 	.word	0x08012678
 8001e2c:	20000079 	.word	0x20000079
 8001e30:	08012688 	.word	0x08012688
 8001e34:	0801268c 	.word	0x0801268c
 8001e38:	08012698 	.word	0x08012698
 8001e3c:	080126a0 	.word	0x080126a0
 8001e40:	20000648 	.word	0x20000648
 8001e44:	2000064a 	.word	0x2000064a
 8001e48:	080126a8 	.word	0x080126a8
 8001e4c:	20000650 	.word	0x20000650


		case BURST_MODE:
			if (!printed) {
 8001e50:	4b9c      	ldr	r3, [pc, #624]	; (80020c4 <main+0x5f0>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d15c      	bne.n	8001f12 <main+0x43e>
				LCDPrintAtPos(&lcd, ">", 0, field_select);
 8001e58:	4b9b      	ldr	r3, [pc, #620]	; (80020c8 <main+0x5f4>)
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	2200      	movs	r2, #0
 8001e5e:	499b      	ldr	r1, [pc, #620]	; (80020cc <main+0x5f8>)
 8001e60:	489b      	ldr	r0, [pc, #620]	; (80020d0 <main+0x5fc>)
 8001e62:	f7ff fa8d 	bl	8001380 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "Freq:", 1, 0);
 8001e66:	2300      	movs	r3, #0
 8001e68:	2201      	movs	r2, #1
 8001e6a:	499a      	ldr	r1, [pc, #616]	; (80020d4 <main+0x600>)
 8001e6c:	4898      	ldr	r0, [pc, #608]	; (80020d0 <main+0x5fc>)
 8001e6e:	f7ff fa87 	bl	8001380 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, frequency, FREQ_DISP_POS, 0, 3);
 8001e72:	4b99      	ldr	r3, [pc, #612]	; (80020d8 <main+0x604>)
 8001e74:	8819      	ldrh	r1, [r3, #0]
 8001e76:	2303      	movs	r3, #3
 8001e78:	9300      	str	r3, [sp, #0]
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	2206      	movs	r2, #6
 8001e7e:	4894      	ldr	r0, [pc, #592]	; (80020d0 <main+0x5fc>)
 8001e80:	f7ff fa36 	bl	80012f0 <LCDPrintNumber>

				LCDPrintAtPos(&lcd, "T_on:", 1, 1);
 8001e84:	2301      	movs	r3, #1
 8001e86:	2201      	movs	r2, #1
 8001e88:	4994      	ldr	r1, [pc, #592]	; (80020dc <main+0x608>)
 8001e8a:	4891      	ldr	r0, [pc, #580]	; (80020d0 <main+0x5fc>)
 8001e8c:	f7ff fa78 	bl	8001380 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, t_on, T_ON_DISP_POS, 1, 3);
 8001e90:	4b93      	ldr	r3, [pc, #588]	; (80020e0 <main+0x60c>)
 8001e92:	8819      	ldrh	r1, [r3, #0]
 8001e94:	2303      	movs	r3, #3
 8001e96:	9300      	str	r3, [sp, #0]
 8001e98:	2301      	movs	r3, #1
 8001e9a:	2206      	movs	r2, #6
 8001e9c:	488c      	ldr	r0, [pc, #560]	; (80020d0 <main+0x5fc>)
 8001e9e:	f7ff fa27 	bl	80012f0 <LCDPrintNumber>
				LCDPrintAtPos(&lcd, "BURST", 15, 0);
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	498f      	ldr	r1, [pc, #572]	; (80020e4 <main+0x610>)
 8001ea8:	4889      	ldr	r0, [pc, #548]	; (80020d0 <main+0x5fc>)
 8001eaa:	f7ff fa69 	bl	8001380 <LCDPrintAtPos>

				LCDPrintAtPos(&lcd, "T_off:", 1, 2);
 8001eae:	2302      	movs	r3, #2
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	498d      	ldr	r1, [pc, #564]	; (80020e8 <main+0x614>)
 8001eb4:	4886      	ldr	r0, [pc, #536]	; (80020d0 <main+0x5fc>)
 8001eb6:	f7ff fa63 	bl	8001380 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, t_off, T_OFF_DISP_POS, 2, 3);
 8001eba:	4b8c      	ldr	r3, [pc, #560]	; (80020ec <main+0x618>)
 8001ebc:	8819      	ldrh	r1, [r3, #0]
 8001ebe:	2303      	movs	r3, #3
 8001ec0:	9300      	str	r3, [sp, #0]
 8001ec2:	2302      	movs	r3, #2
 8001ec4:	2207      	movs	r2, #7
 8001ec6:	4882      	ldr	r0, [pc, #520]	; (80020d0 <main+0x5fc>)
 8001ec8:	f7ff fa12 	bl	80012f0 <LCDPrintNumber>

				LCDPrintAtPos(&lcd, "BACK", 16, 2);
 8001ecc:	2302      	movs	r3, #2
 8001ece:	2210      	movs	r2, #16
 8001ed0:	4987      	ldr	r1, [pc, #540]	; (80020f0 <main+0x61c>)
 8001ed2:	487f      	ldr	r0, [pc, #508]	; (80020d0 <main+0x5fc>)
 8001ed4:	f7ff fa54 	bl	8001380 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "Ontime:", 8, 3);
 8001ed8:	2303      	movs	r3, #3
 8001eda:	2208      	movs	r2, #8
 8001edc:	4985      	ldr	r1, [pc, #532]	; (80020f4 <main+0x620>)
 8001ede:	487c      	ldr	r0, [pc, #496]	; (80020d0 <main+0x5fc>)
 8001ee0:	f7ff fa4e 	bl	8001380 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, onTime, 15, 3, 3);
 8001ee4:	4b84      	ldr	r3, [pc, #528]	; (80020f8 <main+0x624>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	b299      	uxth	r1, r3
 8001eea:	2303      	movs	r3, #3
 8001eec:	9300      	str	r3, [sp, #0]
 8001eee:	2303      	movs	r3, #3
 8001ef0:	220f      	movs	r2, #15
 8001ef2:	4877      	ldr	r0, [pc, #476]	; (80020d0 <main+0x5fc>)
 8001ef4:	f7ff f9fc 	bl	80012f0 <LCDPrintNumber>
				LCDPrintAtPos(&lcd, "us", 18, 3);
 8001ef8:	2303      	movs	r3, #3
 8001efa:	2212      	movs	r2, #18
 8001efc:	497f      	ldr	r1, [pc, #508]	; (80020fc <main+0x628>)
 8001efe:	4874      	ldr	r0, [pc, #464]	; (80020d0 <main+0x5fc>)
 8001f00:	f7ff fa3e 	bl	8001380 <LCDPrintAtPos>
				setCursor(&lcd, 0, field_select);
 8001f04:	4b70      	ldr	r3, [pc, #448]	; (80020c8 <main+0x5f4>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	461a      	mov	r2, r3
 8001f0a:	2100      	movs	r1, #0
 8001f0c:	4870      	ldr	r0, [pc, #448]	; (80020d0 <main+0x5fc>)
 8001f0e:	f7ff f987 	bl	8001220 <setCursor>
			}


			if (!isPlaying) {
 8001f12:	4b7b      	ldr	r3, [pc, #492]	; (8002100 <main+0x62c>)
 8001f14:	781b      	ldrb	r3, [r3, #0]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d12f      	bne.n	8001f7a <main+0x4a6>
				if (!printed) {
 8001f1a:	4b6a      	ldr	r3, [pc, #424]	; (80020c4 <main+0x5f0>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10f      	bne.n	8001f42 <main+0x46e>
					LCDPrintAtPos(&lcd, "Play", 1, 3);
 8001f22:	2303      	movs	r3, #3
 8001f24:	2201      	movs	r2, #1
 8001f26:	4977      	ldr	r1, [pc, #476]	; (8002104 <main+0x630>)
 8001f28:	4869      	ldr	r0, [pc, #420]	; (80020d0 <main+0x5fc>)
 8001f2a:	f7ff fa29 	bl	8001380 <LCDPrintAtPos>
					printed = true;
 8001f2e:	4b65      	ldr	r3, [pc, #404]	; (80020c4 <main+0x5f0>)
 8001f30:	2201      	movs	r2, #1
 8001f32:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, field_select);
 8001f34:	4b64      	ldr	r3, [pc, #400]	; (80020c8 <main+0x5f4>)
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	461a      	mov	r2, r3
 8001f3a:	2100      	movs	r1, #0
 8001f3c:	4864      	ldr	r0, [pc, #400]	; (80020d0 <main+0x5fc>)
 8001f3e:	f7ff f96f 	bl	8001220 <setCursor>
				}
				if (onTime != prevOnTime) {
 8001f42:	4b6d      	ldr	r3, [pc, #436]	; (80020f8 <main+0x624>)
 8001f44:	781a      	ldrb	r2, [r3, #0]
 8001f46:	4b70      	ldr	r3, [pc, #448]	; (8002108 <main+0x634>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d076      	beq.n	800203c <main+0x568>
					prevOnTime = onTime;
 8001f4e:	4b6a      	ldr	r3, [pc, #424]	; (80020f8 <main+0x624>)
 8001f50:	781a      	ldrb	r2, [r3, #0]
 8001f52:	4b6d      	ldr	r3, [pc, #436]	; (8002108 <main+0x634>)
 8001f54:	701a      	strb	r2, [r3, #0]
					LCDPrintNumber(&lcd, onTime, 15, 3, 3);
 8001f56:	4b68      	ldr	r3, [pc, #416]	; (80020f8 <main+0x624>)
 8001f58:	781b      	ldrb	r3, [r3, #0]
 8001f5a:	b299      	uxth	r1, r3
 8001f5c:	2303      	movs	r3, #3
 8001f5e:	9300      	str	r3, [sp, #0]
 8001f60:	2303      	movs	r3, #3
 8001f62:	220f      	movs	r2, #15
 8001f64:	485a      	ldr	r0, [pc, #360]	; (80020d0 <main+0x5fc>)
 8001f66:	f7ff f9c3 	bl	80012f0 <LCDPrintNumber>
					setCursor(&lcd, 0, field_select);
 8001f6a:	4b57      	ldr	r3, [pc, #348]	; (80020c8 <main+0x5f4>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	461a      	mov	r2, r3
 8001f70:	2100      	movs	r1, #0
 8001f72:	4857      	ldr	r0, [pc, #348]	; (80020d0 <main+0x5fc>)
 8001f74:	f7ff f954 	bl	8001220 <setCursor>
 8001f78:	e060      	b.n	800203c <main+0x568>

			}

			//isPlaying = true
			else {
				if (!printed) {
 8001f7a:	4b52      	ldr	r3, [pc, #328]	; (80020c4 <main+0x5f0>)
 8001f7c:	781b      	ldrb	r3, [r3, #0]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d10f      	bne.n	8001fa2 <main+0x4ce>
					LCDPrintAtPos(&lcd, "Pause", 1, 3);
 8001f82:	2303      	movs	r3, #3
 8001f84:	2201      	movs	r2, #1
 8001f86:	4961      	ldr	r1, [pc, #388]	; (800210c <main+0x638>)
 8001f88:	4851      	ldr	r0, [pc, #324]	; (80020d0 <main+0x5fc>)
 8001f8a:	f7ff f9f9 	bl	8001380 <LCDPrintAtPos>
					printed = true;
 8001f8e:	4b4d      	ldr	r3, [pc, #308]	; (80020c4 <main+0x5f0>)
 8001f90:	2201      	movs	r2, #1
 8001f92:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, field_select);
 8001f94:	4b4c      	ldr	r3, [pc, #304]	; (80020c8 <main+0x5f4>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	461a      	mov	r2, r3
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	484c      	ldr	r0, [pc, #304]	; (80020d0 <main+0x5fc>)
 8001f9e:	f7ff f93f 	bl	8001220 <setCursor>
				}
				coil1On = true;
 8001fa2:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <main+0x63c>)
 8001fa4:	2201      	movs	r2, #1
 8001fa6:	701a      	strb	r2, [r3, #0]
				if (!inCycle) {
 8001fa8:	4b5a      	ldr	r3, [pc, #360]	; (8002114 <main+0x640>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d103      	bne.n	8001fb8 <main+0x4e4>
					timeStarted = time;
 8001fb0:	4b59      	ldr	r3, [pc, #356]	; (8002118 <main+0x644>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	4a59      	ldr	r2, [pc, #356]	; (800211c <main+0x648>)
 8001fb6:	6013      	str	r3, [r2, #0]
				}
				if (time <= timeStarted + t_on + t_off) {
 8001fb8:	4b49      	ldr	r3, [pc, #292]	; (80020e0 <main+0x60c>)
 8001fba:	881b      	ldrh	r3, [r3, #0]
 8001fbc:	461a      	mov	r2, r3
 8001fbe:	4b57      	ldr	r3, [pc, #348]	; (800211c <main+0x648>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	4413      	add	r3, r2
 8001fc4:	4a49      	ldr	r2, [pc, #292]	; (80020ec <main+0x618>)
 8001fc6:	8812      	ldrh	r2, [r2, #0]
 8001fc8:	441a      	add	r2, r3
 8001fca:	4b53      	ldr	r3, [pc, #332]	; (8002118 <main+0x644>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	429a      	cmp	r2, r3
 8001fd0:	d331      	bcc.n	8002036 <main+0x562>
					inCycle = true;
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <main+0x640>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	701a      	strb	r2, [r3, #0]
					if (time <= timeStarted + t_on) {
 8001fd8:	4b41      	ldr	r3, [pc, #260]	; (80020e0 <main+0x60c>)
 8001fda:	881b      	ldrh	r3, [r3, #0]
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b4f      	ldr	r3, [pc, #316]	; (800211c <main+0x648>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	441a      	add	r2, r3
 8001fe4:	4b4c      	ldr	r3, [pc, #304]	; (8002118 <main+0x644>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d31a      	bcc.n	8002022 <main+0x54e>
						if(firstOpenDir || frequency != prevFrequency){
 8001fec:	4b4c      	ldr	r3, [pc, #304]	; (8002120 <main+0x64c>)
 8001fee:	781b      	ldrb	r3, [r3, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d105      	bne.n	8002000 <main+0x52c>
 8001ff4:	4b38      	ldr	r3, [pc, #224]	; (80020d8 <main+0x604>)
 8001ff6:	881a      	ldrh	r2, [r3, #0]
 8001ff8:	4b4a      	ldr	r3, [pc, #296]	; (8002124 <main+0x650>)
 8001ffa:	881b      	ldrh	r3, [r3, #0]
 8001ffc:	429a      	cmp	r2, r3
 8001ffe:	d01d      	beq.n	800203c <main+0x568>
							prevFrequency = frequency;
 8002000:	4b35      	ldr	r3, [pc, #212]	; (80020d8 <main+0x604>)
 8002002:	881a      	ldrh	r2, [r3, #0]
 8002004:	4b47      	ldr	r3, [pc, #284]	; (8002124 <main+0x650>)
 8002006:	801a      	strh	r2, [r3, #0]
							setTimerFrequencyPulseWidth(&COIL1, frequency, onTime, COIL1_CH);
 8002008:	4b33      	ldr	r3, [pc, #204]	; (80020d8 <main+0x604>)
 800200a:	8819      	ldrh	r1, [r3, #0]
 800200c:	4b3a      	ldr	r3, [pc, #232]	; (80020f8 <main+0x624>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	b29a      	uxth	r2, r3
 8002012:	2300      	movs	r3, #0
 8002014:	4844      	ldr	r0, [pc, #272]	; (8002128 <main+0x654>)
 8002016:	f7ff fb1d 	bl	8001654 <setTimerFrequencyPulseWidth>
							firstOpenDir = false;
 800201a:	4b41      	ldr	r3, [pc, #260]	; (8002120 <main+0x64c>)
 800201c:	2200      	movs	r2, #0
 800201e:	701a      	strb	r2, [r3, #0]
 8002020:	e00c      	b.n	800203c <main+0x568>
						}
					}
					else {
						setTimerFrequencyPulseWidth(&COIL1, 0, 0, COIL1_CH);
 8002022:	2300      	movs	r3, #0
 8002024:	2200      	movs	r2, #0
 8002026:	2100      	movs	r1, #0
 8002028:	483f      	ldr	r0, [pc, #252]	; (8002128 <main+0x654>)
 800202a:	f7ff fb13 	bl	8001654 <setTimerFrequencyPulseWidth>
						firstOpenDir = true;
 800202e:	4b3c      	ldr	r3, [pc, #240]	; (8002120 <main+0x64c>)
 8002030:	2201      	movs	r2, #1
 8002032:	701a      	strb	r2, [r3, #0]
 8002034:	e002      	b.n	800203c <main+0x568>
					}
				}
				else inCycle = false;
 8002036:	4b37      	ldr	r3, [pc, #220]	; (8002114 <main+0x640>)
 8002038:	2200      	movs	r2, #0
 800203a:	701a      	strb	r2, [r3, #0]


			}

			switch (submode) {
 800203c:	4b3b      	ldr	r3, [pc, #236]	; (800212c <main+0x658>)
 800203e:	781b      	ldrb	r3, [r3, #0]
 8002040:	2b02      	cmp	r3, #2
 8002042:	d01a      	beq.n	800207a <main+0x5a6>
 8002044:	2b02      	cmp	r3, #2
 8002046:	dc22      	bgt.n	800208e <main+0x5ba>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d002      	beq.n	8002052 <main+0x57e>
 800204c:	2b01      	cmp	r3, #1
 800204e:	d00a      	beq.n	8002066 <main+0x592>
				changeNumber(&t_off, MAX_TIME_OFF, T_OFF_DISP_POS);

				break;

			default:
				break;
 8002050:	e01d      	b.n	800208e <main+0x5ba>
				inSubmode = true;
 8002052:	4b37      	ldr	r3, [pc, #220]	; (8002130 <main+0x65c>)
 8002054:	2201      	movs	r2, #1
 8002056:	701a      	strb	r2, [r3, #0]
				changeNumber(&frequency, MAX_FREQUENCY, FREQ_DISP_POS);
 8002058:	2206      	movs	r2, #6
 800205a:	f240 31b6 	movw	r1, #950	; 0x3b6
 800205e:	481e      	ldr	r0, [pc, #120]	; (80020d8 <main+0x604>)
 8002060:	f000 fb14 	bl	800268c <changeNumber>
				break;
 8002064:	e014      	b.n	8002090 <main+0x5bc>
				inSubmode = true;
 8002066:	4b32      	ldr	r3, [pc, #200]	; (8002130 <main+0x65c>)
 8002068:	2201      	movs	r2, #1
 800206a:	701a      	strb	r2, [r3, #0]
				changeNumber(&t_on, MAX_TIME_ON, T_ON_DISP_POS);
 800206c:	2206      	movs	r2, #6
 800206e:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002072:	481b      	ldr	r0, [pc, #108]	; (80020e0 <main+0x60c>)
 8002074:	f000 fb0a 	bl	800268c <changeNumber>
				break;
 8002078:	e00a      	b.n	8002090 <main+0x5bc>
				inSubmode = true;
 800207a:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <main+0x65c>)
 800207c:	2201      	movs	r2, #1
 800207e:	701a      	strb	r2, [r3, #0]
				changeNumber(&t_off, MAX_TIME_OFF, T_OFF_DISP_POS);
 8002080:	2207      	movs	r2, #7
 8002082:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002086:	4819      	ldr	r0, [pc, #100]	; (80020ec <main+0x618>)
 8002088:	f000 fb00 	bl	800268c <changeNumber>
				break;
 800208c:	e000      	b.n	8002090 <main+0x5bc>
				break;
 800208e:	bf00      	nop
			}

			if (!inSubmode) {
 8002090:	4b27      	ldr	r3, [pc, #156]	; (8002130 <main+0x65c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	2b00      	cmp	r3, #0
 8002096:	f040 829e 	bne.w	80025d6 <main+0xb02>
				// Choosing the field to config
				if(rotaryVal != prevRotaryVal)
 800209a:	4b26      	ldr	r3, [pc, #152]	; (8002134 <main+0x660>)
 800209c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <main+0x664>)
 80020a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	f000 8094 	beq.w	80021d4 <main+0x700>
				{
					//BACK is displayed at the bottom right
					if (field_select == B_BACK) {
 80020ac:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <main+0x5f4>)
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b04      	cmp	r3, #4
 80020b2:	d145      	bne.n	8002140 <main+0x66c>
						LCDPrintAtPos(&lcd, " ", 15, 2);
 80020b4:	2302      	movs	r3, #2
 80020b6:	220f      	movs	r2, #15
 80020b8:	4920      	ldr	r1, [pc, #128]	; (800213c <main+0x668>)
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <main+0x5fc>)
 80020bc:	f7ff f960 	bl	8001380 <LCDPrintAtPos>
 80020c0:	e045      	b.n	800214e <main+0x67a>
 80020c2:	bf00      	nop
 80020c4:	20000c2c 	.word	0x20000c2c
 80020c8:	20000c31 	.word	0x20000c31
 80020cc:	08012688 	.word	0x08012688
 80020d0:	200005e4 	.word	0x200005e4
 80020d4:	080126ac 	.word	0x080126ac
 80020d8:	2000007a 	.word	0x2000007a
 80020dc:	080126b4 	.word	0x080126b4
 80020e0:	2000007e 	.word	0x2000007e
 80020e4:	080126bc 	.word	0x080126bc
 80020e8:	080126c4 	.word	0x080126c4
 80020ec:	20000080 	.word	0x20000080
 80020f0:	08012670 	.word	0x08012670
 80020f4:	080126cc 	.word	0x080126cc
 80020f8:	2000064e 	.word	0x2000064e
 80020fc:	080126d4 	.word	0x080126d4
 8002100:	20000c2b 	.word	0x20000c2b
 8002104:	080126d8 	.word	0x080126d8
 8002108:	2000064f 	.word	0x2000064f
 800210c:	080126e0 	.word	0x080126e0
 8002110:	20000ecf 	.word	0x20000ecf
 8002114:	20000c2e 	.word	0x20000c2e
 8002118:	20000c08 	.word	0x20000c08
 800211c:	20000c0c 	.word	0x20000c0c
 8002120:	20000078 	.word	0x20000078
 8002124:	2000007c 	.word	0x2000007c
 8002128:	200003e4 	.word	0x200003e4
 800212c:	20000082 	.word	0x20000082
 8002130:	20000c32 	.word	0x20000c32
 8002134:	20000648 	.word	0x20000648
 8002138:	2000064a 	.word	0x2000064a
 800213c:	080126a8 	.word	0x080126a8
					}
					else LCDPrintAtPos(&lcd, " ", 0, field_select);
 8002140:	4b8c      	ldr	r3, [pc, #560]	; (8002374 <main+0x8a0>)
 8002142:	781b      	ldrb	r3, [r3, #0]
 8002144:	2200      	movs	r2, #0
 8002146:	498c      	ldr	r1, [pc, #560]	; (8002378 <main+0x8a4>)
 8002148:	488c      	ldr	r0, [pc, #560]	; (800237c <main+0x8a8>)
 800214a:	f7ff f919 	bl	8001380 <LCDPrintAtPos>

					//Move down
					if (rotaryVal > prevRotaryVal){
 800214e:	4b8c      	ldr	r3, [pc, #560]	; (8002380 <main+0x8ac>)
 8002150:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002154:	4b8b      	ldr	r3, [pc, #556]	; (8002384 <main+0x8b0>)
 8002156:	f9b3 3000 	ldrsh.w	r3, [r3]
 800215a:	429a      	cmp	r2, r3
 800215c:	dd0e      	ble.n	800217c <main+0x6a8>
						field_select == BURST_STATE_NUM ? field_select = 0 : field_select ++;
 800215e:	4b85      	ldr	r3, [pc, #532]	; (8002374 <main+0x8a0>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	2b04      	cmp	r3, #4
 8002164:	d103      	bne.n	800216e <main+0x69a>
 8002166:	4b83      	ldr	r3, [pc, #524]	; (8002374 <main+0x8a0>)
 8002168:	2200      	movs	r2, #0
 800216a:	701a      	strb	r2, [r3, #0]
 800216c:	e014      	b.n	8002198 <main+0x6c4>
 800216e:	4b81      	ldr	r3, [pc, #516]	; (8002374 <main+0x8a0>)
 8002170:	781b      	ldrb	r3, [r3, #0]
 8002172:	3301      	adds	r3, #1
 8002174:	b2da      	uxtb	r2, r3
 8002176:	4b7f      	ldr	r3, [pc, #508]	; (8002374 <main+0x8a0>)
 8002178:	701a      	strb	r2, [r3, #0]
 800217a:	e00d      	b.n	8002198 <main+0x6c4>
					}
					//Move up
					else {
						(field_select == 0)? field_select = BURST_STATE_NUM : field_select --;
 800217c:	4b7d      	ldr	r3, [pc, #500]	; (8002374 <main+0x8a0>)
 800217e:	781b      	ldrb	r3, [r3, #0]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d103      	bne.n	800218c <main+0x6b8>
 8002184:	4b7b      	ldr	r3, [pc, #492]	; (8002374 <main+0x8a0>)
 8002186:	2204      	movs	r2, #4
 8002188:	701a      	strb	r2, [r3, #0]
 800218a:	e005      	b.n	8002198 <main+0x6c4>
 800218c:	4b79      	ldr	r3, [pc, #484]	; (8002374 <main+0x8a0>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	3b01      	subs	r3, #1
 8002192:	b2da      	uxtb	r2, r3
 8002194:	4b77      	ldr	r3, [pc, #476]	; (8002374 <main+0x8a0>)
 8002196:	701a      	strb	r2, [r3, #0]
					}

					//BACK is displayed at the bottom right
					if (field_select == B_BACK) {
 8002198:	4b76      	ldr	r3, [pc, #472]	; (8002374 <main+0x8a0>)
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	2b04      	cmp	r3, #4
 800219e:	d106      	bne.n	80021ae <main+0x6da>
						LCDPrintAtPos(&lcd, ">", 15, 2);
 80021a0:	2302      	movs	r3, #2
 80021a2:	220f      	movs	r2, #15
 80021a4:	4978      	ldr	r1, [pc, #480]	; (8002388 <main+0x8b4>)
 80021a6:	4875      	ldr	r0, [pc, #468]	; (800237c <main+0x8a8>)
 80021a8:	f7ff f8ea 	bl	8001380 <LCDPrintAtPos>
 80021ac:	e006      	b.n	80021bc <main+0x6e8>
					}
					else LCDPrintAtPos(&lcd, ">", 0, field_select);
 80021ae:	4b71      	ldr	r3, [pc, #452]	; (8002374 <main+0x8a0>)
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	2200      	movs	r2, #0
 80021b4:	4974      	ldr	r1, [pc, #464]	; (8002388 <main+0x8b4>)
 80021b6:	4871      	ldr	r0, [pc, #452]	; (800237c <main+0x8a8>)
 80021b8:	f7ff f8e2 	bl	8001380 <LCDPrintAtPos>
					setCursor(&lcd, 0, field_select);
 80021bc:	4b6d      	ldr	r3, [pc, #436]	; (8002374 <main+0x8a0>)
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	461a      	mov	r2, r3
 80021c2:	2100      	movs	r1, #0
 80021c4:	486d      	ldr	r0, [pc, #436]	; (800237c <main+0x8a8>)
 80021c6:	f7ff f82b 	bl	8001220 <setCursor>

					prevRotaryVal =  rotaryVal;
 80021ca:	4b6d      	ldr	r3, [pc, #436]	; (8002380 <main+0x8ac>)
 80021cc:	f9b3 2000 	ldrsh.w	r2, [r3]
 80021d0:	4b6c      	ldr	r3, [pc, #432]	; (8002384 <main+0x8b0>)
 80021d2:	801a      	strh	r2, [r3, #0]
				}

				if (buttonPushed) {
 80021d4:	4b6d      	ldr	r3, [pc, #436]	; (800238c <main+0x8b8>)
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	f000 81fc 	beq.w	80025d6 <main+0xb02>
					buttonPushed = false;
 80021de:	4b6b      	ldr	r3, [pc, #428]	; (800238c <main+0x8b8>)
 80021e0:	2200      	movs	r2, #0
 80021e2:	701a      	strb	r2, [r3, #0]

					switch (field_select) {
 80021e4:	4b63      	ldr	r3, [pc, #396]	; (8002374 <main+0x8a0>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d849      	bhi.n	8002280 <main+0x7ac>
 80021ec:	a201      	add	r2, pc, #4	; (adr r2, 80021f4 <main+0x720>)
 80021ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80021f2:	bf00      	nop
 80021f4:	08002209 	.word	0x08002209
 80021f8:	08002211 	.word	0x08002211
 80021fc:	08002219 	.word	0x08002219
 8002200:	08002221 	.word	0x08002221
 8002204:	0800224f 	.word	0x0800224f
					case B_FREQUENCY:
						submode = B_FREQUENCY;
 8002208:	4b61      	ldr	r3, [pc, #388]	; (8002390 <main+0x8bc>)
 800220a:	2200      	movs	r2, #0
 800220c:	701a      	strb	r2, [r3, #0]
						break;
 800220e:	e038      	b.n	8002282 <main+0x7ae>

					case B_TON:
						submode = B_TON;
 8002210:	4b5f      	ldr	r3, [pc, #380]	; (8002390 <main+0x8bc>)
 8002212:	2201      	movs	r2, #1
 8002214:	701a      	strb	r2, [r3, #0]
						break;
 8002216:	e034      	b.n	8002282 <main+0x7ae>

					case B_TOFF:
						submode = B_TOFF;
 8002218:	4b5d      	ldr	r3, [pc, #372]	; (8002390 <main+0x8bc>)
 800221a:	2202      	movs	r2, #2
 800221c:	701a      	strb	r2, [r3, #0]
						break;
 800221e:	e030      	b.n	8002282 <main+0x7ae>

					case B_PLAY_PAUSE:
						printed = false;
 8002220:	4b5c      	ldr	r3, [pc, #368]	; (8002394 <main+0x8c0>)
 8002222:	2200      	movs	r2, #0
 8002224:	701a      	strb	r2, [r3, #0]
						clearDisplay(&lcd);
 8002226:	4855      	ldr	r0, [pc, #340]	; (800237c <main+0x8a8>)
 8002228:	f7ff f8e1 	bl	80013ee <clearDisplay>
						if (isPlaying) {
 800222c:	4b5a      	ldr	r3, [pc, #360]	; (8002398 <main+0x8c4>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d001      	beq.n	8002238 <main+0x764>
							turnOffAllCoils();
 8002234:	f7ff fbf0 	bl	8001a18 <turnOffAllCoils>
						}
						isPlaying = !isPlaying;
 8002238:	4b57      	ldr	r3, [pc, #348]	; (8002398 <main+0x8c4>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	2b00      	cmp	r3, #0
 800223e:	bf0c      	ite	eq
 8002240:	2301      	moveq	r3, #1
 8002242:	2300      	movne	r3, #0
 8002244:	b2db      	uxtb	r3, r3
 8002246:	461a      	mov	r2, r3
 8002248:	4b53      	ldr	r3, [pc, #332]	; (8002398 <main+0x8c4>)
 800224a:	701a      	strb	r2, [r3, #0]

						break;
 800224c:	e019      	b.n	8002282 <main+0x7ae>

					case B_BACK:
						submode = -1;
 800224e:	4b50      	ldr	r3, [pc, #320]	; (8002390 <main+0x8bc>)
 8002250:	22ff      	movs	r2, #255	; 0xff
 8002252:	701a      	strb	r2, [r3, #0]
						printed = false;
 8002254:	4b4f      	ldr	r3, [pc, #316]	; (8002394 <main+0x8c0>)
 8002256:	2200      	movs	r2, #0
 8002258:	701a      	strb	r2, [r3, #0]
						clearDisplay(&lcd);
 800225a:	4848      	ldr	r0, [pc, #288]	; (800237c <main+0x8a8>)
 800225c:	f7ff f8c7 	bl	80013ee <clearDisplay>
						field_select = 0;
 8002260:	4b44      	ldr	r3, [pc, #272]	; (8002374 <main+0x8a0>)
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]
						if (isPlaying) {
 8002266:	4b4c      	ldr	r3, [pc, #304]	; (8002398 <main+0x8c4>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d004      	beq.n	8002278 <main+0x7a4>
							turnOffAllCoils();
 800226e:	f7ff fbd3 	bl	8001a18 <turnOffAllCoils>
							isPlaying = false;
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <main+0x8c4>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
						}
						state = MODE_SELECT;
 8002278:	4b48      	ldr	r3, [pc, #288]	; (800239c <main+0x8c8>)
 800227a:	2200      	movs	r2, #0
 800227c:	701a      	strb	r2, [r3, #0]
						break;
 800227e:	e000      	b.n	8002282 <main+0x7ae>

					default:
						break;
 8002280:	bf00      	nop
					}
				}
			}


			break;
 8002282:	e1a8      	b.n	80025d6 <main+0xb02>

			case FIXED_MODE:
				if (!printed) {
 8002284:	4b43      	ldr	r3, [pc, #268]	; (8002394 <main+0x8c0>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d13e      	bne.n	800230a <main+0x836>
					LCDPrintAtPos(&lcd, ">", 0, field_select);
 800228c:	4b39      	ldr	r3, [pc, #228]	; (8002374 <main+0x8a0>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	2200      	movs	r2, #0
 8002292:	493d      	ldr	r1, [pc, #244]	; (8002388 <main+0x8b4>)
 8002294:	4839      	ldr	r0, [pc, #228]	; (800237c <main+0x8a8>)
 8002296:	f7ff f873 	bl	8001380 <LCDPrintAtPos>
					LCDPrintAtPos(&lcd, "Freq:", 1, 0);
 800229a:	2300      	movs	r3, #0
 800229c:	2201      	movs	r2, #1
 800229e:	4940      	ldr	r1, [pc, #256]	; (80023a0 <main+0x8cc>)
 80022a0:	4836      	ldr	r0, [pc, #216]	; (800237c <main+0x8a8>)
 80022a2:	f7ff f86d 	bl	8001380 <LCDPrintAtPos>
					LCDPrintNumber(&lcd, frequency, FREQ_DISP_POS, 0, 3);
 80022a6:	4b3f      	ldr	r3, [pc, #252]	; (80023a4 <main+0x8d0>)
 80022a8:	8819      	ldrh	r1, [r3, #0]
 80022aa:	2303      	movs	r3, #3
 80022ac:	9300      	str	r3, [sp, #0]
 80022ae:	2300      	movs	r3, #0
 80022b0:	2206      	movs	r2, #6
 80022b2:	4832      	ldr	r0, [pc, #200]	; (800237c <main+0x8a8>)
 80022b4:	f7ff f81c 	bl	80012f0 <LCDPrintNumber>

					LCDPrintAtPos(&lcd, "FIXED", 15, 0);
 80022b8:	2300      	movs	r3, #0
 80022ba:	220f      	movs	r2, #15
 80022bc:	493a      	ldr	r1, [pc, #232]	; (80023a8 <main+0x8d4>)
 80022be:	482f      	ldr	r0, [pc, #188]	; (800237c <main+0x8a8>)
 80022c0:	f7ff f85e 	bl	8001380 <LCDPrintAtPos>
					LCDPrintAtPos(&lcd, "BACK", 1, 2);
 80022c4:	2302      	movs	r3, #2
 80022c6:	2201      	movs	r2, #1
 80022c8:	4938      	ldr	r1, [pc, #224]	; (80023ac <main+0x8d8>)
 80022ca:	482c      	ldr	r0, [pc, #176]	; (800237c <main+0x8a8>)
 80022cc:	f7ff f858 	bl	8001380 <LCDPrintAtPos>

					LCDPrintAtPos(&lcd, "Ontime:", 1, 3);
 80022d0:	2303      	movs	r3, #3
 80022d2:	2201      	movs	r2, #1
 80022d4:	4936      	ldr	r1, [pc, #216]	; (80023b0 <main+0x8dc>)
 80022d6:	4829      	ldr	r0, [pc, #164]	; (800237c <main+0x8a8>)
 80022d8:	f7ff f852 	bl	8001380 <LCDPrintAtPos>
					LCDPrintNumber(&lcd, onTime, 8, 3, 3);
 80022dc:	4b35      	ldr	r3, [pc, #212]	; (80023b4 <main+0x8e0>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b299      	uxth	r1, r3
 80022e2:	2303      	movs	r3, #3
 80022e4:	9300      	str	r3, [sp, #0]
 80022e6:	2303      	movs	r3, #3
 80022e8:	2208      	movs	r2, #8
 80022ea:	4824      	ldr	r0, [pc, #144]	; (800237c <main+0x8a8>)
 80022ec:	f7ff f800 	bl	80012f0 <LCDPrintNumber>
					LCDPrintAtPos(&lcd, "us", 11, 3);
 80022f0:	2303      	movs	r3, #3
 80022f2:	220b      	movs	r2, #11
 80022f4:	4930      	ldr	r1, [pc, #192]	; (80023b8 <main+0x8e4>)
 80022f6:	4821      	ldr	r0, [pc, #132]	; (800237c <main+0x8a8>)
 80022f8:	f7ff f842 	bl	8001380 <LCDPrintAtPos>
					setCursor(&lcd, 0, field_select);
 80022fc:	4b1d      	ldr	r3, [pc, #116]	; (8002374 <main+0x8a0>)
 80022fe:	781b      	ldrb	r3, [r3, #0]
 8002300:	461a      	mov	r2, r3
 8002302:	2100      	movs	r1, #0
 8002304:	481d      	ldr	r0, [pc, #116]	; (800237c <main+0x8a8>)
 8002306:	f7fe ff8b 	bl	8001220 <setCursor>
				}


				if (!isPlaying) {
 800230a:	4b23      	ldr	r3, [pc, #140]	; (8002398 <main+0x8c4>)
 800230c:	781b      	ldrb	r3, [r3, #0]
 800230e:	2b00      	cmp	r3, #0
 8002310:	d158      	bne.n	80023c4 <main+0x8f0>
					if (!printed) {
 8002312:	4b20      	ldr	r3, [pc, #128]	; (8002394 <main+0x8c0>)
 8002314:	781b      	ldrb	r3, [r3, #0]
 8002316:	2b00      	cmp	r3, #0
 8002318:	d10f      	bne.n	800233a <main+0x866>
						LCDPrintAtPos(&lcd, "Play", 1, 1);
 800231a:	2301      	movs	r3, #1
 800231c:	2201      	movs	r2, #1
 800231e:	4927      	ldr	r1, [pc, #156]	; (80023bc <main+0x8e8>)
 8002320:	4816      	ldr	r0, [pc, #88]	; (800237c <main+0x8a8>)
 8002322:	f7ff f82d 	bl	8001380 <LCDPrintAtPos>
						printed = true;
 8002326:	4b1b      	ldr	r3, [pc, #108]	; (8002394 <main+0x8c0>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
						setCursor(&lcd, 0, field_select);
 800232c:	4b11      	ldr	r3, [pc, #68]	; (8002374 <main+0x8a0>)
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	461a      	mov	r2, r3
 8002332:	2100      	movs	r1, #0
 8002334:	4811      	ldr	r0, [pc, #68]	; (800237c <main+0x8a8>)
 8002336:	f7fe ff73 	bl	8001220 <setCursor>
					}
					if (onTime != prevOnTime) {
 800233a:	4b1e      	ldr	r3, [pc, #120]	; (80023b4 <main+0x8e0>)
 800233c:	781a      	ldrb	r2, [r3, #0]
 800233e:	4b20      	ldr	r3, [pc, #128]	; (80023c0 <main+0x8ec>)
 8002340:	781b      	ldrb	r3, [r3, #0]
 8002342:	429a      	cmp	r2, r3
 8002344:	f000 8095 	beq.w	8002472 <main+0x99e>
						prevOnTime = onTime;
 8002348:	4b1a      	ldr	r3, [pc, #104]	; (80023b4 <main+0x8e0>)
 800234a:	781a      	ldrb	r2, [r3, #0]
 800234c:	4b1c      	ldr	r3, [pc, #112]	; (80023c0 <main+0x8ec>)
 800234e:	701a      	strb	r2, [r3, #0]
						LCDPrintNumber(&lcd, onTime, 8, 3, 3);
 8002350:	4b18      	ldr	r3, [pc, #96]	; (80023b4 <main+0x8e0>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	b299      	uxth	r1, r3
 8002356:	2303      	movs	r3, #3
 8002358:	9300      	str	r3, [sp, #0]
 800235a:	2303      	movs	r3, #3
 800235c:	2208      	movs	r2, #8
 800235e:	4807      	ldr	r0, [pc, #28]	; (800237c <main+0x8a8>)
 8002360:	f7fe ffc6 	bl	80012f0 <LCDPrintNumber>
						setCursor(&lcd, 0, field_select);
 8002364:	4b03      	ldr	r3, [pc, #12]	; (8002374 <main+0x8a0>)
 8002366:	781b      	ldrb	r3, [r3, #0]
 8002368:	461a      	mov	r2, r3
 800236a:	2100      	movs	r1, #0
 800236c:	4803      	ldr	r0, [pc, #12]	; (800237c <main+0x8a8>)
 800236e:	f7fe ff57 	bl	8001220 <setCursor>
 8002372:	e07e      	b.n	8002472 <main+0x99e>
 8002374:	20000c31 	.word	0x20000c31
 8002378:	080126a8 	.word	0x080126a8
 800237c:	200005e4 	.word	0x200005e4
 8002380:	20000648 	.word	0x20000648
 8002384:	2000064a 	.word	0x2000064a
 8002388:	08012688 	.word	0x08012688
 800238c:	20000650 	.word	0x20000650
 8002390:	20000082 	.word	0x20000082
 8002394:	20000c2c 	.word	0x20000c2c
 8002398:	20000c2b 	.word	0x20000c2b
 800239c:	20000c28 	.word	0x20000c28
 80023a0:	080126ac 	.word	0x080126ac
 80023a4:	2000007a 	.word	0x2000007a
 80023a8:	080126e8 	.word	0x080126e8
 80023ac:	08012670 	.word	0x08012670
 80023b0:	080126cc 	.word	0x080126cc
 80023b4:	2000064e 	.word	0x2000064e
 80023b8:	080126d4 	.word	0x080126d4
 80023bc:	080126d8 	.word	0x080126d8
 80023c0:	2000064f 	.word	0x2000064f
					}
				}

				//isPlaying = true
				else {
					if (!printed) {
 80023c4:	4b9a      	ldr	r3, [pc, #616]	; (8002630 <main+0xb5c>)
 80023c6:	781b      	ldrb	r3, [r3, #0]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d10f      	bne.n	80023ec <main+0x918>
						LCDPrintAtPos(&lcd, "Pause", 1, 1);
 80023cc:	2301      	movs	r3, #1
 80023ce:	2201      	movs	r2, #1
 80023d0:	4998      	ldr	r1, [pc, #608]	; (8002634 <main+0xb60>)
 80023d2:	4899      	ldr	r0, [pc, #612]	; (8002638 <main+0xb64>)
 80023d4:	f7fe ffd4 	bl	8001380 <LCDPrintAtPos>
						printed = true;
 80023d8:	4b95      	ldr	r3, [pc, #596]	; (8002630 <main+0xb5c>)
 80023da:	2201      	movs	r2, #1
 80023dc:	701a      	strb	r2, [r3, #0]
						setCursor(&lcd, 0, field_select);
 80023de:	4b97      	ldr	r3, [pc, #604]	; (800263c <main+0xb68>)
 80023e0:	781b      	ldrb	r3, [r3, #0]
 80023e2:	461a      	mov	r2, r3
 80023e4:	2100      	movs	r1, #0
 80023e6:	4894      	ldr	r0, [pc, #592]	; (8002638 <main+0xb64>)
 80023e8:	f7fe ff1a 	bl	8001220 <setCursor>
					}

					if (!coil1On) {
 80023ec:	4b94      	ldr	r3, [pc, #592]	; (8002640 <main+0xb6c>)
 80023ee:	781b      	ldrb	r3, [r3, #0]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d10b      	bne.n	800240c <main+0x938>
						setTimerFrequencyPulseWidth(&COIL1, frequency, onTime, COIL1_CH);
 80023f4:	4b93      	ldr	r3, [pc, #588]	; (8002644 <main+0xb70>)
 80023f6:	8819      	ldrh	r1, [r3, #0]
 80023f8:	4b93      	ldr	r3, [pc, #588]	; (8002648 <main+0xb74>)
 80023fa:	781b      	ldrb	r3, [r3, #0]
 80023fc:	b29a      	uxth	r2, r3
 80023fe:	2300      	movs	r3, #0
 8002400:	4892      	ldr	r0, [pc, #584]	; (800264c <main+0xb78>)
 8002402:	f7ff f927 	bl	8001654 <setTimerFrequencyPulseWidth>
						coil1On = true;
 8002406:	4b8e      	ldr	r3, [pc, #568]	; (8002640 <main+0xb6c>)
 8002408:	2201      	movs	r2, #1
 800240a:	701a      	strb	r2, [r3, #0]
					}

					if (prevFrequency != frequency || onTime != prevOnTime) {
 800240c:	4b90      	ldr	r3, [pc, #576]	; (8002650 <main+0xb7c>)
 800240e:	881a      	ldrh	r2, [r3, #0]
 8002410:	4b8c      	ldr	r3, [pc, #560]	; (8002644 <main+0xb70>)
 8002412:	881b      	ldrh	r3, [r3, #0]
 8002414:	429a      	cmp	r2, r3
 8002416:	d105      	bne.n	8002424 <main+0x950>
 8002418:	4b8b      	ldr	r3, [pc, #556]	; (8002648 <main+0xb74>)
 800241a:	781a      	ldrb	r2, [r3, #0]
 800241c:	4b8d      	ldr	r3, [pc, #564]	; (8002654 <main+0xb80>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	429a      	cmp	r2, r3
 8002422:	d026      	beq.n	8002472 <main+0x99e>
						turnOffAllCoils();
 8002424:	f7ff faf8 	bl	8001a18 <turnOffAllCoils>
						setTimerFrequencyPulseWidth(&COIL1, frequency, onTime, COIL1_CH);
 8002428:	4b86      	ldr	r3, [pc, #536]	; (8002644 <main+0xb70>)
 800242a:	8819      	ldrh	r1, [r3, #0]
 800242c:	4b86      	ldr	r3, [pc, #536]	; (8002648 <main+0xb74>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	b29a      	uxth	r2, r3
 8002432:	2300      	movs	r3, #0
 8002434:	4885      	ldr	r0, [pc, #532]	; (800264c <main+0xb78>)
 8002436:	f7ff f90d 	bl	8001654 <setTimerFrequencyPulseWidth>
						prevFrequency = frequency;
 800243a:	4b82      	ldr	r3, [pc, #520]	; (8002644 <main+0xb70>)
 800243c:	881a      	ldrh	r2, [r3, #0]
 800243e:	4b84      	ldr	r3, [pc, #528]	; (8002650 <main+0xb7c>)
 8002440:	801a      	strh	r2, [r3, #0]
						prevOnTime = onTime;
 8002442:	4b81      	ldr	r3, [pc, #516]	; (8002648 <main+0xb74>)
 8002444:	781a      	ldrb	r2, [r3, #0]
 8002446:	4b83      	ldr	r3, [pc, #524]	; (8002654 <main+0xb80>)
 8002448:	701a      	strb	r2, [r3, #0]
						LCDPrintNumber(&lcd, onTime, 8, 3, 3);
 800244a:	4b7f      	ldr	r3, [pc, #508]	; (8002648 <main+0xb74>)
 800244c:	781b      	ldrb	r3, [r3, #0]
 800244e:	b299      	uxth	r1, r3
 8002450:	2303      	movs	r3, #3
 8002452:	9300      	str	r3, [sp, #0]
 8002454:	2303      	movs	r3, #3
 8002456:	2208      	movs	r2, #8
 8002458:	4877      	ldr	r0, [pc, #476]	; (8002638 <main+0xb64>)
 800245a:	f7fe ff49 	bl	80012f0 <LCDPrintNumber>
						coil1On = true;
 800245e:	4b78      	ldr	r3, [pc, #480]	; (8002640 <main+0xb6c>)
 8002460:	2201      	movs	r2, #1
 8002462:	701a      	strb	r2, [r3, #0]
						setCursor(&lcd, 0, field_select);
 8002464:	4b75      	ldr	r3, [pc, #468]	; (800263c <main+0xb68>)
 8002466:	781b      	ldrb	r3, [r3, #0]
 8002468:	461a      	mov	r2, r3
 800246a:	2100      	movs	r1, #0
 800246c:	4872      	ldr	r0, [pc, #456]	; (8002638 <main+0xb64>)
 800246e:	f7fe fed7 	bl	8001220 <setCursor>
					}
				}



				switch (submode) {
 8002472:	4b79      	ldr	r3, [pc, #484]	; (8002658 <main+0xb84>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d109      	bne.n	800248e <main+0x9ba>
				case F_FREQUENCY:
					inSubmode = true;
 800247a:	4b78      	ldr	r3, [pc, #480]	; (800265c <main+0xb88>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
					changeNumber(&frequency, MAX_FREQUENCY, FREQ_DISP_POS);
 8002480:	2206      	movs	r2, #6
 8002482:	f240 31b6 	movw	r1, #950	; 0x3b6
 8002486:	486f      	ldr	r0, [pc, #444]	; (8002644 <main+0xb70>)
 8002488:	f000 f900 	bl	800268c <changeNumber>
					break;
 800248c:	e000      	b.n	8002490 <main+0x9bc>

				default:
					break;
 800248e:	bf00      	nop
				}



				if (!inSubmode) {
 8002490:	4b72      	ldr	r3, [pc, #456]	; (800265c <main+0xb88>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	f040 80a0 	bne.w	80025da <main+0xb06>
					// Choosing the field to config
					if(rotaryVal != prevRotaryVal)
 800249a:	4b71      	ldr	r3, [pc, #452]	; (8002660 <main+0xb8c>)
 800249c:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024a0:	4b70      	ldr	r3, [pc, #448]	; (8002664 <main+0xb90>)
 80024a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024a6:	429a      	cmp	r2, r3
 80024a8:	d049      	beq.n	800253e <main+0xa6a>
					{
						//BACK is displayed at the bottom right
						if (field_select == B_BACK) {
 80024aa:	4b64      	ldr	r3, [pc, #400]	; (800263c <main+0xb68>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	2b04      	cmp	r3, #4
 80024b0:	d106      	bne.n	80024c0 <main+0x9ec>
							LCDPrintAtPos(&lcd, " ", 0, 2);
 80024b2:	2302      	movs	r3, #2
 80024b4:	2200      	movs	r2, #0
 80024b6:	496c      	ldr	r1, [pc, #432]	; (8002668 <main+0xb94>)
 80024b8:	485f      	ldr	r0, [pc, #380]	; (8002638 <main+0xb64>)
 80024ba:	f7fe ff61 	bl	8001380 <LCDPrintAtPos>
 80024be:	e006      	b.n	80024ce <main+0x9fa>
						}
						else LCDPrintAtPos(&lcd, " ", 0, field_select);
 80024c0:	4b5e      	ldr	r3, [pc, #376]	; (800263c <main+0xb68>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	2200      	movs	r2, #0
 80024c6:	4968      	ldr	r1, [pc, #416]	; (8002668 <main+0xb94>)
 80024c8:	485b      	ldr	r0, [pc, #364]	; (8002638 <main+0xb64>)
 80024ca:	f7fe ff59 	bl	8001380 <LCDPrintAtPos>

						//Move down
						if (rotaryVal > prevRotaryVal){
 80024ce:	4b64      	ldr	r3, [pc, #400]	; (8002660 <main+0xb8c>)
 80024d0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80024d4:	4b63      	ldr	r3, [pc, #396]	; (8002664 <main+0xb90>)
 80024d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80024da:	429a      	cmp	r2, r3
 80024dc:	dd0e      	ble.n	80024fc <main+0xa28>
							field_select == FIXED_STATE_NUM ? field_select = 0 : field_select ++;
 80024de:	4b57      	ldr	r3, [pc, #348]	; (800263c <main+0xb68>)
 80024e0:	781b      	ldrb	r3, [r3, #0]
 80024e2:	2b02      	cmp	r3, #2
 80024e4:	d103      	bne.n	80024ee <main+0xa1a>
 80024e6:	4b55      	ldr	r3, [pc, #340]	; (800263c <main+0xb68>)
 80024e8:	2200      	movs	r2, #0
 80024ea:	701a      	strb	r2, [r3, #0]
 80024ec:	e014      	b.n	8002518 <main+0xa44>
 80024ee:	4b53      	ldr	r3, [pc, #332]	; (800263c <main+0xb68>)
 80024f0:	781b      	ldrb	r3, [r3, #0]
 80024f2:	3301      	adds	r3, #1
 80024f4:	b2da      	uxtb	r2, r3
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <main+0xb68>)
 80024f8:	701a      	strb	r2, [r3, #0]
 80024fa:	e00d      	b.n	8002518 <main+0xa44>
						}
						//Move up
						else {
							(field_select == 0)? field_select = FIXED_STATE_NUM : field_select --;
 80024fc:	4b4f      	ldr	r3, [pc, #316]	; (800263c <main+0xb68>)
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d103      	bne.n	800250c <main+0xa38>
 8002504:	4b4d      	ldr	r3, [pc, #308]	; (800263c <main+0xb68>)
 8002506:	2202      	movs	r2, #2
 8002508:	701a      	strb	r2, [r3, #0]
 800250a:	e005      	b.n	8002518 <main+0xa44>
 800250c:	4b4b      	ldr	r3, [pc, #300]	; (800263c <main+0xb68>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	3b01      	subs	r3, #1
 8002512:	b2da      	uxtb	r2, r3
 8002514:	4b49      	ldr	r3, [pc, #292]	; (800263c <main+0xb68>)
 8002516:	701a      	strb	r2, [r3, #0]
						}

						LCDPrintAtPos(&lcd, ">", 0, field_select);
 8002518:	4b48      	ldr	r3, [pc, #288]	; (800263c <main+0xb68>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	2200      	movs	r2, #0
 800251e:	4953      	ldr	r1, [pc, #332]	; (800266c <main+0xb98>)
 8002520:	4845      	ldr	r0, [pc, #276]	; (8002638 <main+0xb64>)
 8002522:	f7fe ff2d 	bl	8001380 <LCDPrintAtPos>
						setCursor(&lcd, 0, field_select);
 8002526:	4b45      	ldr	r3, [pc, #276]	; (800263c <main+0xb68>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	2100      	movs	r1, #0
 800252e:	4842      	ldr	r0, [pc, #264]	; (8002638 <main+0xb64>)
 8002530:	f7fe fe76 	bl	8001220 <setCursor>

						prevRotaryVal =  rotaryVal;
 8002534:	4b4a      	ldr	r3, [pc, #296]	; (8002660 <main+0xb8c>)
 8002536:	f9b3 2000 	ldrsh.w	r2, [r3]
 800253a:	4b4a      	ldr	r3, [pc, #296]	; (8002664 <main+0xb90>)
 800253c:	801a      	strh	r2, [r3, #0]
					}


					if (buttonPushed) {
 800253e:	4b4c      	ldr	r3, [pc, #304]	; (8002670 <main+0xb9c>)
 8002540:	781b      	ldrb	r3, [r3, #0]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d049      	beq.n	80025da <main+0xb06>
						buttonPushed = false;
 8002546:	4b4a      	ldr	r3, [pc, #296]	; (8002670 <main+0xb9c>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]

						switch (field_select) {
 800254c:	4b3b      	ldr	r3, [pc, #236]	; (800263c <main+0xb68>)
 800254e:	781b      	ldrb	r3, [r3, #0]
 8002550:	2b02      	cmp	r3, #2
 8002552:	d021      	beq.n	8002598 <main+0xac4>
 8002554:	2b02      	cmp	r3, #2
 8002556:	dc38      	bgt.n	80025ca <main+0xaf6>
 8002558:	2b00      	cmp	r3, #0
 800255a:	d002      	beq.n	8002562 <main+0xa8e>
 800255c:	2b01      	cmp	r3, #1
 800255e:	d004      	beq.n	800256a <main+0xa96>
							}
							state = MODE_SELECT;
							break;

						default:
							break;
 8002560:	e033      	b.n	80025ca <main+0xaf6>
							submode = F_FREQUENCY;
 8002562:	4b3d      	ldr	r3, [pc, #244]	; (8002658 <main+0xb84>)
 8002564:	2200      	movs	r2, #0
 8002566:	701a      	strb	r2, [r3, #0]
							break;
 8002568:	e030      	b.n	80025cc <main+0xaf8>
							printed = false;
 800256a:	4b31      	ldr	r3, [pc, #196]	; (8002630 <main+0xb5c>)
 800256c:	2200      	movs	r2, #0
 800256e:	701a      	strb	r2, [r3, #0]
							clearDisplay(&lcd);
 8002570:	4831      	ldr	r0, [pc, #196]	; (8002638 <main+0xb64>)
 8002572:	f7fe ff3c 	bl	80013ee <clearDisplay>
							if (isPlaying) {
 8002576:	4b3f      	ldr	r3, [pc, #252]	; (8002674 <main+0xba0>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <main+0xaae>
								turnOffAllCoils();
 800257e:	f7ff fa4b 	bl	8001a18 <turnOffAllCoils>
							isPlaying = !isPlaying;
 8002582:	4b3c      	ldr	r3, [pc, #240]	; (8002674 <main+0xba0>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b00      	cmp	r3, #0
 8002588:	bf0c      	ite	eq
 800258a:	2301      	moveq	r3, #1
 800258c:	2300      	movne	r3, #0
 800258e:	b2db      	uxtb	r3, r3
 8002590:	461a      	mov	r2, r3
 8002592:	4b38      	ldr	r3, [pc, #224]	; (8002674 <main+0xba0>)
 8002594:	701a      	strb	r2, [r3, #0]
							break;
 8002596:	e019      	b.n	80025cc <main+0xaf8>
							submode = -1;
 8002598:	4b2f      	ldr	r3, [pc, #188]	; (8002658 <main+0xb84>)
 800259a:	22ff      	movs	r2, #255	; 0xff
 800259c:	701a      	strb	r2, [r3, #0]
							printed = false;
 800259e:	4b24      	ldr	r3, [pc, #144]	; (8002630 <main+0xb5c>)
 80025a0:	2200      	movs	r2, #0
 80025a2:	701a      	strb	r2, [r3, #0]
							clearDisplay(&lcd);
 80025a4:	4824      	ldr	r0, [pc, #144]	; (8002638 <main+0xb64>)
 80025a6:	f7fe ff22 	bl	80013ee <clearDisplay>
							field_select = 0;
 80025aa:	4b24      	ldr	r3, [pc, #144]	; (800263c <main+0xb68>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	701a      	strb	r2, [r3, #0]
							if (isPlaying) {
 80025b0:	4b30      	ldr	r3, [pc, #192]	; (8002674 <main+0xba0>)
 80025b2:	781b      	ldrb	r3, [r3, #0]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d004      	beq.n	80025c2 <main+0xaee>
								turnOffAllCoils();
 80025b8:	f7ff fa2e 	bl	8001a18 <turnOffAllCoils>
								isPlaying = false;
 80025bc:	4b2d      	ldr	r3, [pc, #180]	; (8002674 <main+0xba0>)
 80025be:	2200      	movs	r2, #0
 80025c0:	701a      	strb	r2, [r3, #0]
							state = MODE_SELECT;
 80025c2:	4b2d      	ldr	r3, [pc, #180]	; (8002678 <main+0xba4>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	701a      	strb	r2, [r3, #0]
							break;
 80025c8:	e000      	b.n	80025cc <main+0xaf8>
							break;
 80025ca:	bf00      	nop

						}
					}
				}

				break;
 80025cc:	e005      	b.n	80025da <main+0xb06>

				default:
					break;
 80025ce:	bf00      	nop
 80025d0:	e004      	b.n	80025dc <main+0xb08>
			break;
 80025d2:	bf00      	nop
 80025d4:	e002      	b.n	80025dc <main+0xb08>
			break;
 80025d6:	bf00      	nop
 80025d8:	e000      	b.n	80025dc <main+0xb08>
				break;
 80025da:	bf00      	nop
		}

		if((time - adcTime) > 50){
 80025dc:	4b27      	ldr	r3, [pc, #156]	; (800267c <main+0xba8>)
 80025de:	681a      	ldr	r2, [r3, #0]
 80025e0:	4b27      	ldr	r3, [pc, #156]	; (8002680 <main+0xbac>)
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	1ad3      	subs	r3, r2, r3
 80025e6:	2b32      	cmp	r3, #50	; 0x32
 80025e8:	f67f ab34 	bls.w	8001c54 <main+0x180>
			HAL_ADC_Start_IT(&hadc);
 80025ec:	4825      	ldr	r0, [pc, #148]	; (8002684 <main+0xbb0>)
 80025ee:	f002 fae9 	bl	8004bc4 <HAL_ADC_Start_IT>
			adcVal = HAL_ADC_GetValue(&hadc);
 80025f2:	4824      	ldr	r0, [pc, #144]	; (8002684 <main+0xbb0>)
 80025f4:	f002 fb50 	bl	8004c98 <HAL_ADC_GetValue>
 80025f8:	4603      	mov	r3, r0
 80025fa:	b29a      	uxth	r2, r3
 80025fc:	4b22      	ldr	r3, [pc, #136]	; (8002688 <main+0xbb4>)
 80025fe:	801a      	strh	r2, [r3, #0]

			//onTime = (uint8_t)((((float)adcVal) / 255)*MAX_PULSE_WIDTH);
			onTime = (adcVal * MAX_PULSE_WIDTH) >> 8;
 8002600:	4b21      	ldr	r3, [pc, #132]	; (8002688 <main+0xbb4>)
 8002602:	881b      	ldrh	r3, [r3, #0]
 8002604:	461a      	mov	r2, r3
 8002606:	4613      	mov	r3, r2
 8002608:	015b      	lsls	r3, r3, #5
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	009b      	lsls	r3, r3, #2
 800260e:	4413      	add	r3, r2
 8002610:	121b      	asrs	r3, r3, #8
 8002612:	b2da      	uxtb	r2, r3
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <main+0xb74>)
 8002616:	701a      	strb	r2, [r3, #0]
			adcTime = time;
 8002618:	4b18      	ldr	r3, [pc, #96]	; (800267c <main+0xba8>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4a18      	ldr	r2, [pc, #96]	; (8002680 <main+0xbac>)
 800261e:	6013      	str	r3, [r2, #0]
			writeStatusLED(adcVal);
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <main+0xbb4>)
 8002622:	881b      	ldrh	r3, [r3, #0]
 8002624:	b2db      	uxtb	r3, r3
 8002626:	4618      	mov	r0, r3
 8002628:	f000 ff7e 	bl	8003528 <writeStatusLED>
		time = HAL_GetTick();
 800262c:	f7ff bb12 	b.w	8001c54 <main+0x180>
 8002630:	20000c2c 	.word	0x20000c2c
 8002634:	080126e0 	.word	0x080126e0
 8002638:	200005e4 	.word	0x200005e4
 800263c:	20000c31 	.word	0x20000c31
 8002640:	20000ecf 	.word	0x20000ecf
 8002644:	2000007a 	.word	0x2000007a
 8002648:	2000064e 	.word	0x2000064e
 800264c:	200003e4 	.word	0x200003e4
 8002650:	2000007c 	.word	0x2000007c
 8002654:	2000064f 	.word	0x2000064f
 8002658:	20000082 	.word	0x20000082
 800265c:	20000c32 	.word	0x20000c32
 8002660:	20000648 	.word	0x20000648
 8002664:	2000064a 	.word	0x2000064a
 8002668:	080126a8 	.word	0x080126a8
 800266c:	08012688 	.word	0x08012688
 8002670:	20000650 	.word	0x20000650
 8002674:	20000c2b 	.word	0x20000c2b
 8002678:	20000c28 	.word	0x20000c28
 800267c:	20000c08 	.word	0x20000c08
 8002680:	20000c10 	.word	0x20000c10
 8002684:	2000028c 	.word	0x2000028c
 8002688:	2000064c 	.word	0x2000064c

0800268c <changeNumber>:
/**
 * Allows the user to change number (3 digits) by scrolling
 * Options are: frequency, t_on, t_off
 */
boolean firstEntry = true;
void changeNumber(uint16_t* number, uint16_t max, uint8_t printPosition) {
 800268c:	b580      	push	{r7, lr}
 800268e:	b084      	sub	sp, #16
 8002690:	af02      	add	r7, sp, #8
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
 8002698:	4613      	mov	r3, r2
 800269a:	707b      	strb	r3, [r7, #1]
	if(firstEntry == true){
 800269c:	4b93      	ldr	r3, [pc, #588]	; (80028ec <changeNumber+0x260>)
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d105      	bne.n	80026b0 <changeNumber+0x24>
		firstEntry = false;
 80026a4:	4b91      	ldr	r3, [pc, #580]	; (80028ec <changeNumber+0x260>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	701a      	strb	r2, [r3, #0]
		LCDCursorOffBlinkOn(&lcd);
 80026aa:	4891      	ldr	r0, [pc, #580]	; (80028f0 <changeNumber+0x264>)
 80026ac:	f7fe feb5 	bl	800141a <LCDCursorOffBlinkOn>
	}
	switch (digit_mode) {
 80026b0:	4b90      	ldr	r3, [pc, #576]	; (80028f4 <changeNumber+0x268>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b02      	cmp	r3, #2
 80026b6:	f000 817b 	beq.w	80029b0 <changeNumber+0x324>
 80026ba:	2b02      	cmp	r3, #2
 80026bc:	f300 8209 	bgt.w	8002ad2 <changeNumber+0x446>
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d003      	beq.n	80026cc <changeNumber+0x40>
 80026c4:	2b01      	cmp	r3, #1
 80026c6:	f000 80c1 	beq.w	800284c <changeNumber+0x1c0>
		}

		break;

	default:
		break;
 80026ca:	e202      	b.n	8002ad2 <changeNumber+0x446>
		digit = *number / 100;
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	881b      	ldrh	r3, [r3, #0]
 80026d0:	4a89      	ldr	r2, [pc, #548]	; (80028f8 <changeNumber+0x26c>)
 80026d2:	fba2 2303 	umull	r2, r3, r2, r3
 80026d6:	095b      	lsrs	r3, r3, #5
 80026d8:	b29b      	uxth	r3, r3
 80026da:	b2da      	uxtb	r2, r3
 80026dc:	4b87      	ldr	r3, [pc, #540]	; (80028fc <changeNumber+0x270>)
 80026de:	701a      	strb	r2, [r3, #0]
		setCursor(&lcd, printPosition, submode);
 80026e0:	4b87      	ldr	r3, [pc, #540]	; (8002900 <changeNumber+0x274>)
 80026e2:	781a      	ldrb	r2, [r3, #0]
 80026e4:	787b      	ldrb	r3, [r7, #1]
 80026e6:	4619      	mov	r1, r3
 80026e8:	4881      	ldr	r0, [pc, #516]	; (80028f0 <changeNumber+0x264>)
 80026ea:	f7fe fd99 	bl	8001220 <setCursor>
		if(rotaryVal != prevRotaryVal)
 80026ee:	4b85      	ldr	r3, [pc, #532]	; (8002904 <changeNumber+0x278>)
 80026f0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80026f4:	4b84      	ldr	r3, [pc, #528]	; (8002908 <changeNumber+0x27c>)
 80026f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026fa:	429a      	cmp	r2, r3
 80026fc:	f000 808e 	beq.w	800281c <changeNumber+0x190>
			if (rotaryVal > prevRotaryVal){
 8002700:	4b80      	ldr	r3, [pc, #512]	; (8002904 <changeNumber+0x278>)
 8002702:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002706:	4b80      	ldr	r3, [pc, #512]	; (8002908 <changeNumber+0x27c>)
 8002708:	f9b3 3000 	ldrsh.w	r3, [r3]
 800270c:	429a      	cmp	r2, r3
 800270e:	dd15      	ble.n	800273c <changeNumber+0xb0>
				(digit == max / 100) ? digit = 0 : digit ++;
 8002710:	4b7a      	ldr	r3, [pc, #488]	; (80028fc <changeNumber+0x270>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	b29a      	uxth	r2, r3
 8002716:	887b      	ldrh	r3, [r7, #2]
 8002718:	4977      	ldr	r1, [pc, #476]	; (80028f8 <changeNumber+0x26c>)
 800271a:	fba1 1303 	umull	r1, r3, r1, r3
 800271e:	095b      	lsrs	r3, r3, #5
 8002720:	b29b      	uxth	r3, r3
 8002722:	429a      	cmp	r2, r3
 8002724:	d103      	bne.n	800272e <changeNumber+0xa2>
 8002726:	4b75      	ldr	r3, [pc, #468]	; (80028fc <changeNumber+0x270>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]
 800272c:	e01a      	b.n	8002764 <changeNumber+0xd8>
 800272e:	4b73      	ldr	r3, [pc, #460]	; (80028fc <changeNumber+0x270>)
 8002730:	781b      	ldrb	r3, [r3, #0]
 8002732:	3301      	adds	r3, #1
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b71      	ldr	r3, [pc, #452]	; (80028fc <changeNumber+0x270>)
 8002738:	701a      	strb	r2, [r3, #0]
 800273a:	e013      	b.n	8002764 <changeNumber+0xd8>
				(digit == 0)? digit = max / 100 : digit --;
 800273c:	4b6f      	ldr	r3, [pc, #444]	; (80028fc <changeNumber+0x270>)
 800273e:	781b      	ldrb	r3, [r3, #0]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d109      	bne.n	8002758 <changeNumber+0xcc>
 8002744:	887b      	ldrh	r3, [r7, #2]
 8002746:	4a6c      	ldr	r2, [pc, #432]	; (80028f8 <changeNumber+0x26c>)
 8002748:	fba2 2303 	umull	r2, r3, r2, r3
 800274c:	095b      	lsrs	r3, r3, #5
 800274e:	b29b      	uxth	r3, r3
 8002750:	b2da      	uxtb	r2, r3
 8002752:	4b6a      	ldr	r3, [pc, #424]	; (80028fc <changeNumber+0x270>)
 8002754:	701a      	strb	r2, [r3, #0]
 8002756:	e005      	b.n	8002764 <changeNumber+0xd8>
 8002758:	4b68      	ldr	r3, [pc, #416]	; (80028fc <changeNumber+0x270>)
 800275a:	781b      	ldrb	r3, [r3, #0]
 800275c:	3b01      	subs	r3, #1
 800275e:	b2da      	uxtb	r2, r3
 8002760:	4b66      	ldr	r3, [pc, #408]	; (80028fc <changeNumber+0x270>)
 8002762:	701a      	strb	r2, [r3, #0]
			*number = (*number % 100) + digit * 100;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	881b      	ldrh	r3, [r3, #0]
 8002768:	4a63      	ldr	r2, [pc, #396]	; (80028f8 <changeNumber+0x26c>)
 800276a:	fba2 1203 	umull	r1, r2, r2, r3
 800276e:	0952      	lsrs	r2, r2, #5
 8002770:	2164      	movs	r1, #100	; 0x64
 8002772:	fb01 f202 	mul.w	r2, r1, r2
 8002776:	1a9b      	subs	r3, r3, r2
 8002778:	b29a      	uxth	r2, r3
 800277a:	4b60      	ldr	r3, [pc, #384]	; (80028fc <changeNumber+0x270>)
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	b29b      	uxth	r3, r3
 8002780:	4619      	mov	r1, r3
 8002782:	0089      	lsls	r1, r1, #2
 8002784:	440b      	add	r3, r1
 8002786:	4619      	mov	r1, r3
 8002788:	0088      	lsls	r0, r1, #2
 800278a:	4619      	mov	r1, r3
 800278c:	4603      	mov	r3, r0
 800278e:	440b      	add	r3, r1
 8002790:	009b      	lsls	r3, r3, #2
 8002792:	b29b      	uxth	r3, r3
 8002794:	4413      	add	r3, r2
 8002796:	b29a      	uxth	r2, r3
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	801a      	strh	r2, [r3, #0]
			if (*number > max) {
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	881b      	ldrh	r3, [r3, #0]
 80027a0:	887a      	ldrh	r2, [r7, #2]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d218      	bcs.n	80027d8 <changeNumber+0x14c>
				*number = max;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	887a      	ldrh	r2, [r7, #2]
 80027aa:	801a      	strh	r2, [r3, #0]
				LCDPrintNumber(&lcd, 0, printPosition+1, submode, 1);
 80027ac:	787b      	ldrb	r3, [r7, #1]
 80027ae:	3301      	adds	r3, #1
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	4b53      	ldr	r3, [pc, #332]	; (8002900 <changeNumber+0x274>)
 80027b4:	781b      	ldrb	r3, [r3, #0]
 80027b6:	2101      	movs	r1, #1
 80027b8:	9100      	str	r1, [sp, #0]
 80027ba:	2100      	movs	r1, #0
 80027bc:	484c      	ldr	r0, [pc, #304]	; (80028f0 <changeNumber+0x264>)
 80027be:	f7fe fd97 	bl	80012f0 <LCDPrintNumber>
				LCDPrintNumber(&lcd, 0, printPosition+2, submode, 1);
 80027c2:	787b      	ldrb	r3, [r7, #1]
 80027c4:	3302      	adds	r3, #2
 80027c6:	b2da      	uxtb	r2, r3
 80027c8:	4b4d      	ldr	r3, [pc, #308]	; (8002900 <changeNumber+0x274>)
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2101      	movs	r1, #1
 80027ce:	9100      	str	r1, [sp, #0]
 80027d0:	2100      	movs	r1, #0
 80027d2:	4847      	ldr	r0, [pc, #284]	; (80028f0 <changeNumber+0x264>)
 80027d4:	f7fe fd8c 	bl	80012f0 <LCDPrintNumber>
			if (*number == 0) {
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	881b      	ldrh	r3, [r3, #0]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d10d      	bne.n	80027fc <changeNumber+0x170>
				*number = 1;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	801a      	strh	r2, [r3, #0]
				LCDPrintNumber(&lcd, 1, printPosition+2, submode, 1);
 80027e6:	787b      	ldrb	r3, [r7, #1]
 80027e8:	3302      	adds	r3, #2
 80027ea:	b2da      	uxtb	r2, r3
 80027ec:	4b44      	ldr	r3, [pc, #272]	; (8002900 <changeNumber+0x274>)
 80027ee:	781b      	ldrb	r3, [r3, #0]
 80027f0:	2101      	movs	r1, #1
 80027f2:	9100      	str	r1, [sp, #0]
 80027f4:	2101      	movs	r1, #1
 80027f6:	483e      	ldr	r0, [pc, #248]	; (80028f0 <changeNumber+0x264>)
 80027f8:	f7fe fd7a 	bl	80012f0 <LCDPrintNumber>
			LCDPrintNumber(&lcd, digit, printPosition, submode, 1);
 80027fc:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <changeNumber+0x270>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	b299      	uxth	r1, r3
 8002802:	4b3f      	ldr	r3, [pc, #252]	; (8002900 <changeNumber+0x274>)
 8002804:	781b      	ldrb	r3, [r3, #0]
 8002806:	787a      	ldrb	r2, [r7, #1]
 8002808:	2001      	movs	r0, #1
 800280a:	9000      	str	r0, [sp, #0]
 800280c:	4838      	ldr	r0, [pc, #224]	; (80028f0 <changeNumber+0x264>)
 800280e:	f7fe fd6f 	bl	80012f0 <LCDPrintNumber>
			prevRotaryVal =  rotaryVal;
 8002812:	4b3c      	ldr	r3, [pc, #240]	; (8002904 <changeNumber+0x278>)
 8002814:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002818:	4b3b      	ldr	r3, [pc, #236]	; (8002908 <changeNumber+0x27c>)
 800281a:	801a      	strh	r2, [r3, #0]
		if (buttonPushed) {
 800281c:	4b3b      	ldr	r3, [pc, #236]	; (800290c <changeNumber+0x280>)
 800281e:	781b      	ldrb	r3, [r3, #0]
 8002820:	2b00      	cmp	r3, #0
 8002822:	f000 8158 	beq.w	8002ad6 <changeNumber+0x44a>
			buttonPushed = false;
 8002826:	4b39      	ldr	r3, [pc, #228]	; (800290c <changeNumber+0x280>)
 8002828:	2200      	movs	r2, #0
 800282a:	701a      	strb	r2, [r3, #0]
			if (*number == max) {
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	887a      	ldrh	r2, [r7, #2]
 8002832:	429a      	cmp	r2, r3
 8002834:	d106      	bne.n	8002844 <changeNumber+0x1b8>
				submode = -1;
 8002836:	4b32      	ldr	r3, [pc, #200]	; (8002900 <changeNumber+0x274>)
 8002838:	22ff      	movs	r2, #255	; 0xff
 800283a:	701a      	strb	r2, [r3, #0]
				inSubmode = false;
 800283c:	4b34      	ldr	r3, [pc, #208]	; (8002910 <changeNumber+0x284>)
 800283e:	2200      	movs	r2, #0
 8002840:	701a      	strb	r2, [r3, #0]
		break;
 8002842:	e148      	b.n	8002ad6 <changeNumber+0x44a>
			else digit_mode = TEN_DIGIT;
 8002844:	4b2b      	ldr	r3, [pc, #172]	; (80028f4 <changeNumber+0x268>)
 8002846:	2201      	movs	r2, #1
 8002848:	701a      	strb	r2, [r3, #0]
		break;
 800284a:	e144      	b.n	8002ad6 <changeNumber+0x44a>
		digit = (*number % 100) / 10;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	4a29      	ldr	r2, [pc, #164]	; (80028f8 <changeNumber+0x26c>)
 8002852:	fba2 1203 	umull	r1, r2, r2, r3
 8002856:	0952      	lsrs	r2, r2, #5
 8002858:	2164      	movs	r1, #100	; 0x64
 800285a:	fb01 f202 	mul.w	r2, r1, r2
 800285e:	1a9b      	subs	r3, r3, r2
 8002860:	b29b      	uxth	r3, r3
 8002862:	4a2c      	ldr	r2, [pc, #176]	; (8002914 <changeNumber+0x288>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	08db      	lsrs	r3, r3, #3
 800286a:	b29b      	uxth	r3, r3
 800286c:	b2da      	uxtb	r2, r3
 800286e:	4b23      	ldr	r3, [pc, #140]	; (80028fc <changeNumber+0x270>)
 8002870:	701a      	strb	r2, [r3, #0]
		setCursor(&lcd, printPosition+1, submode);
 8002872:	787b      	ldrb	r3, [r7, #1]
 8002874:	3301      	adds	r3, #1
 8002876:	b2db      	uxtb	r3, r3
 8002878:	4a21      	ldr	r2, [pc, #132]	; (8002900 <changeNumber+0x274>)
 800287a:	7812      	ldrb	r2, [r2, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	481c      	ldr	r0, [pc, #112]	; (80028f0 <changeNumber+0x264>)
 8002880:	f7fe fcce 	bl	8001220 <setCursor>
		if(rotaryVal != prevRotaryVal)
 8002884:	4b1f      	ldr	r3, [pc, #124]	; (8002904 <changeNumber+0x278>)
 8002886:	f9b3 2000 	ldrsh.w	r2, [r3]
 800288a:	4b1f      	ldr	r3, [pc, #124]	; (8002908 <changeNumber+0x27c>)
 800288c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002890:	429a      	cmp	r2, r3
 8002892:	f000 8081 	beq.w	8002998 <changeNumber+0x30c>
			if (rotaryVal > prevRotaryVal){
 8002896:	4b1b      	ldr	r3, [pc, #108]	; (8002904 <changeNumber+0x278>)
 8002898:	f9b3 2000 	ldrsh.w	r2, [r3]
 800289c:	4b1a      	ldr	r3, [pc, #104]	; (8002908 <changeNumber+0x27c>)
 800289e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	dd14      	ble.n	80028d0 <changeNumber+0x244>
				if (digit == 9) {
 80028a6:	4b15      	ldr	r3, [pc, #84]	; (80028fc <changeNumber+0x270>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	2b09      	cmp	r3, #9
 80028ac:	d109      	bne.n	80028c2 <changeNumber+0x236>
					digit = 0;
 80028ae:	4b13      	ldr	r3, [pc, #76]	; (80028fc <changeNumber+0x270>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	701a      	strb	r2, [r3, #0]
					*number += 10;
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	330a      	adds	r3, #10
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	801a      	strh	r2, [r3, #0]
 80028c0:	e030      	b.n	8002924 <changeNumber+0x298>
				else digit ++;
 80028c2:	4b0e      	ldr	r3, [pc, #56]	; (80028fc <changeNumber+0x270>)
 80028c4:	781b      	ldrb	r3, [r3, #0]
 80028c6:	3301      	adds	r3, #1
 80028c8:	b2da      	uxtb	r2, r3
 80028ca:	4b0c      	ldr	r3, [pc, #48]	; (80028fc <changeNumber+0x270>)
 80028cc:	701a      	strb	r2, [r3, #0]
 80028ce:	e029      	b.n	8002924 <changeNumber+0x298>
				if (digit == 0) {
 80028d0:	4b0a      	ldr	r3, [pc, #40]	; (80028fc <changeNumber+0x270>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d11f      	bne.n	8002918 <changeNumber+0x28c>
					digit = 9;
 80028d8:	4b08      	ldr	r3, [pc, #32]	; (80028fc <changeNumber+0x270>)
 80028da:	2209      	movs	r2, #9
 80028dc:	701a      	strb	r2, [r3, #0]
					*number -= 10;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	881b      	ldrh	r3, [r3, #0]
 80028e2:	3b0a      	subs	r3, #10
 80028e4:	b29a      	uxth	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	801a      	strh	r2, [r3, #0]
 80028ea:	e01b      	b.n	8002924 <changeNumber+0x298>
 80028ec:	20000084 	.word	0x20000084
 80028f0:	200005e4 	.word	0x200005e4
 80028f4:	20000c2f 	.word	0x20000c2f
 80028f8:	51eb851f 	.word	0x51eb851f
 80028fc:	20000c30 	.word	0x20000c30
 8002900:	20000082 	.word	0x20000082
 8002904:	20000648 	.word	0x20000648
 8002908:	2000064a 	.word	0x2000064a
 800290c:	20000650 	.word	0x20000650
 8002910:	20000c32 	.word	0x20000c32
 8002914:	cccccccd 	.word	0xcccccccd
				else digit --;
 8002918:	4b73      	ldr	r3, [pc, #460]	; (8002ae8 <changeNumber+0x45c>)
 800291a:	781b      	ldrb	r3, [r3, #0]
 800291c:	3b01      	subs	r3, #1
 800291e:	b2da      	uxtb	r2, r3
 8002920:	4b71      	ldr	r3, [pc, #452]	; (8002ae8 <changeNumber+0x45c>)
 8002922:	701a      	strb	r2, [r3, #0]
			*number = (*number % 10) + digit * 10 + (int)(*number / 100) * 100;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	881a      	ldrh	r2, [r3, #0]
 8002928:	4b70      	ldr	r3, [pc, #448]	; (8002aec <changeNumber+0x460>)
 800292a:	fba3 1302 	umull	r1, r3, r3, r2
 800292e:	08d9      	lsrs	r1, r3, #3
 8002930:	460b      	mov	r3, r1
 8002932:	009b      	lsls	r3, r3, #2
 8002934:	440b      	add	r3, r1
 8002936:	005b      	lsls	r3, r3, #1
 8002938:	1ad3      	subs	r3, r2, r3
 800293a:	b29a      	uxth	r2, r3
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	881b      	ldrh	r3, [r3, #0]
 8002940:	496b      	ldr	r1, [pc, #428]	; (8002af0 <changeNumber+0x464>)
 8002942:	fba1 1303 	umull	r1, r3, r1, r3
 8002946:	095b      	lsrs	r3, r3, #5
 8002948:	b29b      	uxth	r3, r3
 800294a:	4619      	mov	r1, r3
 800294c:	0089      	lsls	r1, r1, #2
 800294e:	440b      	add	r3, r1
 8002950:	4619      	mov	r1, r3
 8002952:	0088      	lsls	r0, r1, #2
 8002954:	4619      	mov	r1, r3
 8002956:	4603      	mov	r3, r0
 8002958:	440b      	add	r3, r1
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	b299      	uxth	r1, r3
 800295e:	4b62      	ldr	r3, [pc, #392]	; (8002ae8 <changeNumber+0x45c>)
 8002960:	781b      	ldrb	r3, [r3, #0]
 8002962:	b29b      	uxth	r3, r3
 8002964:	4618      	mov	r0, r3
 8002966:	0080      	lsls	r0, r0, #2
 8002968:	4403      	add	r3, r0
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	b29b      	uxth	r3, r3
 800296e:	440b      	add	r3, r1
 8002970:	b29b      	uxth	r3, r3
 8002972:	4413      	add	r3, r2
 8002974:	b29a      	uxth	r2, r3
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	801a      	strh	r2, [r3, #0]
			LCDPrintNumber(&lcd, *number, printPosition, submode, 3);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	8819      	ldrh	r1, [r3, #0]
 800297e:	4b5d      	ldr	r3, [pc, #372]	; (8002af4 <changeNumber+0x468>)
 8002980:	781b      	ldrb	r3, [r3, #0]
 8002982:	787a      	ldrb	r2, [r7, #1]
 8002984:	2003      	movs	r0, #3
 8002986:	9000      	str	r0, [sp, #0]
 8002988:	485b      	ldr	r0, [pc, #364]	; (8002af8 <changeNumber+0x46c>)
 800298a:	f7fe fcb1 	bl	80012f0 <LCDPrintNumber>
			prevRotaryVal =  rotaryVal;
 800298e:	4b5b      	ldr	r3, [pc, #364]	; (8002afc <changeNumber+0x470>)
 8002990:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002994:	4b5a      	ldr	r3, [pc, #360]	; (8002b00 <changeNumber+0x474>)
 8002996:	801a      	strh	r2, [r3, #0]
		if (buttonPushed) {
 8002998:	4b5a      	ldr	r3, [pc, #360]	; (8002b04 <changeNumber+0x478>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	f000 809c 	beq.w	8002ada <changeNumber+0x44e>
			buttonPushed = false;
 80029a2:	4b58      	ldr	r3, [pc, #352]	; (8002b04 <changeNumber+0x478>)
 80029a4:	2200      	movs	r2, #0
 80029a6:	701a      	strb	r2, [r3, #0]
			digit_mode = SINGLE_DIGIT;
 80029a8:	4b57      	ldr	r3, [pc, #348]	; (8002b08 <changeNumber+0x47c>)
 80029aa:	2202      	movs	r2, #2
 80029ac:	701a      	strb	r2, [r3, #0]
		break;
 80029ae:	e094      	b.n	8002ada <changeNumber+0x44e>
		digit = *number % 10;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	881a      	ldrh	r2, [r3, #0]
 80029b4:	4b4d      	ldr	r3, [pc, #308]	; (8002aec <changeNumber+0x460>)
 80029b6:	fba3 1302 	umull	r1, r3, r3, r2
 80029ba:	08d9      	lsrs	r1, r3, #3
 80029bc:	460b      	mov	r3, r1
 80029be:	009b      	lsls	r3, r3, #2
 80029c0:	440b      	add	r3, r1
 80029c2:	005b      	lsls	r3, r3, #1
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	b29b      	uxth	r3, r3
 80029c8:	b2da      	uxtb	r2, r3
 80029ca:	4b47      	ldr	r3, [pc, #284]	; (8002ae8 <changeNumber+0x45c>)
 80029cc:	701a      	strb	r2, [r3, #0]
		setCursor(&lcd, printPosition+2, submode);
 80029ce:	787b      	ldrb	r3, [r7, #1]
 80029d0:	3302      	adds	r3, #2
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	4a47      	ldr	r2, [pc, #284]	; (8002af4 <changeNumber+0x468>)
 80029d6:	7812      	ldrb	r2, [r2, #0]
 80029d8:	4619      	mov	r1, r3
 80029da:	4847      	ldr	r0, [pc, #284]	; (8002af8 <changeNumber+0x46c>)
 80029dc:	f7fe fc20 	bl	8001220 <setCursor>
		if(rotaryVal != prevRotaryVal)
 80029e0:	4b46      	ldr	r3, [pc, #280]	; (8002afc <changeNumber+0x470>)
 80029e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029e6:	4b46      	ldr	r3, [pc, #280]	; (8002b00 <changeNumber+0x474>)
 80029e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d052      	beq.n	8002a96 <changeNumber+0x40a>
			if (rotaryVal > prevRotaryVal){
 80029f0:	4b42      	ldr	r3, [pc, #264]	; (8002afc <changeNumber+0x470>)
 80029f2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80029f6:	4b42      	ldr	r3, [pc, #264]	; (8002b00 <changeNumber+0x474>)
 80029f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80029fc:	429a      	cmp	r2, r3
 80029fe:	dd14      	ble.n	8002a2a <changeNumber+0x39e>
				if (digit == 9) {
 8002a00:	4b39      	ldr	r3, [pc, #228]	; (8002ae8 <changeNumber+0x45c>)
 8002a02:	781b      	ldrb	r3, [r3, #0]
 8002a04:	2b09      	cmp	r3, #9
 8002a06:	d109      	bne.n	8002a1c <changeNumber+0x390>
					digit = 0;
 8002a08:	4b37      	ldr	r3, [pc, #220]	; (8002ae8 <changeNumber+0x45c>)
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	701a      	strb	r2, [r3, #0]
					*number = *number + 1;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	881b      	ldrh	r3, [r3, #0]
 8002a12:	3301      	adds	r3, #1
 8002a14:	b29a      	uxth	r2, r3
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	801a      	strh	r2, [r3, #0]
 8002a1a:	e01a      	b.n	8002a52 <changeNumber+0x3c6>
				else digit ++;
 8002a1c:	4b32      	ldr	r3, [pc, #200]	; (8002ae8 <changeNumber+0x45c>)
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	3301      	adds	r3, #1
 8002a22:	b2da      	uxtb	r2, r3
 8002a24:	4b30      	ldr	r3, [pc, #192]	; (8002ae8 <changeNumber+0x45c>)
 8002a26:	701a      	strb	r2, [r3, #0]
 8002a28:	e013      	b.n	8002a52 <changeNumber+0x3c6>
				if (digit == 0) {
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	; (8002ae8 <changeNumber+0x45c>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d109      	bne.n	8002a46 <changeNumber+0x3ba>
					digit = 9;
 8002a32:	4b2d      	ldr	r3, [pc, #180]	; (8002ae8 <changeNumber+0x45c>)
 8002a34:	2209      	movs	r2, #9
 8002a36:	701a      	strb	r2, [r3, #0]
					*number = *number - 1;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	881b      	ldrh	r3, [r3, #0]
 8002a3c:	3b01      	subs	r3, #1
 8002a3e:	b29a      	uxth	r2, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	801a      	strh	r2, [r3, #0]
 8002a44:	e005      	b.n	8002a52 <changeNumber+0x3c6>
				else digit --;
 8002a46:	4b28      	ldr	r3, [pc, #160]	; (8002ae8 <changeNumber+0x45c>)
 8002a48:	781b      	ldrb	r3, [r3, #0]
 8002a4a:	3b01      	subs	r3, #1
 8002a4c:	b2da      	uxtb	r2, r3
 8002a4e:	4b26      	ldr	r3, [pc, #152]	; (8002ae8 <changeNumber+0x45c>)
 8002a50:	701a      	strb	r2, [r3, #0]
			*number = (int)(*number / 10) * 10 + digit;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	881b      	ldrh	r3, [r3, #0]
 8002a56:	4a25      	ldr	r2, [pc, #148]	; (8002aec <changeNumber+0x460>)
 8002a58:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5c:	08db      	lsrs	r3, r3, #3
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	0092      	lsls	r2, r2, #2
 8002a64:	4413      	add	r3, r2
 8002a66:	005b      	lsls	r3, r3, #1
 8002a68:	b29a      	uxth	r2, r3
 8002a6a:	4b1f      	ldr	r3, [pc, #124]	; (8002ae8 <changeNumber+0x45c>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	4413      	add	r3, r2
 8002a72:	b29a      	uxth	r2, r3
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	801a      	strh	r2, [r3, #0]
			LCDPrintNumber(&lcd, *number, printPosition, submode, 3);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	8819      	ldrh	r1, [r3, #0]
 8002a7c:	4b1d      	ldr	r3, [pc, #116]	; (8002af4 <changeNumber+0x468>)
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	787a      	ldrb	r2, [r7, #1]
 8002a82:	2003      	movs	r0, #3
 8002a84:	9000      	str	r0, [sp, #0]
 8002a86:	481c      	ldr	r0, [pc, #112]	; (8002af8 <changeNumber+0x46c>)
 8002a88:	f7fe fc32 	bl	80012f0 <LCDPrintNumber>
			prevRotaryVal =  rotaryVal;
 8002a8c:	4b1b      	ldr	r3, [pc, #108]	; (8002afc <changeNumber+0x470>)
 8002a8e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002a92:	4b1b      	ldr	r3, [pc, #108]	; (8002b00 <changeNumber+0x474>)
 8002a94:	801a      	strh	r2, [r3, #0]
		if (buttonPushed) {
 8002a96:	4b1b      	ldr	r3, [pc, #108]	; (8002b04 <changeNumber+0x478>)
 8002a98:	781b      	ldrb	r3, [r3, #0]
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d01f      	beq.n	8002ade <changeNumber+0x452>
			digit_mode = HUNDRED_DIGIT;
 8002a9e:	4b1a      	ldr	r3, [pc, #104]	; (8002b08 <changeNumber+0x47c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	701a      	strb	r2, [r3, #0]
			setCursor(&lcd, 0, submode);
 8002aa4:	4b13      	ldr	r3, [pc, #76]	; (8002af4 <changeNumber+0x468>)
 8002aa6:	781b      	ldrb	r3, [r3, #0]
 8002aa8:	461a      	mov	r2, r3
 8002aaa:	2100      	movs	r1, #0
 8002aac:	4812      	ldr	r0, [pc, #72]	; (8002af8 <changeNumber+0x46c>)
 8002aae:	f7fe fbb7 	bl	8001220 <setCursor>
			buttonPushed = false;
 8002ab2:	4b14      	ldr	r3, [pc, #80]	; (8002b04 <changeNumber+0x478>)
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	701a      	strb	r2, [r3, #0]
			submode = -1;
 8002ab8:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <changeNumber+0x468>)
 8002aba:	22ff      	movs	r2, #255	; 0xff
 8002abc:	701a      	strb	r2, [r3, #0]
			inSubmode = false;
 8002abe:	4b13      	ldr	r3, [pc, #76]	; (8002b0c <changeNumber+0x480>)
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	701a      	strb	r2, [r3, #0]
			firstEntry = true;
 8002ac4:	4b12      	ldr	r3, [pc, #72]	; (8002b10 <changeNumber+0x484>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	701a      	strb	r2, [r3, #0]
			LCDCursorOffBlinkOff(&lcd);
 8002aca:	480b      	ldr	r0, [pc, #44]	; (8002af8 <changeNumber+0x46c>)
 8002acc:	f7fe fcbb 	bl	8001446 <LCDCursorOffBlinkOff>
		break;
 8002ad0:	e005      	b.n	8002ade <changeNumber+0x452>
		break;
 8002ad2:	bf00      	nop
 8002ad4:	e004      	b.n	8002ae0 <changeNumber+0x454>
		break;
 8002ad6:	bf00      	nop
 8002ad8:	e002      	b.n	8002ae0 <changeNumber+0x454>
		break;
 8002ada:	bf00      	nop
 8002adc:	e000      	b.n	8002ae0 <changeNumber+0x454>
		break;
 8002ade:	bf00      	nop
	}
}
 8002ae0:	bf00      	nop
 8002ae2:	3708      	adds	r7, #8
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	20000c30 	.word	0x20000c30
 8002aec:	cccccccd 	.word	0xcccccccd
 8002af0:	51eb851f 	.word	0x51eb851f
 8002af4:	20000082 	.word	0x20000082
 8002af8:	200005e4 	.word	0x200005e4
 8002afc:	20000648 	.word	0x20000648
 8002b00:	2000064a 	.word	0x2000064a
 8002b04:	20000650 	.word	0x20000650
 8002b08:	20000c2f 	.word	0x20000c2f
 8002b0c:	20000c32 	.word	0x20000c32
 8002b10:	20000084 	.word	0x20000084

08002b14 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b092      	sub	sp, #72	; 0x48
 8002b18:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b1a:	f107 0314 	add.w	r3, r7, #20
 8002b1e:	2234      	movs	r2, #52	; 0x34
 8002b20:	2100      	movs	r1, #0
 8002b22:	4618      	mov	r0, r3
 8002b24:	f00f f8e0 	bl	8011ce8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b28:	463b      	mov	r3, r7
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	601a      	str	r2, [r3, #0]
 8002b2e:	605a      	str	r2, [r3, #4]
 8002b30:	609a      	str	r2, [r3, #8]
 8002b32:	60da      	str	r2, [r3, #12]
 8002b34:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002b36:	4b1e      	ldr	r3, [pc, #120]	; (8002bb0 <SystemClock_Config+0x9c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8002b3e:	4a1c      	ldr	r2, [pc, #112]	; (8002bb0 <SystemClock_Config+0x9c>)
 8002b40:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002b44:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 8002b46:	2303      	movs	r3, #3
 8002b48:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002b4e:	2301      	movs	r3, #1
 8002b50:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002b52:	2310      	movs	r3, #16
 8002b54:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002b56:	2302      	movs	r3, #2
 8002b58:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002b5a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8002b60:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8002b64:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8002b66:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8002b6a:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002b6c:	f107 0314 	add.w	r3, r7, #20
 8002b70:	4618      	mov	r0, r3
 8002b72:	f004 fdad 	bl	80076d0 <HAL_RCC_OscConfig>
 8002b76:	4603      	mov	r3, r0
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d001      	beq.n	8002b80 <SystemClock_Config+0x6c>
		Error_Handler();
 8002b7c:	f001 fa5c 	bl	8004038 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002b80:	230f      	movs	r3, #15
 8002b82:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b84:	2303      	movs	r3, #3
 8002b86:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b88:	2300      	movs	r3, #0
 8002b8a:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b90:	2300      	movs	r3, #0
 8002b92:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8002b94:	463b      	mov	r3, r7
 8002b96:	2101      	movs	r1, #1
 8002b98:	4618      	mov	r0, r3
 8002b9a:	f005 f8c9 	bl	8007d30 <HAL_RCC_ClockConfig>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <SystemClock_Config+0x94>
		Error_Handler();
 8002ba4:	f001 fa48 	bl	8004038 <Error_Handler>
	}
}
 8002ba8:	bf00      	nop
 8002baa:	3748      	adds	r7, #72	; 0x48
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	40007000 	.word	0x40007000

08002bb4 <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002bba:	1d3b      	adds	r3, r7, #4
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 8002bc4:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bc6:	4a27      	ldr	r2, [pc, #156]	; (8002c64 <MX_ADC_Init+0xb0>)
 8002bc8:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002bca:	4b25      	ldr	r3, [pc, #148]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8002bd0:	4b23      	ldr	r3, [pc, #140]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bd2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002bd6:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002bd8:	4b21      	ldr	r3, [pc, #132]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bda:	2200      	movs	r2, #0
 8002bdc:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002bde:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <MX_ADC_Init+0xac>)
 8002be0:	2200      	movs	r2, #0
 8002be2:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8002be4:	4b1e      	ldr	r3, [pc, #120]	; (8002c60 <MX_ADC_Init+0xac>)
 8002be6:	2200      	movs	r2, #0
 8002be8:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 8002bea:	4b1d      	ldr	r3, [pc, #116]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bec:	2200      	movs	r2, #0
 8002bee:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8002bf0:	4b1b      	ldr	r3, [pc, #108]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bf2:	2200      	movs	r2, #0
 8002bf4:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8002bf6:	4b1a      	ldr	r3, [pc, #104]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 8002bfc:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <MX_ADC_Init+0xac>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 8002c04:	4b16      	ldr	r3, [pc, #88]	; (8002c60 <MX_ADC_Init+0xac>)
 8002c06:	2201      	movs	r2, #1
 8002c08:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 8002c0a:	4b15      	ldr	r3, [pc, #84]	; (8002c60 <MX_ADC_Init+0xac>)
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c12:	4b13      	ldr	r3, [pc, #76]	; (8002c60 <MX_ADC_Init+0xac>)
 8002c14:	2210      	movs	r2, #16
 8002c16:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c18:	4b11      	ldr	r3, [pc, #68]	; (8002c60 <MX_ADC_Init+0xac>)
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 8002c1e:	4b10      	ldr	r3, [pc, #64]	; (8002c60 <MX_ADC_Init+0xac>)
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 8002c26:	480e      	ldr	r0, [pc, #56]	; (8002c60 <MX_ADC_Init+0xac>)
 8002c28:	f001 fe26 	bl	8004878 <HAL_ADC_Init>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d001      	beq.n	8002c36 <MX_ADC_Init+0x82>
		Error_Handler();
 8002c32:	f001 fa01 	bl	8004038 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 8002c36:	2300      	movs	r3, #0
 8002c38:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 8002c42:	1d3b      	adds	r3, r7, #4
 8002c44:	4619      	mov	r1, r3
 8002c46:	4806      	ldr	r0, [pc, #24]	; (8002c60 <MX_ADC_Init+0xac>)
 8002c48:	f002 f832 	bl	8004cb0 <HAL_ADC_ConfigChannel>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d001      	beq.n	8002c56 <MX_ADC_Init+0xa2>
		Error_Handler();
 8002c52:	f001 f9f1 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 8002c56:	bf00      	nop
 8002c58:	3710      	adds	r7, #16
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
 8002c5e:	bf00      	nop
 8002c60:	2000028c 	.word	0x2000028c
 8002c64:	40012400 	.word	0x40012400

08002c68 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8002c6c:	4b12      	ldr	r3, [pc, #72]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c6e:	4a13      	ldr	r2, [pc, #76]	; (8002cbc <MX_I2C2_Init+0x54>)
 8002c70:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 8002c72:	4b11      	ldr	r3, [pc, #68]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <MX_I2C2_Init+0x58>)
 8002c76:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002c78:	4b0f      	ldr	r3, [pc, #60]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8002c7e:	4b0e      	ldr	r3, [pc, #56]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002c84:	4b0c      	ldr	r3, [pc, #48]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002c8a:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002c8c:	4b0a      	ldr	r3, [pc, #40]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 8002c92:	4b09      	ldr	r3, [pc, #36]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c94:	2200      	movs	r2, #0
 8002c96:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002c98:	4b07      	ldr	r3, [pc, #28]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002c9e:	4b06      	ldr	r3, [pc, #24]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002ca0:	2200      	movs	r2, #0
 8002ca2:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 8002ca4:	4804      	ldr	r0, [pc, #16]	; (8002cb8 <MX_I2C2_Init+0x50>)
 8002ca6:	f002 fc9d 	bl	80055e4 <HAL_I2C_Init>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <MX_I2C2_Init+0x4c>
		Error_Handler();
 8002cb0:	f001 f9c2 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 8002cb4:	bf00      	nop
 8002cb6:	bd80      	pop	{r7, pc}
 8002cb8:	200002e0 	.word	0x200002e0
 8002cbc:	40005800 	.word	0x40005800
 8002cc0:	000186a0 	.word	0x000186a0

08002cc4 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8002cc4:	b580      	push	{r7, lr}
 8002cc6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8002cc8:	4b16      	ldr	r3, [pc, #88]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cca:	4a17      	ldr	r2, [pc, #92]	; (8002d28 <MX_SPI1_Init+0x64>)
 8002ccc:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8002cce:	4b15      	ldr	r3, [pc, #84]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002cd4:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8002cd6:	4b13      	ldr	r3, [pc, #76]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8002cdc:	4b11      	ldr	r3, [pc, #68]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cde:	2200      	movs	r2, #0
 8002ce0:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ce2:	4b10      	ldr	r3, [pc, #64]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002ce8:	4b0e      	ldr	r3, [pc, #56]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8002cee:	4b0d      	ldr	r3, [pc, #52]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002cf4:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8002cf6:	4b0b      	ldr	r3, [pc, #44]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cf8:	2230      	movs	r2, #48	; 0x30
 8002cfa:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002cfc:	4b09      	ldr	r3, [pc, #36]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002cfe:	2200      	movs	r2, #0
 8002d00:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d02:	4b08      	ldr	r3, [pc, #32]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002d04:	2200      	movs	r2, #0
 8002d06:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8002d08:	4b06      	ldr	r3, [pc, #24]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002d0a:	220a      	movs	r2, #10
 8002d0c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8002d0e:	4805      	ldr	r0, [pc, #20]	; (8002d24 <MX_SPI1_Init+0x60>)
 8002d10:	f005 fa7e 	bl	8008210 <HAL_SPI_Init>
 8002d14:	4603      	mov	r3, r0
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d001      	beq.n	8002d1e <MX_SPI1_Init+0x5a>
		Error_Handler();
 8002d1a:	f001 f98d 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8002d1e:	bf00      	nop
 8002d20:	bd80      	pop	{r7, pc}
 8002d22:	bf00      	nop
 8002d24:	20000334 	.word	0x20000334
 8002d28:	40013000 	.word	0x40013000

08002d2c <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 8002d30:	4b16      	ldr	r3, [pc, #88]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d32:	4a17      	ldr	r2, [pc, #92]	; (8002d90 <MX_SPI2_Init+0x64>)
 8002d34:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d38:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002d3c:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8002d3e:	4b13      	ldr	r3, [pc, #76]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d40:	2200      	movs	r2, #0
 8002d42:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8002d44:	4b11      	ldr	r3, [pc, #68]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d46:	2200      	movs	r2, #0
 8002d48:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d4a:	4b10      	ldr	r3, [pc, #64]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8002d50:	4b0e      	ldr	r3, [pc, #56]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 8002d56:	4b0d      	ldr	r3, [pc, #52]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d58:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002d5c:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8002d5e:	4b0b      	ldr	r3, [pc, #44]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d60:	2208      	movs	r2, #8
 8002d62:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d6a:	4b08      	ldr	r3, [pc, #32]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8002d70:	4b06      	ldr	r3, [pc, #24]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d72:	220a      	movs	r2, #10
 8002d74:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 8002d76:	4805      	ldr	r0, [pc, #20]	; (8002d8c <MX_SPI2_Init+0x60>)
 8002d78:	f005 fa4a 	bl	8008210 <HAL_SPI_Init>
 8002d7c:	4603      	mov	r3, r0
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d001      	beq.n	8002d86 <MX_SPI2_Init+0x5a>
		Error_Handler();
 8002d82:	f001 f959 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 8002d86:	bf00      	nop
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	2000038c 	.word	0x2000038c
 8002d90:	40003800 	.word	0x40003800

08002d94 <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b08a      	sub	sp, #40	; 0x28
 8002d98:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002d9a:	f107 0318 	add.w	r3, r7, #24
 8002d9e:	2200      	movs	r2, #0
 8002da0:	601a      	str	r2, [r3, #0]
 8002da2:	605a      	str	r2, [r3, #4]
 8002da4:	609a      	str	r2, [r3, #8]
 8002da6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002da8:	f107 0310 	add.w	r3, r7, #16
 8002dac:	2200      	movs	r2, #0
 8002dae:	601a      	str	r2, [r3, #0]
 8002db0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002db2:	463b      	mov	r3, r7
 8002db4:	2200      	movs	r2, #0
 8002db6:	601a      	str	r2, [r3, #0]
 8002db8:	605a      	str	r2, [r3, #4]
 8002dba:	609a      	str	r2, [r3, #8]
 8002dbc:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002dbe:	4b38      	ldr	r3, [pc, #224]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002dc0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002dc4:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 70 - 1;
 8002dc6:	4b36      	ldr	r3, [pc, #216]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002dc8:	2245      	movs	r2, #69	; 0x45
 8002dca:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dcc:	4b34      	ldr	r3, [pc, #208]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002dd2:	4b33      	ldr	r3, [pc, #204]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002dd4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002dd8:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002dda:	4b31      	ldr	r3, [pc, #196]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de0:	4b2f      	ldr	r3, [pc, #188]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 8002de6:	482e      	ldr	r0, [pc, #184]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002de8:	f005 fcfa 	bl	80087e0 <HAL_TIM_Base_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <MX_TIM2_Init+0x62>
		Error_Handler();
 8002df2:	f001 f921 	bl	8004038 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002df6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002dfa:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 8002dfc:	f107 0318 	add.w	r3, r7, #24
 8002e00:	4619      	mov	r1, r3
 8002e02:	4827      	ldr	r0, [pc, #156]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002e04:	f006 f88e 	bl	8008f24 <HAL_TIM_ConfigClockSource>
 8002e08:	4603      	mov	r3, r0
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <MX_TIM2_Init+0x7e>
		Error_Handler();
 8002e0e:	f001 f913 	bl	8004038 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 8002e12:	4823      	ldr	r0, [pc, #140]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002e14:	f005 fdbe 	bl	8008994 <HAL_TIM_PWM_Init>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d001      	beq.n	8002e22 <MX_TIM2_Init+0x8e>
		Error_Handler();
 8002e1e:	f001 f90b 	bl	8004038 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 8002e22:	481f      	ldr	r0, [pc, #124]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002e24:	f005 fd6e 	bl	8008904 <HAL_TIM_OC_Init>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d001      	beq.n	8002e32 <MX_TIM2_Init+0x9e>
		Error_Handler();
 8002e2e:	f001 f903 	bl	8004038 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e32:	2300      	movs	r3, #0
 8002e34:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8002e3a:	f107 0310 	add.w	r3, r7, #16
 8002e3e:	4619      	mov	r1, r3
 8002e40:	4817      	ldr	r0, [pc, #92]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002e42:	f006 fb69 	bl	8009518 <HAL_TIMEx_MasterConfigSynchronization>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8002e4c:	f001 f8f4 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002e50:	2360      	movs	r3, #96	; 0x60
 8002e52:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002e54:	2300      	movs	r3, #0
 8002e56:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8002e60:	463b      	mov	r3, r7
 8002e62:	2200      	movs	r2, #0
 8002e64:	4619      	mov	r1, r3
 8002e66:	480e      	ldr	r0, [pc, #56]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002e68:	f005 ff9e 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 8002e6c:	4603      	mov	r3, r0
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d001      	beq.n	8002e76 <MX_TIM2_Init+0xe2>
			!= HAL_OK) {
		Error_Handler();
 8002e72:	f001 f8e1 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8002e76:	2300      	movs	r3, #0
 8002e78:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8002e7a:	463b      	mov	r3, r7
 8002e7c:	2204      	movs	r2, #4
 8002e7e:	4619      	mov	r1, r3
 8002e80:	4807      	ldr	r0, [pc, #28]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002e82:	f005 ff39 	bl	8008cf8 <HAL_TIM_OC_ConfigChannel>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d001      	beq.n	8002e90 <MX_TIM2_Init+0xfc>
		Error_Handler();
 8002e8c:	f001 f8d4 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002e90:	4803      	ldr	r0, [pc, #12]	; (8002ea0 <MX_TIM2_Init+0x10c>)
 8002e92:	f001 fabf 	bl	8004414 <HAL_TIM_MspPostInit>

}
 8002e96:	bf00      	nop
 8002e98:	3728      	adds	r7, #40	; 0x28
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	200003e4 	.word	0x200003e4

08002ea4 <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08a      	sub	sp, #40	; 0x28
 8002ea8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002eaa:	f107 0318 	add.w	r3, r7, #24
 8002eae:	2200      	movs	r2, #0
 8002eb0:	601a      	str	r2, [r3, #0]
 8002eb2:	605a      	str	r2, [r3, #4]
 8002eb4:	609a      	str	r2, [r3, #8]
 8002eb6:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002eb8:	f107 0310 	add.w	r3, r7, #16
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002ec2:	463b      	mov	r3, r7
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	601a      	str	r2, [r3, #0]
 8002ec8:	605a      	str	r2, [r3, #4]
 8002eca:	609a      	str	r2, [r3, #8]
 8002ecc:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002ece:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002ed0:	4a2d      	ldr	r2, [pc, #180]	; (8002f88 <MX_TIM3_Init+0xe4>)
 8002ed2:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3200 - 1;
 8002ed4:	4b2b      	ldr	r3, [pc, #172]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002ed6:	f640 427f 	movw	r2, #3199	; 0xc7f
 8002eda:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002edc:	4b29      	ldr	r3, [pc, #164]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002ede:	2200      	movs	r2, #0
 8002ee0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 8002ee2:	4b28      	ldr	r3, [pc, #160]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002ee4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ee8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002eea:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002eec:	2200      	movs	r2, #0
 8002eee:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002ef0:	4b24      	ldr	r3, [pc, #144]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002ef2:	2280      	movs	r2, #128	; 0x80
 8002ef4:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 8002ef6:	4823      	ldr	r0, [pc, #140]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002ef8:	f005 fc72 	bl	80087e0 <HAL_TIM_Base_Init>
 8002efc:	4603      	mov	r3, r0
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d001      	beq.n	8002f06 <MX_TIM3_Init+0x62>
		Error_Handler();
 8002f02:	f001 f899 	bl	8004038 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f0a:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 8002f0c:	f107 0318 	add.w	r3, r7, #24
 8002f10:	4619      	mov	r1, r3
 8002f12:	481c      	ldr	r0, [pc, #112]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002f14:	f006 f806 	bl	8008f24 <HAL_TIM_ConfigClockSource>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d001      	beq.n	8002f22 <MX_TIM3_Init+0x7e>
		Error_Handler();
 8002f1e:	f001 f88b 	bl	8004038 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 8002f22:	4818      	ldr	r0, [pc, #96]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002f24:	f005 fd36 	bl	8008994 <HAL_TIM_PWM_Init>
 8002f28:	4603      	mov	r3, r0
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d001      	beq.n	8002f32 <MX_TIM3_Init+0x8e>
		Error_Handler();
 8002f2e:	f001 f883 	bl	8004038 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002f32:	2300      	movs	r3, #0
 8002f34:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002f36:	2300      	movs	r3, #0
 8002f38:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8002f3a:	f107 0310 	add.w	r3, r7, #16
 8002f3e:	4619      	mov	r1, r3
 8002f40:	4810      	ldr	r0, [pc, #64]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002f42:	f006 fae9 	bl	8009518 <HAL_TIMEx_MasterConfigSynchronization>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d001      	beq.n	8002f50 <MX_TIM3_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8002f4c:	f001 f874 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002f50:	2360      	movs	r3, #96	; 0x60
 8002f52:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8002f54:	2300      	movs	r3, #0
 8002f56:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8002f60:	463b      	mov	r3, r7
 8002f62:	2200      	movs	r2, #0
 8002f64:	4619      	mov	r1, r3
 8002f66:	4807      	ldr	r0, [pc, #28]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002f68:	f005 ff1e 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 8002f6c:	4603      	mov	r3, r0
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d001      	beq.n	8002f76 <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 8002f72:	f001 f861 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8002f76:	4803      	ldr	r0, [pc, #12]	; (8002f84 <MX_TIM3_Init+0xe0>)
 8002f78:	f001 fa4c 	bl	8004414 <HAL_TIM_MspPostInit>

}
 8002f7c:	bf00      	nop
 8002f7e:	3728      	adds	r7, #40	; 0x28
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	20000424 	.word	0x20000424
 8002f88:	40000400 	.word	0x40000400

08002f8c <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b08a      	sub	sp, #40	; 0x28
 8002f90:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8002f92:	f107 0318 	add.w	r3, r7, #24
 8002f96:	2200      	movs	r2, #0
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	605a      	str	r2, [r3, #4]
 8002f9c:	609a      	str	r2, [r3, #8]
 8002f9e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002fa0:	f107 0310 	add.w	r3, r7, #16
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8002faa:	463b      	mov	r3, r7
 8002fac:	2200      	movs	r2, #0
 8002fae:	601a      	str	r2, [r3, #0]
 8002fb0:	605a      	str	r2, [r3, #4]
 8002fb2:	609a      	str	r2, [r3, #8]
 8002fb4:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 8002fb6:	4b37      	ldr	r3, [pc, #220]	; (8003094 <MX_TIM4_Init+0x108>)
 8002fb8:	4a37      	ldr	r2, [pc, #220]	; (8003098 <MX_TIM4_Init+0x10c>)
 8002fba:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8002fbc:	4b35      	ldr	r3, [pc, #212]	; (8003094 <MX_TIM4_Init+0x108>)
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002fc2:	4b34      	ldr	r3, [pc, #208]	; (8003094 <MX_TIM4_Init+0x108>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8002fc8:	4b32      	ldr	r3, [pc, #200]	; (8003094 <MX_TIM4_Init+0x108>)
 8002fca:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002fce:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002fd0:	4b30      	ldr	r3, [pc, #192]	; (8003094 <MX_TIM4_Init+0x108>)
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002fd6:	4b2f      	ldr	r3, [pc, #188]	; (8003094 <MX_TIM4_Init+0x108>)
 8002fd8:	2200      	movs	r2, #0
 8002fda:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 8002fdc:	482d      	ldr	r0, [pc, #180]	; (8003094 <MX_TIM4_Init+0x108>)
 8002fde:	f005 fbff 	bl	80087e0 <HAL_TIM_Base_Init>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d001      	beq.n	8002fec <MX_TIM4_Init+0x60>
		Error_Handler();
 8002fe8:	f001 f826 	bl	8004038 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002fec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ff0:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 8002ff2:	f107 0318 	add.w	r3, r7, #24
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4826      	ldr	r0, [pc, #152]	; (8003094 <MX_TIM4_Init+0x108>)
 8002ffa:	f005 ff93 	bl	8008f24 <HAL_TIM_ConfigClockSource>
 8002ffe:	4603      	mov	r3, r0
 8003000:	2b00      	cmp	r3, #0
 8003002:	d001      	beq.n	8003008 <MX_TIM4_Init+0x7c>
		Error_Handler();
 8003004:	f001 f818 	bl	8004038 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 8003008:	4822      	ldr	r0, [pc, #136]	; (8003094 <MX_TIM4_Init+0x108>)
 800300a:	f005 fcc3 	bl	8008994 <HAL_TIM_PWM_Init>
 800300e:	4603      	mov	r3, r0
 8003010:	2b00      	cmp	r3, #0
 8003012:	d001      	beq.n	8003018 <MX_TIM4_Init+0x8c>
		Error_Handler();
 8003014:	f001 f810 	bl	8004038 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 8003018:	481e      	ldr	r0, [pc, #120]	; (8003094 <MX_TIM4_Init+0x108>)
 800301a:	f005 fc73 	bl	8008904 <HAL_TIM_OC_Init>
 800301e:	4603      	mov	r3, r0
 8003020:	2b00      	cmp	r3, #0
 8003022:	d001      	beq.n	8003028 <MX_TIM4_Init+0x9c>
		Error_Handler();
 8003024:	f001 f808 	bl	8004038 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003028:	2300      	movs	r3, #0
 800302a:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800302c:	2300      	movs	r3, #0
 800302e:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 8003030:	f107 0310 	add.w	r3, r7, #16
 8003034:	4619      	mov	r1, r3
 8003036:	4817      	ldr	r0, [pc, #92]	; (8003094 <MX_TIM4_Init+0x108>)
 8003038:	f006 fa6e 	bl	8009518 <HAL_TIMEx_MasterConfigSynchronization>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <MX_TIM4_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 8003042:	f000 fff9 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003046:	2360      	movs	r3, #96	; 0x60
 8003048:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800304a:	2300      	movs	r3, #0
 800304c:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800304e:	2300      	movs	r3, #0
 8003050:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003052:	2300      	movs	r3, #0
 8003054:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 8003056:	463b      	mov	r3, r7
 8003058:	2200      	movs	r2, #0
 800305a:	4619      	mov	r1, r3
 800305c:	480d      	ldr	r0, [pc, #52]	; (8003094 <MX_TIM4_Init+0x108>)
 800305e:	f005 fea3 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 8003062:	4603      	mov	r3, r0
 8003064:	2b00      	cmp	r3, #0
 8003066:	d001      	beq.n	800306c <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8003068:	f000 ffe6 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800306c:	2300      	movs	r3, #0
 800306e:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003070:	463b      	mov	r3, r7
 8003072:	2204      	movs	r2, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4807      	ldr	r0, [pc, #28]	; (8003094 <MX_TIM4_Init+0x108>)
 8003078:	f005 fe3e 	bl	8008cf8 <HAL_TIM_OC_ConfigChannel>
 800307c:	4603      	mov	r3, r0
 800307e:	2b00      	cmp	r3, #0
 8003080:	d001      	beq.n	8003086 <MX_TIM4_Init+0xfa>
		Error_Handler();
 8003082:	f000 ffd9 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 8003086:	4803      	ldr	r0, [pc, #12]	; (8003094 <MX_TIM4_Init+0x108>)
 8003088:	f001 f9c4 	bl	8004414 <HAL_TIM_MspPostInit>

}
 800308c:	bf00      	nop
 800308e:	3728      	adds	r7, #40	; 0x28
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}
 8003094:	20000464 	.word	0x20000464
 8003098:	40000800 	.word	0x40000800

0800309c <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 800309c:	b580      	push	{r7, lr}
 800309e:	b082      	sub	sp, #8
 80030a0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80030a2:	463b      	mov	r3, r7
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]
 80030a8:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80030aa:	4b14      	ldr	r3, [pc, #80]	; (80030fc <MX_TIM6_Init+0x60>)
 80030ac:	4a14      	ldr	r2, [pc, #80]	; (8003100 <MX_TIM6_Init+0x64>)
 80030ae:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80030b0:	4b12      	ldr	r3, [pc, #72]	; (80030fc <MX_TIM6_Init+0x60>)
 80030b2:	2200      	movs	r2, #0
 80030b4:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030b6:	4b11      	ldr	r3, [pc, #68]	; (80030fc <MX_TIM6_Init+0x60>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 160 - 1;
 80030bc:	4b0f      	ldr	r3, [pc, #60]	; (80030fc <MX_TIM6_Init+0x60>)
 80030be:	229f      	movs	r2, #159	; 0x9f
 80030c0:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030c2:	4b0e      	ldr	r3, [pc, #56]	; (80030fc <MX_TIM6_Init+0x60>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80030c8:	480c      	ldr	r0, [pc, #48]	; (80030fc <MX_TIM6_Init+0x60>)
 80030ca:	f005 fb89 	bl	80087e0 <HAL_TIM_Base_Init>
 80030ce:	4603      	mov	r3, r0
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d001      	beq.n	80030d8 <MX_TIM6_Init+0x3c>
		Error_Handler();
 80030d4:	f000 ffb0 	bl	8004038 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80030d8:	2300      	movs	r3, #0
 80030da:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80030e0:	463b      	mov	r3, r7
 80030e2:	4619      	mov	r1, r3
 80030e4:	4805      	ldr	r0, [pc, #20]	; (80030fc <MX_TIM6_Init+0x60>)
 80030e6:	f006 fa17 	bl	8009518 <HAL_TIMEx_MasterConfigSynchronization>
 80030ea:	4603      	mov	r3, r0
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d001      	beq.n	80030f4 <MX_TIM6_Init+0x58>
			!= HAL_OK) {
		Error_Handler();
 80030f0:	f000 ffa2 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80030f4:	bf00      	nop
 80030f6:	3708      	adds	r7, #8
 80030f8:	46bd      	mov	sp, r7
 80030fa:	bd80      	pop	{r7, pc}
 80030fc:	200004a4 	.word	0x200004a4
 8003100:	40001000 	.word	0x40001000

08003104 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8003104:	b580      	push	{r7, lr}
 8003106:	b082      	sub	sp, #8
 8003108:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800310a:	463b      	mov	r3, r7
 800310c:	2200      	movs	r2, #0
 800310e:	601a      	str	r2, [r3, #0]
 8003110:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003112:	4b15      	ldr	r3, [pc, #84]	; (8003168 <MX_TIM7_Init+0x64>)
 8003114:	4a15      	ldr	r2, [pc, #84]	; (800316c <MX_TIM7_Init+0x68>)
 8003116:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 3200 - 1;
 8003118:	4b13      	ldr	r3, [pc, #76]	; (8003168 <MX_TIM7_Init+0x64>)
 800311a:	f640 427f 	movw	r2, #3199	; 0xc7f
 800311e:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003120:	4b11      	ldr	r3, [pc, #68]	; (8003168 <MX_TIM7_Init+0x64>)
 8003122:	2200      	movs	r2, #0
 8003124:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000 - 1;
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <MX_TIM7_Init+0x64>)
 8003128:	f242 720f 	movw	r2, #9999	; 0x270f
 800312c:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <MX_TIM7_Init+0x64>)
 8003130:	2200      	movs	r2, #0
 8003132:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003134:	480c      	ldr	r0, [pc, #48]	; (8003168 <MX_TIM7_Init+0x64>)
 8003136:	f005 fb53 	bl	80087e0 <HAL_TIM_Base_Init>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003140:	f000 ff7a 	bl	8004038 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003144:	2300      	movs	r3, #0
 8003146:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003148:	2300      	movs	r3, #0
 800314a:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 800314c:	463b      	mov	r3, r7
 800314e:	4619      	mov	r1, r3
 8003150:	4805      	ldr	r0, [pc, #20]	; (8003168 <MX_TIM7_Init+0x64>)
 8003152:	f006 f9e1 	bl	8009518 <HAL_TIMEx_MasterConfigSynchronization>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d001      	beq.n	8003160 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 800315c:	f000 ff6c 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003160:	bf00      	nop
 8003162:	3708      	adds	r7, #8
 8003164:	46bd      	mov	sp, r7
 8003166:	bd80      	pop	{r7, pc}
 8003168:	200004e4 	.word	0x200004e4
 800316c:	40001400 	.word	0x40001400

08003170 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8003170:	b580      	push	{r7, lr}
 8003172:	b08a      	sub	sp, #40	; 0x28
 8003174:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003176:	f107 0318 	add.w	r3, r7, #24
 800317a:	2200      	movs	r2, #0
 800317c:	601a      	str	r2, [r3, #0]
 800317e:	605a      	str	r2, [r3, #4]
 8003180:	609a      	str	r2, [r3, #8]
 8003182:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003184:	f107 0310 	add.w	r3, r7, #16
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800318e:	463b      	mov	r3, r7
 8003190:	2200      	movs	r2, #0
 8003192:	601a      	str	r2, [r3, #0]
 8003194:	605a      	str	r2, [r3, #4]
 8003196:	609a      	str	r2, [r3, #8]
 8003198:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 800319a:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <MX_TIM9_Init+0xe0>)
 800319c:	4a2d      	ldr	r2, [pc, #180]	; (8003254 <MX_TIM9_Init+0xe4>)
 800319e:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 80031a0:	4b2b      	ldr	r3, [pc, #172]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80031a6:	4b2a      	ldr	r3, [pc, #168]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031a8:	2200      	movs	r2, #0
 80031aa:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 80031ac:	4b28      	ldr	r3, [pc, #160]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031ae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80031b2:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80031b4:	4b26      	ldr	r3, [pc, #152]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031b6:	2200      	movs	r2, #0
 80031b8:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031ba:	4b25      	ldr	r3, [pc, #148]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031bc:	2200      	movs	r2, #0
 80031be:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 80031c0:	4823      	ldr	r0, [pc, #140]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031c2:	f005 fb0d 	bl	80087e0 <HAL_TIM_Base_Init>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM9_Init+0x60>
		Error_Handler();
 80031cc:	f000 ff34 	bl	8004038 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031d4:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 80031d6:	f107 0318 	add.w	r3, r7, #24
 80031da:	4619      	mov	r1, r3
 80031dc:	481c      	ldr	r0, [pc, #112]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031de:	f005 fea1 	bl	8008f24 <HAL_TIM_ConfigClockSource>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d001      	beq.n	80031ec <MX_TIM9_Init+0x7c>
		Error_Handler();
 80031e8:	f000 ff26 	bl	8004038 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK) {
 80031ec:	4818      	ldr	r0, [pc, #96]	; (8003250 <MX_TIM9_Init+0xe0>)
 80031ee:	f005 fbd1 	bl	8008994 <HAL_TIM_PWM_Init>
 80031f2:	4603      	mov	r3, r0
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d001      	beq.n	80031fc <MX_TIM9_Init+0x8c>
		Error_Handler();
 80031f8:	f000 ff1e 	bl	8004038 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031fc:	2300      	movs	r3, #0
 80031fe:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003200:	2300      	movs	r3, #0
 8003202:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig)
 8003204:	f107 0310 	add.w	r3, r7, #16
 8003208:	4619      	mov	r1, r3
 800320a:	4811      	ldr	r0, [pc, #68]	; (8003250 <MX_TIM9_Init+0xe0>)
 800320c:	f006 f984 	bl	8009518 <HAL_TIMEx_MasterConfigSynchronization>
 8003210:	4603      	mov	r3, r0
 8003212:	2b00      	cmp	r3, #0
 8003214:	d001      	beq.n	800321a <MX_TIM9_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 8003216:	f000 ff0f 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800321a:	2360      	movs	r3, #96	; 0x60
 800321c:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800321e:	2300      	movs	r3, #0
 8003220:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003222:	2300      	movs	r3, #0
 8003224:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003226:	2300      	movs	r3, #0
 8003228:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2)
 800322a:	463b      	mov	r3, r7
 800322c:	2204      	movs	r2, #4
 800322e:	4619      	mov	r1, r3
 8003230:	4807      	ldr	r0, [pc, #28]	; (8003250 <MX_TIM9_Init+0xe0>)
 8003232:	f005 fdb9 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 8003236:	4603      	mov	r3, r0
 8003238:	2b00      	cmp	r3, #0
 800323a:	d001      	beq.n	8003240 <MX_TIM9_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 800323c:	f000 fefc 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8003240:	4803      	ldr	r0, [pc, #12]	; (8003250 <MX_TIM9_Init+0xe0>)
 8003242:	f001 f8e7 	bl	8004414 <HAL_TIM_MspPostInit>

}
 8003246:	bf00      	nop
 8003248:	3728      	adds	r7, #40	; 0x28
 800324a:	46bd      	mov	sp, r7
 800324c:	bd80      	pop	{r7, pc}
 800324e:	bf00      	nop
 8003250:	20000524 	.word	0x20000524
 8003254:	40010800 	.word	0x40010800

08003258 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8003258:	b580      	push	{r7, lr}
 800325a:	b088      	sub	sp, #32
 800325c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800325e:	f107 0310 	add.w	r3, r7, #16
 8003262:	2200      	movs	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
 8003266:	605a      	str	r2, [r3, #4]
 8003268:	609a      	str	r2, [r3, #8]
 800326a:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800326c:	463b      	mov	r3, r7
 800326e:	2200      	movs	r2, #0
 8003270:	601a      	str	r2, [r3, #0]
 8003272:	605a      	str	r2, [r3, #4]
 8003274:	609a      	str	r2, [r3, #8]
 8003276:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8003278:	4b25      	ldr	r3, [pc, #148]	; (8003310 <MX_TIM10_Init+0xb8>)
 800327a:	4a26      	ldr	r2, [pc, #152]	; (8003314 <MX_TIM10_Init+0xbc>)
 800327c:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 0;
 800327e:	4b24      	ldr	r3, [pc, #144]	; (8003310 <MX_TIM10_Init+0xb8>)
 8003280:	2200      	movs	r2, #0
 8003282:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003284:	4b22      	ldr	r3, [pc, #136]	; (8003310 <MX_TIM10_Init+0xb8>)
 8003286:	2200      	movs	r2, #0
 8003288:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 800328a:	4b21      	ldr	r3, [pc, #132]	; (8003310 <MX_TIM10_Init+0xb8>)
 800328c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003290:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003292:	4b1f      	ldr	r3, [pc, #124]	; (8003310 <MX_TIM10_Init+0xb8>)
 8003294:	2200      	movs	r2, #0
 8003296:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003298:	4b1d      	ldr	r3, [pc, #116]	; (8003310 <MX_TIM10_Init+0xb8>)
 800329a:	2200      	movs	r2, #0
 800329c:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 800329e:	481c      	ldr	r0, [pc, #112]	; (8003310 <MX_TIM10_Init+0xb8>)
 80032a0:	f005 fa9e 	bl	80087e0 <HAL_TIM_Base_Init>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d001      	beq.n	80032ae <MX_TIM10_Init+0x56>
		Error_Handler();
 80032aa:	f000 fec5 	bl	8004038 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80032ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80032b2:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK) {
 80032b4:	f107 0310 	add.w	r3, r7, #16
 80032b8:	4619      	mov	r1, r3
 80032ba:	4815      	ldr	r0, [pc, #84]	; (8003310 <MX_TIM10_Init+0xb8>)
 80032bc:	f005 fe32 	bl	8008f24 <HAL_TIM_ConfigClockSource>
 80032c0:	4603      	mov	r3, r0
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d001      	beq.n	80032ca <MX_TIM10_Init+0x72>
		Error_Handler();
 80032c6:	f000 feb7 	bl	8004038 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 80032ca:	4811      	ldr	r0, [pc, #68]	; (8003310 <MX_TIM10_Init+0xb8>)
 80032cc:	f005 fb62 	bl	8008994 <HAL_TIM_PWM_Init>
 80032d0:	4603      	mov	r3, r0
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d001      	beq.n	80032da <MX_TIM10_Init+0x82>
		Error_Handler();
 80032d6:	f000 feaf 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80032da:	2360      	movs	r3, #96	; 0x60
 80032dc:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80032de:	2300      	movs	r3, #0
 80032e0:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80032e2:	2300      	movs	r3, #0
 80032e4:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80032e6:	2300      	movs	r3, #0
 80032e8:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80032ea:	463b      	mov	r3, r7
 80032ec:	2200      	movs	r2, #0
 80032ee:	4619      	mov	r1, r3
 80032f0:	4807      	ldr	r0, [pc, #28]	; (8003310 <MX_TIM10_Init+0xb8>)
 80032f2:	f005 fd59 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 80032f6:	4603      	mov	r3, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <MX_TIM10_Init+0xa8>
			!= HAL_OK) {
		Error_Handler();
 80032fc:	f000 fe9c 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 8003300:	4803      	ldr	r0, [pc, #12]	; (8003310 <MX_TIM10_Init+0xb8>)
 8003302:	f001 f887 	bl	8004414 <HAL_TIM_MspPostInit>

}
 8003306:	bf00      	nop
 8003308:	3720      	adds	r7, #32
 800330a:	46bd      	mov	sp, r7
 800330c:	bd80      	pop	{r7, pc}
 800330e:	bf00      	nop
 8003310:	20000564 	.word	0x20000564
 8003314:	40010c00 	.word	0x40010c00

08003318 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800331e:	463b      	mov	r3, r7
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]
 8003324:	605a      	str	r2, [r3, #4]
 8003326:	609a      	str	r2, [r3, #8]
 8003328:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 800332a:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <MX_TIM11_Init+0x7c>)
 800332c:	4a1a      	ldr	r2, [pc, #104]	; (8003398 <MX_TIM11_Init+0x80>)
 800332e:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 8003330:	4b18      	ldr	r3, [pc, #96]	; (8003394 <MX_TIM11_Init+0x7c>)
 8003332:	2200      	movs	r2, #0
 8003334:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003336:	4b17      	ldr	r3, [pc, #92]	; (8003394 <MX_TIM11_Init+0x7c>)
 8003338:	2200      	movs	r2, #0
 800333a:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 800333c:	4b15      	ldr	r3, [pc, #84]	; (8003394 <MX_TIM11_Init+0x7c>)
 800333e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003342:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003344:	4b13      	ldr	r3, [pc, #76]	; (8003394 <MX_TIM11_Init+0x7c>)
 8003346:	2200      	movs	r2, #0
 8003348:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800334a:	4b12      	ldr	r3, [pc, #72]	; (8003394 <MX_TIM11_Init+0x7c>)
 800334c:	2200      	movs	r2, #0
 800334e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 8003350:	4810      	ldr	r0, [pc, #64]	; (8003394 <MX_TIM11_Init+0x7c>)
 8003352:	f005 fb1f 	bl	8008994 <HAL_TIM_PWM_Init>
 8003356:	4603      	mov	r3, r0
 8003358:	2b00      	cmp	r3, #0
 800335a:	d001      	beq.n	8003360 <MX_TIM11_Init+0x48>
		Error_Handler();
 800335c:	f000 fe6c 	bl	8004038 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003360:	2360      	movs	r3, #96	; 0x60
 8003362:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003364:	2300      	movs	r3, #0
 8003366:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003368:	2300      	movs	r3, #0
 800336a:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800336c:	2300      	movs	r3, #0
 800336e:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8003370:	463b      	mov	r3, r7
 8003372:	2200      	movs	r2, #0
 8003374:	4619      	mov	r1, r3
 8003376:	4807      	ldr	r0, [pc, #28]	; (8003394 <MX_TIM11_Init+0x7c>)
 8003378:	f005 fd16 	bl	8008da8 <HAL_TIM_PWM_ConfigChannel>
 800337c:	4603      	mov	r3, r0
 800337e:	2b00      	cmp	r3, #0
 8003380:	d001      	beq.n	8003386 <MX_TIM11_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8003382:	f000 fe59 	bl	8004038 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8003386:	4803      	ldr	r0, [pc, #12]	; (8003394 <MX_TIM11_Init+0x7c>)
 8003388:	f001 f844 	bl	8004414 <HAL_TIM_MspPostInit>

}
 800338c:	bf00      	nop
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	200005a4 	.word	0x200005a4
 8003398:	40011000 	.word	0x40011000

0800339c <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 800339c:	b580      	push	{r7, lr}
 800339e:	b08a      	sub	sp, #40	; 0x28
 80033a0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80033a2:	f107 0314 	add.w	r3, r7, #20
 80033a6:	2200      	movs	r2, #0
 80033a8:	601a      	str	r2, [r3, #0]
 80033aa:	605a      	str	r2, [r3, #4]
 80033ac:	609a      	str	r2, [r3, #8]
 80033ae:	60da      	str	r2, [r3, #12]
 80033b0:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80033b2:	4b59      	ldr	r3, [pc, #356]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033b4:	69db      	ldr	r3, [r3, #28]
 80033b6:	4a58      	ldr	r2, [pc, #352]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033b8:	f043 0304 	orr.w	r3, r3, #4
 80033bc:	61d3      	str	r3, [r2, #28]
 80033be:	4b56      	ldr	r3, [pc, #344]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033c0:	69db      	ldr	r3, [r3, #28]
 80033c2:	f003 0304 	and.w	r3, r3, #4
 80033c6:	613b      	str	r3, [r7, #16]
 80033c8:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 80033ca:	4b53      	ldr	r3, [pc, #332]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033cc:	69db      	ldr	r3, [r3, #28]
 80033ce:	4a52      	ldr	r2, [pc, #328]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033d0:	f043 0320 	orr.w	r3, r3, #32
 80033d4:	61d3      	str	r3, [r2, #28]
 80033d6:	4b50      	ldr	r3, [pc, #320]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033d8:	69db      	ldr	r3, [r3, #28]
 80033da:	f003 0320 	and.w	r3, r3, #32
 80033de:	60fb      	str	r3, [r7, #12]
 80033e0:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80033e2:	4b4d      	ldr	r3, [pc, #308]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033e4:	69db      	ldr	r3, [r3, #28]
 80033e6:	4a4c      	ldr	r2, [pc, #304]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033e8:	f043 0301 	orr.w	r3, r3, #1
 80033ec:	61d3      	str	r3, [r2, #28]
 80033ee:	4b4a      	ldr	r3, [pc, #296]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033f0:	69db      	ldr	r3, [r3, #28]
 80033f2:	f003 0301 	and.w	r3, r3, #1
 80033f6:	60bb      	str	r3, [r7, #8]
 80033f8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80033fa:	4b47      	ldr	r3, [pc, #284]	; (8003518 <MX_GPIO_Init+0x17c>)
 80033fc:	69db      	ldr	r3, [r3, #28]
 80033fe:	4a46      	ldr	r2, [pc, #280]	; (8003518 <MX_GPIO_Init+0x17c>)
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	61d3      	str	r3, [r2, #28]
 8003406:	4b44      	ldr	r3, [pc, #272]	; (8003518 <MX_GPIO_Init+0x17c>)
 8003408:	69db      	ldr	r3, [r3, #28]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	607b      	str	r3, [r7, #4]
 8003410:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin, GPIO_PIN_RESET);
 8003412:	2200      	movs	r2, #0
 8003414:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003418:	4840      	ldr	r0, [pc, #256]	; (800351c <MX_GPIO_Init+0x180>)
 800341a:	f002 f89a 	bl	8005552 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, stat595_SCK_Pin | SD_CS_Pin, GPIO_PIN_RESET);
 800341e:	2200      	movs	r2, #0
 8003420:	f248 0110 	movw	r1, #32784	; 0x8010
 8003424:	483e      	ldr	r0, [pc, #248]	; (8003520 <MX_GPIO_Init+0x184>)
 8003426:	f002 f894 	bl	8005552 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 800342a:	2200      	movs	r2, #0
 800342c:	f241 0107 	movw	r1, #4103	; 0x1007
 8003430:	483c      	ldr	r0, [pc, #240]	; (8003524 <MX_GPIO_Init+0x188>)
 8003432:	f002 f88e 	bl	8005552 <HAL_GPIO_WritePin>
			LED_Heartbeat_Pin | Flash__wp_Pin | Flash__Hold_Pin | SPI2_SS_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : stat595_SER_Pin */
	GPIO_InitStruct.Pin = stat595_SER_Pin;
 8003436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800343a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800343c:	2301      	movs	r3, #1
 800343e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003440:	2300      	movs	r3, #0
 8003442:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003444:	2300      	movs	r3, #0
 8003446:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(stat595_SER_GPIO_Port, &GPIO_InitStruct);
 8003448:	f107 0314 	add.w	r3, r7, #20
 800344c:	4619      	mov	r1, r3
 800344e:	4833      	ldr	r0, [pc, #204]	; (800351c <MX_GPIO_Init+0x180>)
 8003450:	f001 fee8 	bl	8005224 <HAL_GPIO_Init>

	/*Configure GPIO pin : stat595_SCK_Pin */
	GPIO_InitStruct.Pin = stat595_SCK_Pin;
 8003454:	2310      	movs	r3, #16
 8003456:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003458:	2301      	movs	r3, #1
 800345a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800345c:	2300      	movs	r3, #0
 800345e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003460:	2300      	movs	r3, #0
 8003462:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(stat595_SCK_GPIO_Port, &GPIO_InitStruct);
 8003464:	f107 0314 	add.w	r3, r7, #20
 8003468:	4619      	mov	r1, r3
 800346a:	482d      	ldr	r0, [pc, #180]	; (8003520 <MX_GPIO_Init+0x184>)
 800346c:	f001 feda 	bl	8005224 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_Heartbeat_Pin Flash__wp_Pin Flash__Hold_Pin SPI2_SS_Pin */
	GPIO_InitStruct.Pin = LED_Heartbeat_Pin | Flash__wp_Pin | Flash__Hold_Pin
 8003470:	f241 0307 	movw	r3, #4103	; 0x1007
 8003474:	617b      	str	r3, [r7, #20]
			| SPI2_SS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003476:	2301      	movs	r3, #1
 8003478:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800347a:	2300      	movs	r3, #0
 800347c:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800347e:	2300      	movs	r3, #0
 8003480:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003482:	f107 0314 	add.w	r3, r7, #20
 8003486:	4619      	mov	r1, r3
 8003488:	4826      	ldr	r0, [pc, #152]	; (8003524 <MX_GPIO_Init+0x188>)
 800348a:	f001 fecb 	bl	8005224 <HAL_GPIO_Init>

	/*Configure GPIO pin : ROT_BUT_Pin */
	GPIO_InitStruct.Pin = ROT_BUT_Pin;
 800348e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003492:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003494:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003498:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800349a:	2300      	movs	r3, #0
 800349c:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 800349e:	f107 0314 	add.w	r3, r7, #20
 80034a2:	4619      	mov	r1, r3
 80034a4:	481e      	ldr	r0, [pc, #120]	; (8003520 <MX_GPIO_Init+0x184>)
 80034a6:	f001 febd 	bl	8005224 <HAL_GPIO_Init>

	/*Configure GPIO pin : ROT_CLK_Pin */
	GPIO_InitStruct.Pin = ROT_CLK_Pin;
 80034aa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80034ae:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034b0:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034b4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034b6:	2300      	movs	r3, #0
 80034b8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ROT_CLK_GPIO_Port, &GPIO_InitStruct);
 80034ba:	f107 0314 	add.w	r3, r7, #20
 80034be:	4619      	mov	r1, r3
 80034c0:	4817      	ldr	r0, [pc, #92]	; (8003520 <MX_GPIO_Init+0x184>)
 80034c2:	f001 feaf 	bl	8005224 <HAL_GPIO_Init>

	/*Configure GPIO pin : ROT_DAT_Pin */
	GPIO_InitStruct.Pin = ROT_DAT_Pin;
 80034c6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80034ca:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034d0:	2300      	movs	r3, #0
 80034d2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ROT_DAT_GPIO_Port, &GPIO_InitStruct);
 80034d4:	f107 0314 	add.w	r3, r7, #20
 80034d8:	4619      	mov	r1, r3
 80034da:	4811      	ldr	r0, [pc, #68]	; (8003520 <MX_GPIO_Init+0x184>)
 80034dc:	f001 fea2 	bl	8005224 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 80034e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034e4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034e6:	2301      	movs	r3, #1
 80034e8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034ea:	2301      	movs	r3, #1
 80034ec:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80034ee:	2301      	movs	r3, #1
 80034f0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 80034f2:	f107 0314 	add.w	r3, r7, #20
 80034f6:	4619      	mov	r1, r3
 80034f8:	4809      	ldr	r0, [pc, #36]	; (8003520 <MX_GPIO_Init+0x184>)
 80034fa:	f001 fe93 	bl	8005224 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80034fe:	2200      	movs	r2, #0
 8003500:	2100      	movs	r1, #0
 8003502:	2017      	movs	r0, #23
 8003504:	f001 fe57 	bl	80051b6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003508:	2017      	movs	r0, #23
 800350a:	f001 fe70 	bl	80051ee <HAL_NVIC_EnableIRQ>

}
 800350e:	bf00      	nop
 8003510:	3728      	adds	r7, #40	; 0x28
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}
 8003516:	bf00      	nop
 8003518:	40023800 	.word	0x40023800
 800351c:	40020800 	.word	0x40020800
 8003520:	40020000 	.word	0x40020000
 8003524:	40020400 	.word	0x40020400

08003528 <writeStatusLED>:
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void writeStatusLED(uint8_t status) {
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	4603      	mov	r3, r0
 8003530:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin, GPIO_PIN_RESET);
 8003532:	2200      	movs	r2, #0
 8003534:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003538:	481c      	ldr	r0, [pc, #112]	; (80035ac <writeStatusLED+0x84>)
 800353a:	f002 f80a 	bl	8005552 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_RESET);
 800353e:	2200      	movs	r2, #0
 8003540:	2110      	movs	r1, #16
 8003542:	481b      	ldr	r0, [pc, #108]	; (80035b0 <writeStatusLED+0x88>)
 8003544:	f002 f805 	bl	8005552 <HAL_GPIO_WritePin>
	//	delayMicroseconds(5);

	for (int i = 0; i < 8; i++) {
 8003548:	2300      	movs	r3, #0
 800354a:	60fb      	str	r3, [r7, #12]
 800354c:	e01c      	b.n	8003588 <writeStatusLED+0x60>
		HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin,
				(status & (1 << i)) >> i);
 800354e:	79fa      	ldrb	r2, [r7, #7]
 8003550:	2101      	movs	r1, #1
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	fa01 f303 	lsl.w	r3, r1, r3
 8003558:	401a      	ands	r2, r3
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	fa42 f303 	asr.w	r3, r2, r3
		HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin,
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003568:	4810      	ldr	r0, [pc, #64]	; (80035ac <writeStatusLED+0x84>)
 800356a:	f001 fff2 	bl	8005552 <HAL_GPIO_WritePin>
		//delayMicroseconds(5);
		HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_SET);
 800356e:	2201      	movs	r2, #1
 8003570:	2110      	movs	r1, #16
 8003572:	480f      	ldr	r0, [pc, #60]	; (80035b0 <writeStatusLED+0x88>)
 8003574:	f001 ffed 	bl	8005552 <HAL_GPIO_WritePin>
		//delayMicroseconds(5);
		HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin,
 8003578:	2200      	movs	r2, #0
 800357a:	2110      	movs	r1, #16
 800357c:	480c      	ldr	r0, [pc, #48]	; (80035b0 <writeStatusLED+0x88>)
 800357e:	f001 ffe8 	bl	8005552 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	3301      	adds	r3, #1
 8003586:	60fb      	str	r3, [r7, #12]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2b07      	cmp	r3, #7
 800358c:	dddf      	ble.n	800354e <writeStatusLED+0x26>
				GPIO_PIN_RESET);
	}
	//delayMicroseconds(5);
	HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_SET);
 800358e:	2201      	movs	r2, #1
 8003590:	2110      	movs	r1, #16
 8003592:	4807      	ldr	r0, [pc, #28]	; (80035b0 <writeStatusLED+0x88>)
 8003594:	f001 ffdd 	bl	8005552 <HAL_GPIO_WritePin>
	//delayMicroseconds(5);
	HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_RESET);
 8003598:	2200      	movs	r2, #0
 800359a:	2110      	movs	r1, #16
 800359c:	4804      	ldr	r0, [pc, #16]	; (80035b0 <writeStatusLED+0x88>)
 800359e:	f001 ffd8 	bl	8005552 <HAL_GPIO_WritePin>
}
 80035a2:	bf00      	nop
 80035a4:	3710      	adds	r7, #16
 80035a6:	46bd      	mov	sp, r7
 80035a8:	bd80      	pop	{r7, pc}
 80035aa:	bf00      	nop
 80035ac:	40020800 	.word	0x40020800
 80035b0:	40020000 	.word	0x40020000

080035b4 <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b082      	sub	sp, #8
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	4603      	mov	r3, r0
 80035bc:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT_BUT_Pin) {
 80035be:	88fb      	ldrh	r3, [r7, #6]
 80035c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80035c4:	d103      	bne.n	80035ce <HAL_GPIO_EXTI_Callback+0x1a>
		buttonPushed = true;
 80035c6:	4b13      	ldr	r3, [pc, #76]	; (8003614 <HAL_GPIO_EXTI_Callback+0x60>)
 80035c8:	2201      	movs	r2, #1
 80035ca:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(ROT_DAT_GPIO_Port, ROT_DAT_Pin) == 1) {
			rotaryVal--;
		} else
			rotaryVal++;
	}
}
 80035cc:	e01e      	b.n	800360c <HAL_GPIO_EXTI_Callback+0x58>
	} else if (GPIO_Pin == ROT_CLK_Pin) {
 80035ce:	88fb      	ldrh	r3, [r7, #6]
 80035d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80035d4:	d11a      	bne.n	800360c <HAL_GPIO_EXTI_Callback+0x58>
		if (HAL_GPIO_ReadPin(ROT_DAT_GPIO_Port, ROT_DAT_Pin) == 1) {
 80035d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80035da:	480f      	ldr	r0, [pc, #60]	; (8003618 <HAL_GPIO_EXTI_Callback+0x64>)
 80035dc:	f001 ffa2 	bl	8005524 <HAL_GPIO_ReadPin>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b01      	cmp	r3, #1
 80035e4:	d109      	bne.n	80035fa <HAL_GPIO_EXTI_Callback+0x46>
			rotaryVal--;
 80035e6:	4b0d      	ldr	r3, [pc, #52]	; (800361c <HAL_GPIO_EXTI_Callback+0x68>)
 80035e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80035ec:	b29b      	uxth	r3, r3
 80035ee:	3b01      	subs	r3, #1
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	b21a      	sxth	r2, r3
 80035f4:	4b09      	ldr	r3, [pc, #36]	; (800361c <HAL_GPIO_EXTI_Callback+0x68>)
 80035f6:	801a      	strh	r2, [r3, #0]
}
 80035f8:	e008      	b.n	800360c <HAL_GPIO_EXTI_Callback+0x58>
			rotaryVal++;
 80035fa:	4b08      	ldr	r3, [pc, #32]	; (800361c <HAL_GPIO_EXTI_Callback+0x68>)
 80035fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003600:	b29b      	uxth	r3, r3
 8003602:	3301      	adds	r3, #1
 8003604:	b29b      	uxth	r3, r3
 8003606:	b21a      	sxth	r2, r3
 8003608:	4b04      	ldr	r3, [pc, #16]	; (800361c <HAL_GPIO_EXTI_Callback+0x68>)
 800360a:	801a      	strh	r2, [r3, #0]
}
 800360c:	bf00      	nop
 800360e:	3708      	adds	r7, #8
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}
 8003614:	20000650 	.word	0x20000650
 8003618:	40020000 	.word	0x40020000
 800361c:	20000648 	.word	0x20000648

08003620 <printToUSB>:
}

/**
 * @brief	print a string to the USB COM port
 */
void printToUSB(char *s) {
 8003620:	b580      	push	{r7, lr}
 8003622:	b084      	sub	sp, #16
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
	int len = strlen(s);
 8003628:	6878      	ldr	r0, [r7, #4]
 800362a:	f7fc fda7 	bl	800017c <strlen>
 800362e:	4603      	mov	r3, r0
 8003630:	60fb      	str	r3, [r7, #12]
	CDC_Transmit_FS((uint8_t*)s, len);
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	b29b      	uxth	r3, r3
 8003636:	4619      	mov	r1, r3
 8003638:	6878      	ldr	r0, [r7, #4]
 800363a:	f00d ff43 	bl	80114c4 <CDC_Transmit_FS>
}
 800363e:	bf00      	nop
 8003640:	3710      	adds	r7, #16
 8003642:	46bd      	mov	sp, r7
 8003644:	bd80      	pop	{r7, pc}
	...

08003648 <USBDataReceived_IT>:
void USBDataReceived_IT(uint8_t *Buf, uint32_t *len) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b086      	sub	sp, #24
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
	//		midiData[eventPointer][5] = *(Buf+5);
	//		eventPointer++;
	//	}
	//	writeStatusLED((uint8_t)*len);

	for (int i = 0; i < (*len) / 3; i++) {
 8003652:	2300      	movs	r3, #0
 8003654:	617b      	str	r3, [r7, #20]
 8003656:	e021      	b.n	800369c <USBDataReceived_IT+0x54>
		uint8_t track = *Buf;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	74fb      	strb	r3, [r7, #19]
		Buf++;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	3301      	adds	r3, #1
 8003662:	607b      	str	r3, [r7, #4]
		uint16_t freq = noteFreq[*Buf - 24];
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	781b      	ldrb	r3, [r3, #0]
 8003668:	3b18      	subs	r3, #24
 800366a:	4a13      	ldr	r2, [pc, #76]	; (80036b8 <USBDataReceived_IT+0x70>)
 800366c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003670:	823b      	strh	r3, [r7, #16]
		Buf++;
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	3301      	adds	r3, #1
 8003676:	607b      	str	r3, [r7, #4]
		uint16_t velocity = *Buf;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	81fb      	strh	r3, [r7, #14]
		Buf++;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	3301      	adds	r3, #1
 8003682:	607b      	str	r3, [r7, #4]
		if (track == 1)
 8003684:	7cfb      	ldrb	r3, [r7, #19]
 8003686:	2b01      	cmp	r3, #1
 8003688:	d105      	bne.n	8003696 <USBDataReceived_IT+0x4e>
			setTimerFrequencyPulseWidth(&htim3, freq, velocity, TIM_CHANNEL_1);
 800368a:	89fa      	ldrh	r2, [r7, #14]
 800368c:	8a39      	ldrh	r1, [r7, #16]
 800368e:	2300      	movs	r3, #0
 8003690:	480a      	ldr	r0, [pc, #40]	; (80036bc <USBDataReceived_IT+0x74>)
 8003692:	f7fd ffdf 	bl	8001654 <setTimerFrequencyPulseWidth>
	for (int i = 0; i < (*len) / 3; i++) {
 8003696:	697b      	ldr	r3, [r7, #20]
 8003698:	3301      	adds	r3, #1
 800369a:	617b      	str	r3, [r7, #20]
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	4a07      	ldr	r2, [pc, #28]	; (80036c0 <USBDataReceived_IT+0x78>)
 80036a2:	fba2 2303 	umull	r2, r3, r2, r3
 80036a6:	085a      	lsrs	r2, r3, #1
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	429a      	cmp	r2, r3
 80036ac:	d8d4      	bhi.n	8003658 <USBDataReceived_IT+0x10>
	//	//then copy contents
	//	memcpy(USB_Rx_Buf, Buf, (uint8_t)*len);
	//writeStatusLED(*Buf);
	//writeStatusLED((uint8_t)(*len));

}
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	3718      	adds	r7, #24
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	20000000 	.word	0x20000000
 80036bc:	20000424 	.word	0x20000424
 80036c0:	aaaaaaab 	.word	0xaaaaaaab

080036c4 <HAL_TIM_PeriodElapsedCallback>:

/**
 * 2 main timers: one for micros, one for heartbeat LED
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80036c4:	b5b0      	push	{r4, r5, r7, lr}
 80036c6:	b082      	sub	sp, #8
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	4a0c      	ldr	r2, [pc, #48]	; (8003700 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d109      	bne.n	80036e8 <HAL_TIM_PeriodElapsedCallback+0x24>
		//auto reload every 160 cycles (5uS)
		micros += 5;
 80036d4:	4b0b      	ldr	r3, [pc, #44]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036da:	1d54      	adds	r4, r2, #5
 80036dc:	f143 0500 	adc.w	r5, r3, #0
 80036e0:	4b08      	ldr	r3, [pc, #32]	; (8003704 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80036e2:	e9c3 4500 	strd	r4, r5, [r3]
	} else if (htim == &htim7) {
		//HAL_ADC_Start_IT(&hadc);
		HAL_GPIO_TogglePin(LED_Heartbeat_GPIO_Port, LED_Heartbeat_Pin);
	}
}
 80036e6:	e007      	b.n	80036f8 <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if (htim == &htim7) {
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a07      	ldr	r2, [pc, #28]	; (8003708 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d103      	bne.n	80036f8 <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_GPIO_TogglePin(LED_Heartbeat_GPIO_Port, LED_Heartbeat_Pin);
 80036f0:	2101      	movs	r1, #1
 80036f2:	4806      	ldr	r0, [pc, #24]	; (800370c <HAL_TIM_PeriodElapsedCallback+0x48>)
 80036f4:	f001 ff45 	bl	8005582 <HAL_GPIO_TogglePin>
}
 80036f8:	bf00      	nop
 80036fa:	3708      	adds	r7, #8
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bdb0      	pop	{r4, r5, r7, pc}
 8003700:	200004a4 	.word	0x200004a4
 8003704:	20000640 	.word	0x20000640
 8003708:	200004e4 	.word	0x200004e4
 800370c:	40020400 	.word	0x40020400

08003710 <SDModeChooseSong>:
//}
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
	adcVal = HAL_ADC_GetValue(hadc);
}

void SDModeChooseSong(){
 8003710:	b590      	push	{r4, r7, lr}
 8003712:	b083      	sub	sp, #12
 8003714:	af00      	add	r7, sp, #0
	// No need to print again if no need to refresh
	// e.g. Going to a new page
	if (!printed) {
 8003716:	4ba0      	ldr	r3, [pc, #640]	; (8003998 <SDModeChooseSong+0x288>)
 8003718:	781b      	ldrb	r3, [r3, #0]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d149      	bne.n	80037b2 <SDModeChooseSong+0xa2>
		clearDisplay(&lcd);
 800371e:	489f      	ldr	r0, [pc, #636]	; (800399c <SDModeChooseSong+0x28c>)
 8003720:	f7fd fe65 	bl	80013ee <clearDisplay>
		LCDPrintAtPos(&lcd, ">", 0, songNum % MAX_ROW );
 8003724:	4b9e      	ldr	r3, [pc, #632]	; (80039a0 <SDModeChooseSong+0x290>)
 8003726:	781b      	ldrb	r3, [r3, #0]
 8003728:	f003 0303 	and.w	r3, r3, #3
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2200      	movs	r2, #0
 8003730:	499c      	ldr	r1, [pc, #624]	; (80039a4 <SDModeChooseSong+0x294>)
 8003732:	489a      	ldr	r0, [pc, #616]	; (800399c <SDModeChooseSong+0x28c>)
 8003734:	f7fd fe24 	bl	8001380 <LCDPrintAtPos>
		for (int i = 0; i < MAX_ROW; i++) {
 8003738:	2300      	movs	r3, #0
 800373a:	607b      	str	r3, [r7, #4]
 800373c:	e027      	b.n	800378e <SDModeChooseSong+0x7e>
			if (((int)(songNum / MAX_ROW) * MAX_ROW + i) == fileCount + 1) break;
 800373e:	4b98      	ldr	r3, [pc, #608]	; (80039a0 <SDModeChooseSong+0x290>)
 8003740:	781b      	ldrb	r3, [r3, #0]
 8003742:	089b      	lsrs	r3, r3, #2
 8003744:	b2db      	uxtb	r3, r3
 8003746:	009a      	lsls	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	441a      	add	r2, r3
 800374c:	4b96      	ldr	r3, [pc, #600]	; (80039a8 <SDModeChooseSong+0x298>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	3301      	adds	r3, #1
 8003752:	429a      	cmp	r2, r3
 8003754:	d01f      	beq.n	8003796 <SDModeChooseSong+0x86>
			strncpy(displayedText, &fileNames[(int)(songNum / MAX_ROW) * MAX_ROW + i][0], MAX_CHAR_ON_SCREEN);
 8003756:	4b92      	ldr	r3, [pc, #584]	; (80039a0 <SDModeChooseSong+0x290>)
 8003758:	781b      	ldrb	r3, [r3, #0]
 800375a:	089b      	lsrs	r3, r3, #2
 800375c:	b2db      	uxtb	r3, r3
 800375e:	009a      	lsls	r2, r3, #2
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	4413      	add	r3, r2
 8003764:	015b      	lsls	r3, r3, #5
 8003766:	4a91      	ldr	r2, [pc, #580]	; (80039ac <SDModeChooseSong+0x29c>)
 8003768:	4413      	add	r3, r2
 800376a:	2213      	movs	r2, #19
 800376c:	4619      	mov	r1, r3
 800376e:	4890      	ldr	r0, [pc, #576]	; (80039b0 <SDModeChooseSong+0x2a0>)
 8003770:	f00e fac2 	bl	8011cf8 <strncpy>
			displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 8003774:	4b8e      	ldr	r3, [pc, #568]	; (80039b0 <SDModeChooseSong+0x2a0>)
 8003776:	2200      	movs	r2, #0
 8003778:	74da      	strb	r2, [r3, #19]
			LCDPrintAtPos(&lcd, displayedText,1, i);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	b2db      	uxtb	r3, r3
 800377e:	2201      	movs	r2, #1
 8003780:	498b      	ldr	r1, [pc, #556]	; (80039b0 <SDModeChooseSong+0x2a0>)
 8003782:	4886      	ldr	r0, [pc, #536]	; (800399c <SDModeChooseSong+0x28c>)
 8003784:	f7fd fdfc 	bl	8001380 <LCDPrintAtPos>
		for (int i = 0; i < MAX_ROW; i++) {
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	3301      	adds	r3, #1
 800378c:	607b      	str	r3, [r7, #4]
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	2b03      	cmp	r3, #3
 8003792:	ddd4      	ble.n	800373e <SDModeChooseSong+0x2e>
 8003794:	e000      	b.n	8003798 <SDModeChooseSong+0x88>
			if (((int)(songNum / MAX_ROW) * MAX_ROW + i) == fileCount + 1) break;
 8003796:	bf00      	nop
		}
		printed = true;
 8003798:	4b7f      	ldr	r3, [pc, #508]	; (8003998 <SDModeChooseSong+0x288>)
 800379a:	2201      	movs	r2, #1
 800379c:	701a      	strb	r2, [r3, #0]
		setCursor(&lcd, 0, songNum % MAX_ROW);
 800379e:	4b80      	ldr	r3, [pc, #512]	; (80039a0 <SDModeChooseSong+0x290>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	f003 0303 	and.w	r3, r3, #3
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	461a      	mov	r2, r3
 80037aa:	2100      	movs	r1, #0
 80037ac:	487b      	ldr	r0, [pc, #492]	; (800399c <SDModeChooseSong+0x28c>)
 80037ae:	f7fd fd37 	bl	8001220 <setCursor>
	}

	// If the current selected song is longer than what the screen can display,
	// give it scroll effect

	if (strlen(fileNames[songNum]) > MAX_CHAR_ON_SCREEN) {
 80037b2:	4b7b      	ldr	r3, [pc, #492]	; (80039a0 <SDModeChooseSong+0x290>)
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	015b      	lsls	r3, r3, #5
 80037b8:	4a7c      	ldr	r2, [pc, #496]	; (80039ac <SDModeChooseSong+0x29c>)
 80037ba:	4413      	add	r3, r2
 80037bc:	4618      	mov	r0, r3
 80037be:	f7fc fcdd 	bl	800017c <strlen>
 80037c2:	4603      	mov	r3, r0
 80037c4:	2b13      	cmp	r3, #19
 80037c6:	d94d      	bls.n	8003864 <SDModeChooseSong+0x154>
		//begin non blocking delay
		if(updateTimeScroll == true){
 80037c8:	4b7a      	ldr	r3, [pc, #488]	; (80039b4 <SDModeChooseSong+0x2a4>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b01      	cmp	r3, #1
 80037ce:	d13c      	bne.n	800384a <SDModeChooseSong+0x13a>
			updateTimeScroll = false;
 80037d0:	4b78      	ldr	r3, [pc, #480]	; (80039b4 <SDModeChooseSong+0x2a4>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	701a      	strb	r2, [r3, #0]
			timeForScroll = HAL_GetTick();
 80037d6:	f001 f823 	bl	8004820 <HAL_GetTick>
 80037da:	4603      	mov	r3, r0
 80037dc:	4a76      	ldr	r2, [pc, #472]	; (80039b8 <SDModeChooseSong+0x2a8>)
 80037de:	6013      	str	r3, [r2, #0]
			strncpy(displayedText, &fileNames[songNum][scrollPosition], MAX_CHAR_ON_SCREEN);
 80037e0:	4b6f      	ldr	r3, [pc, #444]	; (80039a0 <SDModeChooseSong+0x290>)
 80037e2:	781b      	ldrb	r3, [r3, #0]
 80037e4:	4619      	mov	r1, r3
 80037e6:	4b75      	ldr	r3, [pc, #468]	; (80039bc <SDModeChooseSong+0x2ac>)
 80037e8:	781b      	ldrb	r3, [r3, #0]
 80037ea:	461a      	mov	r2, r3
 80037ec:	014b      	lsls	r3, r1, #5
 80037ee:	4413      	add	r3, r2
 80037f0:	4a6e      	ldr	r2, [pc, #440]	; (80039ac <SDModeChooseSong+0x29c>)
 80037f2:	4413      	add	r3, r2
 80037f4:	2213      	movs	r2, #19
 80037f6:	4619      	mov	r1, r3
 80037f8:	486d      	ldr	r0, [pc, #436]	; (80039b0 <SDModeChooseSong+0x2a0>)
 80037fa:	f00e fa7d 	bl	8011cf8 <strncpy>
			displayedText[MAX_CHAR_ON_SCREEN] = '\0';  // Null-terminate the string
 80037fe:	4b6c      	ldr	r3, [pc, #432]	; (80039b0 <SDModeChooseSong+0x2a0>)
 8003800:	2200      	movs	r2, #0
 8003802:	74da      	strb	r2, [r3, #19]

			// Display the portion on the LCD
			LCDPrintAtPos(&lcd, displayedText, 1, songNum % MAX_ROW);
 8003804:	4b66      	ldr	r3, [pc, #408]	; (80039a0 <SDModeChooseSong+0x290>)
 8003806:	781b      	ldrb	r3, [r3, #0]
 8003808:	f003 0303 	and.w	r3, r3, #3
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2201      	movs	r2, #1
 8003810:	4967      	ldr	r1, [pc, #412]	; (80039b0 <SDModeChooseSong+0x2a0>)
 8003812:	4862      	ldr	r0, [pc, #392]	; (800399c <SDModeChooseSong+0x28c>)
 8003814:	f7fd fdb4 	bl	8001380 <LCDPrintAtPos>

			// Increment the scroll position and wrap around
			scrollPosition++;
 8003818:	4b68      	ldr	r3, [pc, #416]	; (80039bc <SDModeChooseSong+0x2ac>)
 800381a:	781b      	ldrb	r3, [r3, #0]
 800381c:	3301      	adds	r3, #1
 800381e:	b2da      	uxtb	r2, r3
 8003820:	4b66      	ldr	r3, [pc, #408]	; (80039bc <SDModeChooseSong+0x2ac>)
 8003822:	701a      	strb	r2, [r3, #0]
			if (scrollPosition > strlen(fileNames[songNum]) - MAX_CHAR_ON_SCREEN)
 8003824:	4b65      	ldr	r3, [pc, #404]	; (80039bc <SDModeChooseSong+0x2ac>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	461c      	mov	r4, r3
 800382a:	4b5d      	ldr	r3, [pc, #372]	; (80039a0 <SDModeChooseSong+0x290>)
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	015b      	lsls	r3, r3, #5
 8003830:	4a5e      	ldr	r2, [pc, #376]	; (80039ac <SDModeChooseSong+0x29c>)
 8003832:	4413      	add	r3, r2
 8003834:	4618      	mov	r0, r3
 8003836:	f7fc fca1 	bl	800017c <strlen>
 800383a:	4603      	mov	r3, r0
 800383c:	3b13      	subs	r3, #19
 800383e:	429c      	cmp	r4, r3
 8003840:	d910      	bls.n	8003864 <SDModeChooseSong+0x154>
				scrollPosition = 0;
 8003842:	4b5e      	ldr	r3, [pc, #376]	; (80039bc <SDModeChooseSong+0x2ac>)
 8003844:	2200      	movs	r2, #0
 8003846:	701a      	strb	r2, [r3, #0]
 8003848:	e00c      	b.n	8003864 <SDModeChooseSong+0x154>
		}
		else{
			if((HAL_GetTick() - timeForScroll) > 750){
 800384a:	f000 ffe9 	bl	8004820 <HAL_GetTick>
 800384e:	4602      	mov	r2, r0
 8003850:	4b59      	ldr	r3, [pc, #356]	; (80039b8 <SDModeChooseSong+0x2a8>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	1ad3      	subs	r3, r2, r3
 8003856:	f240 22ee 	movw	r2, #750	; 0x2ee
 800385a:	4293      	cmp	r3, r2
 800385c:	d902      	bls.n	8003864 <SDModeChooseSong+0x154>
				updateTimeScroll = true;
 800385e:	4b55      	ldr	r3, [pc, #340]	; (80039b4 <SDModeChooseSong+0x2a4>)
 8003860:	2201      	movs	r2, #1
 8003862:	701a      	strb	r2, [r3, #0]
		}
		//end nonblocking delay
	}

	// Scrolling up and down to choose the song
	if(rotaryVal != prevRotaryVal){
 8003864:	4b56      	ldr	r3, [pc, #344]	; (80039c0 <SDModeChooseSong+0x2b0>)
 8003866:	f9b3 2000 	ldrsh.w	r2, [r3]
 800386a:	4b56      	ldr	r3, [pc, #344]	; (80039c4 <SDModeChooseSong+0x2b4>)
 800386c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003870:	429a      	cmp	r2, r3
 8003872:	f000 80d8 	beq.w	8003a26 <SDModeChooseSong+0x316>
		LCDPrintAtPos(&lcd, " ", 0, songNum % MAX_ROW);
 8003876:	4b4a      	ldr	r3, [pc, #296]	; (80039a0 <SDModeChooseSong+0x290>)
 8003878:	781b      	ldrb	r3, [r3, #0]
 800387a:	f003 0303 	and.w	r3, r3, #3
 800387e:	b2db      	uxtb	r3, r3
 8003880:	2200      	movs	r2, #0
 8003882:	4951      	ldr	r1, [pc, #324]	; (80039c8 <SDModeChooseSong+0x2b8>)
 8003884:	4845      	ldr	r0, [pc, #276]	; (800399c <SDModeChooseSong+0x28c>)
 8003886:	f7fd fd7b 	bl	8001380 <LCDPrintAtPos>

		//Move down
		if (rotaryVal > prevRotaryVal)
 800388a:	4b4d      	ldr	r3, [pc, #308]	; (80039c0 <SDModeChooseSong+0x2b0>)
 800388c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003890:	4b4c      	ldr	r3, [pc, #304]	; (80039c4 <SDModeChooseSong+0x2b4>)
 8003892:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003896:	429a      	cmp	r2, r3
 8003898:	dd41      	ble.n	800391e <SDModeChooseSong+0x20e>
		{
			//We need to go to a new page, so display need to refresh
			if (songNum % MAX_ROW == MAX_ROW-1) printed = false;
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <SDModeChooseSong+0x290>)
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	f003 0303 	and.w	r3, r3, #3
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	2b03      	cmp	r3, #3
 80038a6:	d103      	bne.n	80038b0 <SDModeChooseSong+0x1a0>
 80038a8:	4b3b      	ldr	r3, [pc, #236]	; (8003998 <SDModeChooseSong+0x288>)
 80038aa:	2200      	movs	r2, #0
 80038ac:	701a      	strb	r2, [r3, #0]
 80038ae:	e021      	b.n	80038f4 <SDModeChooseSong+0x1e4>

			// If the previous song had the scroll effect, we make the screen
			// display what it can
			else {
				if (strlen(fileNames[songNum]) > MAX_CHAR_ON_SCREEN) {
 80038b0:	4b3b      	ldr	r3, [pc, #236]	; (80039a0 <SDModeChooseSong+0x290>)
 80038b2:	781b      	ldrb	r3, [r3, #0]
 80038b4:	015b      	lsls	r3, r3, #5
 80038b6:	4a3d      	ldr	r2, [pc, #244]	; (80039ac <SDModeChooseSong+0x29c>)
 80038b8:	4413      	add	r3, r2
 80038ba:	4618      	mov	r0, r3
 80038bc:	f7fc fc5e 	bl	800017c <strlen>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b13      	cmp	r3, #19
 80038c4:	d916      	bls.n	80038f4 <SDModeChooseSong+0x1e4>
					strncpy(displayedText, &fileNames[songNum][0], MAX_CHAR_ON_SCREEN);
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <SDModeChooseSong+0x290>)
 80038c8:	781b      	ldrb	r3, [r3, #0]
 80038ca:	015b      	lsls	r3, r3, #5
 80038cc:	4a37      	ldr	r2, [pc, #220]	; (80039ac <SDModeChooseSong+0x29c>)
 80038ce:	4413      	add	r3, r2
 80038d0:	2213      	movs	r2, #19
 80038d2:	4619      	mov	r1, r3
 80038d4:	4836      	ldr	r0, [pc, #216]	; (80039b0 <SDModeChooseSong+0x2a0>)
 80038d6:	f00e fa0f 	bl	8011cf8 <strncpy>
					displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 80038da:	4b35      	ldr	r3, [pc, #212]	; (80039b0 <SDModeChooseSong+0x2a0>)
 80038dc:	2200      	movs	r2, #0
 80038de:	74da      	strb	r2, [r3, #19]
					LCDPrintAtPos(&lcd, displayedText, 1, songNum % MAX_ROW);
 80038e0:	4b2f      	ldr	r3, [pc, #188]	; (80039a0 <SDModeChooseSong+0x290>)
 80038e2:	781b      	ldrb	r3, [r3, #0]
 80038e4:	f003 0303 	and.w	r3, r3, #3
 80038e8:	b2db      	uxtb	r3, r3
 80038ea:	2201      	movs	r2, #1
 80038ec:	4930      	ldr	r1, [pc, #192]	; (80039b0 <SDModeChooseSong+0x2a0>)
 80038ee:	482b      	ldr	r0, [pc, #172]	; (800399c <SDModeChooseSong+0x28c>)
 80038f0:	f7fd fd46 	bl	8001380 <LCDPrintAtPos>
				}
			}

			if (songNum == fileCount) {
 80038f4:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <SDModeChooseSong+0x290>)
 80038f6:	781b      	ldrb	r3, [r3, #0]
 80038f8:	461a      	mov	r2, r3
 80038fa:	4b2b      	ldr	r3, [pc, #172]	; (80039a8 <SDModeChooseSong+0x298>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d106      	bne.n	8003910 <SDModeChooseSong+0x200>
				songNum = 0;
 8003902:	4b27      	ldr	r3, [pc, #156]	; (80039a0 <SDModeChooseSong+0x290>)
 8003904:	2200      	movs	r2, #0
 8003906:	701a      	strb	r2, [r3, #0]
				printed = false;
 8003908:	4b23      	ldr	r3, [pc, #140]	; (8003998 <SDModeChooseSong+0x288>)
 800390a:	2200      	movs	r2, #0
 800390c:	701a      	strb	r2, [r3, #0]
 800390e:	e071      	b.n	80039f4 <SDModeChooseSong+0x2e4>
			}
			else {
				songNum ++;
 8003910:	4b23      	ldr	r3, [pc, #140]	; (80039a0 <SDModeChooseSong+0x290>)
 8003912:	781b      	ldrb	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	b2da      	uxtb	r2, r3
 8003918:	4b21      	ldr	r3, [pc, #132]	; (80039a0 <SDModeChooseSong+0x290>)
 800391a:	701a      	strb	r2, [r3, #0]
 800391c:	e06a      	b.n	80039f4 <SDModeChooseSong+0x2e4>
		}

		//Move up
		else{
			//We need to go to a new page, so display need to refresh
			if (songNum % MAX_ROW == 0) {
 800391e:	4b20      	ldr	r3, [pc, #128]	; (80039a0 <SDModeChooseSong+0x290>)
 8003920:	781b      	ldrb	r3, [r3, #0]
 8003922:	f003 0303 	and.w	r3, r3, #3
 8003926:	b2db      	uxtb	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d103      	bne.n	8003934 <SDModeChooseSong+0x224>
				printed = false;
 800392c:	4b1a      	ldr	r3, [pc, #104]	; (8003998 <SDModeChooseSong+0x288>)
 800392e:	2200      	movs	r2, #0
 8003930:	701a      	strb	r2, [r3, #0]
 8003932:	e021      	b.n	8003978 <SDModeChooseSong+0x268>
			}

			// If the previous song had the scroll effect, we make the screen
			// display what it can
			else {
				if (strlen(fileNames[songNum]) > MAX_CHAR_ON_SCREEN) {
 8003934:	4b1a      	ldr	r3, [pc, #104]	; (80039a0 <SDModeChooseSong+0x290>)
 8003936:	781b      	ldrb	r3, [r3, #0]
 8003938:	015b      	lsls	r3, r3, #5
 800393a:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <SDModeChooseSong+0x29c>)
 800393c:	4413      	add	r3, r2
 800393e:	4618      	mov	r0, r3
 8003940:	f7fc fc1c 	bl	800017c <strlen>
 8003944:	4603      	mov	r3, r0
 8003946:	2b13      	cmp	r3, #19
 8003948:	d916      	bls.n	8003978 <SDModeChooseSong+0x268>
					strncpy(displayedText, &fileNames[songNum][0], MAX_CHAR_ON_SCREEN);
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <SDModeChooseSong+0x290>)
 800394c:	781b      	ldrb	r3, [r3, #0]
 800394e:	015b      	lsls	r3, r3, #5
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <SDModeChooseSong+0x29c>)
 8003952:	4413      	add	r3, r2
 8003954:	2213      	movs	r2, #19
 8003956:	4619      	mov	r1, r3
 8003958:	4815      	ldr	r0, [pc, #84]	; (80039b0 <SDModeChooseSong+0x2a0>)
 800395a:	f00e f9cd 	bl	8011cf8 <strncpy>
					displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 800395e:	4b14      	ldr	r3, [pc, #80]	; (80039b0 <SDModeChooseSong+0x2a0>)
 8003960:	2200      	movs	r2, #0
 8003962:	74da      	strb	r2, [r3, #19]
					LCDPrintAtPos(&lcd, displayedText,1, songNum % MAX_ROW);
 8003964:	4b0e      	ldr	r3, [pc, #56]	; (80039a0 <SDModeChooseSong+0x290>)
 8003966:	781b      	ldrb	r3, [r3, #0]
 8003968:	f003 0303 	and.w	r3, r3, #3
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2201      	movs	r2, #1
 8003970:	490f      	ldr	r1, [pc, #60]	; (80039b0 <SDModeChooseSong+0x2a0>)
 8003972:	480a      	ldr	r0, [pc, #40]	; (800399c <SDModeChooseSong+0x28c>)
 8003974:	f7fd fd04 	bl	8001380 <LCDPrintAtPos>
				}
			}

			if (songNum == 0) {
 8003978:	4b09      	ldr	r3, [pc, #36]	; (80039a0 <SDModeChooseSong+0x290>)
 800397a:	781b      	ldrb	r3, [r3, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d125      	bne.n	80039cc <SDModeChooseSong+0x2bc>
				songNum = (int)(fileCount / MAX_ROW) * MAX_ROW;
 8003980:	4b09      	ldr	r3, [pc, #36]	; (80039a8 <SDModeChooseSong+0x298>)
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2b00      	cmp	r3, #0
 8003986:	da00      	bge.n	800398a <SDModeChooseSong+0x27a>
 8003988:	3303      	adds	r3, #3
 800398a:	109b      	asrs	r3, r3, #2
 800398c:	b2db      	uxtb	r3, r3
 800398e:	009b      	lsls	r3, r3, #2
 8003990:	b2da      	uxtb	r2, r3
 8003992:	4b03      	ldr	r3, [pc, #12]	; (80039a0 <SDModeChooseSong+0x290>)
 8003994:	701a      	strb	r2, [r3, #0]
 8003996:	e02d      	b.n	80039f4 <SDModeChooseSong+0x2e4>
 8003998:	20000c2c 	.word	0x20000c2c
 800399c:	200005e4 	.word	0x200005e4
 80039a0:	20000c29 	.word	0x20000c29
 80039a4:	08012688 	.word	0x08012688
 80039a8:	20000c38 	.word	0x20000c38
 80039ac:	20000c3c 	.word	0x20000c3c
 80039b0:	20000ebc 	.word	0x20000ebc
 80039b4:	20000083 	.word	0x20000083
 80039b8:	20000c34 	.word	0x20000c34
 80039bc:	20000c2d 	.word	0x20000c2d
 80039c0:	20000648 	.word	0x20000648
 80039c4:	2000064a 	.word	0x2000064a
 80039c8:	080126a8 	.word	0x080126a8
			}
			else if (songNum % MAX_ROW == 0) {
 80039cc:	4b28      	ldr	r3, [pc, #160]	; (8003a70 <SDModeChooseSong+0x360>)
 80039ce:	781b      	ldrb	r3, [r3, #0]
 80039d0:	f003 0303 	and.w	r3, r3, #3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d106      	bne.n	80039e8 <SDModeChooseSong+0x2d8>
				songNum -= MAX_ROW;
 80039da:	4b25      	ldr	r3, [pc, #148]	; (8003a70 <SDModeChooseSong+0x360>)
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	3b04      	subs	r3, #4
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	4b23      	ldr	r3, [pc, #140]	; (8003a70 <SDModeChooseSong+0x360>)
 80039e4:	701a      	strb	r2, [r3, #0]
 80039e6:	e005      	b.n	80039f4 <SDModeChooseSong+0x2e4>
			}
			else {
				songNum --;
 80039e8:	4b21      	ldr	r3, [pc, #132]	; (8003a70 <SDModeChooseSong+0x360>)
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	b2da      	uxtb	r2, r3
 80039f0:	4b1f      	ldr	r3, [pc, #124]	; (8003a70 <SDModeChooseSong+0x360>)
 80039f2:	701a      	strb	r2, [r3, #0]
			}
		}

		LCDPrintAtPos(&lcd, ">", 0, songNum % MAX_ROW);
 80039f4:	4b1e      	ldr	r3, [pc, #120]	; (8003a70 <SDModeChooseSong+0x360>)
 80039f6:	781b      	ldrb	r3, [r3, #0]
 80039f8:	f003 0303 	and.w	r3, r3, #3
 80039fc:	b2db      	uxtb	r3, r3
 80039fe:	2200      	movs	r2, #0
 8003a00:	491c      	ldr	r1, [pc, #112]	; (8003a74 <SDModeChooseSong+0x364>)
 8003a02:	481d      	ldr	r0, [pc, #116]	; (8003a78 <SDModeChooseSong+0x368>)
 8003a04:	f7fd fcbc 	bl	8001380 <LCDPrintAtPos>
		setCursor(&lcd, 0, songNum % MAX_ROW);
 8003a08:	4b19      	ldr	r3, [pc, #100]	; (8003a70 <SDModeChooseSong+0x360>)
 8003a0a:	781b      	ldrb	r3, [r3, #0]
 8003a0c:	f003 0303 	and.w	r3, r3, #3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	461a      	mov	r2, r3
 8003a14:	2100      	movs	r1, #0
 8003a16:	4818      	ldr	r0, [pc, #96]	; (8003a78 <SDModeChooseSong+0x368>)
 8003a18:	f7fd fc02 	bl	8001220 <setCursor>
		prevRotaryVal =  rotaryVal;
 8003a1c:	4b17      	ldr	r3, [pc, #92]	; (8003a7c <SDModeChooseSong+0x36c>)
 8003a1e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8003a22:	4b17      	ldr	r3, [pc, #92]	; (8003a80 <SDModeChooseSong+0x370>)
 8003a24:	801a      	strh	r2, [r3, #0]
	}

	// Song selected, either a song or "BACK" button
	if (buttonPushed) {
 8003a26:	4b17      	ldr	r3, [pc, #92]	; (8003a84 <SDModeChooseSong+0x374>)
 8003a28:	781b      	ldrb	r3, [r3, #0]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01c      	beq.n	8003a68 <SDModeChooseSong+0x358>
		buttonPushed = false;
 8003a2e:	4b15      	ldr	r3, [pc, #84]	; (8003a84 <SDModeChooseSong+0x374>)
 8003a30:	2200      	movs	r2, #0
 8003a32:	701a      	strb	r2, [r3, #0]
		printed = false;
 8003a34:	4b14      	ldr	r3, [pc, #80]	; (8003a88 <SDModeChooseSong+0x378>)
 8003a36:	2200      	movs	r2, #0
 8003a38:	701a      	strb	r2, [r3, #0]
		clearDisplay(&lcd);
 8003a3a:	480f      	ldr	r0, [pc, #60]	; (8003a78 <SDModeChooseSong+0x368>)
 8003a3c:	f7fd fcd7 	bl	80013ee <clearDisplay>

		if (songNum == fileCount) {
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <SDModeChooseSong+0x360>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	461a      	mov	r2, r3
 8003a46:	4b11      	ldr	r3, [pc, #68]	; (8003a8c <SDModeChooseSong+0x37c>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d109      	bne.n	8003a62 <SDModeChooseSong+0x352>
			isDirOpen = false;
 8003a4e:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <SDModeChooseSong+0x380>)
 8003a50:	2200      	movs	r2, #0
 8003a52:	701a      	strb	r2, [r3, #0]
			f_closedir(&dir);
 8003a54:	480f      	ldr	r0, [pc, #60]	; (8003a94 <SDModeChooseSong+0x384>)
 8003a56:	f00d faf3 	bl	8011040 <f_closedir>
			state = MODE_SELECT;
 8003a5a:	4b0f      	ldr	r3, [pc, #60]	; (8003a98 <SDModeChooseSong+0x388>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	701a      	strb	r2, [r3, #0]
		}
		else {
			isPlaying = true;
		}
	}
}
 8003a60:	e002      	b.n	8003a68 <SDModeChooseSong+0x358>
			isPlaying = true;
 8003a62:	4b0e      	ldr	r3, [pc, #56]	; (8003a9c <SDModeChooseSong+0x38c>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	701a      	strb	r2, [r3, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bd90      	pop	{r4, r7, pc}
 8003a70:	20000c29 	.word	0x20000c29
 8003a74:	08012688 	.word	0x08012688
 8003a78:	200005e4 	.word	0x200005e4
 8003a7c:	20000648 	.word	0x20000648
 8003a80:	2000064a 	.word	0x2000064a
 8003a84:	20000650 	.word	0x20000650
 8003a88:	20000c2c 	.word	0x20000c2c
 8003a8c:	20000c38 	.word	0x20000c38
 8003a90:	20000c2a 	.word	0x20000c2a
 8003a94:	20000bd4 	.word	0x20000bd4
 8003a98:	20000c28 	.word	0x20000c28
 8003a9c:	20000c2b 	.word	0x20000c2b

08003aa0 <SDDealWithScreen>:

void SDDealWithScreen(){
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af02      	add	r7, sp, #8
	//Print song information, instruction to return, and volume
	if (!printed) {
 8003aa6:	4b2e      	ldr	r3, [pc, #184]	; (8003b60 <SDDealWithScreen+0xc0>)
 8003aa8:	781b      	ldrb	r3, [r3, #0]
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d13c      	bne.n	8003b28 <SDDealWithScreen+0x88>
		LCDPrintAtPos(&lcd, "Playing...", 0, 0);
 8003aae:	2300      	movs	r3, #0
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	492c      	ldr	r1, [pc, #176]	; (8003b64 <SDDealWithScreen+0xc4>)
 8003ab4:	482c      	ldr	r0, [pc, #176]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003ab6:	f7fd fc63 	bl	8001380 <LCDPrintAtPos>
		strncpy(displayedText, &fileNames[songNum][0], MAX_CHAR_ON_SCREEN);
 8003aba:	4b2c      	ldr	r3, [pc, #176]	; (8003b6c <SDDealWithScreen+0xcc>)
 8003abc:	781b      	ldrb	r3, [r3, #0]
 8003abe:	015b      	lsls	r3, r3, #5
 8003ac0:	4a2b      	ldr	r2, [pc, #172]	; (8003b70 <SDDealWithScreen+0xd0>)
 8003ac2:	4413      	add	r3, r2
 8003ac4:	2213      	movs	r2, #19
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	482a      	ldr	r0, [pc, #168]	; (8003b74 <SDDealWithScreen+0xd4>)
 8003aca:	f00e f915 	bl	8011cf8 <strncpy>
		displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 8003ace:	4b29      	ldr	r3, [pc, #164]	; (8003b74 <SDDealWithScreen+0xd4>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	74da      	strb	r2, [r3, #19]
		LCDPrintAtPos(&lcd, displayedText, 1, 1);
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	2201      	movs	r2, #1
 8003ad8:	4926      	ldr	r1, [pc, #152]	; (8003b74 <SDDealWithScreen+0xd4>)
 8003ada:	4823      	ldr	r0, [pc, #140]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003adc:	f7fd fc50 	bl	8001380 <LCDPrintAtPos>
		LCDPrintAtPos(&lcd, "Click to return", 0, 2);
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	4924      	ldr	r1, [pc, #144]	; (8003b78 <SDDealWithScreen+0xd8>)
 8003ae6:	4820      	ldr	r0, [pc, #128]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003ae8:	f7fd fc4a 	bl	8001380 <LCDPrintAtPos>
		LCDPrintAtPos(&lcd, "Ontime/Vol:", 0, 3);
 8003aec:	2303      	movs	r3, #3
 8003aee:	2200      	movs	r2, #0
 8003af0:	4922      	ldr	r1, [pc, #136]	; (8003b7c <SDDealWithScreen+0xdc>)
 8003af2:	481d      	ldr	r0, [pc, #116]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003af4:	f7fd fc44 	bl	8001380 <LCDPrintAtPos>
		LCDPrintAtPos(&lcd, "us", 14, 3);
 8003af8:	2303      	movs	r3, #3
 8003afa:	220e      	movs	r2, #14
 8003afc:	4920      	ldr	r1, [pc, #128]	; (8003b80 <SDDealWithScreen+0xe0>)
 8003afe:	481a      	ldr	r0, [pc, #104]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003b00:	f7fd fc3e 	bl	8001380 <LCDPrintAtPos>
		LCDPrintNumber(&lcd, onTime, 11, 3, 3);
 8003b04:	4b1f      	ldr	r3, [pc, #124]	; (8003b84 <SDDealWithScreen+0xe4>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	b299      	uxth	r1, r3
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	2303      	movs	r3, #3
 8003b10:	220b      	movs	r2, #11
 8003b12:	4815      	ldr	r0, [pc, #84]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003b14:	f7fd fbec 	bl	80012f0 <LCDPrintNumber>
		setCursor(&lcd, 16, 3);
 8003b18:	2203      	movs	r2, #3
 8003b1a:	2110      	movs	r1, #16
 8003b1c:	4812      	ldr	r0, [pc, #72]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003b1e:	f7fd fb7f 	bl	8001220 <setCursor>
		printed = true;
 8003b22:	4b0f      	ldr	r3, [pc, #60]	; (8003b60 <SDDealWithScreen+0xc0>)
 8003b24:	2201      	movs	r2, #1
 8003b26:	701a      	strb	r2, [r3, #0]
	}
	if(onTime != prevOnTime){
 8003b28:	4b16      	ldr	r3, [pc, #88]	; (8003b84 <SDDealWithScreen+0xe4>)
 8003b2a:	781a      	ldrb	r2, [r3, #0]
 8003b2c:	4b16      	ldr	r3, [pc, #88]	; (8003b88 <SDDealWithScreen+0xe8>)
 8003b2e:	781b      	ldrb	r3, [r3, #0]
 8003b30:	429a      	cmp	r2, r3
 8003b32:	d012      	beq.n	8003b5a <SDDealWithScreen+0xba>
		prevOnTime = onTime;
 8003b34:	4b13      	ldr	r3, [pc, #76]	; (8003b84 <SDDealWithScreen+0xe4>)
 8003b36:	781a      	ldrb	r2, [r3, #0]
 8003b38:	4b13      	ldr	r3, [pc, #76]	; (8003b88 <SDDealWithScreen+0xe8>)
 8003b3a:	701a      	strb	r2, [r3, #0]
		LCDPrintNumber(&lcd, onTime, 11, 3, 3);
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <SDDealWithScreen+0xe4>)
 8003b3e:	781b      	ldrb	r3, [r3, #0]
 8003b40:	b299      	uxth	r1, r3
 8003b42:	2303      	movs	r3, #3
 8003b44:	9300      	str	r3, [sp, #0]
 8003b46:	2303      	movs	r3, #3
 8003b48:	220b      	movs	r2, #11
 8003b4a:	4807      	ldr	r0, [pc, #28]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003b4c:	f7fd fbd0 	bl	80012f0 <LCDPrintNumber>
		setCursor(&lcd, 16, 3);
 8003b50:	2203      	movs	r2, #3
 8003b52:	2110      	movs	r1, #16
 8003b54:	4804      	ldr	r0, [pc, #16]	; (8003b68 <SDDealWithScreen+0xc8>)
 8003b56:	f7fd fb63 	bl	8001220 <setCursor>
	}
}
 8003b5a:	bf00      	nop
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	bd80      	pop	{r7, pc}
 8003b60:	20000c2c 	.word	0x20000c2c
 8003b64:	080126f0 	.word	0x080126f0
 8003b68:	200005e4 	.word	0x200005e4
 8003b6c:	20000c29 	.word	0x20000c29
 8003b70:	20000c3c 	.word	0x20000c3c
 8003b74:	20000ebc 	.word	0x20000ebc
 8003b78:	080126fc 	.word	0x080126fc
 8003b7c:	0801270c 	.word	0x0801270c
 8003b80:	080126d4 	.word	0x080126d4
 8003b84:	2000064e 	.word	0x2000064e
 8003b88:	2000064f 	.word	0x2000064f

08003b8c <SDMode>:
float velRatio;
uint16_t actualOnTimeSD;

TIM_HandleTypeDef *doThisCoil;

void SDMode(){
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b082      	sub	sp, #8
 8003b90:	af00      	add	r7, sp, #0
	if (!isDirOpen) {
 8003b92:	4b9b      	ldr	r3, [pc, #620]	; (8003e00 <SDMode+0x274>)
 8003b94:	781b      	ldrb	r3, [r3, #0]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d10a      	bne.n	8003bb0 <SDMode+0x24>
		fresult = f_opendir(&dir, "");
 8003b9a:	499a      	ldr	r1, [pc, #616]	; (8003e04 <SDMode+0x278>)
 8003b9c:	489a      	ldr	r0, [pc, #616]	; (8003e08 <SDMode+0x27c>)
 8003b9e:	f00d f9dc 	bl	8010f5a <f_opendir>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	461a      	mov	r2, r3
 8003ba6:	4b99      	ldr	r3, [pc, #612]	; (8003e0c <SDMode+0x280>)
 8003ba8:	701a      	strb	r2, [r3, #0]
		isDirOpen = true;
 8003baa:	4b95      	ldr	r3, [pc, #596]	; (8003e00 <SDMode+0x274>)
 8003bac:	2201      	movs	r2, #1
 8003bae:	701a      	strb	r2, [r3, #0]
	}

	if (!isPlaying) SDModeChooseSong();
 8003bb0:	4b97      	ldr	r3, [pc, #604]	; (8003e10 <SDMode+0x284>)
 8003bb2:	781b      	ldrb	r3, [r3, #0]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d102      	bne.n	8003bbe <SDMode+0x32>
 8003bb8:	f7ff fdaa 	bl	8003710 <SDModeChooseSong>

	}



}
 8003bbc:	e21c      	b.n	8003ff8 <SDMode+0x46c>
		SDDealWithScreen();
 8003bbe:	f7ff ff6f 	bl	8003aa0 <SDDealWithScreen>
		switch(sdModeState){
 8003bc2:	4b94      	ldr	r3, [pc, #592]	; (8003e14 <SDMode+0x288>)
 8003bc4:	781b      	ldrb	r3, [r3, #0]
 8003bc6:	2b04      	cmp	r3, #4
 8003bc8:	f200 81f4 	bhi.w	8003fb4 <SDMode+0x428>
 8003bcc:	a201      	add	r2, pc, #4	; (adr r2, 8003bd4 <SDMode+0x48>)
 8003bce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bd2:	bf00      	nop
 8003bd4:	08003be9 	.word	0x08003be9
 8003bd8:	08003cc5 	.word	0x08003cc5
 8003bdc:	08003d85 	.word	0x08003d85
 8003be0:	08003f15 	.word	0x08003f15
 8003be4:	08003fb1 	.word	0x08003fb1
			f_open(&fil, fileNames[songNum], FA_READ);
 8003be8:	4b8b      	ldr	r3, [pc, #556]	; (8003e18 <SDMode+0x28c>)
 8003bea:	781b      	ldrb	r3, [r3, #0]
 8003bec:	015b      	lsls	r3, r3, #5
 8003bee:	4a8b      	ldr	r2, [pc, #556]	; (8003e1c <SDMode+0x290>)
 8003bf0:	4413      	add	r3, r2
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	4619      	mov	r1, r3
 8003bf6:	488a      	ldr	r0, [pc, #552]	; (8003e20 <SDMode+0x294>)
 8003bf8:	f00c fe0a 	bl	8010810 <f_open>
			fresult = f_read(&fil, &numEventsSplit[0], 2, &bytesRead);
 8003bfc:	4b89      	ldr	r3, [pc, #548]	; (8003e24 <SDMode+0x298>)
 8003bfe:	2202      	movs	r2, #2
 8003c00:	4989      	ldr	r1, [pc, #548]	; (8003e28 <SDMode+0x29c>)
 8003c02:	4887      	ldr	r0, [pc, #540]	; (8003e20 <SDMode+0x294>)
 8003c04:	f00c ffc2 	bl	8010b8c <f_read>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	461a      	mov	r2, r3
 8003c0c:	4b7f      	ldr	r3, [pc, #508]	; (8003e0c <SDMode+0x280>)
 8003c0e:	701a      	strb	r2, [r3, #0]
			if(fresult != FR_OK){
 8003c10:	4b7e      	ldr	r3, [pc, #504]	; (8003e0c <SDMode+0x280>)
 8003c12:	781b      	ldrb	r3, [r3, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <SDMode+0x94>
				sdModeState = SD_READ_ERR;
 8003c18:	4b7e      	ldr	r3, [pc, #504]	; (8003e14 <SDMode+0x288>)
 8003c1a:	2204      	movs	r2, #4
 8003c1c:	701a      	strb	r2, [r3, #0]
				break;
 8003c1e:	e1c9      	b.n	8003fb4 <SDMode+0x428>
			fresult = f_read(&fil, &midiBuf[0], 6, &bytesRead);
 8003c20:	4b80      	ldr	r3, [pc, #512]	; (8003e24 <SDMode+0x298>)
 8003c22:	2206      	movs	r2, #6
 8003c24:	4981      	ldr	r1, [pc, #516]	; (8003e2c <SDMode+0x2a0>)
 8003c26:	487e      	ldr	r0, [pc, #504]	; (8003e20 <SDMode+0x294>)
 8003c28:	f00c ffb0 	bl	8010b8c <f_read>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b76      	ldr	r3, [pc, #472]	; (8003e0c <SDMode+0x280>)
 8003c32:	701a      	strb	r2, [r3, #0]
			if(fresult != FR_OK){
 8003c34:	4b75      	ldr	r3, [pc, #468]	; (8003e0c <SDMode+0x280>)
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d003      	beq.n	8003c44 <SDMode+0xb8>
				sdModeState = SD_READ_ERR;
 8003c3c:	4b75      	ldr	r3, [pc, #468]	; (8003e14 <SDMode+0x288>)
 8003c3e:	2204      	movs	r2, #4
 8003c40:	701a      	strb	r2, [r3, #0]
				break;
 8003c42:	e1b7      	b.n	8003fb4 <SDMode+0x428>
			numEvents = numEventsSplit[0] | (numEventsSplit[1] << 8);
 8003c44:	4b78      	ldr	r3, [pc, #480]	; (8003e28 <SDMode+0x29c>)
 8003c46:	781b      	ldrb	r3, [r3, #0]
 8003c48:	b21a      	sxth	r2, r3
 8003c4a:	4b77      	ldr	r3, [pc, #476]	; (8003e28 <SDMode+0x29c>)
 8003c4c:	785b      	ldrb	r3, [r3, #1]
 8003c4e:	021b      	lsls	r3, r3, #8
 8003c50:	b21b      	sxth	r3, r3
 8003c52:	4313      	orrs	r3, r2
 8003c54:	b21b      	sxth	r3, r3
 8003c56:	b29a      	uxth	r2, r3
 8003c58:	4b75      	ldr	r3, [pc, #468]	; (8003e30 <SDMode+0x2a4>)
 8003c5a:	801a      	strh	r2, [r3, #0]
			eventCounter++;
 8003c5c:	4b75      	ldr	r3, [pc, #468]	; (8003e34 <SDMode+0x2a8>)
 8003c5e:	881b      	ldrh	r3, [r3, #0]
 8003c60:	3301      	adds	r3, #1
 8003c62:	b29a      	uxth	r2, r3
 8003c64:	4b73      	ldr	r3, [pc, #460]	; (8003e34 <SDMode+0x2a8>)
 8003c66:	801a      	strh	r2, [r3, #0]
			nextEvent.timeOfEvent = (midiBuf[1]) | (midiBuf[2]<<8) | (midiBuf[3]<<16);
 8003c68:	4b70      	ldr	r3, [pc, #448]	; (8003e2c <SDMode+0x2a0>)
 8003c6a:	785b      	ldrb	r3, [r3, #1]
 8003c6c:	461a      	mov	r2, r3
 8003c6e:	4b6f      	ldr	r3, [pc, #444]	; (8003e2c <SDMode+0x2a0>)
 8003c70:	789b      	ldrb	r3, [r3, #2]
 8003c72:	021b      	lsls	r3, r3, #8
 8003c74:	431a      	orrs	r2, r3
 8003c76:	4b6d      	ldr	r3, [pc, #436]	; (8003e2c <SDMode+0x2a0>)
 8003c78:	78db      	ldrb	r3, [r3, #3]
 8003c7a:	041b      	lsls	r3, r3, #16
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	461a      	mov	r2, r3
 8003c80:	4b6d      	ldr	r3, [pc, #436]	; (8003e38 <SDMode+0x2ac>)
 8003c82:	601a      	str	r2, [r3, #0]
			nextEvent.noteNum = midiBuf[4];
 8003c84:	4b69      	ldr	r3, [pc, #420]	; (8003e2c <SDMode+0x2a0>)
 8003c86:	791a      	ldrb	r2, [r3, #4]
 8003c88:	4b6b      	ldr	r3, [pc, #428]	; (8003e38 <SDMode+0x2ac>)
 8003c8a:	725a      	strb	r2, [r3, #9]
			nextEvent.frequency = noteFreq[midiBuf[4]-12];
 8003c8c:	4b67      	ldr	r3, [pc, #412]	; (8003e2c <SDMode+0x2a0>)
 8003c8e:	791b      	ldrb	r3, [r3, #4]
 8003c90:	3b0c      	subs	r3, #12
 8003c92:	4a6a      	ldr	r2, [pc, #424]	; (8003e3c <SDMode+0x2b0>)
 8003c94:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003c98:	4b67      	ldr	r3, [pc, #412]	; (8003e38 <SDMode+0x2ac>)
 8003c9a:	815a      	strh	r2, [r3, #10]
			nextEvent.track = midiBuf[0];
 8003c9c:	4b63      	ldr	r3, [pc, #396]	; (8003e2c <SDMode+0x2a0>)
 8003c9e:	781a      	ldrb	r2, [r3, #0]
 8003ca0:	4b65      	ldr	r3, [pc, #404]	; (8003e38 <SDMode+0x2ac>)
 8003ca2:	721a      	strb	r2, [r3, #8]
			nextEvent.velocity = midiBuf[5];
 8003ca4:	4b61      	ldr	r3, [pc, #388]	; (8003e2c <SDMode+0x2a0>)
 8003ca6:	795a      	ldrb	r2, [r3, #5]
 8003ca8:	4b63      	ldr	r3, [pc, #396]	; (8003e38 <SDMode+0x2ac>)
 8003caa:	741a      	strb	r2, [r3, #16]
			HAL_Delay(1000);
 8003cac:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003cb0:	f000 fdc0 	bl	8004834 <HAL_Delay>
			sdModeState = SD_CALC_NEXT;
 8003cb4:	4b57      	ldr	r3, [pc, #348]	; (8003e14 <SDMode+0x288>)
 8003cb6:	2202      	movs	r2, #2
 8003cb8:	701a      	strb	r2, [r3, #0]
			timeStarted = time;
 8003cba:	4b61      	ldr	r3, [pc, #388]	; (8003e40 <SDMode+0x2b4>)
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a61      	ldr	r2, [pc, #388]	; (8003e44 <SDMode+0x2b8>)
 8003cc0:	6013      	str	r3, [r2, #0]
			break;
 8003cc2:	e177      	b.n	8003fb4 <SDMode+0x428>
			if (eventCounter < numEvents){
 8003cc4:	4b5b      	ldr	r3, [pc, #364]	; (8003e34 <SDMode+0x2a8>)
 8003cc6:	881a      	ldrh	r2, [r3, #0]
 8003cc8:	4b59      	ldr	r3, [pc, #356]	; (8003e30 <SDMode+0x2a4>)
 8003cca:	881b      	ldrh	r3, [r3, #0]
 8003ccc:	429a      	cmp	r2, r3
 8003cce:	d23d      	bcs.n	8003d4c <SDMode+0x1c0>
				fresult = f_read(&fil, &midiBuf[0], 6, &bytesRead);
 8003cd0:	4b54      	ldr	r3, [pc, #336]	; (8003e24 <SDMode+0x298>)
 8003cd2:	2206      	movs	r2, #6
 8003cd4:	4955      	ldr	r1, [pc, #340]	; (8003e2c <SDMode+0x2a0>)
 8003cd6:	4852      	ldr	r0, [pc, #328]	; (8003e20 <SDMode+0x294>)
 8003cd8:	f00c ff58 	bl	8010b8c <f_read>
 8003cdc:	4603      	mov	r3, r0
 8003cde:	461a      	mov	r2, r3
 8003ce0:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <SDMode+0x280>)
 8003ce2:	701a      	strb	r2, [r3, #0]
				if(fresult != FR_OK){
 8003ce4:	4b49      	ldr	r3, [pc, #292]	; (8003e0c <SDMode+0x280>)
 8003ce6:	781b      	ldrb	r3, [r3, #0]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d003      	beq.n	8003cf4 <SDMode+0x168>
					sdModeState = SD_READ_ERR;
 8003cec:	4b49      	ldr	r3, [pc, #292]	; (8003e14 <SDMode+0x288>)
 8003cee:	2204      	movs	r2, #4
 8003cf0:	701a      	strb	r2, [r3, #0]
					break;
 8003cf2:	e15f      	b.n	8003fb4 <SDMode+0x428>
				nextEvent.timeOfEvent = (midiBuf[1]) | (midiBuf[2]<<8) | (midiBuf[3]<<16);
 8003cf4:	4b4d      	ldr	r3, [pc, #308]	; (8003e2c <SDMode+0x2a0>)
 8003cf6:	785b      	ldrb	r3, [r3, #1]
 8003cf8:	461a      	mov	r2, r3
 8003cfa:	4b4c      	ldr	r3, [pc, #304]	; (8003e2c <SDMode+0x2a0>)
 8003cfc:	789b      	ldrb	r3, [r3, #2]
 8003cfe:	021b      	lsls	r3, r3, #8
 8003d00:	431a      	orrs	r2, r3
 8003d02:	4b4a      	ldr	r3, [pc, #296]	; (8003e2c <SDMode+0x2a0>)
 8003d04:	78db      	ldrb	r3, [r3, #3]
 8003d06:	041b      	lsls	r3, r3, #16
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	461a      	mov	r2, r3
 8003d0c:	4b4a      	ldr	r3, [pc, #296]	; (8003e38 <SDMode+0x2ac>)
 8003d0e:	601a      	str	r2, [r3, #0]
				nextEvent.noteNum = midiBuf[4];
 8003d10:	4b46      	ldr	r3, [pc, #280]	; (8003e2c <SDMode+0x2a0>)
 8003d12:	791a      	ldrb	r2, [r3, #4]
 8003d14:	4b48      	ldr	r3, [pc, #288]	; (8003e38 <SDMode+0x2ac>)
 8003d16:	725a      	strb	r2, [r3, #9]
				nextEvent.frequency = noteFreq[midiBuf[4]-12];
 8003d18:	4b44      	ldr	r3, [pc, #272]	; (8003e2c <SDMode+0x2a0>)
 8003d1a:	791b      	ldrb	r3, [r3, #4]
 8003d1c:	3b0c      	subs	r3, #12
 8003d1e:	4a47      	ldr	r2, [pc, #284]	; (8003e3c <SDMode+0x2b0>)
 8003d20:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8003d24:	4b44      	ldr	r3, [pc, #272]	; (8003e38 <SDMode+0x2ac>)
 8003d26:	815a      	strh	r2, [r3, #10]
				nextEvent.track = midiBuf[0];
 8003d28:	4b40      	ldr	r3, [pc, #256]	; (8003e2c <SDMode+0x2a0>)
 8003d2a:	781a      	ldrb	r2, [r3, #0]
 8003d2c:	4b42      	ldr	r3, [pc, #264]	; (8003e38 <SDMode+0x2ac>)
 8003d2e:	721a      	strb	r2, [r3, #8]
				nextEvent.velocity = midiBuf[5];
 8003d30:	4b3e      	ldr	r3, [pc, #248]	; (8003e2c <SDMode+0x2a0>)
 8003d32:	795a      	ldrb	r2, [r3, #5]
 8003d34:	4b40      	ldr	r3, [pc, #256]	; (8003e38 <SDMode+0x2ac>)
 8003d36:	741a      	strb	r2, [r3, #16]
				eventCounter++;
 8003d38:	4b3e      	ldr	r3, [pc, #248]	; (8003e34 <SDMode+0x2a8>)
 8003d3a:	881b      	ldrh	r3, [r3, #0]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	4b3c      	ldr	r3, [pc, #240]	; (8003e34 <SDMode+0x2a8>)
 8003d42:	801a      	strh	r2, [r3, #0]
				sdModeState = SD_CALC_NEXT;
 8003d44:	4b33      	ldr	r3, [pc, #204]	; (8003e14 <SDMode+0x288>)
 8003d46:	2202      	movs	r2, #2
 8003d48:	701a      	strb	r2, [r3, #0]
			break;
 8003d4a:	e133      	b.n	8003fb4 <SDMode+0x428>
				turnOffAllCoils();
 8003d4c:	f7fd fe64 	bl	8001a18 <turnOffAllCoils>
				eventCounter = 0;
 8003d50:	4b38      	ldr	r3, [pc, #224]	; (8003e34 <SDMode+0x2a8>)
 8003d52:	2200      	movs	r2, #0
 8003d54:	801a      	strh	r2, [r3, #0]
				timeStarted = 0;
 8003d56:	4b3b      	ldr	r3, [pc, #236]	; (8003e44 <SDMode+0x2b8>)
 8003d58:	2200      	movs	r2, #0
 8003d5a:	601a      	str	r2, [r3, #0]
				fresult = f_close(&fil);
 8003d5c:	4830      	ldr	r0, [pc, #192]	; (8003e20 <SDMode+0x294>)
 8003d5e:	f00d f8d2 	bl	8010f06 <f_close>
 8003d62:	4603      	mov	r3, r0
 8003d64:	461a      	mov	r2, r3
 8003d66:	4b29      	ldr	r3, [pc, #164]	; (8003e0c <SDMode+0x280>)
 8003d68:	701a      	strb	r2, [r3, #0]
				clearDisplay(&lcd);
 8003d6a:	4837      	ldr	r0, [pc, #220]	; (8003e48 <SDMode+0x2bc>)
 8003d6c:	f7fd fb3f 	bl	80013ee <clearDisplay>
				printed = false;
 8003d70:	4b36      	ldr	r3, [pc, #216]	; (8003e4c <SDMode+0x2c0>)
 8003d72:	2200      	movs	r2, #0
 8003d74:	701a      	strb	r2, [r3, #0]
				isPlaying = false;
 8003d76:	4b26      	ldr	r3, [pc, #152]	; (8003e10 <SDMode+0x284>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
				sdModeState = SD_GET_FIRST;
 8003d7c:	4b25      	ldr	r3, [pc, #148]	; (8003e14 <SDMode+0x288>)
 8003d7e:	2200      	movs	r2, #0
 8003d80:	701a      	strb	r2, [r3, #0]
			break;
 8003d82:	e117      	b.n	8003fb4 <SDMode+0x428>
			actualOnTimeSD = (nextEvent.velocity * onTime) >> 7;
 8003d84:	4b2c      	ldr	r3, [pc, #176]	; (8003e38 <SDMode+0x2ac>)
 8003d86:	7c1b      	ldrb	r3, [r3, #16]
 8003d88:	461a      	mov	r2, r3
 8003d8a:	4b31      	ldr	r3, [pc, #196]	; (8003e50 <SDMode+0x2c4>)
 8003d8c:	781b      	ldrb	r3, [r3, #0]
 8003d8e:	fb02 f303 	mul.w	r3, r2, r3
 8003d92:	11db      	asrs	r3, r3, #7
 8003d94:	b29a      	uxth	r2, r3
 8003d96:	4b2f      	ldr	r3, [pc, #188]	; (8003e54 <SDMode+0x2c8>)
 8003d98:	801a      	strh	r2, [r3, #0]
			if(actualOnTimeSD > MAX_PULSE_WIDTH) actualOnTimeSD = MAX_PULSE_WIDTH;
 8003d9a:	4b2e      	ldr	r3, [pc, #184]	; (8003e54 <SDMode+0x2c8>)
 8003d9c:	881b      	ldrh	r3, [r3, #0]
 8003d9e:	2b7d      	cmp	r3, #125	; 0x7d
 8003da0:	d902      	bls.n	8003da8 <SDMode+0x21c>
 8003da2:	4b2c      	ldr	r3, [pc, #176]	; (8003e54 <SDMode+0x2c8>)
 8003da4:	227d      	movs	r2, #125	; 0x7d
 8003da6:	801a      	strh	r2, [r3, #0]
			if(nextEvent.frequency > MAX_FREQUENCY) nextEvent.frequency = MAX_FREQUENCY;
 8003da8:	4b23      	ldr	r3, [pc, #140]	; (8003e38 <SDMode+0x2ac>)
 8003daa:	895b      	ldrh	r3, [r3, #10]
 8003dac:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d903      	bls.n	8003dbc <SDMode+0x230>
 8003db4:	4b20      	ldr	r3, [pc, #128]	; (8003e38 <SDMode+0x2ac>)
 8003db6:	f240 32b6 	movw	r2, #950	; 0x3b6
 8003dba:	815a      	strh	r2, [r3, #10]
			if(nextEvent.frequency == 1)        nextEvent.prescaler = 512 - 1;
 8003dbc:	4b1e      	ldr	r3, [pc, #120]	; (8003e38 <SDMode+0x2ac>)
 8003dbe:	895b      	ldrh	r3, [r3, #10]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d104      	bne.n	8003dce <SDMode+0x242>
 8003dc4:	4b1c      	ldr	r3, [pc, #112]	; (8003e38 <SDMode+0x2ac>)
 8003dc6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003dca:	819a      	strh	r2, [r3, #12]
 8003dcc:	e070      	b.n	8003eb0 <SDMode+0x324>
			else if(nextEvent.frequency <= 3)   nextEvent.prescaler = 256 - 1;
 8003dce:	4b1a      	ldr	r3, [pc, #104]	; (8003e38 <SDMode+0x2ac>)
 8003dd0:	895b      	ldrh	r3, [r3, #10]
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d803      	bhi.n	8003dde <SDMode+0x252>
 8003dd6:	4b18      	ldr	r3, [pc, #96]	; (8003e38 <SDMode+0x2ac>)
 8003dd8:	22ff      	movs	r2, #255	; 0xff
 8003dda:	819a      	strh	r2, [r3, #12]
 8003ddc:	e068      	b.n	8003eb0 <SDMode+0x324>
			else if(nextEvent.frequency <= 7)   nextEvent.prescaler = 128 - 1;
 8003dde:	4b16      	ldr	r3, [pc, #88]	; (8003e38 <SDMode+0x2ac>)
 8003de0:	895b      	ldrh	r3, [r3, #10]
 8003de2:	2b07      	cmp	r3, #7
 8003de4:	d803      	bhi.n	8003dee <SDMode+0x262>
 8003de6:	4b14      	ldr	r3, [pc, #80]	; (8003e38 <SDMode+0x2ac>)
 8003de8:	227f      	movs	r2, #127	; 0x7f
 8003dea:	819a      	strh	r2, [r3, #12]
 8003dec:	e060      	b.n	8003eb0 <SDMode+0x324>
			else if(nextEvent.frequency <= 15)  nextEvent.prescaler = 64 - 1;
 8003dee:	4b12      	ldr	r3, [pc, #72]	; (8003e38 <SDMode+0x2ac>)
 8003df0:	895b      	ldrh	r3, [r3, #10]
 8003df2:	2b0f      	cmp	r3, #15
 8003df4:	d830      	bhi.n	8003e58 <SDMode+0x2cc>
 8003df6:	4b10      	ldr	r3, [pc, #64]	; (8003e38 <SDMode+0x2ac>)
 8003df8:	223f      	movs	r2, #63	; 0x3f
 8003dfa:	819a      	strh	r2, [r3, #12]
 8003dfc:	e058      	b.n	8003eb0 <SDMode+0x324>
 8003dfe:	bf00      	nop
 8003e00:	20000c2a 	.word	0x20000c2a
 8003e04:	08012654 	.word	0x08012654
 8003e08:	20000bd4 	.word	0x20000bd4
 8003e0c:	20000ab8 	.word	0x20000ab8
 8003e10:	20000c2b 	.word	0x20000c2b
 8003e14:	20000ede 	.word	0x20000ede
 8003e18:	20000c29 	.word	0x20000c29
 8003e1c:	20000c3c 	.word	0x20000c3c
 8003e20:	20000888 	.word	0x20000888
 8003e24:	20000c24 	.word	0x20000c24
 8003e28:	20000c1c 	.word	0x20000c1c
 8003e2c:	20000c14 	.word	0x20000c14
 8003e30:	20000c1e 	.word	0x20000c1e
 8003e34:	20000c20 	.word	0x20000c20
 8003e38:	20000ee0 	.word	0x20000ee0
 8003e3c:	20000000 	.word	0x20000000
 8003e40:	20000c08 	.word	0x20000c08
 8003e44:	20000c0c 	.word	0x20000c0c
 8003e48:	200005e4 	.word	0x200005e4
 8003e4c:	20000c2c 	.word	0x20000c2c
 8003e50:	2000064e 	.word	0x2000064e
 8003e54:	20000ef4 	.word	0x20000ef4
			else if(nextEvent.frequency <= 32)  nextEvent.prescaler = 32 - 1;
 8003e58:	4b69      	ldr	r3, [pc, #420]	; (8004000 <SDMode+0x474>)
 8003e5a:	895b      	ldrh	r3, [r3, #10]
 8003e5c:	2b20      	cmp	r3, #32
 8003e5e:	d803      	bhi.n	8003e68 <SDMode+0x2dc>
 8003e60:	4b67      	ldr	r3, [pc, #412]	; (8004000 <SDMode+0x474>)
 8003e62:	221f      	movs	r2, #31
 8003e64:	819a      	strh	r2, [r3, #12]
 8003e66:	e023      	b.n	8003eb0 <SDMode+0x324>
			else if(nextEvent.frequency <= 63)  nextEvent.prescaler = 16 - 1;
 8003e68:	4b65      	ldr	r3, [pc, #404]	; (8004000 <SDMode+0x474>)
 8003e6a:	895b      	ldrh	r3, [r3, #10]
 8003e6c:	2b3f      	cmp	r3, #63	; 0x3f
 8003e6e:	d803      	bhi.n	8003e78 <SDMode+0x2ec>
 8003e70:	4b63      	ldr	r3, [pc, #396]	; (8004000 <SDMode+0x474>)
 8003e72:	220f      	movs	r2, #15
 8003e74:	819a      	strh	r2, [r3, #12]
 8003e76:	e01b      	b.n	8003eb0 <SDMode+0x324>
			else if(nextEvent.frequency <= 127) nextEvent.prescaler = 8 - 1;
 8003e78:	4b61      	ldr	r3, [pc, #388]	; (8004000 <SDMode+0x474>)
 8003e7a:	895b      	ldrh	r3, [r3, #10]
 8003e7c:	2b7f      	cmp	r3, #127	; 0x7f
 8003e7e:	d803      	bhi.n	8003e88 <SDMode+0x2fc>
 8003e80:	4b5f      	ldr	r3, [pc, #380]	; (8004000 <SDMode+0x474>)
 8003e82:	2207      	movs	r2, #7
 8003e84:	819a      	strh	r2, [r3, #12]
 8003e86:	e013      	b.n	8003eb0 <SDMode+0x324>
			else if(nextEvent.frequency <= 255) nextEvent.prescaler = 4 - 1;
 8003e88:	4b5d      	ldr	r3, [pc, #372]	; (8004000 <SDMode+0x474>)
 8003e8a:	895b      	ldrh	r3, [r3, #10]
 8003e8c:	2bff      	cmp	r3, #255	; 0xff
 8003e8e:	d803      	bhi.n	8003e98 <SDMode+0x30c>
 8003e90:	4b5b      	ldr	r3, [pc, #364]	; (8004000 <SDMode+0x474>)
 8003e92:	2203      	movs	r2, #3
 8003e94:	819a      	strh	r2, [r3, #12]
 8003e96:	e00b      	b.n	8003eb0 <SDMode+0x324>
			else if(nextEvent.frequency <= 511) nextEvent.prescaler = 2 - 1;
 8003e98:	4b59      	ldr	r3, [pc, #356]	; (8004000 <SDMode+0x474>)
 8003e9a:	895b      	ldrh	r3, [r3, #10]
 8003e9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ea0:	d203      	bcs.n	8003eaa <SDMode+0x31e>
 8003ea2:	4b57      	ldr	r3, [pc, #348]	; (8004000 <SDMode+0x474>)
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	819a      	strh	r2, [r3, #12]
 8003ea8:	e002      	b.n	8003eb0 <SDMode+0x324>
			else nextEvent.prescaler = 1 - 1;
 8003eaa:	4b55      	ldr	r3, [pc, #340]	; (8004000 <SDMode+0x474>)
 8003eac:	2200      	movs	r2, #0
 8003eae:	819a      	strh	r2, [r3, #12]
			nextEvent.autoReloadReg = CPU_CLK / ((nextEvent.prescaler+1) * nextEvent.frequency);
 8003eb0:	4b53      	ldr	r3, [pc, #332]	; (8004000 <SDMode+0x474>)
 8003eb2:	899b      	ldrh	r3, [r3, #12]
 8003eb4:	3301      	adds	r3, #1
 8003eb6:	4a52      	ldr	r2, [pc, #328]	; (8004000 <SDMode+0x474>)
 8003eb8:	8952      	ldrh	r2, [r2, #10]
 8003eba:	fb02 f303 	mul.w	r3, r2, r3
 8003ebe:	4a51      	ldr	r2, [pc, #324]	; (8004004 <SDMode+0x478>)
 8003ec0:	fb92 f3f3 	sdiv	r3, r2, r3
 8003ec4:	b29a      	uxth	r2, r3
 8003ec6:	4b4e      	ldr	r3, [pc, #312]	; (8004000 <SDMode+0x474>)
 8003ec8:	81da      	strh	r2, [r3, #14]
			double usPerBit = (double)(nextEvent.prescaler+1) / 32.0; //will get optimized by compiler
 8003eca:	4b4d      	ldr	r3, [pc, #308]	; (8004000 <SDMode+0x474>)
 8003ecc:	899b      	ldrh	r3, [r3, #12]
 8003ece:	3301      	adds	r3, #1
 8003ed0:	4618      	mov	r0, r3
 8003ed2:	f7fc faad 	bl	8000430 <__aeabi_i2d>
 8003ed6:	f04f 0200 	mov.w	r2, #0
 8003eda:	4b4b      	ldr	r3, [pc, #300]	; (8004008 <SDMode+0x47c>)
 8003edc:	f7fc fc3c 	bl	8000758 <__aeabi_ddiv>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	460b      	mov	r3, r1
 8003ee4:	e9c7 2300 	strd	r2, r3, [r7]
			nextEvent.bitsForPWM = (uint32_t)((double)actualOnTimeSD / usPerBit);
 8003ee8:	4b48      	ldr	r3, [pc, #288]	; (800400c <SDMode+0x480>)
 8003eea:	881b      	ldrh	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fc fa8f 	bl	8000410 <__aeabi_ui2d>
 8003ef2:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003ef6:	f7fc fc2f 	bl	8000758 <__aeabi_ddiv>
 8003efa:	4602      	mov	r2, r0
 8003efc:	460b      	mov	r3, r1
 8003efe:	4610      	mov	r0, r2
 8003f00:	4619      	mov	r1, r3
 8003f02:	f7fc fd11 	bl	8000928 <__aeabi_d2uiz>
 8003f06:	4603      	mov	r3, r0
 8003f08:	4a3d      	ldr	r2, [pc, #244]	; (8004000 <SDMode+0x474>)
 8003f0a:	6053      	str	r3, [r2, #4]
			sdModeState = SD_WAIT_NEXT;
 8003f0c:	4b40      	ldr	r3, [pc, #256]	; (8004010 <SDMode+0x484>)
 8003f0e:	2203      	movs	r2, #3
 8003f10:	701a      	strb	r2, [r3, #0]
			break;
 8003f12:	e04f      	b.n	8003fb4 <SDMode+0x428>
			if((HAL_GetTick() - timeStarted > nextEvent.timeOfEvent)){
 8003f14:	f000 fc84 	bl	8004820 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	4b3e      	ldr	r3, [pc, #248]	; (8004014 <SDMode+0x488>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	1ad2      	subs	r2, r2, r3
 8003f20:	4b37      	ldr	r3, [pc, #220]	; (8004000 <SDMode+0x474>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	429a      	cmp	r2, r3
 8003f26:	d944      	bls.n	8003fb2 <SDMode+0x426>
				doThisCoil = findTimForThisCombo(nextEvent.track, nextEvent.frequency, nextEvent.velocity);
 8003f28:	4b35      	ldr	r3, [pc, #212]	; (8004000 <SDMode+0x474>)
 8003f2a:	7a1b      	ldrb	r3, [r3, #8]
 8003f2c:	4a34      	ldr	r2, [pc, #208]	; (8004000 <SDMode+0x474>)
 8003f2e:	8951      	ldrh	r1, [r2, #10]
 8003f30:	4a33      	ldr	r2, [pc, #204]	; (8004000 <SDMode+0x474>)
 8003f32:	7c12      	ldrb	r2, [r2, #16]
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd fc4b 	bl	80017d0 <findTimForThisCombo>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	4a36      	ldr	r2, [pc, #216]	; (8004018 <SDMode+0x48c>)
 8003f3e:	6013      	str	r3, [r2, #0]
				if(nextEvent.velocity > 0){
 8003f40:	4b2f      	ldr	r3, [pc, #188]	; (8004000 <SDMode+0x474>)
 8003f42:	7c1b      	ldrb	r3, [r3, #16]
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d025      	beq.n	8003f94 <SDMode+0x408>
					doThisCoil->Instance->CCR1 = 0;
 8003f48:	4b33      	ldr	r3, [pc, #204]	; (8004018 <SDMode+0x48c>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2200      	movs	r2, #0
 8003f50:	635a      	str	r2, [r3, #52]	; 0x34
					doThisCoil->Instance->CCR2 = 0;
 8003f52:	4b31      	ldr	r3, [pc, #196]	; (8004018 <SDMode+0x48c>)
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	2200      	movs	r2, #0
 8003f5a:	639a      	str	r2, [r3, #56]	; 0x38
  __ASM volatile ("cpsid i" : : : "memory");
 8003f5c:	b672      	cpsid	i
}
 8003f5e:	bf00      	nop
					doThisCoil->Instance->ARR = nextEvent.autoReloadReg;
 8003f60:	4b27      	ldr	r3, [pc, #156]	; (8004000 <SDMode+0x474>)
 8003f62:	89da      	ldrh	r2, [r3, #14]
 8003f64:	4b2c      	ldr	r3, [pc, #176]	; (8004018 <SDMode+0x48c>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	62da      	str	r2, [r3, #44]	; 0x2c
					doThisCoil->Instance->PSC = nextEvent.prescaler;
 8003f6c:	4b24      	ldr	r3, [pc, #144]	; (8004000 <SDMode+0x474>)
 8003f6e:	899a      	ldrh	r2, [r3, #12]
 8003f70:	4b29      	ldr	r3, [pc, #164]	; (8004018 <SDMode+0x48c>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	629a      	str	r2, [r3, #40]	; 0x28
					doThisCoil->Instance->CCR1 = nextEvent.bitsForPWM;
 8003f78:	4b27      	ldr	r3, [pc, #156]	; (8004018 <SDMode+0x48c>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a20      	ldr	r2, [pc, #128]	; (8004000 <SDMode+0x474>)
 8003f80:	6852      	ldr	r2, [r2, #4]
 8003f82:	635a      	str	r2, [r3, #52]	; 0x34
					doThisCoil->Instance->CCR2 = nextEvent.bitsForPWM;
 8003f84:	4b24      	ldr	r3, [pc, #144]	; (8004018 <SDMode+0x48c>)
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <SDMode+0x474>)
 8003f8c:	6852      	ldr	r2, [r2, #4]
 8003f8e:	639a      	str	r2, [r3, #56]	; 0x38
  __ASM volatile ("cpsie i" : : : "memory");
 8003f90:	b662      	cpsie	i
}
 8003f92:	e009      	b.n	8003fa8 <SDMode+0x41c>
					doThisCoil->Instance->CCR1 = 0;
 8003f94:	4b20      	ldr	r3, [pc, #128]	; (8004018 <SDMode+0x48c>)
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	635a      	str	r2, [r3, #52]	; 0x34
					doThisCoil->Instance->CCR2 = 0;
 8003f9e:	4b1e      	ldr	r3, [pc, #120]	; (8004018 <SDMode+0x48c>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2200      	movs	r2, #0
 8003fa6:	639a      	str	r2, [r3, #56]	; 0x38
				sdModeState = SD_FETCH_NEXT;
 8003fa8:	4b19      	ldr	r3, [pc, #100]	; (8004010 <SDMode+0x484>)
 8003faa:	2201      	movs	r2, #1
 8003fac:	701a      	strb	r2, [r3, #0]
			break;
 8003fae:	e000      	b.n	8003fb2 <SDMode+0x426>
			while(1){
 8003fb0:	e7fe      	b.n	8003fb0 <SDMode+0x424>
			break;
 8003fb2:	bf00      	nop
		if (buttonPushed) {
 8003fb4:	4b19      	ldr	r3, [pc, #100]	; (800401c <SDMode+0x490>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d01d      	beq.n	8003ff8 <SDMode+0x46c>
			buttonPushed = false;
 8003fbc:	4b17      	ldr	r3, [pc, #92]	; (800401c <SDMode+0x490>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	701a      	strb	r2, [r3, #0]
			turnOffAllCoils();
 8003fc2:	f7fd fd29 	bl	8001a18 <turnOffAllCoils>
			eventCounter = 0;
 8003fc6:	4b16      	ldr	r3, [pc, #88]	; (8004020 <SDMode+0x494>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	801a      	strh	r2, [r3, #0]
			timeStarted = 0;
 8003fcc:	4b11      	ldr	r3, [pc, #68]	; (8004014 <SDMode+0x488>)
 8003fce:	2200      	movs	r2, #0
 8003fd0:	601a      	str	r2, [r3, #0]
			fresult = f_close(&fil);
 8003fd2:	4814      	ldr	r0, [pc, #80]	; (8004024 <SDMode+0x498>)
 8003fd4:	f00c ff97 	bl	8010f06 <f_close>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	461a      	mov	r2, r3
 8003fdc:	4b12      	ldr	r3, [pc, #72]	; (8004028 <SDMode+0x49c>)
 8003fde:	701a      	strb	r2, [r3, #0]
			clearDisplay(&lcd);
 8003fe0:	4812      	ldr	r0, [pc, #72]	; (800402c <SDMode+0x4a0>)
 8003fe2:	f7fd fa04 	bl	80013ee <clearDisplay>
			printed = false;
 8003fe6:	4b12      	ldr	r3, [pc, #72]	; (8004030 <SDMode+0x4a4>)
 8003fe8:	2200      	movs	r2, #0
 8003fea:	701a      	strb	r2, [r3, #0]
			isPlaying = false;
 8003fec:	4b11      	ldr	r3, [pc, #68]	; (8004034 <SDMode+0x4a8>)
 8003fee:	2200      	movs	r2, #0
 8003ff0:	701a      	strb	r2, [r3, #0]
			sdModeState = SD_GET_FIRST;
 8003ff2:	4b07      	ldr	r3, [pc, #28]	; (8004010 <SDMode+0x484>)
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	701a      	strb	r2, [r3, #0]
}
 8003ff8:	bf00      	nop
 8003ffa:	3708      	adds	r7, #8
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	20000ee0 	.word	0x20000ee0
 8004004:	01e84800 	.word	0x01e84800
 8004008:	40400000 	.word	0x40400000
 800400c:	20000ef4 	.word	0x20000ef4
 8004010:	20000ede 	.word	0x20000ede
 8004014:	20000c0c 	.word	0x20000c0c
 8004018:	20000ef8 	.word	0x20000ef8
 800401c:	20000650 	.word	0x20000650
 8004020:	20000c20 	.word	0x20000c20
 8004024:	20000888 	.word	0x20000888
 8004028:	20000ab8 	.word	0x20000ab8
 800402c:	200005e4 	.word	0x200005e4
 8004030:	20000c2c 	.word	0x20000c2c
 8004034:	20000c2b 	.word	0x20000c2b

08004038 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8004038:	b480      	push	{r7}
 800403a:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800403c:	b672      	cpsid	i
}
 800403e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004040:	e7fe      	b.n	8004040 <Error_Handler+0x8>
	...

08004044 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004044:	b480      	push	{r7}
 8004046:	b085      	sub	sp, #20
 8004048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800404a:	4b14      	ldr	r3, [pc, #80]	; (800409c <HAL_MspInit+0x58>)
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	4a13      	ldr	r2, [pc, #76]	; (800409c <HAL_MspInit+0x58>)
 8004050:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004054:	6253      	str	r3, [r2, #36]	; 0x24
 8004056:	4b11      	ldr	r3, [pc, #68]	; (800409c <HAL_MspInit+0x58>)
 8004058:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800405a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800405e:	60fb      	str	r3, [r7, #12]
 8004060:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004062:	4b0e      	ldr	r3, [pc, #56]	; (800409c <HAL_MspInit+0x58>)
 8004064:	6a1b      	ldr	r3, [r3, #32]
 8004066:	4a0d      	ldr	r2, [pc, #52]	; (800409c <HAL_MspInit+0x58>)
 8004068:	f043 0301 	orr.w	r3, r3, #1
 800406c:	6213      	str	r3, [r2, #32]
 800406e:	4b0b      	ldr	r3, [pc, #44]	; (800409c <HAL_MspInit+0x58>)
 8004070:	6a1b      	ldr	r3, [r3, #32]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	60bb      	str	r3, [r7, #8]
 8004078:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800407a:	4b08      	ldr	r3, [pc, #32]	; (800409c <HAL_MspInit+0x58>)
 800407c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800407e:	4a07      	ldr	r2, [pc, #28]	; (800409c <HAL_MspInit+0x58>)
 8004080:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004084:	6253      	str	r3, [r2, #36]	; 0x24
 8004086:	4b05      	ldr	r3, [pc, #20]	; (800409c <HAL_MspInit+0x58>)
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800408e:	607b      	str	r3, [r7, #4]
 8004090:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004092:	bf00      	nop
 8004094:	3714      	adds	r7, #20
 8004096:	46bd      	mov	sp, r7
 8004098:	bc80      	pop	{r7}
 800409a:	4770      	bx	lr
 800409c:	40023800 	.word	0x40023800

080040a0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b08a      	sub	sp, #40	; 0x28
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040a8:	f107 0314 	add.w	r3, r7, #20
 80040ac:	2200      	movs	r2, #0
 80040ae:	601a      	str	r2, [r3, #0]
 80040b0:	605a      	str	r2, [r3, #4]
 80040b2:	609a      	str	r2, [r3, #8]
 80040b4:	60da      	str	r2, [r3, #12]
 80040b6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a15      	ldr	r2, [pc, #84]	; (8004114 <HAL_ADC_MspInit+0x74>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d123      	bne.n	800410a <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80040c2:	4b15      	ldr	r3, [pc, #84]	; (8004118 <HAL_ADC_MspInit+0x78>)
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	4a14      	ldr	r2, [pc, #80]	; (8004118 <HAL_ADC_MspInit+0x78>)
 80040c8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80040cc:	6213      	str	r3, [r2, #32]
 80040ce:	4b12      	ldr	r3, [pc, #72]	; (8004118 <HAL_ADC_MspInit+0x78>)
 80040d0:	6a1b      	ldr	r3, [r3, #32]
 80040d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040d6:	613b      	str	r3, [r7, #16]
 80040d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040da:	4b0f      	ldr	r3, [pc, #60]	; (8004118 <HAL_ADC_MspInit+0x78>)
 80040dc:	69db      	ldr	r3, [r3, #28]
 80040de:	4a0e      	ldr	r2, [pc, #56]	; (8004118 <HAL_ADC_MspInit+0x78>)
 80040e0:	f043 0301 	orr.w	r3, r3, #1
 80040e4:	61d3      	str	r3, [r2, #28]
 80040e6:	4b0c      	ldr	r3, [pc, #48]	; (8004118 <HAL_ADC_MspInit+0x78>)
 80040e8:	69db      	ldr	r3, [r3, #28]
 80040ea:	f003 0301 	and.w	r3, r3, #1
 80040ee:	60fb      	str	r3, [r7, #12]
 80040f0:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = Pot1_Pin|Pot2_Pin;
 80040f2:	2305      	movs	r3, #5
 80040f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80040f6:	2303      	movs	r3, #3
 80040f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040fe:	f107 0314 	add.w	r3, r7, #20
 8004102:	4619      	mov	r1, r3
 8004104:	4805      	ldr	r0, [pc, #20]	; (800411c <HAL_ADC_MspInit+0x7c>)
 8004106:	f001 f88d 	bl	8005224 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800410a:	bf00      	nop
 800410c:	3728      	adds	r7, #40	; 0x28
 800410e:	46bd      	mov	sp, r7
 8004110:	bd80      	pop	{r7, pc}
 8004112:	bf00      	nop
 8004114:	40012400 	.word	0x40012400
 8004118:	40023800 	.word	0x40023800
 800411c:	40020000 	.word	0x40020000

08004120 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b08a      	sub	sp, #40	; 0x28
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004128:	f107 0314 	add.w	r3, r7, #20
 800412c:	2200      	movs	r2, #0
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	605a      	str	r2, [r3, #4]
 8004132:	609a      	str	r2, [r3, #8]
 8004134:	60da      	str	r2, [r3, #12]
 8004136:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	4a17      	ldr	r2, [pc, #92]	; (800419c <HAL_I2C_MspInit+0x7c>)
 800413e:	4293      	cmp	r3, r2
 8004140:	d128      	bne.n	8004194 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004142:	4b17      	ldr	r3, [pc, #92]	; (80041a0 <HAL_I2C_MspInit+0x80>)
 8004144:	69db      	ldr	r3, [r3, #28]
 8004146:	4a16      	ldr	r2, [pc, #88]	; (80041a0 <HAL_I2C_MspInit+0x80>)
 8004148:	f043 0302 	orr.w	r3, r3, #2
 800414c:	61d3      	str	r3, [r2, #28]
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <HAL_I2C_MspInit+0x80>)
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800415a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800415e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004160:	2312      	movs	r3, #18
 8004162:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004164:	2300      	movs	r3, #0
 8004166:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004168:	2303      	movs	r3, #3
 800416a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800416c:	2304      	movs	r3, #4
 800416e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	4619      	mov	r1, r3
 8004176:	480b      	ldr	r0, [pc, #44]	; (80041a4 <HAL_I2C_MspInit+0x84>)
 8004178:	f001 f854 	bl	8005224 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800417c:	4b08      	ldr	r3, [pc, #32]	; (80041a0 <HAL_I2C_MspInit+0x80>)
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	4a07      	ldr	r2, [pc, #28]	; (80041a0 <HAL_I2C_MspInit+0x80>)
 8004182:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004186:	6253      	str	r3, [r2, #36]	; 0x24
 8004188:	4b05      	ldr	r3, [pc, #20]	; (80041a0 <HAL_I2C_MspInit+0x80>)
 800418a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8004194:	bf00      	nop
 8004196:	3728      	adds	r7, #40	; 0x28
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	40005800 	.word	0x40005800
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40020400 	.word	0x40020400

080041a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08c      	sub	sp, #48	; 0x30
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041b0:	f107 031c 	add.w	r3, r7, #28
 80041b4:	2200      	movs	r2, #0
 80041b6:	601a      	str	r2, [r3, #0]
 80041b8:	605a      	str	r2, [r3, #4]
 80041ba:	609a      	str	r2, [r3, #8]
 80041bc:	60da      	str	r2, [r3, #12]
 80041be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	4a2e      	ldr	r2, [pc, #184]	; (8004280 <HAL_SPI_MspInit+0xd8>)
 80041c6:	4293      	cmp	r3, r2
 80041c8:	d128      	bne.n	800421c <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80041ca:	4b2e      	ldr	r3, [pc, #184]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 80041cc:	6a1b      	ldr	r3, [r3, #32]
 80041ce:	4a2d      	ldr	r2, [pc, #180]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 80041d0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80041d4:	6213      	str	r3, [r2, #32]
 80041d6:	4b2b      	ldr	r3, [pc, #172]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 80041d8:	6a1b      	ldr	r3, [r3, #32]
 80041da:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80041de:	61bb      	str	r3, [r7, #24]
 80041e0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80041e2:	4b28      	ldr	r3, [pc, #160]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	4a27      	ldr	r2, [pc, #156]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 80041e8:	f043 0302 	orr.w	r3, r3, #2
 80041ec:	61d3      	str	r3, [r2, #28]
 80041ee:	4b25      	ldr	r3, [pc, #148]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 80041f0:	69db      	ldr	r3, [r3, #28]
 80041f2:	f003 0302 	and.w	r3, r3, #2
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80041fa:	2338      	movs	r3, #56	; 0x38
 80041fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041fe:	2302      	movs	r3, #2
 8004200:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004202:	2301      	movs	r3, #1
 8004204:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004206:	2303      	movs	r3, #3
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800420a:	2305      	movs	r3, #5
 800420c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800420e:	f107 031c 	add.w	r3, r7, #28
 8004212:	4619      	mov	r1, r3
 8004214:	481c      	ldr	r0, [pc, #112]	; (8004288 <HAL_SPI_MspInit+0xe0>)
 8004216:	f001 f805 	bl	8005224 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800421a:	e02d      	b.n	8004278 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	4a1a      	ldr	r2, [pc, #104]	; (800428c <HAL_SPI_MspInit+0xe4>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d128      	bne.n	8004278 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8004226:	4b17      	ldr	r3, [pc, #92]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 8004228:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422a:	4a16      	ldr	r2, [pc, #88]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 800422c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004230:	6253      	str	r3, [r2, #36]	; 0x24
 8004232:	4b14      	ldr	r3, [pc, #80]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800423a:	613b      	str	r3, [r7, #16]
 800423c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800423e:	4b11      	ldr	r3, [pc, #68]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 8004240:	69db      	ldr	r3, [r3, #28]
 8004242:	4a10      	ldr	r2, [pc, #64]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 8004244:	f043 0302 	orr.w	r3, r3, #2
 8004248:	61d3      	str	r3, [r2, #28]
 800424a:	4b0e      	ldr	r3, [pc, #56]	; (8004284 <HAL_SPI_MspInit+0xdc>)
 800424c:	69db      	ldr	r3, [r3, #28]
 800424e:	f003 0302 	and.w	r3, r3, #2
 8004252:	60fb      	str	r3, [r7, #12]
 8004254:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8004256:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800425a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800425c:	2302      	movs	r3, #2
 800425e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004260:	2300      	movs	r3, #0
 8004262:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004264:	2303      	movs	r3, #3
 8004266:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004268:	2305      	movs	r3, #5
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800426c:	f107 031c 	add.w	r3, r7, #28
 8004270:	4619      	mov	r1, r3
 8004272:	4805      	ldr	r0, [pc, #20]	; (8004288 <HAL_SPI_MspInit+0xe0>)
 8004274:	f000 ffd6 	bl	8005224 <HAL_GPIO_Init>
}
 8004278:	bf00      	nop
 800427a:	3730      	adds	r7, #48	; 0x30
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40013000 	.word	0x40013000
 8004284:	40023800 	.word	0x40023800
 8004288:	40020400 	.word	0x40020400
 800428c:	40003800 	.word	0x40003800

08004290 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004290:	b580      	push	{r7, lr}
 8004292:	b08a      	sub	sp, #40	; 0x28
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042a0:	d10c      	bne.n	80042bc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80042a2:	4b46      	ldr	r3, [pc, #280]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a6:	4a45      	ldr	r2, [pc, #276]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	6253      	str	r3, [r2, #36]	; 0x24
 80042ae:	4b43      	ldr	r3, [pc, #268]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	627b      	str	r3, [r7, #36]	; 0x24
 80042b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 80042ba:	e07a      	b.n	80043b2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM3)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a3f      	ldr	r2, [pc, #252]	; (80043c0 <HAL_TIM_Base_MspInit+0x130>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d10c      	bne.n	80042e0 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80042c6:	4b3d      	ldr	r3, [pc, #244]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ca:	4a3c      	ldr	r2, [pc, #240]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	6253      	str	r3, [r2, #36]	; 0x24
 80042d2:	4b3a      	ldr	r3, [pc, #232]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d6:	f003 0302 	and.w	r3, r3, #2
 80042da:	623b      	str	r3, [r7, #32]
 80042dc:	6a3b      	ldr	r3, [r7, #32]
}
 80042de:	e068      	b.n	80043b2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM4)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	4a37      	ldr	r2, [pc, #220]	; (80043c4 <HAL_TIM_Base_MspInit+0x134>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d10c      	bne.n	8004304 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80042ea:	4b34      	ldr	r3, [pc, #208]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ee:	4a33      	ldr	r2, [pc, #204]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042f0:	f043 0304 	orr.w	r3, r3, #4
 80042f4:	6253      	str	r3, [r2, #36]	; 0x24
 80042f6:	4b31      	ldr	r3, [pc, #196]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	f003 0304 	and.w	r3, r3, #4
 80042fe:	61fb      	str	r3, [r7, #28]
 8004300:	69fb      	ldr	r3, [r7, #28]
}
 8004302:	e056      	b.n	80043b2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM6)
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	4a2f      	ldr	r2, [pc, #188]	; (80043c8 <HAL_TIM_Base_MspInit+0x138>)
 800430a:	4293      	cmp	r3, r2
 800430c:	d114      	bne.n	8004338 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800430e:	4b2b      	ldr	r3, [pc, #172]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 8004310:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004312:	4a2a      	ldr	r2, [pc, #168]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 8004314:	f043 0310 	orr.w	r3, r3, #16
 8004318:	6253      	str	r3, [r2, #36]	; 0x24
 800431a:	4b28      	ldr	r3, [pc, #160]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	f003 0310 	and.w	r3, r3, #16
 8004322:	61bb      	str	r3, [r7, #24]
 8004324:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 8004326:	2200      	movs	r2, #0
 8004328:	2100      	movs	r1, #0
 800432a:	202b      	movs	r0, #43	; 0x2b
 800432c:	f000 ff43 	bl	80051b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 8004330:	202b      	movs	r0, #43	; 0x2b
 8004332:	f000 ff5c 	bl	80051ee <HAL_NVIC_EnableIRQ>
}
 8004336:	e03c      	b.n	80043b2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM7)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4a23      	ldr	r2, [pc, #140]	; (80043cc <HAL_TIM_Base_MspInit+0x13c>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d114      	bne.n	800436c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004342:	4b1e      	ldr	r3, [pc, #120]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 8004344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004346:	4a1d      	ldr	r2, [pc, #116]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 8004348:	f043 0320 	orr.w	r3, r3, #32
 800434c:	6253      	str	r3, [r2, #36]	; 0x24
 800434e:	4b1b      	ldr	r3, [pc, #108]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 8004350:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004352:	f003 0320 	and.w	r3, r3, #32
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800435a:	2200      	movs	r2, #0
 800435c:	2100      	movs	r1, #0
 800435e:	202c      	movs	r0, #44	; 0x2c
 8004360:	f000 ff29 	bl	80051b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004364:	202c      	movs	r0, #44	; 0x2c
 8004366:	f000 ff42 	bl	80051ee <HAL_NVIC_EnableIRQ>
}
 800436a:	e022      	b.n	80043b2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM9)
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a17      	ldr	r2, [pc, #92]	; (80043d0 <HAL_TIM_Base_MspInit+0x140>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d10c      	bne.n	8004390 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004376:	4b11      	ldr	r3, [pc, #68]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 8004378:	6a1b      	ldr	r3, [r3, #32]
 800437a:	4a10      	ldr	r2, [pc, #64]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 800437c:	f043 0304 	orr.w	r3, r3, #4
 8004380:	6213      	str	r3, [r2, #32]
 8004382:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 8004384:	6a1b      	ldr	r3, [r3, #32]
 8004386:	f003 0304 	and.w	r3, r3, #4
 800438a:	613b      	str	r3, [r7, #16]
 800438c:	693b      	ldr	r3, [r7, #16]
}
 800438e:	e010      	b.n	80043b2 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM10)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a0f      	ldr	r2, [pc, #60]	; (80043d4 <HAL_TIM_Base_MspInit+0x144>)
 8004396:	4293      	cmp	r3, r2
 8004398:	d10b      	bne.n	80043b2 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800439a:	4b08      	ldr	r3, [pc, #32]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	4a07      	ldr	r2, [pc, #28]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80043a0:	f043 0308 	orr.w	r3, r3, #8
 80043a4:	6213      	str	r3, [r2, #32]
 80043a6:	4b05      	ldr	r3, [pc, #20]	; (80043bc <HAL_TIM_Base_MspInit+0x12c>)
 80043a8:	6a1b      	ldr	r3, [r3, #32]
 80043aa:	f003 0308 	and.w	r3, r3, #8
 80043ae:	60fb      	str	r3, [r7, #12]
 80043b0:	68fb      	ldr	r3, [r7, #12]
}
 80043b2:	bf00      	nop
 80043b4:	3728      	adds	r7, #40	; 0x28
 80043b6:	46bd      	mov	sp, r7
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	bf00      	nop
 80043bc:	40023800 	.word	0x40023800
 80043c0:	40000400 	.word	0x40000400
 80043c4:	40000800 	.word	0x40000800
 80043c8:	40001000 	.word	0x40001000
 80043cc:	40001400 	.word	0x40001400
 80043d0:	40010800 	.word	0x40010800
 80043d4:	40010c00 	.word	0x40010c00

080043d8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80043d8:	b480      	push	{r7}
 80043da:	b085      	sub	sp, #20
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM11)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	4a09      	ldr	r2, [pc, #36]	; (800440c <HAL_TIM_PWM_MspInit+0x34>)
 80043e6:	4293      	cmp	r3, r2
 80043e8:	d10b      	bne.n	8004402 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 80043ea:	4b09      	ldr	r3, [pc, #36]	; (8004410 <HAL_TIM_PWM_MspInit+0x38>)
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	4a08      	ldr	r2, [pc, #32]	; (8004410 <HAL_TIM_PWM_MspInit+0x38>)
 80043f0:	f043 0310 	orr.w	r3, r3, #16
 80043f4:	6213      	str	r3, [r2, #32]
 80043f6:	4b06      	ldr	r3, [pc, #24]	; (8004410 <HAL_TIM_PWM_MspInit+0x38>)
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	f003 0310 	and.w	r3, r3, #16
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 8004402:	bf00      	nop
 8004404:	3714      	adds	r7, #20
 8004406:	46bd      	mov	sp, r7
 8004408:	bc80      	pop	{r7}
 800440a:	4770      	bx	lr
 800440c:	40011000 	.word	0x40011000
 8004410:	40023800 	.word	0x40023800

08004414 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b08e      	sub	sp, #56	; 0x38
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800441c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004420:	2200      	movs	r2, #0
 8004422:	601a      	str	r2, [r3, #0]
 8004424:	605a      	str	r2, [r3, #4]
 8004426:	609a      	str	r2, [r3, #8]
 8004428:	60da      	str	r2, [r3, #12]
 800442a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004434:	d11c      	bne.n	8004470 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004436:	4b66      	ldr	r3, [pc, #408]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004438:	69db      	ldr	r3, [r3, #28]
 800443a:	4a65      	ldr	r2, [pc, #404]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 800443c:	f043 0301 	orr.w	r3, r3, #1
 8004440:	61d3      	str	r3, [r2, #28]
 8004442:	4b63      	ldr	r3, [pc, #396]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004444:	69db      	ldr	r3, [r3, #28]
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	623b      	str	r3, [r7, #32]
 800444c:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 800444e:	2322      	movs	r3, #34	; 0x22
 8004450:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004452:	2302      	movs	r3, #2
 8004454:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004456:	2300      	movs	r3, #0
 8004458:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800445a:	2300      	movs	r3, #0
 800445c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800445e:	2301      	movs	r3, #1
 8004460:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004462:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004466:	4619      	mov	r1, r3
 8004468:	485a      	ldr	r0, [pc, #360]	; (80045d4 <HAL_TIM_MspPostInit+0x1c0>)
 800446a:	f000 fedb 	bl	8005224 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800446e:	e0aa      	b.n	80045c6 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4a58      	ldr	r2, [pc, #352]	; (80045d8 <HAL_TIM_MspPostInit+0x1c4>)
 8004476:	4293      	cmp	r3, r2
 8004478:	d11c      	bne.n	80044b4 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800447a:	4b55      	ldr	r3, [pc, #340]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 800447c:	69db      	ldr	r3, [r3, #28]
 800447e:	4a54      	ldr	r2, [pc, #336]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004480:	f043 0301 	orr.w	r3, r3, #1
 8004484:	61d3      	str	r3, [r2, #28]
 8004486:	4b52      	ldr	r3, [pc, #328]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004488:	69db      	ldr	r3, [r3, #28]
 800448a:	f003 0301 	and.w	r3, r3, #1
 800448e:	61fb      	str	r3, [r7, #28]
 8004490:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004492:	2340      	movs	r3, #64	; 0x40
 8004494:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004496:	2302      	movs	r3, #2
 8004498:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800449a:	2300      	movs	r3, #0
 800449c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800449e:	2300      	movs	r3, #0
 80044a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80044a2:	2302      	movs	r3, #2
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044aa:	4619      	mov	r1, r3
 80044ac:	4849      	ldr	r0, [pc, #292]	; (80045d4 <HAL_TIM_MspPostInit+0x1c0>)
 80044ae:	f000 feb9 	bl	8005224 <HAL_GPIO_Init>
}
 80044b2:	e088      	b.n	80045c6 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM4)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	4a48      	ldr	r2, [pc, #288]	; (80045dc <HAL_TIM_MspPostInit+0x1c8>)
 80044ba:	4293      	cmp	r3, r2
 80044bc:	d11c      	bne.n	80044f8 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80044be:	4b44      	ldr	r3, [pc, #272]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	4a43      	ldr	r2, [pc, #268]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 80044c4:	f043 0302 	orr.w	r3, r3, #2
 80044c8:	61d3      	str	r3, [r2, #28]
 80044ca:	4b41      	ldr	r3, [pc, #260]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 80044cc:	69db      	ldr	r3, [r3, #28]
 80044ce:	f003 0302 	and.w	r3, r3, #2
 80044d2:	61bb      	str	r3, [r7, #24]
 80044d4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80044d6:	23c0      	movs	r3, #192	; 0xc0
 80044d8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044da:	2302      	movs	r3, #2
 80044dc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044de:	2300      	movs	r3, #0
 80044e0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80044e2:	2300      	movs	r3, #0
 80044e4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80044e6:	2302      	movs	r3, #2
 80044e8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80044ea:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80044ee:	4619      	mov	r1, r3
 80044f0:	483b      	ldr	r0, [pc, #236]	; (80045e0 <HAL_TIM_MspPostInit+0x1cc>)
 80044f2:	f000 fe97 	bl	8005224 <HAL_GPIO_Init>
}
 80044f6:	e066      	b.n	80045c6 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	4a39      	ldr	r2, [pc, #228]	; (80045e4 <HAL_TIM_MspPostInit+0x1d0>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d11c      	bne.n	800453c <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004502:	4b33      	ldr	r3, [pc, #204]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004504:	69db      	ldr	r3, [r3, #28]
 8004506:	4a32      	ldr	r2, [pc, #200]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004508:	f043 0301 	orr.w	r3, r3, #1
 800450c:	61d3      	str	r3, [r2, #28]
 800450e:	4b30      	ldr	r3, [pc, #192]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004510:	69db      	ldr	r3, [r3, #28]
 8004512:	f003 0301 	and.w	r3, r3, #1
 8004516:	617b      	str	r3, [r7, #20]
 8004518:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800451a:	2308      	movs	r3, #8
 800451c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800451e:	2302      	movs	r3, #2
 8004520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004522:	2300      	movs	r3, #0
 8004524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004526:	2300      	movs	r3, #0
 8004528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800452a:	2303      	movs	r3, #3
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800452e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004532:	4619      	mov	r1, r3
 8004534:	4827      	ldr	r0, [pc, #156]	; (80045d4 <HAL_TIM_MspPostInit+0x1c0>)
 8004536:	f000 fe75 	bl	8005224 <HAL_GPIO_Init>
}
 800453a:	e044      	b.n	80045c6 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM10)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	4a29      	ldr	r2, [pc, #164]	; (80045e8 <HAL_TIM_MspPostInit+0x1d4>)
 8004542:	4293      	cmp	r3, r2
 8004544:	d11d      	bne.n	8004582 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004546:	4b22      	ldr	r3, [pc, #136]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	4a21      	ldr	r2, [pc, #132]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 800454c:	f043 0302 	orr.w	r3, r3, #2
 8004550:	61d3      	str	r3, [r2, #28]
 8004552:	4b1f      	ldr	r3, [pc, #124]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004554:	69db      	ldr	r3, [r3, #28]
 8004556:	f003 0302 	and.w	r3, r3, #2
 800455a:	613b      	str	r3, [r7, #16]
 800455c:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800455e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004562:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004564:	2302      	movs	r3, #2
 8004566:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004568:	2300      	movs	r3, #0
 800456a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800456c:	2300      	movs	r3, #0
 800456e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004570:	2303      	movs	r3, #3
 8004572:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004574:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004578:	4619      	mov	r1, r3
 800457a:	4819      	ldr	r0, [pc, #100]	; (80045e0 <HAL_TIM_MspPostInit+0x1cc>)
 800457c:	f000 fe52 	bl	8005224 <HAL_GPIO_Init>
}
 8004580:	e021      	b.n	80045c6 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM11)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a19      	ldr	r2, [pc, #100]	; (80045ec <HAL_TIM_MspPostInit+0x1d8>)
 8004588:	4293      	cmp	r3, r2
 800458a:	d11c      	bne.n	80045c6 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800458c:	4b10      	ldr	r3, [pc, #64]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 800458e:	69db      	ldr	r3, [r3, #28]
 8004590:	4a0f      	ldr	r2, [pc, #60]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 8004592:	f043 0302 	orr.w	r3, r3, #2
 8004596:	61d3      	str	r3, [r2, #28]
 8004598:	4b0d      	ldr	r3, [pc, #52]	; (80045d0 <HAL_TIM_MspPostInit+0x1bc>)
 800459a:	69db      	ldr	r3, [r3, #28]
 800459c:	f003 0302 	and.w	r3, r3, #2
 80045a0:	60fb      	str	r3, [r7, #12]
 80045a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80045a4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80045a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80045aa:	2302      	movs	r3, #2
 80045ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80045ae:	2300      	movs	r3, #0
 80045b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80045b2:	2300      	movs	r3, #0
 80045b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 80045b6:	2303      	movs	r3, #3
 80045b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80045ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80045be:	4619      	mov	r1, r3
 80045c0:	4807      	ldr	r0, [pc, #28]	; (80045e0 <HAL_TIM_MspPostInit+0x1cc>)
 80045c2:	f000 fe2f 	bl	8005224 <HAL_GPIO_Init>
}
 80045c6:	bf00      	nop
 80045c8:	3738      	adds	r7, #56	; 0x38
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bd80      	pop	{r7, pc}
 80045ce:	bf00      	nop
 80045d0:	40023800 	.word	0x40023800
 80045d4:	40020000 	.word	0x40020000
 80045d8:	40000400 	.word	0x40000400
 80045dc:	40000800 	.word	0x40000800
 80045e0:	40020400 	.word	0x40020400
 80045e4:	40010800 	.word	0x40010800
 80045e8:	40010c00 	.word	0x40010c00
 80045ec:	40011000 	.word	0x40011000

080045f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80045f0:	b480      	push	{r7}
 80045f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80045f4:	e7fe      	b.n	80045f4 <NMI_Handler+0x4>

080045f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80045f6:	b480      	push	{r7}
 80045f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80045fa:	e7fe      	b.n	80045fa <HardFault_Handler+0x4>

080045fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004600:	e7fe      	b.n	8004600 <MemManage_Handler+0x4>

08004602 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004602:	b480      	push	{r7}
 8004604:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004606:	e7fe      	b.n	8004606 <BusFault_Handler+0x4>

08004608 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800460c:	e7fe      	b.n	800460c <UsageFault_Handler+0x4>

0800460e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800460e:	b480      	push	{r7}
 8004610:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8004612:	bf00      	nop
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr

0800461a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800461a:	b480      	push	{r7}
 800461c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800461e:	bf00      	nop
 8004620:	46bd      	mov	sp, r7
 8004622:	bc80      	pop	{r7}
 8004624:	4770      	bx	lr

08004626 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004626:	b480      	push	{r7}
 8004628:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800462a:	bf00      	nop
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004632:	b580      	push	{r7, lr}
 8004634:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004636:	f000 f8e1 	bl	80047fc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800463a:	bf00      	nop
 800463c:	bd80      	pop	{r7, pc}
	...

08004640 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8004644:	4802      	ldr	r0, [pc, #8]	; (8004650 <USB_LP_IRQHandler+0x10>)
 8004646:	f001 fd1b 	bl	8006080 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 800464a:	bf00      	nop
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	20001dbc 	.word	0x20001dbc

08004654 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_BUT_Pin);
 8004658:	f44f 7080 	mov.w	r0, #256	; 0x100
 800465c:	f000 ffaa 	bl	80055b4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_CLK_Pin);
 8004660:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004664:	f000 ffa6 	bl	80055b4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004668:	bf00      	nop
 800466a:	bd80      	pop	{r7, pc}

0800466c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800466c:	b580      	push	{r7, lr}
 800466e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004670:	4802      	ldr	r0, [pc, #8]	; (800467c <TIM6_IRQHandler+0x10>)
 8004672:	f004 fa65 	bl	8008b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004676:	bf00      	nop
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	200004a4 	.word	0x200004a4

08004680 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004680:	b580      	push	{r7, lr}
 8004682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004684:	4802      	ldr	r0, [pc, #8]	; (8004690 <TIM7_IRQHandler+0x10>)
 8004686:	f004 fa5b 	bl	8008b40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	200004e4 	.word	0x200004e4

08004694 <_sbrk>:
 8004694:	b580      	push	{r7, lr}
 8004696:	b086      	sub	sp, #24
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
 800469c:	4a14      	ldr	r2, [pc, #80]	; (80046f0 <_sbrk+0x5c>)
 800469e:	4b15      	ldr	r3, [pc, #84]	; (80046f4 <_sbrk+0x60>)
 80046a0:	1ad3      	subs	r3, r2, r3
 80046a2:	617b      	str	r3, [r7, #20]
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	613b      	str	r3, [r7, #16]
 80046a8:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <_sbrk+0x64>)
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d102      	bne.n	80046b6 <_sbrk+0x22>
 80046b0:	4b11      	ldr	r3, [pc, #68]	; (80046f8 <_sbrk+0x64>)
 80046b2:	4a12      	ldr	r2, [pc, #72]	; (80046fc <_sbrk+0x68>)
 80046b4:	601a      	str	r2, [r3, #0]
 80046b6:	4b10      	ldr	r3, [pc, #64]	; (80046f8 <_sbrk+0x64>)
 80046b8:	681a      	ldr	r2, [r3, #0]
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4413      	add	r3, r2
 80046be:	693a      	ldr	r2, [r7, #16]
 80046c0:	429a      	cmp	r2, r3
 80046c2:	d207      	bcs.n	80046d4 <_sbrk+0x40>
 80046c4:	f00d fb2c 	bl	8011d20 <__errno>
 80046c8:	4603      	mov	r3, r0
 80046ca:	220c      	movs	r2, #12
 80046cc:	601a      	str	r2, [r3, #0]
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295
 80046d2:	e009      	b.n	80046e8 <_sbrk+0x54>
 80046d4:	4b08      	ldr	r3, [pc, #32]	; (80046f8 <_sbrk+0x64>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	60fb      	str	r3, [r7, #12]
 80046da:	4b07      	ldr	r3, [pc, #28]	; (80046f8 <_sbrk+0x64>)
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	4413      	add	r3, r2
 80046e2:	4a05      	ldr	r2, [pc, #20]	; (80046f8 <_sbrk+0x64>)
 80046e4:	6013      	str	r3, [r2, #0]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	4618      	mov	r0, r3
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20004000 	.word	0x20004000
 80046f4:	00000400 	.word	0x00000400
 80046f8:	20000efc 	.word	0x20000efc
 80046fc:	20002410 	.word	0x20002410

08004700 <SystemInit>:
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
 8004704:	bf00      	nop
 8004706:	46bd      	mov	sp, r7
 8004708:	bc80      	pop	{r7}
 800470a:	4770      	bx	lr

0800470c <Reset_Handler>:
 800470c:	480c      	ldr	r0, [pc, #48]	; (8004740 <LoopFillZerobss+0x12>)
 800470e:	490d      	ldr	r1, [pc, #52]	; (8004744 <LoopFillZerobss+0x16>)
 8004710:	4a0d      	ldr	r2, [pc, #52]	; (8004748 <LoopFillZerobss+0x1a>)
 8004712:	2300      	movs	r3, #0
 8004714:	e002      	b.n	800471c <LoopCopyDataInit>

08004716 <CopyDataInit>:
 8004716:	58d4      	ldr	r4, [r2, r3]
 8004718:	50c4      	str	r4, [r0, r3]
 800471a:	3304      	adds	r3, #4

0800471c <LoopCopyDataInit>:
 800471c:	18c4      	adds	r4, r0, r3
 800471e:	428c      	cmp	r4, r1
 8004720:	d3f9      	bcc.n	8004716 <CopyDataInit>
 8004722:	4a0a      	ldr	r2, [pc, #40]	; (800474c <LoopFillZerobss+0x1e>)
 8004724:	4c0a      	ldr	r4, [pc, #40]	; (8004750 <LoopFillZerobss+0x22>)
 8004726:	2300      	movs	r3, #0
 8004728:	e001      	b.n	800472e <LoopFillZerobss>

0800472a <FillZerobss>:
 800472a:	6013      	str	r3, [r2, #0]
 800472c:	3204      	adds	r2, #4

0800472e <LoopFillZerobss>:
 800472e:	42a2      	cmp	r2, r4
 8004730:	d3fb      	bcc.n	800472a <FillZerobss>
 8004732:	f7ff ffe5 	bl	8004700 <SystemInit>
 8004736:	f00d faf9 	bl	8011d2c <__libc_init_array>
 800473a:	f7fd f9cb 	bl	8001ad4 <main>
 800473e:	4770      	bx	lr
 8004740:	20000000 	.word	0x20000000
 8004744:	2000026c 	.word	0x2000026c
 8004748:	08012c5c 	.word	0x08012c5c
 800474c:	20000270 	.word	0x20000270
 8004750:	20002410 	.word	0x20002410

08004754 <ADC1_IRQHandler>:
 8004754:	e7fe      	b.n	8004754 <ADC1_IRQHandler>

08004756 <HAL_Init>:
 8004756:	b580      	push	{r7, lr}
 8004758:	b082      	sub	sp, #8
 800475a:	af00      	add	r7, sp, #0
 800475c:	2300      	movs	r3, #0
 800475e:	71fb      	strb	r3, [r7, #7]
 8004760:	2003      	movs	r0, #3
 8004762:	f000 fd1d 	bl	80051a0 <HAL_NVIC_SetPriorityGrouping>
 8004766:	200f      	movs	r0, #15
 8004768:	f000 f80e 	bl	8004788 <HAL_InitTick>
 800476c:	4603      	mov	r3, r0
 800476e:	2b00      	cmp	r3, #0
 8004770:	d002      	beq.n	8004778 <HAL_Init+0x22>
 8004772:	2301      	movs	r3, #1
 8004774:	71fb      	strb	r3, [r7, #7]
 8004776:	e001      	b.n	800477c <HAL_Init+0x26>
 8004778:	f7ff fc64 	bl	8004044 <HAL_MspInit>
 800477c:	79fb      	ldrb	r3, [r7, #7]
 800477e:	4618      	mov	r0, r3
 8004780:	3708      	adds	r7, #8
 8004782:	46bd      	mov	sp, r7
 8004784:	bd80      	pop	{r7, pc}
	...

08004788 <HAL_InitTick>:
 8004788:	b580      	push	{r7, lr}
 800478a:	b084      	sub	sp, #16
 800478c:	af00      	add	r7, sp, #0
 800478e:	6078      	str	r0, [r7, #4]
 8004790:	2300      	movs	r3, #0
 8004792:	73fb      	strb	r3, [r7, #15]
 8004794:	4b16      	ldr	r3, [pc, #88]	; (80047f0 <HAL_InitTick+0x68>)
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d022      	beq.n	80047e2 <HAL_InitTick+0x5a>
 800479c:	4b15      	ldr	r3, [pc, #84]	; (80047f4 <HAL_InitTick+0x6c>)
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	4b13      	ldr	r3, [pc, #76]	; (80047f0 <HAL_InitTick+0x68>)
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80047a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80047ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80047b0:	4618      	mov	r0, r3
 80047b2:	f000 fd2a 	bl	800520a <HAL_SYSTICK_Config>
 80047b6:	4603      	mov	r3, r0
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d10f      	bne.n	80047dc <HAL_InitTick+0x54>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2b0f      	cmp	r3, #15
 80047c0:	d809      	bhi.n	80047d6 <HAL_InitTick+0x4e>
 80047c2:	2200      	movs	r2, #0
 80047c4:	6879      	ldr	r1, [r7, #4]
 80047c6:	f04f 30ff 	mov.w	r0, #4294967295
 80047ca:	f000 fcf4 	bl	80051b6 <HAL_NVIC_SetPriority>
 80047ce:	4a0a      	ldr	r2, [pc, #40]	; (80047f8 <HAL_InitTick+0x70>)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	e007      	b.n	80047e6 <HAL_InitTick+0x5e>
 80047d6:	2301      	movs	r3, #1
 80047d8:	73fb      	strb	r3, [r7, #15]
 80047da:	e004      	b.n	80047e6 <HAL_InitTick+0x5e>
 80047dc:	2301      	movs	r3, #1
 80047de:	73fb      	strb	r3, [r7, #15]
 80047e0:	e001      	b.n	80047e6 <HAL_InitTick+0x5e>
 80047e2:	2301      	movs	r3, #1
 80047e4:	73fb      	strb	r3, [r7, #15]
 80047e6:	7bfb      	ldrb	r3, [r7, #15]
 80047e8:	4618      	mov	r0, r3
 80047ea:	3710      	adds	r7, #16
 80047ec:	46bd      	mov	sp, r7
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	20000090 	.word	0x20000090
 80047f4:	20000088 	.word	0x20000088
 80047f8:	2000008c 	.word	0x2000008c

080047fc <HAL_IncTick>:
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
 8004800:	4b05      	ldr	r3, [pc, #20]	; (8004818 <HAL_IncTick+0x1c>)
 8004802:	681a      	ldr	r2, [r3, #0]
 8004804:	4b05      	ldr	r3, [pc, #20]	; (800481c <HAL_IncTick+0x20>)
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	4413      	add	r3, r2
 800480a:	4a03      	ldr	r2, [pc, #12]	; (8004818 <HAL_IncTick+0x1c>)
 800480c:	6013      	str	r3, [r2, #0]
 800480e:	bf00      	nop
 8004810:	46bd      	mov	sp, r7
 8004812:	bc80      	pop	{r7}
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	20000f00 	.word	0x20000f00
 800481c:	20000090 	.word	0x20000090

08004820 <HAL_GetTick>:
 8004820:	b480      	push	{r7}
 8004822:	af00      	add	r7, sp, #0
 8004824:	4b02      	ldr	r3, [pc, #8]	; (8004830 <HAL_GetTick+0x10>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	4618      	mov	r0, r3
 800482a:	46bd      	mov	sp, r7
 800482c:	bc80      	pop	{r7}
 800482e:	4770      	bx	lr
 8004830:	20000f00 	.word	0x20000f00

08004834 <HAL_Delay>:
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
 800483c:	f7ff fff0 	bl	8004820 <HAL_GetTick>
 8004840:	60b8      	str	r0, [r7, #8]
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	60fb      	str	r3, [r7, #12]
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	f1b3 3fff 	cmp.w	r3, #4294967295
 800484c:	d004      	beq.n	8004858 <HAL_Delay+0x24>
 800484e:	4b09      	ldr	r3, [pc, #36]	; (8004874 <HAL_Delay+0x40>)
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	68fa      	ldr	r2, [r7, #12]
 8004854:	4413      	add	r3, r2
 8004856:	60fb      	str	r3, [r7, #12]
 8004858:	bf00      	nop
 800485a:	f7ff ffe1 	bl	8004820 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	68bb      	ldr	r3, [r7, #8]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	68fa      	ldr	r2, [r7, #12]
 8004866:	429a      	cmp	r2, r3
 8004868:	d8f7      	bhi.n	800485a <HAL_Delay+0x26>
 800486a:	bf00      	nop
 800486c:	bf00      	nop
 800486e:	3710      	adds	r7, #16
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}
 8004874:	20000090 	.word	0x20000090

08004878 <HAL_ADC_Init>:
 8004878:	b580      	push	{r7, lr}
 800487a:	b08e      	sub	sp, #56	; 0x38
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	2300      	movs	r3, #0
 8004882:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004886:	2300      	movs	r3, #0
 8004888:	633b      	str	r3, [r7, #48]	; 0x30
 800488a:	2300      	movs	r3, #0
 800488c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_ADC_Init+0x20>
 8004894:	2301      	movs	r3, #1
 8004896:	e127      	b.n	8004ae8 <HAL_ADC_Init+0x270>
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	691b      	ldr	r3, [r3, #16]
 800489c:	2b00      	cmp	r3, #0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d115      	bne.n	80048d2 <HAL_ADC_Init+0x5a>
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	651a      	str	r2, [r3, #80]	; 0x50
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 80048b4:	4b8e      	ldr	r3, [pc, #568]	; (8004af0 <HAL_ADC_Init+0x278>)
 80048b6:	6a1b      	ldr	r3, [r3, #32]
 80048b8:	4a8d      	ldr	r2, [pc, #564]	; (8004af0 <HAL_ADC_Init+0x278>)
 80048ba:	f043 0301 	orr.w	r3, r3, #1
 80048be:	6213      	str	r3, [r2, #32]
 80048c0:	4b8b      	ldr	r3, [pc, #556]	; (8004af0 <HAL_ADC_Init+0x278>)
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	f003 0301 	and.w	r3, r3, #1
 80048c8:	60bb      	str	r3, [r7, #8]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f7ff fbe7 	bl	80040a0 <HAL_ADC_MspInit>
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048d6:	f003 0310 	and.w	r3, r3, #16
 80048da:	2b00      	cmp	r3, #0
 80048dc:	f040 80ff 	bne.w	8004ade <HAL_ADC_Init+0x266>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048e4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80048e8:	f023 0302 	bic.w	r3, r3, #2
 80048ec:	f043 0202 	orr.w	r2, r3, #2
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	64da      	str	r2, [r3, #76]	; 0x4c
 80048f4:	4b7f      	ldr	r3, [pc, #508]	; (8004af4 <HAL_ADC_Init+0x27c>)
 80048f6:	685b      	ldr	r3, [r3, #4]
 80048f8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	497c      	ldr	r1, [pc, #496]	; (8004af4 <HAL_ADC_Init+0x27c>)
 8004902:	4313      	orrs	r3, r2
 8004904:	604b      	str	r3, [r1, #4]
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	68da      	ldr	r2, [r3, #12]
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	695b      	ldr	r3, [r3, #20]
 800490e:	431a      	orrs	r2, r3
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004916:	4619      	mov	r1, r3
 8004918:	f44f 7300 	mov.w	r3, #512	; 0x200
 800491c:	623b      	str	r3, [r7, #32]
 800491e:	6a3b      	ldr	r3, [r7, #32]
 8004920:	fa93 f3a3 	rbit	r3, r3
 8004924:	61fb      	str	r3, [r7, #28]
 8004926:	69fb      	ldr	r3, [r7, #28]
 8004928:	fab3 f383 	clz	r3, r3
 800492c:	b2db      	uxtb	r3, r3
 800492e:	fa01 f303 	lsl.w	r3, r1, r3
 8004932:	431a      	orrs	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6a1b      	ldr	r3, [r3, #32]
 8004938:	431a      	orrs	r2, r3
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004940:	4619      	mov	r1, r3
 8004942:	2302      	movs	r3, #2
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
 8004946:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004948:	fa93 f3a3 	rbit	r3, r3
 800494c:	627b      	str	r3, [r7, #36]	; 0x24
 800494e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	4313      	orrs	r3, r2
 800495c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800495e:	4313      	orrs	r3, r2
 8004960:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004966:	2b10      	cmp	r3, #16
 8004968:	d007      	beq.n	800497a <HAL_ADC_Init+0x102>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	4313      	orrs	r3, r2
 8004974:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004976:	4313      	orrs	r3, r2
 8004978:	62fb      	str	r3, [r7, #44]	; 0x2c
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004984:	2b40      	cmp	r3, #64	; 0x40
 8004986:	d04f      	beq.n	8004a28 <HAL_ADC_Init+0x1b0>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	699b      	ldr	r3, [r3, #24]
 800498c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800498e:	4313      	orrs	r3, r2
 8004990:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	69db      	ldr	r3, [r3, #28]
 800499a:	4313      	orrs	r3, r2
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	6912      	ldr	r2, [r2, #16]
 80049a0:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 80049a4:	d003      	beq.n	80049ae <HAL_ADC_Init+0x136>
 80049a6:	687a      	ldr	r2, [r7, #4]
 80049a8:	6912      	ldr	r2, [r2, #16]
 80049aa:	2a01      	cmp	r2, #1
 80049ac:	d102      	bne.n	80049b4 <HAL_ADC_Init+0x13c>
 80049ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80049b2:	e000      	b.n	80049b6 <HAL_ADC_Init+0x13e>
 80049b4:	2200      	movs	r2, #0
 80049b6:	4313      	orrs	r3, r2
 80049b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049ba:	4313      	orrs	r3, r2
 80049bc:	633b      	str	r3, [r7, #48]	; 0x30
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80049c4:	2b01      	cmp	r3, #1
 80049c6:	d125      	bne.n	8004a14 <HAL_ADC_Init+0x19c>
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d114      	bne.n	80049fc <HAL_ADC_Init+0x184>
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049d6:	3b01      	subs	r3, #1
 80049d8:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 80049dc:	61ba      	str	r2, [r7, #24]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	fa92 f2a2 	rbit	r2, r2
 80049e4:	617a      	str	r2, [r7, #20]
 80049e6:	697a      	ldr	r2, [r7, #20]
 80049e8:	fab2 f282 	clz	r2, r2
 80049ec:	b2d2      	uxtb	r2, r2
 80049ee:	4093      	lsls	r3, r2
 80049f0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80049f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049f6:	4313      	orrs	r3, r2
 80049f8:	633b      	str	r3, [r7, #48]	; 0x30
 80049fa:	e00b      	b.n	8004a14 <HAL_ADC_Init+0x19c>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a00:	f043 0220 	orr.w	r2, r3, #32
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	64da      	str	r2, [r3, #76]	; 0x4c
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a0c:	f043 0201 	orr.w	r2, r3, #1
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	651a      	str	r2, [r3, #80]	; 0x50
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	4b37      	ldr	r3, [pc, #220]	; (8004af8 <HAL_ADC_Init+0x280>)
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	687a      	ldr	r2, [r7, #4]
 8004a20:	6812      	ldr	r2, [r2, #0]
 8004a22:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a24:	430b      	orrs	r3, r1
 8004a26:	6053      	str	r3, [r2, #4]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	689a      	ldr	r2, [r3, #8]
 8004a2e:	4b33      	ldr	r3, [pc, #204]	; (8004afc <HAL_ADC_Init+0x284>)
 8004a30:	4013      	ands	r3, r2
 8004a32:	687a      	ldr	r2, [r7, #4]
 8004a34:	6812      	ldr	r2, [r2, #0]
 8004a36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004a38:	430b      	orrs	r3, r1
 8004a3a:	6093      	str	r3, [r2, #8]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	691b      	ldr	r3, [r3, #16]
 8004a40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a44:	d003      	beq.n	8004a4e <HAL_ADC_Init+0x1d6>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	691b      	ldr	r3, [r3, #16]
 8004a4a:	2b01      	cmp	r3, #1
 8004a4c:	d119      	bne.n	8004a82 <HAL_ADC_Init+0x20a>
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a54:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8004a62:	613a      	str	r2, [r7, #16]
 8004a64:	693a      	ldr	r2, [r7, #16]
 8004a66:	fa92 f2a2 	rbit	r2, r2
 8004a6a:	60fa      	str	r2, [r7, #12]
 8004a6c:	68fa      	ldr	r2, [r7, #12]
 8004a6e:	fab2 f282 	clz	r2, r2
 8004a72:	b2d2      	uxtb	r2, r2
 8004a74:	fa03 f202 	lsl.w	r2, r3, r2
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	430a      	orrs	r2, r1
 8004a7e:	631a      	str	r2, [r3, #48]	; 0x30
 8004a80:	e007      	b.n	8004a92 <HAL_ADC_Init+0x21a>
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	689a      	ldr	r2, [r3, #8]
 8004a98:	4b19      	ldr	r3, [pc, #100]	; (8004b00 <HAL_ADC_Init+0x288>)
 8004a9a:	4013      	ands	r3, r2
 8004a9c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a9e:	429a      	cmp	r2, r3
 8004aa0:	d10b      	bne.n	8004aba <HAL_ADC_Init+0x242>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	651a      	str	r2, [r3, #80]	; 0x50
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004aac:	f023 0303 	bic.w	r3, r3, #3
 8004ab0:	f043 0201 	orr.w	r2, r3, #1
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	64da      	str	r2, [r3, #76]	; 0x4c
 8004ab8:	e014      	b.n	8004ae4 <HAL_ADC_Init+0x26c>
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004abe:	f023 0312 	bic.w	r3, r3, #18
 8004ac2:	f043 0210 	orr.w	r2, r3, #16
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	64da      	str	r2, [r3, #76]	; 0x4c
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ace:	f043 0201 	orr.w	r2, r3, #1
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	651a      	str	r2, [r3, #80]	; 0x50
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004adc:	e002      	b.n	8004ae4 <HAL_ADC_Init+0x26c>
 8004ade:	2301      	movs	r3, #1
 8004ae0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8004ae4:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3738      	adds	r7, #56	; 0x38
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}
 8004af0:	40023800 	.word	0x40023800
 8004af4:	40012700 	.word	0x40012700
 8004af8:	fcfc16ff 	.word	0xfcfc16ff
 8004afc:	c0fff18d 	.word	0xc0fff18d
 8004b00:	bf80fffe 	.word	0xbf80fffe

08004b04 <HAL_ADC_Start>:
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b084      	sub	sp, #16
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	73fb      	strb	r3, [r7, #15]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004b16:	2b01      	cmp	r3, #1
 8004b18:	d101      	bne.n	8004b1e <HAL_ADC_Start+0x1a>
 8004b1a:	2302      	movs	r3, #2
 8004b1c:	e04e      	b.n	8004bbc <HAL_ADC_Start+0xb8>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	2201      	movs	r2, #1
 8004b22:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004b26:	6878      	ldr	r0, [r7, #4]
 8004b28:	f000 fa12 	bl	8004f50 <ADC_Enable>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	73fb      	strb	r3, [r7, #15]
 8004b30:	7bfb      	ldrb	r3, [r7, #15]
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d141      	bne.n	8004bba <HAL_ADC_Start+0xb6>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004b3e:	f023 0301 	bic.w	r3, r3, #1
 8004b42:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	685b      	ldr	r3, [r3, #4]
 8004b50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d007      	beq.n	8004b68 <HAL_ADC_Start+0x64>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004b60:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	64da      	str	r2, [r3, #76]	; 0x4c
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b6c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004b70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b74:	d106      	bne.n	8004b84 <HAL_ADC_Start+0x80>
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b7a:	f023 0206 	bic.w	r2, r3, #6
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	651a      	str	r2, [r3, #80]	; 0x50
 8004b82:	e002      	b.n	8004b8a <HAL_ADC_Start+0x86>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	2200      	movs	r2, #0
 8004b88:	651a      	str	r2, [r3, #80]	; 0x50
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2200      	movs	r2, #0
 8004b8e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004b9a:	601a      	str	r2, [r3, #0]
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	689b      	ldr	r3, [r3, #8]
 8004ba2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d107      	bne.n	8004bba <HAL_ADC_Start+0xb6>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	689a      	ldr	r2, [r3, #8]
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004bb8:	609a      	str	r2, [r3, #8]
 8004bba:	7bfb      	ldrb	r3, [r7, #15]
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	3710      	adds	r7, #16
 8004bc0:	46bd      	mov	sp, r7
 8004bc2:	bd80      	pop	{r7, pc}

08004bc4 <HAL_ADC_Start_IT>:
 8004bc4:	b580      	push	{r7, lr}
 8004bc6:	b084      	sub	sp, #16
 8004bc8:	af00      	add	r7, sp, #0
 8004bca:	6078      	str	r0, [r7, #4]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	73fb      	strb	r3, [r7, #15]
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_ADC_Start_IT+0x1a>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e058      	b.n	8004c90 <HAL_ADC_Start_IT+0xcc>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9b2 	bl	8004f50 <ADC_Enable>
 8004bec:	4603      	mov	r3, r0
 8004bee:	73fb      	strb	r3, [r7, #15]
 8004bf0:	7bfb      	ldrb	r3, [r7, #15]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d14b      	bne.n	8004c8e <HAL_ADC_Start_IT+0xca>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004bfe:	f023 0301 	bic.w	r3, r3, #1
 8004c02:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	685b      	ldr	r3, [r3, #4]
 8004c10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d007      	beq.n	8004c28 <HAL_ADC_Start_IT+0x64>
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c1c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004c20:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	64da      	str	r2, [r3, #76]	; 0x4c
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004c30:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004c34:	d106      	bne.n	8004c44 <HAL_ADC_Start_IT+0x80>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c3a:	f023 0206 	bic.w	r2, r3, #6
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	651a      	str	r2, [r3, #80]	; 0x50
 8004c42:	e002      	b.n	8004c4a <HAL_ADC_Start_IT+0x86>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	651a      	str	r2, [r3, #80]	; 0x50
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2200      	movs	r2, #0
 8004c4e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8004c5a:	601a      	str	r2, [r3, #0]
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	685b      	ldr	r3, [r3, #4]
 8004c62:	687a      	ldr	r2, [r7, #4]
 8004c64:	6812      	ldr	r2, [r2, #0]
 8004c66:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004c6a:	f043 0320 	orr.w	r3, r3, #32
 8004c6e:	6053      	str	r3, [r2, #4]
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d107      	bne.n	8004c8e <HAL_ADC_Start_IT+0xca>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	689a      	ldr	r2, [r3, #8]
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	7bfb      	ldrb	r3, [r7, #15]
 8004c90:	4618      	mov	r0, r3
 8004c92:	3710      	adds	r7, #16
 8004c94:	46bd      	mov	sp, r7
 8004c96:	bd80      	pop	{r7, pc}

08004c98 <HAL_ADC_GetValue>:
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca6:	4618      	mov	r0, r3
 8004ca8:	370c      	adds	r7, #12
 8004caa:	46bd      	mov	sp, r7
 8004cac:	bc80      	pop	{r7}
 8004cae:	4770      	bx	lr

08004cb0 <HAL_ADC_ConfigChannel>:
 8004cb0:	b480      	push	{r7}
 8004cb2:	b085      	sub	sp, #20
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	6078      	str	r0, [r7, #4]
 8004cb8:	6039      	str	r1, [r7, #0]
 8004cba:	2300      	movs	r3, #0
 8004cbc:	73fb      	strb	r3, [r7, #15]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x20>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e134      	b.n	8004f3a <HAL_ADC_ConfigChannel+0x28a>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004cd8:	683b      	ldr	r3, [r7, #0]
 8004cda:	685b      	ldr	r3, [r3, #4]
 8004cdc:	2b06      	cmp	r3, #6
 8004cde:	d81c      	bhi.n	8004d1a <HAL_ADC_ConfigChannel+0x6a>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004ce6:	683b      	ldr	r3, [r7, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	4613      	mov	r3, r2
 8004cec:	009b      	lsls	r3, r3, #2
 8004cee:	4413      	add	r3, r2
 8004cf0:	3b05      	subs	r3, #5
 8004cf2:	221f      	movs	r2, #31
 8004cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8004cf8:	43db      	mvns	r3, r3
 8004cfa:	4019      	ands	r1, r3
 8004cfc:	683b      	ldr	r3, [r7, #0]
 8004cfe:	6818      	ldr	r0, [r3, #0]
 8004d00:	683b      	ldr	r3, [r7, #0]
 8004d02:	685a      	ldr	r2, [r3, #4]
 8004d04:	4613      	mov	r3, r2
 8004d06:	009b      	lsls	r3, r3, #2
 8004d08:	4413      	add	r3, r2
 8004d0a:	3b05      	subs	r3, #5
 8004d0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	430a      	orrs	r2, r1
 8004d16:	641a      	str	r2, [r3, #64]	; 0x40
 8004d18:	e07e      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x168>
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	685b      	ldr	r3, [r3, #4]
 8004d1e:	2b0c      	cmp	r3, #12
 8004d20:	d81c      	bhi.n	8004d5c <HAL_ADC_ConfigChannel+0xac>
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	4613      	mov	r3, r2
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	4413      	add	r3, r2
 8004d32:	3b23      	subs	r3, #35	; 0x23
 8004d34:	221f      	movs	r2, #31
 8004d36:	fa02 f303 	lsl.w	r3, r2, r3
 8004d3a:	43db      	mvns	r3, r3
 8004d3c:	4019      	ands	r1, r3
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	6818      	ldr	r0, [r3, #0]
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	685a      	ldr	r2, [r3, #4]
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	3b23      	subs	r3, #35	; 0x23
 8004d4e:	fa00 f203 	lsl.w	r2, r0, r3
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	430a      	orrs	r2, r1
 8004d58:	63da      	str	r2, [r3, #60]	; 0x3c
 8004d5a:	e05d      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x168>
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	685b      	ldr	r3, [r3, #4]
 8004d60:	2b12      	cmp	r3, #18
 8004d62:	d81c      	bhi.n	8004d9e <HAL_ADC_ConfigChannel+0xee>
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	685a      	ldr	r2, [r3, #4]
 8004d6e:	4613      	mov	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4413      	add	r3, r2
 8004d74:	3b41      	subs	r3, #65	; 0x41
 8004d76:	221f      	movs	r2, #31
 8004d78:	fa02 f303 	lsl.w	r3, r2, r3
 8004d7c:	43db      	mvns	r3, r3
 8004d7e:	4019      	ands	r1, r3
 8004d80:	683b      	ldr	r3, [r7, #0]
 8004d82:	6818      	ldr	r0, [r3, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]
 8004d86:	685a      	ldr	r2, [r3, #4]
 8004d88:	4613      	mov	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4413      	add	r3, r2
 8004d8e:	3b41      	subs	r3, #65	; 0x41
 8004d90:	fa00 f203 	lsl.w	r2, r0, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	430a      	orrs	r2, r1
 8004d9a:	639a      	str	r2, [r3, #56]	; 0x38
 8004d9c:	e03c      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x168>
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	2b18      	cmp	r3, #24
 8004da4:	d81c      	bhi.n	8004de0 <HAL_ADC_ConfigChannel+0x130>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	4613      	mov	r3, r2
 8004db2:	009b      	lsls	r3, r3, #2
 8004db4:	4413      	add	r3, r2
 8004db6:	3b5f      	subs	r3, #95	; 0x5f
 8004db8:	221f      	movs	r2, #31
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	43db      	mvns	r3, r3
 8004dc0:	4019      	ands	r1, r3
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6818      	ldr	r0, [r3, #0]
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	685a      	ldr	r2, [r3, #4]
 8004dca:	4613      	mov	r3, r2
 8004dcc:	009b      	lsls	r3, r3, #2
 8004dce:	4413      	add	r3, r2
 8004dd0:	3b5f      	subs	r3, #95	; 0x5f
 8004dd2:	fa00 f203 	lsl.w	r2, r0, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	430a      	orrs	r2, r1
 8004ddc:	635a      	str	r2, [r3, #52]	; 0x34
 8004dde:	e01b      	b.n	8004e18 <HAL_ADC_ConfigChannel+0x168>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	685a      	ldr	r2, [r3, #4]
 8004dea:	4613      	mov	r3, r2
 8004dec:	009b      	lsls	r3, r3, #2
 8004dee:	4413      	add	r3, r2
 8004df0:	3b7d      	subs	r3, #125	; 0x7d
 8004df2:	221f      	movs	r2, #31
 8004df4:	fa02 f303 	lsl.w	r3, r2, r3
 8004df8:	43db      	mvns	r3, r3
 8004dfa:	4019      	ands	r1, r3
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	6818      	ldr	r0, [r3, #0]
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685a      	ldr	r2, [r3, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	3b7d      	subs	r3, #125	; 0x7d
 8004e0c:	fa00 f203 	lsl.w	r2, r0, r3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	430a      	orrs	r2, r1
 8004e16:	631a      	str	r2, [r3, #48]	; 0x30
 8004e18:	683b      	ldr	r3, [r7, #0]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	2b09      	cmp	r3, #9
 8004e1e:	d81a      	bhi.n	8004e56 <HAL_ADC_ConfigChannel+0x1a6>
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	6959      	ldr	r1, [r3, #20]
 8004e26:	683b      	ldr	r3, [r7, #0]
 8004e28:	681a      	ldr	r2, [r3, #0]
 8004e2a:	4613      	mov	r3, r2
 8004e2c:	005b      	lsls	r3, r3, #1
 8004e2e:	4413      	add	r3, r2
 8004e30:	2207      	movs	r2, #7
 8004e32:	fa02 f303 	lsl.w	r3, r2, r3
 8004e36:	43db      	mvns	r3, r3
 8004e38:	4019      	ands	r1, r3
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6898      	ldr	r0, [r3, #8]
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	4613      	mov	r3, r2
 8004e44:	005b      	lsls	r3, r3, #1
 8004e46:	4413      	add	r3, r2
 8004e48:	fa00 f203 	lsl.w	r2, r0, r3
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	430a      	orrs	r2, r1
 8004e52:	615a      	str	r2, [r3, #20]
 8004e54:	e042      	b.n	8004edc <HAL_ADC_ConfigChannel+0x22c>
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	2b13      	cmp	r3, #19
 8004e5c:	d81c      	bhi.n	8004e98 <HAL_ADC_ConfigChannel+0x1e8>
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	6919      	ldr	r1, [r3, #16]
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	4613      	mov	r3, r2
 8004e6a:	005b      	lsls	r3, r3, #1
 8004e6c:	4413      	add	r3, r2
 8004e6e:	3b1e      	subs	r3, #30
 8004e70:	2207      	movs	r2, #7
 8004e72:	fa02 f303 	lsl.w	r3, r2, r3
 8004e76:	43db      	mvns	r3, r3
 8004e78:	4019      	ands	r1, r3
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	6898      	ldr	r0, [r3, #8]
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	4613      	mov	r3, r2
 8004e84:	005b      	lsls	r3, r3, #1
 8004e86:	4413      	add	r3, r2
 8004e88:	3b1e      	subs	r3, #30
 8004e8a:	fa00 f203 	lsl.w	r2, r0, r3
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	430a      	orrs	r2, r1
 8004e94:	611a      	str	r2, [r3, #16]
 8004e96:	e021      	b.n	8004edc <HAL_ADC_ConfigChannel+0x22c>
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	2b1a      	cmp	r3, #26
 8004e9e:	d81c      	bhi.n	8004eda <HAL_ADC_ConfigChannel+0x22a>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68d9      	ldr	r1, [r3, #12]
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	681a      	ldr	r2, [r3, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	005b      	lsls	r3, r3, #1
 8004eae:	4413      	add	r3, r2
 8004eb0:	3b3c      	subs	r3, #60	; 0x3c
 8004eb2:	2207      	movs	r2, #7
 8004eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb8:	43db      	mvns	r3, r3
 8004eba:	4019      	ands	r1, r3
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6898      	ldr	r0, [r3, #8]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	4613      	mov	r3, r2
 8004ec6:	005b      	lsls	r3, r3, #1
 8004ec8:	4413      	add	r3, r2
 8004eca:	3b3c      	subs	r3, #60	; 0x3c
 8004ecc:	fa00 f203 	lsl.w	r2, r0, r3
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	430a      	orrs	r2, r1
 8004ed6:	60da      	str	r2, [r3, #12]
 8004ed8:	e000      	b.n	8004edc <HAL_ADC_ConfigChannel+0x22c>
 8004eda:	bf00      	nop
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d003      	beq.n	8004eec <HAL_ADC_ConfigChannel+0x23c>
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	2b11      	cmp	r3, #17
 8004eea:	d121      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x280>
 8004eec:	4b15      	ldr	r3, [pc, #84]	; (8004f44 <HAL_ADC_ConfigChannel+0x294>)
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d11b      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x280>
 8004ef8:	4b12      	ldr	r3, [pc, #72]	; (8004f44 <HAL_ADC_ConfigChannel+0x294>)
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4a11      	ldr	r2, [pc, #68]	; (8004f44 <HAL_ADC_ConfigChannel+0x294>)
 8004efe:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004f02:	6053      	str	r3, [r2, #4]
 8004f04:	683b      	ldr	r3, [r7, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b10      	cmp	r3, #16
 8004f0a:	d111      	bne.n	8004f30 <HAL_ADC_ConfigChannel+0x280>
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <HAL_ADC_ConfigChannel+0x298>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	4a0e      	ldr	r2, [pc, #56]	; (8004f4c <HAL_ADC_ConfigChannel+0x29c>)
 8004f12:	fba2 2303 	umull	r2, r3, r2, r3
 8004f16:	0c9a      	lsrs	r2, r3, #18
 8004f18:	4613      	mov	r3, r2
 8004f1a:	009b      	lsls	r3, r3, #2
 8004f1c:	4413      	add	r3, r2
 8004f1e:	005b      	lsls	r3, r3, #1
 8004f20:	60bb      	str	r3, [r7, #8]
 8004f22:	e002      	b.n	8004f2a <HAL_ADC_ConfigChannel+0x27a>
 8004f24:	68bb      	ldr	r3, [r7, #8]
 8004f26:	3b01      	subs	r3, #1
 8004f28:	60bb      	str	r3, [r7, #8]
 8004f2a:	68bb      	ldr	r3, [r7, #8]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d1f9      	bne.n	8004f24 <HAL_ADC_ConfigChannel+0x274>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2200      	movs	r2, #0
 8004f34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004f38:	7bfb      	ldrb	r3, [r7, #15]
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bc80      	pop	{r7}
 8004f42:	4770      	bx	lr
 8004f44:	40012700 	.word	0x40012700
 8004f48:	20000088 	.word	0x20000088
 8004f4c:	431bde83 	.word	0x431bde83

08004f50 <ADC_Enable>:
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	2300      	movs	r3, #0
 8004f5a:	60fb      	str	r3, [r7, #12]
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	60bb      	str	r3, [r7, #8]
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f6a:	2b40      	cmp	r3, #64	; 0x40
 8004f6c:	d043      	beq.n	8004ff6 <ADC_Enable+0xa6>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689a      	ldr	r2, [r3, #8]
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	f042 0201 	orr.w	r2, r2, #1
 8004f7c:	609a      	str	r2, [r3, #8]
 8004f7e:	4b20      	ldr	r3, [pc, #128]	; (8005000 <ADC_Enable+0xb0>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a20      	ldr	r2, [pc, #128]	; (8005004 <ADC_Enable+0xb4>)
 8004f84:	fba2 2303 	umull	r2, r3, r2, r3
 8004f88:	0c9a      	lsrs	r2, r3, #18
 8004f8a:	4613      	mov	r3, r2
 8004f8c:	005b      	lsls	r3, r3, #1
 8004f8e:	4413      	add	r3, r2
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	e002      	b.n	8004f9a <ADC_Enable+0x4a>
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	3b01      	subs	r3, #1
 8004f98:	60bb      	str	r3, [r7, #8]
 8004f9a:	68bb      	ldr	r3, [r7, #8]
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d1f9      	bne.n	8004f94 <ADC_Enable+0x44>
 8004fa0:	f7ff fc3e 	bl	8004820 <HAL_GetTick>
 8004fa4:	60f8      	str	r0, [r7, #12]
 8004fa6:	e01f      	b.n	8004fe8 <ADC_Enable+0x98>
 8004fa8:	f7ff fc3a 	bl	8004820 <HAL_GetTick>
 8004fac:	4602      	mov	r2, r0
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	2b02      	cmp	r3, #2
 8004fb4:	d918      	bls.n	8004fe8 <ADC_Enable+0x98>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004fc0:	2b40      	cmp	r3, #64	; 0x40
 8004fc2:	d011      	beq.n	8004fe8 <ADC_Enable+0x98>
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004fc8:	f043 0210 	orr.w	r2, r3, #16
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	64da      	str	r2, [r3, #76]	; 0x4c
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004fd4:	f043 0201 	orr.w	r2, r3, #1
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	651a      	str	r2, [r3, #80]	; 0x50
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e007      	b.n	8004ff8 <ADC_Enable+0xa8>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ff2:	2b40      	cmp	r3, #64	; 0x40
 8004ff4:	d1d8      	bne.n	8004fa8 <ADC_Enable+0x58>
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	3710      	adds	r7, #16
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	bd80      	pop	{r7, pc}
 8005000:	20000088 	.word	0x20000088
 8005004:	431bde83 	.word	0x431bde83

08005008 <__NVIC_SetPriorityGrouping>:
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f003 0307 	and.w	r3, r3, #7
 8005016:	60fb      	str	r3, [r7, #12]
 8005018:	4b0c      	ldr	r3, [pc, #48]	; (800504c <__NVIC_SetPriorityGrouping+0x44>)
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	68ba      	ldr	r2, [r7, #8]
 8005020:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005024:	4013      	ands	r3, r2
 8005026:	60bb      	str	r3, [r7, #8]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	021a      	lsls	r2, r3, #8
 800502c:	68bb      	ldr	r3, [r7, #8]
 800502e:	4313      	orrs	r3, r2
 8005030:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005034:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005038:	60bb      	str	r3, [r7, #8]
 800503a:	4a04      	ldr	r2, [pc, #16]	; (800504c <__NVIC_SetPriorityGrouping+0x44>)
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	60d3      	str	r3, [r2, #12]
 8005040:	bf00      	nop
 8005042:	3714      	adds	r7, #20
 8005044:	46bd      	mov	sp, r7
 8005046:	bc80      	pop	{r7}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop
 800504c:	e000ed00 	.word	0xe000ed00

08005050 <__NVIC_GetPriorityGrouping>:
 8005050:	b480      	push	{r7}
 8005052:	af00      	add	r7, sp, #0
 8005054:	4b04      	ldr	r3, [pc, #16]	; (8005068 <__NVIC_GetPriorityGrouping+0x18>)
 8005056:	68db      	ldr	r3, [r3, #12]
 8005058:	0a1b      	lsrs	r3, r3, #8
 800505a:	f003 0307 	and.w	r3, r3, #7
 800505e:	4618      	mov	r0, r3
 8005060:	46bd      	mov	sp, r7
 8005062:	bc80      	pop	{r7}
 8005064:	4770      	bx	lr
 8005066:	bf00      	nop
 8005068:	e000ed00 	.word	0xe000ed00

0800506c <__NVIC_EnableIRQ>:
 800506c:	b480      	push	{r7}
 800506e:	b083      	sub	sp, #12
 8005070:	af00      	add	r7, sp, #0
 8005072:	4603      	mov	r3, r0
 8005074:	71fb      	strb	r3, [r7, #7]
 8005076:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800507a:	2b00      	cmp	r3, #0
 800507c:	db0b      	blt.n	8005096 <__NVIC_EnableIRQ+0x2a>
 800507e:	79fb      	ldrb	r3, [r7, #7]
 8005080:	f003 021f 	and.w	r2, r3, #31
 8005084:	4906      	ldr	r1, [pc, #24]	; (80050a0 <__NVIC_EnableIRQ+0x34>)
 8005086:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	2001      	movs	r0, #1
 800508e:	fa00 f202 	lsl.w	r2, r0, r2
 8005092:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005096:	bf00      	nop
 8005098:	370c      	adds	r7, #12
 800509a:	46bd      	mov	sp, r7
 800509c:	bc80      	pop	{r7}
 800509e:	4770      	bx	lr
 80050a0:	e000e100 	.word	0xe000e100

080050a4 <__NVIC_SetPriority>:
 80050a4:	b480      	push	{r7}
 80050a6:	b083      	sub	sp, #12
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	4603      	mov	r3, r0
 80050ac:	6039      	str	r1, [r7, #0]
 80050ae:	71fb      	strb	r3, [r7, #7]
 80050b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	db0a      	blt.n	80050ce <__NVIC_SetPriority+0x2a>
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	490c      	ldr	r1, [pc, #48]	; (80050f0 <__NVIC_SetPriority+0x4c>)
 80050be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80050c2:	0112      	lsls	r2, r2, #4
 80050c4:	b2d2      	uxtb	r2, r2
 80050c6:	440b      	add	r3, r1
 80050c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
 80050cc:	e00a      	b.n	80050e4 <__NVIC_SetPriority+0x40>
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	b2da      	uxtb	r2, r3
 80050d2:	4908      	ldr	r1, [pc, #32]	; (80050f4 <__NVIC_SetPriority+0x50>)
 80050d4:	79fb      	ldrb	r3, [r7, #7]
 80050d6:	f003 030f 	and.w	r3, r3, #15
 80050da:	3b04      	subs	r3, #4
 80050dc:	0112      	lsls	r2, r2, #4
 80050de:	b2d2      	uxtb	r2, r2
 80050e0:	440b      	add	r3, r1
 80050e2:	761a      	strb	r2, [r3, #24]
 80050e4:	bf00      	nop
 80050e6:	370c      	adds	r7, #12
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bc80      	pop	{r7}
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	e000e100 	.word	0xe000e100
 80050f4:	e000ed00 	.word	0xe000ed00

080050f8 <NVIC_EncodePriority>:
 80050f8:	b480      	push	{r7}
 80050fa:	b089      	sub	sp, #36	; 0x24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	60f8      	str	r0, [r7, #12]
 8005100:	60b9      	str	r1, [r7, #8]
 8005102:	607a      	str	r2, [r7, #4]
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	f003 0307 	and.w	r3, r3, #7
 800510a:	61fb      	str	r3, [r7, #28]
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	f1c3 0307 	rsb	r3, r3, #7
 8005112:	2b04      	cmp	r3, #4
 8005114:	bf28      	it	cs
 8005116:	2304      	movcs	r3, #4
 8005118:	61bb      	str	r3, [r7, #24]
 800511a:	69fb      	ldr	r3, [r7, #28]
 800511c:	3304      	adds	r3, #4
 800511e:	2b06      	cmp	r3, #6
 8005120:	d902      	bls.n	8005128 <NVIC_EncodePriority+0x30>
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	3b03      	subs	r3, #3
 8005126:	e000      	b.n	800512a <NVIC_EncodePriority+0x32>
 8005128:	2300      	movs	r3, #0
 800512a:	617b      	str	r3, [r7, #20]
 800512c:	f04f 32ff 	mov.w	r2, #4294967295
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	fa02 f303 	lsl.w	r3, r2, r3
 8005136:	43da      	mvns	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	401a      	ands	r2, r3
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	409a      	lsls	r2, r3
 8005140:	f04f 31ff 	mov.w	r1, #4294967295
 8005144:	697b      	ldr	r3, [r7, #20]
 8005146:	fa01 f303 	lsl.w	r3, r1, r3
 800514a:	43d9      	mvns	r1, r3
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	400b      	ands	r3, r1
 8005150:	4313      	orrs	r3, r2
 8005152:	4618      	mov	r0, r3
 8005154:	3724      	adds	r7, #36	; 0x24
 8005156:	46bd      	mov	sp, r7
 8005158:	bc80      	pop	{r7}
 800515a:	4770      	bx	lr

0800515c <SysTick_Config>:
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	3b01      	subs	r3, #1
 8005168:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800516c:	d301      	bcc.n	8005172 <SysTick_Config+0x16>
 800516e:	2301      	movs	r3, #1
 8005170:	e00f      	b.n	8005192 <SysTick_Config+0x36>
 8005172:	4a0a      	ldr	r2, [pc, #40]	; (800519c <SysTick_Config+0x40>)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	3b01      	subs	r3, #1
 8005178:	6053      	str	r3, [r2, #4]
 800517a:	210f      	movs	r1, #15
 800517c:	f04f 30ff 	mov.w	r0, #4294967295
 8005180:	f7ff ff90 	bl	80050a4 <__NVIC_SetPriority>
 8005184:	4b05      	ldr	r3, [pc, #20]	; (800519c <SysTick_Config+0x40>)
 8005186:	2200      	movs	r2, #0
 8005188:	609a      	str	r2, [r3, #8]
 800518a:	4b04      	ldr	r3, [pc, #16]	; (800519c <SysTick_Config+0x40>)
 800518c:	2207      	movs	r2, #7
 800518e:	601a      	str	r2, [r3, #0]
 8005190:	2300      	movs	r3, #0
 8005192:	4618      	mov	r0, r3
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	e000e010 	.word	0xe000e010

080051a0 <HAL_NVIC_SetPriorityGrouping>:
 80051a0:	b580      	push	{r7, lr}
 80051a2:	b082      	sub	sp, #8
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
 80051a8:	6878      	ldr	r0, [r7, #4]
 80051aa:	f7ff ff2d 	bl	8005008 <__NVIC_SetPriorityGrouping>
 80051ae:	bf00      	nop
 80051b0:	3708      	adds	r7, #8
 80051b2:	46bd      	mov	sp, r7
 80051b4:	bd80      	pop	{r7, pc}

080051b6 <HAL_NVIC_SetPriority>:
 80051b6:	b580      	push	{r7, lr}
 80051b8:	b086      	sub	sp, #24
 80051ba:	af00      	add	r7, sp, #0
 80051bc:	4603      	mov	r3, r0
 80051be:	60b9      	str	r1, [r7, #8]
 80051c0:	607a      	str	r2, [r7, #4]
 80051c2:	73fb      	strb	r3, [r7, #15]
 80051c4:	2300      	movs	r3, #0
 80051c6:	617b      	str	r3, [r7, #20]
 80051c8:	f7ff ff42 	bl	8005050 <__NVIC_GetPriorityGrouping>
 80051cc:	6178      	str	r0, [r7, #20]
 80051ce:	687a      	ldr	r2, [r7, #4]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	6978      	ldr	r0, [r7, #20]
 80051d4:	f7ff ff90 	bl	80050f8 <NVIC_EncodePriority>
 80051d8:	4602      	mov	r2, r0
 80051da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051de:	4611      	mov	r1, r2
 80051e0:	4618      	mov	r0, r3
 80051e2:	f7ff ff5f 	bl	80050a4 <__NVIC_SetPriority>
 80051e6:	bf00      	nop
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_NVIC_EnableIRQ>:
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b082      	sub	sp, #8
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	4603      	mov	r3, r0
 80051f6:	71fb      	strb	r3, [r7, #7]
 80051f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80051fc:	4618      	mov	r0, r3
 80051fe:	f7ff ff35 	bl	800506c <__NVIC_EnableIRQ>
 8005202:	bf00      	nop
 8005204:	3708      	adds	r7, #8
 8005206:	46bd      	mov	sp, r7
 8005208:	bd80      	pop	{r7, pc}

0800520a <HAL_SYSTICK_Config>:
 800520a:	b580      	push	{r7, lr}
 800520c:	b082      	sub	sp, #8
 800520e:	af00      	add	r7, sp, #0
 8005210:	6078      	str	r0, [r7, #4]
 8005212:	6878      	ldr	r0, [r7, #4]
 8005214:	f7ff ffa2 	bl	800515c <SysTick_Config>
 8005218:	4603      	mov	r3, r0
 800521a:	4618      	mov	r0, r3
 800521c:	3708      	adds	r7, #8
 800521e:	46bd      	mov	sp, r7
 8005220:	bd80      	pop	{r7, pc}
	...

08005224 <HAL_GPIO_Init>:
 8005224:	b480      	push	{r7}
 8005226:	b087      	sub	sp, #28
 8005228:	af00      	add	r7, sp, #0
 800522a:	6078      	str	r0, [r7, #4]
 800522c:	6039      	str	r1, [r7, #0]
 800522e:	2300      	movs	r3, #0
 8005230:	617b      	str	r3, [r7, #20]
 8005232:	2300      	movs	r3, #0
 8005234:	60fb      	str	r3, [r7, #12]
 8005236:	2300      	movs	r3, #0
 8005238:	613b      	str	r3, [r7, #16]
 800523a:	e154      	b.n	80054e6 <HAL_GPIO_Init+0x2c2>
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	2101      	movs	r1, #1
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	fa01 f303 	lsl.w	r3, r1, r3
 8005248:	4013      	ands	r3, r2
 800524a:	60fb      	str	r3, [r7, #12]
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8146 	beq.w	80054e0 <HAL_GPIO_Init+0x2bc>
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	685b      	ldr	r3, [r3, #4]
 8005258:	f003 0303 	and.w	r3, r3, #3
 800525c:	2b01      	cmp	r3, #1
 800525e:	d005      	beq.n	800526c <HAL_GPIO_Init+0x48>
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f003 0303 	and.w	r3, r3, #3
 8005268:	2b02      	cmp	r3, #2
 800526a:	d130      	bne.n	80052ce <HAL_GPIO_Init+0xaa>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	689b      	ldr	r3, [r3, #8]
 8005270:	613b      	str	r3, [r7, #16]
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	005b      	lsls	r3, r3, #1
 8005276:	2203      	movs	r2, #3
 8005278:	fa02 f303 	lsl.w	r3, r2, r3
 800527c:	43db      	mvns	r3, r3
 800527e:	693a      	ldr	r2, [r7, #16]
 8005280:	4013      	ands	r3, r2
 8005282:	613b      	str	r3, [r7, #16]
 8005284:	683b      	ldr	r3, [r7, #0]
 8005286:	68da      	ldr	r2, [r3, #12]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	005b      	lsls	r3, r3, #1
 800528c:	fa02 f303 	lsl.w	r3, r2, r3
 8005290:	693a      	ldr	r2, [r7, #16]
 8005292:	4313      	orrs	r3, r2
 8005294:	613b      	str	r3, [r7, #16]
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	693a      	ldr	r2, [r7, #16]
 800529a:	609a      	str	r2, [r3, #8]
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	685b      	ldr	r3, [r3, #4]
 80052a0:	613b      	str	r3, [r7, #16]
 80052a2:	2201      	movs	r2, #1
 80052a4:	697b      	ldr	r3, [r7, #20]
 80052a6:	fa02 f303 	lsl.w	r3, r2, r3
 80052aa:	43db      	mvns	r3, r3
 80052ac:	693a      	ldr	r2, [r7, #16]
 80052ae:	4013      	ands	r3, r2
 80052b0:	613b      	str	r3, [r7, #16]
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	685b      	ldr	r3, [r3, #4]
 80052b6:	091b      	lsrs	r3, r3, #4
 80052b8:	f003 0201 	and.w	r2, r3, #1
 80052bc:	697b      	ldr	r3, [r7, #20]
 80052be:	fa02 f303 	lsl.w	r3, r2, r3
 80052c2:	693a      	ldr	r2, [r7, #16]
 80052c4:	4313      	orrs	r3, r2
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	693a      	ldr	r2, [r7, #16]
 80052cc:	605a      	str	r2, [r3, #4]
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	f003 0303 	and.w	r3, r3, #3
 80052d6:	2b03      	cmp	r3, #3
 80052d8:	d017      	beq.n	800530a <HAL_GPIO_Init+0xe6>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	68db      	ldr	r3, [r3, #12]
 80052de:	613b      	str	r3, [r7, #16]
 80052e0:	697b      	ldr	r3, [r7, #20]
 80052e2:	005b      	lsls	r3, r3, #1
 80052e4:	2203      	movs	r2, #3
 80052e6:	fa02 f303 	lsl.w	r3, r2, r3
 80052ea:	43db      	mvns	r3, r3
 80052ec:	693a      	ldr	r2, [r7, #16]
 80052ee:	4013      	ands	r3, r2
 80052f0:	613b      	str	r3, [r7, #16]
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	689a      	ldr	r2, [r3, #8]
 80052f6:	697b      	ldr	r3, [r7, #20]
 80052f8:	005b      	lsls	r3, r3, #1
 80052fa:	fa02 f303 	lsl.w	r3, r2, r3
 80052fe:	693a      	ldr	r2, [r7, #16]
 8005300:	4313      	orrs	r3, r2
 8005302:	613b      	str	r3, [r7, #16]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	693a      	ldr	r2, [r7, #16]
 8005308:	60da      	str	r2, [r3, #12]
 800530a:	683b      	ldr	r3, [r7, #0]
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	f003 0303 	and.w	r3, r3, #3
 8005312:	2b02      	cmp	r3, #2
 8005314:	d123      	bne.n	800535e <HAL_GPIO_Init+0x13a>
 8005316:	697b      	ldr	r3, [r7, #20]
 8005318:	08da      	lsrs	r2, r3, #3
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	3208      	adds	r2, #8
 800531e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	697b      	ldr	r3, [r7, #20]
 8005326:	f003 0307 	and.w	r3, r3, #7
 800532a:	009b      	lsls	r3, r3, #2
 800532c:	220f      	movs	r2, #15
 800532e:	fa02 f303 	lsl.w	r3, r2, r3
 8005332:	43db      	mvns	r3, r3
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	4013      	ands	r3, r2
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	691a      	ldr	r2, [r3, #16]
 800533e:	697b      	ldr	r3, [r7, #20]
 8005340:	f003 0307 	and.w	r3, r3, #7
 8005344:	009b      	lsls	r3, r3, #2
 8005346:	fa02 f303 	lsl.w	r3, r2, r3
 800534a:	693a      	ldr	r2, [r7, #16]
 800534c:	4313      	orrs	r3, r2
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	697b      	ldr	r3, [r7, #20]
 8005352:	08da      	lsrs	r2, r3, #3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	3208      	adds	r2, #8
 8005358:	6939      	ldr	r1, [r7, #16]
 800535a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	613b      	str	r3, [r7, #16]
 8005364:	697b      	ldr	r3, [r7, #20]
 8005366:	005b      	lsls	r3, r3, #1
 8005368:	2203      	movs	r2, #3
 800536a:	fa02 f303 	lsl.w	r3, r2, r3
 800536e:	43db      	mvns	r3, r3
 8005370:	693a      	ldr	r2, [r7, #16]
 8005372:	4013      	ands	r3, r2
 8005374:	613b      	str	r3, [r7, #16]
 8005376:	683b      	ldr	r3, [r7, #0]
 8005378:	685b      	ldr	r3, [r3, #4]
 800537a:	f003 0203 	and.w	r2, r3, #3
 800537e:	697b      	ldr	r3, [r7, #20]
 8005380:	005b      	lsls	r3, r3, #1
 8005382:	fa02 f303 	lsl.w	r3, r2, r3
 8005386:	693a      	ldr	r2, [r7, #16]
 8005388:	4313      	orrs	r3, r2
 800538a:	613b      	str	r3, [r7, #16]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	601a      	str	r2, [r3, #0]
 8005392:	683b      	ldr	r3, [r7, #0]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800539a:	2b00      	cmp	r3, #0
 800539c:	f000 80a0 	beq.w	80054e0 <HAL_GPIO_Init+0x2bc>
 80053a0:	4b58      	ldr	r3, [pc, #352]	; (8005504 <HAL_GPIO_Init+0x2e0>)
 80053a2:	6a1b      	ldr	r3, [r3, #32]
 80053a4:	4a57      	ldr	r2, [pc, #348]	; (8005504 <HAL_GPIO_Init+0x2e0>)
 80053a6:	f043 0301 	orr.w	r3, r3, #1
 80053aa:	6213      	str	r3, [r2, #32]
 80053ac:	4b55      	ldr	r3, [pc, #340]	; (8005504 <HAL_GPIO_Init+0x2e0>)
 80053ae:	6a1b      	ldr	r3, [r3, #32]
 80053b0:	f003 0301 	and.w	r3, r3, #1
 80053b4:	60bb      	str	r3, [r7, #8]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	4a53      	ldr	r2, [pc, #332]	; (8005508 <HAL_GPIO_Init+0x2e4>)
 80053ba:	697b      	ldr	r3, [r7, #20]
 80053bc:	089b      	lsrs	r3, r3, #2
 80053be:	3302      	adds	r3, #2
 80053c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053c4:	613b      	str	r3, [r7, #16]
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	f003 0303 	and.w	r3, r3, #3
 80053cc:	009b      	lsls	r3, r3, #2
 80053ce:	220f      	movs	r2, #15
 80053d0:	fa02 f303 	lsl.w	r3, r2, r3
 80053d4:	43db      	mvns	r3, r3
 80053d6:	693a      	ldr	r2, [r7, #16]
 80053d8:	4013      	ands	r3, r2
 80053da:	613b      	str	r3, [r7, #16]
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	4a4b      	ldr	r2, [pc, #300]	; (800550c <HAL_GPIO_Init+0x2e8>)
 80053e0:	4293      	cmp	r3, r2
 80053e2:	d019      	beq.n	8005418 <HAL_GPIO_Init+0x1f4>
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	4a4a      	ldr	r2, [pc, #296]	; (8005510 <HAL_GPIO_Init+0x2ec>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d013      	beq.n	8005414 <HAL_GPIO_Init+0x1f0>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	4a49      	ldr	r2, [pc, #292]	; (8005514 <HAL_GPIO_Init+0x2f0>)
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d00d      	beq.n	8005410 <HAL_GPIO_Init+0x1ec>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	4a48      	ldr	r2, [pc, #288]	; (8005518 <HAL_GPIO_Init+0x2f4>)
 80053f8:	4293      	cmp	r3, r2
 80053fa:	d007      	beq.n	800540c <HAL_GPIO_Init+0x1e8>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	4a47      	ldr	r2, [pc, #284]	; (800551c <HAL_GPIO_Init+0x2f8>)
 8005400:	4293      	cmp	r3, r2
 8005402:	d101      	bne.n	8005408 <HAL_GPIO_Init+0x1e4>
 8005404:	2304      	movs	r3, #4
 8005406:	e008      	b.n	800541a <HAL_GPIO_Init+0x1f6>
 8005408:	2305      	movs	r3, #5
 800540a:	e006      	b.n	800541a <HAL_GPIO_Init+0x1f6>
 800540c:	2303      	movs	r3, #3
 800540e:	e004      	b.n	800541a <HAL_GPIO_Init+0x1f6>
 8005410:	2302      	movs	r3, #2
 8005412:	e002      	b.n	800541a <HAL_GPIO_Init+0x1f6>
 8005414:	2301      	movs	r3, #1
 8005416:	e000      	b.n	800541a <HAL_GPIO_Init+0x1f6>
 8005418:	2300      	movs	r3, #0
 800541a:	697a      	ldr	r2, [r7, #20]
 800541c:	f002 0203 	and.w	r2, r2, #3
 8005420:	0092      	lsls	r2, r2, #2
 8005422:	4093      	lsls	r3, r2
 8005424:	693a      	ldr	r2, [r7, #16]
 8005426:	4313      	orrs	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
 800542a:	4937      	ldr	r1, [pc, #220]	; (8005508 <HAL_GPIO_Init+0x2e4>)
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	089b      	lsrs	r3, r3, #2
 8005430:	3302      	adds	r3, #2
 8005432:	693a      	ldr	r2, [r7, #16]
 8005434:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8005438:	4b39      	ldr	r3, [pc, #228]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	613b      	str	r3, [r7, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	43db      	mvns	r3, r3
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	4013      	ands	r3, r2
 8005446:	613b      	str	r3, [r7, #16]
 8005448:	683b      	ldr	r3, [r7, #0]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <HAL_GPIO_Init+0x238>
 8005454:	693a      	ldr	r2, [r7, #16]
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	4313      	orrs	r3, r2
 800545a:	613b      	str	r3, [r7, #16]
 800545c:	4a30      	ldr	r2, [pc, #192]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	6013      	str	r3, [r2, #0]
 8005462:	4b2f      	ldr	r3, [pc, #188]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 8005464:	685b      	ldr	r3, [r3, #4]
 8005466:	613b      	str	r3, [r7, #16]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	43db      	mvns	r3, r3
 800546c:	693a      	ldr	r2, [r7, #16]
 800546e:	4013      	ands	r3, r2
 8005470:	613b      	str	r3, [r7, #16]
 8005472:	683b      	ldr	r3, [r7, #0]
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d003      	beq.n	8005486 <HAL_GPIO_Init+0x262>
 800547e:	693a      	ldr	r2, [r7, #16]
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	4313      	orrs	r3, r2
 8005484:	613b      	str	r3, [r7, #16]
 8005486:	4a26      	ldr	r2, [pc, #152]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	6053      	str	r3, [r2, #4]
 800548c:	4b24      	ldr	r3, [pc, #144]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	613b      	str	r3, [r7, #16]
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	43db      	mvns	r3, r3
 8005496:	693a      	ldr	r2, [r7, #16]
 8005498:	4013      	ands	r3, r2
 800549a:	613b      	str	r3, [r7, #16]
 800549c:	683b      	ldr	r3, [r7, #0]
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <HAL_GPIO_Init+0x28c>
 80054a8:	693a      	ldr	r2, [r7, #16]
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	4313      	orrs	r3, r2
 80054ae:	613b      	str	r3, [r7, #16]
 80054b0:	4a1b      	ldr	r2, [pc, #108]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 80054b2:	693b      	ldr	r3, [r7, #16]
 80054b4:	6093      	str	r3, [r2, #8]
 80054b6:	4b1a      	ldr	r3, [pc, #104]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 80054b8:	68db      	ldr	r3, [r3, #12]
 80054ba:	613b      	str	r3, [r7, #16]
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	43db      	mvns	r3, r3
 80054c0:	693a      	ldr	r2, [r7, #16]
 80054c2:	4013      	ands	r3, r2
 80054c4:	613b      	str	r3, [r7, #16]
 80054c6:	683b      	ldr	r3, [r7, #0]
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d003      	beq.n	80054da <HAL_GPIO_Init+0x2b6>
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4313      	orrs	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
 80054da:	4a11      	ldr	r2, [pc, #68]	; (8005520 <HAL_GPIO_Init+0x2fc>)
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	60d3      	str	r3, [r2, #12]
 80054e0:	697b      	ldr	r3, [r7, #20]
 80054e2:	3301      	adds	r3, #1
 80054e4:	617b      	str	r3, [r7, #20]
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	fa22 f303 	lsr.w	r3, r2, r3
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	f47f aea3 	bne.w	800523c <HAL_GPIO_Init+0x18>
 80054f6:	bf00      	nop
 80054f8:	bf00      	nop
 80054fa:	371c      	adds	r7, #28
 80054fc:	46bd      	mov	sp, r7
 80054fe:	bc80      	pop	{r7}
 8005500:	4770      	bx	lr
 8005502:	bf00      	nop
 8005504:	40023800 	.word	0x40023800
 8005508:	40010000 	.word	0x40010000
 800550c:	40020000 	.word	0x40020000
 8005510:	40020400 	.word	0x40020400
 8005514:	40020800 	.word	0x40020800
 8005518:	40020c00 	.word	0x40020c00
 800551c:	40021000 	.word	0x40021000
 8005520:	40010400 	.word	0x40010400

08005524 <HAL_GPIO_ReadPin>:
 8005524:	b480      	push	{r7}
 8005526:	b085      	sub	sp, #20
 8005528:	af00      	add	r7, sp, #0
 800552a:	6078      	str	r0, [r7, #4]
 800552c:	460b      	mov	r3, r1
 800552e:	807b      	strh	r3, [r7, #2]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	691a      	ldr	r2, [r3, #16]
 8005534:	887b      	ldrh	r3, [r7, #2]
 8005536:	4013      	ands	r3, r2
 8005538:	2b00      	cmp	r3, #0
 800553a:	d002      	beq.n	8005542 <HAL_GPIO_ReadPin+0x1e>
 800553c:	2301      	movs	r3, #1
 800553e:	73fb      	strb	r3, [r7, #15]
 8005540:	e001      	b.n	8005546 <HAL_GPIO_ReadPin+0x22>
 8005542:	2300      	movs	r3, #0
 8005544:	73fb      	strb	r3, [r7, #15]
 8005546:	7bfb      	ldrb	r3, [r7, #15]
 8005548:	4618      	mov	r0, r3
 800554a:	3714      	adds	r7, #20
 800554c:	46bd      	mov	sp, r7
 800554e:	bc80      	pop	{r7}
 8005550:	4770      	bx	lr

08005552 <HAL_GPIO_WritePin>:
 8005552:	b480      	push	{r7}
 8005554:	b083      	sub	sp, #12
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	460b      	mov	r3, r1
 800555c:	807b      	strh	r3, [r7, #2]
 800555e:	4613      	mov	r3, r2
 8005560:	707b      	strb	r3, [r7, #1]
 8005562:	787b      	ldrb	r3, [r7, #1]
 8005564:	2b00      	cmp	r3, #0
 8005566:	d003      	beq.n	8005570 <HAL_GPIO_WritePin+0x1e>
 8005568:	887a      	ldrh	r2, [r7, #2]
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	619a      	str	r2, [r3, #24]
 800556e:	e003      	b.n	8005578 <HAL_GPIO_WritePin+0x26>
 8005570:	887b      	ldrh	r3, [r7, #2]
 8005572:	041a      	lsls	r2, r3, #16
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	619a      	str	r2, [r3, #24]
 8005578:	bf00      	nop
 800557a:	370c      	adds	r7, #12
 800557c:	46bd      	mov	sp, r7
 800557e:	bc80      	pop	{r7}
 8005580:	4770      	bx	lr

08005582 <HAL_GPIO_TogglePin>:
 8005582:	b480      	push	{r7}
 8005584:	b085      	sub	sp, #20
 8005586:	af00      	add	r7, sp, #0
 8005588:	6078      	str	r0, [r7, #4]
 800558a:	460b      	mov	r3, r1
 800558c:	807b      	strh	r3, [r7, #2]
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	695b      	ldr	r3, [r3, #20]
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	887a      	ldrh	r2, [r7, #2]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4013      	ands	r3, r2
 800559a:	041a      	lsls	r2, r3, #16
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	43d9      	mvns	r1, r3
 80055a0:	887b      	ldrh	r3, [r7, #2]
 80055a2:	400b      	ands	r3, r1
 80055a4:	431a      	orrs	r2, r3
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	619a      	str	r2, [r3, #24]
 80055aa:	bf00      	nop
 80055ac:	3714      	adds	r7, #20
 80055ae:	46bd      	mov	sp, r7
 80055b0:	bc80      	pop	{r7}
 80055b2:	4770      	bx	lr

080055b4 <HAL_GPIO_EXTI_IRQHandler>:
 80055b4:	b580      	push	{r7, lr}
 80055b6:	b082      	sub	sp, #8
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	4603      	mov	r3, r0
 80055bc:	80fb      	strh	r3, [r7, #6]
 80055be:	4b08      	ldr	r3, [pc, #32]	; (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055c0:	695a      	ldr	r2, [r3, #20]
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	4013      	ands	r3, r2
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d006      	beq.n	80055d8 <HAL_GPIO_EXTI_IRQHandler+0x24>
 80055ca:	4a05      	ldr	r2, [pc, #20]	; (80055e0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80055cc:	88fb      	ldrh	r3, [r7, #6]
 80055ce:	6153      	str	r3, [r2, #20]
 80055d0:	88fb      	ldrh	r3, [r7, #6]
 80055d2:	4618      	mov	r0, r3
 80055d4:	f7fd ffee 	bl	80035b4 <HAL_GPIO_EXTI_Callback>
 80055d8:	bf00      	nop
 80055da:	3708      	adds	r7, #8
 80055dc:	46bd      	mov	sp, r7
 80055de:	bd80      	pop	{r7, pc}
 80055e0:	40010400 	.word	0x40010400

080055e4 <HAL_I2C_Init>:
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d101      	bne.n	80055f6 <HAL_I2C_Init+0x12>
 80055f2:	2301      	movs	r3, #1
 80055f4:	e12b      	b.n	800584e <HAL_I2C_Init+0x26a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055fc:	b2db      	uxtb	r3, r3
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d106      	bne.n	8005610 <HAL_I2C_Init+0x2c>
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	2200      	movs	r2, #0
 8005606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800560a:	6878      	ldr	r0, [r7, #4]
 800560c:	f7fe fd88 	bl	8004120 <HAL_I2C_MspInit>
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2224      	movs	r2, #36	; 0x24
 8005614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f022 0201 	bic.w	r2, r2, #1
 8005626:	601a      	str	r2, [r3, #0]
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005636:	601a      	str	r2, [r3, #0]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005646:	601a      	str	r2, [r3, #0]
 8005648:	f002 fd6e 	bl	8008128 <HAL_RCC_GetPCLK1Freq>
 800564c:	60f8      	str	r0, [r7, #12]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4a81      	ldr	r2, [pc, #516]	; (8005858 <HAL_I2C_Init+0x274>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d807      	bhi.n	8005668 <HAL_I2C_Init+0x84>
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	4a80      	ldr	r2, [pc, #512]	; (800585c <HAL_I2C_Init+0x278>)
 800565c:	4293      	cmp	r3, r2
 800565e:	bf94      	ite	ls
 8005660:	2301      	movls	r3, #1
 8005662:	2300      	movhi	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	e006      	b.n	8005676 <HAL_I2C_Init+0x92>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	4a7d      	ldr	r2, [pc, #500]	; (8005860 <HAL_I2C_Init+0x27c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	bf94      	ite	ls
 8005670:	2301      	movls	r3, #1
 8005672:	2300      	movhi	r3, #0
 8005674:	b2db      	uxtb	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	d001      	beq.n	800567e <HAL_I2C_Init+0x9a>
 800567a:	2301      	movs	r3, #1
 800567c:	e0e7      	b.n	800584e <HAL_I2C_Init+0x26a>
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	4a78      	ldr	r2, [pc, #480]	; (8005864 <HAL_I2C_Init+0x280>)
 8005682:	fba2 2303 	umull	r2, r3, r2, r3
 8005686:	0c9b      	lsrs	r3, r3, #18
 8005688:	60bb      	str	r3, [r7, #8]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	68ba      	ldr	r2, [r7, #8]
 800569a:	430a      	orrs	r2, r1
 800569c:	605a      	str	r2, [r3, #4]
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	6a1b      	ldr	r3, [r3, #32]
 80056a4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	4a6a      	ldr	r2, [pc, #424]	; (8005858 <HAL_I2C_Init+0x274>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d802      	bhi.n	80056b8 <HAL_I2C_Init+0xd4>
 80056b2:	68bb      	ldr	r3, [r7, #8]
 80056b4:	3301      	adds	r3, #1
 80056b6:	e009      	b.n	80056cc <HAL_I2C_Init+0xe8>
 80056b8:	68bb      	ldr	r3, [r7, #8]
 80056ba:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	4a69      	ldr	r2, [pc, #420]	; (8005868 <HAL_I2C_Init+0x284>)
 80056c4:	fba2 2303 	umull	r2, r3, r2, r3
 80056c8:	099b      	lsrs	r3, r3, #6
 80056ca:	3301      	adds	r3, #1
 80056cc:	687a      	ldr	r2, [r7, #4]
 80056ce:	6812      	ldr	r2, [r2, #0]
 80056d0:	430b      	orrs	r3, r1
 80056d2:	6213      	str	r3, [r2, #32]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	69db      	ldr	r3, [r3, #28]
 80056da:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80056de:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	685b      	ldr	r3, [r3, #4]
 80056e6:	495c      	ldr	r1, [pc, #368]	; (8005858 <HAL_I2C_Init+0x274>)
 80056e8:	428b      	cmp	r3, r1
 80056ea:	d819      	bhi.n	8005720 <HAL_I2C_Init+0x13c>
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	1e59      	subs	r1, r3, #1
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	005b      	lsls	r3, r3, #1
 80056f6:	fbb1 f3f3 	udiv	r3, r1, r3
 80056fa:	1c59      	adds	r1, r3, #1
 80056fc:	f640 73fc 	movw	r3, #4092	; 0xffc
 8005700:	400b      	ands	r3, r1
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00a      	beq.n	800571c <HAL_I2C_Init+0x138>
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	1e59      	subs	r1, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	685b      	ldr	r3, [r3, #4]
 800570e:	005b      	lsls	r3, r3, #1
 8005710:	fbb1 f3f3 	udiv	r3, r1, r3
 8005714:	3301      	adds	r3, #1
 8005716:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800571a:	e051      	b.n	80057c0 <HAL_I2C_Init+0x1dc>
 800571c:	2304      	movs	r3, #4
 800571e:	e04f      	b.n	80057c0 <HAL_I2C_Init+0x1dc>
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d111      	bne.n	800574c <HAL_I2C_Init+0x168>
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	1e58      	subs	r0, r3, #1
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	6859      	ldr	r1, [r3, #4]
 8005730:	460b      	mov	r3, r1
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	440b      	add	r3, r1
 8005736:	fbb0 f3f3 	udiv	r3, r0, r3
 800573a:	3301      	adds	r3, #1
 800573c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005740:	2b00      	cmp	r3, #0
 8005742:	bf0c      	ite	eq
 8005744:	2301      	moveq	r3, #1
 8005746:	2300      	movne	r3, #0
 8005748:	b2db      	uxtb	r3, r3
 800574a:	e012      	b.n	8005772 <HAL_I2C_Init+0x18e>
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	1e58      	subs	r0, r3, #1
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	6859      	ldr	r1, [r3, #4]
 8005754:	460b      	mov	r3, r1
 8005756:	009b      	lsls	r3, r3, #2
 8005758:	440b      	add	r3, r1
 800575a:	0099      	lsls	r1, r3, #2
 800575c:	440b      	add	r3, r1
 800575e:	fbb0 f3f3 	udiv	r3, r0, r3
 8005762:	3301      	adds	r3, #1
 8005764:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005768:	2b00      	cmp	r3, #0
 800576a:	bf0c      	ite	eq
 800576c:	2301      	moveq	r3, #1
 800576e:	2300      	movne	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d001      	beq.n	800577a <HAL_I2C_Init+0x196>
 8005776:	2301      	movs	r3, #1
 8005778:	e022      	b.n	80057c0 <HAL_I2C_Init+0x1dc>
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	689b      	ldr	r3, [r3, #8]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d10e      	bne.n	80057a0 <HAL_I2C_Init+0x1bc>
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	1e58      	subs	r0, r3, #1
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6859      	ldr	r1, [r3, #4]
 800578a:	460b      	mov	r3, r1
 800578c:	005b      	lsls	r3, r3, #1
 800578e:	440b      	add	r3, r1
 8005790:	fbb0 f3f3 	udiv	r3, r0, r3
 8005794:	3301      	adds	r3, #1
 8005796:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800579a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800579e:	e00f      	b.n	80057c0 <HAL_I2C_Init+0x1dc>
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	1e58      	subs	r0, r3, #1
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6859      	ldr	r1, [r3, #4]
 80057a8:	460b      	mov	r3, r1
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	0099      	lsls	r1, r3, #2
 80057b0:	440b      	add	r3, r1
 80057b2:	fbb0 f3f3 	udiv	r3, r0, r3
 80057b6:	3301      	adds	r3, #1
 80057b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80057bc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80057c0:	6879      	ldr	r1, [r7, #4]
 80057c2:	6809      	ldr	r1, [r1, #0]
 80057c4:	4313      	orrs	r3, r2
 80057c6:	61cb      	str	r3, [r1, #28]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	69da      	ldr	r2, [r3, #28]
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a1b      	ldr	r3, [r3, #32]
 80057da:	431a      	orrs	r2, r3
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	430a      	orrs	r2, r1
 80057e2:	601a      	str	r2, [r3, #0]
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	689b      	ldr	r3, [r3, #8]
 80057ea:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80057ee:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80057f2:	687a      	ldr	r2, [r7, #4]
 80057f4:	6911      	ldr	r1, [r2, #16]
 80057f6:	687a      	ldr	r2, [r7, #4]
 80057f8:	68d2      	ldr	r2, [r2, #12]
 80057fa:	4311      	orrs	r1, r2
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	6812      	ldr	r2, [r2, #0]
 8005800:	430b      	orrs	r3, r1
 8005802:	6093      	str	r3, [r2, #8]
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	695a      	ldr	r2, [r3, #20]
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	431a      	orrs	r2, r3
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	430a      	orrs	r2, r1
 800581e:	60da      	str	r2, [r3, #12]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f042 0201 	orr.w	r2, r2, #1
 800582e:	601a      	str	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	2200      	movs	r2, #0
 8005834:	641a      	str	r2, [r3, #64]	; 0x40
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	2200      	movs	r2, #0
 8005842:	631a      	str	r2, [r3, #48]	; 0x30
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	2200      	movs	r2, #0
 8005848:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800584c:	2300      	movs	r3, #0
 800584e:	4618      	mov	r0, r3
 8005850:	3710      	adds	r7, #16
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	000186a0 	.word	0x000186a0
 800585c:	001e847f 	.word	0x001e847f
 8005860:	003d08ff 	.word	0x003d08ff
 8005864:	431bde83 	.word	0x431bde83
 8005868:	10624dd3 	.word	0x10624dd3

0800586c <HAL_I2C_Master_Transmit>:
 800586c:	b580      	push	{r7, lr}
 800586e:	b088      	sub	sp, #32
 8005870:	af02      	add	r7, sp, #8
 8005872:	60f8      	str	r0, [r7, #12]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	461a      	mov	r2, r3
 8005878:	460b      	mov	r3, r1
 800587a:	817b      	strh	r3, [r7, #10]
 800587c:	4613      	mov	r3, r2
 800587e:	813b      	strh	r3, [r7, #8]
 8005880:	f7fe ffce 	bl	8004820 <HAL_GetTick>
 8005884:	6178      	str	r0, [r7, #20]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800588c:	b2db      	uxtb	r3, r3
 800588e:	2b20      	cmp	r3, #32
 8005890:	f040 80e0 	bne.w	8005a54 <HAL_I2C_Master_Transmit+0x1e8>
 8005894:	697b      	ldr	r3, [r7, #20]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	2319      	movs	r3, #25
 800589a:	2201      	movs	r2, #1
 800589c:	4970      	ldr	r1, [pc, #448]	; (8005a60 <HAL_I2C_Master_Transmit+0x1f4>)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 f964 	bl	8005b6c <I2C_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_Master_Transmit+0x42>
 80058aa:	2302      	movs	r3, #2
 80058ac:	e0d3      	b.n	8005a56 <HAL_I2C_Master_Transmit+0x1ea>
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d101      	bne.n	80058bc <HAL_I2C_Master_Transmit+0x50>
 80058b8:	2302      	movs	r3, #2
 80058ba:	e0cc      	b.n	8005a56 <HAL_I2C_Master_Transmit+0x1ea>
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	f003 0301 	and.w	r3, r3, #1
 80058ce:	2b01      	cmp	r3, #1
 80058d0:	d007      	beq.n	80058e2 <HAL_I2C_Master_Transmit+0x76>
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681a      	ldr	r2, [r3, #0]
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	f042 0201 	orr.w	r2, r2, #1
 80058e0:	601a      	str	r2, [r3, #0]
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	681a      	ldr	r2, [r3, #0]
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058f0:	601a      	str	r2, [r3, #0]
 80058f2:	68fb      	ldr	r3, [r7, #12]
 80058f4:	2221      	movs	r2, #33	; 0x21
 80058f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	2210      	movs	r2, #16
 80058fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2200      	movs	r2, #0
 8005906:	641a      	str	r2, [r3, #64]	; 0x40
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	687a      	ldr	r2, [r7, #4]
 800590c:	625a      	str	r2, [r3, #36]	; 0x24
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	893a      	ldrh	r2, [r7, #8]
 8005912:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29a      	uxth	r2, r3
 800591a:	68fb      	ldr	r3, [r7, #12]
 800591c:	851a      	strh	r2, [r3, #40]	; 0x28
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	4a50      	ldr	r2, [pc, #320]	; (8005a64 <HAL_I2C_Master_Transmit+0x1f8>)
 8005922:	62da      	str	r2, [r3, #44]	; 0x2c
 8005924:	8979      	ldrh	r1, [r7, #10]
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	6a3a      	ldr	r2, [r7, #32]
 800592a:	68f8      	ldr	r0, [r7, #12]
 800592c:	f000 f89c 	bl	8005a68 <I2C_MasterRequestWrite>
 8005930:	4603      	mov	r3, r0
 8005932:	2b00      	cmp	r3, #0
 8005934:	d001      	beq.n	800593a <HAL_I2C_Master_Transmit+0xce>
 8005936:	2301      	movs	r3, #1
 8005938:	e08d      	b.n	8005a56 <HAL_I2C_Master_Transmit+0x1ea>
 800593a:	2300      	movs	r3, #0
 800593c:	613b      	str	r3, [r7, #16]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	68fb      	ldr	r3, [r7, #12]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	699b      	ldr	r3, [r3, #24]
 800594c:	613b      	str	r3, [r7, #16]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	e066      	b.n	8005a20 <HAL_I2C_Master_Transmit+0x1b4>
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	6a39      	ldr	r1, [r7, #32]
 8005956:	68f8      	ldr	r0, [r7, #12]
 8005958:	f000 f9de 	bl	8005d18 <I2C_WaitOnTXEFlagUntilTimeout>
 800595c:	4603      	mov	r3, r0
 800595e:	2b00      	cmp	r3, #0
 8005960:	d00d      	beq.n	800597e <HAL_I2C_Master_Transmit+0x112>
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005966:	2b04      	cmp	r3, #4
 8005968:	d107      	bne.n	800597a <HAL_I2C_Master_Transmit+0x10e>
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005978:	601a      	str	r2, [r3, #0]
 800597a:	2301      	movs	r3, #1
 800597c:	e06b      	b.n	8005a56 <HAL_I2C_Master_Transmit+0x1ea>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005982:	781a      	ldrb	r2, [r3, #0]
 8005984:	68fb      	ldr	r3, [r7, #12]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	611a      	str	r2, [r3, #16]
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800598e:	1c5a      	adds	r2, r3, #1
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	625a      	str	r2, [r3, #36]	; 0x24
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005998:	b29b      	uxth	r3, r3
 800599a:	3b01      	subs	r3, #1
 800599c:	b29a      	uxth	r2, r3
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059a6:	3b01      	subs	r3, #1
 80059a8:	b29a      	uxth	r2, r3
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	851a      	strh	r2, [r3, #40]	; 0x28
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	695b      	ldr	r3, [r3, #20]
 80059b4:	f003 0304 	and.w	r3, r3, #4
 80059b8:	2b04      	cmp	r3, #4
 80059ba:	d11b      	bne.n	80059f4 <HAL_I2C_Master_Transmit+0x188>
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d017      	beq.n	80059f4 <HAL_I2C_Master_Transmit+0x188>
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059c8:	781a      	ldrb	r2, [r3, #0]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	611a      	str	r2, [r3, #16]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059d4:	1c5a      	adds	r2, r3, #1
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	625a      	str	r2, [r3, #36]	; 0x24
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059de:	b29b      	uxth	r3, r3
 80059e0:	3b01      	subs	r3, #1
 80059e2:	b29a      	uxth	r2, r3
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80059ec:	3b01      	subs	r3, #1
 80059ee:	b29a      	uxth	r2, r3
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	851a      	strh	r2, [r3, #40]	; 0x28
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	6a39      	ldr	r1, [r7, #32]
 80059f8:	68f8      	ldr	r0, [r7, #12]
 80059fa:	f000 f9ce 	bl	8005d9a <I2C_WaitOnBTFFlagUntilTimeout>
 80059fe:	4603      	mov	r3, r0
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00d      	beq.n	8005a20 <HAL_I2C_Master_Transmit+0x1b4>
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a08:	2b04      	cmp	r3, #4
 8005a0a:	d107      	bne.n	8005a1c <HAL_I2C_Master_Transmit+0x1b0>
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a1a:	601a      	str	r2, [r3, #0]
 8005a1c:	2301      	movs	r3, #1
 8005a1e:	e01a      	b.n	8005a56 <HAL_I2C_Master_Transmit+0x1ea>
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d194      	bne.n	8005952 <HAL_I2C_Master_Transmit+0xe6>
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005a36:	601a      	str	r2, [r3, #0]
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	2200      	movs	r2, #0
 8005a4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005a50:	2300      	movs	r3, #0
 8005a52:	e000      	b.n	8005a56 <HAL_I2C_Master_Transmit+0x1ea>
 8005a54:	2302      	movs	r3, #2
 8005a56:	4618      	mov	r0, r3
 8005a58:	3718      	adds	r7, #24
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	bd80      	pop	{r7, pc}
 8005a5e:	bf00      	nop
 8005a60:	00100002 	.word	0x00100002
 8005a64:	ffff0000 	.word	0xffff0000

08005a68 <I2C_MasterRequestWrite>:
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b088      	sub	sp, #32
 8005a6c:	af02      	add	r7, sp, #8
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	607a      	str	r2, [r7, #4]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	460b      	mov	r3, r1
 8005a76:	817b      	strh	r3, [r7, #10]
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	697b      	ldr	r3, [r7, #20]
 8005a80:	2b08      	cmp	r3, #8
 8005a82:	d006      	beq.n	8005a92 <I2C_MasterRequestWrite+0x2a>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d003      	beq.n	8005a92 <I2C_MasterRequestWrite+0x2a>
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005a90:	d108      	bne.n	8005aa4 <I2C_MasterRequestWrite+0x3c>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aa0:	601a      	str	r2, [r3, #0]
 8005aa2:	e00b      	b.n	8005abc <I2C_MasterRequestWrite+0x54>
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005aa8:	2b12      	cmp	r3, #18
 8005aaa:	d107      	bne.n	8005abc <I2C_MasterRequestWrite+0x54>
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005aba:	601a      	str	r2, [r3, #0]
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	9300      	str	r3, [sp, #0]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005ac8:	68f8      	ldr	r0, [r7, #12]
 8005aca:	f000 f84f 	bl	8005b6c <I2C_WaitOnFlagUntilTimeout>
 8005ace:	4603      	mov	r3, r0
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00d      	beq.n	8005af0 <I2C_MasterRequestWrite+0x88>
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ade:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005ae2:	d103      	bne.n	8005aec <I2C_MasterRequestWrite+0x84>
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005aea:	641a      	str	r2, [r3, #64]	; 0x40
 8005aec:	2303      	movs	r3, #3
 8005aee:	e035      	b.n	8005b5c <I2C_MasterRequestWrite+0xf4>
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	691b      	ldr	r3, [r3, #16]
 8005af4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af8:	d108      	bne.n	8005b0c <I2C_MasterRequestWrite+0xa4>
 8005afa:	897b      	ldrh	r3, [r7, #10]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	461a      	mov	r2, r3
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b08:	611a      	str	r2, [r3, #16]
 8005b0a:	e01b      	b.n	8005b44 <I2C_MasterRequestWrite+0xdc>
 8005b0c:	897b      	ldrh	r3, [r7, #10]
 8005b0e:	11db      	asrs	r3, r3, #7
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	f003 0306 	and.w	r3, r3, #6
 8005b16:	b2db      	uxtb	r3, r3
 8005b18:	f063 030f 	orn	r3, r3, #15
 8005b1c:	b2da      	uxtb	r2, r3
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	611a      	str	r2, [r3, #16]
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	687a      	ldr	r2, [r7, #4]
 8005b28:	490e      	ldr	r1, [pc, #56]	; (8005b64 <I2C_MasterRequestWrite+0xfc>)
 8005b2a:	68f8      	ldr	r0, [r7, #12]
 8005b2c:	f000 f875 	bl	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b30:	4603      	mov	r3, r0
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d001      	beq.n	8005b3a <I2C_MasterRequestWrite+0xd2>
 8005b36:	2301      	movs	r3, #1
 8005b38:	e010      	b.n	8005b5c <I2C_MasterRequestWrite+0xf4>
 8005b3a:	897b      	ldrh	r3, [r7, #10]
 8005b3c:	b2da      	uxtb	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	611a      	str	r2, [r3, #16]
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	687a      	ldr	r2, [r7, #4]
 8005b48:	4907      	ldr	r1, [pc, #28]	; (8005b68 <I2C_MasterRequestWrite+0x100>)
 8005b4a:	68f8      	ldr	r0, [r7, #12]
 8005b4c:	f000 f865 	bl	8005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b50:	4603      	mov	r3, r0
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d001      	beq.n	8005b5a <I2C_MasterRequestWrite+0xf2>
 8005b56:	2301      	movs	r3, #1
 8005b58:	e000      	b.n	8005b5c <I2C_MasterRequestWrite+0xf4>
 8005b5a:	2300      	movs	r3, #0
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3718      	adds	r7, #24
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	00010008 	.word	0x00010008
 8005b68:	00010002 	.word	0x00010002

08005b6c <I2C_WaitOnFlagUntilTimeout>:
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	60f8      	str	r0, [r7, #12]
 8005b74:	60b9      	str	r1, [r7, #8]
 8005b76:	603b      	str	r3, [r7, #0]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	71fb      	strb	r3, [r7, #7]
 8005b7c:	e025      	b.n	8005bca <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005b7e:	683b      	ldr	r3, [r7, #0]
 8005b80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b84:	d021      	beq.n	8005bca <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005b86:	f7fe fe4b 	bl	8004820 <HAL_GetTick>
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	69bb      	ldr	r3, [r7, #24]
 8005b8e:	1ad3      	subs	r3, r2, r3
 8005b90:	683a      	ldr	r2, [r7, #0]
 8005b92:	429a      	cmp	r2, r3
 8005b94:	d302      	bcc.n	8005b9c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d116      	bne.n	8005bca <I2C_WaitOnFlagUntilTimeout+0x5e>
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	631a      	str	r2, [r3, #48]	; 0x30
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2220      	movs	r2, #32
 8005ba6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bb6:	f043 0220 	orr.w	r2, r3, #32
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	641a      	str	r2, [r3, #64]	; 0x40
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2200      	movs	r2, #0
 8005bc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005bc6:	2301      	movs	r3, #1
 8005bc8:	e023      	b.n	8005c12 <I2C_WaitOnFlagUntilTimeout+0xa6>
 8005bca:	68bb      	ldr	r3, [r7, #8]
 8005bcc:	0c1b      	lsrs	r3, r3, #16
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d10d      	bne.n	8005bf0 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	695b      	ldr	r3, [r3, #20]
 8005bda:	43da      	mvns	r2, r3
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	4013      	ands	r3, r2
 8005be0:	b29b      	uxth	r3, r3
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	bf0c      	ite	eq
 8005be6:	2301      	moveq	r3, #1
 8005be8:	2300      	movne	r3, #0
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	461a      	mov	r2, r3
 8005bee:	e00c      	b.n	8005c0a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	699b      	ldr	r3, [r3, #24]
 8005bf6:	43da      	mvns	r2, r3
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	b29b      	uxth	r3, r3
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	bf0c      	ite	eq
 8005c02:	2301      	moveq	r3, #1
 8005c04:	2300      	movne	r3, #0
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	461a      	mov	r2, r3
 8005c0a:	79fb      	ldrb	r3, [r7, #7]
 8005c0c:	429a      	cmp	r2, r3
 8005c0e:	d0b6      	beq.n	8005b7e <I2C_WaitOnFlagUntilTimeout+0x12>
 8005c10:	2300      	movs	r3, #0
 8005c12:	4618      	mov	r0, r3
 8005c14:	3710      	adds	r7, #16
 8005c16:	46bd      	mov	sp, r7
 8005c18:	bd80      	pop	{r7, pc}

08005c1a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
 8005c1a:	b580      	push	{r7, lr}
 8005c1c:	b084      	sub	sp, #16
 8005c1e:	af00      	add	r7, sp, #0
 8005c20:	60f8      	str	r0, [r7, #12]
 8005c22:	60b9      	str	r1, [r7, #8]
 8005c24:	607a      	str	r2, [r7, #4]
 8005c26:	603b      	str	r3, [r7, #0]
 8005c28:	e051      	b.n	8005cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	695b      	ldr	r3, [r3, #20]
 8005c30:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c38:	d123      	bne.n	8005c82 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	681a      	ldr	r2, [r3, #0]
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005c52:	615a      	str	r2, [r3, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	2200      	movs	r2, #0
 8005c58:	631a      	str	r2, [r3, #48]	; 0x30
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2220      	movs	r2, #32
 8005c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c6e:	f043 0204 	orr.w	r2, r3, #4
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	641a      	str	r2, [r3, #64]	; 0x40
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2200      	movs	r2, #0
 8005c7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005c7e:	2301      	movs	r3, #1
 8005c80:	e046      	b.n	8005d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c88:	d021      	beq.n	8005cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005c8a:	f7fe fdc9 	bl	8004820 <HAL_GetTick>
 8005c8e:	4602      	mov	r2, r0
 8005c90:	683b      	ldr	r3, [r7, #0]
 8005c92:	1ad3      	subs	r3, r2, r3
 8005c94:	687a      	ldr	r2, [r7, #4]
 8005c96:	429a      	cmp	r2, r3
 8005c98:	d302      	bcc.n	8005ca0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d116      	bne.n	8005cce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	2200      	movs	r2, #0
 8005ca4:	631a      	str	r2, [r3, #48]	; 0x30
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2220      	movs	r2, #32
 8005caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cba:	f043 0220 	orr.w	r2, r3, #32
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	641a      	str	r2, [r3, #64]	; 0x40
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005cca:	2301      	movs	r3, #1
 8005ccc:	e020      	b.n	8005d10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
 8005cce:	68bb      	ldr	r3, [r7, #8]
 8005cd0:	0c1b      	lsrs	r3, r3, #16
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d10c      	bne.n	8005cf2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	43da      	mvns	r2, r3
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	b29b      	uxth	r3, r3
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	bf14      	ite	ne
 8005cea:	2301      	movne	r3, #1
 8005cec:	2300      	moveq	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	e00b      	b.n	8005d0a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	699b      	ldr	r3, [r3, #24]
 8005cf8:	43da      	mvns	r2, r3
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	4013      	ands	r3, r2
 8005cfe:	b29b      	uxth	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	bf14      	ite	ne
 8005d04:	2301      	movne	r3, #1
 8005d06:	2300      	moveq	r3, #0
 8005d08:	b2db      	uxtb	r3, r3
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d18d      	bne.n	8005c2a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
 8005d0e:	2300      	movs	r3, #0
 8005d10:	4618      	mov	r0, r3
 8005d12:	3710      	adds	r7, #16
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <I2C_WaitOnTXEFlagUntilTimeout>:
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b084      	sub	sp, #16
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	607a      	str	r2, [r7, #4]
 8005d24:	e02d      	b.n	8005d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005d26:	68f8      	ldr	r0, [r7, #12]
 8005d28:	f000 f878 	bl	8005e1c <I2C_IsAcknowledgeFailed>
 8005d2c:	4603      	mov	r3, r0
 8005d2e:	2b00      	cmp	r3, #0
 8005d30:	d001      	beq.n	8005d36 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
 8005d32:	2301      	movs	r3, #1
 8005d34:	e02d      	b.n	8005d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d3c:	d021      	beq.n	8005d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005d3e:	f7fe fd6f 	bl	8004820 <HAL_GetTick>
 8005d42:	4602      	mov	r2, r0
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	1ad3      	subs	r3, r2, r3
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d302      	bcc.n	8005d54 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d116      	bne.n	8005d82 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2200      	movs	r2, #0
 8005d58:	631a      	str	r2, [r3, #48]	; 0x30
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2220      	movs	r2, #32
 8005d5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d6e:	f043 0220 	orr.w	r2, r3, #32
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	641a      	str	r2, [r3, #64]	; 0x40
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005d7e:	2301      	movs	r3, #1
 8005d80:	e007      	b.n	8005d92 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	695b      	ldr	r3, [r3, #20]
 8005d88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d8c:	2b80      	cmp	r3, #128	; 0x80
 8005d8e:	d1ca      	bne.n	8005d26 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
 8005d90:	2300      	movs	r3, #0
 8005d92:	4618      	mov	r0, r3
 8005d94:	3710      	adds	r7, #16
 8005d96:	46bd      	mov	sp, r7
 8005d98:	bd80      	pop	{r7, pc}

08005d9a <I2C_WaitOnBTFFlagUntilTimeout>:
 8005d9a:	b580      	push	{r7, lr}
 8005d9c:	b084      	sub	sp, #16
 8005d9e:	af00      	add	r7, sp, #0
 8005da0:	60f8      	str	r0, [r7, #12]
 8005da2:	60b9      	str	r1, [r7, #8]
 8005da4:	607a      	str	r2, [r7, #4]
 8005da6:	e02d      	b.n	8005e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005da8:	68f8      	ldr	r0, [r7, #12]
 8005daa:	f000 f837 	bl	8005e1c <I2C_IsAcknowledgeFailed>
 8005dae:	4603      	mov	r3, r0
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d001      	beq.n	8005db8 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
 8005db4:	2301      	movs	r3, #1
 8005db6:	e02d      	b.n	8005e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005db8:	68bb      	ldr	r3, [r7, #8]
 8005dba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dbe:	d021      	beq.n	8005e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005dc0:	f7fe fd2e 	bl	8004820 <HAL_GetTick>
 8005dc4:	4602      	mov	r2, r0
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	1ad3      	subs	r3, r2, r3
 8005dca:	68ba      	ldr	r2, [r7, #8]
 8005dcc:	429a      	cmp	r2, r3
 8005dce:	d302      	bcc.n	8005dd6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005dd0:	68bb      	ldr	r3, [r7, #8]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d116      	bne.n	8005e04 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	631a      	str	r2, [r3, #48]	; 0x30
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	2220      	movs	r2, #32
 8005de0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2200      	movs	r2, #0
 8005de8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005df0:	f043 0220 	orr.w	r2, r3, #32
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	641a      	str	r2, [r3, #64]	; 0x40
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e00:	2301      	movs	r3, #1
 8005e02:	e007      	b.n	8005e14 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0304 	and.w	r3, r3, #4
 8005e0e:	2b04      	cmp	r3, #4
 8005e10:	d1ca      	bne.n	8005da8 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
 8005e12:	2300      	movs	r3, #0
 8005e14:	4618      	mov	r0, r3
 8005e16:	3710      	adds	r7, #16
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <I2C_IsAcknowledgeFailed>:
 8005e1c:	b480      	push	{r7}
 8005e1e:	b083      	sub	sp, #12
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	6078      	str	r0, [r7, #4]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	695b      	ldr	r3, [r3, #20]
 8005e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e2e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e32:	d11b      	bne.n	8005e6c <I2C_IsAcknowledgeFailed+0x50>
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005e3c:	615a      	str	r2, [r3, #20]
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	631a      	str	r2, [r3, #48]	; 0x30
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e58:	f043 0204 	orr.w	r2, r3, #4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	641a      	str	r2, [r3, #64]	; 0x40
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8005e68:	2301      	movs	r3, #1
 8005e6a:	e000      	b.n	8005e6e <I2C_IsAcknowledgeFailed+0x52>
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	4618      	mov	r0, r3
 8005e70:	370c      	adds	r7, #12
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bc80      	pop	{r7}
 8005e76:	4770      	bx	lr

08005e78 <HAL_PCD_Init>:
 8005e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e7a:	b08b      	sub	sp, #44	; 0x2c
 8005e7c:	af06      	add	r7, sp, #24
 8005e7e:	6078      	str	r0, [r7, #4]
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d101      	bne.n	8005e8a <HAL_PCD_Init+0x12>
 8005e86:	2301      	movs	r3, #1
 8005e88:	e0d0      	b.n	800602c <HAL_PCD_Init+0x1b4>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005e90:	b2db      	uxtb	r3, r3
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <HAL_PCD_Init+0x2c>
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f00b fc62 	bl	8011768 <HAL_PCD_MspInit>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2203      	movs	r2, #3
 8005ea8:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f003 fba5 	bl	8009600 <USB_DisableGlobalInt>
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	73fb      	strb	r3, [r7, #15]
 8005eba:	e04c      	b.n	8005f56 <HAL_PCD_Init+0xde>
 8005ebc:	7bfb      	ldrb	r3, [r7, #15]
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	1c5a      	adds	r2, r3, #1
 8005ec2:	4613      	mov	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4413      	add	r3, r2
 8005ec8:	00db      	lsls	r3, r3, #3
 8005eca:	440b      	add	r3, r1
 8005ecc:	3301      	adds	r3, #1
 8005ece:	2201      	movs	r2, #1
 8005ed0:	701a      	strb	r2, [r3, #0]
 8005ed2:	7bfb      	ldrb	r3, [r7, #15]
 8005ed4:	6879      	ldr	r1, [r7, #4]
 8005ed6:	1c5a      	adds	r2, r3, #1
 8005ed8:	4613      	mov	r3, r2
 8005eda:	009b      	lsls	r3, r3, #2
 8005edc:	4413      	add	r3, r2
 8005ede:	00db      	lsls	r3, r3, #3
 8005ee0:	440b      	add	r3, r1
 8005ee2:	7bfa      	ldrb	r2, [r7, #15]
 8005ee4:	701a      	strb	r2, [r3, #0]
 8005ee6:	7bfa      	ldrb	r2, [r7, #15]
 8005ee8:	7bfb      	ldrb	r3, [r7, #15]
 8005eea:	b298      	uxth	r0, r3
 8005eec:	6879      	ldr	r1, [r7, #4]
 8005eee:	4613      	mov	r3, r2
 8005ef0:	009b      	lsls	r3, r3, #2
 8005ef2:	4413      	add	r3, r2
 8005ef4:	00db      	lsls	r3, r3, #3
 8005ef6:	440b      	add	r3, r1
 8005ef8:	3336      	adds	r3, #54	; 0x36
 8005efa:	4602      	mov	r2, r0
 8005efc:	801a      	strh	r2, [r3, #0]
 8005efe:	7bfb      	ldrb	r3, [r7, #15]
 8005f00:	6879      	ldr	r1, [r7, #4]
 8005f02:	1c5a      	adds	r2, r3, #1
 8005f04:	4613      	mov	r3, r2
 8005f06:	009b      	lsls	r3, r3, #2
 8005f08:	4413      	add	r3, r2
 8005f0a:	00db      	lsls	r3, r3, #3
 8005f0c:	440b      	add	r3, r1
 8005f0e:	3303      	adds	r3, #3
 8005f10:	2200      	movs	r2, #0
 8005f12:	701a      	strb	r2, [r3, #0]
 8005f14:	7bfa      	ldrb	r2, [r7, #15]
 8005f16:	6879      	ldr	r1, [r7, #4]
 8005f18:	4613      	mov	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	4413      	add	r3, r2
 8005f1e:	00db      	lsls	r3, r3, #3
 8005f20:	440b      	add	r3, r1
 8005f22:	3338      	adds	r3, #56	; 0x38
 8005f24:	2200      	movs	r2, #0
 8005f26:	601a      	str	r2, [r3, #0]
 8005f28:	7bfa      	ldrb	r2, [r7, #15]
 8005f2a:	6879      	ldr	r1, [r7, #4]
 8005f2c:	4613      	mov	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	4413      	add	r3, r2
 8005f32:	00db      	lsls	r3, r3, #3
 8005f34:	440b      	add	r3, r1
 8005f36:	333c      	adds	r3, #60	; 0x3c
 8005f38:	2200      	movs	r2, #0
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	7bfa      	ldrb	r2, [r7, #15]
 8005f3e:	6879      	ldr	r1, [r7, #4]
 8005f40:	4613      	mov	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4413      	add	r3, r2
 8005f46:	00db      	lsls	r3, r3, #3
 8005f48:	440b      	add	r3, r1
 8005f4a:	3340      	adds	r3, #64	; 0x40
 8005f4c:	2200      	movs	r2, #0
 8005f4e:	601a      	str	r2, [r3, #0]
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
 8005f52:	3301      	adds	r3, #1
 8005f54:	73fb      	strb	r3, [r7, #15]
 8005f56:	7bfa      	ldrb	r2, [r7, #15]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d3ad      	bcc.n	8005ebc <HAL_PCD_Init+0x44>
 8005f60:	2300      	movs	r3, #0
 8005f62:	73fb      	strb	r3, [r7, #15]
 8005f64:	e044      	b.n	8005ff0 <HAL_PCD_Init+0x178>
 8005f66:	7bfa      	ldrb	r2, [r7, #15]
 8005f68:	6879      	ldr	r1, [r7, #4]
 8005f6a:	4613      	mov	r3, r2
 8005f6c:	009b      	lsls	r3, r3, #2
 8005f6e:	4413      	add	r3, r2
 8005f70:	00db      	lsls	r3, r3, #3
 8005f72:	440b      	add	r3, r1
 8005f74:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005f78:	2200      	movs	r2, #0
 8005f7a:	701a      	strb	r2, [r3, #0]
 8005f7c:	7bfa      	ldrb	r2, [r7, #15]
 8005f7e:	6879      	ldr	r1, [r7, #4]
 8005f80:	4613      	mov	r3, r2
 8005f82:	009b      	lsls	r3, r3, #2
 8005f84:	4413      	add	r3, r2
 8005f86:	00db      	lsls	r3, r3, #3
 8005f88:	440b      	add	r3, r1
 8005f8a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005f8e:	7bfa      	ldrb	r2, [r7, #15]
 8005f90:	701a      	strb	r2, [r3, #0]
 8005f92:	7bfa      	ldrb	r2, [r7, #15]
 8005f94:	6879      	ldr	r1, [r7, #4]
 8005f96:	4613      	mov	r3, r2
 8005f98:	009b      	lsls	r3, r3, #2
 8005f9a:	4413      	add	r3, r2
 8005f9c:	00db      	lsls	r3, r3, #3
 8005f9e:	440b      	add	r3, r1
 8005fa0:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	701a      	strb	r2, [r3, #0]
 8005fa8:	7bfa      	ldrb	r2, [r7, #15]
 8005faa:	6879      	ldr	r1, [r7, #4]
 8005fac:	4613      	mov	r3, r2
 8005fae:	009b      	lsls	r3, r3, #2
 8005fb0:	4413      	add	r3, r2
 8005fb2:	00db      	lsls	r3, r3, #3
 8005fb4:	440b      	add	r3, r1
 8005fb6:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005fba:	2200      	movs	r2, #0
 8005fbc:	601a      	str	r2, [r3, #0]
 8005fbe:	7bfa      	ldrb	r2, [r7, #15]
 8005fc0:	6879      	ldr	r1, [r7, #4]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	440b      	add	r3, r1
 8005fcc:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
 8005fd4:	7bfa      	ldrb	r2, [r7, #15]
 8005fd6:	6879      	ldr	r1, [r7, #4]
 8005fd8:	4613      	mov	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4413      	add	r3, r2
 8005fde:	00db      	lsls	r3, r3, #3
 8005fe0:	440b      	add	r3, r1
 8005fe2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005fe6:	2200      	movs	r2, #0
 8005fe8:	601a      	str	r2, [r3, #0]
 8005fea:	7bfb      	ldrb	r3, [r7, #15]
 8005fec:	3301      	adds	r3, #1
 8005fee:	73fb      	strb	r3, [r7, #15]
 8005ff0:	7bfa      	ldrb	r2, [r7, #15]
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	685b      	ldr	r3, [r3, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d3b5      	bcc.n	8005f66 <HAL_PCD_Init+0xee>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	603b      	str	r3, [r7, #0]
 8006000:	687e      	ldr	r6, [r7, #4]
 8006002:	466d      	mov	r5, sp
 8006004:	f106 0410 	add.w	r4, r6, #16
 8006008:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800600a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800600c:	6823      	ldr	r3, [r4, #0]
 800600e:	602b      	str	r3, [r5, #0]
 8006010:	1d33      	adds	r3, r6, #4
 8006012:	cb0e      	ldmia	r3, {r1, r2, r3}
 8006014:	6838      	ldr	r0, [r7, #0]
 8006016:	f003 fb0d 	bl	8009634 <USB_DevInit>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	2200      	movs	r2, #0
 800601e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2201      	movs	r2, #1
 8006026:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
 800602a:	2300      	movs	r3, #0
 800602c:	4618      	mov	r0, r3
 800602e:	3714      	adds	r7, #20
 8006030:	46bd      	mov	sp, r7
 8006032:	bdf0      	pop	{r4, r5, r6, r7, pc}

08006034 <HAL_PCD_Start>:
 8006034:	b580      	push	{r7, lr}
 8006036:	b082      	sub	sp, #8
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006042:	2b01      	cmp	r3, #1
 8006044:	d101      	bne.n	800604a <HAL_PCD_Start+0x16>
 8006046:	2302      	movs	r3, #2
 8006048:	e016      	b.n	8006078 <HAL_PCD_Start+0x44>
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2201      	movs	r2, #1
 800604e:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	4618      	mov	r0, r3
 8006058:	f003 fabc 	bl	80095d4 <USB_EnableGlobalInt>
 800605c:	2101      	movs	r1, #1
 800605e:	6878      	ldr	r0, [r7, #4]
 8006060:	f00b fb64 	bl	801172c <HAL_PCDEx_SetConnectionState>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	4618      	mov	r0, r3
 800606a:	f005 ffa1 	bl	800bfb0 <USB_DevConnect>
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	2200      	movs	r2, #0
 8006072:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8006076:	2300      	movs	r3, #0
 8006078:	4618      	mov	r0, r3
 800607a:	3708      	adds	r7, #8
 800607c:	46bd      	mov	sp, r7
 800607e:	bd80      	pop	{r7, pc}

08006080 <HAL_PCD_IRQHandler>:
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4618      	mov	r0, r3
 800608e:	f005 ff99 	bl	800bfc4 <USB_ReadInterrupts>
 8006092:	4603      	mov	r3, r0
 8006094:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006098:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800609c:	d102      	bne.n	80060a4 <HAL_PCD_IRQHandler+0x24>
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 faf5 	bl	800668e <PCD_EP_ISR_Handler>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f005 ff8b 	bl	800bfc4 <USB_ReadInterrupts>
 80060ae:	4603      	mov	r3, r0
 80060b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80060b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060b8:	d112      	bne.n	80060e0 <HAL_PCD_IRQHandler+0x60>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060c2:	b29a      	uxth	r2, r3
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060cc:	b292      	uxth	r2, r2
 80060ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f00b fbc3 	bl	801185e <HAL_PCD_ResetCallback>
 80060d8:	2100      	movs	r1, #0
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f8c7 	bl	800626e <HAL_PCD_SetAddress>
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f005 ff6d 	bl	800bfc4 <USB_ReadInterrupts>
 80060ea:	4603      	mov	r3, r0
 80060ec:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80060f0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80060f4:	d10b      	bne.n	800610e <HAL_PCD_IRQHandler+0x8e>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80060fe:	b29a      	uxth	r2, r3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006108:	b292      	uxth	r2, r2
 800610a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	4618      	mov	r0, r3
 8006114:	f005 ff56 	bl	800bfc4 <USB_ReadInterrupts>
 8006118:	4603      	mov	r3, r0
 800611a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800611e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006122:	d10b      	bne.n	800613c <HAL_PCD_IRQHandler+0xbc>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800612c:	b29a      	uxth	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006136:	b292      	uxth	r2, r2
 8006138:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f005 ff3f 	bl	800bfc4 <USB_ReadInterrupts>
 8006146:	4603      	mov	r3, r0
 8006148:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800614c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006150:	d126      	bne.n	80061a0 <HAL_PCD_IRQHandler+0x120>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 800615a:	b29a      	uxth	r2, r3
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f022 0204 	bic.w	r2, r2, #4
 8006164:	b292      	uxth	r2, r2
 8006166:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8006172:	b29a      	uxth	r2, r3
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f022 0208 	bic.w	r2, r2, #8
 800617c:	b292      	uxth	r2, r2
 800617e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8006182:	6878      	ldr	r0, [r7, #4]
 8006184:	f00b fba4 	bl	80118d0 <HAL_PCD_ResumeCallback>
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006190:	b29a      	uxth	r2, r3
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800619a:	b292      	uxth	r2, r2
 800619c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	4618      	mov	r0, r3
 80061a6:	f005 ff0d 	bl	800bfc4 <USB_ReadInterrupts>
 80061aa:	4603      	mov	r3, r0
 80061ac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80061b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80061b4:	d126      	bne.n	8006204 <HAL_PCD_IRQHandler+0x184>
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061be:	b29a      	uxth	r2, r3
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f042 0208 	orr.w	r2, r2, #8
 80061c8:	b292      	uxth	r2, r2
 80061ca:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80061d6:	b29a      	uxth	r2, r3
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061e0:	b292      	uxth	r2, r2
 80061e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80061ee:	b29a      	uxth	r2, r3
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f042 0204 	orr.w	r2, r2, #4
 80061f8:	b292      	uxth	r2, r2
 80061fa:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f00b fb4c 	bl	801189c <HAL_PCD_SuspendCallback>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4618      	mov	r0, r3
 800620a:	f005 fedb 	bl	800bfc4 <USB_ReadInterrupts>
 800620e:	4603      	mov	r3, r0
 8006210:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006214:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006218:	d10e      	bne.n	8006238 <HAL_PCD_IRQHandler+0x1b8>
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006222:	b29a      	uxth	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800622c:	b292      	uxth	r2, r2
 800622e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f00b fb05 	bl	8011842 <HAL_PCD_SOFCallback>
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	4618      	mov	r0, r3
 800623e:	f005 fec1 	bl	800bfc4 <USB_ReadInterrupts>
 8006242:	4603      	mov	r3, r0
 8006244:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006248:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800624c:	d10b      	bne.n	8006266 <HAL_PCD_IRQHandler+0x1e6>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006256:	b29a      	uxth	r2, r3
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006260:	b292      	uxth	r2, r2
 8006262:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 8006266:	bf00      	nop
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}

0800626e <HAL_PCD_SetAddress>:
 800626e:	b580      	push	{r7, lr}
 8006270:	b082      	sub	sp, #8
 8006272:	af00      	add	r7, sp, #0
 8006274:	6078      	str	r0, [r7, #4]
 8006276:	460b      	mov	r3, r1
 8006278:	70fb      	strb	r3, [r7, #3]
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006280:	2b01      	cmp	r3, #1
 8006282:	d101      	bne.n	8006288 <HAL_PCD_SetAddress+0x1a>
 8006284:	2302      	movs	r3, #2
 8006286:	e013      	b.n	80062b0 <HAL_PCD_SetAddress+0x42>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2201      	movs	r2, #1
 800628c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	78fa      	ldrb	r2, [r7, #3]
 8006294:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	78fa      	ldrb	r2, [r7, #3]
 800629e:	4611      	mov	r1, r2
 80062a0:	4618      	mov	r0, r3
 80062a2:	f005 fe72 	bl	800bf8a <USB_SetDevAddress>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	2200      	movs	r2, #0
 80062aa:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80062ae:	2300      	movs	r3, #0
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <HAL_PCD_EP_Open>:
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b084      	sub	sp, #16
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	4608      	mov	r0, r1
 80062c2:	4611      	mov	r1, r2
 80062c4:	461a      	mov	r2, r3
 80062c6:	4603      	mov	r3, r0
 80062c8:	70fb      	strb	r3, [r7, #3]
 80062ca:	460b      	mov	r3, r1
 80062cc:	803b      	strh	r3, [r7, #0]
 80062ce:	4613      	mov	r3, r2
 80062d0:	70bb      	strb	r3, [r7, #2]
 80062d2:	2300      	movs	r3, #0
 80062d4:	72fb      	strb	r3, [r7, #11]
 80062d6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	da0e      	bge.n	80062fc <HAL_PCD_EP_Open+0x44>
 80062de:	78fb      	ldrb	r3, [r7, #3]
 80062e0:	f003 0307 	and.w	r3, r3, #7
 80062e4:	1c5a      	adds	r2, r3, #1
 80062e6:	4613      	mov	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4413      	add	r3, r2
 80062ec:	00db      	lsls	r3, r3, #3
 80062ee:	687a      	ldr	r2, [r7, #4]
 80062f0:	4413      	add	r3, r2
 80062f2:	60fb      	str	r3, [r7, #12]
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	705a      	strb	r2, [r3, #1]
 80062fa:	e00e      	b.n	800631a <HAL_PCD_EP_Open+0x62>
 80062fc:	78fb      	ldrb	r3, [r7, #3]
 80062fe:	f003 0207 	and.w	r2, r3, #7
 8006302:	4613      	mov	r3, r2
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	4413      	add	r3, r2
 8006308:	00db      	lsls	r3, r3, #3
 800630a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800630e:	687a      	ldr	r2, [r7, #4]
 8006310:	4413      	add	r3, r2
 8006312:	60fb      	str	r3, [r7, #12]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	2200      	movs	r2, #0
 8006318:	705a      	strb	r2, [r3, #1]
 800631a:	78fb      	ldrb	r3, [r7, #3]
 800631c:	f003 0307 	and.w	r3, r3, #7
 8006320:	b2da      	uxtb	r2, r3
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	701a      	strb	r2, [r3, #0]
 8006326:	883a      	ldrh	r2, [r7, #0]
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	611a      	str	r2, [r3, #16]
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	78ba      	ldrb	r2, [r7, #2]
 8006330:	70da      	strb	r2, [r3, #3]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	785b      	ldrb	r3, [r3, #1]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d004      	beq.n	8006344 <HAL_PCD_EP_Open+0x8c>
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	b29a      	uxth	r2, r3
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	81da      	strh	r2, [r3, #14]
 8006344:	78bb      	ldrb	r3, [r7, #2]
 8006346:	2b02      	cmp	r3, #2
 8006348:	d102      	bne.n	8006350 <HAL_PCD_EP_Open+0x98>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	711a      	strb	r2, [r3, #4]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006356:	2b01      	cmp	r3, #1
 8006358:	d101      	bne.n	800635e <HAL_PCD_EP_Open+0xa6>
 800635a:	2302      	movs	r3, #2
 800635c:	e00e      	b.n	800637c <HAL_PCD_EP_Open+0xc4>
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	2201      	movs	r2, #1
 8006362:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68f9      	ldr	r1, [r7, #12]
 800636c:	4618      	mov	r0, r3
 800636e:	f003 f981 	bl	8009674 <USB_ActivateEndpoint>
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800637a:	7afb      	ldrb	r3, [r7, #11]
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <HAL_PCD_EP_Close>:
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
 800638c:	460b      	mov	r3, r1
 800638e:	70fb      	strb	r3, [r7, #3]
 8006390:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006394:	2b00      	cmp	r3, #0
 8006396:	da0e      	bge.n	80063b6 <HAL_PCD_EP_Close+0x32>
 8006398:	78fb      	ldrb	r3, [r7, #3]
 800639a:	f003 0307 	and.w	r3, r3, #7
 800639e:	1c5a      	adds	r2, r3, #1
 80063a0:	4613      	mov	r3, r2
 80063a2:	009b      	lsls	r3, r3, #2
 80063a4:	4413      	add	r3, r2
 80063a6:	00db      	lsls	r3, r3, #3
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	4413      	add	r3, r2
 80063ac:	60fb      	str	r3, [r7, #12]
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	2201      	movs	r2, #1
 80063b2:	705a      	strb	r2, [r3, #1]
 80063b4:	e00e      	b.n	80063d4 <HAL_PCD_EP_Close+0x50>
 80063b6:	78fb      	ldrb	r3, [r7, #3]
 80063b8:	f003 0207 	and.w	r2, r3, #7
 80063bc:	4613      	mov	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	4413      	add	r3, r2
 80063c2:	00db      	lsls	r3, r3, #3
 80063c4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	4413      	add	r3, r2
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	2200      	movs	r2, #0
 80063d2:	705a      	strb	r2, [r3, #1]
 80063d4:	78fb      	ldrb	r3, [r7, #3]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d101      	bne.n	80063ee <HAL_PCD_EP_Close+0x6a>
 80063ea:	2302      	movs	r3, #2
 80063ec:	e00e      	b.n	800640c <HAL_PCD_EP_Close+0x88>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2201      	movs	r2, #1
 80063f2:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	68f9      	ldr	r1, [r7, #12]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f003 fca3 	bl	8009d48 <USB_DeactivateEndpoint>
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2200      	movs	r2, #0
 8006406:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 800640a:	2300      	movs	r3, #0
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <HAL_PCD_EP_Receive>:
 8006414:	b580      	push	{r7, lr}
 8006416:	b086      	sub	sp, #24
 8006418:	af00      	add	r7, sp, #0
 800641a:	60f8      	str	r0, [r7, #12]
 800641c:	607a      	str	r2, [r7, #4]
 800641e:	603b      	str	r3, [r7, #0]
 8006420:	460b      	mov	r3, r1
 8006422:	72fb      	strb	r3, [r7, #11]
 8006424:	7afb      	ldrb	r3, [r7, #11]
 8006426:	f003 0207 	and.w	r2, r3, #7
 800642a:	4613      	mov	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4413      	add	r3, r2
 8006430:	00db      	lsls	r3, r3, #3
 8006432:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006436:	68fa      	ldr	r2, [r7, #12]
 8006438:	4413      	add	r3, r2
 800643a:	617b      	str	r3, [r7, #20]
 800643c:	697b      	ldr	r3, [r7, #20]
 800643e:	687a      	ldr	r2, [r7, #4]
 8006440:	615a      	str	r2, [r3, #20]
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	619a      	str	r2, [r3, #24]
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	2200      	movs	r2, #0
 800644c:	61da      	str	r2, [r3, #28]
 800644e:	697b      	ldr	r3, [r7, #20]
 8006450:	2200      	movs	r2, #0
 8006452:	705a      	strb	r2, [r3, #1]
 8006454:	7afb      	ldrb	r3, [r7, #11]
 8006456:	f003 0307 	and.w	r3, r3, #7
 800645a:	b2da      	uxtb	r2, r3
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	701a      	strb	r2, [r3, #0]
 8006460:	7afb      	ldrb	r3, [r7, #11]
 8006462:	f003 0307 	and.w	r3, r3, #7
 8006466:	2b00      	cmp	r3, #0
 8006468:	d106      	bne.n	8006478 <HAL_PCD_EP_Receive+0x64>
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	6979      	ldr	r1, [r7, #20]
 8006470:	4618      	mov	r0, r3
 8006472:	f003 fe55 	bl	800a120 <USB_EPStartXfer>
 8006476:	e005      	b.n	8006484 <HAL_PCD_EP_Receive+0x70>
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6979      	ldr	r1, [r7, #20]
 800647e:	4618      	mov	r0, r3
 8006480:	f003 fe4e 	bl	800a120 <USB_EPStartXfer>
 8006484:	2300      	movs	r3, #0
 8006486:	4618      	mov	r0, r3
 8006488:	3718      	adds	r7, #24
 800648a:	46bd      	mov	sp, r7
 800648c:	bd80      	pop	{r7, pc}

0800648e <HAL_PCD_EP_GetRxCount>:
 800648e:	b480      	push	{r7}
 8006490:	b083      	sub	sp, #12
 8006492:	af00      	add	r7, sp, #0
 8006494:	6078      	str	r0, [r7, #4]
 8006496:	460b      	mov	r3, r1
 8006498:	70fb      	strb	r3, [r7, #3]
 800649a:	78fb      	ldrb	r3, [r7, #3]
 800649c:	f003 0207 	and.w	r2, r3, #7
 80064a0:	6879      	ldr	r1, [r7, #4]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	00db      	lsls	r3, r3, #3
 80064aa:	440b      	add	r3, r1
 80064ac:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	4618      	mov	r0, r3
 80064b4:	370c      	adds	r7, #12
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bc80      	pop	{r7}
 80064ba:	4770      	bx	lr

080064bc <HAL_PCD_EP_Transmit>:
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	607a      	str	r2, [r7, #4]
 80064c6:	603b      	str	r3, [r7, #0]
 80064c8:	460b      	mov	r3, r1
 80064ca:	72fb      	strb	r3, [r7, #11]
 80064cc:	7afb      	ldrb	r3, [r7, #11]
 80064ce:	f003 0307 	and.w	r3, r3, #7
 80064d2:	1c5a      	adds	r2, r3, #1
 80064d4:	4613      	mov	r3, r2
 80064d6:	009b      	lsls	r3, r3, #2
 80064d8:	4413      	add	r3, r2
 80064da:	00db      	lsls	r3, r3, #3
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4413      	add	r3, r2
 80064e0:	617b      	str	r3, [r7, #20]
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	687a      	ldr	r2, [r7, #4]
 80064e6:	615a      	str	r2, [r3, #20]
 80064e8:	697b      	ldr	r3, [r7, #20]
 80064ea:	683a      	ldr	r2, [r7, #0]
 80064ec:	619a      	str	r2, [r3, #24]
 80064ee:	697b      	ldr	r3, [r7, #20]
 80064f0:	2201      	movs	r2, #1
 80064f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	621a      	str	r2, [r3, #32]
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	2200      	movs	r2, #0
 8006500:	61da      	str	r2, [r3, #28]
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2201      	movs	r2, #1
 8006506:	705a      	strb	r2, [r3, #1]
 8006508:	7afb      	ldrb	r3, [r7, #11]
 800650a:	f003 0307 	and.w	r3, r3, #7
 800650e:	b2da      	uxtb	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	701a      	strb	r2, [r3, #0]
 8006514:	7afb      	ldrb	r3, [r7, #11]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2b00      	cmp	r3, #0
 800651c:	d106      	bne.n	800652c <HAL_PCD_EP_Transmit+0x70>
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	6979      	ldr	r1, [r7, #20]
 8006524:	4618      	mov	r0, r3
 8006526:	f003 fdfb 	bl	800a120 <USB_EPStartXfer>
 800652a:	e005      	b.n	8006538 <HAL_PCD_EP_Transmit+0x7c>
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6979      	ldr	r1, [r7, #20]
 8006532:	4618      	mov	r0, r3
 8006534:	f003 fdf4 	bl	800a120 <USB_EPStartXfer>
 8006538:	2300      	movs	r3, #0
 800653a:	4618      	mov	r0, r3
 800653c:	3718      	adds	r7, #24
 800653e:	46bd      	mov	sp, r7
 8006540:	bd80      	pop	{r7, pc}

08006542 <HAL_PCD_EP_SetStall>:
 8006542:	b580      	push	{r7, lr}
 8006544:	b084      	sub	sp, #16
 8006546:	af00      	add	r7, sp, #0
 8006548:	6078      	str	r0, [r7, #4]
 800654a:	460b      	mov	r3, r1
 800654c:	70fb      	strb	r3, [r7, #3]
 800654e:	78fb      	ldrb	r3, [r7, #3]
 8006550:	f003 0207 	and.w	r2, r3, #7
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	429a      	cmp	r2, r3
 800655a:	d901      	bls.n	8006560 <HAL_PCD_EP_SetStall+0x1e>
 800655c:	2301      	movs	r3, #1
 800655e:	e03e      	b.n	80065de <HAL_PCD_EP_SetStall+0x9c>
 8006560:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006564:	2b00      	cmp	r3, #0
 8006566:	da0e      	bge.n	8006586 <HAL_PCD_EP_SetStall+0x44>
 8006568:	78fb      	ldrb	r3, [r7, #3]
 800656a:	f003 0307 	and.w	r3, r3, #7
 800656e:	1c5a      	adds	r2, r3, #1
 8006570:	4613      	mov	r3, r2
 8006572:	009b      	lsls	r3, r3, #2
 8006574:	4413      	add	r3, r2
 8006576:	00db      	lsls	r3, r3, #3
 8006578:	687a      	ldr	r2, [r7, #4]
 800657a:	4413      	add	r3, r2
 800657c:	60fb      	str	r3, [r7, #12]
 800657e:	68fb      	ldr	r3, [r7, #12]
 8006580:	2201      	movs	r2, #1
 8006582:	705a      	strb	r2, [r3, #1]
 8006584:	e00c      	b.n	80065a0 <HAL_PCD_EP_SetStall+0x5e>
 8006586:	78fa      	ldrb	r2, [r7, #3]
 8006588:	4613      	mov	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4413      	add	r3, r2
 800658e:	00db      	lsls	r3, r3, #3
 8006590:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006594:	687a      	ldr	r2, [r7, #4]
 8006596:	4413      	add	r3, r2
 8006598:	60fb      	str	r3, [r7, #12]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	2200      	movs	r2, #0
 800659e:	705a      	strb	r2, [r3, #1]
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2201      	movs	r2, #1
 80065a4:	709a      	strb	r2, [r3, #2]
 80065a6:	78fb      	ldrb	r3, [r7, #3]
 80065a8:	f003 0307 	and.w	r3, r3, #7
 80065ac:	b2da      	uxtb	r2, r3
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	701a      	strb	r2, [r3, #0]
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d101      	bne.n	80065c0 <HAL_PCD_EP_SetStall+0x7e>
 80065bc:	2302      	movs	r3, #2
 80065be:	e00e      	b.n	80065de <HAL_PCD_EP_SetStall+0x9c>
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68f9      	ldr	r1, [r7, #12]
 80065ce:	4618      	mov	r0, r3
 80065d0:	f005 fbde 	bl	800bd90 <USB_EPSetStall>
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	2200      	movs	r2, #0
 80065d8:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 80065dc:	2300      	movs	r3, #0
 80065de:	4618      	mov	r0, r3
 80065e0:	3710      	adds	r7, #16
 80065e2:	46bd      	mov	sp, r7
 80065e4:	bd80      	pop	{r7, pc}

080065e6 <HAL_PCD_EP_ClrStall>:
 80065e6:	b580      	push	{r7, lr}
 80065e8:	b084      	sub	sp, #16
 80065ea:	af00      	add	r7, sp, #0
 80065ec:	6078      	str	r0, [r7, #4]
 80065ee:	460b      	mov	r3, r1
 80065f0:	70fb      	strb	r3, [r7, #3]
 80065f2:	78fb      	ldrb	r3, [r7, #3]
 80065f4:	f003 020f 	and.w	r2, r3, #15
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	685b      	ldr	r3, [r3, #4]
 80065fc:	429a      	cmp	r2, r3
 80065fe:	d901      	bls.n	8006604 <HAL_PCD_EP_ClrStall+0x1e>
 8006600:	2301      	movs	r3, #1
 8006602:	e040      	b.n	8006686 <HAL_PCD_EP_ClrStall+0xa0>
 8006604:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006608:	2b00      	cmp	r3, #0
 800660a:	da0e      	bge.n	800662a <HAL_PCD_EP_ClrStall+0x44>
 800660c:	78fb      	ldrb	r3, [r7, #3]
 800660e:	f003 0307 	and.w	r3, r3, #7
 8006612:	1c5a      	adds	r2, r3, #1
 8006614:	4613      	mov	r3, r2
 8006616:	009b      	lsls	r3, r3, #2
 8006618:	4413      	add	r3, r2
 800661a:	00db      	lsls	r3, r3, #3
 800661c:	687a      	ldr	r2, [r7, #4]
 800661e:	4413      	add	r3, r2
 8006620:	60fb      	str	r3, [r7, #12]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2201      	movs	r2, #1
 8006626:	705a      	strb	r2, [r3, #1]
 8006628:	e00e      	b.n	8006648 <HAL_PCD_EP_ClrStall+0x62>
 800662a:	78fb      	ldrb	r3, [r7, #3]
 800662c:	f003 0207 	and.w	r2, r3, #7
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	00db      	lsls	r3, r3, #3
 8006638:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	4413      	add	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	2200      	movs	r2, #0
 8006646:	705a      	strb	r2, [r3, #1]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2200      	movs	r2, #0
 800664c:	709a      	strb	r2, [r3, #2]
 800664e:	78fb      	ldrb	r3, [r7, #3]
 8006650:	f003 0307 	and.w	r3, r3, #7
 8006654:	b2da      	uxtb	r2, r3
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	701a      	strb	r2, [r3, #0]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006660:	2b01      	cmp	r3, #1
 8006662:	d101      	bne.n	8006668 <HAL_PCD_EP_ClrStall+0x82>
 8006664:	2302      	movs	r3, #2
 8006666:	e00e      	b.n	8006686 <HAL_PCD_EP_ClrStall+0xa0>
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	68f9      	ldr	r1, [r7, #12]
 8006676:	4618      	mov	r0, r3
 8006678:	f005 fbda 	bl	800be30 <USB_EPClearStall>
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2200      	movs	r2, #0
 8006680:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
 8006684:	2300      	movs	r3, #0
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <PCD_EP_ISR_Handler>:
 800668e:	b580      	push	{r7, lr}
 8006690:	b08e      	sub	sp, #56	; 0x38
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	e2ec      	b.n	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 80066a0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80066a2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066a4:	b2db      	uxtb	r3, r3
 80066a6:	f003 030f 	and.w	r3, r3, #15
 80066aa:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 80066ae:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	f040 8161 	bne.w	800697a <PCD_EP_ISR_Handler+0x2ec>
 80066b8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80066ba:	f003 0310 	and.w	r3, r3, #16
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d152      	bne.n	8006768 <PCD_EP_ISR_Handler+0xda>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	881b      	ldrh	r3, [r3, #0]
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 80066ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d2:	81fb      	strh	r3, [r7, #14]
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681a      	ldr	r2, [r3, #0]
 80066d8:	89fb      	ldrh	r3, [r7, #14]
 80066da:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066de:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	8013      	strh	r3, [r2, #0]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	3328      	adds	r3, #40	; 0x28
 80066ea:	627b      	str	r3, [r7, #36]	; 0x24
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80066f4:	b29b      	uxth	r3, r3
 80066f6:	461a      	mov	r2, r3
 80066f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066fa:	781b      	ldrb	r3, [r3, #0]
 80066fc:	00db      	lsls	r3, r3, #3
 80066fe:	4413      	add	r3, r2
 8006700:	3302      	adds	r3, #2
 8006702:	005b      	lsls	r3, r3, #1
 8006704:	687a      	ldr	r2, [r7, #4]
 8006706:	6812      	ldr	r2, [r2, #0]
 8006708:	4413      	add	r3, r2
 800670a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8006714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006716:	61da      	str	r2, [r3, #28]
 8006718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671a:	695a      	ldr	r2, [r3, #20]
 800671c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800671e:	69db      	ldr	r3, [r3, #28]
 8006720:	441a      	add	r2, r3
 8006722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006724:	615a      	str	r2, [r3, #20]
 8006726:	2100      	movs	r1, #0
 8006728:	6878      	ldr	r0, [r7, #4]
 800672a:	f00b f870 	bl	801180e <HAL_PCD_DataInStageCallback>
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006734:	b2db      	uxtb	r3, r3
 8006736:	2b00      	cmp	r3, #0
 8006738:	f000 829b 	beq.w	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 800673c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800673e:	699b      	ldr	r3, [r3, #24]
 8006740:	2b00      	cmp	r3, #0
 8006742:	f040 8296 	bne.w	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800674c:	b2db      	uxtb	r3, r3
 800674e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006752:	b2da      	uxtb	r2, r3
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	b292      	uxth	r2, r2
 800675a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	2200      	movs	r2, #0
 8006762:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006766:	e284      	b.n	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800676e:	627b      	str	r3, [r7, #36]	; 0x24
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	881b      	ldrh	r3, [r3, #0]
 8006776:	857b      	strh	r3, [r7, #42]	; 0x2a
 8006778:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800677a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800677e:	2b00      	cmp	r3, #0
 8006780:	d034      	beq.n	80067ec <PCD_EP_ISR_Handler+0x15e>
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678a:	b29b      	uxth	r3, r3
 800678c:	461a      	mov	r2, r3
 800678e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	00db      	lsls	r3, r3, #3
 8006794:	4413      	add	r3, r2
 8006796:	3306      	adds	r3, #6
 8006798:	005b      	lsls	r3, r3, #1
 800679a:	687a      	ldr	r2, [r7, #4]
 800679c:	6812      	ldr	r2, [r2, #0]
 800679e:	4413      	add	r3, r2
 80067a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a4:	881b      	ldrh	r3, [r3, #0]
 80067a6:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80067aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ac:	61da      	str	r2, [r3, #28]
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6818      	ldr	r0, [r3, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 80067b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ba:	88da      	ldrh	r2, [r3, #6]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	69db      	ldr	r3, [r3, #28]
 80067c0:	b29b      	uxth	r3, r3
 80067c2:	f005 fc53 	bl	800c06c <USB_ReadPMA>
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	881b      	ldrh	r3, [r3, #0]
 80067cc:	b29a      	uxth	r2, r3
 80067ce:	f640 738f 	movw	r3, #3983	; 0xf8f
 80067d2:	4013      	ands	r3, r2
 80067d4:	823b      	strh	r3, [r7, #16]
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	8a3a      	ldrh	r2, [r7, #16]
 80067dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80067e0:	b292      	uxth	r2, r2
 80067e2:	801a      	strh	r2, [r3, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	f00a ffe5 	bl	80117b4 <HAL_PCD_SetupStageCallback>
 80067ea:	e242      	b.n	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 80067ec:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	f280 823e 	bge.w	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	881b      	ldrh	r3, [r3, #0]
 80067fc:	b29a      	uxth	r2, r3
 80067fe:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006802:	4013      	ands	r3, r2
 8006804:	83bb      	strh	r3, [r7, #28]
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	8bba      	ldrh	r2, [r7, #28]
 800680c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006810:	b292      	uxth	r2, r2
 8006812:	801a      	strh	r2, [r3, #0]
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800681c:	b29b      	uxth	r3, r3
 800681e:	461a      	mov	r2, r3
 8006820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	00db      	lsls	r3, r3, #3
 8006826:	4413      	add	r3, r2
 8006828:	3306      	adds	r3, #6
 800682a:	005b      	lsls	r3, r3, #1
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	6812      	ldr	r2, [r2, #0]
 8006830:	4413      	add	r3, r2
 8006832:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006836:	881b      	ldrh	r3, [r3, #0]
 8006838:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800683c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800683e:	61da      	str	r2, [r3, #28]
 8006840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006842:	69db      	ldr	r3, [r3, #28]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d019      	beq.n	800687c <PCD_EP_ISR_Handler+0x1ee>
 8006848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684a:	695b      	ldr	r3, [r3, #20]
 800684c:	2b00      	cmp	r3, #0
 800684e:	d015      	beq.n	800687c <PCD_EP_ISR_Handler+0x1ee>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006856:	6959      	ldr	r1, [r3, #20]
 8006858:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685a:	88da      	ldrh	r2, [r3, #6]
 800685c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800685e:	69db      	ldr	r3, [r3, #28]
 8006860:	b29b      	uxth	r3, r3
 8006862:	f005 fc03 	bl	800c06c <USB_ReadPMA>
 8006866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006868:	695a      	ldr	r2, [r3, #20]
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	69db      	ldr	r3, [r3, #28]
 800686e:	441a      	add	r2, r3
 8006870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006872:	615a      	str	r2, [r3, #20]
 8006874:	2100      	movs	r1, #0
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f00a ffae 	bl	80117d8 <HAL_PCD_DataOutStageCallback>
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	881b      	ldrh	r3, [r3, #0]
 8006882:	b29b      	uxth	r3, r3
 8006884:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006888:	2b00      	cmp	r3, #0
 800688a:	f040 81f2 	bne.w	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	61bb      	str	r3, [r7, #24]
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800689c:	b29b      	uxth	r3, r3
 800689e:	461a      	mov	r2, r3
 80068a0:	69bb      	ldr	r3, [r7, #24]
 80068a2:	4413      	add	r3, r2
 80068a4:	61bb      	str	r3, [r7, #24]
 80068a6:	69bb      	ldr	r3, [r7, #24]
 80068a8:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80068ac:	617b      	str	r3, [r7, #20]
 80068ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b0:	691b      	ldr	r3, [r3, #16]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d112      	bne.n	80068dc <PCD_EP_ISR_Handler+0x24e>
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	881b      	ldrh	r3, [r3, #0]
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	697b      	ldr	r3, [r7, #20]
 80068c4:	801a      	strh	r2, [r3, #0]
 80068c6:	697b      	ldr	r3, [r7, #20]
 80068c8:	881b      	ldrh	r3, [r3, #0]
 80068ca:	b29b      	uxth	r3, r3
 80068cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80068d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	697b      	ldr	r3, [r7, #20]
 80068d8:	801a      	strh	r2, [r3, #0]
 80068da:	e02f      	b.n	800693c <PCD_EP_ISR_Handler+0x2ae>
 80068dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068de:	691b      	ldr	r3, [r3, #16]
 80068e0:	2b3e      	cmp	r3, #62	; 0x3e
 80068e2:	d813      	bhi.n	800690c <PCD_EP_ISR_Handler+0x27e>
 80068e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e6:	691b      	ldr	r3, [r3, #16]
 80068e8:	085b      	lsrs	r3, r3, #1
 80068ea:	633b      	str	r3, [r7, #48]	; 0x30
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	f003 0301 	and.w	r3, r3, #1
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d002      	beq.n	80068fe <PCD_EP_ISR_Handler+0x270>
 80068f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fa:	3301      	adds	r3, #1
 80068fc:	633b      	str	r3, [r7, #48]	; 0x30
 80068fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006900:	b29b      	uxth	r3, r3
 8006902:	029b      	lsls	r3, r3, #10
 8006904:	b29a      	uxth	r2, r3
 8006906:	697b      	ldr	r3, [r7, #20]
 8006908:	801a      	strh	r2, [r3, #0]
 800690a:	e017      	b.n	800693c <PCD_EP_ISR_Handler+0x2ae>
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	691b      	ldr	r3, [r3, #16]
 8006910:	095b      	lsrs	r3, r3, #5
 8006912:	633b      	str	r3, [r7, #48]	; 0x30
 8006914:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006916:	691b      	ldr	r3, [r3, #16]
 8006918:	f003 031f 	and.w	r3, r3, #31
 800691c:	2b00      	cmp	r3, #0
 800691e:	d102      	bne.n	8006926 <PCD_EP_ISR_Handler+0x298>
 8006920:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006922:	3b01      	subs	r3, #1
 8006924:	633b      	str	r3, [r7, #48]	; 0x30
 8006926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006928:	b29b      	uxth	r3, r3
 800692a:	029b      	lsls	r3, r3, #10
 800692c:	b29b      	uxth	r3, r3
 800692e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006932:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006936:	b29a      	uxth	r2, r3
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	801a      	strh	r2, [r3, #0]
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	881b      	ldrh	r3, [r3, #0]
 8006942:	b29b      	uxth	r3, r3
 8006944:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006948:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694c:	827b      	strh	r3, [r7, #18]
 800694e:	8a7b      	ldrh	r3, [r7, #18]
 8006950:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8006954:	827b      	strh	r3, [r7, #18]
 8006956:	8a7b      	ldrh	r3, [r7, #18]
 8006958:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800695c:	827b      	strh	r3, [r7, #18]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681a      	ldr	r2, [r3, #0]
 8006962:	8a7b      	ldrh	r3, [r7, #18]
 8006964:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006968:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800696c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006970:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006974:	b29b      	uxth	r3, r3
 8006976:	8013      	strh	r3, [r2, #0]
 8006978:	e17b      	b.n	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006984:	009b      	lsls	r3, r3, #2
 8006986:	4413      	add	r3, r2
 8006988:	881b      	ldrh	r3, [r3, #0]
 800698a:	857b      	strh	r3, [r7, #42]	; 0x2a
 800698c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006990:	2b00      	cmp	r3, #0
 8006992:	f280 80ea 	bge.w	8006b6a <PCD_EP_ISR_Handler+0x4dc>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	461a      	mov	r2, r3
 800699c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069a0:	009b      	lsls	r3, r3, #2
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	b29a      	uxth	r2, r3
 80069a8:	f640 738f 	movw	r3, #3983	; 0xf8f
 80069ac:	4013      	ands	r3, r2
 80069ae:	853b      	strh	r3, [r7, #40]	; 0x28
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 80069ba:	009b      	lsls	r3, r3, #2
 80069bc:	4413      	add	r3, r2
 80069be:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 80069c0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80069c4:	b292      	uxth	r2, r2
 80069c6:	801a      	strh	r2, [r3, #0]
 80069c8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 80069cc:	4613      	mov	r3, r2
 80069ce:	009b      	lsls	r3, r3, #2
 80069d0:	4413      	add	r3, r2
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	4413      	add	r3, r2
 80069dc:	627b      	str	r3, [r7, #36]	; 0x24
 80069de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e0:	7b1b      	ldrb	r3, [r3, #12]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d122      	bne.n	8006a2c <PCD_EP_ISR_Handler+0x39e>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80069ee:	b29b      	uxth	r3, r3
 80069f0:	461a      	mov	r2, r3
 80069f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f4:	781b      	ldrb	r3, [r3, #0]
 80069f6:	00db      	lsls	r3, r3, #3
 80069f8:	4413      	add	r3, r2
 80069fa:	3306      	adds	r3, #6
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	687a      	ldr	r2, [r7, #4]
 8006a00:	6812      	ldr	r2, [r2, #0]
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a08:	881b      	ldrh	r3, [r3, #0]
 8006a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a0e:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a10:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	f000 8087 	beq.w	8006b26 <PCD_EP_ISR_Handler+0x498>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	6818      	ldr	r0, [r3, #0]
 8006a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1e:	6959      	ldr	r1, [r3, #20]
 8006a20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a22:	88da      	ldrh	r2, [r3, #6]
 8006a24:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006a26:	f005 fb21 	bl	800c06c <USB_ReadPMA>
 8006a2a:	e07c      	b.n	8006b26 <PCD_EP_ISR_Handler+0x498>
 8006a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a2e:	78db      	ldrb	r3, [r3, #3]
 8006a30:	2b02      	cmp	r3, #2
 8006a32:	d108      	bne.n	8006a46 <PCD_EP_ISR_Handler+0x3b8>
 8006a34:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a36:	461a      	mov	r2, r3
 8006a38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a3a:	6878      	ldr	r0, [r7, #4]
 8006a3c:	f000 f927 	bl	8006c8e <HAL_PCD_EP_DB_Receive>
 8006a40:	4603      	mov	r3, r0
 8006a42:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006a44:	e06f      	b.n	8006b26 <PCD_EP_ISR_Handler+0x498>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	461a      	mov	r2, r3
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	781b      	ldrb	r3, [r3, #0]
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	881b      	ldrh	r3, [r3, #0]
 8006a56:	b29b      	uxth	r3, r3
 8006a58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a60:	847b      	strh	r3, [r7, #34]	; 0x22
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	681b      	ldr	r3, [r3, #0]
 8006a66:	461a      	mov	r2, r3
 8006a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6a:	781b      	ldrb	r3, [r3, #0]
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	441a      	add	r2, r3
 8006a70:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006a76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006a7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006a7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006a82:	b29b      	uxth	r3, r3
 8006a84:	8013      	strh	r3, [r2, #0]
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	461a      	mov	r2, r3
 8006a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	009b      	lsls	r3, r3, #2
 8006a92:	4413      	add	r3, r2
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	b29b      	uxth	r3, r3
 8006a98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d021      	beq.n	8006ae4 <PCD_EP_ISR_Handler+0x456>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aa8:	b29b      	uxth	r3, r3
 8006aaa:	461a      	mov	r2, r3
 8006aac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aae:	781b      	ldrb	r3, [r3, #0]
 8006ab0:	00db      	lsls	r3, r3, #3
 8006ab2:	4413      	add	r3, r2
 8006ab4:	3302      	adds	r3, #2
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	687a      	ldr	r2, [r7, #4]
 8006aba:	6812      	ldr	r2, [r2, #0]
 8006abc:	4413      	add	r3, r2
 8006abe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ac2:	881b      	ldrh	r3, [r3, #0]
 8006ac4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006ac8:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006aca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d02a      	beq.n	8006b26 <PCD_EP_ISR_Handler+0x498>
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6818      	ldr	r0, [r3, #0]
 8006ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad6:	6959      	ldr	r1, [r3, #20]
 8006ad8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ada:	891a      	ldrh	r2, [r3, #8]
 8006adc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006ade:	f005 fac5 	bl	800c06c <USB_ReadPMA>
 8006ae2:	e020      	b.n	8006b26 <PCD_EP_ISR_Handler+0x498>
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006aec:	b29b      	uxth	r3, r3
 8006aee:	461a      	mov	r2, r3
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af2:	781b      	ldrb	r3, [r3, #0]
 8006af4:	00db      	lsls	r3, r3, #3
 8006af6:	4413      	add	r3, r2
 8006af8:	3306      	adds	r3, #6
 8006afa:	005b      	lsls	r3, r3, #1
 8006afc:	687a      	ldr	r2, [r7, #4]
 8006afe:	6812      	ldr	r2, [r2, #0]
 8006b00:	4413      	add	r3, r2
 8006b02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b06:	881b      	ldrh	r3, [r3, #0]
 8006b08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b0c:	86fb      	strh	r3, [r7, #54]	; 0x36
 8006b0e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d008      	beq.n	8006b26 <PCD_EP_ISR_Handler+0x498>
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6818      	ldr	r0, [r3, #0]
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	6959      	ldr	r1, [r3, #20]
 8006b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1e:	895a      	ldrh	r2, [r3, #10]
 8006b20:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b22:	f005 faa3 	bl	800c06c <USB_ReadPMA>
 8006b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b28:	69da      	ldr	r2, [r3, #28]
 8006b2a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b2c:	441a      	add	r2, r3
 8006b2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b30:	61da      	str	r2, [r3, #28]
 8006b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b34:	695a      	ldr	r2, [r3, #20]
 8006b36:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8006b38:	441a      	add	r2, r3
 8006b3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b3c:	615a      	str	r2, [r3, #20]
 8006b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b40:	699b      	ldr	r3, [r3, #24]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d004      	beq.n	8006b50 <PCD_EP_ISR_Handler+0x4c2>
 8006b46:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 8006b48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b4a:	691b      	ldr	r3, [r3, #16]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d206      	bcs.n	8006b5e <PCD_EP_ISR_Handler+0x4d0>
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	4619      	mov	r1, r3
 8006b56:	6878      	ldr	r0, [r7, #4]
 8006b58:	f00a fe3e 	bl	80117d8 <HAL_PCD_DataOutStageCallback>
 8006b5c:	e005      	b.n	8006b6a <PCD_EP_ISR_Handler+0x4dc>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006b64:	4618      	mov	r0, r3
 8006b66:	f003 fadb 	bl	800a120 <USB_EPStartXfer>
 8006b6a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006b6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d07e      	beq.n	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 8006b74:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b78:	1c5a      	adds	r2, r3, #1
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	00db      	lsls	r3, r3, #3
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	4413      	add	r3, r2
 8006b86:	627b      	str	r3, [r7, #36]	; 0x24
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	461a      	mov	r2, r3
 8006b8e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006b92:	009b      	lsls	r3, r3, #2
 8006b94:	4413      	add	r3, r2
 8006b96:	881b      	ldrh	r3, [r3, #0]
 8006b98:	b29b      	uxth	r3, r3
 8006b9a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 8006b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ba2:	843b      	strh	r3, [r7, #32]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	461a      	mov	r2, r3
 8006baa:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	441a      	add	r2, r3
 8006bb2:	8c3b      	ldrh	r3, [r7, #32]
 8006bb4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006bb8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006bbc:	b29b      	uxth	r3, r3
 8006bbe:	8013      	strh	r3, [r2, #0]
 8006bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bc2:	78db      	ldrb	r3, [r3, #3]
 8006bc4:	2b03      	cmp	r3, #3
 8006bc6:	d00c      	beq.n	8006be2 <PCD_EP_ISR_Handler+0x554>
 8006bc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bca:	78db      	ldrb	r3, [r3, #3]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d008      	beq.n	8006be2 <PCD_EP_ISR_Handler+0x554>
 8006bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bd2:	78db      	ldrb	r3, [r3, #3]
 8006bd4:	2b02      	cmp	r3, #2
 8006bd6:	d146      	bne.n	8006c66 <PCD_EP_ISR_Handler+0x5d8>
 8006bd8:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006bda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d141      	bne.n	8006c66 <PCD_EP_ISR_Handler+0x5d8>
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006bea:	b29b      	uxth	r3, r3
 8006bec:	461a      	mov	r2, r3
 8006bee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bf0:	781b      	ldrb	r3, [r3, #0]
 8006bf2:	00db      	lsls	r3, r3, #3
 8006bf4:	4413      	add	r3, r2
 8006bf6:	3302      	adds	r3, #2
 8006bf8:	005b      	lsls	r3, r3, #1
 8006bfa:	687a      	ldr	r2, [r7, #4]
 8006bfc:	6812      	ldr	r2, [r2, #0]
 8006bfe:	4413      	add	r3, r2
 8006c00:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c04:	881b      	ldrh	r3, [r3, #0]
 8006c06:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c0a:	83fb      	strh	r3, [r7, #30]
 8006c0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c0e:	699a      	ldr	r2, [r3, #24]
 8006c10:	8bfb      	ldrh	r3, [r7, #30]
 8006c12:	429a      	cmp	r2, r3
 8006c14:	d906      	bls.n	8006c24 <PCD_EP_ISR_Handler+0x596>
 8006c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c18:	699a      	ldr	r2, [r3, #24]
 8006c1a:	8bfb      	ldrh	r3, [r7, #30]
 8006c1c:	1ad2      	subs	r2, r2, r3
 8006c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c20:	619a      	str	r2, [r3, #24]
 8006c22:	e002      	b.n	8006c2a <PCD_EP_ISR_Handler+0x59c>
 8006c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c26:	2200      	movs	r2, #0
 8006c28:	619a      	str	r2, [r3, #24]
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	699b      	ldr	r3, [r3, #24]
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d106      	bne.n	8006c40 <PCD_EP_ISR_Handler+0x5b2>
 8006c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c34:	781b      	ldrb	r3, [r3, #0]
 8006c36:	4619      	mov	r1, r3
 8006c38:	6878      	ldr	r0, [r7, #4]
 8006c3a:	f00a fde8 	bl	801180e <HAL_PCD_DataInStageCallback>
 8006c3e:	e018      	b.n	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 8006c40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c42:	695a      	ldr	r2, [r3, #20]
 8006c44:	8bfb      	ldrh	r3, [r7, #30]
 8006c46:	441a      	add	r2, r3
 8006c48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4a:	615a      	str	r2, [r3, #20]
 8006c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c4e:	69da      	ldr	r2, [r3, #28]
 8006c50:	8bfb      	ldrh	r3, [r7, #30]
 8006c52:	441a      	add	r2, r3
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	61da      	str	r2, [r3, #28]
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f003 fa5e 	bl	800a120 <USB_EPStartXfer>
 8006c64:	e005      	b.n	8006c72 <PCD_EP_ISR_Handler+0x5e4>
 8006c66:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006c68:	461a      	mov	r2, r3
 8006c6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f91b 	bl	8006ea8 <HAL_PCD_EP_DB_Transmit>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	b21b      	sxth	r3, r3
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	f6ff ad0a 	blt.w	8006698 <PCD_EP_ISR_Handler+0xa>
 8006c84:	2300      	movs	r3, #0
 8006c86:	4618      	mov	r0, r3
 8006c88:	3738      	adds	r7, #56	; 0x38
 8006c8a:	46bd      	mov	sp, r7
 8006c8c:	bd80      	pop	{r7, pc}

08006c8e <HAL_PCD_EP_DB_Receive>:
 8006c8e:	b580      	push	{r7, lr}
 8006c90:	b088      	sub	sp, #32
 8006c92:	af00      	add	r7, sp, #0
 8006c94:	60f8      	str	r0, [r7, #12]
 8006c96:	60b9      	str	r1, [r7, #8]
 8006c98:	4613      	mov	r3, r2
 8006c9a:	80fb      	strh	r3, [r7, #6]
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d07e      	beq.n	8006da4 <HAL_PCD_EP_DB_Receive+0x116>
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	781b      	ldrb	r3, [r3, #0]
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	4413      	add	r3, r2
 8006cba:	3302      	adds	r3, #2
 8006cbc:	005b      	lsls	r3, r3, #1
 8006cbe:	68fa      	ldr	r2, [r7, #12]
 8006cc0:	6812      	ldr	r2, [r2, #0]
 8006cc2:	4413      	add	r3, r2
 8006cc4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc8:	881b      	ldrh	r3, [r3, #0]
 8006cca:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006cce:	837b      	strh	r3, [r7, #26]
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	8b7b      	ldrh	r3, [r7, #26]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d306      	bcc.n	8006ce8 <HAL_PCD_EP_DB_Receive+0x5a>
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	699a      	ldr	r2, [r3, #24]
 8006cde:	8b7b      	ldrh	r3, [r7, #26]
 8006ce0:	1ad2      	subs	r2, r2, r3
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	619a      	str	r2, [r3, #24]
 8006ce6:	e002      	b.n	8006cee <HAL_PCD_EP_DB_Receive+0x60>
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	2200      	movs	r2, #0
 8006cec:	619a      	str	r2, [r3, #24]
 8006cee:	68bb      	ldr	r3, [r7, #8]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	2b00      	cmp	r3, #0
 8006cf4:	d123      	bne.n	8006d3e <HAL_PCD_EP_DB_Receive+0xb0>
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	461a      	mov	r2, r3
 8006cfc:	68bb      	ldr	r3, [r7, #8]
 8006cfe:	781b      	ldrb	r3, [r3, #0]
 8006d00:	009b      	lsls	r3, r3, #2
 8006d02:	4413      	add	r3, r2
 8006d04:	881b      	ldrh	r3, [r3, #0]
 8006d06:	b29b      	uxth	r3, r3
 8006d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d10:	833b      	strh	r3, [r7, #24]
 8006d12:	8b3b      	ldrh	r3, [r7, #24]
 8006d14:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006d18:	833b      	strh	r3, [r7, #24]
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	781b      	ldrb	r3, [r3, #0]
 8006d24:	009b      	lsls	r3, r3, #2
 8006d26:	441a      	add	r2, r3
 8006d28:	8b3b      	ldrh	r3, [r7, #24]
 8006d2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d3a:	b29b      	uxth	r3, r3
 8006d3c:	8013      	strh	r3, [r2, #0]
 8006d3e:	88fb      	ldrh	r3, [r7, #6]
 8006d40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d01f      	beq.n	8006d88 <HAL_PCD_EP_DB_Receive+0xfa>
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	461a      	mov	r2, r3
 8006d4e:	68bb      	ldr	r3, [r7, #8]
 8006d50:	781b      	ldrb	r3, [r3, #0]
 8006d52:	009b      	lsls	r3, r3, #2
 8006d54:	4413      	add	r3, r2
 8006d56:	881b      	ldrh	r3, [r3, #0]
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d62:	82fb      	strh	r3, [r7, #22]
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	461a      	mov	r2, r3
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	781b      	ldrb	r3, [r3, #0]
 8006d6e:	009b      	lsls	r3, r3, #2
 8006d70:	441a      	add	r2, r3
 8006d72:	8afb      	ldrh	r3, [r7, #22]
 8006d74:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006d78:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006d7c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006d80:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006d84:	b29b      	uxth	r3, r3
 8006d86:	8013      	strh	r3, [r2, #0]
 8006d88:	8b7b      	ldrh	r3, [r7, #26]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	f000 8087 	beq.w	8006e9e <HAL_PCD_EP_DB_Receive+0x210>
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6818      	ldr	r0, [r3, #0]
 8006d94:	68bb      	ldr	r3, [r7, #8]
 8006d96:	6959      	ldr	r1, [r3, #20]
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	891a      	ldrh	r2, [r3, #8]
 8006d9c:	8b7b      	ldrh	r3, [r7, #26]
 8006d9e:	f005 f965 	bl	800c06c <USB_ReadPMA>
 8006da2:	e07c      	b.n	8006e9e <HAL_PCD_EP_DB_Receive+0x210>
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006dac:	b29b      	uxth	r3, r3
 8006dae:	461a      	mov	r2, r3
 8006db0:	68bb      	ldr	r3, [r7, #8]
 8006db2:	781b      	ldrb	r3, [r3, #0]
 8006db4:	00db      	lsls	r3, r3, #3
 8006db6:	4413      	add	r3, r2
 8006db8:	3306      	adds	r3, #6
 8006dba:	005b      	lsls	r3, r3, #1
 8006dbc:	68fa      	ldr	r2, [r7, #12]
 8006dbe:	6812      	ldr	r2, [r2, #0]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006dc6:	881b      	ldrh	r3, [r3, #0]
 8006dc8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006dcc:	837b      	strh	r3, [r7, #26]
 8006dce:	68bb      	ldr	r3, [r7, #8]
 8006dd0:	699a      	ldr	r2, [r3, #24]
 8006dd2:	8b7b      	ldrh	r3, [r7, #26]
 8006dd4:	429a      	cmp	r2, r3
 8006dd6:	d306      	bcc.n	8006de6 <HAL_PCD_EP_DB_Receive+0x158>
 8006dd8:	68bb      	ldr	r3, [r7, #8]
 8006dda:	699a      	ldr	r2, [r3, #24]
 8006ddc:	8b7b      	ldrh	r3, [r7, #26]
 8006dde:	1ad2      	subs	r2, r2, r3
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	619a      	str	r2, [r3, #24]
 8006de4:	e002      	b.n	8006dec <HAL_PCD_EP_DB_Receive+0x15e>
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	2200      	movs	r2, #0
 8006dea:	619a      	str	r2, [r3, #24]
 8006dec:	68bb      	ldr	r3, [r7, #8]
 8006dee:	699b      	ldr	r3, [r3, #24]
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d123      	bne.n	8006e3c <HAL_PCD_EP_DB_Receive+0x1ae>
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	461a      	mov	r2, r3
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	881b      	ldrh	r3, [r3, #0]
 8006e04:	b29b      	uxth	r3, r3
 8006e06:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006e0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e0e:	83fb      	strh	r3, [r7, #30]
 8006e10:	8bfb      	ldrh	r3, [r7, #30]
 8006e12:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006e16:	83fb      	strh	r3, [r7, #30]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	68bb      	ldr	r3, [r7, #8]
 8006e20:	781b      	ldrb	r3, [r3, #0]
 8006e22:	009b      	lsls	r3, r3, #2
 8006e24:	441a      	add	r2, r3
 8006e26:	8bfb      	ldrh	r3, [r7, #30]
 8006e28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e38:	b29b      	uxth	r3, r3
 8006e3a:	8013      	strh	r3, [r2, #0]
 8006e3c:	88fb      	ldrh	r3, [r7, #6]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d11f      	bne.n	8006e86 <HAL_PCD_EP_DB_Receive+0x1f8>
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	461a      	mov	r2, r3
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	781b      	ldrb	r3, [r3, #0]
 8006e50:	009b      	lsls	r3, r3, #2
 8006e52:	4413      	add	r3, r2
 8006e54:	881b      	ldrh	r3, [r3, #0]
 8006e56:	b29b      	uxth	r3, r3
 8006e58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e5c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e60:	83bb      	strh	r3, [r7, #28]
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	461a      	mov	r2, r3
 8006e68:	68bb      	ldr	r3, [r7, #8]
 8006e6a:	781b      	ldrb	r3, [r3, #0]
 8006e6c:	009b      	lsls	r3, r3, #2
 8006e6e:	441a      	add	r2, r3
 8006e70:	8bbb      	ldrh	r3, [r7, #28]
 8006e72:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e76:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e7a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006e7e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006e82:	b29b      	uxth	r3, r3
 8006e84:	8013      	strh	r3, [r2, #0]
 8006e86:	8b7b      	ldrh	r3, [r7, #26]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d008      	beq.n	8006e9e <HAL_PCD_EP_DB_Receive+0x210>
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	6818      	ldr	r0, [r3, #0]
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	6959      	ldr	r1, [r3, #20]
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	895a      	ldrh	r2, [r3, #10]
 8006e98:	8b7b      	ldrh	r3, [r7, #26]
 8006e9a:	f005 f8e7 	bl	800c06c <USB_ReadPMA>
 8006e9e:	8b7b      	ldrh	r3, [r7, #26]
 8006ea0:	4618      	mov	r0, r3
 8006ea2:	3720      	adds	r7, #32
 8006ea4:	46bd      	mov	sp, r7
 8006ea6:	bd80      	pop	{r7, pc}

08006ea8 <HAL_PCD_EP_DB_Transmit>:
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b0a2      	sub	sp, #136	; 0x88
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	4613      	mov	r3, r2
 8006eb4:	80fb      	strh	r3, [r7, #6]
 8006eb6:	88fb      	ldrh	r3, [r7, #6]
 8006eb8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	f000 81c7 	beq.w	8007250 <HAL_PCD_EP_DB_Transmit+0x3a8>
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006eca:	b29b      	uxth	r3, r3
 8006ecc:	461a      	mov	r2, r3
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	781b      	ldrb	r3, [r3, #0]
 8006ed2:	00db      	lsls	r3, r3, #3
 8006ed4:	4413      	add	r3, r2
 8006ed6:	3302      	adds	r3, #2
 8006ed8:	005b      	lsls	r3, r3, #1
 8006eda:	68fa      	ldr	r2, [r7, #12]
 8006edc:	6812      	ldr	r2, [r2, #0]
 8006ede:	4413      	add	r3, r2
 8006ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee4:	881b      	ldrh	r3, [r3, #0]
 8006ee6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006eea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d907      	bls.n	8006f0a <HAL_PCD_EP_DB_Transmit+0x62>
 8006efa:	68bb      	ldr	r3, [r7, #8]
 8006efc:	699a      	ldr	r2, [r3, #24]
 8006efe:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	619a      	str	r2, [r3, #24]
 8006f08:	e002      	b.n	8006f10 <HAL_PCD_EP_DB_Transmit+0x68>
 8006f0a:	68bb      	ldr	r3, [r7, #8]
 8006f0c:	2200      	movs	r2, #0
 8006f0e:	619a      	str	r2, [r3, #24]
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	699b      	ldr	r3, [r3, #24]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	f040 80b9 	bne.w	800708c <HAL_PCD_EP_DB_Transmit+0x1e4>
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	785b      	ldrb	r3, [r3, #1]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d126      	bne.n	8006f70 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	461a      	mov	r2, r3
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	4413      	add	r3, r2
 8006f38:	62bb      	str	r3, [r7, #40]	; 0x28
 8006f3a:	68bb      	ldr	r3, [r7, #8]
 8006f3c:	781b      	ldrb	r3, [r3, #0]
 8006f3e:	011a      	lsls	r2, r3, #4
 8006f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f42:	4413      	add	r3, r2
 8006f44:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f48:	627b      	str	r3, [r7, #36]	; 0x24
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	881b      	ldrh	r3, [r3, #0]
 8006f4e:	b29b      	uxth	r3, r3
 8006f50:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f54:	b29a      	uxth	r2, r3
 8006f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f58:	801a      	strh	r2, [r3, #0]
 8006f5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f5c:	881b      	ldrh	r3, [r3, #0]
 8006f5e:	b29b      	uxth	r3, r3
 8006f60:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f64:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f68:	b29a      	uxth	r2, r3
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6c:	801a      	strh	r2, [r3, #0]
 8006f6e:	e01a      	b.n	8006fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	785b      	ldrb	r3, [r3, #1]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d116      	bne.n	8006fa6 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006f78:	68fb      	ldr	r3, [r7, #12]
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	633b      	str	r3, [r7, #48]	; 0x30
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f86:	b29b      	uxth	r3, r3
 8006f88:	461a      	mov	r2, r3
 8006f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f8c:	4413      	add	r3, r2
 8006f8e:	633b      	str	r3, [r7, #48]	; 0x30
 8006f90:	68bb      	ldr	r3, [r7, #8]
 8006f92:	781b      	ldrb	r3, [r3, #0]
 8006f94:	011a      	lsls	r2, r3, #4
 8006f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f98:	4413      	add	r3, r2
 8006f9a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006fa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	801a      	strh	r2, [r3, #0]
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	623b      	str	r3, [r7, #32]
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	785b      	ldrb	r3, [r3, #1]
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d126      	bne.n	8007002 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	61bb      	str	r3, [r7, #24]
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	461a      	mov	r2, r3
 8006fc6:	69bb      	ldr	r3, [r7, #24]
 8006fc8:	4413      	add	r3, r2
 8006fca:	61bb      	str	r3, [r7, #24]
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	781b      	ldrb	r3, [r3, #0]
 8006fd0:	011a      	lsls	r2, r3, #4
 8006fd2:	69bb      	ldr	r3, [r7, #24]
 8006fd4:	4413      	add	r3, r2
 8006fd6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006fda:	617b      	str	r3, [r7, #20]
 8006fdc:	697b      	ldr	r3, [r7, #20]
 8006fde:	881b      	ldrh	r3, [r3, #0]
 8006fe0:	b29b      	uxth	r3, r3
 8006fe2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006fe6:	b29a      	uxth	r2, r3
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	801a      	strh	r2, [r3, #0]
 8006fec:	697b      	ldr	r3, [r7, #20]
 8006fee:	881b      	ldrh	r3, [r3, #0]
 8006ff0:	b29b      	uxth	r3, r3
 8006ff2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006ff6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006ffa:	b29a      	uxth	r2, r3
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	801a      	strh	r2, [r3, #0]
 8007000:	e017      	b.n	8007032 <HAL_PCD_EP_DB_Transmit+0x18a>
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	785b      	ldrb	r3, [r3, #1]
 8007006:	2b01      	cmp	r3, #1
 8007008:	d113      	bne.n	8007032 <HAL_PCD_EP_DB_Transmit+0x18a>
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007012:	b29b      	uxth	r3, r3
 8007014:	461a      	mov	r2, r3
 8007016:	6a3b      	ldr	r3, [r7, #32]
 8007018:	4413      	add	r3, r2
 800701a:	623b      	str	r3, [r7, #32]
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	781b      	ldrb	r3, [r3, #0]
 8007020:	011a      	lsls	r2, r3, #4
 8007022:	6a3b      	ldr	r3, [r7, #32]
 8007024:	4413      	add	r3, r2
 8007026:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800702a:	61fb      	str	r3, [r7, #28]
 800702c:	69fb      	ldr	r3, [r7, #28]
 800702e:	2200      	movs	r2, #0
 8007030:	801a      	strh	r2, [r3, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	4619      	mov	r1, r3
 8007038:	68f8      	ldr	r0, [r7, #12]
 800703a:	f00a fbe8 	bl	801180e <HAL_PCD_DataInStageCallback>
 800703e:	88fb      	ldrh	r3, [r7, #6]
 8007040:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007044:	2b00      	cmp	r3, #0
 8007046:	f000 82d4 	beq.w	80075f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	461a      	mov	r2, r3
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	009b      	lsls	r3, r3, #2
 8007056:	4413      	add	r3, r2
 8007058:	881b      	ldrh	r3, [r3, #0]
 800705a:	b29b      	uxth	r3, r3
 800705c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007060:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007064:	827b      	strh	r3, [r7, #18]
 8007066:	68fb      	ldr	r3, [r7, #12]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	461a      	mov	r2, r3
 800706c:	68bb      	ldr	r3, [r7, #8]
 800706e:	781b      	ldrb	r3, [r3, #0]
 8007070:	009b      	lsls	r3, r3, #2
 8007072:	441a      	add	r2, r3
 8007074:	8a7b      	ldrh	r3, [r7, #18]
 8007076:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800707a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800707e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007086:	b29b      	uxth	r3, r3
 8007088:	8013      	strh	r3, [r2, #0]
 800708a:	e2b2      	b.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 800708c:	88fb      	ldrh	r3, [r7, #6]
 800708e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007092:	2b00      	cmp	r3, #0
 8007094:	d021      	beq.n	80070da <HAL_PCD_EP_DB_Transmit+0x232>
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	461a      	mov	r2, r3
 800709c:	68bb      	ldr	r3, [r7, #8]
 800709e:	781b      	ldrb	r3, [r3, #0]
 80070a0:	009b      	lsls	r3, r3, #2
 80070a2:	4413      	add	r3, r2
 80070a4:	881b      	ldrh	r3, [r3, #0]
 80070a6:	b29b      	uxth	r3, r3
 80070a8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80070ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070b0:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	461a      	mov	r2, r3
 80070ba:	68bb      	ldr	r3, [r7, #8]
 80070bc:	781b      	ldrb	r3, [r3, #0]
 80070be:	009b      	lsls	r3, r3, #2
 80070c0:	441a      	add	r2, r3
 80070c2:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 80070c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80070ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80070ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80070d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	8013      	strh	r3, [r2, #0]
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80070e0:	2b01      	cmp	r3, #1
 80070e2:	f040 8286 	bne.w	80075f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	695a      	ldr	r2, [r3, #20]
 80070ea:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070ee:	441a      	add	r2, r3
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	615a      	str	r2, [r3, #20]
 80070f4:	68bb      	ldr	r3, [r7, #8]
 80070f6:	69da      	ldr	r2, [r3, #28]
 80070f8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80070fc:	441a      	add	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	61da      	str	r2, [r3, #28]
 8007102:	68bb      	ldr	r3, [r7, #8]
 8007104:	6a1a      	ldr	r2, [r3, #32]
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	691b      	ldr	r3, [r3, #16]
 800710a:	429a      	cmp	r2, r3
 800710c:	d309      	bcc.n	8007122 <HAL_PCD_EP_DB_Transmit+0x27a>
 800710e:	68bb      	ldr	r3, [r7, #8]
 8007110:	691b      	ldr	r3, [r3, #16]
 8007112:	653b      	str	r3, [r7, #80]	; 0x50
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	6a1a      	ldr	r2, [r3, #32]
 8007118:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800711a:	1ad2      	subs	r2, r2, r3
 800711c:	68bb      	ldr	r3, [r7, #8]
 800711e:	621a      	str	r2, [r3, #32]
 8007120:	e015      	b.n	800714e <HAL_PCD_EP_DB_Transmit+0x2a6>
 8007122:	68bb      	ldr	r3, [r7, #8]
 8007124:	6a1b      	ldr	r3, [r3, #32]
 8007126:	2b00      	cmp	r3, #0
 8007128:	d107      	bne.n	800713a <HAL_PCD_EP_DB_Transmit+0x292>
 800712a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 800712e:	653b      	str	r3, [r7, #80]	; 0x50
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	2200      	movs	r2, #0
 8007134:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007138:	e009      	b.n	800714e <HAL_PCD_EP_DB_Transmit+0x2a6>
 800713a:	68bb      	ldr	r3, [r7, #8]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	653b      	str	r3, [r7, #80]	; 0x50
 8007148:	68bb      	ldr	r3, [r7, #8]
 800714a:	2200      	movs	r2, #0
 800714c:	621a      	str	r2, [r3, #32]
 800714e:	68bb      	ldr	r3, [r7, #8]
 8007150:	785b      	ldrb	r3, [r3, #1]
 8007152:	2b00      	cmp	r3, #0
 8007154:	d155      	bne.n	8007202 <HAL_PCD_EP_DB_Transmit+0x35a>
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	63bb      	str	r3, [r7, #56]	; 0x38
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007164:	b29b      	uxth	r3, r3
 8007166:	461a      	mov	r2, r3
 8007168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800716a:	4413      	add	r3, r2
 800716c:	63bb      	str	r3, [r7, #56]	; 0x38
 800716e:	68bb      	ldr	r3, [r7, #8]
 8007170:	781b      	ldrb	r3, [r3, #0]
 8007172:	011a      	lsls	r2, r3, #4
 8007174:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007176:	4413      	add	r3, r2
 8007178:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800717c:	637b      	str	r3, [r7, #52]	; 0x34
 800717e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007180:	2b00      	cmp	r3, #0
 8007182:	d112      	bne.n	80071aa <HAL_PCD_EP_DB_Transmit+0x302>
 8007184:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007186:	881b      	ldrh	r3, [r3, #0]
 8007188:	b29b      	uxth	r3, r3
 800718a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800718e:	b29a      	uxth	r2, r3
 8007190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007192:	801a      	strh	r2, [r3, #0]
 8007194:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007196:	881b      	ldrh	r3, [r3, #0]
 8007198:	b29b      	uxth	r3, r3
 800719a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800719e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071a2:	b29a      	uxth	r2, r3
 80071a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071a6:	801a      	strh	r2, [r3, #0]
 80071a8:	e047      	b.n	800723a <HAL_PCD_EP_DB_Transmit+0x392>
 80071aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071ac:	2b3e      	cmp	r3, #62	; 0x3e
 80071ae:	d811      	bhi.n	80071d4 <HAL_PCD_EP_DB_Transmit+0x32c>
 80071b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071b8:	f003 0301 	and.w	r3, r3, #1
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d002      	beq.n	80071c6 <HAL_PCD_EP_DB_Transmit+0x31e>
 80071c0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c2:	3301      	adds	r3, #1
 80071c4:	64bb      	str	r3, [r7, #72]	; 0x48
 80071c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071c8:	b29b      	uxth	r3, r3
 80071ca:	029b      	lsls	r3, r3, #10
 80071cc:	b29a      	uxth	r2, r3
 80071ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071d0:	801a      	strh	r2, [r3, #0]
 80071d2:	e032      	b.n	800723a <HAL_PCD_EP_DB_Transmit+0x392>
 80071d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071d6:	095b      	lsrs	r3, r3, #5
 80071d8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071dc:	f003 031f 	and.w	r3, r3, #31
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d102      	bne.n	80071ea <HAL_PCD_EP_DB_Transmit+0x342>
 80071e4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071e6:	3b01      	subs	r3, #1
 80071e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80071ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071ec:	b29b      	uxth	r3, r3
 80071ee:	029b      	lsls	r3, r3, #10
 80071f0:	b29b      	uxth	r3, r3
 80071f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80071f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80071fa:	b29a      	uxth	r2, r3
 80071fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fe:	801a      	strh	r2, [r3, #0]
 8007200:	e01b      	b.n	800723a <HAL_PCD_EP_DB_Transmit+0x392>
 8007202:	68bb      	ldr	r3, [r7, #8]
 8007204:	785b      	ldrb	r3, [r3, #1]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d117      	bne.n	800723a <HAL_PCD_EP_DB_Transmit+0x392>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	643b      	str	r3, [r7, #64]	; 0x40
 8007210:	68fb      	ldr	r3, [r7, #12]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007218:	b29b      	uxth	r3, r3
 800721a:	461a      	mov	r2, r3
 800721c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800721e:	4413      	add	r3, r2
 8007220:	643b      	str	r3, [r7, #64]	; 0x40
 8007222:	68bb      	ldr	r3, [r7, #8]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	011a      	lsls	r2, r3, #4
 8007228:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800722a:	4413      	add	r3, r2
 800722c:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007230:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007232:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007234:	b29a      	uxth	r2, r3
 8007236:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007238:	801a      	strh	r2, [r3, #0]
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	6818      	ldr	r0, [r3, #0]
 800723e:	68bb      	ldr	r3, [r7, #8]
 8007240:	6959      	ldr	r1, [r3, #20]
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	891a      	ldrh	r2, [r3, #8]
 8007246:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007248:	b29b      	uxth	r3, r3
 800724a:	f004 feca 	bl	800bfe2 <USB_WritePMA>
 800724e:	e1d0      	b.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007258:	b29b      	uxth	r3, r3
 800725a:	461a      	mov	r2, r3
 800725c:	68bb      	ldr	r3, [r7, #8]
 800725e:	781b      	ldrb	r3, [r3, #0]
 8007260:	00db      	lsls	r3, r3, #3
 8007262:	4413      	add	r3, r2
 8007264:	3306      	adds	r3, #6
 8007266:	005b      	lsls	r3, r3, #1
 8007268:	68fa      	ldr	r2, [r7, #12]
 800726a:	6812      	ldr	r2, [r2, #0]
 800726c:	4413      	add	r3, r2
 800726e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007272:	881b      	ldrh	r3, [r3, #0]
 8007274:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007278:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	699a      	ldr	r2, [r3, #24]
 8007280:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007284:	429a      	cmp	r2, r3
 8007286:	d307      	bcc.n	8007298 <HAL_PCD_EP_DB_Transmit+0x3f0>
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	699a      	ldr	r2, [r3, #24]
 800728c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007290:	1ad2      	subs	r2, r2, r3
 8007292:	68bb      	ldr	r3, [r7, #8]
 8007294:	619a      	str	r2, [r3, #24]
 8007296:	e002      	b.n	800729e <HAL_PCD_EP_DB_Transmit+0x3f6>
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	2200      	movs	r2, #0
 800729c:	619a      	str	r2, [r3, #24]
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	699b      	ldr	r3, [r3, #24]
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	f040 80c4 	bne.w	8007430 <HAL_PCD_EP_DB_Transmit+0x588>
 80072a8:	68bb      	ldr	r3, [r7, #8]
 80072aa:	785b      	ldrb	r3, [r3, #1]
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d126      	bne.n	80072fe <HAL_PCD_EP_DB_Transmit+0x456>
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072be:	b29b      	uxth	r3, r3
 80072c0:	461a      	mov	r2, r3
 80072c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072c4:	4413      	add	r3, r2
 80072c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80072c8:	68bb      	ldr	r3, [r7, #8]
 80072ca:	781b      	ldrb	r3, [r3, #0]
 80072cc:	011a      	lsls	r2, r3, #4
 80072ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80072d0:	4413      	add	r3, r2
 80072d2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80072d6:	66bb      	str	r3, [r7, #104]	; 0x68
 80072d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072da:	881b      	ldrh	r3, [r3, #0]
 80072dc:	b29b      	uxth	r3, r3
 80072de:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072e2:	b29a      	uxth	r2, r3
 80072e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072e6:	801a      	strh	r2, [r3, #0]
 80072e8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072ea:	881b      	ldrh	r3, [r3, #0]
 80072ec:	b29b      	uxth	r3, r3
 80072ee:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072f2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80072fa:	801a      	strh	r2, [r3, #0]
 80072fc:	e01a      	b.n	8007334 <HAL_PCD_EP_DB_Transmit+0x48c>
 80072fe:	68bb      	ldr	r3, [r7, #8]
 8007300:	785b      	ldrb	r3, [r3, #1]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d116      	bne.n	8007334 <HAL_PCD_EP_DB_Transmit+0x48c>
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	681b      	ldr	r3, [r3, #0]
 800730a:	677b      	str	r3, [r7, #116]	; 0x74
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007314:	b29b      	uxth	r3, r3
 8007316:	461a      	mov	r2, r3
 8007318:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800731a:	4413      	add	r3, r2
 800731c:	677b      	str	r3, [r7, #116]	; 0x74
 800731e:	68bb      	ldr	r3, [r7, #8]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	011a      	lsls	r2, r3, #4
 8007324:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007326:	4413      	add	r3, r2
 8007328:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800732c:	673b      	str	r3, [r7, #112]	; 0x70
 800732e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007330:	2200      	movs	r2, #0
 8007332:	801a      	strh	r2, [r3, #0]
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	681b      	ldr	r3, [r3, #0]
 8007338:	67bb      	str	r3, [r7, #120]	; 0x78
 800733a:	68bb      	ldr	r3, [r7, #8]
 800733c:	785b      	ldrb	r3, [r3, #1]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d12f      	bne.n	80073a2 <HAL_PCD_EP_DB_Transmit+0x4fa>
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007352:	b29b      	uxth	r3, r3
 8007354:	461a      	mov	r2, r3
 8007356:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800735a:	4413      	add	r3, r2
 800735c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007360:	68bb      	ldr	r3, [r7, #8]
 8007362:	781b      	ldrb	r3, [r3, #0]
 8007364:	011a      	lsls	r2, r3, #4
 8007366:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800736a:	4413      	add	r3, r2
 800736c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007370:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007374:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007378:	881b      	ldrh	r3, [r3, #0]
 800737a:	b29b      	uxth	r3, r3
 800737c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007380:	b29a      	uxth	r2, r3
 8007382:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007386:	801a      	strh	r2, [r3, #0]
 8007388:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800738c:	881b      	ldrh	r3, [r3, #0]
 800738e:	b29b      	uxth	r3, r3
 8007390:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007394:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007398:	b29a      	uxth	r2, r3
 800739a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800739e:	801a      	strh	r2, [r3, #0]
 80073a0:	e017      	b.n	80073d2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80073a2:	68bb      	ldr	r3, [r7, #8]
 80073a4:	785b      	ldrb	r3, [r3, #1]
 80073a6:	2b01      	cmp	r3, #1
 80073a8:	d113      	bne.n	80073d2 <HAL_PCD_EP_DB_Transmit+0x52a>
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80073b2:	b29b      	uxth	r3, r3
 80073b4:	461a      	mov	r2, r3
 80073b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073b8:	4413      	add	r3, r2
 80073ba:	67bb      	str	r3, [r7, #120]	; 0x78
 80073bc:	68bb      	ldr	r3, [r7, #8]
 80073be:	781b      	ldrb	r3, [r3, #0]
 80073c0:	011a      	lsls	r2, r3, #4
 80073c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80073c4:	4413      	add	r3, r2
 80073c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80073ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80073cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80073ce:	2200      	movs	r2, #0
 80073d0:	801a      	strh	r2, [r3, #0]
 80073d2:	68bb      	ldr	r3, [r7, #8]
 80073d4:	781b      	ldrb	r3, [r3, #0]
 80073d6:	4619      	mov	r1, r3
 80073d8:	68f8      	ldr	r0, [r7, #12]
 80073da:	f00a fa18 	bl	801180e <HAL_PCD_DataInStageCallback>
 80073de:	88fb      	ldrh	r3, [r7, #6]
 80073e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	f040 8104 	bne.w	80075f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	461a      	mov	r2, r3
 80073f0:	68bb      	ldr	r3, [r7, #8]
 80073f2:	781b      	ldrb	r3, [r3, #0]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	4413      	add	r3, r2
 80073f8:	881b      	ldrh	r3, [r3, #0]
 80073fa:	b29b      	uxth	r3, r3
 80073fc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007400:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007404:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	461a      	mov	r2, r3
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	781b      	ldrb	r3, [r3, #0]
 8007412:	009b      	lsls	r3, r3, #2
 8007414:	441a      	add	r2, r3
 8007416:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 800741a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800741e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007426:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800742a:	b29b      	uxth	r3, r3
 800742c:	8013      	strh	r3, [r2, #0]
 800742e:	e0e0      	b.n	80075f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 8007430:	88fb      	ldrh	r3, [r7, #6]
 8007432:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007436:	2b00      	cmp	r3, #0
 8007438:	d121      	bne.n	800747e <HAL_PCD_EP_DB_Transmit+0x5d6>
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	68bb      	ldr	r3, [r7, #8]
 8007442:	781b      	ldrb	r3, [r3, #0]
 8007444:	009b      	lsls	r3, r3, #2
 8007446:	4413      	add	r3, r2
 8007448:	881b      	ldrh	r3, [r3, #0]
 800744a:	b29b      	uxth	r3, r3
 800744c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007454:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	461a      	mov	r2, r3
 800745e:	68bb      	ldr	r3, [r7, #8]
 8007460:	781b      	ldrb	r3, [r3, #0]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	441a      	add	r2, r3
 8007466:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800746a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800746e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007472:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007476:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800747a:	b29b      	uxth	r3, r3
 800747c:	8013      	strh	r3, [r2, #0]
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007484:	2b01      	cmp	r3, #1
 8007486:	f040 80b4 	bne.w	80075f2 <HAL_PCD_EP_DB_Transmit+0x74a>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	695a      	ldr	r2, [r3, #20]
 800748e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007492:	441a      	add	r2, r3
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	615a      	str	r2, [r3, #20]
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	69da      	ldr	r2, [r3, #28]
 800749c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074a0:	441a      	add	r2, r3
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	61da      	str	r2, [r3, #28]
 80074a6:	68bb      	ldr	r3, [r7, #8]
 80074a8:	6a1a      	ldr	r2, [r3, #32]
 80074aa:	68bb      	ldr	r3, [r7, #8]
 80074ac:	691b      	ldr	r3, [r3, #16]
 80074ae:	429a      	cmp	r2, r3
 80074b0:	d309      	bcc.n	80074c6 <HAL_PCD_EP_DB_Transmit+0x61e>
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	691b      	ldr	r3, [r3, #16]
 80074b6:	653b      	str	r3, [r7, #80]	; 0x50
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	6a1a      	ldr	r2, [r3, #32]
 80074bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80074be:	1ad2      	subs	r2, r2, r3
 80074c0:	68bb      	ldr	r3, [r7, #8]
 80074c2:	621a      	str	r2, [r3, #32]
 80074c4:	e015      	b.n	80074f2 <HAL_PCD_EP_DB_Transmit+0x64a>
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	6a1b      	ldr	r3, [r3, #32]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d107      	bne.n	80074de <HAL_PCD_EP_DB_Transmit+0x636>
 80074ce:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80074d2:	653b      	str	r3, [r7, #80]	; 0x50
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074dc:	e009      	b.n	80074f2 <HAL_PCD_EP_DB_Transmit+0x64a>
 80074de:	68bb      	ldr	r3, [r7, #8]
 80074e0:	6a1b      	ldr	r3, [r3, #32]
 80074e2:	653b      	str	r3, [r7, #80]	; 0x50
 80074e4:	68bb      	ldr	r3, [r7, #8]
 80074e6:	2200      	movs	r2, #0
 80074e8:	621a      	str	r2, [r3, #32]
 80074ea:	68bb      	ldr	r3, [r7, #8]
 80074ec:	2200      	movs	r2, #0
 80074ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	667b      	str	r3, [r7, #100]	; 0x64
 80074f8:	68bb      	ldr	r3, [r7, #8]
 80074fa:	785b      	ldrb	r3, [r3, #1]
 80074fc:	2b00      	cmp	r3, #0
 80074fe:	d155      	bne.n	80075ac <HAL_PCD_EP_DB_Transmit+0x704>
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800750e:	b29b      	uxth	r3, r3
 8007510:	461a      	mov	r2, r3
 8007512:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007514:	4413      	add	r3, r2
 8007516:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	781b      	ldrb	r3, [r3, #0]
 800751c:	011a      	lsls	r2, r3, #4
 800751e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007520:	4413      	add	r3, r2
 8007522:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007526:	65bb      	str	r3, [r7, #88]	; 0x58
 8007528:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800752a:	2b00      	cmp	r3, #0
 800752c:	d112      	bne.n	8007554 <HAL_PCD_EP_DB_Transmit+0x6ac>
 800752e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007530:	881b      	ldrh	r3, [r3, #0]
 8007532:	b29b      	uxth	r3, r3
 8007534:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007538:	b29a      	uxth	r2, r3
 800753a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800753c:	801a      	strh	r2, [r3, #0]
 800753e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007540:	881b      	ldrh	r3, [r3, #0]
 8007542:	b29b      	uxth	r3, r3
 8007544:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007548:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800754c:	b29a      	uxth	r2, r3
 800754e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007550:	801a      	strh	r2, [r3, #0]
 8007552:	e044      	b.n	80075de <HAL_PCD_EP_DB_Transmit+0x736>
 8007554:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007556:	2b3e      	cmp	r3, #62	; 0x3e
 8007558:	d811      	bhi.n	800757e <HAL_PCD_EP_DB_Transmit+0x6d6>
 800755a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800755c:	085b      	lsrs	r3, r3, #1
 800755e:	657b      	str	r3, [r7, #84]	; 0x54
 8007560:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007562:	f003 0301 	and.w	r3, r3, #1
 8007566:	2b00      	cmp	r3, #0
 8007568:	d002      	beq.n	8007570 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800756a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800756c:	3301      	adds	r3, #1
 800756e:	657b      	str	r3, [r7, #84]	; 0x54
 8007570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007572:	b29b      	uxth	r3, r3
 8007574:	029b      	lsls	r3, r3, #10
 8007576:	b29a      	uxth	r2, r3
 8007578:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800757a:	801a      	strh	r2, [r3, #0]
 800757c:	e02f      	b.n	80075de <HAL_PCD_EP_DB_Transmit+0x736>
 800757e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007580:	095b      	lsrs	r3, r3, #5
 8007582:	657b      	str	r3, [r7, #84]	; 0x54
 8007584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007586:	f003 031f 	and.w	r3, r3, #31
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800758e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007590:	3b01      	subs	r3, #1
 8007592:	657b      	str	r3, [r7, #84]	; 0x54
 8007594:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007596:	b29b      	uxth	r3, r3
 8007598:	029b      	lsls	r3, r3, #10
 800759a:	b29b      	uxth	r3, r3
 800759c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80075a0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80075a4:	b29a      	uxth	r2, r3
 80075a6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80075a8:	801a      	strh	r2, [r3, #0]
 80075aa:	e018      	b.n	80075de <HAL_PCD_EP_DB_Transmit+0x736>
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	785b      	ldrb	r3, [r3, #1]
 80075b0:	2b01      	cmp	r3, #1
 80075b2:	d114      	bne.n	80075de <HAL_PCD_EP_DB_Transmit+0x736>
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80075bc:	b29b      	uxth	r3, r3
 80075be:	461a      	mov	r2, r3
 80075c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075c2:	4413      	add	r3, r2
 80075c4:	667b      	str	r3, [r7, #100]	; 0x64
 80075c6:	68bb      	ldr	r3, [r7, #8]
 80075c8:	781b      	ldrb	r3, [r3, #0]
 80075ca:	011a      	lsls	r2, r3, #4
 80075cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80075ce:	4413      	add	r3, r2
 80075d0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80075d4:	663b      	str	r3, [r7, #96]	; 0x60
 80075d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075d8:	b29a      	uxth	r2, r3
 80075da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075dc:	801a      	strh	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	6818      	ldr	r0, [r3, #0]
 80075e2:	68bb      	ldr	r3, [r7, #8]
 80075e4:	6959      	ldr	r1, [r3, #20]
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	895a      	ldrh	r2, [r3, #10]
 80075ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ec:	b29b      	uxth	r3, r3
 80075ee:	f004 fcf8 	bl	800bfe2 <USB_WritePMA>
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	461a      	mov	r2, r3
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	881b      	ldrh	r3, [r3, #0]
 8007602:	b29b      	uxth	r3, r3
 8007604:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007608:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800760c:	823b      	strh	r3, [r7, #16]
 800760e:	8a3b      	ldrh	r3, [r7, #16]
 8007610:	f083 0310 	eor.w	r3, r3, #16
 8007614:	823b      	strh	r3, [r7, #16]
 8007616:	8a3b      	ldrh	r3, [r7, #16]
 8007618:	f083 0320 	eor.w	r3, r3, #32
 800761c:	823b      	strh	r3, [r7, #16]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	68bb      	ldr	r3, [r7, #8]
 8007626:	781b      	ldrb	r3, [r3, #0]
 8007628:	009b      	lsls	r3, r3, #2
 800762a:	441a      	add	r2, r3
 800762c:	8a3b      	ldrh	r3, [r7, #16]
 800762e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8007632:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007636:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800763a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800763e:	b29b      	uxth	r3, r3
 8007640:	8013      	strh	r3, [r2, #0]
 8007642:	2300      	movs	r3, #0
 8007644:	4618      	mov	r0, r3
 8007646:	3788      	adds	r7, #136	; 0x88
 8007648:	46bd      	mov	sp, r7
 800764a:	bd80      	pop	{r7, pc}

0800764c <HAL_PCDEx_PMAConfig>:
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	607b      	str	r3, [r7, #4]
 8007656:	460b      	mov	r3, r1
 8007658:	817b      	strh	r3, [r7, #10]
 800765a:	4613      	mov	r3, r2
 800765c:	813b      	strh	r3, [r7, #8]
 800765e:	897b      	ldrh	r3, [r7, #10]
 8007660:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	d00b      	beq.n	8007682 <HAL_PCDEx_PMAConfig+0x36>
 800766a:	897b      	ldrh	r3, [r7, #10]
 800766c:	f003 0307 	and.w	r3, r3, #7
 8007670:	1c5a      	adds	r2, r3, #1
 8007672:	4613      	mov	r3, r2
 8007674:	009b      	lsls	r3, r3, #2
 8007676:	4413      	add	r3, r2
 8007678:	00db      	lsls	r3, r3, #3
 800767a:	68fa      	ldr	r2, [r7, #12]
 800767c:	4413      	add	r3, r2
 800767e:	617b      	str	r3, [r7, #20]
 8007680:	e009      	b.n	8007696 <HAL_PCDEx_PMAConfig+0x4a>
 8007682:	897a      	ldrh	r2, [r7, #10]
 8007684:	4613      	mov	r3, r2
 8007686:	009b      	lsls	r3, r3, #2
 8007688:	4413      	add	r3, r2
 800768a:	00db      	lsls	r3, r3, #3
 800768c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007690:	68fa      	ldr	r2, [r7, #12]
 8007692:	4413      	add	r3, r2
 8007694:	617b      	str	r3, [r7, #20]
 8007696:	893b      	ldrh	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d107      	bne.n	80076ac <HAL_PCDEx_PMAConfig+0x60>
 800769c:	697b      	ldr	r3, [r7, #20]
 800769e:	2200      	movs	r2, #0
 80076a0:	731a      	strb	r2, [r3, #12]
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	b29a      	uxth	r2, r3
 80076a6:	697b      	ldr	r3, [r7, #20]
 80076a8:	80da      	strh	r2, [r3, #6]
 80076aa:	e00b      	b.n	80076c4 <HAL_PCDEx_PMAConfig+0x78>
 80076ac:	697b      	ldr	r3, [r7, #20]
 80076ae:	2201      	movs	r2, #1
 80076b0:	731a      	strb	r2, [r3, #12]
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	b29a      	uxth	r2, r3
 80076b6:	697b      	ldr	r3, [r7, #20]
 80076b8:	811a      	strh	r2, [r3, #8]
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	0c1b      	lsrs	r3, r3, #16
 80076be:	b29a      	uxth	r2, r3
 80076c0:	697b      	ldr	r3, [r7, #20]
 80076c2:	815a      	strh	r2, [r3, #10]
 80076c4:	2300      	movs	r3, #0
 80076c6:	4618      	mov	r0, r3
 80076c8:	371c      	adds	r7, #28
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bc80      	pop	{r7}
 80076ce:	4770      	bx	lr

080076d0 <HAL_RCC_OscConfig>:
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b088      	sub	sp, #32
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2b00      	cmp	r3, #0
 80076dc:	d101      	bne.n	80076e2 <HAL_RCC_OscConfig+0x12>
 80076de:	2301      	movs	r3, #1
 80076e0:	e31d      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 80076e2:	4b94      	ldr	r3, [pc, #592]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	61bb      	str	r3, [r7, #24]
 80076ec:	4b91      	ldr	r3, [pc, #580]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80076f4:	617b      	str	r3, [r7, #20]
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	f003 0301 	and.w	r3, r3, #1
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d07b      	beq.n	80077fa <HAL_RCC_OscConfig+0x12a>
 8007702:	69bb      	ldr	r3, [r7, #24]
 8007704:	2b08      	cmp	r3, #8
 8007706:	d006      	beq.n	8007716 <HAL_RCC_OscConfig+0x46>
 8007708:	69bb      	ldr	r3, [r7, #24]
 800770a:	2b0c      	cmp	r3, #12
 800770c:	d10f      	bne.n	800772e <HAL_RCC_OscConfig+0x5e>
 800770e:	697b      	ldr	r3, [r7, #20]
 8007710:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007714:	d10b      	bne.n	800772e <HAL_RCC_OscConfig+0x5e>
 8007716:	4b87      	ldr	r3, [pc, #540]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800771e:	2b00      	cmp	r3, #0
 8007720:	d06a      	beq.n	80077f8 <HAL_RCC_OscConfig+0x128>
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	685b      	ldr	r3, [r3, #4]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d166      	bne.n	80077f8 <HAL_RCC_OscConfig+0x128>
 800772a:	2301      	movs	r3, #1
 800772c:	e2f7      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	685b      	ldr	r3, [r3, #4]
 8007732:	2b01      	cmp	r3, #1
 8007734:	d106      	bne.n	8007744 <HAL_RCC_OscConfig+0x74>
 8007736:	4b7f      	ldr	r3, [pc, #508]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	4a7e      	ldr	r2, [pc, #504]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800773c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007740:	6013      	str	r3, [r2, #0]
 8007742:	e02d      	b.n	80077a0 <HAL_RCC_OscConfig+0xd0>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	2b00      	cmp	r3, #0
 800774a:	d10c      	bne.n	8007766 <HAL_RCC_OscConfig+0x96>
 800774c:	4b79      	ldr	r3, [pc, #484]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a78      	ldr	r2, [pc, #480]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007752:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007756:	6013      	str	r3, [r2, #0]
 8007758:	4b76      	ldr	r3, [pc, #472]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	4a75      	ldr	r2, [pc, #468]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800775e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007762:	6013      	str	r3, [r2, #0]
 8007764:	e01c      	b.n	80077a0 <HAL_RCC_OscConfig+0xd0>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	685b      	ldr	r3, [r3, #4]
 800776a:	2b05      	cmp	r3, #5
 800776c:	d10c      	bne.n	8007788 <HAL_RCC_OscConfig+0xb8>
 800776e:	4b71      	ldr	r3, [pc, #452]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	4a70      	ldr	r2, [pc, #448]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007778:	6013      	str	r3, [r2, #0]
 800777a:	4b6e      	ldr	r3, [pc, #440]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a6d      	ldr	r2, [pc, #436]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007780:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007784:	6013      	str	r3, [r2, #0]
 8007786:	e00b      	b.n	80077a0 <HAL_RCC_OscConfig+0xd0>
 8007788:	4b6a      	ldr	r3, [pc, #424]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	4a69      	ldr	r2, [pc, #420]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800778e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007792:	6013      	str	r3, [r2, #0]
 8007794:	4b67      	ldr	r3, [pc, #412]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a66      	ldr	r2, [pc, #408]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800779a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800779e:	6013      	str	r3, [r2, #0]
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	685b      	ldr	r3, [r3, #4]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d013      	beq.n	80077d0 <HAL_RCC_OscConfig+0x100>
 80077a8:	f7fd f83a 	bl	8004820 <HAL_GetTick>
 80077ac:	6138      	str	r0, [r7, #16]
 80077ae:	e008      	b.n	80077c2 <HAL_RCC_OscConfig+0xf2>
 80077b0:	f7fd f836 	bl	8004820 <HAL_GetTick>
 80077b4:	4602      	mov	r2, r0
 80077b6:	693b      	ldr	r3, [r7, #16]
 80077b8:	1ad3      	subs	r3, r2, r3
 80077ba:	2b64      	cmp	r3, #100	; 0x64
 80077bc:	d901      	bls.n	80077c2 <HAL_RCC_OscConfig+0xf2>
 80077be:	2303      	movs	r3, #3
 80077c0:	e2ad      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 80077c2:	4b5c      	ldr	r3, [pc, #368]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d0f0      	beq.n	80077b0 <HAL_RCC_OscConfig+0xe0>
 80077ce:	e014      	b.n	80077fa <HAL_RCC_OscConfig+0x12a>
 80077d0:	f7fd f826 	bl	8004820 <HAL_GetTick>
 80077d4:	6138      	str	r0, [r7, #16]
 80077d6:	e008      	b.n	80077ea <HAL_RCC_OscConfig+0x11a>
 80077d8:	f7fd f822 	bl	8004820 <HAL_GetTick>
 80077dc:	4602      	mov	r2, r0
 80077de:	693b      	ldr	r3, [r7, #16]
 80077e0:	1ad3      	subs	r3, r2, r3
 80077e2:	2b64      	cmp	r3, #100	; 0x64
 80077e4:	d901      	bls.n	80077ea <HAL_RCC_OscConfig+0x11a>
 80077e6:	2303      	movs	r3, #3
 80077e8:	e299      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 80077ea:	4b52      	ldr	r3, [pc, #328]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d1f0      	bne.n	80077d8 <HAL_RCC_OscConfig+0x108>
 80077f6:	e000      	b.n	80077fa <HAL_RCC_OscConfig+0x12a>
 80077f8:	bf00      	nop
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	f003 0302 	and.w	r3, r3, #2
 8007802:	2b00      	cmp	r3, #0
 8007804:	d05a      	beq.n	80078bc <HAL_RCC_OscConfig+0x1ec>
 8007806:	69bb      	ldr	r3, [r7, #24]
 8007808:	2b04      	cmp	r3, #4
 800780a:	d005      	beq.n	8007818 <HAL_RCC_OscConfig+0x148>
 800780c:	69bb      	ldr	r3, [r7, #24]
 800780e:	2b0c      	cmp	r3, #12
 8007810:	d119      	bne.n	8007846 <HAL_RCC_OscConfig+0x176>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b00      	cmp	r3, #0
 8007816:	d116      	bne.n	8007846 <HAL_RCC_OscConfig+0x176>
 8007818:	4b46      	ldr	r3, [pc, #280]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f003 0302 	and.w	r3, r3, #2
 8007820:	2b00      	cmp	r3, #0
 8007822:	d005      	beq.n	8007830 <HAL_RCC_OscConfig+0x160>
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d001      	beq.n	8007830 <HAL_RCC_OscConfig+0x160>
 800782c:	2301      	movs	r3, #1
 800782e:	e276      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007830:	4b40      	ldr	r3, [pc, #256]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	691b      	ldr	r3, [r3, #16]
 800783c:	021b      	lsls	r3, r3, #8
 800783e:	493d      	ldr	r1, [pc, #244]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007840:	4313      	orrs	r3, r2
 8007842:	604b      	str	r3, [r1, #4]
 8007844:	e03a      	b.n	80078bc <HAL_RCC_OscConfig+0x1ec>
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	2b00      	cmp	r3, #0
 800784c:	d020      	beq.n	8007890 <HAL_RCC_OscConfig+0x1c0>
 800784e:	4b3a      	ldr	r3, [pc, #232]	; (8007938 <HAL_RCC_OscConfig+0x268>)
 8007850:	2201      	movs	r2, #1
 8007852:	601a      	str	r2, [r3, #0]
 8007854:	f7fc ffe4 	bl	8004820 <HAL_GetTick>
 8007858:	6138      	str	r0, [r7, #16]
 800785a:	e008      	b.n	800786e <HAL_RCC_OscConfig+0x19e>
 800785c:	f7fc ffe0 	bl	8004820 <HAL_GetTick>
 8007860:	4602      	mov	r2, r0
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	2b02      	cmp	r3, #2
 8007868:	d901      	bls.n	800786e <HAL_RCC_OscConfig+0x19e>
 800786a:	2303      	movs	r3, #3
 800786c:	e257      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 800786e:	4b31      	ldr	r3, [pc, #196]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	f003 0302 	and.w	r3, r3, #2
 8007876:	2b00      	cmp	r3, #0
 8007878:	d0f0      	beq.n	800785c <HAL_RCC_OscConfig+0x18c>
 800787a:	4b2e      	ldr	r3, [pc, #184]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800787c:	685b      	ldr	r3, [r3, #4]
 800787e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	691b      	ldr	r3, [r3, #16]
 8007886:	021b      	lsls	r3, r3, #8
 8007888:	492a      	ldr	r1, [pc, #168]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800788a:	4313      	orrs	r3, r2
 800788c:	604b      	str	r3, [r1, #4]
 800788e:	e015      	b.n	80078bc <HAL_RCC_OscConfig+0x1ec>
 8007890:	4b29      	ldr	r3, [pc, #164]	; (8007938 <HAL_RCC_OscConfig+0x268>)
 8007892:	2200      	movs	r2, #0
 8007894:	601a      	str	r2, [r3, #0]
 8007896:	f7fc ffc3 	bl	8004820 <HAL_GetTick>
 800789a:	6138      	str	r0, [r7, #16]
 800789c:	e008      	b.n	80078b0 <HAL_RCC_OscConfig+0x1e0>
 800789e:	f7fc ffbf 	bl	8004820 <HAL_GetTick>
 80078a2:	4602      	mov	r2, r0
 80078a4:	693b      	ldr	r3, [r7, #16]
 80078a6:	1ad3      	subs	r3, r2, r3
 80078a8:	2b02      	cmp	r3, #2
 80078aa:	d901      	bls.n	80078b0 <HAL_RCC_OscConfig+0x1e0>
 80078ac:	2303      	movs	r3, #3
 80078ae:	e236      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 80078b0:	4b20      	ldr	r3, [pc, #128]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	f003 0302 	and.w	r3, r3, #2
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f0      	bne.n	800789e <HAL_RCC_OscConfig+0x1ce>
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	f003 0310 	and.w	r3, r3, #16
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	f000 80b8 	beq.w	8007a3a <HAL_RCC_OscConfig+0x36a>
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d170      	bne.n	80079b2 <HAL_RCC_OscConfig+0x2e2>
 80078d0:	4b18      	ldr	r3, [pc, #96]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80078d8:	2b00      	cmp	r3, #0
 80078da:	d005      	beq.n	80078e8 <HAL_RCC_OscConfig+0x218>
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	699b      	ldr	r3, [r3, #24]
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d101      	bne.n	80078e8 <HAL_RCC_OscConfig+0x218>
 80078e4:	2301      	movs	r3, #1
 80078e6:	e21a      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1a      	ldr	r2, [r3, #32]
 80078ec:	4b11      	ldr	r3, [pc, #68]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80078f4:	429a      	cmp	r2, r3
 80078f6:	d921      	bls.n	800793c <HAL_RCC_OscConfig+0x26c>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	4618      	mov	r0, r3
 80078fe:	f000 fc27 	bl	8008150 <RCC_SetFlashLatencyFromMSIRange>
 8007902:	4603      	mov	r3, r0
 8007904:	2b00      	cmp	r3, #0
 8007906:	d001      	beq.n	800790c <HAL_RCC_OscConfig+0x23c>
 8007908:	2301      	movs	r3, #1
 800790a:	e208      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 800790c:	4b09      	ldr	r3, [pc, #36]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800790e:	685b      	ldr	r3, [r3, #4]
 8007910:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	6a1b      	ldr	r3, [r3, #32]
 8007918:	4906      	ldr	r1, [pc, #24]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800791a:	4313      	orrs	r3, r2
 800791c:	604b      	str	r3, [r1, #4]
 800791e:	4b05      	ldr	r3, [pc, #20]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 8007920:	685b      	ldr	r3, [r3, #4]
 8007922:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	69db      	ldr	r3, [r3, #28]
 800792a:	061b      	lsls	r3, r3, #24
 800792c:	4901      	ldr	r1, [pc, #4]	; (8007934 <HAL_RCC_OscConfig+0x264>)
 800792e:	4313      	orrs	r3, r2
 8007930:	604b      	str	r3, [r1, #4]
 8007932:	e020      	b.n	8007976 <HAL_RCC_OscConfig+0x2a6>
 8007934:	40023800 	.word	0x40023800
 8007938:	42470000 	.word	0x42470000
 800793c:	4b99      	ldr	r3, [pc, #612]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	6a1b      	ldr	r3, [r3, #32]
 8007948:	4996      	ldr	r1, [pc, #600]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 800794a:	4313      	orrs	r3, r2
 800794c:	604b      	str	r3, [r1, #4]
 800794e:	4b95      	ldr	r3, [pc, #596]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007950:	685b      	ldr	r3, [r3, #4]
 8007952:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	69db      	ldr	r3, [r3, #28]
 800795a:	061b      	lsls	r3, r3, #24
 800795c:	4991      	ldr	r1, [pc, #580]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 800795e:	4313      	orrs	r3, r2
 8007960:	604b      	str	r3, [r1, #4]
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	4618      	mov	r0, r3
 8007968:	f000 fbf2 	bl	8008150 <RCC_SetFlashLatencyFromMSIRange>
 800796c:	4603      	mov	r3, r0
 800796e:	2b00      	cmp	r3, #0
 8007970:	d001      	beq.n	8007976 <HAL_RCC_OscConfig+0x2a6>
 8007972:	2301      	movs	r3, #1
 8007974:	e1d3      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6a1b      	ldr	r3, [r3, #32]
 800797a:	0b5b      	lsrs	r3, r3, #13
 800797c:	3301      	adds	r3, #1
 800797e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007982:	fa02 f303 	lsl.w	r3, r2, r3
 8007986:	4a87      	ldr	r2, [pc, #540]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007988:	6892      	ldr	r2, [r2, #8]
 800798a:	0912      	lsrs	r2, r2, #4
 800798c:	f002 020f 	and.w	r2, r2, #15
 8007990:	4985      	ldr	r1, [pc, #532]	; (8007ba8 <HAL_RCC_OscConfig+0x4d8>)
 8007992:	5c8a      	ldrb	r2, [r1, r2]
 8007994:	40d3      	lsrs	r3, r2
 8007996:	4a85      	ldr	r2, [pc, #532]	; (8007bac <HAL_RCC_OscConfig+0x4dc>)
 8007998:	6013      	str	r3, [r2, #0]
 800799a:	4b85      	ldr	r3, [pc, #532]	; (8007bb0 <HAL_RCC_OscConfig+0x4e0>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4618      	mov	r0, r3
 80079a0:	f7fc fef2 	bl	8004788 <HAL_InitTick>
 80079a4:	4603      	mov	r3, r0
 80079a6:	73fb      	strb	r3, [r7, #15]
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d045      	beq.n	8007a3a <HAL_RCC_OscConfig+0x36a>
 80079ae:	7bfb      	ldrb	r3, [r7, #15]
 80079b0:	e1b5      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	699b      	ldr	r3, [r3, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d029      	beq.n	8007a0e <HAL_RCC_OscConfig+0x33e>
 80079ba:	4b7e      	ldr	r3, [pc, #504]	; (8007bb4 <HAL_RCC_OscConfig+0x4e4>)
 80079bc:	2201      	movs	r2, #1
 80079be:	601a      	str	r2, [r3, #0]
 80079c0:	f7fc ff2e 	bl	8004820 <HAL_GetTick>
 80079c4:	6138      	str	r0, [r7, #16]
 80079c6:	e008      	b.n	80079da <HAL_RCC_OscConfig+0x30a>
 80079c8:	f7fc ff2a 	bl	8004820 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	693b      	ldr	r3, [r7, #16]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d901      	bls.n	80079da <HAL_RCC_OscConfig+0x30a>
 80079d6:	2303      	movs	r3, #3
 80079d8:	e1a1      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 80079da:	4b72      	ldr	r3, [pc, #456]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d0f0      	beq.n	80079c8 <HAL_RCC_OscConfig+0x2f8>
 80079e6:	4b6f      	ldr	r3, [pc, #444]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6a1b      	ldr	r3, [r3, #32]
 80079f2:	496c      	ldr	r1, [pc, #432]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	604b      	str	r3, [r1, #4]
 80079f8:	4b6a      	ldr	r3, [pc, #424]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 80079fa:	685b      	ldr	r3, [r3, #4]
 80079fc:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	69db      	ldr	r3, [r3, #28]
 8007a04:	061b      	lsls	r3, r3, #24
 8007a06:	4967      	ldr	r1, [pc, #412]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007a08:	4313      	orrs	r3, r2
 8007a0a:	604b      	str	r3, [r1, #4]
 8007a0c:	e015      	b.n	8007a3a <HAL_RCC_OscConfig+0x36a>
 8007a0e:	4b69      	ldr	r3, [pc, #420]	; (8007bb4 <HAL_RCC_OscConfig+0x4e4>)
 8007a10:	2200      	movs	r2, #0
 8007a12:	601a      	str	r2, [r3, #0]
 8007a14:	f7fc ff04 	bl	8004820 <HAL_GetTick>
 8007a18:	6138      	str	r0, [r7, #16]
 8007a1a:	e008      	b.n	8007a2e <HAL_RCC_OscConfig+0x35e>
 8007a1c:	f7fc ff00 	bl	8004820 <HAL_GetTick>
 8007a20:	4602      	mov	r2, r0
 8007a22:	693b      	ldr	r3, [r7, #16]
 8007a24:	1ad3      	subs	r3, r2, r3
 8007a26:	2b02      	cmp	r3, #2
 8007a28:	d901      	bls.n	8007a2e <HAL_RCC_OscConfig+0x35e>
 8007a2a:	2303      	movs	r3, #3
 8007a2c:	e177      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007a2e:	4b5d      	ldr	r3, [pc, #372]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d1f0      	bne.n	8007a1c <HAL_RCC_OscConfig+0x34c>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	f003 0308 	and.w	r3, r3, #8
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d030      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x3d8>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	695b      	ldr	r3, [r3, #20]
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d016      	beq.n	8007a7c <HAL_RCC_OscConfig+0x3ac>
 8007a4e:	4b5a      	ldr	r3, [pc, #360]	; (8007bb8 <HAL_RCC_OscConfig+0x4e8>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	f7fc fee4 	bl	8004820 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x39e>
 8007a5c:	f7fc fee0 	bl	8004820 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x39e>
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e157      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007a6e:	4b4d      	ldr	r3, [pc, #308]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007a70:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a72:	f003 0302 	and.w	r3, r3, #2
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d0f0      	beq.n	8007a5c <HAL_RCC_OscConfig+0x38c>
 8007a7a:	e015      	b.n	8007aa8 <HAL_RCC_OscConfig+0x3d8>
 8007a7c:	4b4e      	ldr	r3, [pc, #312]	; (8007bb8 <HAL_RCC_OscConfig+0x4e8>)
 8007a7e:	2200      	movs	r2, #0
 8007a80:	601a      	str	r2, [r3, #0]
 8007a82:	f7fc fecd 	bl	8004820 <HAL_GetTick>
 8007a86:	6138      	str	r0, [r7, #16]
 8007a88:	e008      	b.n	8007a9c <HAL_RCC_OscConfig+0x3cc>
 8007a8a:	f7fc fec9 	bl	8004820 <HAL_GetTick>
 8007a8e:	4602      	mov	r2, r0
 8007a90:	693b      	ldr	r3, [r7, #16]
 8007a92:	1ad3      	subs	r3, r2, r3
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d901      	bls.n	8007a9c <HAL_RCC_OscConfig+0x3cc>
 8007a98:	2303      	movs	r3, #3
 8007a9a:	e140      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007a9c:	4b41      	ldr	r3, [pc, #260]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007aa0:	f003 0302 	and.w	r3, r3, #2
 8007aa4:	2b00      	cmp	r3, #0
 8007aa6:	d1f0      	bne.n	8007a8a <HAL_RCC_OscConfig+0x3ba>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	f003 0304 	and.w	r3, r3, #4
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	f000 80b5 	beq.w	8007c20 <HAL_RCC_OscConfig+0x550>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	77fb      	strb	r3, [r7, #31]
 8007aba:	4b3a      	ldr	r3, [pc, #232]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d10d      	bne.n	8007ae2 <HAL_RCC_OscConfig+0x412>
 8007ac6:	4b37      	ldr	r3, [pc, #220]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007aca:	4a36      	ldr	r2, [pc, #216]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007acc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007ad0:	6253      	str	r3, [r2, #36]	; 0x24
 8007ad2:	4b34      	ldr	r3, [pc, #208]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007ada:	60bb      	str	r3, [r7, #8]
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2301      	movs	r3, #1
 8007ae0:	77fb      	strb	r3, [r7, #31]
 8007ae2:	4b36      	ldr	r3, [pc, #216]	; (8007bbc <HAL_RCC_OscConfig+0x4ec>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d118      	bne.n	8007b20 <HAL_RCC_OscConfig+0x450>
 8007aee:	4b33      	ldr	r3, [pc, #204]	; (8007bbc <HAL_RCC_OscConfig+0x4ec>)
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a32      	ldr	r2, [pc, #200]	; (8007bbc <HAL_RCC_OscConfig+0x4ec>)
 8007af4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007af8:	6013      	str	r3, [r2, #0]
 8007afa:	f7fc fe91 	bl	8004820 <HAL_GetTick>
 8007afe:	6138      	str	r0, [r7, #16]
 8007b00:	e008      	b.n	8007b14 <HAL_RCC_OscConfig+0x444>
 8007b02:	f7fc fe8d 	bl	8004820 <HAL_GetTick>
 8007b06:	4602      	mov	r2, r0
 8007b08:	693b      	ldr	r3, [r7, #16]
 8007b0a:	1ad3      	subs	r3, r2, r3
 8007b0c:	2b64      	cmp	r3, #100	; 0x64
 8007b0e:	d901      	bls.n	8007b14 <HAL_RCC_OscConfig+0x444>
 8007b10:	2303      	movs	r3, #3
 8007b12:	e104      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007b14:	4b29      	ldr	r3, [pc, #164]	; (8007bbc <HAL_RCC_OscConfig+0x4ec>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d0f0      	beq.n	8007b02 <HAL_RCC_OscConfig+0x432>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	689b      	ldr	r3, [r3, #8]
 8007b24:	2b01      	cmp	r3, #1
 8007b26:	d106      	bne.n	8007b36 <HAL_RCC_OscConfig+0x466>
 8007b28:	4b1e      	ldr	r3, [pc, #120]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b2c:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b32:	6353      	str	r3, [r2, #52]	; 0x34
 8007b34:	e02d      	b.n	8007b92 <HAL_RCC_OscConfig+0x4c2>
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d10c      	bne.n	8007b58 <HAL_RCC_OscConfig+0x488>
 8007b3e:	4b19      	ldr	r3, [pc, #100]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b42:	4a18      	ldr	r2, [pc, #96]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b44:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b48:	6353      	str	r3, [r2, #52]	; 0x34
 8007b4a:	4b16      	ldr	r3, [pc, #88]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b4e:	4a15      	ldr	r2, [pc, #84]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b54:	6353      	str	r3, [r2, #52]	; 0x34
 8007b56:	e01c      	b.n	8007b92 <HAL_RCC_OscConfig+0x4c2>
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	689b      	ldr	r3, [r3, #8]
 8007b5c:	2b05      	cmp	r3, #5
 8007b5e:	d10c      	bne.n	8007b7a <HAL_RCC_OscConfig+0x4aa>
 8007b60:	4b10      	ldr	r3, [pc, #64]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b64:	4a0f      	ldr	r2, [pc, #60]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b66:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b6a:	6353      	str	r3, [r2, #52]	; 0x34
 8007b6c:	4b0d      	ldr	r3, [pc, #52]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b70:	4a0c      	ldr	r2, [pc, #48]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007b76:	6353      	str	r3, [r2, #52]	; 0x34
 8007b78:	e00b      	b.n	8007b92 <HAL_RCC_OscConfig+0x4c2>
 8007b7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b7e:	4a09      	ldr	r2, [pc, #36]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b80:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007b84:	6353      	str	r3, [r2, #52]	; 0x34
 8007b86:	4b07      	ldr	r3, [pc, #28]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b8a:	4a06      	ldr	r2, [pc, #24]	; (8007ba4 <HAL_RCC_OscConfig+0x4d4>)
 8007b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007b90:	6353      	str	r3, [r2, #52]	; 0x34
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	689b      	ldr	r3, [r3, #8]
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d024      	beq.n	8007be4 <HAL_RCC_OscConfig+0x514>
 8007b9a:	f7fc fe41 	bl	8004820 <HAL_GetTick>
 8007b9e:	6138      	str	r0, [r7, #16]
 8007ba0:	e019      	b.n	8007bd6 <HAL_RCC_OscConfig+0x506>
 8007ba2:	bf00      	nop
 8007ba4:	40023800 	.word	0x40023800
 8007ba8:	080127c0 	.word	0x080127c0
 8007bac:	20000088 	.word	0x20000088
 8007bb0:	2000008c 	.word	0x2000008c
 8007bb4:	42470020 	.word	0x42470020
 8007bb8:	42470680 	.word	0x42470680
 8007bbc:	40007000 	.word	0x40007000
 8007bc0:	f7fc fe2e 	bl	8004820 <HAL_GetTick>
 8007bc4:	4602      	mov	r2, r0
 8007bc6:	693b      	ldr	r3, [r7, #16]
 8007bc8:	1ad3      	subs	r3, r2, r3
 8007bca:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bce:	4293      	cmp	r3, r2
 8007bd0:	d901      	bls.n	8007bd6 <HAL_RCC_OscConfig+0x506>
 8007bd2:	2303      	movs	r3, #3
 8007bd4:	e0a3      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007bd6:	4b54      	ldr	r3, [pc, #336]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007bd8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bda:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d0ee      	beq.n	8007bc0 <HAL_RCC_OscConfig+0x4f0>
 8007be2:	e014      	b.n	8007c0e <HAL_RCC_OscConfig+0x53e>
 8007be4:	f7fc fe1c 	bl	8004820 <HAL_GetTick>
 8007be8:	6138      	str	r0, [r7, #16]
 8007bea:	e00a      	b.n	8007c02 <HAL_RCC_OscConfig+0x532>
 8007bec:	f7fc fe18 	bl	8004820 <HAL_GetTick>
 8007bf0:	4602      	mov	r2, r0
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	1ad3      	subs	r3, r2, r3
 8007bf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d901      	bls.n	8007c02 <HAL_RCC_OscConfig+0x532>
 8007bfe:	2303      	movs	r3, #3
 8007c00:	e08d      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007c02:	4b49      	ldr	r3, [pc, #292]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007c04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c06:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d1ee      	bne.n	8007bec <HAL_RCC_OscConfig+0x51c>
 8007c0e:	7ffb      	ldrb	r3, [r7, #31]
 8007c10:	2b01      	cmp	r3, #1
 8007c12:	d105      	bne.n	8007c20 <HAL_RCC_OscConfig+0x550>
 8007c14:	4b44      	ldr	r3, [pc, #272]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c18:	4a43      	ldr	r2, [pc, #268]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007c1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007c1e:	6253      	str	r3, [r2, #36]	; 0x24
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d079      	beq.n	8007d1c <HAL_RCC_OscConfig+0x64c>
 8007c28:	69bb      	ldr	r3, [r7, #24]
 8007c2a:	2b0c      	cmp	r3, #12
 8007c2c:	d056      	beq.n	8007cdc <HAL_RCC_OscConfig+0x60c>
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c32:	2b02      	cmp	r3, #2
 8007c34:	d13b      	bne.n	8007cae <HAL_RCC_OscConfig+0x5de>
 8007c36:	4b3d      	ldr	r3, [pc, #244]	; (8007d2c <HAL_RCC_OscConfig+0x65c>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	601a      	str	r2, [r3, #0]
 8007c3c:	f7fc fdf0 	bl	8004820 <HAL_GetTick>
 8007c40:	6138      	str	r0, [r7, #16]
 8007c42:	e008      	b.n	8007c56 <HAL_RCC_OscConfig+0x586>
 8007c44:	f7fc fdec 	bl	8004820 <HAL_GetTick>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	693b      	ldr	r3, [r7, #16]
 8007c4c:	1ad3      	subs	r3, r2, r3
 8007c4e:	2b02      	cmp	r3, #2
 8007c50:	d901      	bls.n	8007c56 <HAL_RCC_OscConfig+0x586>
 8007c52:	2303      	movs	r3, #3
 8007c54:	e063      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007c56:	4b34      	ldr	r3, [pc, #208]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d1f0      	bne.n	8007c44 <HAL_RCC_OscConfig+0x574>
 8007c62:	4b31      	ldr	r3, [pc, #196]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c72:	4319      	orrs	r1, r3
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c78:	430b      	orrs	r3, r1
 8007c7a:	492b      	ldr	r1, [pc, #172]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007c7c:	4313      	orrs	r3, r2
 8007c7e:	608b      	str	r3, [r1, #8]
 8007c80:	4b2a      	ldr	r3, [pc, #168]	; (8007d2c <HAL_RCC_OscConfig+0x65c>)
 8007c82:	2201      	movs	r2, #1
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	f7fc fdcb 	bl	8004820 <HAL_GetTick>
 8007c8a:	6138      	str	r0, [r7, #16]
 8007c8c:	e008      	b.n	8007ca0 <HAL_RCC_OscConfig+0x5d0>
 8007c8e:	f7fc fdc7 	bl	8004820 <HAL_GetTick>
 8007c92:	4602      	mov	r2, r0
 8007c94:	693b      	ldr	r3, [r7, #16]
 8007c96:	1ad3      	subs	r3, r2, r3
 8007c98:	2b02      	cmp	r3, #2
 8007c9a:	d901      	bls.n	8007ca0 <HAL_RCC_OscConfig+0x5d0>
 8007c9c:	2303      	movs	r3, #3
 8007c9e:	e03e      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007ca0:	4b21      	ldr	r3, [pc, #132]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d0f0      	beq.n	8007c8e <HAL_RCC_OscConfig+0x5be>
 8007cac:	e036      	b.n	8007d1c <HAL_RCC_OscConfig+0x64c>
 8007cae:	4b1f      	ldr	r3, [pc, #124]	; (8007d2c <HAL_RCC_OscConfig+0x65c>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	601a      	str	r2, [r3, #0]
 8007cb4:	f7fc fdb4 	bl	8004820 <HAL_GetTick>
 8007cb8:	6138      	str	r0, [r7, #16]
 8007cba:	e008      	b.n	8007cce <HAL_RCC_OscConfig+0x5fe>
 8007cbc:	f7fc fdb0 	bl	8004820 <HAL_GetTick>
 8007cc0:	4602      	mov	r2, r0
 8007cc2:	693b      	ldr	r3, [r7, #16]
 8007cc4:	1ad3      	subs	r3, r2, r3
 8007cc6:	2b02      	cmp	r3, #2
 8007cc8:	d901      	bls.n	8007cce <HAL_RCC_OscConfig+0x5fe>
 8007cca:	2303      	movs	r3, #3
 8007ccc:	e027      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007cce:	4b16      	ldr	r3, [pc, #88]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d1f0      	bne.n	8007cbc <HAL_RCC_OscConfig+0x5ec>
 8007cda:	e01f      	b.n	8007d1c <HAL_RCC_OscConfig+0x64c>
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d101      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x618>
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	e01a      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007ce8:	4b0f      	ldr	r3, [pc, #60]	; (8007d28 <HAL_RCC_OscConfig+0x658>)
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	617b      	str	r3, [r7, #20]
 8007cee:	697b      	ldr	r3, [r7, #20]
 8007cf0:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cf8:	429a      	cmp	r2, r3
 8007cfa:	d10d      	bne.n	8007d18 <HAL_RCC_OscConfig+0x648>
 8007cfc:	697b      	ldr	r3, [r7, #20]
 8007cfe:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d06:	429a      	cmp	r2, r3
 8007d08:	d106      	bne.n	8007d18 <HAL_RCC_OscConfig+0x648>
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d001      	beq.n	8007d1c <HAL_RCC_OscConfig+0x64c>
 8007d18:	2301      	movs	r3, #1
 8007d1a:	e000      	b.n	8007d1e <HAL_RCC_OscConfig+0x64e>
 8007d1c:	2300      	movs	r3, #0
 8007d1e:	4618      	mov	r0, r3
 8007d20:	3720      	adds	r7, #32
 8007d22:	46bd      	mov	sp, r7
 8007d24:	bd80      	pop	{r7, pc}
 8007d26:	bf00      	nop
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	42470060 	.word	0x42470060

08007d30 <HAL_RCC_ClockConfig>:
 8007d30:	b580      	push	{r7, lr}
 8007d32:	b084      	sub	sp, #16
 8007d34:	af00      	add	r7, sp, #0
 8007d36:	6078      	str	r0, [r7, #4]
 8007d38:	6039      	str	r1, [r7, #0]
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d101      	bne.n	8007d44 <HAL_RCC_ClockConfig+0x14>
 8007d40:	2301      	movs	r3, #1
 8007d42:	e11a      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007d44:	4b8f      	ldr	r3, [pc, #572]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	683a      	ldr	r2, [r7, #0]
 8007d4e:	429a      	cmp	r2, r3
 8007d50:	d919      	bls.n	8007d86 <HAL_RCC_ClockConfig+0x56>
 8007d52:	683b      	ldr	r3, [r7, #0]
 8007d54:	2b01      	cmp	r3, #1
 8007d56:	d105      	bne.n	8007d64 <HAL_RCC_ClockConfig+0x34>
 8007d58:	4b8a      	ldr	r3, [pc, #552]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	4a89      	ldr	r2, [pc, #548]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007d5e:	f043 0304 	orr.w	r3, r3, #4
 8007d62:	6013      	str	r3, [r2, #0]
 8007d64:	4b87      	ldr	r3, [pc, #540]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	f023 0201 	bic.w	r2, r3, #1
 8007d6c:	4985      	ldr	r1, [pc, #532]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007d6e:	683b      	ldr	r3, [r7, #0]
 8007d70:	4313      	orrs	r3, r2
 8007d72:	600b      	str	r3, [r1, #0]
 8007d74:	4b83      	ldr	r3, [pc, #524]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f003 0301 	and.w	r3, r3, #1
 8007d7c:	683a      	ldr	r2, [r7, #0]
 8007d7e:	429a      	cmp	r2, r3
 8007d80:	d001      	beq.n	8007d86 <HAL_RCC_ClockConfig+0x56>
 8007d82:	2301      	movs	r3, #1
 8007d84:	e0f9      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d008      	beq.n	8007da4 <HAL_RCC_ClockConfig+0x74>
 8007d92:	4b7d      	ldr	r3, [pc, #500]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007d94:	689b      	ldr	r3, [r3, #8]
 8007d96:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	497a      	ldr	r1, [pc, #488]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007da0:	4313      	orrs	r3, r2
 8007da2:	608b      	str	r3, [r1, #8]
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f003 0301 	and.w	r3, r3, #1
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	f000 808e 	beq.w	8007ece <HAL_RCC_ClockConfig+0x19e>
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	685b      	ldr	r3, [r3, #4]
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d107      	bne.n	8007dca <HAL_RCC_ClockConfig+0x9a>
 8007dba:	4b73      	ldr	r3, [pc, #460]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d121      	bne.n	8007e0a <HAL_RCC_ClockConfig+0xda>
 8007dc6:	2301      	movs	r3, #1
 8007dc8:	e0d7      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
 8007dce:	2b03      	cmp	r3, #3
 8007dd0:	d107      	bne.n	8007de2 <HAL_RCC_ClockConfig+0xb2>
 8007dd2:	4b6d      	ldr	r3, [pc, #436]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d115      	bne.n	8007e0a <HAL_RCC_ClockConfig+0xda>
 8007dde:	2301      	movs	r3, #1
 8007de0:	e0cb      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	2b01      	cmp	r3, #1
 8007de8:	d107      	bne.n	8007dfa <HAL_RCC_ClockConfig+0xca>
 8007dea:	4b67      	ldr	r3, [pc, #412]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007dec:	681b      	ldr	r3, [r3, #0]
 8007dee:	f003 0302 	and.w	r3, r3, #2
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d109      	bne.n	8007e0a <HAL_RCC_ClockConfig+0xda>
 8007df6:	2301      	movs	r3, #1
 8007df8:	e0bf      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007dfa:	4b63      	ldr	r3, [pc, #396]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <HAL_RCC_ClockConfig+0xda>
 8007e06:	2301      	movs	r3, #1
 8007e08:	e0b7      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007e0a:	4b5f      	ldr	r3, [pc, #380]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	f023 0203 	bic.w	r2, r3, #3
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	685b      	ldr	r3, [r3, #4]
 8007e16:	495c      	ldr	r1, [pc, #368]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007e18:	4313      	orrs	r3, r2
 8007e1a:	608b      	str	r3, [r1, #8]
 8007e1c:	f7fc fd00 	bl	8004820 <HAL_GetTick>
 8007e20:	60f8      	str	r0, [r7, #12]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	685b      	ldr	r3, [r3, #4]
 8007e26:	2b02      	cmp	r3, #2
 8007e28:	d112      	bne.n	8007e50 <HAL_RCC_ClockConfig+0x120>
 8007e2a:	e00a      	b.n	8007e42 <HAL_RCC_ClockConfig+0x112>
 8007e2c:	f7fc fcf8 	bl	8004820 <HAL_GetTick>
 8007e30:	4602      	mov	r2, r0
 8007e32:	68fb      	ldr	r3, [r7, #12]
 8007e34:	1ad3      	subs	r3, r2, r3
 8007e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e3a:	4293      	cmp	r3, r2
 8007e3c:	d901      	bls.n	8007e42 <HAL_RCC_ClockConfig+0x112>
 8007e3e:	2303      	movs	r3, #3
 8007e40:	e09b      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007e42:	4b51      	ldr	r3, [pc, #324]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007e44:	689b      	ldr	r3, [r3, #8]
 8007e46:	f003 030c 	and.w	r3, r3, #12
 8007e4a:	2b08      	cmp	r3, #8
 8007e4c:	d1ee      	bne.n	8007e2c <HAL_RCC_ClockConfig+0xfc>
 8007e4e:	e03e      	b.n	8007ece <HAL_RCC_ClockConfig+0x19e>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	685b      	ldr	r3, [r3, #4]
 8007e54:	2b03      	cmp	r3, #3
 8007e56:	d112      	bne.n	8007e7e <HAL_RCC_ClockConfig+0x14e>
 8007e58:	e00a      	b.n	8007e70 <HAL_RCC_ClockConfig+0x140>
 8007e5a:	f7fc fce1 	bl	8004820 <HAL_GetTick>
 8007e5e:	4602      	mov	r2, r0
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	1ad3      	subs	r3, r2, r3
 8007e64:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e68:	4293      	cmp	r3, r2
 8007e6a:	d901      	bls.n	8007e70 <HAL_RCC_ClockConfig+0x140>
 8007e6c:	2303      	movs	r3, #3
 8007e6e:	e084      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007e70:	4b45      	ldr	r3, [pc, #276]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007e72:	689b      	ldr	r3, [r3, #8]
 8007e74:	f003 030c 	and.w	r3, r3, #12
 8007e78:	2b0c      	cmp	r3, #12
 8007e7a:	d1ee      	bne.n	8007e5a <HAL_RCC_ClockConfig+0x12a>
 8007e7c:	e027      	b.n	8007ece <HAL_RCC_ClockConfig+0x19e>
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	685b      	ldr	r3, [r3, #4]
 8007e82:	2b01      	cmp	r3, #1
 8007e84:	d11d      	bne.n	8007ec2 <HAL_RCC_ClockConfig+0x192>
 8007e86:	e00a      	b.n	8007e9e <HAL_RCC_ClockConfig+0x16e>
 8007e88:	f7fc fcca 	bl	8004820 <HAL_GetTick>
 8007e8c:	4602      	mov	r2, r0
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	1ad3      	subs	r3, r2, r3
 8007e92:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e96:	4293      	cmp	r3, r2
 8007e98:	d901      	bls.n	8007e9e <HAL_RCC_ClockConfig+0x16e>
 8007e9a:	2303      	movs	r3, #3
 8007e9c:	e06d      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007e9e:	4b3a      	ldr	r3, [pc, #232]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	f003 030c 	and.w	r3, r3, #12
 8007ea6:	2b04      	cmp	r3, #4
 8007ea8:	d1ee      	bne.n	8007e88 <HAL_RCC_ClockConfig+0x158>
 8007eaa:	e010      	b.n	8007ece <HAL_RCC_ClockConfig+0x19e>
 8007eac:	f7fc fcb8 	bl	8004820 <HAL_GetTick>
 8007eb0:	4602      	mov	r2, r0
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	1ad3      	subs	r3, r2, r3
 8007eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007eba:	4293      	cmp	r3, r2
 8007ebc:	d901      	bls.n	8007ec2 <HAL_RCC_ClockConfig+0x192>
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	e05b      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007ec2:	4b31      	ldr	r3, [pc, #196]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007ec4:	689b      	ldr	r3, [r3, #8]
 8007ec6:	f003 030c 	and.w	r3, r3, #12
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d1ee      	bne.n	8007eac <HAL_RCC_ClockConfig+0x17c>
 8007ece:	4b2d      	ldr	r3, [pc, #180]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	f003 0301 	and.w	r3, r3, #1
 8007ed6:	683a      	ldr	r2, [r7, #0]
 8007ed8:	429a      	cmp	r2, r3
 8007eda:	d219      	bcs.n	8007f10 <HAL_RCC_ClockConfig+0x1e0>
 8007edc:	683b      	ldr	r3, [r7, #0]
 8007ede:	2b01      	cmp	r3, #1
 8007ee0:	d105      	bne.n	8007eee <HAL_RCC_ClockConfig+0x1be>
 8007ee2:	4b28      	ldr	r3, [pc, #160]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	4a27      	ldr	r2, [pc, #156]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007ee8:	f043 0304 	orr.w	r3, r3, #4
 8007eec:	6013      	str	r3, [r2, #0]
 8007eee:	4b25      	ldr	r3, [pc, #148]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f023 0201 	bic.w	r2, r3, #1
 8007ef6:	4923      	ldr	r1, [pc, #140]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007ef8:	683b      	ldr	r3, [r7, #0]
 8007efa:	4313      	orrs	r3, r2
 8007efc:	600b      	str	r3, [r1, #0]
 8007efe:	4b21      	ldr	r3, [pc, #132]	; (8007f84 <HAL_RCC_ClockConfig+0x254>)
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	f003 0301 	and.w	r3, r3, #1
 8007f06:	683a      	ldr	r2, [r7, #0]
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d001      	beq.n	8007f10 <HAL_RCC_ClockConfig+0x1e0>
 8007f0c:	2301      	movs	r3, #1
 8007f0e:	e034      	b.n	8007f7a <HAL_RCC_ClockConfig+0x24a>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f003 0304 	and.w	r3, r3, #4
 8007f18:	2b00      	cmp	r3, #0
 8007f1a:	d008      	beq.n	8007f2e <HAL_RCC_ClockConfig+0x1fe>
 8007f1c:	4b1a      	ldr	r3, [pc, #104]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007f1e:	689b      	ldr	r3, [r3, #8]
 8007f20:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	68db      	ldr	r3, [r3, #12]
 8007f28:	4917      	ldr	r1, [pc, #92]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007f2a:	4313      	orrs	r3, r2
 8007f2c:	608b      	str	r3, [r1, #8]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f003 0308 	and.w	r3, r3, #8
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d009      	beq.n	8007f4e <HAL_RCC_ClockConfig+0x21e>
 8007f3a:	4b13      	ldr	r3, [pc, #76]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007f3c:	689b      	ldr	r3, [r3, #8]
 8007f3e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	691b      	ldr	r3, [r3, #16]
 8007f46:	00db      	lsls	r3, r3, #3
 8007f48:	490f      	ldr	r1, [pc, #60]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007f4a:	4313      	orrs	r3, r2
 8007f4c:	608b      	str	r3, [r1, #8]
 8007f4e:	f000 f823 	bl	8007f98 <HAL_RCC_GetSysClockFreq>
 8007f52:	4602      	mov	r2, r0
 8007f54:	4b0c      	ldr	r3, [pc, #48]	; (8007f88 <HAL_RCC_ClockConfig+0x258>)
 8007f56:	689b      	ldr	r3, [r3, #8]
 8007f58:	091b      	lsrs	r3, r3, #4
 8007f5a:	f003 030f 	and.w	r3, r3, #15
 8007f5e:	490b      	ldr	r1, [pc, #44]	; (8007f8c <HAL_RCC_ClockConfig+0x25c>)
 8007f60:	5ccb      	ldrb	r3, [r1, r3]
 8007f62:	fa22 f303 	lsr.w	r3, r2, r3
 8007f66:	4a0a      	ldr	r2, [pc, #40]	; (8007f90 <HAL_RCC_ClockConfig+0x260>)
 8007f68:	6013      	str	r3, [r2, #0]
 8007f6a:	4b0a      	ldr	r3, [pc, #40]	; (8007f94 <HAL_RCC_ClockConfig+0x264>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4618      	mov	r0, r3
 8007f70:	f7fc fc0a 	bl	8004788 <HAL_InitTick>
 8007f74:	4603      	mov	r3, r0
 8007f76:	72fb      	strb	r3, [r7, #11]
 8007f78:	7afb      	ldrb	r3, [r7, #11]
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	3710      	adds	r7, #16
 8007f7e:	46bd      	mov	sp, r7
 8007f80:	bd80      	pop	{r7, pc}
 8007f82:	bf00      	nop
 8007f84:	40023c00 	.word	0x40023c00
 8007f88:	40023800 	.word	0x40023800
 8007f8c:	080127c0 	.word	0x080127c0
 8007f90:	20000088 	.word	0x20000088
 8007f94:	2000008c 	.word	0x2000008c

08007f98 <HAL_RCC_GetSysClockFreq>:
 8007f98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007f9c:	b08e      	sub	sp, #56	; 0x38
 8007f9e:	af00      	add	r7, sp, #0
 8007fa0:	4b58      	ldr	r3, [pc, #352]	; (8008104 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007fa2:	689b      	ldr	r3, [r3, #8]
 8007fa4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fa6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fa8:	f003 030c 	and.w	r3, r3, #12
 8007fac:	2b0c      	cmp	r3, #12
 8007fae:	d00d      	beq.n	8007fcc <HAL_RCC_GetSysClockFreq+0x34>
 8007fb0:	2b0c      	cmp	r3, #12
 8007fb2:	f200 8092 	bhi.w	80080da <HAL_RCC_GetSysClockFreq+0x142>
 8007fb6:	2b04      	cmp	r3, #4
 8007fb8:	d002      	beq.n	8007fc0 <HAL_RCC_GetSysClockFreq+0x28>
 8007fba:	2b08      	cmp	r3, #8
 8007fbc:	d003      	beq.n	8007fc6 <HAL_RCC_GetSysClockFreq+0x2e>
 8007fbe:	e08c      	b.n	80080da <HAL_RCC_GetSysClockFreq+0x142>
 8007fc0:	4b51      	ldr	r3, [pc, #324]	; (8008108 <HAL_RCC_GetSysClockFreq+0x170>)
 8007fc2:	633b      	str	r3, [r7, #48]	; 0x30
 8007fc4:	e097      	b.n	80080f6 <HAL_RCC_GetSysClockFreq+0x15e>
 8007fc6:	4b51      	ldr	r3, [pc, #324]	; (800810c <HAL_RCC_GetSysClockFreq+0x174>)
 8007fc8:	633b      	str	r3, [r7, #48]	; 0x30
 8007fca:	e094      	b.n	80080f6 <HAL_RCC_GetSysClockFreq+0x15e>
 8007fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fce:	0c9b      	lsrs	r3, r3, #18
 8007fd0:	f003 020f 	and.w	r2, r3, #15
 8007fd4:	4b4e      	ldr	r3, [pc, #312]	; (8008110 <HAL_RCC_GetSysClockFreq+0x178>)
 8007fd6:	5c9b      	ldrb	r3, [r3, r2]
 8007fd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8007fda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fdc:	0d9b      	lsrs	r3, r3, #22
 8007fde:	f003 0303 	and.w	r3, r3, #3
 8007fe2:	3301      	adds	r3, #1
 8007fe4:	627b      	str	r3, [r7, #36]	; 0x24
 8007fe6:	4b47      	ldr	r3, [pc, #284]	; (8008104 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007fe8:	689b      	ldr	r3, [r3, #8]
 8007fea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007fee:	2b00      	cmp	r3, #0
 8007ff0:	d021      	beq.n	8008036 <HAL_RCC_GetSysClockFreq+0x9e>
 8007ff2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	61bb      	str	r3, [r7, #24]
 8007ff8:	61fa      	str	r2, [r7, #28]
 8007ffa:	4b44      	ldr	r3, [pc, #272]	; (800810c <HAL_RCC_GetSysClockFreq+0x174>)
 8007ffc:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8008000:	464a      	mov	r2, r9
 8008002:	fb03 f202 	mul.w	r2, r3, r2
 8008006:	2300      	movs	r3, #0
 8008008:	4644      	mov	r4, r8
 800800a:	fb04 f303 	mul.w	r3, r4, r3
 800800e:	4413      	add	r3, r2
 8008010:	4a3e      	ldr	r2, [pc, #248]	; (800810c <HAL_RCC_GetSysClockFreq+0x174>)
 8008012:	4644      	mov	r4, r8
 8008014:	fba4 0102 	umull	r0, r1, r4, r2
 8008018:	440b      	add	r3, r1
 800801a:	4619      	mov	r1, r3
 800801c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800801e:	2200      	movs	r2, #0
 8008020:	613b      	str	r3, [r7, #16]
 8008022:	617a      	str	r2, [r7, #20]
 8008024:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008028:	f7f8 ff1c 	bl	8000e64 <__aeabi_uldivmod>
 800802c:	4602      	mov	r2, r0
 800802e:	460b      	mov	r3, r1
 8008030:	4613      	mov	r3, r2
 8008032:	637b      	str	r3, [r7, #52]	; 0x34
 8008034:	e04e      	b.n	80080d4 <HAL_RCC_GetSysClockFreq+0x13c>
 8008036:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008038:	2200      	movs	r2, #0
 800803a:	469a      	mov	sl, r3
 800803c:	4693      	mov	fp, r2
 800803e:	4652      	mov	r2, sl
 8008040:	465b      	mov	r3, fp
 8008042:	f04f 0000 	mov.w	r0, #0
 8008046:	f04f 0100 	mov.w	r1, #0
 800804a:	0159      	lsls	r1, r3, #5
 800804c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008050:	0150      	lsls	r0, r2, #5
 8008052:	4602      	mov	r2, r0
 8008054:	460b      	mov	r3, r1
 8008056:	ebb2 080a 	subs.w	r8, r2, sl
 800805a:	eb63 090b 	sbc.w	r9, r3, fp
 800805e:	f04f 0200 	mov.w	r2, #0
 8008062:	f04f 0300 	mov.w	r3, #0
 8008066:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800806a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800806e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008072:	ebb2 0408 	subs.w	r4, r2, r8
 8008076:	eb63 0509 	sbc.w	r5, r3, r9
 800807a:	f04f 0200 	mov.w	r2, #0
 800807e:	f04f 0300 	mov.w	r3, #0
 8008082:	00eb      	lsls	r3, r5, #3
 8008084:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008088:	00e2      	lsls	r2, r4, #3
 800808a:	4614      	mov	r4, r2
 800808c:	461d      	mov	r5, r3
 800808e:	eb14 030a 	adds.w	r3, r4, sl
 8008092:	603b      	str	r3, [r7, #0]
 8008094:	eb45 030b 	adc.w	r3, r5, fp
 8008098:	607b      	str	r3, [r7, #4]
 800809a:	f04f 0200 	mov.w	r2, #0
 800809e:	f04f 0300 	mov.w	r3, #0
 80080a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80080a6:	4629      	mov	r1, r5
 80080a8:	028b      	lsls	r3, r1, #10
 80080aa:	4620      	mov	r0, r4
 80080ac:	4629      	mov	r1, r5
 80080ae:	4604      	mov	r4, r0
 80080b0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80080b4:	4601      	mov	r1, r0
 80080b6:	028a      	lsls	r2, r1, #10
 80080b8:	4610      	mov	r0, r2
 80080ba:	4619      	mov	r1, r3
 80080bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080be:	2200      	movs	r2, #0
 80080c0:	60bb      	str	r3, [r7, #8]
 80080c2:	60fa      	str	r2, [r7, #12]
 80080c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80080c8:	f7f8 fecc 	bl	8000e64 <__aeabi_uldivmod>
 80080cc:	4602      	mov	r2, r0
 80080ce:	460b      	mov	r3, r1
 80080d0:	4613      	mov	r3, r2
 80080d2:	637b      	str	r3, [r7, #52]	; 0x34
 80080d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080d6:	633b      	str	r3, [r7, #48]	; 0x30
 80080d8:	e00d      	b.n	80080f6 <HAL_RCC_GetSysClockFreq+0x15e>
 80080da:	4b0a      	ldr	r3, [pc, #40]	; (8008104 <HAL_RCC_GetSysClockFreq+0x16c>)
 80080dc:	685b      	ldr	r3, [r3, #4]
 80080de:	0b5b      	lsrs	r3, r3, #13
 80080e0:	f003 0307 	and.w	r3, r3, #7
 80080e4:	623b      	str	r3, [r7, #32]
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	3301      	adds	r3, #1
 80080ea:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80080ee:	fa02 f303 	lsl.w	r3, r2, r3
 80080f2:	633b      	str	r3, [r7, #48]	; 0x30
 80080f4:	bf00      	nop
 80080f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080f8:	4618      	mov	r0, r3
 80080fa:	3738      	adds	r7, #56	; 0x38
 80080fc:	46bd      	mov	sp, r7
 80080fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008102:	bf00      	nop
 8008104:	40023800 	.word	0x40023800
 8008108:	00f42400 	.word	0x00f42400
 800810c:	016e3600 	.word	0x016e3600
 8008110:	080127b4 	.word	0x080127b4

08008114 <HAL_RCC_GetHCLKFreq>:
 8008114:	b480      	push	{r7}
 8008116:	af00      	add	r7, sp, #0
 8008118:	4b02      	ldr	r3, [pc, #8]	; (8008124 <HAL_RCC_GetHCLKFreq+0x10>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4618      	mov	r0, r3
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr
 8008124:	20000088 	.word	0x20000088

08008128 <HAL_RCC_GetPCLK1Freq>:
 8008128:	b580      	push	{r7, lr}
 800812a:	af00      	add	r7, sp, #0
 800812c:	f7ff fff2 	bl	8008114 <HAL_RCC_GetHCLKFreq>
 8008130:	4602      	mov	r2, r0
 8008132:	4b05      	ldr	r3, [pc, #20]	; (8008148 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	0a1b      	lsrs	r3, r3, #8
 8008138:	f003 0307 	and.w	r3, r3, #7
 800813c:	4903      	ldr	r1, [pc, #12]	; (800814c <HAL_RCC_GetPCLK1Freq+0x24>)
 800813e:	5ccb      	ldrb	r3, [r1, r3]
 8008140:	fa22 f303 	lsr.w	r3, r2, r3
 8008144:	4618      	mov	r0, r3
 8008146:	bd80      	pop	{r7, pc}
 8008148:	40023800 	.word	0x40023800
 800814c:	080127d0 	.word	0x080127d0

08008150 <RCC_SetFlashLatencyFromMSIRange>:
 8008150:	b480      	push	{r7}
 8008152:	b087      	sub	sp, #28
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
 8008158:	2300      	movs	r3, #0
 800815a:	613b      	str	r3, [r7, #16]
 800815c:	4b29      	ldr	r3, [pc, #164]	; (8008204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800815e:	689b      	ldr	r3, [r3, #8]
 8008160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008164:	2b00      	cmp	r3, #0
 8008166:	d12c      	bne.n	80081c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8008168:	4b26      	ldr	r3, [pc, #152]	; (8008204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800816a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800816c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008170:	2b00      	cmp	r3, #0
 8008172:	d005      	beq.n	8008180 <RCC_SetFlashLatencyFromMSIRange+0x30>
 8008174:	4b24      	ldr	r3, [pc, #144]	; (8008208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 800817c:	617b      	str	r3, [r7, #20]
 800817e:	e016      	b.n	80081ae <RCC_SetFlashLatencyFromMSIRange+0x5e>
 8008180:	4b20      	ldr	r3, [pc, #128]	; (8008204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008184:	4a1f      	ldr	r2, [pc, #124]	; (8008204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8008186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800818a:	6253      	str	r3, [r2, #36]	; 0x24
 800818c:	4b1d      	ldr	r3, [pc, #116]	; (8008204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800818e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008190:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008194:	60fb      	str	r3, [r7, #12]
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4b1b      	ldr	r3, [pc, #108]	; (8008208 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 80081a0:	617b      	str	r3, [r7, #20]
 80081a2:	4b18      	ldr	r3, [pc, #96]	; (8008204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80081a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80081a6:	4a17      	ldr	r2, [pc, #92]	; (8008204 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 80081a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80081ac:	6253      	str	r3, [r2, #36]	; 0x24
 80081ae:	697b      	ldr	r3, [r7, #20]
 80081b0:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 80081b4:	d105      	bne.n	80081c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80081bc:	d101      	bne.n	80081c2 <RCC_SetFlashLatencyFromMSIRange+0x72>
 80081be:	2301      	movs	r3, #1
 80081c0:	613b      	str	r3, [r7, #16]
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	2b01      	cmp	r3, #1
 80081c6:	d105      	bne.n	80081d4 <RCC_SetFlashLatencyFromMSIRange+0x84>
 80081c8:	4b10      	ldr	r3, [pc, #64]	; (800820c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a0f      	ldr	r2, [pc, #60]	; (800820c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081ce:	f043 0304 	orr.w	r3, r3, #4
 80081d2:	6013      	str	r3, [r2, #0]
 80081d4:	4b0d      	ldr	r3, [pc, #52]	; (800820c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	f023 0201 	bic.w	r2, r3, #1
 80081dc:	490b      	ldr	r1, [pc, #44]	; (800820c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	4313      	orrs	r3, r2
 80081e2:	600b      	str	r3, [r1, #0]
 80081e4:	4b09      	ldr	r3, [pc, #36]	; (800820c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	f003 0301 	and.w	r3, r3, #1
 80081ec:	693a      	ldr	r2, [r7, #16]
 80081ee:	429a      	cmp	r2, r3
 80081f0:	d001      	beq.n	80081f6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
 80081f2:	2301      	movs	r3, #1
 80081f4:	e000      	b.n	80081f8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
 80081f6:	2300      	movs	r3, #0
 80081f8:	4618      	mov	r0, r3
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	bc80      	pop	{r7}
 8008200:	4770      	bx	lr
 8008202:	bf00      	nop
 8008204:	40023800 	.word	0x40023800
 8008208:	40007000 	.word	0x40007000
 800820c:	40023c00 	.word	0x40023c00

08008210 <HAL_SPI_Init>:
 8008210:	b580      	push	{r7, lr}
 8008212:	b082      	sub	sp, #8
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	2b00      	cmp	r3, #0
 800821c:	d101      	bne.n	8008222 <HAL_SPI_Init+0x12>
 800821e:	2301      	movs	r3, #1
 8008220:	e06e      	b.n	8008300 <HAL_SPI_Init+0xf0>
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008226:	2b00      	cmp	r3, #0
 8008228:	d108      	bne.n	800823c <HAL_SPI_Init+0x2c>
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	685b      	ldr	r3, [r3, #4]
 800822e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008232:	d009      	beq.n	8008248 <HAL_SPI_Init+0x38>
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	2200      	movs	r2, #0
 8008238:	61da      	str	r2, [r3, #28]
 800823a:	e005      	b.n	8008248 <HAL_SPI_Init+0x38>
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	2200      	movs	r2, #0
 8008240:	611a      	str	r2, [r3, #16]
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2200      	movs	r2, #0
 8008246:	615a      	str	r2, [r3, #20]
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2200      	movs	r2, #0
 800824c:	629a      	str	r2, [r3, #40]	; 0x28
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008254:	b2db      	uxtb	r3, r3
 8008256:	2b00      	cmp	r3, #0
 8008258:	d106      	bne.n	8008268 <HAL_SPI_Init+0x58>
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2200      	movs	r2, #0
 800825e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008262:	6878      	ldr	r0, [r7, #4]
 8008264:	f7fb ffa0 	bl	80041a8 <HAL_SPI_MspInit>
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2202      	movs	r2, #2
 800826c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	681a      	ldr	r2, [r3, #0]
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800827e:	601a      	str	r2, [r3, #0]
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	685b      	ldr	r3, [r3, #4]
 8008284:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	689b      	ldr	r3, [r3, #8]
 800828c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008290:	431a      	orrs	r2, r3
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	68db      	ldr	r3, [r3, #12]
 8008296:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800829a:	431a      	orrs	r2, r3
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	691b      	ldr	r3, [r3, #16]
 80082a0:	f003 0302 	and.w	r3, r3, #2
 80082a4:	431a      	orrs	r2, r3
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	695b      	ldr	r3, [r3, #20]
 80082aa:	f003 0301 	and.w	r3, r3, #1
 80082ae:	431a      	orrs	r2, r3
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	699b      	ldr	r3, [r3, #24]
 80082b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80082b8:	431a      	orrs	r2, r3
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69db      	ldr	r3, [r3, #28]
 80082be:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80082c2:	431a      	orrs	r2, r3
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	6a1b      	ldr	r3, [r3, #32]
 80082c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082cc:	ea42 0103 	orr.w	r1, r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80082d4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	430a      	orrs	r2, r1
 80082de:	601a      	str	r2, [r3, #0]
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	699b      	ldr	r3, [r3, #24]
 80082e4:	0c1a      	lsrs	r2, r3, #16
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	f002 0204 	and.w	r2, r2, #4
 80082ee:	605a      	str	r2, [r3, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2200      	movs	r2, #0
 80082f4:	655a      	str	r2, [r3, #84]	; 0x54
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2201      	movs	r2, #1
 80082fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80082fe:	2300      	movs	r3, #0
 8008300:	4618      	mov	r0, r3
 8008302:	3708      	adds	r7, #8
 8008304:	46bd      	mov	sp, r7
 8008306:	bd80      	pop	{r7, pc}

08008308 <HAL_SPI_TransmitReceive>:
 8008308:	b580      	push	{r7, lr}
 800830a:	b08c      	sub	sp, #48	; 0x30
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	807b      	strh	r3, [r7, #2]
 8008316:	2301      	movs	r3, #1
 8008318:	62fb      	str	r3, [r7, #44]	; 0x2c
 800831a:	2300      	movs	r3, #0
 800831c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8008326:	2b01      	cmp	r3, #1
 8008328:	d101      	bne.n	800832e <HAL_SPI_TransmitReceive+0x26>
 800832a:	2302      	movs	r3, #2
 800832c:	e18a      	b.n	8008644 <HAL_SPI_TransmitReceive+0x33c>
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008336:	f7fc fa73 	bl	8004820 <HAL_GetTick>
 800833a:	6278      	str	r0, [r7, #36]	; 0x24
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008342:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008346:	68fb      	ldr	r3, [r7, #12]
 8008348:	685b      	ldr	r3, [r3, #4]
 800834a:	61fb      	str	r3, [r7, #28]
 800834c:	887b      	ldrh	r3, [r7, #2]
 800834e:	837b      	strh	r3, [r7, #26]
 8008350:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008354:	2b01      	cmp	r3, #1
 8008356:	d00f      	beq.n	8008378 <HAL_SPI_TransmitReceive+0x70>
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800835e:	d107      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x68>
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	689b      	ldr	r3, [r3, #8]
 8008364:	2b00      	cmp	r3, #0
 8008366:	d103      	bne.n	8008370 <HAL_SPI_TransmitReceive+0x68>
 8008368:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800836c:	2b04      	cmp	r3, #4
 800836e:	d003      	beq.n	8008378 <HAL_SPI_TransmitReceive+0x70>
 8008370:	2302      	movs	r3, #2
 8008372:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008376:	e15b      	b.n	8008630 <HAL_SPI_TransmitReceive+0x328>
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d005      	beq.n	800838a <HAL_SPI_TransmitReceive+0x82>
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <HAL_SPI_TransmitReceive+0x82>
 8008384:	887b      	ldrh	r3, [r7, #2]
 8008386:	2b00      	cmp	r3, #0
 8008388:	d103      	bne.n	8008392 <HAL_SPI_TransmitReceive+0x8a>
 800838a:	2301      	movs	r3, #1
 800838c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008390:	e14e      	b.n	8008630 <HAL_SPI_TransmitReceive+0x328>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008398:	b2db      	uxtb	r3, r3
 800839a:	2b04      	cmp	r3, #4
 800839c:	d003      	beq.n	80083a6 <HAL_SPI_TransmitReceive+0x9e>
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	2205      	movs	r2, #5
 80083a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2200      	movs	r2, #0
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	687a      	ldr	r2, [r7, #4]
 80083b0:	639a      	str	r2, [r3, #56]	; 0x38
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	887a      	ldrh	r2, [r7, #2]
 80083b6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	887a      	ldrh	r2, [r7, #2]
 80083bc:	879a      	strh	r2, [r3, #60]	; 0x3c
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	631a      	str	r2, [r3, #48]	; 0x30
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	887a      	ldrh	r2, [r7, #2]
 80083c8:	86da      	strh	r2, [r3, #54]	; 0x36
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	887a      	ldrh	r2, [r7, #2]
 80083ce:	869a      	strh	r2, [r3, #52]	; 0x34
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2200      	movs	r2, #0
 80083d4:	641a      	str	r2, [r3, #64]	; 0x40
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	2200      	movs	r2, #0
 80083da:	645a      	str	r2, [r3, #68]	; 0x44
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083e6:	2b40      	cmp	r3, #64	; 0x40
 80083e8:	d007      	beq.n	80083fa <HAL_SPI_TransmitReceive+0xf2>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	681a      	ldr	r2, [r3, #0]
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80083f8:	601a      	str	r2, [r3, #0]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	68db      	ldr	r3, [r3, #12]
 80083fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008402:	d178      	bne.n	80084f6 <HAL_SPI_TransmitReceive+0x1ee>
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d002      	beq.n	8008412 <HAL_SPI_TransmitReceive+0x10a>
 800840c:	8b7b      	ldrh	r3, [r7, #26]
 800840e:	2b01      	cmp	r3, #1
 8008410:	d166      	bne.n	80084e0 <HAL_SPI_TransmitReceive+0x1d8>
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008416:	881a      	ldrh	r2, [r3, #0]
 8008418:	68fb      	ldr	r3, [r7, #12]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	60da      	str	r2, [r3, #12]
 800841e:	68fb      	ldr	r3, [r7, #12]
 8008420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008422:	1c9a      	adds	r2, r3, #2
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	631a      	str	r2, [r3, #48]	; 0x30
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800842c:	b29b      	uxth	r3, r3
 800842e:	3b01      	subs	r3, #1
 8008430:	b29a      	uxth	r2, r3
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	86da      	strh	r2, [r3, #54]	; 0x36
 8008436:	e053      	b.n	80084e0 <HAL_SPI_TransmitReceive+0x1d8>
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	f003 0302 	and.w	r3, r3, #2
 8008442:	2b02      	cmp	r3, #2
 8008444:	d11b      	bne.n	800847e <HAL_SPI_TransmitReceive+0x176>
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800844a:	b29b      	uxth	r3, r3
 800844c:	2b00      	cmp	r3, #0
 800844e:	d016      	beq.n	800847e <HAL_SPI_TransmitReceive+0x176>
 8008450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008452:	2b01      	cmp	r3, #1
 8008454:	d113      	bne.n	800847e <HAL_SPI_TransmitReceive+0x176>
 8008456:	68fb      	ldr	r3, [r7, #12]
 8008458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800845a:	881a      	ldrh	r2, [r3, #0]
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	60da      	str	r2, [r3, #12]
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008466:	1c9a      	adds	r2, r3, #2
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	631a      	str	r2, [r3, #48]	; 0x30
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008470:	b29b      	uxth	r3, r3
 8008472:	3b01      	subs	r3, #1
 8008474:	b29a      	uxth	r2, r3
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	86da      	strh	r2, [r3, #54]	; 0x36
 800847a:	2300      	movs	r3, #0
 800847c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	689b      	ldr	r3, [r3, #8]
 8008484:	f003 0301 	and.w	r3, r3, #1
 8008488:	2b01      	cmp	r3, #1
 800848a:	d119      	bne.n	80084c0 <HAL_SPI_TransmitReceive+0x1b8>
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008490:	b29b      	uxth	r3, r3
 8008492:	2b00      	cmp	r3, #0
 8008494:	d014      	beq.n	80084c0 <HAL_SPI_TransmitReceive+0x1b8>
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	68da      	ldr	r2, [r3, #12]
 800849c:	68fb      	ldr	r3, [r7, #12]
 800849e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a0:	b292      	uxth	r2, r2
 80084a2:	801a      	strh	r2, [r3, #0]
 80084a4:	68fb      	ldr	r3, [r7, #12]
 80084a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80084a8:	1c9a      	adds	r2, r3, #2
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	639a      	str	r2, [r3, #56]	; 0x38
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084b2:	b29b      	uxth	r3, r3
 80084b4:	3b01      	subs	r3, #1
 80084b6:	b29a      	uxth	r2, r3
 80084b8:	68fb      	ldr	r3, [r7, #12]
 80084ba:	87da      	strh	r2, [r3, #62]	; 0x3e
 80084bc:	2301      	movs	r3, #1
 80084be:	62fb      	str	r3, [r7, #44]	; 0x2c
 80084c0:	f7fc f9ae 	bl	8004820 <HAL_GetTick>
 80084c4:	4602      	mov	r2, r0
 80084c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084c8:	1ad3      	subs	r3, r2, r3
 80084ca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d807      	bhi.n	80084e0 <HAL_SPI_TransmitReceive+0x1d8>
 80084d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80084d6:	d003      	beq.n	80084e0 <HAL_SPI_TransmitReceive+0x1d8>
 80084d8:	2303      	movs	r3, #3
 80084da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80084de:	e0a7      	b.n	8008630 <HAL_SPI_TransmitReceive+0x328>
 80084e0:	68fb      	ldr	r3, [r7, #12]
 80084e2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80084e4:	b29b      	uxth	r3, r3
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d1a6      	bne.n	8008438 <HAL_SPI_TransmitReceive+0x130>
 80084ea:	68fb      	ldr	r3, [r7, #12]
 80084ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80084ee:	b29b      	uxth	r3, r3
 80084f0:	2b00      	cmp	r3, #0
 80084f2:	d1a1      	bne.n	8008438 <HAL_SPI_TransmitReceive+0x130>
 80084f4:	e07c      	b.n	80085f0 <HAL_SPI_TransmitReceive+0x2e8>
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d002      	beq.n	8008504 <HAL_SPI_TransmitReceive+0x1fc>
 80084fe:	8b7b      	ldrh	r3, [r7, #26]
 8008500:	2b01      	cmp	r3, #1
 8008502:	d16b      	bne.n	80085dc <HAL_SPI_TransmitReceive+0x2d4>
 8008504:	68fb      	ldr	r3, [r7, #12]
 8008506:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	330c      	adds	r3, #12
 800850e:	7812      	ldrb	r2, [r2, #0]
 8008510:	701a      	strb	r2, [r3, #0]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008516:	1c5a      	adds	r2, r3, #1
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	631a      	str	r2, [r3, #48]	; 0x30
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008520:	b29b      	uxth	r3, r3
 8008522:	3b01      	subs	r3, #1
 8008524:	b29a      	uxth	r2, r3
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	86da      	strh	r2, [r3, #54]	; 0x36
 800852a:	e057      	b.n	80085dc <HAL_SPI_TransmitReceive+0x2d4>
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	681b      	ldr	r3, [r3, #0]
 8008530:	689b      	ldr	r3, [r3, #8]
 8008532:	f003 0302 	and.w	r3, r3, #2
 8008536:	2b02      	cmp	r3, #2
 8008538:	d11c      	bne.n	8008574 <HAL_SPI_TransmitReceive+0x26c>
 800853a:	68fb      	ldr	r3, [r7, #12]
 800853c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800853e:	b29b      	uxth	r3, r3
 8008540:	2b00      	cmp	r3, #0
 8008542:	d017      	beq.n	8008574 <HAL_SPI_TransmitReceive+0x26c>
 8008544:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008546:	2b01      	cmp	r3, #1
 8008548:	d114      	bne.n	8008574 <HAL_SPI_TransmitReceive+0x26c>
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800854e:	68fb      	ldr	r3, [r7, #12]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	330c      	adds	r3, #12
 8008554:	7812      	ldrb	r2, [r2, #0]
 8008556:	701a      	strb	r2, [r3, #0]
 8008558:	68fb      	ldr	r3, [r7, #12]
 800855a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800855c:	1c5a      	adds	r2, r3, #1
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	631a      	str	r2, [r3, #48]	; 0x30
 8008562:	68fb      	ldr	r3, [r7, #12]
 8008564:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008566:	b29b      	uxth	r3, r3
 8008568:	3b01      	subs	r3, #1
 800856a:	b29a      	uxth	r2, r3
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	86da      	strh	r2, [r3, #54]	; 0x36
 8008570:	2300      	movs	r3, #0
 8008572:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	689b      	ldr	r3, [r3, #8]
 800857a:	f003 0301 	and.w	r3, r3, #1
 800857e:	2b01      	cmp	r3, #1
 8008580:	d119      	bne.n	80085b6 <HAL_SPI_TransmitReceive+0x2ae>
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008586:	b29b      	uxth	r3, r3
 8008588:	2b00      	cmp	r3, #0
 800858a:	d014      	beq.n	80085b6 <HAL_SPI_TransmitReceive+0x2ae>
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	68da      	ldr	r2, [r3, #12]
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008596:	b2d2      	uxtb	r2, r2
 8008598:	701a      	strb	r2, [r3, #0]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859e:	1c5a      	adds	r2, r3, #1
 80085a0:	68fb      	ldr	r3, [r7, #12]
 80085a2:	639a      	str	r2, [r3, #56]	; 0x38
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085a8:	b29b      	uxth	r3, r3
 80085aa:	3b01      	subs	r3, #1
 80085ac:	b29a      	uxth	r2, r3
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80085b2:	2301      	movs	r3, #1
 80085b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80085b6:	f7fc f933 	bl	8004820 <HAL_GetTick>
 80085ba:	4602      	mov	r2, r0
 80085bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085be:	1ad3      	subs	r3, r2, r3
 80085c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80085c2:	429a      	cmp	r2, r3
 80085c4:	d803      	bhi.n	80085ce <HAL_SPI_TransmitReceive+0x2c6>
 80085c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085cc:	d102      	bne.n	80085d4 <HAL_SPI_TransmitReceive+0x2cc>
 80085ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	d103      	bne.n	80085dc <HAL_SPI_TransmitReceive+0x2d4>
 80085d4:	2303      	movs	r3, #3
 80085d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80085da:	e029      	b.n	8008630 <HAL_SPI_TransmitReceive+0x328>
 80085dc:	68fb      	ldr	r3, [r7, #12]
 80085de:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80085e0:	b29b      	uxth	r3, r3
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d1a2      	bne.n	800852c <HAL_SPI_TransmitReceive+0x224>
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80085ea:	b29b      	uxth	r3, r3
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d19d      	bne.n	800852c <HAL_SPI_TransmitReceive+0x224>
 80085f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80085f4:	68f8      	ldr	r0, [r7, #12]
 80085f6:	f000 f8b1 	bl	800875c <SPI_EndRxTxTransaction>
 80085fa:	4603      	mov	r3, r0
 80085fc:	2b00      	cmp	r3, #0
 80085fe:	d006      	beq.n	800860e <HAL_SPI_TransmitReceive+0x306>
 8008600:	2301      	movs	r3, #1
 8008602:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	2220      	movs	r2, #32
 800860a:	655a      	str	r2, [r3, #84]	; 0x54
 800860c:	e010      	b.n	8008630 <HAL_SPI_TransmitReceive+0x328>
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	689b      	ldr	r3, [r3, #8]
 8008612:	2b00      	cmp	r3, #0
 8008614:	d10b      	bne.n	800862e <HAL_SPI_TransmitReceive+0x326>
 8008616:	2300      	movs	r3, #0
 8008618:	617b      	str	r3, [r7, #20]
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	617b      	str	r3, [r7, #20]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	689b      	ldr	r3, [r3, #8]
 8008628:	617b      	str	r3, [r7, #20]
 800862a:	697b      	ldr	r3, [r7, #20]
 800862c:	e000      	b.n	8008630 <HAL_SPI_TransmitReceive+0x328>
 800862e:	bf00      	nop
 8008630:	68fb      	ldr	r3, [r7, #12]
 8008632:	2201      	movs	r2, #1
 8008634:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	2200      	movs	r2, #0
 800863c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8008640:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008644:	4618      	mov	r0, r3
 8008646:	3730      	adds	r7, #48	; 0x30
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <SPI_WaitFlagStateUntilTimeout>:
 800864c:	b580      	push	{r7, lr}
 800864e:	b088      	sub	sp, #32
 8008650:	af00      	add	r7, sp, #0
 8008652:	60f8      	str	r0, [r7, #12]
 8008654:	60b9      	str	r1, [r7, #8]
 8008656:	603b      	str	r3, [r7, #0]
 8008658:	4613      	mov	r3, r2
 800865a:	71fb      	strb	r3, [r7, #7]
 800865c:	f7fc f8e0 	bl	8004820 <HAL_GetTick>
 8008660:	4602      	mov	r2, r0
 8008662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008664:	1a9b      	subs	r3, r3, r2
 8008666:	683a      	ldr	r2, [r7, #0]
 8008668:	4413      	add	r3, r2
 800866a:	61fb      	str	r3, [r7, #28]
 800866c:	f7fc f8d8 	bl	8004820 <HAL_GetTick>
 8008670:	61b8      	str	r0, [r7, #24]
 8008672:	4b39      	ldr	r3, [pc, #228]	; (8008758 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	015b      	lsls	r3, r3, #5
 8008678:	0d1b      	lsrs	r3, r3, #20
 800867a:	69fa      	ldr	r2, [r7, #28]
 800867c:	fb02 f303 	mul.w	r3, r2, r3
 8008680:	617b      	str	r3, [r7, #20]
 8008682:	e054      	b.n	800872e <SPI_WaitFlagStateUntilTimeout+0xe2>
 8008684:	683b      	ldr	r3, [r7, #0]
 8008686:	f1b3 3fff 	cmp.w	r3, #4294967295
 800868a:	d050      	beq.n	800872e <SPI_WaitFlagStateUntilTimeout+0xe2>
 800868c:	f7fc f8c8 	bl	8004820 <HAL_GetTick>
 8008690:	4602      	mov	r2, r0
 8008692:	69bb      	ldr	r3, [r7, #24]
 8008694:	1ad3      	subs	r3, r2, r3
 8008696:	69fa      	ldr	r2, [r7, #28]
 8008698:	429a      	cmp	r2, r3
 800869a:	d902      	bls.n	80086a2 <SPI_WaitFlagStateUntilTimeout+0x56>
 800869c:	69fb      	ldr	r3, [r7, #28]
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d13d      	bne.n	800871e <SPI_WaitFlagStateUntilTimeout+0xd2>
 80086a2:	68fb      	ldr	r3, [r7, #12]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80086b0:	605a      	str	r2, [r3, #4]
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	685b      	ldr	r3, [r3, #4]
 80086b6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80086ba:	d111      	bne.n	80086e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80086bc:	68fb      	ldr	r3, [r7, #12]
 80086be:	689b      	ldr	r3, [r3, #8]
 80086c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80086c4:	d004      	beq.n	80086d0 <SPI_WaitFlagStateUntilTimeout+0x84>
 80086c6:	68fb      	ldr	r3, [r7, #12]
 80086c8:	689b      	ldr	r3, [r3, #8]
 80086ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80086ce:	d107      	bne.n	80086e0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80086d0:	68fb      	ldr	r3, [r7, #12]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	681a      	ldr	r2, [r3, #0]
 80086d6:	68fb      	ldr	r3, [r7, #12]
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	68fb      	ldr	r3, [r7, #12]
 80086e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086e8:	d10f      	bne.n	800870a <SPI_WaitFlagStateUntilTimeout+0xbe>
 80086ea:	68fb      	ldr	r3, [r7, #12]
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	681a      	ldr	r2, [r3, #0]
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80086f8:	601a      	str	r2, [r3, #0]
 80086fa:	68fb      	ldr	r3, [r7, #12]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	681a      	ldr	r2, [r3, #0]
 8008700:	68fb      	ldr	r3, [r7, #12]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008708:	601a      	str	r2, [r3, #0]
 800870a:	68fb      	ldr	r3, [r7, #12]
 800870c:	2201      	movs	r2, #1
 800870e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	2200      	movs	r2, #0
 8008716:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 800871a:	2303      	movs	r3, #3
 800871c:	e017      	b.n	800874e <SPI_WaitFlagStateUntilTimeout+0x102>
 800871e:	697b      	ldr	r3, [r7, #20]
 8008720:	2b00      	cmp	r3, #0
 8008722:	d101      	bne.n	8008728 <SPI_WaitFlagStateUntilTimeout+0xdc>
 8008724:	2300      	movs	r3, #0
 8008726:	61fb      	str	r3, [r7, #28]
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	3b01      	subs	r3, #1
 800872c:	617b      	str	r3, [r7, #20]
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	689a      	ldr	r2, [r3, #8]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	4013      	ands	r3, r2
 8008738:	68ba      	ldr	r2, [r7, #8]
 800873a:	429a      	cmp	r2, r3
 800873c:	bf0c      	ite	eq
 800873e:	2301      	moveq	r3, #1
 8008740:	2300      	movne	r3, #0
 8008742:	b2db      	uxtb	r3, r3
 8008744:	461a      	mov	r2, r3
 8008746:	79fb      	ldrb	r3, [r7, #7]
 8008748:	429a      	cmp	r2, r3
 800874a:	d19b      	bne.n	8008684 <SPI_WaitFlagStateUntilTimeout+0x38>
 800874c:	2300      	movs	r3, #0
 800874e:	4618      	mov	r0, r3
 8008750:	3720      	adds	r7, #32
 8008752:	46bd      	mov	sp, r7
 8008754:	bd80      	pop	{r7, pc}
 8008756:	bf00      	nop
 8008758:	20000088 	.word	0x20000088

0800875c <SPI_EndRxTxTransaction>:
 800875c:	b580      	push	{r7, lr}
 800875e:	b088      	sub	sp, #32
 8008760:	af02      	add	r7, sp, #8
 8008762:	60f8      	str	r0, [r7, #12]
 8008764:	60b9      	str	r1, [r7, #8]
 8008766:	607a      	str	r2, [r7, #4]
 8008768:	4b1b      	ldr	r3, [pc, #108]	; (80087d8 <SPI_EndRxTxTransaction+0x7c>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a1b      	ldr	r2, [pc, #108]	; (80087dc <SPI_EndRxTxTransaction+0x80>)
 800876e:	fba2 2303 	umull	r2, r3, r2, r3
 8008772:	0d5b      	lsrs	r3, r3, #21
 8008774:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008778:	fb02 f303 	mul.w	r3, r2, r3
 800877c:	617b      	str	r3, [r7, #20]
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008786:	d112      	bne.n	80087ae <SPI_EndRxTxTransaction+0x52>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	9300      	str	r3, [sp, #0]
 800878c:	68bb      	ldr	r3, [r7, #8]
 800878e:	2200      	movs	r2, #0
 8008790:	2180      	movs	r1, #128	; 0x80
 8008792:	68f8      	ldr	r0, [r7, #12]
 8008794:	f7ff ff5a 	bl	800864c <SPI_WaitFlagStateUntilTimeout>
 8008798:	4603      	mov	r3, r0
 800879a:	2b00      	cmp	r3, #0
 800879c:	d016      	beq.n	80087cc <SPI_EndRxTxTransaction+0x70>
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80087a2:	f043 0220 	orr.w	r2, r3, #32
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	655a      	str	r2, [r3, #84]	; 0x54
 80087aa:	2303      	movs	r3, #3
 80087ac:	e00f      	b.n	80087ce <SPI_EndRxTxTransaction+0x72>
 80087ae:	697b      	ldr	r3, [r7, #20]
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <SPI_EndRxTxTransaction+0x6e>
 80087b4:	697b      	ldr	r3, [r7, #20]
 80087b6:	3b01      	subs	r3, #1
 80087b8:	617b      	str	r3, [r7, #20]
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	689b      	ldr	r3, [r3, #8]
 80087c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087c4:	2b80      	cmp	r3, #128	; 0x80
 80087c6:	d0f2      	beq.n	80087ae <SPI_EndRxTxTransaction+0x52>
 80087c8:	e000      	b.n	80087cc <SPI_EndRxTxTransaction+0x70>
 80087ca:	bf00      	nop
 80087cc:	2300      	movs	r3, #0
 80087ce:	4618      	mov	r0, r3
 80087d0:	3718      	adds	r7, #24
 80087d2:	46bd      	mov	sp, r7
 80087d4:	bd80      	pop	{r7, pc}
 80087d6:	bf00      	nop
 80087d8:	20000088 	.word	0x20000088
 80087dc:	165e9f81 	.word	0x165e9f81

080087e0 <HAL_TIM_Base_Init>:
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b082      	sub	sp, #8
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d101      	bne.n	80087f2 <HAL_TIM_Base_Init+0x12>
 80087ee:	2301      	movs	r3, #1
 80087f0:	e031      	b.n	8008856 <HAL_TIM_Base_Init+0x76>
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80087f8:	b2db      	uxtb	r3, r3
 80087fa:	2b00      	cmp	r3, #0
 80087fc:	d106      	bne.n	800880c <HAL_TIM_Base_Init+0x2c>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2200      	movs	r2, #0
 8008802:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008806:	6878      	ldr	r0, [r7, #4]
 8008808:	f7fb fd42 	bl	8004290 <HAL_TIM_Base_MspInit>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2202      	movs	r2, #2
 8008810:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681a      	ldr	r2, [r3, #0]
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	3304      	adds	r3, #4
 800881c:	4619      	mov	r1, r3
 800881e:	4610      	mov	r0, r2
 8008820:	f000 fc68 	bl	80090f4 <TIM_Base_SetConfig>
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	2201      	movs	r2, #1
 8008828:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2201      	movs	r2, #1
 8008838:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2201      	movs	r2, #1
 8008840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	2201      	movs	r2, #1
 8008848:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2201      	movs	r2, #1
 8008850:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008854:	2300      	movs	r3, #0
 8008856:	4618      	mov	r0, r3
 8008858:	3708      	adds	r7, #8
 800885a:	46bd      	mov	sp, r7
 800885c:	bd80      	pop	{r7, pc}
	...

08008860 <HAL_TIM_Base_Start_IT>:
 8008860:	b480      	push	{r7}
 8008862:	b085      	sub	sp, #20
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800886e:	b2db      	uxtb	r3, r3
 8008870:	2b01      	cmp	r3, #1
 8008872:	d001      	beq.n	8008878 <HAL_TIM_Base_Start_IT+0x18>
 8008874:	2301      	movs	r3, #1
 8008876:	e03a      	b.n	80088ee <HAL_TIM_Base_Start_IT+0x8e>
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2202      	movs	r2, #2
 800887c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f042 0201 	orr.w	r2, r2, #1
 800888e:	60da      	str	r2, [r3, #12]
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	d00e      	beq.n	80088b8 <HAL_TIM_Base_Start_IT+0x58>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	4a16      	ldr	r2, [pc, #88]	; (80088f8 <HAL_TIM_Base_Start_IT+0x98>)
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d009      	beq.n	80088b8 <HAL_TIM_Base_Start_IT+0x58>
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	681b      	ldr	r3, [r3, #0]
 80088a8:	4a14      	ldr	r2, [pc, #80]	; (80088fc <HAL_TIM_Base_Start_IT+0x9c>)
 80088aa:	4293      	cmp	r3, r2
 80088ac:	d004      	beq.n	80088b8 <HAL_TIM_Base_Start_IT+0x58>
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a13      	ldr	r2, [pc, #76]	; (8008900 <HAL_TIM_Base_Start_IT+0xa0>)
 80088b4:	4293      	cmp	r3, r2
 80088b6:	d111      	bne.n	80088dc <HAL_TIM_Base_Start_IT+0x7c>
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	689b      	ldr	r3, [r3, #8]
 80088be:	f003 0307 	and.w	r3, r3, #7
 80088c2:	60fb      	str	r3, [r7, #12]
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2b06      	cmp	r3, #6
 80088c8:	d010      	beq.n	80088ec <HAL_TIM_Base_Start_IT+0x8c>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	681b      	ldr	r3, [r3, #0]
 80088ce:	681a      	ldr	r2, [r3, #0]
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f042 0201 	orr.w	r2, r2, #1
 80088d8:	601a      	str	r2, [r3, #0]
 80088da:	e007      	b.n	80088ec <HAL_TIM_Base_Start_IT+0x8c>
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	681a      	ldr	r2, [r3, #0]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	f042 0201 	orr.w	r2, r2, #1
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	2300      	movs	r3, #0
 80088ee:	4618      	mov	r0, r3
 80088f0:	3714      	adds	r7, #20
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bc80      	pop	{r7}
 80088f6:	4770      	bx	lr
 80088f8:	40000400 	.word	0x40000400
 80088fc:	40000800 	.word	0x40000800
 8008900:	40010800 	.word	0x40010800

08008904 <HAL_TIM_OC_Init>:
 8008904:	b580      	push	{r7, lr}
 8008906:	b082      	sub	sp, #8
 8008908:	af00      	add	r7, sp, #0
 800890a:	6078      	str	r0, [r7, #4]
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d101      	bne.n	8008916 <HAL_TIM_OC_Init+0x12>
 8008912:	2301      	movs	r3, #1
 8008914:	e031      	b.n	800897a <HAL_TIM_OC_Init+0x76>
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800891c:	b2db      	uxtb	r3, r3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d106      	bne.n	8008930 <HAL_TIM_OC_Init+0x2c>
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 f829 	bl	8008982 <HAL_TIM_OC_MspInit>
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	2202      	movs	r2, #2
 8008934:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	681a      	ldr	r2, [r3, #0]
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	3304      	adds	r3, #4
 8008940:	4619      	mov	r1, r3
 8008942:	4610      	mov	r0, r2
 8008944:	f000 fbd6 	bl	80090f4 <TIM_Base_SetConfig>
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2201      	movs	r2, #1
 800894c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	2201      	movs	r2, #1
 8008954:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	2201      	movs	r2, #1
 800895c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2201      	movs	r2, #1
 8008964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	2201      	movs	r2, #1
 800896c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	2201      	movs	r2, #1
 8008974:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008978:	2300      	movs	r3, #0
 800897a:	4618      	mov	r0, r3
 800897c:	3708      	adds	r7, #8
 800897e:	46bd      	mov	sp, r7
 8008980:	bd80      	pop	{r7, pc}

08008982 <HAL_TIM_OC_MspInit>:
 8008982:	b480      	push	{r7}
 8008984:	b083      	sub	sp, #12
 8008986:	af00      	add	r7, sp, #0
 8008988:	6078      	str	r0, [r7, #4]
 800898a:	bf00      	nop
 800898c:	370c      	adds	r7, #12
 800898e:	46bd      	mov	sp, r7
 8008990:	bc80      	pop	{r7}
 8008992:	4770      	bx	lr

08008994 <HAL_TIM_PWM_Init>:
 8008994:	b580      	push	{r7, lr}
 8008996:	b082      	sub	sp, #8
 8008998:	af00      	add	r7, sp, #0
 800899a:	6078      	str	r0, [r7, #4]
 800899c:	687b      	ldr	r3, [r7, #4]
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d101      	bne.n	80089a6 <HAL_TIM_PWM_Init+0x12>
 80089a2:	2301      	movs	r3, #1
 80089a4:	e031      	b.n	8008a0a <HAL_TIM_PWM_Init+0x76>
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80089ac:	b2db      	uxtb	r3, r3
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d106      	bne.n	80089c0 <HAL_TIM_PWM_Init+0x2c>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	2200      	movs	r2, #0
 80089b6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80089ba:	6878      	ldr	r0, [r7, #4]
 80089bc:	f7fb fd0c 	bl	80043d8 <HAL_TIM_PWM_MspInit>
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	2202      	movs	r2, #2
 80089c4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80089c8:	687b      	ldr	r3, [r7, #4]
 80089ca:	681a      	ldr	r2, [r3, #0]
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	3304      	adds	r3, #4
 80089d0:	4619      	mov	r1, r3
 80089d2:	4610      	mov	r0, r2
 80089d4:	f000 fb8e 	bl	80090f4 <TIM_Base_SetConfig>
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2201      	movs	r2, #1
 80089dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	2201      	movs	r2, #1
 80089e4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	2201      	movs	r2, #1
 80089ec:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80089f0:	687b      	ldr	r3, [r7, #4]
 80089f2:	2201      	movs	r2, #1
 80089f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	2201      	movs	r2, #1
 80089fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	2201      	movs	r2, #1
 8008a04:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008a08:	2300      	movs	r3, #0
 8008a0a:	4618      	mov	r0, r3
 8008a0c:	3708      	adds	r7, #8
 8008a0e:	46bd      	mov	sp, r7
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <HAL_TIM_PWM_Start>:
 8008a14:	b580      	push	{r7, lr}
 8008a16:	b084      	sub	sp, #16
 8008a18:	af00      	add	r7, sp, #0
 8008a1a:	6078      	str	r0, [r7, #4]
 8008a1c:	6039      	str	r1, [r7, #0]
 8008a1e:	683b      	ldr	r3, [r7, #0]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d109      	bne.n	8008a38 <HAL_TIM_PWM_Start+0x24>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b01      	cmp	r3, #1
 8008a2e:	bf14      	ite	ne
 8008a30:	2301      	movne	r3, #1
 8008a32:	2300      	moveq	r3, #0
 8008a34:	b2db      	uxtb	r3, r3
 8008a36:	e022      	b.n	8008a7e <HAL_TIM_PWM_Start+0x6a>
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	d109      	bne.n	8008a52 <HAL_TIM_PWM_Start+0x3e>
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 8008a44:	b2db      	uxtb	r3, r3
 8008a46:	2b01      	cmp	r3, #1
 8008a48:	bf14      	ite	ne
 8008a4a:	2301      	movne	r3, #1
 8008a4c:	2300      	moveq	r3, #0
 8008a4e:	b2db      	uxtb	r3, r3
 8008a50:	e015      	b.n	8008a7e <HAL_TIM_PWM_Start+0x6a>
 8008a52:	683b      	ldr	r3, [r7, #0]
 8008a54:	2b08      	cmp	r3, #8
 8008a56:	d109      	bne.n	8008a6c <HAL_TIM_PWM_Start+0x58>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008a5e:	b2db      	uxtb	r3, r3
 8008a60:	2b01      	cmp	r3, #1
 8008a62:	bf14      	ite	ne
 8008a64:	2301      	movne	r3, #1
 8008a66:	2300      	moveq	r3, #0
 8008a68:	b2db      	uxtb	r3, r3
 8008a6a:	e008      	b.n	8008a7e <HAL_TIM_PWM_Start+0x6a>
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a72:	b2db      	uxtb	r3, r3
 8008a74:	2b01      	cmp	r3, #1
 8008a76:	bf14      	ite	ne
 8008a78:	2301      	movne	r3, #1
 8008a7a:	2300      	moveq	r3, #0
 8008a7c:	b2db      	uxtb	r3, r3
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	d001      	beq.n	8008a86 <HAL_TIM_PWM_Start+0x72>
 8008a82:	2301      	movs	r3, #1
 8008a84:	e051      	b.n	8008b2a <HAL_TIM_PWM_Start+0x116>
 8008a86:	683b      	ldr	r3, [r7, #0]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	d104      	bne.n	8008a96 <HAL_TIM_PWM_Start+0x82>
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	2202      	movs	r2, #2
 8008a90:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008a94:	e013      	b.n	8008abe <HAL_TIM_PWM_Start+0xaa>
 8008a96:	683b      	ldr	r3, [r7, #0]
 8008a98:	2b04      	cmp	r3, #4
 8008a9a:	d104      	bne.n	8008aa6 <HAL_TIM_PWM_Start+0x92>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2202      	movs	r2, #2
 8008aa0:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008aa4:	e00b      	b.n	8008abe <HAL_TIM_PWM_Start+0xaa>
 8008aa6:	683b      	ldr	r3, [r7, #0]
 8008aa8:	2b08      	cmp	r3, #8
 8008aaa:	d104      	bne.n	8008ab6 <HAL_TIM_PWM_Start+0xa2>
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2202      	movs	r2, #2
 8008ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008ab4:	e003      	b.n	8008abe <HAL_TIM_PWM_Start+0xaa>
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2202      	movs	r2, #2
 8008aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	2201      	movs	r2, #1
 8008ac4:	6839      	ldr	r1, [r7, #0]
 8008ac6:	4618      	mov	r0, r3
 8008ac8:	f000 fd01 	bl	80094ce <TIM_CCxChannelCmd>
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	681b      	ldr	r3, [r3, #0]
 8008ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ad4:	d00e      	beq.n	8008af4 <HAL_TIM_PWM_Start+0xe0>
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	4a16      	ldr	r2, [pc, #88]	; (8008b34 <HAL_TIM_PWM_Start+0x120>)
 8008adc:	4293      	cmp	r3, r2
 8008ade:	d009      	beq.n	8008af4 <HAL_TIM_PWM_Start+0xe0>
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	4a14      	ldr	r2, [pc, #80]	; (8008b38 <HAL_TIM_PWM_Start+0x124>)
 8008ae6:	4293      	cmp	r3, r2
 8008ae8:	d004      	beq.n	8008af4 <HAL_TIM_PWM_Start+0xe0>
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a13      	ldr	r2, [pc, #76]	; (8008b3c <HAL_TIM_PWM_Start+0x128>)
 8008af0:	4293      	cmp	r3, r2
 8008af2:	d111      	bne.n	8008b18 <HAL_TIM_PWM_Start+0x104>
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f003 0307 	and.w	r3, r3, #7
 8008afe:	60fb      	str	r3, [r7, #12]
 8008b00:	68fb      	ldr	r3, [r7, #12]
 8008b02:	2b06      	cmp	r3, #6
 8008b04:	d010      	beq.n	8008b28 <HAL_TIM_PWM_Start+0x114>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	681a      	ldr	r2, [r3, #0]
 8008b0c:	687b      	ldr	r3, [r7, #4]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	f042 0201 	orr.w	r2, r2, #1
 8008b14:	601a      	str	r2, [r3, #0]
 8008b16:	e007      	b.n	8008b28 <HAL_TIM_PWM_Start+0x114>
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	681a      	ldr	r2, [r3, #0]
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	f042 0201 	orr.w	r2, r2, #1
 8008b26:	601a      	str	r2, [r3, #0]
 8008b28:	2300      	movs	r3, #0
 8008b2a:	4618      	mov	r0, r3
 8008b2c:	3710      	adds	r7, #16
 8008b2e:	46bd      	mov	sp, r7
 8008b30:	bd80      	pop	{r7, pc}
 8008b32:	bf00      	nop
 8008b34:	40000400 	.word	0x40000400
 8008b38:	40000800 	.word	0x40000800
 8008b3c:	40010800 	.word	0x40010800

08008b40 <HAL_TIM_IRQHandler>:
 8008b40:	b580      	push	{r7, lr}
 8008b42:	b082      	sub	sp, #8
 8008b44:	af00      	add	r7, sp, #0
 8008b46:	6078      	str	r0, [r7, #4]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	691b      	ldr	r3, [r3, #16]
 8008b4e:	f003 0302 	and.w	r3, r3, #2
 8008b52:	2b02      	cmp	r3, #2
 8008b54:	d122      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x5c>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	f003 0302 	and.w	r3, r3, #2
 8008b60:	2b02      	cmp	r3, #2
 8008b62:	d11b      	bne.n	8008b9c <HAL_TIM_IRQHandler+0x5c>
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	f06f 0202 	mvn.w	r2, #2
 8008b6c:	611a      	str	r2, [r3, #16]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	2201      	movs	r2, #1
 8008b72:	761a      	strb	r2, [r3, #24]
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	f003 0303 	and.w	r3, r3, #3
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d003      	beq.n	8008b8a <HAL_TIM_IRQHandler+0x4a>
 8008b82:	6878      	ldr	r0, [r7, #4]
 8008b84:	f000 fa9b 	bl	80090be <HAL_TIM_IC_CaptureCallback>
 8008b88:	e005      	b.n	8008b96 <HAL_TIM_IRQHandler+0x56>
 8008b8a:	6878      	ldr	r0, [r7, #4]
 8008b8c:	f000 fa8e 	bl	80090ac <HAL_TIM_OC_DelayElapsedCallback>
 8008b90:	6878      	ldr	r0, [r7, #4]
 8008b92:	f000 fa9d 	bl	80090d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	2200      	movs	r2, #0
 8008b9a:	761a      	strb	r2, [r3, #24]
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	691b      	ldr	r3, [r3, #16]
 8008ba2:	f003 0304 	and.w	r3, r3, #4
 8008ba6:	2b04      	cmp	r3, #4
 8008ba8:	d122      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0xb0>
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	68db      	ldr	r3, [r3, #12]
 8008bb0:	f003 0304 	and.w	r3, r3, #4
 8008bb4:	2b04      	cmp	r3, #4
 8008bb6:	d11b      	bne.n	8008bf0 <HAL_TIM_IRQHandler+0xb0>
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	f06f 0204 	mvn.w	r2, #4
 8008bc0:	611a      	str	r2, [r3, #16]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	2202      	movs	r2, #2
 8008bc6:	761a      	strb	r2, [r3, #24]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699b      	ldr	r3, [r3, #24]
 8008bce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d003      	beq.n	8008bde <HAL_TIM_IRQHandler+0x9e>
 8008bd6:	6878      	ldr	r0, [r7, #4]
 8008bd8:	f000 fa71 	bl	80090be <HAL_TIM_IC_CaptureCallback>
 8008bdc:	e005      	b.n	8008bea <HAL_TIM_IRQHandler+0xaa>
 8008bde:	6878      	ldr	r0, [r7, #4]
 8008be0:	f000 fa64 	bl	80090ac <HAL_TIM_OC_DelayElapsedCallback>
 8008be4:	6878      	ldr	r0, [r7, #4]
 8008be6:	f000 fa73 	bl	80090d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	2200      	movs	r2, #0
 8008bee:	761a      	strb	r2, [r3, #24]
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	691b      	ldr	r3, [r3, #16]
 8008bf6:	f003 0308 	and.w	r3, r3, #8
 8008bfa:	2b08      	cmp	r3, #8
 8008bfc:	d122      	bne.n	8008c44 <HAL_TIM_IRQHandler+0x104>
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	68db      	ldr	r3, [r3, #12]
 8008c04:	f003 0308 	and.w	r3, r3, #8
 8008c08:	2b08      	cmp	r3, #8
 8008c0a:	d11b      	bne.n	8008c44 <HAL_TIM_IRQHandler+0x104>
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	681b      	ldr	r3, [r3, #0]
 8008c10:	f06f 0208 	mvn.w	r2, #8
 8008c14:	611a      	str	r2, [r3, #16]
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2204      	movs	r2, #4
 8008c1a:	761a      	strb	r2, [r3, #24]
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	69db      	ldr	r3, [r3, #28]
 8008c22:	f003 0303 	and.w	r3, r3, #3
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d003      	beq.n	8008c32 <HAL_TIM_IRQHandler+0xf2>
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 fa47 	bl	80090be <HAL_TIM_IC_CaptureCallback>
 8008c30:	e005      	b.n	8008c3e <HAL_TIM_IRQHandler+0xfe>
 8008c32:	6878      	ldr	r0, [r7, #4]
 8008c34:	f000 fa3a 	bl	80090ac <HAL_TIM_OC_DelayElapsedCallback>
 8008c38:	6878      	ldr	r0, [r7, #4]
 8008c3a:	f000 fa49 	bl	80090d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	2200      	movs	r2, #0
 8008c42:	761a      	strb	r2, [r3, #24]
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	691b      	ldr	r3, [r3, #16]
 8008c4a:	f003 0310 	and.w	r3, r3, #16
 8008c4e:	2b10      	cmp	r3, #16
 8008c50:	d122      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x158>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	68db      	ldr	r3, [r3, #12]
 8008c58:	f003 0310 	and.w	r3, r3, #16
 8008c5c:	2b10      	cmp	r3, #16
 8008c5e:	d11b      	bne.n	8008c98 <HAL_TIM_IRQHandler+0x158>
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	f06f 0210 	mvn.w	r2, #16
 8008c68:	611a      	str	r2, [r3, #16]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	2208      	movs	r2, #8
 8008c6e:	761a      	strb	r2, [r3, #24]
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	681b      	ldr	r3, [r3, #0]
 8008c74:	69db      	ldr	r3, [r3, #28]
 8008c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008c7a:	2b00      	cmp	r3, #0
 8008c7c:	d003      	beq.n	8008c86 <HAL_TIM_IRQHandler+0x146>
 8008c7e:	6878      	ldr	r0, [r7, #4]
 8008c80:	f000 fa1d 	bl	80090be <HAL_TIM_IC_CaptureCallback>
 8008c84:	e005      	b.n	8008c92 <HAL_TIM_IRQHandler+0x152>
 8008c86:	6878      	ldr	r0, [r7, #4]
 8008c88:	f000 fa10 	bl	80090ac <HAL_TIM_OC_DelayElapsedCallback>
 8008c8c:	6878      	ldr	r0, [r7, #4]
 8008c8e:	f000 fa1f 	bl	80090d0 <HAL_TIM_PWM_PulseFinishedCallback>
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	761a      	strb	r2, [r3, #24]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	691b      	ldr	r3, [r3, #16]
 8008c9e:	f003 0301 	and.w	r3, r3, #1
 8008ca2:	2b01      	cmp	r3, #1
 8008ca4:	d10e      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x184>
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	68db      	ldr	r3, [r3, #12]
 8008cac:	f003 0301 	and.w	r3, r3, #1
 8008cb0:	2b01      	cmp	r3, #1
 8008cb2:	d107      	bne.n	8008cc4 <HAL_TIM_IRQHandler+0x184>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	f06f 0201 	mvn.w	r2, #1
 8008cbc:	611a      	str	r2, [r3, #16]
 8008cbe:	6878      	ldr	r0, [r7, #4]
 8008cc0:	f7fa fd00 	bl	80036c4 <HAL_TIM_PeriodElapsedCallback>
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681b      	ldr	r3, [r3, #0]
 8008cc8:	691b      	ldr	r3, [r3, #16]
 8008cca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cce:	2b40      	cmp	r3, #64	; 0x40
 8008cd0:	d10e      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x1b0>
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	681b      	ldr	r3, [r3, #0]
 8008cd6:	68db      	ldr	r3, [r3, #12]
 8008cd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cdc:	2b40      	cmp	r3, #64	; 0x40
 8008cde:	d107      	bne.n	8008cf0 <HAL_TIM_IRQHandler+0x1b0>
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008ce8:	611a      	str	r2, [r3, #16]
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f9f9 	bl	80090e2 <HAL_TIM_TriggerCallback>
 8008cf0:	bf00      	nop
 8008cf2:	3708      	adds	r7, #8
 8008cf4:	46bd      	mov	sp, r7
 8008cf6:	bd80      	pop	{r7, pc}

08008cf8 <HAL_TIM_OC_ConfigChannel>:
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b084      	sub	sp, #16
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	60f8      	str	r0, [r7, #12]
 8008d00:	60b9      	str	r1, [r7, #8]
 8008d02:	607a      	str	r2, [r7, #4]
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008d0a:	2b01      	cmp	r3, #1
 8008d0c:	d101      	bne.n	8008d12 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008d0e:	2302      	movs	r3, #2
 8008d10:	e046      	b.n	8008da0 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2201      	movs	r2, #1
 8008d16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008d1a:	687b      	ldr	r3, [r7, #4]
 8008d1c:	2b0c      	cmp	r3, #12
 8008d1e:	d839      	bhi.n	8008d94 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008d20:	a201      	add	r2, pc, #4	; (adr r2, 8008d28 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008d22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d26:	bf00      	nop
 8008d28:	08008d5d 	.word	0x08008d5d
 8008d2c:	08008d95 	.word	0x08008d95
 8008d30:	08008d95 	.word	0x08008d95
 8008d34:	08008d95 	.word	0x08008d95
 8008d38:	08008d6b 	.word	0x08008d6b
 8008d3c:	08008d95 	.word	0x08008d95
 8008d40:	08008d95 	.word	0x08008d95
 8008d44:	08008d95 	.word	0x08008d95
 8008d48:	08008d79 	.word	0x08008d79
 8008d4c:	08008d95 	.word	0x08008d95
 8008d50:	08008d95 	.word	0x08008d95
 8008d54:	08008d95 	.word	0x08008d95
 8008d58:	08008d87 	.word	0x08008d87
 8008d5c:	68fb      	ldr	r3, [r7, #12]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	68b9      	ldr	r1, [r7, #8]
 8008d62:	4618      	mov	r0, r3
 8008d64:	f000 fa28 	bl	80091b8 <TIM_OC1_SetConfig>
 8008d68:	e015      	b.n	8008d96 <HAL_TIM_OC_ConfigChannel+0x9e>
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	68b9      	ldr	r1, [r7, #8]
 8008d70:	4618      	mov	r0, r3
 8008d72:	f000 fa5d 	bl	8009230 <TIM_OC2_SetConfig>
 8008d76:	e00e      	b.n	8008d96 <HAL_TIM_OC_ConfigChannel+0x9e>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68b9      	ldr	r1, [r7, #8]
 8008d7e:	4618      	mov	r0, r3
 8008d80:	f000 fa94 	bl	80092ac <TIM_OC3_SetConfig>
 8008d84:	e007      	b.n	8008d96 <HAL_TIM_OC_ConfigChannel+0x9e>
 8008d86:	68fb      	ldr	r3, [r7, #12]
 8008d88:	681b      	ldr	r3, [r3, #0]
 8008d8a:	68b9      	ldr	r1, [r7, #8]
 8008d8c:	4618      	mov	r0, r3
 8008d8e:	f000 faca 	bl	8009326 <TIM_OC4_SetConfig>
 8008d92:	e000      	b.n	8008d96 <HAL_TIM_OC_ConfigChannel+0x9e>
 8008d94:	bf00      	nop
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008d9e:	2300      	movs	r3, #0
 8008da0:	4618      	mov	r0, r3
 8008da2:	3710      	adds	r7, #16
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}

08008da8 <HAL_TIM_PWM_ConfigChannel>:
 8008da8:	b580      	push	{r7, lr}
 8008daa:	b084      	sub	sp, #16
 8008dac:	af00      	add	r7, sp, #0
 8008dae:	60f8      	str	r0, [r7, #12]
 8008db0:	60b9      	str	r1, [r7, #8]
 8008db2:	607a      	str	r2, [r7, #4]
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008dba:	2b01      	cmp	r3, #1
 8008dbc:	d101      	bne.n	8008dc2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008dbe:	2302      	movs	r3, #2
 8008dc0:	e0ac      	b.n	8008f1c <HAL_TIM_PWM_ConfigChannel+0x174>
 8008dc2:	68fb      	ldr	r3, [r7, #12]
 8008dc4:	2201      	movs	r2, #1
 8008dc6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	2b0c      	cmp	r3, #12
 8008dce:	f200 809f 	bhi.w	8008f10 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008dd2:	a201      	add	r2, pc, #4	; (adr r2, 8008dd8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008dd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dd8:	08008e0d 	.word	0x08008e0d
 8008ddc:	08008f11 	.word	0x08008f11
 8008de0:	08008f11 	.word	0x08008f11
 8008de4:	08008f11 	.word	0x08008f11
 8008de8:	08008e4d 	.word	0x08008e4d
 8008dec:	08008f11 	.word	0x08008f11
 8008df0:	08008f11 	.word	0x08008f11
 8008df4:	08008f11 	.word	0x08008f11
 8008df8:	08008e8f 	.word	0x08008e8f
 8008dfc:	08008f11 	.word	0x08008f11
 8008e00:	08008f11 	.word	0x08008f11
 8008e04:	08008f11 	.word	0x08008f11
 8008e08:	08008ecf 	.word	0x08008ecf
 8008e0c:	68fb      	ldr	r3, [r7, #12]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	68b9      	ldr	r1, [r7, #8]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f9d0 	bl	80091b8 <TIM_OC1_SetConfig>
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	699a      	ldr	r2, [r3, #24]
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f042 0208 	orr.w	r2, r2, #8
 8008e26:	619a      	str	r2, [r3, #24]
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	699a      	ldr	r2, [r3, #24]
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	f022 0204 	bic.w	r2, r2, #4
 8008e36:	619a      	str	r2, [r3, #24]
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	6999      	ldr	r1, [r3, #24]
 8008e3e:	68bb      	ldr	r3, [r7, #8]
 8008e40:	68da      	ldr	r2, [r3, #12]
 8008e42:	68fb      	ldr	r3, [r7, #12]
 8008e44:	681b      	ldr	r3, [r3, #0]
 8008e46:	430a      	orrs	r2, r1
 8008e48:	619a      	str	r2, [r3, #24]
 8008e4a:	e062      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	68b9      	ldr	r1, [r7, #8]
 8008e52:	4618      	mov	r0, r3
 8008e54:	f000 f9ec 	bl	8009230 <TIM_OC2_SetConfig>
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	699a      	ldr	r2, [r3, #24]
 8008e5e:	68fb      	ldr	r3, [r7, #12]
 8008e60:	681b      	ldr	r3, [r3, #0]
 8008e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008e66:	619a      	str	r2, [r3, #24]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	699a      	ldr	r2, [r3, #24]
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008e76:	619a      	str	r2, [r3, #24]
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	6999      	ldr	r1, [r3, #24]
 8008e7e:	68bb      	ldr	r3, [r7, #8]
 8008e80:	68db      	ldr	r3, [r3, #12]
 8008e82:	021a      	lsls	r2, r3, #8
 8008e84:	68fb      	ldr	r3, [r7, #12]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	430a      	orrs	r2, r1
 8008e8a:	619a      	str	r2, [r3, #24]
 8008e8c:	e041      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	68b9      	ldr	r1, [r7, #8]
 8008e94:	4618      	mov	r0, r3
 8008e96:	f000 fa09 	bl	80092ac <TIM_OC3_SetConfig>
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	681b      	ldr	r3, [r3, #0]
 8008e9e:	69da      	ldr	r2, [r3, #28]
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	f042 0208 	orr.w	r2, r2, #8
 8008ea8:	61da      	str	r2, [r3, #28]
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	69da      	ldr	r2, [r3, #28]
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	f022 0204 	bic.w	r2, r2, #4
 8008eb8:	61da      	str	r2, [r3, #28]
 8008eba:	68fb      	ldr	r3, [r7, #12]
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	69d9      	ldr	r1, [r3, #28]
 8008ec0:	68bb      	ldr	r3, [r7, #8]
 8008ec2:	68da      	ldr	r2, [r3, #12]
 8008ec4:	68fb      	ldr	r3, [r7, #12]
 8008ec6:	681b      	ldr	r3, [r3, #0]
 8008ec8:	430a      	orrs	r2, r1
 8008eca:	61da      	str	r2, [r3, #28]
 8008ecc:	e021      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	68b9      	ldr	r1, [r7, #8]
 8008ed4:	4618      	mov	r0, r3
 8008ed6:	f000 fa26 	bl	8009326 <TIM_OC4_SetConfig>
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681b      	ldr	r3, [r3, #0]
 8008ede:	69da      	ldr	r2, [r3, #28]
 8008ee0:	68fb      	ldr	r3, [r7, #12]
 8008ee2:	681b      	ldr	r3, [r3, #0]
 8008ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008ee8:	61da      	str	r2, [r3, #28]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	69da      	ldr	r2, [r3, #28]
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008ef8:	61da      	str	r2, [r3, #28]
 8008efa:	68fb      	ldr	r3, [r7, #12]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	69d9      	ldr	r1, [r3, #28]
 8008f00:	68bb      	ldr	r3, [r7, #8]
 8008f02:	68db      	ldr	r3, [r3, #12]
 8008f04:	021a      	lsls	r2, r3, #8
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	430a      	orrs	r2, r1
 8008f0c:	61da      	str	r2, [r3, #28]
 8008f0e:	e000      	b.n	8008f12 <HAL_TIM_PWM_ConfigChannel+0x16a>
 8008f10:	bf00      	nop
 8008f12:	68fb      	ldr	r3, [r7, #12]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	4618      	mov	r0, r3
 8008f1e:	3710      	adds	r7, #16
 8008f20:	46bd      	mov	sp, r7
 8008f22:	bd80      	pop	{r7, pc}

08008f24 <HAL_TIM_ConfigClockSource>:
 8008f24:	b580      	push	{r7, lr}
 8008f26:	b084      	sub	sp, #16
 8008f28:	af00      	add	r7, sp, #0
 8008f2a:	6078      	str	r0, [r7, #4]
 8008f2c:	6039      	str	r1, [r7, #0]
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008f34:	2b01      	cmp	r3, #1
 8008f36:	d101      	bne.n	8008f3c <HAL_TIM_ConfigClockSource+0x18>
 8008f38:	2302      	movs	r3, #2
 8008f3a:	e0b3      	b.n	80090a4 <HAL_TIM_ConfigClockSource+0x180>
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2201      	movs	r2, #1
 8008f40:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	2202      	movs	r2, #2
 8008f48:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	689b      	ldr	r3, [r3, #8]
 8008f52:	60fb      	str	r3, [r7, #12]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008f5a:	60fb      	str	r3, [r7, #12]
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008f62:	60fb      	str	r3, [r7, #12]
 8008f64:	687b      	ldr	r3, [r7, #4]
 8008f66:	681b      	ldr	r3, [r3, #0]
 8008f68:	68fa      	ldr	r2, [r7, #12]
 8008f6a:	609a      	str	r2, [r3, #8]
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f74:	d03e      	beq.n	8008ff4 <HAL_TIM_ConfigClockSource+0xd0>
 8008f76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008f7a:	f200 8087 	bhi.w	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008f7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f82:	f000 8085 	beq.w	8009090 <HAL_TIM_ConfigClockSource+0x16c>
 8008f86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f8a:	d87f      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008f8c:	2b70      	cmp	r3, #112	; 0x70
 8008f8e:	d01a      	beq.n	8008fc6 <HAL_TIM_ConfigClockSource+0xa2>
 8008f90:	2b70      	cmp	r3, #112	; 0x70
 8008f92:	d87b      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008f94:	2b60      	cmp	r3, #96	; 0x60
 8008f96:	d050      	beq.n	800903a <HAL_TIM_ConfigClockSource+0x116>
 8008f98:	2b60      	cmp	r3, #96	; 0x60
 8008f9a:	d877      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008f9c:	2b50      	cmp	r3, #80	; 0x50
 8008f9e:	d03c      	beq.n	800901a <HAL_TIM_ConfigClockSource+0xf6>
 8008fa0:	2b50      	cmp	r3, #80	; 0x50
 8008fa2:	d873      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008fa4:	2b40      	cmp	r3, #64	; 0x40
 8008fa6:	d058      	beq.n	800905a <HAL_TIM_ConfigClockSource+0x136>
 8008fa8:	2b40      	cmp	r3, #64	; 0x40
 8008faa:	d86f      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008fac:	2b30      	cmp	r3, #48	; 0x30
 8008fae:	d064      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x156>
 8008fb0:	2b30      	cmp	r3, #48	; 0x30
 8008fb2:	d86b      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008fb4:	2b20      	cmp	r3, #32
 8008fb6:	d060      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x156>
 8008fb8:	2b20      	cmp	r3, #32
 8008fba:	d867      	bhi.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008fbc:	2b00      	cmp	r3, #0
 8008fbe:	d05c      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x156>
 8008fc0:	2b10      	cmp	r3, #16
 8008fc2:	d05a      	beq.n	800907a <HAL_TIM_ConfigClockSource+0x156>
 8008fc4:	e062      	b.n	800908c <HAL_TIM_ConfigClockSource+0x168>
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6818      	ldr	r0, [r3, #0]
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	6899      	ldr	r1, [r3, #8]
 8008fce:	683b      	ldr	r3, [r7, #0]
 8008fd0:	685a      	ldr	r2, [r3, #4]
 8008fd2:	683b      	ldr	r3, [r7, #0]
 8008fd4:	68db      	ldr	r3, [r3, #12]
 8008fd6:	f000 fa5b 	bl	8009490 <TIM_ETR_SetConfig>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	689b      	ldr	r3, [r3, #8]
 8008fe0:	60fb      	str	r3, [r7, #12]
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008fe8:	60fb      	str	r3, [r7, #12]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	68fa      	ldr	r2, [r7, #12]
 8008ff0:	609a      	str	r2, [r3, #8]
 8008ff2:	e04e      	b.n	8009092 <HAL_TIM_ConfigClockSource+0x16e>
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	6818      	ldr	r0, [r3, #0]
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	6899      	ldr	r1, [r3, #8]
 8008ffc:	683b      	ldr	r3, [r7, #0]
 8008ffe:	685a      	ldr	r2, [r3, #4]
 8009000:	683b      	ldr	r3, [r7, #0]
 8009002:	68db      	ldr	r3, [r3, #12]
 8009004:	f000 fa44 	bl	8009490 <TIM_ETR_SetConfig>
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	689a      	ldr	r2, [r3, #8]
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009016:	609a      	str	r2, [r3, #8]
 8009018:	e03b      	b.n	8009092 <HAL_TIM_ConfigClockSource+0x16e>
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	6818      	ldr	r0, [r3, #0]
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	6859      	ldr	r1, [r3, #4]
 8009022:	683b      	ldr	r3, [r7, #0]
 8009024:	68db      	ldr	r3, [r3, #12]
 8009026:	461a      	mov	r2, r3
 8009028:	f000 f9bb 	bl	80093a2 <TIM_TI1_ConfigInputStage>
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	2150      	movs	r1, #80	; 0x50
 8009032:	4618      	mov	r0, r3
 8009034:	f000 fa12 	bl	800945c <TIM_ITRx_SetConfig>
 8009038:	e02b      	b.n	8009092 <HAL_TIM_ConfigClockSource+0x16e>
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6818      	ldr	r0, [r3, #0]
 800903e:	683b      	ldr	r3, [r7, #0]
 8009040:	6859      	ldr	r1, [r3, #4]
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	68db      	ldr	r3, [r3, #12]
 8009046:	461a      	mov	r2, r3
 8009048:	f000 f9d9 	bl	80093fe <TIM_TI2_ConfigInputStage>
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	2160      	movs	r1, #96	; 0x60
 8009052:	4618      	mov	r0, r3
 8009054:	f000 fa02 	bl	800945c <TIM_ITRx_SetConfig>
 8009058:	e01b      	b.n	8009092 <HAL_TIM_ConfigClockSource+0x16e>
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6818      	ldr	r0, [r3, #0]
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	6859      	ldr	r1, [r3, #4]
 8009062:	683b      	ldr	r3, [r7, #0]
 8009064:	68db      	ldr	r3, [r3, #12]
 8009066:	461a      	mov	r2, r3
 8009068:	f000 f99b 	bl	80093a2 <TIM_TI1_ConfigInputStage>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	2140      	movs	r1, #64	; 0x40
 8009072:	4618      	mov	r0, r3
 8009074:	f000 f9f2 	bl	800945c <TIM_ITRx_SetConfig>
 8009078:	e00b      	b.n	8009092 <HAL_TIM_ConfigClockSource+0x16e>
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	681a      	ldr	r2, [r3, #0]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4619      	mov	r1, r3
 8009084:	4610      	mov	r0, r2
 8009086:	f000 f9e9 	bl	800945c <TIM_ITRx_SetConfig>
 800908a:	e002      	b.n	8009092 <HAL_TIM_ConfigClockSource+0x16e>
 800908c:	bf00      	nop
 800908e:	e000      	b.n	8009092 <HAL_TIM_ConfigClockSource+0x16e>
 8009090:	bf00      	nop
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2201      	movs	r2, #1
 8009096:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	2200      	movs	r2, #0
 800909e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80090a2:	2300      	movs	r3, #0
 80090a4:	4618      	mov	r0, r3
 80090a6:	3710      	adds	r7, #16
 80090a8:	46bd      	mov	sp, r7
 80090aa:	bd80      	pop	{r7, pc}

080090ac <HAL_TIM_OC_DelayElapsedCallback>:
 80090ac:	b480      	push	{r7}
 80090ae:	b083      	sub	sp, #12
 80090b0:	af00      	add	r7, sp, #0
 80090b2:	6078      	str	r0, [r7, #4]
 80090b4:	bf00      	nop
 80090b6:	370c      	adds	r7, #12
 80090b8:	46bd      	mov	sp, r7
 80090ba:	bc80      	pop	{r7}
 80090bc:	4770      	bx	lr

080090be <HAL_TIM_IC_CaptureCallback>:
 80090be:	b480      	push	{r7}
 80090c0:	b083      	sub	sp, #12
 80090c2:	af00      	add	r7, sp, #0
 80090c4:	6078      	str	r0, [r7, #4]
 80090c6:	bf00      	nop
 80090c8:	370c      	adds	r7, #12
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bc80      	pop	{r7}
 80090ce:	4770      	bx	lr

080090d0 <HAL_TIM_PWM_PulseFinishedCallback>:
 80090d0:	b480      	push	{r7}
 80090d2:	b083      	sub	sp, #12
 80090d4:	af00      	add	r7, sp, #0
 80090d6:	6078      	str	r0, [r7, #4]
 80090d8:	bf00      	nop
 80090da:	370c      	adds	r7, #12
 80090dc:	46bd      	mov	sp, r7
 80090de:	bc80      	pop	{r7}
 80090e0:	4770      	bx	lr

080090e2 <HAL_TIM_TriggerCallback>:
 80090e2:	b480      	push	{r7}
 80090e4:	b083      	sub	sp, #12
 80090e6:	af00      	add	r7, sp, #0
 80090e8:	6078      	str	r0, [r7, #4]
 80090ea:	bf00      	nop
 80090ec:	370c      	adds	r7, #12
 80090ee:	46bd      	mov	sp, r7
 80090f0:	bc80      	pop	{r7}
 80090f2:	4770      	bx	lr

080090f4 <TIM_Base_SetConfig>:
 80090f4:	b480      	push	{r7}
 80090f6:	b085      	sub	sp, #20
 80090f8:	af00      	add	r7, sp, #0
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	6039      	str	r1, [r7, #0]
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	60fb      	str	r3, [r7, #12]
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800910a:	d007      	beq.n	800911c <TIM_Base_SetConfig+0x28>
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	4a25      	ldr	r2, [pc, #148]	; (80091a4 <TIM_Base_SetConfig+0xb0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d003      	beq.n	800911c <TIM_Base_SetConfig+0x28>
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	4a24      	ldr	r2, [pc, #144]	; (80091a8 <TIM_Base_SetConfig+0xb4>)
 8009118:	4293      	cmp	r3, r2
 800911a:	d108      	bne.n	800912e <TIM_Base_SetConfig+0x3a>
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009122:	60fb      	str	r3, [r7, #12]
 8009124:	683b      	ldr	r3, [r7, #0]
 8009126:	685b      	ldr	r3, [r3, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	4313      	orrs	r3, r2
 800912c:	60fb      	str	r3, [r7, #12]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009134:	d013      	beq.n	800915e <TIM_Base_SetConfig+0x6a>
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	4a1a      	ldr	r2, [pc, #104]	; (80091a4 <TIM_Base_SetConfig+0xb0>)
 800913a:	4293      	cmp	r3, r2
 800913c:	d00f      	beq.n	800915e <TIM_Base_SetConfig+0x6a>
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	4a19      	ldr	r2, [pc, #100]	; (80091a8 <TIM_Base_SetConfig+0xb4>)
 8009142:	4293      	cmp	r3, r2
 8009144:	d00b      	beq.n	800915e <TIM_Base_SetConfig+0x6a>
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	4a18      	ldr	r2, [pc, #96]	; (80091ac <TIM_Base_SetConfig+0xb8>)
 800914a:	4293      	cmp	r3, r2
 800914c:	d007      	beq.n	800915e <TIM_Base_SetConfig+0x6a>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	4a17      	ldr	r2, [pc, #92]	; (80091b0 <TIM_Base_SetConfig+0xbc>)
 8009152:	4293      	cmp	r3, r2
 8009154:	d003      	beq.n	800915e <TIM_Base_SetConfig+0x6a>
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	4a16      	ldr	r2, [pc, #88]	; (80091b4 <TIM_Base_SetConfig+0xc0>)
 800915a:	4293      	cmp	r3, r2
 800915c:	d108      	bne.n	8009170 <TIM_Base_SetConfig+0x7c>
 800915e:	68fb      	ldr	r3, [r7, #12]
 8009160:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009164:	60fb      	str	r3, [r7, #12]
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	68db      	ldr	r3, [r3, #12]
 800916a:	68fa      	ldr	r2, [r7, #12]
 800916c:	4313      	orrs	r3, r2
 800916e:	60fb      	str	r3, [r7, #12]
 8009170:	68fb      	ldr	r3, [r7, #12]
 8009172:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009176:	683b      	ldr	r3, [r7, #0]
 8009178:	691b      	ldr	r3, [r3, #16]
 800917a:	4313      	orrs	r3, r2
 800917c:	60fb      	str	r3, [r7, #12]
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	68fa      	ldr	r2, [r7, #12]
 8009182:	601a      	str	r2, [r3, #0]
 8009184:	683b      	ldr	r3, [r7, #0]
 8009186:	689a      	ldr	r2, [r3, #8]
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	62da      	str	r2, [r3, #44]	; 0x2c
 800918c:	683b      	ldr	r3, [r7, #0]
 800918e:	681a      	ldr	r2, [r3, #0]
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	629a      	str	r2, [r3, #40]	; 0x28
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	2201      	movs	r2, #1
 8009198:	615a      	str	r2, [r3, #20]
 800919a:	bf00      	nop
 800919c:	3714      	adds	r7, #20
 800919e:	46bd      	mov	sp, r7
 80091a0:	bc80      	pop	{r7}
 80091a2:	4770      	bx	lr
 80091a4:	40000400 	.word	0x40000400
 80091a8:	40000800 	.word	0x40000800
 80091ac:	40010800 	.word	0x40010800
 80091b0:	40010c00 	.word	0x40010c00
 80091b4:	40011000 	.word	0x40011000

080091b8 <TIM_OC1_SetConfig>:
 80091b8:	b480      	push	{r7}
 80091ba:	b087      	sub	sp, #28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
 80091c0:	6039      	str	r1, [r7, #0]
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	6a1b      	ldr	r3, [r3, #32]
 80091c6:	f023 0201 	bic.w	r2, r3, #1
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	621a      	str	r2, [r3, #32]
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a1b      	ldr	r3, [r3, #32]
 80091d2:	617b      	str	r3, [r7, #20]
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	685b      	ldr	r3, [r3, #4]
 80091d8:	613b      	str	r3, [r7, #16]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	699b      	ldr	r3, [r3, #24]
 80091de:	60fb      	str	r3, [r7, #12]
 80091e0:	68fb      	ldr	r3, [r7, #12]
 80091e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091e6:	60fb      	str	r3, [r7, #12]
 80091e8:	68fb      	ldr	r3, [r7, #12]
 80091ea:	f023 0303 	bic.w	r3, r3, #3
 80091ee:	60fb      	str	r3, [r7, #12]
 80091f0:	683b      	ldr	r3, [r7, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	4313      	orrs	r3, r2
 80091f8:	60fb      	str	r3, [r7, #12]
 80091fa:	697b      	ldr	r3, [r7, #20]
 80091fc:	f023 0302 	bic.w	r3, r3, #2
 8009200:	617b      	str	r3, [r7, #20]
 8009202:	683b      	ldr	r3, [r7, #0]
 8009204:	689b      	ldr	r3, [r3, #8]
 8009206:	697a      	ldr	r2, [r7, #20]
 8009208:	4313      	orrs	r3, r2
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	693a      	ldr	r2, [r7, #16]
 8009210:	605a      	str	r2, [r3, #4]
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	68fa      	ldr	r2, [r7, #12]
 8009216:	619a      	str	r2, [r3, #24]
 8009218:	683b      	ldr	r3, [r7, #0]
 800921a:	685a      	ldr	r2, [r3, #4]
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	635a      	str	r2, [r3, #52]	; 0x34
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	697a      	ldr	r2, [r7, #20]
 8009224:	621a      	str	r2, [r3, #32]
 8009226:	bf00      	nop
 8009228:	371c      	adds	r7, #28
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr

08009230 <TIM_OC2_SetConfig>:
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	6078      	str	r0, [r7, #4]
 8009238:	6039      	str	r1, [r7, #0]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6a1b      	ldr	r3, [r3, #32]
 800923e:	f023 0210 	bic.w	r2, r3, #16
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	621a      	str	r2, [r3, #32]
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	6a1b      	ldr	r3, [r3, #32]
 800924a:	617b      	str	r3, [r7, #20]
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	685b      	ldr	r3, [r3, #4]
 8009250:	613b      	str	r3, [r7, #16]
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	699b      	ldr	r3, [r3, #24]
 8009256:	60fb      	str	r3, [r7, #12]
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800925e:	60fb      	str	r3, [r7, #12]
 8009260:	68fb      	ldr	r3, [r7, #12]
 8009262:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009266:	60fb      	str	r3, [r7, #12]
 8009268:	683b      	ldr	r3, [r7, #0]
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	021b      	lsls	r3, r3, #8
 800926e:	68fa      	ldr	r2, [r7, #12]
 8009270:	4313      	orrs	r3, r2
 8009272:	60fb      	str	r3, [r7, #12]
 8009274:	697b      	ldr	r3, [r7, #20]
 8009276:	f023 0320 	bic.w	r3, r3, #32
 800927a:	617b      	str	r3, [r7, #20]
 800927c:	683b      	ldr	r3, [r7, #0]
 800927e:	689b      	ldr	r3, [r3, #8]
 8009280:	011b      	lsls	r3, r3, #4
 8009282:	697a      	ldr	r2, [r7, #20]
 8009284:	4313      	orrs	r3, r2
 8009286:	617b      	str	r3, [r7, #20]
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	693a      	ldr	r2, [r7, #16]
 800928c:	605a      	str	r2, [r3, #4]
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	68fa      	ldr	r2, [r7, #12]
 8009292:	619a      	str	r2, [r3, #24]
 8009294:	683b      	ldr	r3, [r7, #0]
 8009296:	685a      	ldr	r2, [r3, #4]
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	639a      	str	r2, [r3, #56]	; 0x38
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	697a      	ldr	r2, [r7, #20]
 80092a0:	621a      	str	r2, [r3, #32]
 80092a2:	bf00      	nop
 80092a4:	371c      	adds	r7, #28
 80092a6:	46bd      	mov	sp, r7
 80092a8:	bc80      	pop	{r7}
 80092aa:	4770      	bx	lr

080092ac <TIM_OC3_SetConfig>:
 80092ac:	b480      	push	{r7}
 80092ae:	b087      	sub	sp, #28
 80092b0:	af00      	add	r7, sp, #0
 80092b2:	6078      	str	r0, [r7, #4]
 80092b4:	6039      	str	r1, [r7, #0]
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6a1b      	ldr	r3, [r3, #32]
 80092ba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	621a      	str	r2, [r3, #32]
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	6a1b      	ldr	r3, [r3, #32]
 80092c6:	617b      	str	r3, [r7, #20]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	613b      	str	r3, [r7, #16]
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	60fb      	str	r3, [r7, #12]
 80092d4:	68fb      	ldr	r3, [r7, #12]
 80092d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092da:	60fb      	str	r3, [r7, #12]
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	f023 0303 	bic.w	r3, r3, #3
 80092e2:	60fb      	str	r3, [r7, #12]
 80092e4:	683b      	ldr	r3, [r7, #0]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	68fa      	ldr	r2, [r7, #12]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	60fb      	str	r3, [r7, #12]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80092f4:	617b      	str	r3, [r7, #20]
 80092f6:	683b      	ldr	r3, [r7, #0]
 80092f8:	689b      	ldr	r3, [r3, #8]
 80092fa:	021b      	lsls	r3, r3, #8
 80092fc:	697a      	ldr	r2, [r7, #20]
 80092fe:	4313      	orrs	r3, r2
 8009300:	617b      	str	r3, [r7, #20]
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	693a      	ldr	r2, [r7, #16]
 8009306:	605a      	str	r2, [r3, #4]
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	68fa      	ldr	r2, [r7, #12]
 800930c:	61da      	str	r2, [r3, #28]
 800930e:	683b      	ldr	r3, [r7, #0]
 8009310:	685a      	ldr	r2, [r3, #4]
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	63da      	str	r2, [r3, #60]	; 0x3c
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	697a      	ldr	r2, [r7, #20]
 800931a:	621a      	str	r2, [r3, #32]
 800931c:	bf00      	nop
 800931e:	371c      	adds	r7, #28
 8009320:	46bd      	mov	sp, r7
 8009322:	bc80      	pop	{r7}
 8009324:	4770      	bx	lr

08009326 <TIM_OC4_SetConfig>:
 8009326:	b480      	push	{r7}
 8009328:	b087      	sub	sp, #28
 800932a:	af00      	add	r7, sp, #0
 800932c:	6078      	str	r0, [r7, #4]
 800932e:	6039      	str	r1, [r7, #0]
 8009330:	687b      	ldr	r3, [r7, #4]
 8009332:	6a1b      	ldr	r3, [r3, #32]
 8009334:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	621a      	str	r2, [r3, #32]
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6a1b      	ldr	r3, [r3, #32]
 8009340:	617b      	str	r3, [r7, #20]
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	685b      	ldr	r3, [r3, #4]
 8009346:	613b      	str	r3, [r7, #16]
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	69db      	ldr	r3, [r3, #28]
 800934c:	60fb      	str	r3, [r7, #12]
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009354:	60fb      	str	r3, [r7, #12]
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800935c:	60fb      	str	r3, [r7, #12]
 800935e:	683b      	ldr	r3, [r7, #0]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	021b      	lsls	r3, r3, #8
 8009364:	68fa      	ldr	r2, [r7, #12]
 8009366:	4313      	orrs	r3, r2
 8009368:	60fb      	str	r3, [r7, #12]
 800936a:	697b      	ldr	r3, [r7, #20]
 800936c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009370:	617b      	str	r3, [r7, #20]
 8009372:	683b      	ldr	r3, [r7, #0]
 8009374:	689b      	ldr	r3, [r3, #8]
 8009376:	031b      	lsls	r3, r3, #12
 8009378:	697a      	ldr	r2, [r7, #20]
 800937a:	4313      	orrs	r3, r2
 800937c:	617b      	str	r3, [r7, #20]
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	693a      	ldr	r2, [r7, #16]
 8009382:	605a      	str	r2, [r3, #4]
 8009384:	687b      	ldr	r3, [r7, #4]
 8009386:	68fa      	ldr	r2, [r7, #12]
 8009388:	61da      	str	r2, [r3, #28]
 800938a:	683b      	ldr	r3, [r7, #0]
 800938c:	685a      	ldr	r2, [r3, #4]
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	641a      	str	r2, [r3, #64]	; 0x40
 8009392:	687b      	ldr	r3, [r7, #4]
 8009394:	697a      	ldr	r2, [r7, #20]
 8009396:	621a      	str	r2, [r3, #32]
 8009398:	bf00      	nop
 800939a:	371c      	adds	r7, #28
 800939c:	46bd      	mov	sp, r7
 800939e:	bc80      	pop	{r7}
 80093a0:	4770      	bx	lr

080093a2 <TIM_TI1_ConfigInputStage>:
 80093a2:	b480      	push	{r7}
 80093a4:	b087      	sub	sp, #28
 80093a6:	af00      	add	r7, sp, #0
 80093a8:	60f8      	str	r0, [r7, #12]
 80093aa:	60b9      	str	r1, [r7, #8]
 80093ac:	607a      	str	r2, [r7, #4]
 80093ae:	68fb      	ldr	r3, [r7, #12]
 80093b0:	6a1b      	ldr	r3, [r3, #32]
 80093b2:	617b      	str	r3, [r7, #20]
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	6a1b      	ldr	r3, [r3, #32]
 80093b8:	f023 0201 	bic.w	r2, r3, #1
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	621a      	str	r2, [r3, #32]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	699b      	ldr	r3, [r3, #24]
 80093c4:	613b      	str	r3, [r7, #16]
 80093c6:	693b      	ldr	r3, [r7, #16]
 80093c8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80093cc:	613b      	str	r3, [r7, #16]
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	011b      	lsls	r3, r3, #4
 80093d2:	693a      	ldr	r2, [r7, #16]
 80093d4:	4313      	orrs	r3, r2
 80093d6:	613b      	str	r3, [r7, #16]
 80093d8:	697b      	ldr	r3, [r7, #20]
 80093da:	f023 030a 	bic.w	r3, r3, #10
 80093de:	617b      	str	r3, [r7, #20]
 80093e0:	697a      	ldr	r2, [r7, #20]
 80093e2:	68bb      	ldr	r3, [r7, #8]
 80093e4:	4313      	orrs	r3, r2
 80093e6:	617b      	str	r3, [r7, #20]
 80093e8:	68fb      	ldr	r3, [r7, #12]
 80093ea:	693a      	ldr	r2, [r7, #16]
 80093ec:	619a      	str	r2, [r3, #24]
 80093ee:	68fb      	ldr	r3, [r7, #12]
 80093f0:	697a      	ldr	r2, [r7, #20]
 80093f2:	621a      	str	r2, [r3, #32]
 80093f4:	bf00      	nop
 80093f6:	371c      	adds	r7, #28
 80093f8:	46bd      	mov	sp, r7
 80093fa:	bc80      	pop	{r7}
 80093fc:	4770      	bx	lr

080093fe <TIM_TI2_ConfigInputStage>:
 80093fe:	b480      	push	{r7}
 8009400:	b087      	sub	sp, #28
 8009402:	af00      	add	r7, sp, #0
 8009404:	60f8      	str	r0, [r7, #12]
 8009406:	60b9      	str	r1, [r7, #8]
 8009408:	607a      	str	r2, [r7, #4]
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	6a1b      	ldr	r3, [r3, #32]
 800940e:	f023 0210 	bic.w	r2, r3, #16
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	621a      	str	r2, [r3, #32]
 8009416:	68fb      	ldr	r3, [r7, #12]
 8009418:	699b      	ldr	r3, [r3, #24]
 800941a:	617b      	str	r3, [r7, #20]
 800941c:	68fb      	ldr	r3, [r7, #12]
 800941e:	6a1b      	ldr	r3, [r3, #32]
 8009420:	613b      	str	r3, [r7, #16]
 8009422:	697b      	ldr	r3, [r7, #20]
 8009424:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009428:	617b      	str	r3, [r7, #20]
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	031b      	lsls	r3, r3, #12
 800942e:	697a      	ldr	r2, [r7, #20]
 8009430:	4313      	orrs	r3, r2
 8009432:	617b      	str	r3, [r7, #20]
 8009434:	693b      	ldr	r3, [r7, #16]
 8009436:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800943a:	613b      	str	r3, [r7, #16]
 800943c:	68bb      	ldr	r3, [r7, #8]
 800943e:	011b      	lsls	r3, r3, #4
 8009440:	693a      	ldr	r2, [r7, #16]
 8009442:	4313      	orrs	r3, r2
 8009444:	613b      	str	r3, [r7, #16]
 8009446:	68fb      	ldr	r3, [r7, #12]
 8009448:	697a      	ldr	r2, [r7, #20]
 800944a:	619a      	str	r2, [r3, #24]
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	693a      	ldr	r2, [r7, #16]
 8009450:	621a      	str	r2, [r3, #32]
 8009452:	bf00      	nop
 8009454:	371c      	adds	r7, #28
 8009456:	46bd      	mov	sp, r7
 8009458:	bc80      	pop	{r7}
 800945a:	4770      	bx	lr

0800945c <TIM_ITRx_SetConfig>:
 800945c:	b480      	push	{r7}
 800945e:	b085      	sub	sp, #20
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
 8009464:	6039      	str	r1, [r7, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	689b      	ldr	r3, [r3, #8]
 800946a:	60fb      	str	r3, [r7, #12]
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009472:	60fb      	str	r3, [r7, #12]
 8009474:	683a      	ldr	r2, [r7, #0]
 8009476:	68fb      	ldr	r3, [r7, #12]
 8009478:	4313      	orrs	r3, r2
 800947a:	f043 0307 	orr.w	r3, r3, #7
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	687b      	ldr	r3, [r7, #4]
 8009482:	68fa      	ldr	r2, [r7, #12]
 8009484:	609a      	str	r2, [r3, #8]
 8009486:	bf00      	nop
 8009488:	3714      	adds	r7, #20
 800948a:	46bd      	mov	sp, r7
 800948c:	bc80      	pop	{r7}
 800948e:	4770      	bx	lr

08009490 <TIM_ETR_SetConfig>:
 8009490:	b480      	push	{r7}
 8009492:	b087      	sub	sp, #28
 8009494:	af00      	add	r7, sp, #0
 8009496:	60f8      	str	r0, [r7, #12]
 8009498:	60b9      	str	r1, [r7, #8]
 800949a:	607a      	str	r2, [r7, #4]
 800949c:	603b      	str	r3, [r7, #0]
 800949e:	68fb      	ldr	r3, [r7, #12]
 80094a0:	689b      	ldr	r3, [r3, #8]
 80094a2:	617b      	str	r3, [r7, #20]
 80094a4:	697b      	ldr	r3, [r7, #20]
 80094a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	683b      	ldr	r3, [r7, #0]
 80094ae:	021a      	lsls	r2, r3, #8
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	431a      	orrs	r2, r3
 80094b4:	68bb      	ldr	r3, [r7, #8]
 80094b6:	4313      	orrs	r3, r2
 80094b8:	697a      	ldr	r2, [r7, #20]
 80094ba:	4313      	orrs	r3, r2
 80094bc:	617b      	str	r3, [r7, #20]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	697a      	ldr	r2, [r7, #20]
 80094c2:	609a      	str	r2, [r3, #8]
 80094c4:	bf00      	nop
 80094c6:	371c      	adds	r7, #28
 80094c8:	46bd      	mov	sp, r7
 80094ca:	bc80      	pop	{r7}
 80094cc:	4770      	bx	lr

080094ce <TIM_CCxChannelCmd>:
 80094ce:	b480      	push	{r7}
 80094d0:	b087      	sub	sp, #28
 80094d2:	af00      	add	r7, sp, #0
 80094d4:	60f8      	str	r0, [r7, #12]
 80094d6:	60b9      	str	r1, [r7, #8]
 80094d8:	607a      	str	r2, [r7, #4]
 80094da:	68bb      	ldr	r3, [r7, #8]
 80094dc:	f003 031f 	and.w	r3, r3, #31
 80094e0:	2201      	movs	r2, #1
 80094e2:	fa02 f303 	lsl.w	r3, r2, r3
 80094e6:	617b      	str	r3, [r7, #20]
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	6a1a      	ldr	r2, [r3, #32]
 80094ec:	697b      	ldr	r3, [r7, #20]
 80094ee:	43db      	mvns	r3, r3
 80094f0:	401a      	ands	r2, r3
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	621a      	str	r2, [r3, #32]
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	6a1a      	ldr	r2, [r3, #32]
 80094fa:	68bb      	ldr	r3, [r7, #8]
 80094fc:	f003 031f 	and.w	r3, r3, #31
 8009500:	6879      	ldr	r1, [r7, #4]
 8009502:	fa01 f303 	lsl.w	r3, r1, r3
 8009506:	431a      	orrs	r2, r3
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	621a      	str	r2, [r3, #32]
 800950c:	bf00      	nop
 800950e:	371c      	adds	r7, #28
 8009510:	46bd      	mov	sp, r7
 8009512:	bc80      	pop	{r7}
 8009514:	4770      	bx	lr
	...

08009518 <HAL_TIMEx_MasterConfigSynchronization>:
 8009518:	b480      	push	{r7}
 800951a:	b085      	sub	sp, #20
 800951c:	af00      	add	r7, sp, #0
 800951e:	6078      	str	r0, [r7, #4]
 8009520:	6039      	str	r1, [r7, #0]
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8009528:	2b01      	cmp	r3, #1
 800952a:	d101      	bne.n	8009530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800952c:	2302      	movs	r3, #2
 800952e:	e046      	b.n	80095be <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	2201      	movs	r2, #1
 8009534:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	2202      	movs	r2, #2
 800953c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	685b      	ldr	r3, [r3, #4]
 8009546:	60fb      	str	r3, [r7, #12]
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	689b      	ldr	r3, [r3, #8]
 800954e:	60bb      	str	r3, [r7, #8]
 8009550:	68fb      	ldr	r3, [r7, #12]
 8009552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009556:	60fb      	str	r3, [r7, #12]
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	681b      	ldr	r3, [r3, #0]
 800955c:	68fa      	ldr	r2, [r7, #12]
 800955e:	4313      	orrs	r3, r2
 8009560:	60fb      	str	r3, [r7, #12]
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	68fa      	ldr	r2, [r7, #12]
 8009568:	605a      	str	r2, [r3, #4]
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009572:	d00e      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	4a13      	ldr	r2, [pc, #76]	; (80095c8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800957a:	4293      	cmp	r3, r2
 800957c:	d009      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	681b      	ldr	r3, [r3, #0]
 8009582:	4a12      	ldr	r2, [pc, #72]	; (80095cc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009584:	4293      	cmp	r3, r2
 8009586:	d004      	beq.n	8009592 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	4a10      	ldr	r2, [pc, #64]	; (80095d0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800958e:	4293      	cmp	r3, r2
 8009590:	d10c      	bne.n	80095ac <HAL_TIMEx_MasterConfigSynchronization+0x94>
 8009592:	68bb      	ldr	r3, [r7, #8]
 8009594:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009598:	60bb      	str	r3, [r7, #8]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	685b      	ldr	r3, [r3, #4]
 800959e:	68ba      	ldr	r2, [r7, #8]
 80095a0:	4313      	orrs	r3, r2
 80095a2:	60bb      	str	r3, [r7, #8]
 80095a4:	687b      	ldr	r3, [r7, #4]
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	68ba      	ldr	r2, [r7, #8]
 80095aa:	609a      	str	r2, [r3, #8]
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2201      	movs	r2, #1
 80095b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2200      	movs	r2, #0
 80095b8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
 80095bc:	2300      	movs	r3, #0
 80095be:	4618      	mov	r0, r3
 80095c0:	3714      	adds	r7, #20
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bc80      	pop	{r7}
 80095c6:	4770      	bx	lr
 80095c8:	40000400 	.word	0x40000400
 80095cc:	40000800 	.word	0x40000800
 80095d0:	40010800 	.word	0x40010800

080095d4 <USB_EnableGlobalInt>:
 80095d4:	b480      	push	{r7}
 80095d6:	b085      	sub	sp, #20
 80095d8:	af00      	add	r7, sp, #0
 80095da:	6078      	str	r0, [r7, #4]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	2200      	movs	r2, #0
 80095e0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 80095e4:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80095e8:	60fb      	str	r3, [r7, #12]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	b29a      	uxth	r2, r3
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 80095f4:	2300      	movs	r3, #0
 80095f6:	4618      	mov	r0, r3
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	bc80      	pop	{r7}
 80095fe:	4770      	bx	lr

08009600 <USB_DisableGlobalInt>:
 8009600:	b480      	push	{r7}
 8009602:	b085      	sub	sp, #20
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
 8009608:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 800960c:	60fb      	str	r3, [r7, #12]
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8009614:	b29a      	uxth	r2, r3
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	b29b      	uxth	r3, r3
 800961a:	43db      	mvns	r3, r3
 800961c:	b29b      	uxth	r3, r3
 800961e:	4013      	ands	r3, r2
 8009620:	b29a      	uxth	r2, r3
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009628:	2300      	movs	r3, #0
 800962a:	4618      	mov	r0, r3
 800962c:	3714      	adds	r7, #20
 800962e:	46bd      	mov	sp, r7
 8009630:	bc80      	pop	{r7}
 8009632:	4770      	bx	lr

08009634 <USB_DevInit>:
 8009634:	b084      	sub	sp, #16
 8009636:	b480      	push	{r7}
 8009638:	b083      	sub	sp, #12
 800963a:	af00      	add	r7, sp, #0
 800963c:	6078      	str	r0, [r7, #4]
 800963e:	f107 0014 	add.w	r0, r7, #20
 8009642:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2201      	movs	r2, #1
 800964a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	2200      	movs	r2, #0
 8009652:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2200      	movs	r2, #0
 800965a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	2200      	movs	r2, #0
 8009662:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
 8009666:	2300      	movs	r3, #0
 8009668:	4618      	mov	r0, r3
 800966a:	370c      	adds	r7, #12
 800966c:	46bd      	mov	sp, r7
 800966e:	bc80      	pop	{r7}
 8009670:	b004      	add	sp, #16
 8009672:	4770      	bx	lr

08009674 <USB_ActivateEndpoint>:
 8009674:	b480      	push	{r7}
 8009676:	b09b      	sub	sp, #108	; 0x6c
 8009678:	af00      	add	r7, sp, #0
 800967a:	6078      	str	r0, [r7, #4]
 800967c:	6039      	str	r1, [r7, #0]
 800967e:	2300      	movs	r3, #0
 8009680:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8009684:	687a      	ldr	r2, [r7, #4]
 8009686:	683b      	ldr	r3, [r7, #0]
 8009688:	781b      	ldrb	r3, [r3, #0]
 800968a:	009b      	lsls	r3, r3, #2
 800968c:	4413      	add	r3, r2
 800968e:	881b      	ldrh	r3, [r3, #0]
 8009690:	b29b      	uxth	r3, r3
 8009692:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009696:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800969a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 800969e:	683b      	ldr	r3, [r7, #0]
 80096a0:	78db      	ldrb	r3, [r3, #3]
 80096a2:	2b03      	cmp	r3, #3
 80096a4:	d81f      	bhi.n	80096e6 <USB_ActivateEndpoint+0x72>
 80096a6:	a201      	add	r2, pc, #4	; (adr r2, 80096ac <USB_ActivateEndpoint+0x38>)
 80096a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096ac:	080096bd 	.word	0x080096bd
 80096b0:	080096d9 	.word	0x080096d9
 80096b4:	080096ef 	.word	0x080096ef
 80096b8:	080096cb 	.word	0x080096cb
 80096bc:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80096c0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80096c4:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80096c8:	e012      	b.n	80096f0 <USB_ActivateEndpoint+0x7c>
 80096ca:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80096ce:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 80096d2:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80096d6:	e00b      	b.n	80096f0 <USB_ActivateEndpoint+0x7c>
 80096d8:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80096dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80096e0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
 80096e4:	e004      	b.n	80096f0 <USB_ActivateEndpoint+0x7c>
 80096e6:	2301      	movs	r3, #1
 80096e8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80096ec:	e000      	b.n	80096f0 <USB_ActivateEndpoint+0x7c>
 80096ee:	bf00      	nop
 80096f0:	687a      	ldr	r2, [r7, #4]
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	781b      	ldrb	r3, [r3, #0]
 80096f6:	009b      	lsls	r3, r3, #2
 80096f8:	441a      	add	r2, r3
 80096fa:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 80096fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009702:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009706:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800970a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800970e:	b29b      	uxth	r3, r3
 8009710:	8013      	strh	r3, [r2, #0]
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009728:	b29a      	uxth	r2, r3
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	b29b      	uxth	r3, r3
 8009730:	4313      	orrs	r3, r2
 8009732:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 8009736:	687a      	ldr	r2, [r7, #4]
 8009738:	683b      	ldr	r3, [r7, #0]
 800973a:	781b      	ldrb	r3, [r3, #0]
 800973c:	009b      	lsls	r3, r3, #2
 800973e:	441a      	add	r2, r3
 8009740:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 8009744:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009748:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800974c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009750:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009754:	b29b      	uxth	r3, r3
 8009756:	8013      	strh	r3, [r2, #0]
 8009758:	683b      	ldr	r3, [r7, #0]
 800975a:	7b1b      	ldrb	r3, [r3, #12]
 800975c:	2b00      	cmp	r3, #0
 800975e:	f040 8149 	bne.w	80099f4 <USB_ActivateEndpoint+0x380>
 8009762:	683b      	ldr	r3, [r7, #0]
 8009764:	785b      	ldrb	r3, [r3, #1]
 8009766:	2b00      	cmp	r3, #0
 8009768:	f000 8084 	beq.w	8009874 <USB_ActivateEndpoint+0x200>
 800976c:	687b      	ldr	r3, [r7, #4]
 800976e:	617b      	str	r3, [r7, #20]
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009776:	b29b      	uxth	r3, r3
 8009778:	461a      	mov	r2, r3
 800977a:	697b      	ldr	r3, [r7, #20]
 800977c:	4413      	add	r3, r2
 800977e:	617b      	str	r3, [r7, #20]
 8009780:	683b      	ldr	r3, [r7, #0]
 8009782:	781b      	ldrb	r3, [r3, #0]
 8009784:	011a      	lsls	r2, r3, #4
 8009786:	697b      	ldr	r3, [r7, #20]
 8009788:	4413      	add	r3, r2
 800978a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800978e:	613b      	str	r3, [r7, #16]
 8009790:	683b      	ldr	r3, [r7, #0]
 8009792:	88db      	ldrh	r3, [r3, #6]
 8009794:	085b      	lsrs	r3, r3, #1
 8009796:	b29b      	uxth	r3, r3
 8009798:	005b      	lsls	r3, r3, #1
 800979a:	b29a      	uxth	r2, r3
 800979c:	693b      	ldr	r3, [r7, #16]
 800979e:	801a      	strh	r2, [r3, #0]
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	683b      	ldr	r3, [r7, #0]
 80097a4:	781b      	ldrb	r3, [r3, #0]
 80097a6:	009b      	lsls	r3, r3, #2
 80097a8:	4413      	add	r3, r2
 80097aa:	881b      	ldrh	r3, [r3, #0]
 80097ac:	81fb      	strh	r3, [r7, #14]
 80097ae:	89fb      	ldrh	r3, [r7, #14]
 80097b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d01b      	beq.n	80097f0 <USB_ActivateEndpoint+0x17c>
 80097b8:	687a      	ldr	r2, [r7, #4]
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	781b      	ldrb	r3, [r3, #0]
 80097be:	009b      	lsls	r3, r3, #2
 80097c0:	4413      	add	r3, r2
 80097c2:	881b      	ldrh	r3, [r3, #0]
 80097c4:	b29b      	uxth	r3, r3
 80097c6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097ce:	81bb      	strh	r3, [r7, #12]
 80097d0:	687a      	ldr	r2, [r7, #4]
 80097d2:	683b      	ldr	r3, [r7, #0]
 80097d4:	781b      	ldrb	r3, [r3, #0]
 80097d6:	009b      	lsls	r3, r3, #2
 80097d8:	441a      	add	r2, r3
 80097da:	89bb      	ldrh	r3, [r7, #12]
 80097dc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097e0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80097e8:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80097ec:	b29b      	uxth	r3, r3
 80097ee:	8013      	strh	r3, [r2, #0]
 80097f0:	683b      	ldr	r3, [r7, #0]
 80097f2:	78db      	ldrb	r3, [r3, #3]
 80097f4:	2b01      	cmp	r3, #1
 80097f6:	d020      	beq.n	800983a <USB_ActivateEndpoint+0x1c6>
 80097f8:	687a      	ldr	r2, [r7, #4]
 80097fa:	683b      	ldr	r3, [r7, #0]
 80097fc:	781b      	ldrb	r3, [r3, #0]
 80097fe:	009b      	lsls	r3, r3, #2
 8009800:	4413      	add	r3, r2
 8009802:	881b      	ldrh	r3, [r3, #0]
 8009804:	b29b      	uxth	r3, r3
 8009806:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800980a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800980e:	813b      	strh	r3, [r7, #8]
 8009810:	893b      	ldrh	r3, [r7, #8]
 8009812:	f083 0320 	eor.w	r3, r3, #32
 8009816:	813b      	strh	r3, [r7, #8]
 8009818:	687a      	ldr	r2, [r7, #4]
 800981a:	683b      	ldr	r3, [r7, #0]
 800981c:	781b      	ldrb	r3, [r3, #0]
 800981e:	009b      	lsls	r3, r3, #2
 8009820:	441a      	add	r2, r3
 8009822:	893b      	ldrh	r3, [r7, #8]
 8009824:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009828:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800982c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009830:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009834:	b29b      	uxth	r3, r3
 8009836:	8013      	strh	r3, [r2, #0]
 8009838:	e27f      	b.n	8009d3a <USB_ActivateEndpoint+0x6c6>
 800983a:	687a      	ldr	r2, [r7, #4]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	009b      	lsls	r3, r3, #2
 8009842:	4413      	add	r3, r2
 8009844:	881b      	ldrh	r3, [r3, #0]
 8009846:	b29b      	uxth	r3, r3
 8009848:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800984c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009850:	817b      	strh	r3, [r7, #10]
 8009852:	687a      	ldr	r2, [r7, #4]
 8009854:	683b      	ldr	r3, [r7, #0]
 8009856:	781b      	ldrb	r3, [r3, #0]
 8009858:	009b      	lsls	r3, r3, #2
 800985a:	441a      	add	r2, r3
 800985c:	897b      	ldrh	r3, [r7, #10]
 800985e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009862:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009866:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800986a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800986e:	b29b      	uxth	r3, r3
 8009870:	8013      	strh	r3, [r2, #0]
 8009872:	e262      	b.n	8009d3a <USB_ActivateEndpoint+0x6c6>
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800987e:	b29b      	uxth	r3, r3
 8009880:	461a      	mov	r2, r3
 8009882:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009884:	4413      	add	r3, r2
 8009886:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009888:	683b      	ldr	r3, [r7, #0]
 800988a:	781b      	ldrb	r3, [r3, #0]
 800988c:	011a      	lsls	r2, r3, #4
 800988e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009890:	4413      	add	r3, r2
 8009892:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009896:	62bb      	str	r3, [r7, #40]	; 0x28
 8009898:	683b      	ldr	r3, [r7, #0]
 800989a:	88db      	ldrh	r3, [r3, #6]
 800989c:	085b      	lsrs	r3, r3, #1
 800989e:	b29b      	uxth	r3, r3
 80098a0:	005b      	lsls	r3, r3, #1
 80098a2:	b29a      	uxth	r2, r3
 80098a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098a6:	801a      	strh	r2, [r3, #0]
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	627b      	str	r3, [r7, #36]	; 0x24
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80098b2:	b29b      	uxth	r3, r3
 80098b4:	461a      	mov	r2, r3
 80098b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098b8:	4413      	add	r3, r2
 80098ba:	627b      	str	r3, [r7, #36]	; 0x24
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	781b      	ldrb	r3, [r3, #0]
 80098c0:	011a      	lsls	r2, r3, #4
 80098c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80098c4:	4413      	add	r3, r2
 80098c6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80098ca:	623b      	str	r3, [r7, #32]
 80098cc:	683b      	ldr	r3, [r7, #0]
 80098ce:	691b      	ldr	r3, [r3, #16]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d112      	bne.n	80098fa <USB_ActivateEndpoint+0x286>
 80098d4:	6a3b      	ldr	r3, [r7, #32]
 80098d6:	881b      	ldrh	r3, [r3, #0]
 80098d8:	b29b      	uxth	r3, r3
 80098da:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80098de:	b29a      	uxth	r2, r3
 80098e0:	6a3b      	ldr	r3, [r7, #32]
 80098e2:	801a      	strh	r2, [r3, #0]
 80098e4:	6a3b      	ldr	r3, [r7, #32]
 80098e6:	881b      	ldrh	r3, [r3, #0]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80098ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80098f2:	b29a      	uxth	r2, r3
 80098f4:	6a3b      	ldr	r3, [r7, #32]
 80098f6:	801a      	strh	r2, [r3, #0]
 80098f8:	e02f      	b.n	800995a <USB_ActivateEndpoint+0x2e6>
 80098fa:	683b      	ldr	r3, [r7, #0]
 80098fc:	691b      	ldr	r3, [r3, #16]
 80098fe:	2b3e      	cmp	r3, #62	; 0x3e
 8009900:	d813      	bhi.n	800992a <USB_ActivateEndpoint+0x2b6>
 8009902:	683b      	ldr	r3, [r7, #0]
 8009904:	691b      	ldr	r3, [r3, #16]
 8009906:	085b      	lsrs	r3, r3, #1
 8009908:	663b      	str	r3, [r7, #96]	; 0x60
 800990a:	683b      	ldr	r3, [r7, #0]
 800990c:	691b      	ldr	r3, [r3, #16]
 800990e:	f003 0301 	and.w	r3, r3, #1
 8009912:	2b00      	cmp	r3, #0
 8009914:	d002      	beq.n	800991c <USB_ActivateEndpoint+0x2a8>
 8009916:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009918:	3301      	adds	r3, #1
 800991a:	663b      	str	r3, [r7, #96]	; 0x60
 800991c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800991e:	b29b      	uxth	r3, r3
 8009920:	029b      	lsls	r3, r3, #10
 8009922:	b29a      	uxth	r2, r3
 8009924:	6a3b      	ldr	r3, [r7, #32]
 8009926:	801a      	strh	r2, [r3, #0]
 8009928:	e017      	b.n	800995a <USB_ActivateEndpoint+0x2e6>
 800992a:	683b      	ldr	r3, [r7, #0]
 800992c:	691b      	ldr	r3, [r3, #16]
 800992e:	095b      	lsrs	r3, r3, #5
 8009930:	663b      	str	r3, [r7, #96]	; 0x60
 8009932:	683b      	ldr	r3, [r7, #0]
 8009934:	691b      	ldr	r3, [r3, #16]
 8009936:	f003 031f 	and.w	r3, r3, #31
 800993a:	2b00      	cmp	r3, #0
 800993c:	d102      	bne.n	8009944 <USB_ActivateEndpoint+0x2d0>
 800993e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009940:	3b01      	subs	r3, #1
 8009942:	663b      	str	r3, [r7, #96]	; 0x60
 8009944:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009946:	b29b      	uxth	r3, r3
 8009948:	029b      	lsls	r3, r3, #10
 800994a:	b29b      	uxth	r3, r3
 800994c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8009950:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009954:	b29a      	uxth	r2, r3
 8009956:	6a3b      	ldr	r3, [r7, #32]
 8009958:	801a      	strh	r2, [r3, #0]
 800995a:	687a      	ldr	r2, [r7, #4]
 800995c:	683b      	ldr	r3, [r7, #0]
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	009b      	lsls	r3, r3, #2
 8009962:	4413      	add	r3, r2
 8009964:	881b      	ldrh	r3, [r3, #0]
 8009966:	83fb      	strh	r3, [r7, #30]
 8009968:	8bfb      	ldrh	r3, [r7, #30]
 800996a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800996e:	2b00      	cmp	r3, #0
 8009970:	d01b      	beq.n	80099aa <USB_ActivateEndpoint+0x336>
 8009972:	687a      	ldr	r2, [r7, #4]
 8009974:	683b      	ldr	r3, [r7, #0]
 8009976:	781b      	ldrb	r3, [r3, #0]
 8009978:	009b      	lsls	r3, r3, #2
 800997a:	4413      	add	r3, r2
 800997c:	881b      	ldrh	r3, [r3, #0]
 800997e:	b29b      	uxth	r3, r3
 8009980:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009984:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009988:	83bb      	strh	r3, [r7, #28]
 800998a:	687a      	ldr	r2, [r7, #4]
 800998c:	683b      	ldr	r3, [r7, #0]
 800998e:	781b      	ldrb	r3, [r3, #0]
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	441a      	add	r2, r3
 8009994:	8bbb      	ldrh	r3, [r7, #28]
 8009996:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800999a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800999e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099a6:	b29b      	uxth	r3, r3
 80099a8:	8013      	strh	r3, [r2, #0]
 80099aa:	687a      	ldr	r2, [r7, #4]
 80099ac:	683b      	ldr	r3, [r7, #0]
 80099ae:	781b      	ldrb	r3, [r3, #0]
 80099b0:	009b      	lsls	r3, r3, #2
 80099b2:	4413      	add	r3, r2
 80099b4:	881b      	ldrh	r3, [r3, #0]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80099bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099c0:	837b      	strh	r3, [r7, #26]
 80099c2:	8b7b      	ldrh	r3, [r7, #26]
 80099c4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80099c8:	837b      	strh	r3, [r7, #26]
 80099ca:	8b7b      	ldrh	r3, [r7, #26]
 80099cc:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80099d0:	837b      	strh	r3, [r7, #26]
 80099d2:	687a      	ldr	r2, [r7, #4]
 80099d4:	683b      	ldr	r3, [r7, #0]
 80099d6:	781b      	ldrb	r3, [r3, #0]
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	441a      	add	r2, r3
 80099dc:	8b7b      	ldrh	r3, [r7, #26]
 80099de:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099e2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099e6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80099ea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099ee:	b29b      	uxth	r3, r3
 80099f0:	8013      	strh	r3, [r2, #0]
 80099f2:	e1a2      	b.n	8009d3a <USB_ActivateEndpoint+0x6c6>
 80099f4:	687a      	ldr	r2, [r7, #4]
 80099f6:	683b      	ldr	r3, [r7, #0]
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	881b      	ldrh	r3, [r3, #0]
 8009a00:	b29b      	uxth	r3, r3
 8009a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a0a:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 8009a0e:	687a      	ldr	r2, [r7, #4]
 8009a10:	683b      	ldr	r3, [r7, #0]
 8009a12:	781b      	ldrb	r3, [r3, #0]
 8009a14:	009b      	lsls	r3, r3, #2
 8009a16:	441a      	add	r2, r3
 8009a18:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 8009a1c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a20:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a24:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8009a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a2c:	b29b      	uxth	r3, r3
 8009a2e:	8013      	strh	r3, [r2, #0]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a3a:	b29b      	uxth	r3, r3
 8009a3c:	461a      	mov	r2, r3
 8009a3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a40:	4413      	add	r3, r2
 8009a42:	65bb      	str	r3, [r7, #88]	; 0x58
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	011a      	lsls	r2, r3, #4
 8009a4a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009a4c:	4413      	add	r3, r2
 8009a4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8009a52:	657b      	str	r3, [r7, #84]	; 0x54
 8009a54:	683b      	ldr	r3, [r7, #0]
 8009a56:	891b      	ldrh	r3, [r3, #8]
 8009a58:	085b      	lsrs	r3, r3, #1
 8009a5a:	b29b      	uxth	r3, r3
 8009a5c:	005b      	lsls	r3, r3, #1
 8009a5e:	b29a      	uxth	r2, r3
 8009a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009a62:	801a      	strh	r2, [r3, #0]
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	653b      	str	r3, [r7, #80]	; 0x50
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009a6e:	b29b      	uxth	r3, r3
 8009a70:	461a      	mov	r2, r3
 8009a72:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a74:	4413      	add	r3, r2
 8009a76:	653b      	str	r3, [r7, #80]	; 0x50
 8009a78:	683b      	ldr	r3, [r7, #0]
 8009a7a:	781b      	ldrb	r3, [r3, #0]
 8009a7c:	011a      	lsls	r2, r3, #4
 8009a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009a80:	4413      	add	r3, r2
 8009a82:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009a86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	895b      	ldrh	r3, [r3, #10]
 8009a8c:	085b      	lsrs	r3, r3, #1
 8009a8e:	b29b      	uxth	r3, r3
 8009a90:	005b      	lsls	r3, r3, #1
 8009a92:	b29a      	uxth	r2, r3
 8009a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009a96:	801a      	strh	r2, [r3, #0]
 8009a98:	683b      	ldr	r3, [r7, #0]
 8009a9a:	785b      	ldrb	r3, [r3, #1]
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f040 8091 	bne.w	8009bc4 <USB_ActivateEndpoint+0x550>
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009ab0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	d01b      	beq.n	8009af2 <USB_ActivateEndpoint+0x47e>
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	4413      	add	r3, r2
 8009ac4:	881b      	ldrh	r3, [r3, #0]
 8009ac6:	b29b      	uxth	r3, r3
 8009ac8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009acc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ad0:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009ad2:	687a      	ldr	r2, [r7, #4]
 8009ad4:	683b      	ldr	r3, [r7, #0]
 8009ad6:	781b      	ldrb	r3, [r3, #0]
 8009ad8:	009b      	lsls	r3, r3, #2
 8009ada:	441a      	add	r2, r3
 8009adc:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8009ade:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ae2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ae6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009aea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009aee:	b29b      	uxth	r3, r3
 8009af0:	8013      	strh	r3, [r2, #0]
 8009af2:	687a      	ldr	r2, [r7, #4]
 8009af4:	683b      	ldr	r3, [r7, #0]
 8009af6:	781b      	ldrb	r3, [r3, #0]
 8009af8:	009b      	lsls	r3, r3, #2
 8009afa:	4413      	add	r3, r2
 8009afc:	881b      	ldrh	r3, [r3, #0]
 8009afe:	873b      	strh	r3, [r7, #56]	; 0x38
 8009b00:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8009b02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d01b      	beq.n	8009b42 <USB_ActivateEndpoint+0x4ce>
 8009b0a:	687a      	ldr	r2, [r7, #4]
 8009b0c:	683b      	ldr	r3, [r7, #0]
 8009b0e:	781b      	ldrb	r3, [r3, #0]
 8009b10:	009b      	lsls	r3, r3, #2
 8009b12:	4413      	add	r3, r2
 8009b14:	881b      	ldrh	r3, [r3, #0]
 8009b16:	b29b      	uxth	r3, r3
 8009b18:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b20:	86fb      	strh	r3, [r7, #54]	; 0x36
 8009b22:	687a      	ldr	r2, [r7, #4]
 8009b24:	683b      	ldr	r3, [r7, #0]
 8009b26:	781b      	ldrb	r3, [r3, #0]
 8009b28:	009b      	lsls	r3, r3, #2
 8009b2a:	441a      	add	r2, r3
 8009b2c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b2e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b32:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b3a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b3e:	b29b      	uxth	r3, r3
 8009b40:	8013      	strh	r3, [r2, #0]
 8009b42:	687a      	ldr	r2, [r7, #4]
 8009b44:	683b      	ldr	r3, [r7, #0]
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	009b      	lsls	r3, r3, #2
 8009b4a:	4413      	add	r3, r2
 8009b4c:	881b      	ldrh	r3, [r3, #0]
 8009b4e:	b29b      	uxth	r3, r3
 8009b50:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009b54:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b58:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009b5a:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009b5c:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009b60:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009b62:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009b64:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009b68:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009b6a:	687a      	ldr	r2, [r7, #4]
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	781b      	ldrb	r3, [r3, #0]
 8009b70:	009b      	lsls	r3, r3, #2
 8009b72:	441a      	add	r2, r3
 8009b74:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009b76:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b86:	b29b      	uxth	r3, r3
 8009b88:	8013      	strh	r3, [r2, #0]
 8009b8a:	687a      	ldr	r2, [r7, #4]
 8009b8c:	683b      	ldr	r3, [r7, #0]
 8009b8e:	781b      	ldrb	r3, [r3, #0]
 8009b90:	009b      	lsls	r3, r3, #2
 8009b92:	4413      	add	r3, r2
 8009b94:	881b      	ldrh	r3, [r3, #0]
 8009b96:	b29b      	uxth	r3, r3
 8009b98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b9c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009ba0:	867b      	strh	r3, [r7, #50]	; 0x32
 8009ba2:	687a      	ldr	r2, [r7, #4]
 8009ba4:	683b      	ldr	r3, [r7, #0]
 8009ba6:	781b      	ldrb	r3, [r3, #0]
 8009ba8:	009b      	lsls	r3, r3, #2
 8009baa:	441a      	add	r2, r3
 8009bac:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 8009bae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009bba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bbe:	b29b      	uxth	r3, r3
 8009bc0:	8013      	strh	r3, [r2, #0]
 8009bc2:	e0ba      	b.n	8009d3a <USB_ActivateEndpoint+0x6c6>
 8009bc4:	687a      	ldr	r2, [r7, #4]
 8009bc6:	683b      	ldr	r3, [r7, #0]
 8009bc8:	781b      	ldrb	r3, [r3, #0]
 8009bca:	009b      	lsls	r3, r3, #2
 8009bcc:	4413      	add	r3, r2
 8009bce:	881b      	ldrh	r3, [r3, #0]
 8009bd0:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009bd4:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009bd8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d01d      	beq.n	8009c1c <USB_ActivateEndpoint+0x5a8>
 8009be0:	687a      	ldr	r2, [r7, #4]
 8009be2:	683b      	ldr	r3, [r7, #0]
 8009be4:	781b      	ldrb	r3, [r3, #0]
 8009be6:	009b      	lsls	r3, r3, #2
 8009be8:	4413      	add	r3, r2
 8009bea:	881b      	ldrh	r3, [r3, #0]
 8009bec:	b29b      	uxth	r3, r3
 8009bee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bf2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf6:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 8009bfa:	687a      	ldr	r2, [r7, #4]
 8009bfc:	683b      	ldr	r3, [r7, #0]
 8009bfe:	781b      	ldrb	r3, [r3, #0]
 8009c00:	009b      	lsls	r3, r3, #2
 8009c02:	441a      	add	r2, r3
 8009c04:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8009c08:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c0c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c10:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c18:	b29b      	uxth	r3, r3
 8009c1a:	8013      	strh	r3, [r2, #0]
 8009c1c:	687a      	ldr	r2, [r7, #4]
 8009c1e:	683b      	ldr	r3, [r7, #0]
 8009c20:	781b      	ldrb	r3, [r3, #0]
 8009c22:	009b      	lsls	r3, r3, #2
 8009c24:	4413      	add	r3, r2
 8009c26:	881b      	ldrh	r3, [r3, #0]
 8009c28:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 8009c2c:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8009c30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d01d      	beq.n	8009c74 <USB_ActivateEndpoint+0x600>
 8009c38:	687a      	ldr	r2, [r7, #4]
 8009c3a:	683b      	ldr	r3, [r7, #0]
 8009c3c:	781b      	ldrb	r3, [r3, #0]
 8009c3e:	009b      	lsls	r3, r3, #2
 8009c40:	4413      	add	r3, r2
 8009c42:	881b      	ldrh	r3, [r3, #0]
 8009c44:	b29b      	uxth	r3, r3
 8009c46:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c4e:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	441a      	add	r2, r3
 8009c5c:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009c60:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c64:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c68:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c6c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009c70:	b29b      	uxth	r3, r3
 8009c72:	8013      	strh	r3, [r2, #0]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	78db      	ldrb	r3, [r3, #3]
 8009c78:	2b01      	cmp	r3, #1
 8009c7a:	d024      	beq.n	8009cc6 <USB_ActivateEndpoint+0x652>
 8009c7c:	687a      	ldr	r2, [r7, #4]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	781b      	ldrb	r3, [r3, #0]
 8009c82:	009b      	lsls	r3, r3, #2
 8009c84:	4413      	add	r3, r2
 8009c86:	881b      	ldrh	r3, [r3, #0]
 8009c88:	b29b      	uxth	r3, r3
 8009c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009c92:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009c9a:	f083 0320 	eor.w	r3, r3, #32
 8009c9e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	441a      	add	r2, r3
 8009cac:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009cb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cc0:	b29b      	uxth	r3, r3
 8009cc2:	8013      	strh	r3, [r2, #0]
 8009cc4:	e01d      	b.n	8009d02 <USB_ActivateEndpoint+0x68e>
 8009cc6:	687a      	ldr	r2, [r7, #4]
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	781b      	ldrb	r3, [r3, #0]
 8009ccc:	009b      	lsls	r3, r3, #2
 8009cce:	4413      	add	r3, r2
 8009cd0:	881b      	ldrh	r3, [r3, #0]
 8009cd2:	b29b      	uxth	r3, r3
 8009cd4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009cdc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009ce0:	687a      	ldr	r2, [r7, #4]
 8009ce2:	683b      	ldr	r3, [r7, #0]
 8009ce4:	781b      	ldrb	r3, [r3, #0]
 8009ce6:	009b      	lsls	r3, r3, #2
 8009ce8:	441a      	add	r2, r3
 8009cea:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009cee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cf2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cfa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009cfe:	b29b      	uxth	r3, r3
 8009d00:	8013      	strh	r3, [r2, #0]
 8009d02:	687a      	ldr	r2, [r7, #4]
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	781b      	ldrb	r3, [r3, #0]
 8009d08:	009b      	lsls	r3, r3, #2
 8009d0a:	4413      	add	r3, r2
 8009d0c:	881b      	ldrh	r3, [r3, #0]
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d18:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009d1a:	687a      	ldr	r2, [r7, #4]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	781b      	ldrb	r3, [r3, #0]
 8009d20:	009b      	lsls	r3, r3, #2
 8009d22:	441a      	add	r2, r3
 8009d24:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009d26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d36:	b29b      	uxth	r3, r3
 8009d38:	8013      	strh	r3, [r2, #0]
 8009d3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8009d3e:	4618      	mov	r0, r3
 8009d40:	376c      	adds	r7, #108	; 0x6c
 8009d42:	46bd      	mov	sp, r7
 8009d44:	bc80      	pop	{r7}
 8009d46:	4770      	bx	lr

08009d48 <USB_DeactivateEndpoint>:
 8009d48:	b480      	push	{r7}
 8009d4a:	b08d      	sub	sp, #52	; 0x34
 8009d4c:	af00      	add	r7, sp, #0
 8009d4e:	6078      	str	r0, [r7, #4]
 8009d50:	6039      	str	r1, [r7, #0]
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	7b1b      	ldrb	r3, [r3, #12]
 8009d56:	2b00      	cmp	r3, #0
 8009d58:	f040 808e 	bne.w	8009e78 <USB_DeactivateEndpoint+0x130>
 8009d5c:	683b      	ldr	r3, [r7, #0]
 8009d5e:	785b      	ldrb	r3, [r3, #1]
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d044      	beq.n	8009dee <USB_DeactivateEndpoint+0xa6>
 8009d64:	687a      	ldr	r2, [r7, #4]
 8009d66:	683b      	ldr	r3, [r7, #0]
 8009d68:	781b      	ldrb	r3, [r3, #0]
 8009d6a:	009b      	lsls	r3, r3, #2
 8009d6c:	4413      	add	r3, r2
 8009d6e:	881b      	ldrh	r3, [r3, #0]
 8009d70:	81bb      	strh	r3, [r7, #12]
 8009d72:	89bb      	ldrh	r3, [r7, #12]
 8009d74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d01b      	beq.n	8009db4 <USB_DeactivateEndpoint+0x6c>
 8009d7c:	687a      	ldr	r2, [r7, #4]
 8009d7e:	683b      	ldr	r3, [r7, #0]
 8009d80:	781b      	ldrb	r3, [r3, #0]
 8009d82:	009b      	lsls	r3, r3, #2
 8009d84:	4413      	add	r3, r2
 8009d86:	881b      	ldrh	r3, [r3, #0]
 8009d88:	b29b      	uxth	r3, r3
 8009d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d92:	817b      	strh	r3, [r7, #10]
 8009d94:	687a      	ldr	r2, [r7, #4]
 8009d96:	683b      	ldr	r3, [r7, #0]
 8009d98:	781b      	ldrb	r3, [r3, #0]
 8009d9a:	009b      	lsls	r3, r3, #2
 8009d9c:	441a      	add	r2, r3
 8009d9e:	897b      	ldrh	r3, [r7, #10]
 8009da0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009da4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009da8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009dac:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	8013      	strh	r3, [r2, #0]
 8009db4:	687a      	ldr	r2, [r7, #4]
 8009db6:	683b      	ldr	r3, [r7, #0]
 8009db8:	781b      	ldrb	r3, [r3, #0]
 8009dba:	009b      	lsls	r3, r3, #2
 8009dbc:	4413      	add	r3, r2
 8009dbe:	881b      	ldrh	r3, [r3, #0]
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009dc6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009dca:	813b      	strh	r3, [r7, #8]
 8009dcc:	687a      	ldr	r2, [r7, #4]
 8009dce:	683b      	ldr	r3, [r7, #0]
 8009dd0:	781b      	ldrb	r3, [r3, #0]
 8009dd2:	009b      	lsls	r3, r3, #2
 8009dd4:	441a      	add	r2, r3
 8009dd6:	893b      	ldrh	r3, [r7, #8]
 8009dd8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ddc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009de0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009de4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009de8:	b29b      	uxth	r3, r3
 8009dea:	8013      	strh	r3, [r2, #0]
 8009dec:	e192      	b.n	800a114 <USB_DeactivateEndpoint+0x3cc>
 8009dee:	687a      	ldr	r2, [r7, #4]
 8009df0:	683b      	ldr	r3, [r7, #0]
 8009df2:	781b      	ldrb	r3, [r3, #0]
 8009df4:	009b      	lsls	r3, r3, #2
 8009df6:	4413      	add	r3, r2
 8009df8:	881b      	ldrh	r3, [r3, #0]
 8009dfa:	827b      	strh	r3, [r7, #18]
 8009dfc:	8a7b      	ldrh	r3, [r7, #18]
 8009dfe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d01b      	beq.n	8009e3e <USB_DeactivateEndpoint+0xf6>
 8009e06:	687a      	ldr	r2, [r7, #4]
 8009e08:	683b      	ldr	r3, [r7, #0]
 8009e0a:	781b      	ldrb	r3, [r3, #0]
 8009e0c:	009b      	lsls	r3, r3, #2
 8009e0e:	4413      	add	r3, r2
 8009e10:	881b      	ldrh	r3, [r3, #0]
 8009e12:	b29b      	uxth	r3, r3
 8009e14:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e1c:	823b      	strh	r3, [r7, #16]
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	683b      	ldr	r3, [r7, #0]
 8009e22:	781b      	ldrb	r3, [r3, #0]
 8009e24:	009b      	lsls	r3, r3, #2
 8009e26:	441a      	add	r2, r3
 8009e28:	8a3b      	ldrh	r3, [r7, #16]
 8009e2a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e2e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e32:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e3a:	b29b      	uxth	r3, r3
 8009e3c:	8013      	strh	r3, [r2, #0]
 8009e3e:	687a      	ldr	r2, [r7, #4]
 8009e40:	683b      	ldr	r3, [r7, #0]
 8009e42:	781b      	ldrb	r3, [r3, #0]
 8009e44:	009b      	lsls	r3, r3, #2
 8009e46:	4413      	add	r3, r2
 8009e48:	881b      	ldrh	r3, [r3, #0]
 8009e4a:	b29b      	uxth	r3, r3
 8009e4c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e54:	81fb      	strh	r3, [r7, #14]
 8009e56:	687a      	ldr	r2, [r7, #4]
 8009e58:	683b      	ldr	r3, [r7, #0]
 8009e5a:	781b      	ldrb	r3, [r3, #0]
 8009e5c:	009b      	lsls	r3, r3, #2
 8009e5e:	441a      	add	r2, r3
 8009e60:	89fb      	ldrh	r3, [r7, #14]
 8009e62:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e66:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e6a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e6e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e72:	b29b      	uxth	r3, r3
 8009e74:	8013      	strh	r3, [r2, #0]
 8009e76:	e14d      	b.n	800a114 <USB_DeactivateEndpoint+0x3cc>
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	785b      	ldrb	r3, [r3, #1]
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	f040 80a5 	bne.w	8009fcc <USB_DeactivateEndpoint+0x284>
 8009e82:	687a      	ldr	r2, [r7, #4]
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	781b      	ldrb	r3, [r3, #0]
 8009e88:	009b      	lsls	r3, r3, #2
 8009e8a:	4413      	add	r3, r2
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	843b      	strh	r3, [r7, #32]
 8009e90:	8c3b      	ldrh	r3, [r7, #32]
 8009e92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d01b      	beq.n	8009ed2 <USB_DeactivateEndpoint+0x18a>
 8009e9a:	687a      	ldr	r2, [r7, #4]
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	781b      	ldrb	r3, [r3, #0]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	4413      	add	r3, r2
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	b29b      	uxth	r3, r3
 8009ea8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009eac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009eb0:	83fb      	strh	r3, [r7, #30]
 8009eb2:	687a      	ldr	r2, [r7, #4]
 8009eb4:	683b      	ldr	r3, [r7, #0]
 8009eb6:	781b      	ldrb	r3, [r3, #0]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	441a      	add	r2, r3
 8009ebc:	8bfb      	ldrh	r3, [r7, #30]
 8009ebe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ec2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ec6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009eca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ece:	b29b      	uxth	r3, r3
 8009ed0:	8013      	strh	r3, [r2, #0]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	683b      	ldr	r3, [r7, #0]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	009b      	lsls	r3, r3, #2
 8009eda:	4413      	add	r3, r2
 8009edc:	881b      	ldrh	r3, [r3, #0]
 8009ede:	83bb      	strh	r3, [r7, #28]
 8009ee0:	8bbb      	ldrh	r3, [r7, #28]
 8009ee2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee6:	2b00      	cmp	r3, #0
 8009ee8:	d01b      	beq.n	8009f22 <USB_DeactivateEndpoint+0x1da>
 8009eea:	687a      	ldr	r2, [r7, #4]
 8009eec:	683b      	ldr	r3, [r7, #0]
 8009eee:	781b      	ldrb	r3, [r3, #0]
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	881b      	ldrh	r3, [r3, #0]
 8009ef6:	b29b      	uxth	r3, r3
 8009ef8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009efc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f00:	837b      	strh	r3, [r7, #26]
 8009f02:	687a      	ldr	r2, [r7, #4]
 8009f04:	683b      	ldr	r3, [r7, #0]
 8009f06:	781b      	ldrb	r3, [r3, #0]
 8009f08:	009b      	lsls	r3, r3, #2
 8009f0a:	441a      	add	r2, r3
 8009f0c:	8b7b      	ldrh	r3, [r7, #26]
 8009f0e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f12:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f16:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f1a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f1e:	b29b      	uxth	r3, r3
 8009f20:	8013      	strh	r3, [r2, #0]
 8009f22:	687a      	ldr	r2, [r7, #4]
 8009f24:	683b      	ldr	r3, [r7, #0]
 8009f26:	781b      	ldrb	r3, [r3, #0]
 8009f28:	009b      	lsls	r3, r3, #2
 8009f2a:	4413      	add	r3, r2
 8009f2c:	881b      	ldrh	r3, [r3, #0]
 8009f2e:	b29b      	uxth	r3, r3
 8009f30:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009f34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f38:	833b      	strh	r3, [r7, #24]
 8009f3a:	687a      	ldr	r2, [r7, #4]
 8009f3c:	683b      	ldr	r3, [r7, #0]
 8009f3e:	781b      	ldrb	r3, [r3, #0]
 8009f40:	009b      	lsls	r3, r3, #2
 8009f42:	441a      	add	r2, r3
 8009f44:	8b3b      	ldrh	r3, [r7, #24]
 8009f46:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f4a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f52:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	8013      	strh	r3, [r2, #0]
 8009f5a:	687a      	ldr	r2, [r7, #4]
 8009f5c:	683b      	ldr	r3, [r7, #0]
 8009f5e:	781b      	ldrb	r3, [r3, #0]
 8009f60:	009b      	lsls	r3, r3, #2
 8009f62:	4413      	add	r3, r2
 8009f64:	881b      	ldrh	r3, [r3, #0]
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009f70:	82fb      	strh	r3, [r7, #22]
 8009f72:	687a      	ldr	r2, [r7, #4]
 8009f74:	683b      	ldr	r3, [r7, #0]
 8009f76:	781b      	ldrb	r3, [r3, #0]
 8009f78:	009b      	lsls	r3, r3, #2
 8009f7a:	441a      	add	r2, r3
 8009f7c:	8afb      	ldrh	r3, [r7, #22]
 8009f7e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009f82:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009f8a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009f8e:	b29b      	uxth	r3, r3
 8009f90:	8013      	strh	r3, [r2, #0]
 8009f92:	687a      	ldr	r2, [r7, #4]
 8009f94:	683b      	ldr	r3, [r7, #0]
 8009f96:	781b      	ldrb	r3, [r3, #0]
 8009f98:	009b      	lsls	r3, r3, #2
 8009f9a:	4413      	add	r3, r2
 8009f9c:	881b      	ldrh	r3, [r3, #0]
 8009f9e:	b29b      	uxth	r3, r3
 8009fa0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009fa4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009fa8:	82bb      	strh	r3, [r7, #20]
 8009faa:	687a      	ldr	r2, [r7, #4]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	009b      	lsls	r3, r3, #2
 8009fb2:	441a      	add	r2, r3
 8009fb4:	8abb      	ldrh	r3, [r7, #20]
 8009fb6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009fba:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009fbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009fc2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009fc6:	b29b      	uxth	r3, r3
 8009fc8:	8013      	strh	r3, [r2, #0]
 8009fca:	e0a3      	b.n	800a114 <USB_DeactivateEndpoint+0x3cc>
 8009fcc:	687a      	ldr	r2, [r7, #4]
 8009fce:	683b      	ldr	r3, [r7, #0]
 8009fd0:	781b      	ldrb	r3, [r3, #0]
 8009fd2:	009b      	lsls	r3, r3, #2
 8009fd4:	4413      	add	r3, r2
 8009fd6:	881b      	ldrh	r3, [r3, #0]
 8009fd8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009fda:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009fdc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009fe0:	2b00      	cmp	r3, #0
 8009fe2:	d01b      	beq.n	800a01c <USB_DeactivateEndpoint+0x2d4>
 8009fe4:	687a      	ldr	r2, [r7, #4]
 8009fe6:	683b      	ldr	r3, [r7, #0]
 8009fe8:	781b      	ldrb	r3, [r3, #0]
 8009fea:	009b      	lsls	r3, r3, #2
 8009fec:	4413      	add	r3, r2
 8009fee:	881b      	ldrh	r3, [r3, #0]
 8009ff0:	b29b      	uxth	r3, r3
 8009ff2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009ff6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ffa:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009ffc:	687a      	ldr	r2, [r7, #4]
 8009ffe:	683b      	ldr	r3, [r7, #0]
 800a000:	781b      	ldrb	r3, [r3, #0]
 800a002:	009b      	lsls	r3, r3, #2
 800a004:	441a      	add	r2, r3
 800a006:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800a008:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a00c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a010:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a018:	b29b      	uxth	r3, r3
 800a01a:	8013      	strh	r3, [r2, #0]
 800a01c:	687a      	ldr	r2, [r7, #4]
 800a01e:	683b      	ldr	r3, [r7, #0]
 800a020:	781b      	ldrb	r3, [r3, #0]
 800a022:	009b      	lsls	r3, r3, #2
 800a024:	4413      	add	r3, r2
 800a026:	881b      	ldrh	r3, [r3, #0]
 800a028:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a02a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800a02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a030:	2b00      	cmp	r3, #0
 800a032:	d01b      	beq.n	800a06c <USB_DeactivateEndpoint+0x324>
 800a034:	687a      	ldr	r2, [r7, #4]
 800a036:	683b      	ldr	r3, [r7, #0]
 800a038:	781b      	ldrb	r3, [r3, #0]
 800a03a:	009b      	lsls	r3, r3, #2
 800a03c:	4413      	add	r3, r2
 800a03e:	881b      	ldrh	r3, [r3, #0]
 800a040:	b29b      	uxth	r3, r3
 800a042:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a046:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a04a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	683b      	ldr	r3, [r7, #0]
 800a050:	781b      	ldrb	r3, [r3, #0]
 800a052:	009b      	lsls	r3, r3, #2
 800a054:	441a      	add	r2, r3
 800a056:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800a058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a05c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a060:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a064:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800a068:	b29b      	uxth	r3, r3
 800a06a:	8013      	strh	r3, [r2, #0]
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	683b      	ldr	r3, [r7, #0]
 800a070:	781b      	ldrb	r3, [r3, #0]
 800a072:	009b      	lsls	r3, r3, #2
 800a074:	4413      	add	r3, r2
 800a076:	881b      	ldrh	r3, [r3, #0]
 800a078:	b29b      	uxth	r3, r3
 800a07a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a07e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a082:	84fb      	strh	r3, [r7, #38]	; 0x26
 800a084:	687a      	ldr	r2, [r7, #4]
 800a086:	683b      	ldr	r3, [r7, #0]
 800a088:	781b      	ldrb	r3, [r3, #0]
 800a08a:	009b      	lsls	r3, r3, #2
 800a08c:	441a      	add	r2, r3
 800a08e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800a090:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a094:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a098:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800a09c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0a0:	b29b      	uxth	r3, r3
 800a0a2:	8013      	strh	r3, [r2, #0]
 800a0a4:	687a      	ldr	r2, [r7, #4]
 800a0a6:	683b      	ldr	r3, [r7, #0]
 800a0a8:	781b      	ldrb	r3, [r3, #0]
 800a0aa:	009b      	lsls	r3, r3, #2
 800a0ac:	4413      	add	r3, r2
 800a0ae:	881b      	ldrh	r3, [r3, #0]
 800a0b0:	b29b      	uxth	r3, r3
 800a0b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a0b6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0ba:	84bb      	strh	r3, [r7, #36]	; 0x24
 800a0bc:	687a      	ldr	r2, [r7, #4]
 800a0be:	683b      	ldr	r3, [r7, #0]
 800a0c0:	781b      	ldrb	r3, [r3, #0]
 800a0c2:	009b      	lsls	r3, r3, #2
 800a0c4:	441a      	add	r2, r3
 800a0c6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800a0c8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a0cc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a0d0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a0d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a0d8:	b29b      	uxth	r3, r3
 800a0da:	8013      	strh	r3, [r2, #0]
 800a0dc:	687a      	ldr	r2, [r7, #4]
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	781b      	ldrb	r3, [r3, #0]
 800a0e2:	009b      	lsls	r3, r3, #2
 800a0e4:	4413      	add	r3, r2
 800a0e6:	881b      	ldrh	r3, [r3, #0]
 800a0e8:	b29b      	uxth	r3, r3
 800a0ea:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a0ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a0f2:	847b      	strh	r3, [r7, #34]	; 0x22
 800a0f4:	687a      	ldr	r2, [r7, #4]
 800a0f6:	683b      	ldr	r3, [r7, #0]
 800a0f8:	781b      	ldrb	r3, [r3, #0]
 800a0fa:	009b      	lsls	r3, r3, #2
 800a0fc:	441a      	add	r2, r3
 800a0fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800a100:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a104:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a108:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a10c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a110:	b29b      	uxth	r3, r3
 800a112:	8013      	strh	r3, [r2, #0]
 800a114:	2300      	movs	r3, #0
 800a116:	4618      	mov	r0, r3
 800a118:	3734      	adds	r7, #52	; 0x34
 800a11a:	46bd      	mov	sp, r7
 800a11c:	bc80      	pop	{r7}
 800a11e:	4770      	bx	lr

0800a120 <USB_EPStartXfer>:
 800a120:	b580      	push	{r7, lr}
 800a122:	b0cc      	sub	sp, #304	; 0x130
 800a124:	af00      	add	r7, sp, #0
 800a126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a12a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a12e:	6018      	str	r0, [r3, #0]
 800a130:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a134:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a138:	6019      	str	r1, [r3, #0]
 800a13a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a13e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	785b      	ldrb	r3, [r3, #1]
 800a146:	2b01      	cmp	r3, #1
 800a148:	f041 817d 	bne.w	800b446 <USB_EPStartXfer+0x1326>
 800a14c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a150:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a154:	681b      	ldr	r3, [r3, #0]
 800a156:	699a      	ldr	r2, [r3, #24]
 800a158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	691b      	ldr	r3, [r3, #16]
 800a164:	429a      	cmp	r2, r3
 800a166:	d908      	bls.n	800a17a <USB_EPStartXfer+0x5a>
 800a168:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a16c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	691b      	ldr	r3, [r3, #16]
 800a174:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a178:	e007      	b.n	800a18a <USB_EPStartXfer+0x6a>
 800a17a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a17e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a18a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a18e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	7b1b      	ldrb	r3, [r3, #12]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d152      	bne.n	800a240 <USB_EPStartXfer+0x120>
 800a19a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a19e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	6959      	ldr	r1, [r3, #20]
 800a1a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	88da      	ldrh	r2, [r3, #6]
 800a1b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a1bc:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a1c0:	6800      	ldr	r0, [r0, #0]
 800a1c2:	f001 ff0e 	bl	800bfe2 <USB_WritePMA>
 800a1c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1ca:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a1ce:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1d2:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a1d6:	6812      	ldr	r2, [r2, #0]
 800a1d8:	601a      	str	r2, [r3, #0]
 800a1da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1de:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1f0:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a1f4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a1f8:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800a1fc:	6812      	ldr	r2, [r2, #0]
 800a1fe:	440a      	add	r2, r1
 800a200:	601a      	str	r2, [r3, #0]
 800a202:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a206:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	781b      	ldrb	r3, [r3, #0]
 800a20e:	011a      	lsls	r2, r3, #4
 800a210:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a214:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	4413      	add	r3, r2
 800a21c:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a224:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a228:	601a      	str	r2, [r3, #0]
 800a22a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a22e:	b29a      	uxth	r2, r3
 800a230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a234:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	801a      	strh	r2, [r3, #0]
 800a23c:	f001 b8b5 	b.w	800b3aa <USB_EPStartXfer+0x128a>
 800a240:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a244:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	78db      	ldrb	r3, [r3, #3]
 800a24c:	2b02      	cmp	r3, #2
 800a24e:	f040 84c6 	bne.w	800abde <USB_EPStartXfer+0xabe>
 800a252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a256:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	6a1a      	ldr	r2, [r3, #32]
 800a25e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a262:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	691b      	ldr	r3, [r3, #16]
 800a26a:	429a      	cmp	r2, r3
 800a26c:	f240 8443 	bls.w	800aaf6 <USB_EPStartXfer+0x9d6>
 800a270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a27e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a282:	681b      	ldr	r3, [r3, #0]
 800a284:	781b      	ldrb	r3, [r3, #0]
 800a286:	009b      	lsls	r3, r3, #2
 800a288:	4413      	add	r3, r2
 800a28a:	881b      	ldrh	r3, [r3, #0]
 800a28c:	b29b      	uxth	r3, r3
 800a28e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a296:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a29a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a29e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2a2:	681a      	ldr	r2, [r3, #0]
 800a2a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	781b      	ldrb	r3, [r3, #0]
 800a2b0:	009b      	lsls	r3, r3, #2
 800a2b2:	441a      	add	r2, r3
 800a2b4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a2b8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a2bc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a2c0:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a2c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a2c8:	b29b      	uxth	r3, r3
 800a2ca:	8013      	strh	r3, [r2, #0]
 800a2cc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2d0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2d4:	681b      	ldr	r3, [r3, #0]
 800a2d6:	6a1a      	ldr	r2, [r3, #32]
 800a2d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2dc:	1ad2      	subs	r2, r2, r3
 800a2de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	621a      	str	r2, [r3, #32]
 800a2ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2ee:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a2f2:	681a      	ldr	r2, [r3, #0]
 800a2f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2fc:	681b      	ldr	r3, [r3, #0]
 800a2fe:	781b      	ldrb	r3, [r3, #0]
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	881b      	ldrh	r3, [r3, #0]
 800a306:	b29b      	uxth	r3, r3
 800a308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a30c:	2b00      	cmp	r3, #0
 800a30e:	f000 823e 	beq.w	800a78e <USB_EPStartXfer+0x66e>
 800a312:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a316:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a31a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a31e:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a322:	6812      	ldr	r2, [r2, #0]
 800a324:	601a      	str	r2, [r3, #0]
 800a326:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a32a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	785b      	ldrb	r3, [r3, #1]
 800a332:	2b00      	cmp	r3, #0
 800a334:	f040 809a 	bne.w	800a46c <USB_EPStartXfer+0x34c>
 800a338:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a33c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a340:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a344:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a348:	6812      	ldr	r2, [r2, #0]
 800a34a:	601a      	str	r2, [r3, #0]
 800a34c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a350:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a354:	681b      	ldr	r3, [r3, #0]
 800a356:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35a:	b29b      	uxth	r3, r3
 800a35c:	4619      	mov	r1, r3
 800a35e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a362:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a366:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a36a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a36e:	6812      	ldr	r2, [r2, #0]
 800a370:	440a      	add	r2, r1
 800a372:	601a      	str	r2, [r3, #0]
 800a374:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a378:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	781b      	ldrb	r3, [r3, #0]
 800a380:	011a      	lsls	r2, r3, #4
 800a382:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a386:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	4413      	add	r3, r2
 800a38e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a392:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a396:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d122      	bne.n	800a3ea <USB_EPStartXfer+0x2ca>
 800a3a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3a8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	881b      	ldrh	r3, [r3, #0]
 800a3b0:	b29b      	uxth	r3, r3
 800a3b2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3b6:	b29a      	uxth	r2, r3
 800a3b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3bc:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a3c0:	681b      	ldr	r3, [r3, #0]
 800a3c2:	801a      	strh	r2, [r3, #0]
 800a3c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c8:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	881b      	ldrh	r3, [r3, #0]
 800a3d0:	b29b      	uxth	r3, r3
 800a3d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3da:	b29a      	uxth	r2, r3
 800a3dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	801a      	strh	r2, [r3, #0]
 800a3e8:	e079      	b.n	800a4de <USB_EPStartXfer+0x3be>
 800a3ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3ee:	2b3e      	cmp	r3, #62	; 0x3e
 800a3f0:	d81b      	bhi.n	800a42a <USB_EPStartXfer+0x30a>
 800a3f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3f6:	085b      	lsrs	r3, r3, #1
 800a3f8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a3fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a400:	f003 0301 	and.w	r3, r3, #1
 800a404:	2b00      	cmp	r3, #0
 800a406:	d004      	beq.n	800a412 <USB_EPStartXfer+0x2f2>
 800a408:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a40c:	3301      	adds	r3, #1
 800a40e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a412:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a416:	b29b      	uxth	r3, r3
 800a418:	029b      	lsls	r3, r3, #10
 800a41a:	b29a      	uxth	r2, r3
 800a41c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a420:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	801a      	strh	r2, [r3, #0]
 800a428:	e059      	b.n	800a4de <USB_EPStartXfer+0x3be>
 800a42a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a42e:	095b      	lsrs	r3, r3, #5
 800a430:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a434:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a438:	f003 031f 	and.w	r3, r3, #31
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	d104      	bne.n	800a44a <USB_EPStartXfer+0x32a>
 800a440:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a444:	3b01      	subs	r3, #1
 800a446:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a44a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a44e:	b29b      	uxth	r3, r3
 800a450:	029b      	lsls	r3, r3, #10
 800a452:	b29b      	uxth	r3, r3
 800a454:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a458:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a45c:	b29a      	uxth	r2, r3
 800a45e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a462:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a466:	681b      	ldr	r3, [r3, #0]
 800a468:	801a      	strh	r2, [r3, #0]
 800a46a:	e038      	b.n	800a4de <USB_EPStartXfer+0x3be>
 800a46c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a470:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	785b      	ldrb	r3, [r3, #1]
 800a478:	2b01      	cmp	r3, #1
 800a47a:	d130      	bne.n	800a4de <USB_EPStartXfer+0x3be>
 800a47c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a484:	681b      	ldr	r3, [r3, #0]
 800a486:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a48a:	b29b      	uxth	r3, r3
 800a48c:	4619      	mov	r1, r3
 800a48e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a492:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a496:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a49a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800a49e:	6812      	ldr	r2, [r2, #0]
 800a4a0:	440a      	add	r2, r1
 800a4a2:	601a      	str	r2, [r3, #0]
 800a4a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	781b      	ldrb	r3, [r3, #0]
 800a4b0:	011a      	lsls	r2, r3, #4
 800a4b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	4413      	add	r3, r2
 800a4be:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a4c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4ca:	601a      	str	r2, [r3, #0]
 800a4cc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4d0:	b29a      	uxth	r2, r3
 800a4d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4d6:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	801a      	strh	r2, [r3, #0]
 800a4de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	895b      	ldrh	r3, [r3, #10]
 800a4ea:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800a4ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	6959      	ldr	r1, [r3, #20]
 800a4fa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a504:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a508:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a50c:	6800      	ldr	r0, [r0, #0]
 800a50e:	f001 fd68 	bl	800bfe2 <USB_WritePMA>
 800a512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a51a:	681b      	ldr	r3, [r3, #0]
 800a51c:	695a      	ldr	r2, [r3, #20]
 800a51e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a522:	441a      	add	r2, r3
 800a524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a528:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	615a      	str	r2, [r3, #20]
 800a530:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a534:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	6a1a      	ldr	r2, [r3, #32]
 800a53c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a540:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a544:	681b      	ldr	r3, [r3, #0]
 800a546:	691b      	ldr	r3, [r3, #16]
 800a548:	429a      	cmp	r2, r3
 800a54a:	d90f      	bls.n	800a56c <USB_EPStartXfer+0x44c>
 800a54c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a550:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a554:	681b      	ldr	r3, [r3, #0]
 800a556:	6a1a      	ldr	r2, [r3, #32]
 800a558:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a55c:	1ad2      	subs	r2, r2, r3
 800a55e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a562:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	621a      	str	r2, [r3, #32]
 800a56a:	e00e      	b.n	800a58a <USB_EPStartXfer+0x46a>
 800a56c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a570:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a574:	681b      	ldr	r3, [r3, #0]
 800a576:	6a1b      	ldr	r3, [r3, #32]
 800a578:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a57c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a580:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	2200      	movs	r2, #0
 800a588:	621a      	str	r2, [r3, #32]
 800a58a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a58e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a592:	681b      	ldr	r3, [r3, #0]
 800a594:	785b      	ldrb	r3, [r3, #1]
 800a596:	2b00      	cmp	r3, #0
 800a598:	f040 809a 	bne.w	800a6d0 <USB_EPStartXfer+0x5b0>
 800a59c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5a0:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a5a4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5a8:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a5ac:	6812      	ldr	r2, [r2, #0]
 800a5ae:	601a      	str	r2, [r3, #0]
 800a5b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5b4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a5b8:	681b      	ldr	r3, [r3, #0]
 800a5ba:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a5be:	b29b      	uxth	r3, r3
 800a5c0:	4619      	mov	r1, r3
 800a5c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5c6:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a5ca:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a5ce:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800a5d2:	6812      	ldr	r2, [r2, #0]
 800a5d4:	440a      	add	r2, r1
 800a5d6:	601a      	str	r2, [r3, #0]
 800a5d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	011a      	lsls	r2, r3, #4
 800a5e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5ea:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a5ee:	681b      	ldr	r3, [r3, #0]
 800a5f0:	4413      	add	r3, r2
 800a5f2:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a5f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a5fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a5fe:	601a      	str	r2, [r3, #0]
 800a600:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a604:	2b00      	cmp	r3, #0
 800a606:	d122      	bne.n	800a64e <USB_EPStartXfer+0x52e>
 800a608:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a60c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	881b      	ldrh	r3, [r3, #0]
 800a614:	b29b      	uxth	r3, r3
 800a616:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a61a:	b29a      	uxth	r2, r3
 800a61c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a620:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	801a      	strh	r2, [r3, #0]
 800a628:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a62c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a630:	681b      	ldr	r3, [r3, #0]
 800a632:	881b      	ldrh	r3, [r3, #0]
 800a634:	b29b      	uxth	r3, r3
 800a636:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a63a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a63e:	b29a      	uxth	r2, r3
 800a640:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a644:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a648:	681b      	ldr	r3, [r3, #0]
 800a64a:	801a      	strh	r2, [r3, #0]
 800a64c:	e083      	b.n	800a756 <USB_EPStartXfer+0x636>
 800a64e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a652:	2b3e      	cmp	r3, #62	; 0x3e
 800a654:	d81b      	bhi.n	800a68e <USB_EPStartXfer+0x56e>
 800a656:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a65a:	085b      	lsrs	r3, r3, #1
 800a65c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a660:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a664:	f003 0301 	and.w	r3, r3, #1
 800a668:	2b00      	cmp	r3, #0
 800a66a:	d004      	beq.n	800a676 <USB_EPStartXfer+0x556>
 800a66c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a670:	3301      	adds	r3, #1
 800a672:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a676:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	029b      	lsls	r3, r3, #10
 800a67e:	b29a      	uxth	r2, r3
 800a680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a684:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	801a      	strh	r2, [r3, #0]
 800a68c:	e063      	b.n	800a756 <USB_EPStartXfer+0x636>
 800a68e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a692:	095b      	lsrs	r3, r3, #5
 800a694:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a698:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a69c:	f003 031f 	and.w	r3, r3, #31
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d104      	bne.n	800a6ae <USB_EPStartXfer+0x58e>
 800a6a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a6a8:	3b01      	subs	r3, #1
 800a6aa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a6ae:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a6b2:	b29b      	uxth	r3, r3
 800a6b4:	029b      	lsls	r3, r3, #10
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a6bc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a6c0:	b29a      	uxth	r2, r3
 800a6c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	801a      	strh	r2, [r3, #0]
 800a6ce:	e042      	b.n	800a756 <USB_EPStartXfer+0x636>
 800a6d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	785b      	ldrb	r3, [r3, #1]
 800a6dc:	2b01      	cmp	r3, #1
 800a6de:	d13a      	bne.n	800a756 <USB_EPStartXfer+0x636>
 800a6e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6e4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a6e8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a6ec:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a6f0:	6812      	ldr	r2, [r2, #0]
 800a6f2:	601a      	str	r2, [r3, #0]
 800a6f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a702:	b29b      	uxth	r3, r3
 800a704:	4619      	mov	r1, r3
 800a706:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a70a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a70e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a712:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800a716:	6812      	ldr	r2, [r2, #0]
 800a718:	440a      	add	r2, r1
 800a71a:	601a      	str	r2, [r3, #0]
 800a71c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a720:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	781b      	ldrb	r3, [r3, #0]
 800a728:	011a      	lsls	r2, r3, #4
 800a72a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4413      	add	r3, r2
 800a736:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a73a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a742:	601a      	str	r2, [r3, #0]
 800a744:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a748:	b29a      	uxth	r2, r3
 800a74a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a74e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	801a      	strh	r2, [r3, #0]
 800a756:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a75a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	891b      	ldrh	r3, [r3, #8]
 800a762:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800a766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a76a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	6959      	ldr	r1, [r3, #20]
 800a772:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a776:	b29b      	uxth	r3, r3
 800a778:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a77c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a780:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a784:	6800      	ldr	r0, [r0, #0]
 800a786:	f001 fc2c 	bl	800bfe2 <USB_WritePMA>
 800a78a:	f000 be0e 	b.w	800b3aa <USB_EPStartXfer+0x128a>
 800a78e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a792:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	785b      	ldrb	r3, [r3, #1]
 800a79a:	2b00      	cmp	r3, #0
 800a79c:	d16d      	bne.n	800a87a <USB_EPStartXfer+0x75a>
 800a79e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7a2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7a6:	681b      	ldr	r3, [r3, #0]
 800a7a8:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a7b8:	b29b      	uxth	r3, r3
 800a7ba:	461a      	mov	r2, r3
 800a7bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7be:	4413      	add	r3, r2
 800a7c0:	64bb      	str	r3, [r7, #72]	; 0x48
 800a7c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a7c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	781b      	ldrb	r3, [r3, #0]
 800a7ce:	011a      	lsls	r2, r3, #4
 800a7d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a7d2:	4413      	add	r3, r2
 800a7d4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a7d8:	647b      	str	r3, [r7, #68]	; 0x44
 800a7da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7de:	2b00      	cmp	r3, #0
 800a7e0:	d112      	bne.n	800a808 <USB_EPStartXfer+0x6e8>
 800a7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7e4:	881b      	ldrh	r3, [r3, #0]
 800a7e6:	b29b      	uxth	r3, r3
 800a7e8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a7ec:	b29a      	uxth	r2, r3
 800a7ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f0:	801a      	strh	r2, [r3, #0]
 800a7f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a7f4:	881b      	ldrh	r3, [r3, #0]
 800a7f6:	b29b      	uxth	r3, r3
 800a7f8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a7fc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a800:	b29a      	uxth	r2, r3
 800a802:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a804:	801a      	strh	r2, [r3, #0]
 800a806:	e063      	b.n	800a8d0 <USB_EPStartXfer+0x7b0>
 800a808:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a80c:	2b3e      	cmp	r3, #62	; 0x3e
 800a80e:	d817      	bhi.n	800a840 <USB_EPStartXfer+0x720>
 800a810:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a814:	085b      	lsrs	r3, r3, #1
 800a816:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a81a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a81e:	f003 0301 	and.w	r3, r3, #1
 800a822:	2b00      	cmp	r3, #0
 800a824:	d004      	beq.n	800a830 <USB_EPStartXfer+0x710>
 800a826:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a82a:	3301      	adds	r3, #1
 800a82c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a830:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a834:	b29b      	uxth	r3, r3
 800a836:	029b      	lsls	r3, r3, #10
 800a838:	b29a      	uxth	r2, r3
 800a83a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a83c:	801a      	strh	r2, [r3, #0]
 800a83e:	e047      	b.n	800a8d0 <USB_EPStartXfer+0x7b0>
 800a840:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a844:	095b      	lsrs	r3, r3, #5
 800a846:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a84a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a84e:	f003 031f 	and.w	r3, r3, #31
 800a852:	2b00      	cmp	r3, #0
 800a854:	d104      	bne.n	800a860 <USB_EPStartXfer+0x740>
 800a856:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a85a:	3b01      	subs	r3, #1
 800a85c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a860:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a864:	b29b      	uxth	r3, r3
 800a866:	029b      	lsls	r3, r3, #10
 800a868:	b29b      	uxth	r3, r3
 800a86a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a86e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a872:	b29a      	uxth	r2, r3
 800a874:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a876:	801a      	strh	r2, [r3, #0]
 800a878:	e02a      	b.n	800a8d0 <USB_EPStartXfer+0x7b0>
 800a87a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a87e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a882:	681b      	ldr	r3, [r3, #0]
 800a884:	785b      	ldrb	r3, [r3, #1]
 800a886:	2b01      	cmp	r3, #1
 800a888:	d122      	bne.n	800a8d0 <USB_EPStartXfer+0x7b0>
 800a88a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a88e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	653b      	str	r3, [r7, #80]	; 0x50
 800a896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a89a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a8a4:	b29b      	uxth	r3, r3
 800a8a6:	461a      	mov	r2, r3
 800a8a8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8aa:	4413      	add	r3, r2
 800a8ac:	653b      	str	r3, [r7, #80]	; 0x50
 800a8ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8b6:	681b      	ldr	r3, [r3, #0]
 800a8b8:	781b      	ldrb	r3, [r3, #0]
 800a8ba:	011a      	lsls	r2, r3, #4
 800a8bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a8be:	4413      	add	r3, r2
 800a8c0:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a8c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8c6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8ca:	b29a      	uxth	r2, r3
 800a8cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a8ce:	801a      	strh	r2, [r3, #0]
 800a8d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	891b      	ldrh	r3, [r3, #8]
 800a8dc:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800a8e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8e4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8e8:	681b      	ldr	r3, [r3, #0]
 800a8ea:	6959      	ldr	r1, [r3, #20]
 800a8ec:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a8f0:	b29b      	uxth	r3, r3
 800a8f2:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a8f6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a8fa:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a8fe:	6800      	ldr	r0, [r0, #0]
 800a900:	f001 fb6f 	bl	800bfe2 <USB_WritePMA>
 800a904:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a908:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a90c:	681b      	ldr	r3, [r3, #0]
 800a90e:	695a      	ldr	r2, [r3, #20]
 800a910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a914:	441a      	add	r2, r3
 800a916:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a91a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	615a      	str	r2, [r3, #20]
 800a922:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a926:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a92a:	681b      	ldr	r3, [r3, #0]
 800a92c:	6a1a      	ldr	r2, [r3, #32]
 800a92e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a932:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a936:	681b      	ldr	r3, [r3, #0]
 800a938:	691b      	ldr	r3, [r3, #16]
 800a93a:	429a      	cmp	r2, r3
 800a93c:	d90f      	bls.n	800a95e <USB_EPStartXfer+0x83e>
 800a93e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a942:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	6a1a      	ldr	r2, [r3, #32]
 800a94a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a94e:	1ad2      	subs	r2, r2, r3
 800a950:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a954:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	621a      	str	r2, [r3, #32]
 800a95c:	e00e      	b.n	800a97c <USB_EPStartXfer+0x85c>
 800a95e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a962:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a966:	681b      	ldr	r3, [r3, #0]
 800a968:	6a1b      	ldr	r3, [r3, #32]
 800a96a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800a96e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a972:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a976:	681b      	ldr	r3, [r3, #0]
 800a978:	2200      	movs	r2, #0
 800a97a:	621a      	str	r2, [r3, #32]
 800a97c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a980:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a984:	681b      	ldr	r3, [r3, #0]
 800a986:	643b      	str	r3, [r7, #64]	; 0x40
 800a988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	785b      	ldrb	r3, [r3, #1]
 800a994:	2b00      	cmp	r3, #0
 800a996:	d16d      	bne.n	800aa74 <USB_EPStartXfer+0x954>
 800a998:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a99c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9a8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9ac:	681b      	ldr	r3, [r3, #0]
 800a9ae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a9b2:	b29b      	uxth	r3, r3
 800a9b4:	461a      	mov	r2, r3
 800a9b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9b8:	4413      	add	r3, r2
 800a9ba:	63bb      	str	r3, [r7, #56]	; 0x38
 800a9bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9c4:	681b      	ldr	r3, [r3, #0]
 800a9c6:	781b      	ldrb	r3, [r3, #0]
 800a9c8:	011a      	lsls	r2, r3, #4
 800a9ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a9cc:	4413      	add	r3, r2
 800a9ce:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a9d2:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d112      	bne.n	800aa02 <USB_EPStartXfer+0x8e2>
 800a9dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9de:	881b      	ldrh	r3, [r3, #0]
 800a9e0:	b29b      	uxth	r3, r3
 800a9e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a9e6:	b29a      	uxth	r2, r3
 800a9e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ea:	801a      	strh	r2, [r3, #0]
 800a9ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9ee:	881b      	ldrh	r3, [r3, #0]
 800a9f0:	b29b      	uxth	r3, r3
 800a9f2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a9f6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a9fa:	b29a      	uxth	r2, r3
 800a9fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9fe:	801a      	strh	r2, [r3, #0]
 800aa00:	e05d      	b.n	800aabe <USB_EPStartXfer+0x99e>
 800aa02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa06:	2b3e      	cmp	r3, #62	; 0x3e
 800aa08:	d817      	bhi.n	800aa3a <USB_EPStartXfer+0x91a>
 800aa0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa0e:	085b      	lsrs	r3, r3, #1
 800aa10:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aa14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa18:	f003 0301 	and.w	r3, r3, #1
 800aa1c:	2b00      	cmp	r3, #0
 800aa1e:	d004      	beq.n	800aa2a <USB_EPStartXfer+0x90a>
 800aa20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aa24:	3301      	adds	r3, #1
 800aa26:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aa2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aa2e:	b29b      	uxth	r3, r3
 800aa30:	029b      	lsls	r3, r3, #10
 800aa32:	b29a      	uxth	r2, r3
 800aa34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa36:	801a      	strh	r2, [r3, #0]
 800aa38:	e041      	b.n	800aabe <USB_EPStartXfer+0x99e>
 800aa3a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa3e:	095b      	lsrs	r3, r3, #5
 800aa40:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aa44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa48:	f003 031f 	and.w	r3, r3, #31
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d104      	bne.n	800aa5a <USB_EPStartXfer+0x93a>
 800aa50:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aa54:	3b01      	subs	r3, #1
 800aa56:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800aa5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800aa5e:	b29b      	uxth	r3, r3
 800aa60:	029b      	lsls	r3, r3, #10
 800aa62:	b29b      	uxth	r3, r3
 800aa64:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa68:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aa6c:	b29a      	uxth	r2, r3
 800aa6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa70:	801a      	strh	r2, [r3, #0]
 800aa72:	e024      	b.n	800aabe <USB_EPStartXfer+0x99e>
 800aa74:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa78:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	785b      	ldrb	r3, [r3, #1]
 800aa80:	2b01      	cmp	r3, #1
 800aa82:	d11c      	bne.n	800aabe <USB_EPStartXfer+0x99e>
 800aa84:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa88:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa8c:	681b      	ldr	r3, [r3, #0]
 800aa8e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa92:	b29b      	uxth	r3, r3
 800aa94:	461a      	mov	r2, r3
 800aa96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aa98:	4413      	add	r3, r2
 800aa9a:	643b      	str	r3, [r7, #64]	; 0x40
 800aa9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aaa0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	781b      	ldrb	r3, [r3, #0]
 800aaa8:	011a      	lsls	r2, r3, #4
 800aaaa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800aaac:	4413      	add	r3, r2
 800aaae:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aab2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800aab4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aab8:	b29a      	uxth	r2, r3
 800aaba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800aabc:	801a      	strh	r2, [r3, #0]
 800aabe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aac2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aac6:	681b      	ldr	r3, [r3, #0]
 800aac8:	895b      	ldrh	r3, [r3, #10]
 800aaca:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800aace:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	6959      	ldr	r1, [r3, #20]
 800aada:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aade:	b29b      	uxth	r3, r3
 800aae0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800aae4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800aae8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800aaec:	6800      	ldr	r0, [r0, #0]
 800aaee:	f001 fa78 	bl	800bfe2 <USB_WritePMA>
 800aaf2:	f000 bc5a 	b.w	800b3aa <USB_EPStartXfer+0x128a>
 800aaf6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aafa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	6a1b      	ldr	r3, [r3, #32]
 800ab02:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ab06:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab0a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab0e:	681a      	ldr	r2, [r3, #0]
 800ab10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab18:	681b      	ldr	r3, [r3, #0]
 800ab1a:	781b      	ldrb	r3, [r3, #0]
 800ab1c:	009b      	lsls	r3, r3, #2
 800ab1e:	4413      	add	r3, r2
 800ab20:	881b      	ldrh	r3, [r3, #0]
 800ab22:	b29b      	uxth	r3, r3
 800ab24:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800ab28:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab2c:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800ab30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab38:	681a      	ldr	r2, [r3, #0]
 800ab3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	781b      	ldrb	r3, [r3, #0]
 800ab46:	009b      	lsls	r3, r3, #2
 800ab48:	441a      	add	r2, r3
 800ab4a:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800ab4e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ab52:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ab56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800ab5a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ab5e:	b29b      	uxth	r3, r3
 800ab60:	8013      	strh	r3, [r2, #0]
 800ab62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab6a:	681b      	ldr	r3, [r3, #0]
 800ab6c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab6e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab72:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab7c:	b29b      	uxth	r3, r3
 800ab7e:	461a      	mov	r2, r3
 800ab80:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab82:	4413      	add	r3, r2
 800ab84:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ab86:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab8a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab8e:	681b      	ldr	r3, [r3, #0]
 800ab90:	781b      	ldrb	r3, [r3, #0]
 800ab92:	011a      	lsls	r2, r3, #4
 800ab94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ab96:	4413      	add	r3, r2
 800ab98:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ab9c:	65bb      	str	r3, [r7, #88]	; 0x58
 800ab9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aba2:	b29a      	uxth	r2, r3
 800aba4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800aba6:	801a      	strh	r2, [r3, #0]
 800aba8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	891b      	ldrh	r3, [r3, #8]
 800abb4:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800abb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abbc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	6959      	ldr	r1, [r3, #20]
 800abc4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abc8:	b29b      	uxth	r3, r3
 800abca:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800abce:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800abd2:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800abd6:	6800      	ldr	r0, [r0, #0]
 800abd8:	f001 fa03 	bl	800bfe2 <USB_WritePMA>
 800abdc:	e3e5      	b.n	800b3aa <USB_EPStartXfer+0x128a>
 800abde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800abe6:	681a      	ldr	r2, [r3, #0]
 800abe8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abec:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abf0:	681b      	ldr	r3, [r3, #0]
 800abf2:	781b      	ldrb	r3, [r3, #0]
 800abf4:	009b      	lsls	r3, r3, #2
 800abf6:	4413      	add	r3, r2
 800abf8:	881b      	ldrh	r3, [r3, #0]
 800abfa:	b29b      	uxth	r3, r3
 800abfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800ac00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ac04:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800ac08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac0c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac16:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac1a:	681b      	ldr	r3, [r3, #0]
 800ac1c:	781b      	ldrb	r3, [r3, #0]
 800ac1e:	009b      	lsls	r3, r3, #2
 800ac20:	441a      	add	r2, r3
 800ac22:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800ac26:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800ac2a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800ac2e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800ac32:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ac36:	b29b      	uxth	r3, r3
 800ac38:	8013      	strh	r3, [r2, #0]
 800ac3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	6a1a      	ldr	r2, [r3, #32]
 800ac46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac4a:	1ad2      	subs	r2, r2, r3
 800ac4c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac50:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	621a      	str	r2, [r3, #32]
 800ac58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac5c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac60:	681a      	ldr	r2, [r3, #0]
 800ac62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	781b      	ldrb	r3, [r3, #0]
 800ac6e:	009b      	lsls	r3, r3, #2
 800ac70:	4413      	add	r3, r2
 800ac72:	881b      	ldrh	r3, [r3, #0]
 800ac74:	b29b      	uxth	r3, r3
 800ac76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ac7a:	2b00      	cmp	r3, #0
 800ac7c:	f000 81bc 	beq.w	800aff8 <USB_EPStartXfer+0xed8>
 800ac80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac84:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ac8e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac92:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	785b      	ldrb	r3, [r3, #1]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d16d      	bne.n	800ad7a <USB_EPStartXfer+0xc5a>
 800ac9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aca2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	67bb      	str	r3, [r7, #120]	; 0x78
 800acaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800acb2:	681b      	ldr	r3, [r3, #0]
 800acb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800acb8:	b29b      	uxth	r3, r3
 800acba:	461a      	mov	r2, r3
 800acbc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acbe:	4413      	add	r3, r2
 800acc0:	67bb      	str	r3, [r7, #120]	; 0x78
 800acc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800acc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	781b      	ldrb	r3, [r3, #0]
 800acce:	011a      	lsls	r2, r3, #4
 800acd0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800acd2:	4413      	add	r3, r2
 800acd4:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800acd8:	677b      	str	r3, [r7, #116]	; 0x74
 800acda:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acde:	2b00      	cmp	r3, #0
 800ace0:	d112      	bne.n	800ad08 <USB_EPStartXfer+0xbe8>
 800ace2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ace4:	881b      	ldrh	r3, [r3, #0]
 800ace6:	b29b      	uxth	r3, r3
 800ace8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800acec:	b29a      	uxth	r2, r3
 800acee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acf0:	801a      	strh	r2, [r3, #0]
 800acf2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800acf4:	881b      	ldrh	r3, [r3, #0]
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800acfc:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad00:	b29a      	uxth	r2, r3
 800ad02:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad04:	801a      	strh	r2, [r3, #0]
 800ad06:	e060      	b.n	800adca <USB_EPStartXfer+0xcaa>
 800ad08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad0c:	2b3e      	cmp	r3, #62	; 0x3e
 800ad0e:	d817      	bhi.n	800ad40 <USB_EPStartXfer+0xc20>
 800ad10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad14:	085b      	lsrs	r3, r3, #1
 800ad16:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ad1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad1e:	f003 0301 	and.w	r3, r3, #1
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d004      	beq.n	800ad30 <USB_EPStartXfer+0xc10>
 800ad26:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ad2a:	3301      	adds	r3, #1
 800ad2c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ad30:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ad34:	b29b      	uxth	r3, r3
 800ad36:	029b      	lsls	r3, r3, #10
 800ad38:	b29a      	uxth	r2, r3
 800ad3a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad3c:	801a      	strh	r2, [r3, #0]
 800ad3e:	e044      	b.n	800adca <USB_EPStartXfer+0xcaa>
 800ad40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad44:	095b      	lsrs	r3, r3, #5
 800ad46:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ad4a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad4e:	f003 031f 	and.w	r3, r3, #31
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d104      	bne.n	800ad60 <USB_EPStartXfer+0xc40>
 800ad56:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ad5a:	3b01      	subs	r3, #1
 800ad5c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ad60:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	029b      	lsls	r3, r3, #10
 800ad68:	b29b      	uxth	r3, r3
 800ad6a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad6e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad72:	b29a      	uxth	r2, r3
 800ad74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ad76:	801a      	strh	r2, [r3, #0]
 800ad78:	e027      	b.n	800adca <USB_EPStartXfer+0xcaa>
 800ad7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad82:	681b      	ldr	r3, [r3, #0]
 800ad84:	785b      	ldrb	r3, [r3, #1]
 800ad86:	2b01      	cmp	r3, #1
 800ad88:	d11f      	bne.n	800adca <USB_EPStartXfer+0xcaa>
 800ad8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad8e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad92:	681b      	ldr	r3, [r3, #0]
 800ad94:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad98:	b29b      	uxth	r3, r3
 800ad9a:	461a      	mov	r2, r3
 800ad9c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ada0:	4413      	add	r3, r2
 800ada2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ada6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adaa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adae:	681b      	ldr	r3, [r3, #0]
 800adb0:	781b      	ldrb	r3, [r3, #0]
 800adb2:	011a      	lsls	r2, r3, #4
 800adb4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800adb8:	4413      	add	r3, r2
 800adba:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800adbe:	67fb      	str	r3, [r7, #124]	; 0x7c
 800adc0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adc4:	b29a      	uxth	r2, r3
 800adc6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800adc8:	801a      	strh	r2, [r3, #0]
 800adca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800add2:	681b      	ldr	r3, [r3, #0]
 800add4:	895b      	ldrh	r3, [r3, #10]
 800add6:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800adda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adde:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	6959      	ldr	r1, [r3, #20]
 800ade6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adea:	b29b      	uxth	r3, r3
 800adec:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800adf0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800adf4:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800adf8:	6800      	ldr	r0, [r0, #0]
 800adfa:	f001 f8f2 	bl	800bfe2 <USB_WritePMA>
 800adfe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae02:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	695a      	ldr	r2, [r3, #20]
 800ae0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae0e:	441a      	add	r2, r3
 800ae10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae14:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	615a      	str	r2, [r3, #20]
 800ae1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae24:	681b      	ldr	r3, [r3, #0]
 800ae26:	6a1a      	ldr	r2, [r3, #32]
 800ae28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae2c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	691b      	ldr	r3, [r3, #16]
 800ae34:	429a      	cmp	r2, r3
 800ae36:	d90f      	bls.n	800ae58 <USB_EPStartXfer+0xd38>
 800ae38:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae3c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	6a1a      	ldr	r2, [r3, #32]
 800ae44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae48:	1ad2      	subs	r2, r2, r3
 800ae4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae4e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	621a      	str	r2, [r3, #32]
 800ae56:	e00e      	b.n	800ae76 <USB_EPStartXfer+0xd56>
 800ae58:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae5c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae60:	681b      	ldr	r3, [r3, #0]
 800ae62:	6a1b      	ldr	r3, [r3, #32]
 800ae64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ae68:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae6c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	2200      	movs	r2, #0
 800ae74:	621a      	str	r2, [r3, #32]
 800ae76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae7a:	2b00      	cmp	r3, #0
 800ae7c:	f000 8295 	beq.w	800b3aa <USB_EPStartXfer+0x128a>
 800ae80:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae84:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	785b      	ldrb	r3, [r3, #1]
 800ae8c:	2b00      	cmp	r3, #0
 800ae8e:	d16d      	bne.n	800af6c <USB_EPStartXfer+0xe4c>
 800ae90:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae94:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ae9c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aea0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aea4:	681b      	ldr	r3, [r3, #0]
 800aea6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aeaa:	b29b      	uxth	r3, r3
 800aeac:	461a      	mov	r2, r3
 800aeae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aeb0:	4413      	add	r3, r2
 800aeb2:	66bb      	str	r3, [r7, #104]	; 0x68
 800aeb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aeb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	781b      	ldrb	r3, [r3, #0]
 800aec0:	011a      	lsls	r2, r3, #4
 800aec2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800aec4:	4413      	add	r3, r2
 800aec6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aeca:	667b      	str	r3, [r7, #100]	; 0x64
 800aecc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aed0:	2b00      	cmp	r3, #0
 800aed2:	d112      	bne.n	800aefa <USB_EPStartXfer+0xdda>
 800aed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aed6:	881b      	ldrh	r3, [r3, #0]
 800aed8:	b29b      	uxth	r3, r3
 800aeda:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aede:	b29a      	uxth	r2, r3
 800aee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aee2:	801a      	strh	r2, [r3, #0]
 800aee4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aee6:	881b      	ldrh	r3, [r3, #0]
 800aee8:	b29b      	uxth	r3, r3
 800aeea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aeee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aef2:	b29a      	uxth	r2, r3
 800aef4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800aef6:	801a      	strh	r2, [r3, #0]
 800aef8:	e063      	b.n	800afc2 <USB_EPStartXfer+0xea2>
 800aefa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aefe:	2b3e      	cmp	r3, #62	; 0x3e
 800af00:	d817      	bhi.n	800af32 <USB_EPStartXfer+0xe12>
 800af02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af06:	085b      	lsrs	r3, r3, #1
 800af08:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800af0c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af10:	f003 0301 	and.w	r3, r3, #1
 800af14:	2b00      	cmp	r3, #0
 800af16:	d004      	beq.n	800af22 <USB_EPStartXfer+0xe02>
 800af18:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af1c:	3301      	adds	r3, #1
 800af1e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800af22:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af26:	b29b      	uxth	r3, r3
 800af28:	029b      	lsls	r3, r3, #10
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af2e:	801a      	strh	r2, [r3, #0]
 800af30:	e047      	b.n	800afc2 <USB_EPStartXfer+0xea2>
 800af32:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af36:	095b      	lsrs	r3, r3, #5
 800af38:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800af3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af40:	f003 031f 	and.w	r3, r3, #31
 800af44:	2b00      	cmp	r3, #0
 800af46:	d104      	bne.n	800af52 <USB_EPStartXfer+0xe32>
 800af48:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af4c:	3b01      	subs	r3, #1
 800af4e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800af52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800af56:	b29b      	uxth	r3, r3
 800af58:	029b      	lsls	r3, r3, #10
 800af5a:	b29b      	uxth	r3, r3
 800af5c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800af60:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800af64:	b29a      	uxth	r2, r3
 800af66:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800af68:	801a      	strh	r2, [r3, #0]
 800af6a:	e02a      	b.n	800afc2 <USB_EPStartXfer+0xea2>
 800af6c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af70:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af74:	681b      	ldr	r3, [r3, #0]
 800af76:	785b      	ldrb	r3, [r3, #1]
 800af78:	2b01      	cmp	r3, #1
 800af7a:	d122      	bne.n	800afc2 <USB_EPStartXfer+0xea2>
 800af7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af80:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	673b      	str	r3, [r7, #112]	; 0x70
 800af88:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af8c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800af96:	b29b      	uxth	r3, r3
 800af98:	461a      	mov	r2, r3
 800af9a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800af9c:	4413      	add	r3, r2
 800af9e:	673b      	str	r3, [r7, #112]	; 0x70
 800afa0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afa4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	781b      	ldrb	r3, [r3, #0]
 800afac:	011a      	lsls	r2, r3, #4
 800afae:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800afb0:	4413      	add	r3, r2
 800afb2:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800afb6:	66fb      	str	r3, [r7, #108]	; 0x6c
 800afb8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afbc:	b29a      	uxth	r2, r3
 800afbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800afc0:	801a      	strh	r2, [r3, #0]
 800afc2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afc6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afca:	681b      	ldr	r3, [r3, #0]
 800afcc:	891b      	ldrh	r3, [r3, #8]
 800afce:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800afd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afd6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afda:	681b      	ldr	r3, [r3, #0]
 800afdc:	6959      	ldr	r1, [r3, #20]
 800afde:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afe2:	b29b      	uxth	r3, r3
 800afe4:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800afe8:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800afec:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800aff0:	6800      	ldr	r0, [r0, #0]
 800aff2:	f000 fff6 	bl	800bfe2 <USB_WritePMA>
 800aff6:	e1d8      	b.n	800b3aa <USB_EPStartXfer+0x128a>
 800aff8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800affc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	785b      	ldrb	r3, [r3, #1]
 800b004:	2b00      	cmp	r3, #0
 800b006:	d178      	bne.n	800b0fa <USB_EPStartXfer+0xfda>
 800b008:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b00c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b010:	681b      	ldr	r3, [r3, #0]
 800b012:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b016:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b01a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b01e:	681b      	ldr	r3, [r3, #0]
 800b020:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b024:	b29b      	uxth	r3, r3
 800b026:	461a      	mov	r2, r3
 800b028:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b02c:	4413      	add	r3, r2
 800b02e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800b032:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b036:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	781b      	ldrb	r3, [r3, #0]
 800b03e:	011a      	lsls	r2, r3, #4
 800b040:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800b044:	4413      	add	r3, r2
 800b046:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b04a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800b04e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b052:	2b00      	cmp	r3, #0
 800b054:	d116      	bne.n	800b084 <USB_EPStartXfer+0xf64>
 800b056:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b05a:	881b      	ldrh	r3, [r3, #0]
 800b05c:	b29b      	uxth	r3, r3
 800b05e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b062:	b29a      	uxth	r2, r3
 800b064:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b068:	801a      	strh	r2, [r3, #0]
 800b06a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b06e:	881b      	ldrh	r3, [r3, #0]
 800b070:	b29b      	uxth	r3, r3
 800b072:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b076:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b07a:	b29a      	uxth	r2, r3
 800b07c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b080:	801a      	strh	r2, [r3, #0]
 800b082:	e06b      	b.n	800b15c <USB_EPStartXfer+0x103c>
 800b084:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b088:	2b3e      	cmp	r3, #62	; 0x3e
 800b08a:	d818      	bhi.n	800b0be <USB_EPStartXfer+0xf9e>
 800b08c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b090:	085b      	lsrs	r3, r3, #1
 800b092:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b096:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b09a:	f003 0301 	and.w	r3, r3, #1
 800b09e:	2b00      	cmp	r3, #0
 800b0a0:	d004      	beq.n	800b0ac <USB_EPStartXfer+0xf8c>
 800b0a2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0a6:	3301      	adds	r3, #1
 800b0a8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b0ac:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0b0:	b29b      	uxth	r3, r3
 800b0b2:	029b      	lsls	r3, r3, #10
 800b0b4:	b29a      	uxth	r2, r3
 800b0b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0ba:	801a      	strh	r2, [r3, #0]
 800b0bc:	e04e      	b.n	800b15c <USB_EPStartXfer+0x103c>
 800b0be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0c2:	095b      	lsrs	r3, r3, #5
 800b0c4:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b0c8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b0cc:	f003 031f 	and.w	r3, r3, #31
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	d104      	bne.n	800b0de <USB_EPStartXfer+0xfbe>
 800b0d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0d8:	3b01      	subs	r3, #1
 800b0da:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800b0de:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	029b      	lsls	r3, r3, #10
 800b0e6:	b29b      	uxth	r3, r3
 800b0e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0f0:	b29a      	uxth	r2, r3
 800b0f2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800b0f6:	801a      	strh	r2, [r3, #0]
 800b0f8:	e030      	b.n	800b15c <USB_EPStartXfer+0x103c>
 800b0fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b102:	681b      	ldr	r3, [r3, #0]
 800b104:	785b      	ldrb	r3, [r3, #1]
 800b106:	2b01      	cmp	r3, #1
 800b108:	d128      	bne.n	800b15c <USB_EPStartXfer+0x103c>
 800b10a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b10e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b118:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b11c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b126:	b29b      	uxth	r3, r3
 800b128:	461a      	mov	r2, r3
 800b12a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b12e:	4413      	add	r3, r2
 800b130:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800b134:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b138:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b13c:	681b      	ldr	r3, [r3, #0]
 800b13e:	781b      	ldrb	r3, [r3, #0]
 800b140:	011a      	lsls	r2, r3, #4
 800b142:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800b146:	4413      	add	r3, r2
 800b148:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b14c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800b150:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b154:	b29a      	uxth	r2, r3
 800b156:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800b15a:	801a      	strh	r2, [r3, #0]
 800b15c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b160:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	891b      	ldrh	r3, [r3, #8]
 800b168:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800b16c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b170:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b174:	681b      	ldr	r3, [r3, #0]
 800b176:	6959      	ldr	r1, [r3, #20]
 800b178:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b17c:	b29b      	uxth	r3, r3
 800b17e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b182:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b186:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b18a:	6800      	ldr	r0, [r0, #0]
 800b18c:	f000 ff29 	bl	800bfe2 <USB_WritePMA>
 800b190:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b194:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	695a      	ldr	r2, [r3, #20]
 800b19c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1a0:	441a      	add	r2, r3
 800b1a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	615a      	str	r2, [r3, #20]
 800b1ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1b6:	681b      	ldr	r3, [r3, #0]
 800b1b8:	6a1a      	ldr	r2, [r3, #32]
 800b1ba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1be:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	691b      	ldr	r3, [r3, #16]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d90f      	bls.n	800b1ea <USB_EPStartXfer+0x10ca>
 800b1ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1d2:	681b      	ldr	r3, [r3, #0]
 800b1d4:	6a1a      	ldr	r2, [r3, #32]
 800b1d6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b1da:	1ad2      	subs	r2, r2, r3
 800b1dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	621a      	str	r2, [r3, #32]
 800b1e8:	e00e      	b.n	800b208 <USB_EPStartXfer+0x10e8>
 800b1ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1f2:	681b      	ldr	r3, [r3, #0]
 800b1f4:	6a1b      	ldr	r3, [r3, #32]
 800b1f6:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b1fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	2200      	movs	r2, #0
 800b206:	621a      	str	r2, [r3, #32]
 800b208:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	f000 80cc 	beq.w	800b3aa <USB_EPStartXfer+0x128a>
 800b212:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b216:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b21a:	681b      	ldr	r3, [r3, #0]
 800b21c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b220:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b224:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	785b      	ldrb	r3, [r3, #1]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d178      	bne.n	800b322 <USB_EPStartXfer+0x1202>
 800b230:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b234:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b238:	681b      	ldr	r3, [r3, #0]
 800b23a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b23e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b242:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b246:	681b      	ldr	r3, [r3, #0]
 800b248:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b24c:	b29b      	uxth	r3, r3
 800b24e:	461a      	mov	r2, r3
 800b250:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b254:	4413      	add	r3, r2
 800b256:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800b25a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b25e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	781b      	ldrb	r3, [r3, #0]
 800b266:	011a      	lsls	r2, r3, #4
 800b268:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b26c:	4413      	add	r3, r2
 800b26e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b272:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b276:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b27a:	2b00      	cmp	r3, #0
 800b27c:	d116      	bne.n	800b2ac <USB_EPStartXfer+0x118c>
 800b27e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b282:	881b      	ldrh	r3, [r3, #0]
 800b284:	b29b      	uxth	r3, r3
 800b286:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b28a:	b29a      	uxth	r2, r3
 800b28c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b290:	801a      	strh	r2, [r3, #0]
 800b292:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b296:	881b      	ldrh	r3, [r3, #0]
 800b298:	b29b      	uxth	r3, r3
 800b29a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b29e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2a2:	b29a      	uxth	r2, r3
 800b2a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2a8:	801a      	strh	r2, [r3, #0]
 800b2aa:	e064      	b.n	800b376 <USB_EPStartXfer+0x1256>
 800b2ac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2b0:	2b3e      	cmp	r3, #62	; 0x3e
 800b2b2:	d818      	bhi.n	800b2e6 <USB_EPStartXfer+0x11c6>
 800b2b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2b8:	085b      	lsrs	r3, r3, #1
 800b2ba:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2c2:	f003 0301 	and.w	r3, r3, #1
 800b2c6:	2b00      	cmp	r3, #0
 800b2c8:	d004      	beq.n	800b2d4 <USB_EPStartXfer+0x11b4>
 800b2ca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2ce:	3301      	adds	r3, #1
 800b2d0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2d4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b2d8:	b29b      	uxth	r3, r3
 800b2da:	029b      	lsls	r3, r3, #10
 800b2dc:	b29a      	uxth	r2, r3
 800b2de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b2e2:	801a      	strh	r2, [r3, #0]
 800b2e4:	e047      	b.n	800b376 <USB_EPStartXfer+0x1256>
 800b2e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ea:	095b      	lsrs	r3, r3, #5
 800b2ec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b2f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2f4:	f003 031f 	and.w	r3, r3, #31
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d104      	bne.n	800b306 <USB_EPStartXfer+0x11e6>
 800b2fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b300:	3b01      	subs	r3, #1
 800b302:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b306:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	029b      	lsls	r3, r3, #10
 800b30e:	b29b      	uxth	r3, r3
 800b310:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b314:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b318:	b29a      	uxth	r2, r3
 800b31a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b31e:	801a      	strh	r2, [r3, #0]
 800b320:	e029      	b.n	800b376 <USB_EPStartXfer+0x1256>
 800b322:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b326:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	785b      	ldrb	r3, [r3, #1]
 800b32e:	2b01      	cmp	r3, #1
 800b330:	d121      	bne.n	800b376 <USB_EPStartXfer+0x1256>
 800b332:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b336:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b33a:	681b      	ldr	r3, [r3, #0]
 800b33c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b340:	b29b      	uxth	r3, r3
 800b342:	461a      	mov	r2, r3
 800b344:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b348:	4413      	add	r3, r2
 800b34a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b34e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b352:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	781b      	ldrb	r3, [r3, #0]
 800b35a:	011a      	lsls	r2, r3, #4
 800b35c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b360:	4413      	add	r3, r2
 800b362:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b366:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b36a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b36e:	b29a      	uxth	r2, r3
 800b370:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b374:	801a      	strh	r2, [r3, #0]
 800b376:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b37a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b37e:	681b      	ldr	r3, [r3, #0]
 800b380:	895b      	ldrh	r3, [r3, #10]
 800b382:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96
 800b386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b38a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	6959      	ldr	r1, [r3, #20]
 800b392:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b396:	b29b      	uxth	r3, r3
 800b398:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b39c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b3a0:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b3a4:	6800      	ldr	r0, [r0, #0]
 800b3a6:	f000 fe1c 	bl	800bfe2 <USB_WritePMA>
 800b3aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	781b      	ldrb	r3, [r3, #0]
 800b3c0:	009b      	lsls	r3, r3, #2
 800b3c2:	4413      	add	r3, r2
 800b3c4:	881b      	ldrh	r3, [r3, #0]
 800b3c6:	b29b      	uxth	r3, r3
 800b3c8:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b3cc:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b3d0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b3d8:	8013      	strh	r3, [r2, #0]
 800b3da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3de:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b3e2:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b3e6:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b3ea:	8812      	ldrh	r2, [r2, #0]
 800b3ec:	f082 0210 	eor.w	r2, r2, #16
 800b3f0:	801a      	strh	r2, [r3, #0]
 800b3f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3f6:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b3fa:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b3fe:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b402:	8812      	ldrh	r2, [r2, #0]
 800b404:	f082 0220 	eor.w	r2, r2, #32
 800b408:	801a      	strh	r2, [r3, #0]
 800b40a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b40e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b412:	681a      	ldr	r2, [r3, #0]
 800b414:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b418:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	781b      	ldrb	r3, [r3, #0]
 800b420:	009b      	lsls	r3, r3, #2
 800b422:	441a      	add	r2, r3
 800b424:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b428:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b42c:	881b      	ldrh	r3, [r3, #0]
 800b42e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b432:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b436:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b43a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b43e:	b29b      	uxth	r3, r3
 800b440:	8013      	strh	r3, [r2, #0]
 800b442:	f000 bc9f 	b.w	800bd84 <USB_EPStartXfer+0x1c64>
 800b446:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b44a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	7b1b      	ldrb	r3, [r3, #12]
 800b452:	2b00      	cmp	r3, #0
 800b454:	f040 80ae 	bne.w	800b5b4 <USB_EPStartXfer+0x1494>
 800b458:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b45c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b460:	681b      	ldr	r3, [r3, #0]
 800b462:	699a      	ldr	r2, [r3, #24]
 800b464:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b468:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	691b      	ldr	r3, [r3, #16]
 800b470:	429a      	cmp	r2, r3
 800b472:	d917      	bls.n	800b4a4 <USB_EPStartXfer+0x1384>
 800b474:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b478:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	691b      	ldr	r3, [r3, #16]
 800b480:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b484:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b488:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b48c:	681b      	ldr	r3, [r3, #0]
 800b48e:	699a      	ldr	r2, [r3, #24]
 800b490:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b494:	1ad2      	subs	r2, r2, r3
 800b496:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b49a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b49e:	681b      	ldr	r3, [r3, #0]
 800b4a0:	619a      	str	r2, [r3, #24]
 800b4a2:	e00e      	b.n	800b4c2 <USB_EPStartXfer+0x13a2>
 800b4a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	699b      	ldr	r3, [r3, #24]
 800b4b0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800b4b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2200      	movs	r2, #0
 800b4c0:	619a      	str	r2, [r3, #24]
 800b4c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4c6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4d8:	681b      	ldr	r3, [r3, #0]
 800b4da:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4de:	b29b      	uxth	r3, r3
 800b4e0:	461a      	mov	r2, r3
 800b4e2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b4ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4f4:	681b      	ldr	r3, [r3, #0]
 800b4f6:	781b      	ldrb	r3, [r3, #0]
 800b4f8:	011a      	lsls	r2, r3, #4
 800b4fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b4fe:	4413      	add	r3, r2
 800b500:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b504:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b508:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b50c:	2b00      	cmp	r3, #0
 800b50e:	d116      	bne.n	800b53e <USB_EPStartXfer+0x141e>
 800b510:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b514:	881b      	ldrh	r3, [r3, #0]
 800b516:	b29b      	uxth	r3, r3
 800b518:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b51c:	b29a      	uxth	r2, r3
 800b51e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b522:	801a      	strh	r2, [r3, #0]
 800b524:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b528:	881b      	ldrh	r3, [r3, #0]
 800b52a:	b29b      	uxth	r3, r3
 800b52c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b530:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b534:	b29a      	uxth	r2, r3
 800b536:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b53a:	801a      	strh	r2, [r3, #0]
 800b53c:	e3e8      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800b53e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b542:	2b3e      	cmp	r3, #62	; 0x3e
 800b544:	d818      	bhi.n	800b578 <USB_EPStartXfer+0x1458>
 800b546:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b54a:	085b      	lsrs	r3, r3, #1
 800b54c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b550:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b554:	f003 0301 	and.w	r3, r3, #1
 800b558:	2b00      	cmp	r3, #0
 800b55a:	d004      	beq.n	800b566 <USB_EPStartXfer+0x1446>
 800b55c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b560:	3301      	adds	r3, #1
 800b562:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b566:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	029b      	lsls	r3, r3, #10
 800b56e:	b29a      	uxth	r2, r3
 800b570:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b574:	801a      	strh	r2, [r3, #0]
 800b576:	e3cb      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800b578:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b57c:	095b      	lsrs	r3, r3, #5
 800b57e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b582:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b586:	f003 031f 	and.w	r3, r3, #31
 800b58a:	2b00      	cmp	r3, #0
 800b58c:	d104      	bne.n	800b598 <USB_EPStartXfer+0x1478>
 800b58e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b592:	3b01      	subs	r3, #1
 800b594:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b598:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b59c:	b29b      	uxth	r3, r3
 800b59e:	029b      	lsls	r3, r3, #10
 800b5a0:	b29b      	uxth	r3, r3
 800b5a2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b5a6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b5b0:	801a      	strh	r2, [r3, #0]
 800b5b2:	e3ad      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800b5b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5bc:	681b      	ldr	r3, [r3, #0]
 800b5be:	78db      	ldrb	r3, [r3, #3]
 800b5c0:	2b02      	cmp	r3, #2
 800b5c2:	f040 8200 	bne.w	800b9c6 <USB_EPStartXfer+0x18a6>
 800b5c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	785b      	ldrb	r3, [r3, #1]
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	f040 8091 	bne.w	800b6fa <USB_EPStartXfer+0x15da>
 800b5d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5dc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5e0:	681b      	ldr	r3, [r3, #0]
 800b5e2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b5e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ea:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b5f4:	b29b      	uxth	r3, r3
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5fc:	4413      	add	r3, r2
 800b5fe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b602:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b606:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	011a      	lsls	r2, r3, #4
 800b610:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b614:	4413      	add	r3, r2
 800b616:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b61a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b61e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b622:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	691b      	ldr	r3, [r3, #16]
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d116      	bne.n	800b65c <USB_EPStartXfer+0x153c>
 800b62e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b632:	881b      	ldrh	r3, [r3, #0]
 800b634:	b29b      	uxth	r3, r3
 800b636:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b63a:	b29a      	uxth	r2, r3
 800b63c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b640:	801a      	strh	r2, [r3, #0]
 800b642:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b646:	881b      	ldrh	r3, [r3, #0]
 800b648:	b29b      	uxth	r3, r3
 800b64a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b64e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b652:	b29a      	uxth	r2, r3
 800b654:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b658:	801a      	strh	r2, [r3, #0]
 800b65a:	e083      	b.n	800b764 <USB_EPStartXfer+0x1644>
 800b65c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b660:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	691b      	ldr	r3, [r3, #16]
 800b668:	2b3e      	cmp	r3, #62	; 0x3e
 800b66a:	d820      	bhi.n	800b6ae <USB_EPStartXfer+0x158e>
 800b66c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b670:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b674:	681b      	ldr	r3, [r3, #0]
 800b676:	691b      	ldr	r3, [r3, #16]
 800b678:	085b      	lsrs	r3, r3, #1
 800b67a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b67e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b682:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b686:	681b      	ldr	r3, [r3, #0]
 800b688:	691b      	ldr	r3, [r3, #16]
 800b68a:	f003 0301 	and.w	r3, r3, #1
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d004      	beq.n	800b69c <USB_EPStartXfer+0x157c>
 800b692:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b696:	3301      	adds	r3, #1
 800b698:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b69c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6a0:	b29b      	uxth	r3, r3
 800b6a2:	029b      	lsls	r3, r3, #10
 800b6a4:	b29a      	uxth	r2, r3
 800b6a6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6aa:	801a      	strh	r2, [r3, #0]
 800b6ac:	e05a      	b.n	800b764 <USB_EPStartXfer+0x1644>
 800b6ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6b6:	681b      	ldr	r3, [r3, #0]
 800b6b8:	691b      	ldr	r3, [r3, #16]
 800b6ba:	095b      	lsrs	r3, r3, #5
 800b6bc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b6c0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6c4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	691b      	ldr	r3, [r3, #16]
 800b6cc:	f003 031f 	and.w	r3, r3, #31
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	d104      	bne.n	800b6de <USB_EPStartXfer+0x15be>
 800b6d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6d8:	3b01      	subs	r3, #1
 800b6da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b6de:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b6e2:	b29b      	uxth	r3, r3
 800b6e4:	029b      	lsls	r3, r3, #10
 800b6e6:	b29b      	uxth	r3, r3
 800b6e8:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b6ec:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b6f0:	b29a      	uxth	r2, r3
 800b6f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6f6:	801a      	strh	r2, [r3, #0]
 800b6f8:	e034      	b.n	800b764 <USB_EPStartXfer+0x1644>
 800b6fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b702:	681b      	ldr	r3, [r3, #0]
 800b704:	785b      	ldrb	r3, [r3, #1]
 800b706:	2b01      	cmp	r3, #1
 800b708:	d12c      	bne.n	800b764 <USB_EPStartXfer+0x1644>
 800b70a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b70e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b718:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b71c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b720:	681b      	ldr	r3, [r3, #0]
 800b722:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b726:	b29b      	uxth	r3, r3
 800b728:	461a      	mov	r2, r3
 800b72a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b72e:	4413      	add	r3, r2
 800b730:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b734:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b738:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b73c:	681b      	ldr	r3, [r3, #0]
 800b73e:	781b      	ldrb	r3, [r3, #0]
 800b740:	011a      	lsls	r2, r3, #4
 800b742:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b746:	4413      	add	r3, r2
 800b748:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b74c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b750:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b754:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b758:	681b      	ldr	r3, [r3, #0]
 800b75a:	691b      	ldr	r3, [r3, #16]
 800b75c:	b29a      	uxth	r2, r3
 800b75e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b762:	801a      	strh	r2, [r3, #0]
 800b764:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b768:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b76c:	681b      	ldr	r3, [r3, #0]
 800b76e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b772:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b776:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	785b      	ldrb	r3, [r3, #1]
 800b77e:	2b00      	cmp	r3, #0
 800b780:	f040 8091 	bne.w	800b8a6 <USB_EPStartXfer+0x1786>
 800b784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b788:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b792:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b796:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b79a:	681b      	ldr	r3, [r3, #0]
 800b79c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b7a0:	b29b      	uxth	r3, r3
 800b7a2:	461a      	mov	r2, r3
 800b7a4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b7a8:	4413      	add	r3, r2
 800b7aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b7ae:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7b2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	781b      	ldrb	r3, [r3, #0]
 800b7ba:	011a      	lsls	r2, r3, #4
 800b7bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b7c0:	4413      	add	r3, r2
 800b7c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b7c6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b7ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	691b      	ldr	r3, [r3, #16]
 800b7d6:	2b00      	cmp	r3, #0
 800b7d8:	d116      	bne.n	800b808 <USB_EPStartXfer+0x16e8>
 800b7da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7de:	881b      	ldrh	r3, [r3, #0]
 800b7e0:	b29b      	uxth	r3, r3
 800b7e2:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b7e6:	b29a      	uxth	r2, r3
 800b7e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7ec:	801a      	strh	r2, [r3, #0]
 800b7ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b7f2:	881b      	ldrh	r3, [r3, #0]
 800b7f4:	b29b      	uxth	r3, r3
 800b7f6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b7fa:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b7fe:	b29a      	uxth	r2, r3
 800b800:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b804:	801a      	strh	r2, [r3, #0]
 800b806:	e07c      	b.n	800b902 <USB_EPStartXfer+0x17e2>
 800b808:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b80c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b810:	681b      	ldr	r3, [r3, #0]
 800b812:	691b      	ldr	r3, [r3, #16]
 800b814:	2b3e      	cmp	r3, #62	; 0x3e
 800b816:	d820      	bhi.n	800b85a <USB_EPStartXfer+0x173a>
 800b818:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b81c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b820:	681b      	ldr	r3, [r3, #0]
 800b822:	691b      	ldr	r3, [r3, #16]
 800b824:	085b      	lsrs	r3, r3, #1
 800b826:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b82a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b82e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b832:	681b      	ldr	r3, [r3, #0]
 800b834:	691b      	ldr	r3, [r3, #16]
 800b836:	f003 0301 	and.w	r3, r3, #1
 800b83a:	2b00      	cmp	r3, #0
 800b83c:	d004      	beq.n	800b848 <USB_EPStartXfer+0x1728>
 800b83e:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b842:	3301      	adds	r3, #1
 800b844:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b848:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b84c:	b29b      	uxth	r3, r3
 800b84e:	029b      	lsls	r3, r3, #10
 800b850:	b29a      	uxth	r2, r3
 800b852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b856:	801a      	strh	r2, [r3, #0]
 800b858:	e053      	b.n	800b902 <USB_EPStartXfer+0x17e2>
 800b85a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b85e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	691b      	ldr	r3, [r3, #16]
 800b866:	095b      	lsrs	r3, r3, #5
 800b868:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b86c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b870:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	691b      	ldr	r3, [r3, #16]
 800b878:	f003 031f 	and.w	r3, r3, #31
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	d104      	bne.n	800b88a <USB_EPStartXfer+0x176a>
 800b880:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b884:	3b01      	subs	r3, #1
 800b886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b88a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b88e:	b29b      	uxth	r3, r3
 800b890:	029b      	lsls	r3, r3, #10
 800b892:	b29b      	uxth	r3, r3
 800b894:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b898:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b89c:	b29a      	uxth	r2, r3
 800b89e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b8a2:	801a      	strh	r2, [r3, #0]
 800b8a4:	e02d      	b.n	800b902 <USB_EPStartXfer+0x17e2>
 800b8a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8aa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	785b      	ldrb	r3, [r3, #1]
 800b8b2:	2b01      	cmp	r3, #1
 800b8b4:	d125      	bne.n	800b902 <USB_EPStartXfer+0x17e2>
 800b8b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8ba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b8c4:	b29b      	uxth	r3, r3
 800b8c6:	461a      	mov	r2, r3
 800b8c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b8cc:	4413      	add	r3, r2
 800b8ce:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b8d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8d6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8da:	681b      	ldr	r3, [r3, #0]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	011a      	lsls	r2, r3, #4
 800b8e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b8e4:	4413      	add	r3, r2
 800b8e6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b8ea:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b8ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	691b      	ldr	r3, [r3, #16]
 800b8fa:	b29a      	uxth	r2, r3
 800b8fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b900:	801a      	strh	r2, [r3, #0]
 800b902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b906:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	69db      	ldr	r3, [r3, #28]
 800b90e:	2b00      	cmp	r3, #0
 800b910:	f000 81fe 	beq.w	800bd10 <USB_EPStartXfer+0x1bf0>
 800b914:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b918:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b91c:	681a      	ldr	r2, [r3, #0]
 800b91e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	009b      	lsls	r3, r3, #2
 800b92c:	4413      	add	r3, r2
 800b92e:	881b      	ldrh	r3, [r3, #0]
 800b930:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6
 800b934:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b938:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b93c:	2b00      	cmp	r3, #0
 800b93e:	d005      	beq.n	800b94c <USB_EPStartXfer+0x182c>
 800b940:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b944:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b948:	2b00      	cmp	r3, #0
 800b94a:	d10d      	bne.n	800b968 <USB_EPStartXfer+0x1848>
 800b94c:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b950:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b954:	2b00      	cmp	r3, #0
 800b956:	f040 81db 	bne.w	800bd10 <USB_EPStartXfer+0x1bf0>
 800b95a:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b95e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b962:	2b00      	cmp	r3, #0
 800b964:	f040 81d4 	bne.w	800bd10 <USB_EPStartXfer+0x1bf0>
 800b968:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b96c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b970:	681a      	ldr	r2, [r3, #0]
 800b972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b976:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	781b      	ldrb	r3, [r3, #0]
 800b97e:	009b      	lsls	r3, r3, #2
 800b980:	4413      	add	r3, r2
 800b982:	881b      	ldrh	r3, [r3, #0]
 800b984:	b29b      	uxth	r3, r3
 800b986:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b98a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b98e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800b992:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b996:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b99a:	681a      	ldr	r2, [r3, #0]
 800b99c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9a0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	781b      	ldrb	r3, [r3, #0]
 800b9a8:	009b      	lsls	r3, r3, #2
 800b9aa:	441a      	add	r2, r3
 800b9ac:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b9b0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b9b4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b9b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b9bc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b9c0:	b29b      	uxth	r3, r3
 800b9c2:	8013      	strh	r3, [r2, #0]
 800b9c4:	e1a4      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800b9c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9ce:	681b      	ldr	r3, [r3, #0]
 800b9d0:	78db      	ldrb	r3, [r3, #3]
 800b9d2:	2b01      	cmp	r3, #1
 800b9d4:	f040 819a 	bne.w	800bd0c <USB_EPStartXfer+0x1bec>
 800b9d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9dc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	699a      	ldr	r2, [r3, #24]
 800b9e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9ec:	681b      	ldr	r3, [r3, #0]
 800b9ee:	691b      	ldr	r3, [r3, #16]
 800b9f0:	429a      	cmp	r2, r3
 800b9f2:	d917      	bls.n	800ba24 <USB_EPStartXfer+0x1904>
 800b9f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b9f8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	691b      	ldr	r3, [r3, #16]
 800ba00:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba04:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba08:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba0c:	681b      	ldr	r3, [r3, #0]
 800ba0e:	699a      	ldr	r2, [r3, #24]
 800ba10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba14:	1ad2      	subs	r2, r2, r3
 800ba16:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba1a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba1e:	681b      	ldr	r3, [r3, #0]
 800ba20:	619a      	str	r2, [r3, #24]
 800ba22:	e00e      	b.n	800ba42 <USB_EPStartXfer+0x1922>
 800ba24:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba28:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	699b      	ldr	r3, [r3, #24]
 800ba30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba34:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba38:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	2200      	movs	r2, #0
 800ba40:	619a      	str	r2, [r3, #24]
 800ba42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba4a:	681b      	ldr	r3, [r3, #0]
 800ba4c:	785b      	ldrb	r3, [r3, #1]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d178      	bne.n	800bb44 <USB_EPStartXfer+0x1a24>
 800ba52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ba60:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba64:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba6e:	b29b      	uxth	r3, r3
 800ba70:	461a      	mov	r2, r3
 800ba72:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ba76:	4413      	add	r3, r2
 800ba78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800ba7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	781b      	ldrb	r3, [r3, #0]
 800ba88:	011a      	lsls	r2, r3, #4
 800ba8a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800ba8e:	4413      	add	r3, r2
 800ba90:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ba94:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800ba98:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba9c:	2b00      	cmp	r3, #0
 800ba9e:	d116      	bne.n	800bace <USB_EPStartXfer+0x19ae>
 800baa0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800baa4:	881b      	ldrh	r3, [r3, #0]
 800baa6:	b29b      	uxth	r3, r3
 800baa8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800baac:	b29a      	uxth	r2, r3
 800baae:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bab2:	801a      	strh	r2, [r3, #0]
 800bab4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bab8:	881b      	ldrh	r3, [r3, #0]
 800baba:	b29b      	uxth	r3, r3
 800babc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bac0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bac4:	b29a      	uxth	r2, r3
 800bac6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800baca:	801a      	strh	r2, [r3, #0]
 800bacc:	e06b      	b.n	800bba6 <USB_EPStartXfer+0x1a86>
 800bace:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bad2:	2b3e      	cmp	r3, #62	; 0x3e
 800bad4:	d818      	bhi.n	800bb08 <USB_EPStartXfer+0x19e8>
 800bad6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bada:	085b      	lsrs	r3, r3, #1
 800badc:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bae4:	f003 0301 	and.w	r3, r3, #1
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d004      	beq.n	800baf6 <USB_EPStartXfer+0x19d6>
 800baec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800baf0:	3301      	adds	r3, #1
 800baf2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800baf6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bafa:	b29b      	uxth	r3, r3
 800bafc:	029b      	lsls	r3, r3, #10
 800bafe:	b29a      	uxth	r2, r3
 800bb00:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb04:	801a      	strh	r2, [r3, #0]
 800bb06:	e04e      	b.n	800bba6 <USB_EPStartXfer+0x1a86>
 800bb08:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb0c:	095b      	lsrs	r3, r3, #5
 800bb0e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb12:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb16:	f003 031f 	and.w	r3, r3, #31
 800bb1a:	2b00      	cmp	r3, #0
 800bb1c:	d104      	bne.n	800bb28 <USB_EPStartXfer+0x1a08>
 800bb1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb22:	3b01      	subs	r3, #1
 800bb24:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800bb28:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800bb2c:	b29b      	uxth	r3, r3
 800bb2e:	029b      	lsls	r3, r3, #10
 800bb30:	b29b      	uxth	r3, r3
 800bb32:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bb36:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bb3a:	b29a      	uxth	r2, r3
 800bb3c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bb40:	801a      	strh	r2, [r3, #0]
 800bb42:	e030      	b.n	800bba6 <USB_EPStartXfer+0x1a86>
 800bb44:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb48:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb4c:	681b      	ldr	r3, [r3, #0]
 800bb4e:	785b      	ldrb	r3, [r3, #1]
 800bb50:	2b01      	cmp	r3, #1
 800bb52:	d128      	bne.n	800bba6 <USB_EPStartXfer+0x1a86>
 800bb54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb58:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb5c:	681b      	ldr	r3, [r3, #0]
 800bb5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb66:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bb70:	b29b      	uxth	r3, r3
 800bb72:	461a      	mov	r2, r3
 800bb74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb78:	4413      	add	r3, r2
 800bb7a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800bb7e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb82:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	011a      	lsls	r2, r3, #4
 800bb8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800bb90:	4413      	add	r3, r2
 800bb92:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800bb96:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800bb9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb9e:	b29a      	uxth	r2, r3
 800bba0:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800bba4:	801a      	strh	r2, [r3, #0]
 800bba6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbaa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbae:	681b      	ldr	r3, [r3, #0]
 800bbb0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bbb4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbb8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbbc:	681b      	ldr	r3, [r3, #0]
 800bbbe:	785b      	ldrb	r3, [r3, #1]
 800bbc0:	2b00      	cmp	r3, #0
 800bbc2:	d178      	bne.n	800bcb6 <USB_EPStartXfer+0x1b96>
 800bbc4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbc8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbcc:	681b      	ldr	r3, [r3, #0]
 800bbce:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbd2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbd6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bbda:	681b      	ldr	r3, [r3, #0]
 800bbdc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bbe0:	b29b      	uxth	r3, r3
 800bbe2:	461a      	mov	r2, r3
 800bbe4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bbe8:	4413      	add	r3, r2
 800bbea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800bbee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bbf2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	011a      	lsls	r2, r3, #4
 800bbfc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800bc00:	4413      	add	r3, r2
 800bc02:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bc06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800bc0a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc0e:	2b00      	cmp	r3, #0
 800bc10:	d116      	bne.n	800bc40 <USB_EPStartXfer+0x1b20>
 800bc12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc16:	881b      	ldrh	r3, [r3, #0]
 800bc18:	b29b      	uxth	r3, r3
 800bc1a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800bc1e:	b29a      	uxth	r2, r3
 800bc20:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc24:	801a      	strh	r2, [r3, #0]
 800bc26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc2a:	881b      	ldrh	r3, [r3, #0]
 800bc2c:	b29b      	uxth	r3, r3
 800bc2e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bc32:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bc36:	b29a      	uxth	r2, r3
 800bc38:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc3c:	801a      	strh	r2, [r3, #0]
 800bc3e:	e067      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800bc40:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc44:	2b3e      	cmp	r3, #62	; 0x3e
 800bc46:	d818      	bhi.n	800bc7a <USB_EPStartXfer+0x1b5a>
 800bc48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc4c:	085b      	lsrs	r3, r3, #1
 800bc4e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc56:	f003 0301 	and.w	r3, r3, #1
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d004      	beq.n	800bc68 <USB_EPStartXfer+0x1b48>
 800bc5e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc62:	3301      	adds	r3, #1
 800bc64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc68:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc6c:	b29b      	uxth	r3, r3
 800bc6e:	029b      	lsls	r3, r3, #10
 800bc70:	b29a      	uxth	r2, r3
 800bc72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bc76:	801a      	strh	r2, [r3, #0]
 800bc78:	e04a      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800bc7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc7e:	095b      	lsrs	r3, r3, #5
 800bc80:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bc88:	f003 031f 	and.w	r3, r3, #31
 800bc8c:	2b00      	cmp	r3, #0
 800bc8e:	d104      	bne.n	800bc9a <USB_EPStartXfer+0x1b7a>
 800bc90:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc94:	3b01      	subs	r3, #1
 800bc96:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800bc9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800bc9e:	b29b      	uxth	r3, r3
 800bca0:	029b      	lsls	r3, r3, #10
 800bca2:	b29b      	uxth	r3, r3
 800bca4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800bca8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800bcac:	b29a      	uxth	r2, r3
 800bcae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800bcb2:	801a      	strh	r2, [r3, #0]
 800bcb4:	e02c      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800bcb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	785b      	ldrb	r3, [r3, #1]
 800bcc2:	2b01      	cmp	r3, #1
 800bcc4:	d124      	bne.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800bcc6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bcca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bcce:	681b      	ldr	r3, [r3, #0]
 800bcd0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800bcd4:	b29b      	uxth	r3, r3
 800bcd6:	461a      	mov	r2, r3
 800bcd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcdc:	4413      	add	r3, r2
 800bcde:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800bce2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bce6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	781b      	ldrb	r3, [r3, #0]
 800bcee:	011a      	lsls	r2, r3, #4
 800bcf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bcf4:	4413      	add	r3, r2
 800bcf6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800bcfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800bcfe:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd02:	b29a      	uxth	r2, r3
 800bd04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bd08:	801a      	strh	r2, [r3, #0]
 800bd0a:	e001      	b.n	800bd10 <USB_EPStartXfer+0x1bf0>
 800bd0c:	2301      	movs	r3, #1
 800bd0e:	e03a      	b.n	800bd86 <USB_EPStartXfer+0x1c66>
 800bd10:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd14:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd18:	681a      	ldr	r2, [r3, #0]
 800bd1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	781b      	ldrb	r3, [r3, #0]
 800bd26:	009b      	lsls	r3, r3, #2
 800bd28:	4413      	add	r3, r2
 800bd2a:	881b      	ldrh	r3, [r3, #0]
 800bd2c:	b29b      	uxth	r3, r3
 800bd2e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bd32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bd36:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bd3a:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bd3e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bd42:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bd46:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bd4a:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bd4e:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bd52:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd56:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bd5a:	681a      	ldr	r2, [r3, #0]
 800bd5c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bd60:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bd64:	681b      	ldr	r3, [r3, #0]
 800bd66:	781b      	ldrb	r3, [r3, #0]
 800bd68:	009b      	lsls	r3, r3, #2
 800bd6a:	441a      	add	r2, r3
 800bd6c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bd70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd80:	b29b      	uxth	r3, r3
 800bd82:	8013      	strh	r3, [r2, #0]
 800bd84:	2300      	movs	r3, #0
 800bd86:	4618      	mov	r0, r3
 800bd88:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}

0800bd90 <USB_EPSetStall>:
 800bd90:	b480      	push	{r7}
 800bd92:	b085      	sub	sp, #20
 800bd94:	af00      	add	r7, sp, #0
 800bd96:	6078      	str	r0, [r7, #4]
 800bd98:	6039      	str	r1, [r7, #0]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	785b      	ldrb	r3, [r3, #1]
 800bd9e:	2b00      	cmp	r3, #0
 800bda0:	d020      	beq.n	800bde4 <USB_EPSetStall+0x54>
 800bda2:	687a      	ldr	r2, [r7, #4]
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	781b      	ldrb	r3, [r3, #0]
 800bda8:	009b      	lsls	r3, r3, #2
 800bdaa:	4413      	add	r3, r2
 800bdac:	881b      	ldrh	r3, [r3, #0]
 800bdae:	b29b      	uxth	r3, r3
 800bdb0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bdb4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bdb8:	81bb      	strh	r3, [r7, #12]
 800bdba:	89bb      	ldrh	r3, [r7, #12]
 800bdbc:	f083 0310 	eor.w	r3, r3, #16
 800bdc0:	81bb      	strh	r3, [r7, #12]
 800bdc2:	687a      	ldr	r2, [r7, #4]
 800bdc4:	683b      	ldr	r3, [r7, #0]
 800bdc6:	781b      	ldrb	r3, [r3, #0]
 800bdc8:	009b      	lsls	r3, r3, #2
 800bdca:	441a      	add	r2, r3
 800bdcc:	89bb      	ldrh	r3, [r7, #12]
 800bdce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bdd2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bdd6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bdda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bdde:	b29b      	uxth	r3, r3
 800bde0:	8013      	strh	r3, [r2, #0]
 800bde2:	e01f      	b.n	800be24 <USB_EPSetStall+0x94>
 800bde4:	687a      	ldr	r2, [r7, #4]
 800bde6:	683b      	ldr	r3, [r7, #0]
 800bde8:	781b      	ldrb	r3, [r3, #0]
 800bdea:	009b      	lsls	r3, r3, #2
 800bdec:	4413      	add	r3, r2
 800bdee:	881b      	ldrh	r3, [r3, #0]
 800bdf0:	b29b      	uxth	r3, r3
 800bdf2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bdf6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bdfa:	81fb      	strh	r3, [r7, #14]
 800bdfc:	89fb      	ldrh	r3, [r7, #14]
 800bdfe:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800be02:	81fb      	strh	r3, [r7, #14]
 800be04:	687a      	ldr	r2, [r7, #4]
 800be06:	683b      	ldr	r3, [r7, #0]
 800be08:	781b      	ldrb	r3, [r3, #0]
 800be0a:	009b      	lsls	r3, r3, #2
 800be0c:	441a      	add	r2, r3
 800be0e:	89fb      	ldrh	r3, [r7, #14]
 800be10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800be20:	b29b      	uxth	r3, r3
 800be22:	8013      	strh	r3, [r2, #0]
 800be24:	2300      	movs	r3, #0
 800be26:	4618      	mov	r0, r3
 800be28:	3714      	adds	r7, #20
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bc80      	pop	{r7}
 800be2e:	4770      	bx	lr

0800be30 <USB_EPClearStall>:
 800be30:	b480      	push	{r7}
 800be32:	b087      	sub	sp, #28
 800be34:	af00      	add	r7, sp, #0
 800be36:	6078      	str	r0, [r7, #4]
 800be38:	6039      	str	r1, [r7, #0]
 800be3a:	683b      	ldr	r3, [r7, #0]
 800be3c:	7b1b      	ldrb	r3, [r3, #12]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	f040 809d 	bne.w	800bf7e <USB_EPClearStall+0x14e>
 800be44:	683b      	ldr	r3, [r7, #0]
 800be46:	785b      	ldrb	r3, [r3, #1]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d04c      	beq.n	800bee6 <USB_EPClearStall+0xb6>
 800be4c:	687a      	ldr	r2, [r7, #4]
 800be4e:	683b      	ldr	r3, [r7, #0]
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	009b      	lsls	r3, r3, #2
 800be54:	4413      	add	r3, r2
 800be56:	881b      	ldrh	r3, [r3, #0]
 800be58:	823b      	strh	r3, [r7, #16]
 800be5a:	8a3b      	ldrh	r3, [r7, #16]
 800be5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be60:	2b00      	cmp	r3, #0
 800be62:	d01b      	beq.n	800be9c <USB_EPClearStall+0x6c>
 800be64:	687a      	ldr	r2, [r7, #4]
 800be66:	683b      	ldr	r3, [r7, #0]
 800be68:	781b      	ldrb	r3, [r3, #0]
 800be6a:	009b      	lsls	r3, r3, #2
 800be6c:	4413      	add	r3, r2
 800be6e:	881b      	ldrh	r3, [r3, #0]
 800be70:	b29b      	uxth	r3, r3
 800be72:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800be76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800be7a:	81fb      	strh	r3, [r7, #14]
 800be7c:	687a      	ldr	r2, [r7, #4]
 800be7e:	683b      	ldr	r3, [r7, #0]
 800be80:	781b      	ldrb	r3, [r3, #0]
 800be82:	009b      	lsls	r3, r3, #2
 800be84:	441a      	add	r2, r3
 800be86:	89fb      	ldrh	r3, [r7, #14]
 800be88:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800be8c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800be90:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800be94:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800be98:	b29b      	uxth	r3, r3
 800be9a:	8013      	strh	r3, [r2, #0]
 800be9c:	683b      	ldr	r3, [r7, #0]
 800be9e:	78db      	ldrb	r3, [r3, #3]
 800bea0:	2b01      	cmp	r3, #1
 800bea2:	d06c      	beq.n	800bf7e <USB_EPClearStall+0x14e>
 800bea4:	687a      	ldr	r2, [r7, #4]
 800bea6:	683b      	ldr	r3, [r7, #0]
 800bea8:	781b      	ldrb	r3, [r3, #0]
 800beaa:	009b      	lsls	r3, r3, #2
 800beac:	4413      	add	r3, r2
 800beae:	881b      	ldrh	r3, [r3, #0]
 800beb0:	b29b      	uxth	r3, r3
 800beb2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800beb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800beba:	81bb      	strh	r3, [r7, #12]
 800bebc:	89bb      	ldrh	r3, [r7, #12]
 800bebe:	f083 0320 	eor.w	r3, r3, #32
 800bec2:	81bb      	strh	r3, [r7, #12]
 800bec4:	687a      	ldr	r2, [r7, #4]
 800bec6:	683b      	ldr	r3, [r7, #0]
 800bec8:	781b      	ldrb	r3, [r3, #0]
 800beca:	009b      	lsls	r3, r3, #2
 800becc:	441a      	add	r2, r3
 800bece:	89bb      	ldrh	r3, [r7, #12]
 800bed0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bed4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bed8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bedc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bee0:	b29b      	uxth	r3, r3
 800bee2:	8013      	strh	r3, [r2, #0]
 800bee4:	e04b      	b.n	800bf7e <USB_EPClearStall+0x14e>
 800bee6:	687a      	ldr	r2, [r7, #4]
 800bee8:	683b      	ldr	r3, [r7, #0]
 800beea:	781b      	ldrb	r3, [r3, #0]
 800beec:	009b      	lsls	r3, r3, #2
 800beee:	4413      	add	r3, r2
 800bef0:	881b      	ldrh	r3, [r3, #0]
 800bef2:	82fb      	strh	r3, [r7, #22]
 800bef4:	8afb      	ldrh	r3, [r7, #22]
 800bef6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800befa:	2b00      	cmp	r3, #0
 800befc:	d01b      	beq.n	800bf36 <USB_EPClearStall+0x106>
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	683b      	ldr	r3, [r7, #0]
 800bf02:	781b      	ldrb	r3, [r3, #0]
 800bf04:	009b      	lsls	r3, r3, #2
 800bf06:	4413      	add	r3, r2
 800bf08:	881b      	ldrh	r3, [r3, #0]
 800bf0a:	b29b      	uxth	r3, r3
 800bf0c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bf10:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf14:	82bb      	strh	r3, [r7, #20]
 800bf16:	687a      	ldr	r2, [r7, #4]
 800bf18:	683b      	ldr	r3, [r7, #0]
 800bf1a:	781b      	ldrb	r3, [r3, #0]
 800bf1c:	009b      	lsls	r3, r3, #2
 800bf1e:	441a      	add	r2, r3
 800bf20:	8abb      	ldrh	r3, [r7, #20]
 800bf22:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf26:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf2a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bf2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf32:	b29b      	uxth	r3, r3
 800bf34:	8013      	strh	r3, [r2, #0]
 800bf36:	687a      	ldr	r2, [r7, #4]
 800bf38:	683b      	ldr	r3, [r7, #0]
 800bf3a:	781b      	ldrb	r3, [r3, #0]
 800bf3c:	009b      	lsls	r3, r3, #2
 800bf3e:	4413      	add	r3, r2
 800bf40:	881b      	ldrh	r3, [r3, #0]
 800bf42:	b29b      	uxth	r3, r3
 800bf44:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bf48:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bf4c:	827b      	strh	r3, [r7, #18]
 800bf4e:	8a7b      	ldrh	r3, [r7, #18]
 800bf50:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bf54:	827b      	strh	r3, [r7, #18]
 800bf56:	8a7b      	ldrh	r3, [r7, #18]
 800bf58:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bf5c:	827b      	strh	r3, [r7, #18]
 800bf5e:	687a      	ldr	r2, [r7, #4]
 800bf60:	683b      	ldr	r3, [r7, #0]
 800bf62:	781b      	ldrb	r3, [r3, #0]
 800bf64:	009b      	lsls	r3, r3, #2
 800bf66:	441a      	add	r2, r3
 800bf68:	8a7b      	ldrh	r3, [r7, #18]
 800bf6a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bf6e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bf72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bf76:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bf7a:	b29b      	uxth	r3, r3
 800bf7c:	8013      	strh	r3, [r2, #0]
 800bf7e:	2300      	movs	r3, #0
 800bf80:	4618      	mov	r0, r3
 800bf82:	371c      	adds	r7, #28
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bc80      	pop	{r7}
 800bf88:	4770      	bx	lr

0800bf8a <USB_SetDevAddress>:
 800bf8a:	b480      	push	{r7}
 800bf8c:	b083      	sub	sp, #12
 800bf8e:	af00      	add	r7, sp, #0
 800bf90:	6078      	str	r0, [r7, #4]
 800bf92:	460b      	mov	r3, r1
 800bf94:	70fb      	strb	r3, [r7, #3]
 800bf96:	78fb      	ldrb	r3, [r7, #3]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d103      	bne.n	800bfa4 <USB_SetDevAddress+0x1a>
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	2280      	movs	r2, #128	; 0x80
 800bfa0:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	4618      	mov	r0, r3
 800bfa8:	370c      	adds	r7, #12
 800bfaa:	46bd      	mov	sp, r7
 800bfac:	bc80      	pop	{r7}
 800bfae:	4770      	bx	lr

0800bfb0 <USB_DevConnect>:
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
 800bfb6:	6078      	str	r0, [r7, #4]
 800bfb8:	2300      	movs	r3, #0
 800bfba:	4618      	mov	r0, r3
 800bfbc:	370c      	adds	r7, #12
 800bfbe:	46bd      	mov	sp, r7
 800bfc0:	bc80      	pop	{r7}
 800bfc2:	4770      	bx	lr

0800bfc4 <USB_ReadInterrupts>:
 800bfc4:	b480      	push	{r7}
 800bfc6:	b085      	sub	sp, #20
 800bfc8:	af00      	add	r7, sp, #0
 800bfca:	6078      	str	r0, [r7, #4]
 800bfcc:	687b      	ldr	r3, [r7, #4]
 800bfce:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bfd2:	b29b      	uxth	r3, r3
 800bfd4:	60fb      	str	r3, [r7, #12]
 800bfd6:	68fb      	ldr	r3, [r7, #12]
 800bfd8:	4618      	mov	r0, r3
 800bfda:	3714      	adds	r7, #20
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bc80      	pop	{r7}
 800bfe0:	4770      	bx	lr

0800bfe2 <USB_WritePMA>:
 800bfe2:	b480      	push	{r7}
 800bfe4:	b08d      	sub	sp, #52	; 0x34
 800bfe6:	af00      	add	r7, sp, #0
 800bfe8:	60f8      	str	r0, [r7, #12]
 800bfea:	60b9      	str	r1, [r7, #8]
 800bfec:	4611      	mov	r1, r2
 800bfee:	461a      	mov	r2, r3
 800bff0:	460b      	mov	r3, r1
 800bff2:	80fb      	strh	r3, [r7, #6]
 800bff4:	4613      	mov	r3, r2
 800bff6:	80bb      	strh	r3, [r7, #4]
 800bff8:	88bb      	ldrh	r3, [r7, #4]
 800bffa:	3301      	adds	r3, #1
 800bffc:	085b      	lsrs	r3, r3, #1
 800bffe:	623b      	str	r3, [r7, #32]
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	61fb      	str	r3, [r7, #28]
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	627b      	str	r3, [r7, #36]	; 0x24
 800c008:	88fb      	ldrh	r3, [r7, #6]
 800c00a:	005a      	lsls	r2, r3, #1
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	4413      	add	r3, r2
 800c010:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c014:	62bb      	str	r3, [r7, #40]	; 0x28
 800c016:	6a3b      	ldr	r3, [r7, #32]
 800c018:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c01a:	e01e      	b.n	800c05a <USB_WritePMA+0x78>
 800c01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c01e:	781b      	ldrb	r3, [r3, #0]
 800c020:	61bb      	str	r3, [r7, #24]
 800c022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c024:	3301      	adds	r3, #1
 800c026:	627b      	str	r3, [r7, #36]	; 0x24
 800c028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c02a:	781b      	ldrb	r3, [r3, #0]
 800c02c:	b29b      	uxth	r3, r3
 800c02e:	021b      	lsls	r3, r3, #8
 800c030:	b29b      	uxth	r3, r3
 800c032:	461a      	mov	r2, r3
 800c034:	69bb      	ldr	r3, [r7, #24]
 800c036:	4313      	orrs	r3, r2
 800c038:	617b      	str	r3, [r7, #20]
 800c03a:	697b      	ldr	r3, [r7, #20]
 800c03c:	b29a      	uxth	r2, r3
 800c03e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c040:	801a      	strh	r2, [r3, #0]
 800c042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c044:	3302      	adds	r3, #2
 800c046:	62bb      	str	r3, [r7, #40]	; 0x28
 800c048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c04a:	3302      	adds	r3, #2
 800c04c:	62bb      	str	r3, [r7, #40]	; 0x28
 800c04e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c050:	3301      	adds	r3, #1
 800c052:	627b      	str	r3, [r7, #36]	; 0x24
 800c054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c056:	3b01      	subs	r3, #1
 800c058:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	d1dd      	bne.n	800c01c <USB_WritePMA+0x3a>
 800c060:	bf00      	nop
 800c062:	bf00      	nop
 800c064:	3734      	adds	r7, #52	; 0x34
 800c066:	46bd      	mov	sp, r7
 800c068:	bc80      	pop	{r7}
 800c06a:	4770      	bx	lr

0800c06c <USB_ReadPMA>:
 800c06c:	b480      	push	{r7}
 800c06e:	b08b      	sub	sp, #44	; 0x2c
 800c070:	af00      	add	r7, sp, #0
 800c072:	60f8      	str	r0, [r7, #12]
 800c074:	60b9      	str	r1, [r7, #8]
 800c076:	4611      	mov	r1, r2
 800c078:	461a      	mov	r2, r3
 800c07a:	460b      	mov	r3, r1
 800c07c:	80fb      	strh	r3, [r7, #6]
 800c07e:	4613      	mov	r3, r2
 800c080:	80bb      	strh	r3, [r7, #4]
 800c082:	88bb      	ldrh	r3, [r7, #4]
 800c084:	085b      	lsrs	r3, r3, #1
 800c086:	b29b      	uxth	r3, r3
 800c088:	61bb      	str	r3, [r7, #24]
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	617b      	str	r3, [r7, #20]
 800c08e:	68bb      	ldr	r3, [r7, #8]
 800c090:	61fb      	str	r3, [r7, #28]
 800c092:	88fb      	ldrh	r3, [r7, #6]
 800c094:	005a      	lsls	r2, r3, #1
 800c096:	697b      	ldr	r3, [r7, #20]
 800c098:	4413      	add	r3, r2
 800c09a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800c09e:	623b      	str	r3, [r7, #32]
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	627b      	str	r3, [r7, #36]	; 0x24
 800c0a4:	e01b      	b.n	800c0de <USB_ReadPMA+0x72>
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	b29b      	uxth	r3, r3
 800c0ac:	613b      	str	r3, [r7, #16]
 800c0ae:	6a3b      	ldr	r3, [r7, #32]
 800c0b0:	3302      	adds	r3, #2
 800c0b2:	623b      	str	r3, [r7, #32]
 800c0b4:	693b      	ldr	r3, [r7, #16]
 800c0b6:	b2da      	uxtb	r2, r3
 800c0b8:	69fb      	ldr	r3, [r7, #28]
 800c0ba:	701a      	strb	r2, [r3, #0]
 800c0bc:	69fb      	ldr	r3, [r7, #28]
 800c0be:	3301      	adds	r3, #1
 800c0c0:	61fb      	str	r3, [r7, #28]
 800c0c2:	693b      	ldr	r3, [r7, #16]
 800c0c4:	0a1b      	lsrs	r3, r3, #8
 800c0c6:	b2da      	uxtb	r2, r3
 800c0c8:	69fb      	ldr	r3, [r7, #28]
 800c0ca:	701a      	strb	r2, [r3, #0]
 800c0cc:	69fb      	ldr	r3, [r7, #28]
 800c0ce:	3301      	adds	r3, #1
 800c0d0:	61fb      	str	r3, [r7, #28]
 800c0d2:	6a3b      	ldr	r3, [r7, #32]
 800c0d4:	3302      	adds	r3, #2
 800c0d6:	623b      	str	r3, [r7, #32]
 800c0d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0da:	3b01      	subs	r3, #1
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d1e0      	bne.n	800c0a6 <USB_ReadPMA+0x3a>
 800c0e4:	88bb      	ldrh	r3, [r7, #4]
 800c0e6:	f003 0301 	and.w	r3, r3, #1
 800c0ea:	b29b      	uxth	r3, r3
 800c0ec:	2b00      	cmp	r3, #0
 800c0ee:	d007      	beq.n	800c100 <USB_ReadPMA+0x94>
 800c0f0:	6a3b      	ldr	r3, [r7, #32]
 800c0f2:	881b      	ldrh	r3, [r3, #0]
 800c0f4:	b29b      	uxth	r3, r3
 800c0f6:	613b      	str	r3, [r7, #16]
 800c0f8:	693b      	ldr	r3, [r7, #16]
 800c0fa:	b2da      	uxtb	r2, r3
 800c0fc:	69fb      	ldr	r3, [r7, #28]
 800c0fe:	701a      	strb	r2, [r3, #0]
 800c100:	bf00      	nop
 800c102:	372c      	adds	r7, #44	; 0x2c
 800c104:	46bd      	mov	sp, r7
 800c106:	bc80      	pop	{r7}
 800c108:	4770      	bx	lr
	...

0800c10c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800c10c:	b580      	push	{r7, lr}
 800c10e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800c110:	4904      	ldr	r1, [pc, #16]	; (800c124 <MX_FATFS_Init+0x18>)
 800c112:	4805      	ldr	r0, [pc, #20]	; (800c128 <MX_FATFS_Init+0x1c>)
 800c114:	f005 f842 	bl	801119c <FATFS_LinkDriver>
 800c118:	4603      	mov	r3, r0
 800c11a:	461a      	mov	r2, r3
 800c11c:	4b03      	ldr	r3, [pc, #12]	; (800c12c <MX_FATFS_Init+0x20>)
 800c11e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800c120:	bf00      	nop
 800c122:	bd80      	pop	{r7, pc}
 800c124:	20000f08 	.word	0x20000f08
 800c128:	20000094 	.word	0x20000094
 800c12c:	20000f04 	.word	0x20000f04

0800c130 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800c130:	b480      	push	{r7}
 800c132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800c134:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800c136:	4618      	mov	r0, r3
 800c138:	46bd      	mov	sp, r7
 800c13a:	bc80      	pop	{r7}
 800c13c:	4770      	bx	lr

0800c13e <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800c13e:	b580      	push	{r7, lr}
 800c140:	b082      	sub	sp, #8
 800c142:	af00      	add	r7, sp, #0
 800c144:	4603      	mov	r3, r0
 800c146:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv);
 800c148:	79fb      	ldrb	r3, [r7, #7]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f000 f9dc 	bl	800c508 <USER_SPI_initialize>
 800c150:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800c152:	4618      	mov	r0, r3
 800c154:	3708      	adds	r7, #8
 800c156:	46bd      	mov	sp, r7
 800c158:	bd80      	pop	{r7, pc}

0800c15a <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800c15a:	b580      	push	{r7, lr}
 800c15c:	b082      	sub	sp, #8
 800c15e:	af00      	add	r7, sp, #0
 800c160:	4603      	mov	r3, r0
 800c162:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 800c164:	79fb      	ldrb	r3, [r7, #7]
 800c166:	4618      	mov	r0, r3
 800c168:	f000 faba 	bl	800c6e0 <USER_SPI_status>
 800c16c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800c16e:	4618      	mov	r0, r3
 800c170:	3708      	adds	r7, #8
 800c172:	46bd      	mov	sp, r7
 800c174:	bd80      	pop	{r7, pc}

0800c176 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800c176:	b580      	push	{r7, lr}
 800c178:	b084      	sub	sp, #16
 800c17a:	af00      	add	r7, sp, #0
 800c17c:	60b9      	str	r1, [r7, #8]
 800c17e:	607a      	str	r2, [r7, #4]
 800c180:	603b      	str	r3, [r7, #0]
 800c182:	4603      	mov	r3, r0
 800c184:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 800c186:	7bf8      	ldrb	r0, [r7, #15]
 800c188:	683b      	ldr	r3, [r7, #0]
 800c18a:	687a      	ldr	r2, [r7, #4]
 800c18c:	68b9      	ldr	r1, [r7, #8]
 800c18e:	f000 fabb 	bl	800c708 <USER_SPI_read>
 800c192:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800c194:	4618      	mov	r0, r3
 800c196:	3710      	adds	r7, #16
 800c198:	46bd      	mov	sp, r7
 800c19a:	bd80      	pop	{r7, pc}

0800c19c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800c19c:	b580      	push	{r7, lr}
 800c19e:	b084      	sub	sp, #16
 800c1a0:	af00      	add	r7, sp, #0
 800c1a2:	60b9      	str	r1, [r7, #8]
 800c1a4:	607a      	str	r2, [r7, #4]
 800c1a6:	603b      	str	r3, [r7, #0]
 800c1a8:	4603      	mov	r3, r0
 800c1aa:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 800c1ac:	7bf8      	ldrb	r0, [r7, #15]
 800c1ae:	683b      	ldr	r3, [r7, #0]
 800c1b0:	687a      	ldr	r2, [r7, #4]
 800c1b2:	68b9      	ldr	r1, [r7, #8]
 800c1b4:	f000 fb0e 	bl	800c7d4 <USER_SPI_write>
 800c1b8:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	3710      	adds	r7, #16
 800c1be:	46bd      	mov	sp, r7
 800c1c0:	bd80      	pop	{r7, pc}

0800c1c2 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800c1c2:	b580      	push	{r7, lr}
 800c1c4:	b082      	sub	sp, #8
 800c1c6:	af00      	add	r7, sp, #0
 800c1c8:	4603      	mov	r3, r0
 800c1ca:	603a      	str	r2, [r7, #0]
 800c1cc:	71fb      	strb	r3, [r7, #7]
 800c1ce:	460b      	mov	r3, r1
 800c1d0:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800c1d2:	79b9      	ldrb	r1, [r7, #6]
 800c1d4:	79fb      	ldrb	r3, [r7, #7]
 800c1d6:	683a      	ldr	r2, [r7, #0]
 800c1d8:	4618      	mov	r0, r3
 800c1da:	f000 fb77 	bl	800c8cc <USER_SPI_ioctl>
 800c1de:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800c1e0:	4618      	mov	r0, r3
 800c1e2:	3708      	adds	r7, #8
 800c1e4:	46bd      	mov	sp, r7
 800c1e6:	bd80      	pop	{r7, pc}

0800c1e8 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800c1e8:	b580      	push	{r7, lr}
 800c1ea:	b082      	sub	sp, #8
 800c1ec:	af00      	add	r7, sp, #0
 800c1ee:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800c1f0:	f7f8 fb16 	bl	8004820 <HAL_GetTick>
 800c1f4:	4603      	mov	r3, r0
 800c1f6:	4a04      	ldr	r2, [pc, #16]	; (800c208 <SPI_Timer_On+0x20>)
 800c1f8:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800c1fa:	4a04      	ldr	r2, [pc, #16]	; (800c20c <SPI_Timer_On+0x24>)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	6013      	str	r3, [r2, #0]
}
 800c200:	bf00      	nop
 800c202:	3708      	adds	r7, #8
 800c204:	46bd      	mov	sp, r7
 800c206:	bd80      	pop	{r7, pc}
 800c208:	20000f10 	.word	0x20000f10
 800c20c:	20000f14 	.word	0x20000f14

0800c210 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800c210:	b580      	push	{r7, lr}
 800c212:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800c214:	f7f8 fb04 	bl	8004820 <HAL_GetTick>
 800c218:	4602      	mov	r2, r0
 800c21a:	4b06      	ldr	r3, [pc, #24]	; (800c234 <SPI_Timer_Status+0x24>)
 800c21c:	681b      	ldr	r3, [r3, #0]
 800c21e:	1ad2      	subs	r2, r2, r3
 800c220:	4b05      	ldr	r3, [pc, #20]	; (800c238 <SPI_Timer_Status+0x28>)
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	429a      	cmp	r2, r3
 800c226:	bf34      	ite	cc
 800c228:	2301      	movcc	r3, #1
 800c22a:	2300      	movcs	r3, #0
 800c22c:	b2db      	uxtb	r3, r3
}
 800c22e:	4618      	mov	r0, r3
 800c230:	bd80      	pop	{r7, pc}
 800c232:	bf00      	nop
 800c234:	20000f10 	.word	0x20000f10
 800c238:	20000f14 	.word	0x20000f14

0800c23c <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800c23c:	b580      	push	{r7, lr}
 800c23e:	b086      	sub	sp, #24
 800c240:	af02      	add	r7, sp, #8
 800c242:	4603      	mov	r3, r0
 800c244:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800c246:	f107 020f 	add.w	r2, r7, #15
 800c24a:	1df9      	adds	r1, r7, #7
 800c24c:	2332      	movs	r3, #50	; 0x32
 800c24e:	9300      	str	r3, [sp, #0]
 800c250:	2301      	movs	r3, #1
 800c252:	4804      	ldr	r0, [pc, #16]	; (800c264 <xchg_spi+0x28>)
 800c254:	f7fc f858 	bl	8008308 <HAL_SPI_TransmitReceive>
    return rxDat;
 800c258:	7bfb      	ldrb	r3, [r7, #15]
}
 800c25a:	4618      	mov	r0, r3
 800c25c:	3710      	adds	r7, #16
 800c25e:	46bd      	mov	sp, r7
 800c260:	bd80      	pop	{r7, pc}
 800c262:	bf00      	nop
 800c264:	20000334 	.word	0x20000334

0800c268 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c268:	b590      	push	{r4, r7, lr}
 800c26a:	b085      	sub	sp, #20
 800c26c:	af00      	add	r7, sp, #0
 800c26e:	6078      	str	r0, [r7, #4]
 800c270:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c272:	2300      	movs	r3, #0
 800c274:	60fb      	str	r3, [r7, #12]
 800c276:	e00a      	b.n	800c28e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c278:	687a      	ldr	r2, [r7, #4]
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	18d4      	adds	r4, r2, r3
 800c27e:	20ff      	movs	r0, #255	; 0xff
 800c280:	f7ff ffdc 	bl	800c23c <xchg_spi>
 800c284:	4603      	mov	r3, r0
 800c286:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	3301      	adds	r3, #1
 800c28c:	60fb      	str	r3, [r7, #12]
 800c28e:	68fa      	ldr	r2, [r7, #12]
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	429a      	cmp	r2, r3
 800c294:	d3f0      	bcc.n	800c278 <rcvr_spi_multi+0x10>
	}
}
 800c296:	bf00      	nop
 800c298:	bf00      	nop
 800c29a:	3714      	adds	r7, #20
 800c29c:	46bd      	mov	sp, r7
 800c29e:	bd90      	pop	{r4, r7, pc}

0800c2a0 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c2a0:	b580      	push	{r7, lr}
 800c2a2:	b084      	sub	sp, #16
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800c2aa:	2300      	movs	r3, #0
 800c2ac:	60fb      	str	r3, [r7, #12]
 800c2ae:	e009      	b.n	800c2c4 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800c2b0:	687a      	ldr	r2, [r7, #4]
 800c2b2:	68fb      	ldr	r3, [r7, #12]
 800c2b4:	4413      	add	r3, r2
 800c2b6:	781b      	ldrb	r3, [r3, #0]
 800c2b8:	4618      	mov	r0, r3
 800c2ba:	f7ff ffbf 	bl	800c23c <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800c2be:	68fb      	ldr	r3, [r7, #12]
 800c2c0:	3301      	adds	r3, #1
 800c2c2:	60fb      	str	r3, [r7, #12]
 800c2c4:	68fa      	ldr	r2, [r7, #12]
 800c2c6:	683b      	ldr	r3, [r7, #0]
 800c2c8:	429a      	cmp	r2, r3
 800c2ca:	d3f1      	bcc.n	800c2b0 <xmit_spi_multi+0x10>
	}
}
 800c2cc:	bf00      	nop
 800c2ce:	bf00      	nop
 800c2d0:	3710      	adds	r7, #16
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}

0800c2d6 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c2d6:	b580      	push	{r7, lr}
 800c2d8:	b086      	sub	sp, #24
 800c2da:	af00      	add	r7, sp, #0
 800c2dc:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c2de:	f7f8 fa9f 	bl	8004820 <HAL_GetTick>
 800c2e2:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c2e8:	20ff      	movs	r0, #255	; 0xff
 800c2ea:	f7ff ffa7 	bl	800c23c <xchg_spi>
 800c2ee:	4603      	mov	r3, r0
 800c2f0:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	2bff      	cmp	r3, #255	; 0xff
 800c2f6:	d007      	beq.n	800c308 <wait_ready+0x32>
 800c2f8:	f7f8 fa92 	bl	8004820 <HAL_GetTick>
 800c2fc:	4602      	mov	r2, r0
 800c2fe:	697b      	ldr	r3, [r7, #20]
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	693a      	ldr	r2, [r7, #16]
 800c304:	429a      	cmp	r2, r3
 800c306:	d8ef      	bhi.n	800c2e8 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c308:	7bfb      	ldrb	r3, [r7, #15]
 800c30a:	2bff      	cmp	r3, #255	; 0xff
 800c30c:	bf0c      	ite	eq
 800c30e:	2301      	moveq	r3, #1
 800c310:	2300      	movne	r3, #0
 800c312:	b2db      	uxtb	r3, r3
}
 800c314:	4618      	mov	r0, r3
 800c316:	3718      	adds	r7, #24
 800c318:	46bd      	mov	sp, r7
 800c31a:	bd80      	pop	{r7, pc}

0800c31c <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c31c:	b580      	push	{r7, lr}
 800c31e:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c320:	2201      	movs	r2, #1
 800c322:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c326:	4804      	ldr	r0, [pc, #16]	; (800c338 <despiselect+0x1c>)
 800c328:	f7f9 f913 	bl	8005552 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c32c:	20ff      	movs	r0, #255	; 0xff
 800c32e:	f7ff ff85 	bl	800c23c <xchg_spi>

}
 800c332:	bf00      	nop
 800c334:	bd80      	pop	{r7, pc}
 800c336:	bf00      	nop
 800c338:	40020000 	.word	0x40020000

0800c33c <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c33c:	b580      	push	{r7, lr}
 800c33e:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c340:	2200      	movs	r2, #0
 800c342:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c346:	480a      	ldr	r0, [pc, #40]	; (800c370 <spiselect+0x34>)
 800c348:	f7f9 f903 	bl	8005552 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c34c:	20ff      	movs	r0, #255	; 0xff
 800c34e:	f7ff ff75 	bl	800c23c <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c352:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c356:	f7ff ffbe 	bl	800c2d6 <wait_ready>
 800c35a:	4603      	mov	r3, r0
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d001      	beq.n	800c364 <spiselect+0x28>
 800c360:	2301      	movs	r3, #1
 800c362:	e002      	b.n	800c36a <spiselect+0x2e>

	despiselect();
 800c364:	f7ff ffda 	bl	800c31c <despiselect>
	return 0;	/* Timeout */
 800c368:	2300      	movs	r3, #0
}
 800c36a:	4618      	mov	r0, r3
 800c36c:	bd80      	pop	{r7, pc}
 800c36e:	bf00      	nop
 800c370:	40020000 	.word	0x40020000

0800c374 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c374:	b580      	push	{r7, lr}
 800c376:	b084      	sub	sp, #16
 800c378:	af00      	add	r7, sp, #0
 800c37a:	6078      	str	r0, [r7, #4]
 800c37c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c37e:	20c8      	movs	r0, #200	; 0xc8
 800c380:	f7ff ff32 	bl	800c1e8 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c384:	20ff      	movs	r0, #255	; 0xff
 800c386:	f7ff ff59 	bl	800c23c <xchg_spi>
 800c38a:	4603      	mov	r3, r0
 800c38c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c38e:	7bfb      	ldrb	r3, [r7, #15]
 800c390:	2bff      	cmp	r3, #255	; 0xff
 800c392:	d104      	bne.n	800c39e <rcvr_datablock+0x2a>
 800c394:	f7ff ff3c 	bl	800c210 <SPI_Timer_Status>
 800c398:	4603      	mov	r3, r0
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d1f2      	bne.n	800c384 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c39e:	7bfb      	ldrb	r3, [r7, #15]
 800c3a0:	2bfe      	cmp	r3, #254	; 0xfe
 800c3a2:	d001      	beq.n	800c3a8 <rcvr_datablock+0x34>
 800c3a4:	2300      	movs	r3, #0
 800c3a6:	e00a      	b.n	800c3be <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c3a8:	6839      	ldr	r1, [r7, #0]
 800c3aa:	6878      	ldr	r0, [r7, #4]
 800c3ac:	f7ff ff5c 	bl	800c268 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c3b0:	20ff      	movs	r0, #255	; 0xff
 800c3b2:	f7ff ff43 	bl	800c23c <xchg_spi>
 800c3b6:	20ff      	movs	r0, #255	; 0xff
 800c3b8:	f7ff ff40 	bl	800c23c <xchg_spi>

	return 1;						/* Function succeeded */
 800c3bc:	2301      	movs	r3, #1
}
 800c3be:	4618      	mov	r0, r3
 800c3c0:	3710      	adds	r7, #16
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	bd80      	pop	{r7, pc}

0800c3c6 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c3c6:	b580      	push	{r7, lr}
 800c3c8:	b084      	sub	sp, #16
 800c3ca:	af00      	add	r7, sp, #0
 800c3cc:	6078      	str	r0, [r7, #4]
 800c3ce:	460b      	mov	r3, r1
 800c3d0:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c3d2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c3d6:	f7ff ff7e 	bl	800c2d6 <wait_ready>
 800c3da:	4603      	mov	r3, r0
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d101      	bne.n	800c3e4 <xmit_datablock+0x1e>
 800c3e0:	2300      	movs	r3, #0
 800c3e2:	e01e      	b.n	800c422 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c3e4:	78fb      	ldrb	r3, [r7, #3]
 800c3e6:	4618      	mov	r0, r3
 800c3e8:	f7ff ff28 	bl	800c23c <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c3ec:	78fb      	ldrb	r3, [r7, #3]
 800c3ee:	2bfd      	cmp	r3, #253	; 0xfd
 800c3f0:	d016      	beq.n	800c420 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c3f2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c3f6:	6878      	ldr	r0, [r7, #4]
 800c3f8:	f7ff ff52 	bl	800c2a0 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c3fc:	20ff      	movs	r0, #255	; 0xff
 800c3fe:	f7ff ff1d 	bl	800c23c <xchg_spi>
 800c402:	20ff      	movs	r0, #255	; 0xff
 800c404:	f7ff ff1a 	bl	800c23c <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c408:	20ff      	movs	r0, #255	; 0xff
 800c40a:	f7ff ff17 	bl	800c23c <xchg_spi>
 800c40e:	4603      	mov	r3, r0
 800c410:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c412:	7bfb      	ldrb	r3, [r7, #15]
 800c414:	f003 031f 	and.w	r3, r3, #31
 800c418:	2b05      	cmp	r3, #5
 800c41a:	d001      	beq.n	800c420 <xmit_datablock+0x5a>
 800c41c:	2300      	movs	r3, #0
 800c41e:	e000      	b.n	800c422 <xmit_datablock+0x5c>
	}
	return 1;
 800c420:	2301      	movs	r3, #1
}
 800c422:	4618      	mov	r0, r3
 800c424:	3710      	adds	r7, #16
 800c426:	46bd      	mov	sp, r7
 800c428:	bd80      	pop	{r7, pc}

0800c42a <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c42a:	b580      	push	{r7, lr}
 800c42c:	b084      	sub	sp, #16
 800c42e:	af00      	add	r7, sp, #0
 800c430:	4603      	mov	r3, r0
 800c432:	6039      	str	r1, [r7, #0]
 800c434:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	da0e      	bge.n	800c45c <send_cmd+0x32>
		cmd &= 0x7F;
 800c43e:	79fb      	ldrb	r3, [r7, #7]
 800c440:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c444:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c446:	2100      	movs	r1, #0
 800c448:	2037      	movs	r0, #55	; 0x37
 800c44a:	f7ff ffee 	bl	800c42a <send_cmd>
 800c44e:	4603      	mov	r3, r0
 800c450:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c452:	7bbb      	ldrb	r3, [r7, #14]
 800c454:	2b01      	cmp	r3, #1
 800c456:	d901      	bls.n	800c45c <send_cmd+0x32>
 800c458:	7bbb      	ldrb	r3, [r7, #14]
 800c45a:	e051      	b.n	800c500 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c45c:	79fb      	ldrb	r3, [r7, #7]
 800c45e:	2b0c      	cmp	r3, #12
 800c460:	d008      	beq.n	800c474 <send_cmd+0x4a>
		despiselect();
 800c462:	f7ff ff5b 	bl	800c31c <despiselect>
		if (!spiselect()) return 0xFF;
 800c466:	f7ff ff69 	bl	800c33c <spiselect>
 800c46a:	4603      	mov	r3, r0
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d101      	bne.n	800c474 <send_cmd+0x4a>
 800c470:	23ff      	movs	r3, #255	; 0xff
 800c472:	e045      	b.n	800c500 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c474:	79fb      	ldrb	r3, [r7, #7]
 800c476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c47a:	b2db      	uxtb	r3, r3
 800c47c:	4618      	mov	r0, r3
 800c47e:	f7ff fedd 	bl	800c23c <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c482:	683b      	ldr	r3, [r7, #0]
 800c484:	0e1b      	lsrs	r3, r3, #24
 800c486:	b2db      	uxtb	r3, r3
 800c488:	4618      	mov	r0, r3
 800c48a:	f7ff fed7 	bl	800c23c <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c48e:	683b      	ldr	r3, [r7, #0]
 800c490:	0c1b      	lsrs	r3, r3, #16
 800c492:	b2db      	uxtb	r3, r3
 800c494:	4618      	mov	r0, r3
 800c496:	f7ff fed1 	bl	800c23c <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c49a:	683b      	ldr	r3, [r7, #0]
 800c49c:	0a1b      	lsrs	r3, r3, #8
 800c49e:	b2db      	uxtb	r3, r3
 800c4a0:	4618      	mov	r0, r3
 800c4a2:	f7ff fecb 	bl	800c23c <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c4a6:	683b      	ldr	r3, [r7, #0]
 800c4a8:	b2db      	uxtb	r3, r3
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7ff fec6 	bl	800c23c <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c4b0:	2301      	movs	r3, #1
 800c4b2:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c4b4:	79fb      	ldrb	r3, [r7, #7]
 800c4b6:	2b00      	cmp	r3, #0
 800c4b8:	d101      	bne.n	800c4be <send_cmd+0x94>
 800c4ba:	2395      	movs	r3, #149	; 0x95
 800c4bc:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c4be:	79fb      	ldrb	r3, [r7, #7]
 800c4c0:	2b08      	cmp	r3, #8
 800c4c2:	d101      	bne.n	800c4c8 <send_cmd+0x9e>
 800c4c4:	2387      	movs	r3, #135	; 0x87
 800c4c6:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c4c8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ca:	4618      	mov	r0, r3
 800c4cc:	f7ff feb6 	bl	800c23c <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c4d0:	79fb      	ldrb	r3, [r7, #7]
 800c4d2:	2b0c      	cmp	r3, #12
 800c4d4:	d102      	bne.n	800c4dc <send_cmd+0xb2>
 800c4d6:	20ff      	movs	r0, #255	; 0xff
 800c4d8:	f7ff feb0 	bl	800c23c <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c4dc:	230a      	movs	r3, #10
 800c4de:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c4e0:	20ff      	movs	r0, #255	; 0xff
 800c4e2:	f7ff feab 	bl	800c23c <xchg_spi>
 800c4e6:	4603      	mov	r3, r0
 800c4e8:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c4ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	da05      	bge.n	800c4fe <send_cmd+0xd4>
 800c4f2:	7bfb      	ldrb	r3, [r7, #15]
 800c4f4:	3b01      	subs	r3, #1
 800c4f6:	73fb      	strb	r3, [r7, #15]
 800c4f8:	7bfb      	ldrb	r3, [r7, #15]
 800c4fa:	2b00      	cmp	r3, #0
 800c4fc:	d1f0      	bne.n	800c4e0 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c4fe:	7bbb      	ldrb	r3, [r7, #14]
}
 800c500:	4618      	mov	r0, r3
 800c502:	3710      	adds	r7, #16
 800c504:	46bd      	mov	sp, r7
 800c506:	bd80      	pop	{r7, pc}

0800c508 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c508:	b590      	push	{r4, r7, lr}
 800c50a:	b085      	sub	sp, #20
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	4603      	mov	r3, r0
 800c510:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c512:	79fb      	ldrb	r3, [r7, #7]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d001      	beq.n	800c51c <USER_SPI_initialize+0x14>
 800c518:	2301      	movs	r3, #1
 800c51a:	e0d6      	b.n	800c6ca <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c51c:	4b6d      	ldr	r3, [pc, #436]	; (800c6d4 <USER_SPI_initialize+0x1cc>)
 800c51e:	781b      	ldrb	r3, [r3, #0]
 800c520:	b2db      	uxtb	r3, r3
 800c522:	f003 0302 	and.w	r3, r3, #2
 800c526:	2b00      	cmp	r3, #0
 800c528:	d003      	beq.n	800c532 <USER_SPI_initialize+0x2a>
 800c52a:	4b6a      	ldr	r3, [pc, #424]	; (800c6d4 <USER_SPI_initialize+0x1cc>)
 800c52c:	781b      	ldrb	r3, [r3, #0]
 800c52e:	b2db      	uxtb	r3, r3
 800c530:	e0cb      	b.n	800c6ca <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800c532:	4b69      	ldr	r3, [pc, #420]	; (800c6d8 <USER_SPI_initialize+0x1d0>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c53c:	4b66      	ldr	r3, [pc, #408]	; (800c6d8 <USER_SPI_initialize+0x1d0>)
 800c53e:	681b      	ldr	r3, [r3, #0]
 800c540:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800c544:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c546:	230a      	movs	r3, #10
 800c548:	73fb      	strb	r3, [r7, #15]
 800c54a:	e005      	b.n	800c558 <USER_SPI_initialize+0x50>
 800c54c:	20ff      	movs	r0, #255	; 0xff
 800c54e:	f7ff fe75 	bl	800c23c <xchg_spi>
 800c552:	7bfb      	ldrb	r3, [r7, #15]
 800c554:	3b01      	subs	r3, #1
 800c556:	73fb      	strb	r3, [r7, #15]
 800c558:	7bfb      	ldrb	r3, [r7, #15]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d1f6      	bne.n	800c54c <USER_SPI_initialize+0x44>

	ty = 0;
 800c55e:	2300      	movs	r3, #0
 800c560:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c562:	2100      	movs	r1, #0
 800c564:	2000      	movs	r0, #0
 800c566:	f7ff ff60 	bl	800c42a <send_cmd>
 800c56a:	4603      	mov	r3, r0
 800c56c:	2b01      	cmp	r3, #1
 800c56e:	f040 808b 	bne.w	800c688 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c572:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c576:	f7ff fe37 	bl	800c1e8 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c57a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c57e:	2008      	movs	r0, #8
 800c580:	f7ff ff53 	bl	800c42a <send_cmd>
 800c584:	4603      	mov	r3, r0
 800c586:	2b01      	cmp	r3, #1
 800c588:	d151      	bne.n	800c62e <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c58a:	2300      	movs	r3, #0
 800c58c:	73fb      	strb	r3, [r7, #15]
 800c58e:	e00d      	b.n	800c5ac <USER_SPI_initialize+0xa4>
 800c590:	7bfc      	ldrb	r4, [r7, #15]
 800c592:	20ff      	movs	r0, #255	; 0xff
 800c594:	f7ff fe52 	bl	800c23c <xchg_spi>
 800c598:	4603      	mov	r3, r0
 800c59a:	461a      	mov	r2, r3
 800c59c:	f104 0310 	add.w	r3, r4, #16
 800c5a0:	443b      	add	r3, r7
 800c5a2:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c5a6:	7bfb      	ldrb	r3, [r7, #15]
 800c5a8:	3301      	adds	r3, #1
 800c5aa:	73fb      	strb	r3, [r7, #15]
 800c5ac:	7bfb      	ldrb	r3, [r7, #15]
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d9ee      	bls.n	800c590 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c5b2:	7abb      	ldrb	r3, [r7, #10]
 800c5b4:	2b01      	cmp	r3, #1
 800c5b6:	d167      	bne.n	800c688 <USER_SPI_initialize+0x180>
 800c5b8:	7afb      	ldrb	r3, [r7, #11]
 800c5ba:	2baa      	cmp	r3, #170	; 0xaa
 800c5bc:	d164      	bne.n	800c688 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c5be:	bf00      	nop
 800c5c0:	f7ff fe26 	bl	800c210 <SPI_Timer_Status>
 800c5c4:	4603      	mov	r3, r0
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d007      	beq.n	800c5da <USER_SPI_initialize+0xd2>
 800c5ca:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c5ce:	20a9      	movs	r0, #169	; 0xa9
 800c5d0:	f7ff ff2b 	bl	800c42a <send_cmd>
 800c5d4:	4603      	mov	r3, r0
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d1f2      	bne.n	800c5c0 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c5da:	f7ff fe19 	bl	800c210 <SPI_Timer_Status>
 800c5de:	4603      	mov	r3, r0
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d051      	beq.n	800c688 <USER_SPI_initialize+0x180>
 800c5e4:	2100      	movs	r1, #0
 800c5e6:	203a      	movs	r0, #58	; 0x3a
 800c5e8:	f7ff ff1f 	bl	800c42a <send_cmd>
 800c5ec:	4603      	mov	r3, r0
 800c5ee:	2b00      	cmp	r3, #0
 800c5f0:	d14a      	bne.n	800c688 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c5f2:	2300      	movs	r3, #0
 800c5f4:	73fb      	strb	r3, [r7, #15]
 800c5f6:	e00d      	b.n	800c614 <USER_SPI_initialize+0x10c>
 800c5f8:	7bfc      	ldrb	r4, [r7, #15]
 800c5fa:	20ff      	movs	r0, #255	; 0xff
 800c5fc:	f7ff fe1e 	bl	800c23c <xchg_spi>
 800c600:	4603      	mov	r3, r0
 800c602:	461a      	mov	r2, r3
 800c604:	f104 0310 	add.w	r3, r4, #16
 800c608:	443b      	add	r3, r7
 800c60a:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c60e:	7bfb      	ldrb	r3, [r7, #15]
 800c610:	3301      	adds	r3, #1
 800c612:	73fb      	strb	r3, [r7, #15]
 800c614:	7bfb      	ldrb	r3, [r7, #15]
 800c616:	2b03      	cmp	r3, #3
 800c618:	d9ee      	bls.n	800c5f8 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c61a:	7a3b      	ldrb	r3, [r7, #8]
 800c61c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c620:	2b00      	cmp	r3, #0
 800c622:	d001      	beq.n	800c628 <USER_SPI_initialize+0x120>
 800c624:	230c      	movs	r3, #12
 800c626:	e000      	b.n	800c62a <USER_SPI_initialize+0x122>
 800c628:	2304      	movs	r3, #4
 800c62a:	737b      	strb	r3, [r7, #13]
 800c62c:	e02c      	b.n	800c688 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c62e:	2100      	movs	r1, #0
 800c630:	20a9      	movs	r0, #169	; 0xa9
 800c632:	f7ff fefa 	bl	800c42a <send_cmd>
 800c636:	4603      	mov	r3, r0
 800c638:	2b01      	cmp	r3, #1
 800c63a:	d804      	bhi.n	800c646 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c63c:	2302      	movs	r3, #2
 800c63e:	737b      	strb	r3, [r7, #13]
 800c640:	23a9      	movs	r3, #169	; 0xa9
 800c642:	73bb      	strb	r3, [r7, #14]
 800c644:	e003      	b.n	800c64e <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c646:	2301      	movs	r3, #1
 800c648:	737b      	strb	r3, [r7, #13]
 800c64a:	2301      	movs	r3, #1
 800c64c:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c64e:	bf00      	nop
 800c650:	f7ff fdde 	bl	800c210 <SPI_Timer_Status>
 800c654:	4603      	mov	r3, r0
 800c656:	2b00      	cmp	r3, #0
 800c658:	d007      	beq.n	800c66a <USER_SPI_initialize+0x162>
 800c65a:	7bbb      	ldrb	r3, [r7, #14]
 800c65c:	2100      	movs	r1, #0
 800c65e:	4618      	mov	r0, r3
 800c660:	f7ff fee3 	bl	800c42a <send_cmd>
 800c664:	4603      	mov	r3, r0
 800c666:	2b00      	cmp	r3, #0
 800c668:	d1f2      	bne.n	800c650 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c66a:	f7ff fdd1 	bl	800c210 <SPI_Timer_Status>
 800c66e:	4603      	mov	r3, r0
 800c670:	2b00      	cmp	r3, #0
 800c672:	d007      	beq.n	800c684 <USER_SPI_initialize+0x17c>
 800c674:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c678:	2010      	movs	r0, #16
 800c67a:	f7ff fed6 	bl	800c42a <send_cmd>
 800c67e:	4603      	mov	r3, r0
 800c680:	2b00      	cmp	r3, #0
 800c682:	d001      	beq.n	800c688 <USER_SPI_initialize+0x180>
				ty = 0;
 800c684:	2300      	movs	r3, #0
 800c686:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c688:	4a14      	ldr	r2, [pc, #80]	; (800c6dc <USER_SPI_initialize+0x1d4>)
 800c68a:	7b7b      	ldrb	r3, [r7, #13]
 800c68c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c68e:	f7ff fe45 	bl	800c31c <despiselect>

	if (ty) {			/* OK */
 800c692:	7b7b      	ldrb	r3, [r7, #13]
 800c694:	2b00      	cmp	r3, #0
 800c696:	d012      	beq.n	800c6be <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800c698:	4b0f      	ldr	r3, [pc, #60]	; (800c6d8 <USER_SPI_initialize+0x1d0>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c6a2:	4b0d      	ldr	r3, [pc, #52]	; (800c6d8 <USER_SPI_initialize+0x1d0>)
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	f042 0210 	orr.w	r2, r2, #16
 800c6aa:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c6ac:	4b09      	ldr	r3, [pc, #36]	; (800c6d4 <USER_SPI_initialize+0x1cc>)
 800c6ae:	781b      	ldrb	r3, [r3, #0]
 800c6b0:	b2db      	uxtb	r3, r3
 800c6b2:	f023 0301 	bic.w	r3, r3, #1
 800c6b6:	b2da      	uxtb	r2, r3
 800c6b8:	4b06      	ldr	r3, [pc, #24]	; (800c6d4 <USER_SPI_initialize+0x1cc>)
 800c6ba:	701a      	strb	r2, [r3, #0]
 800c6bc:	e002      	b.n	800c6c4 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c6be:	4b05      	ldr	r3, [pc, #20]	; (800c6d4 <USER_SPI_initialize+0x1cc>)
 800c6c0:	2201      	movs	r2, #1
 800c6c2:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c6c4:	4b03      	ldr	r3, [pc, #12]	; (800c6d4 <USER_SPI_initialize+0x1cc>)
 800c6c6:	781b      	ldrb	r3, [r3, #0]
 800c6c8:	b2db      	uxtb	r3, r3
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3714      	adds	r7, #20
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd90      	pop	{r4, r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	200000a8 	.word	0x200000a8
 800c6d8:	20000334 	.word	0x20000334
 800c6dc:	20000f0c 	.word	0x20000f0c

0800c6e0 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c6e0:	b480      	push	{r7}
 800c6e2:	b083      	sub	sp, #12
 800c6e4:	af00      	add	r7, sp, #0
 800c6e6:	4603      	mov	r3, r0
 800c6e8:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c6ea:	79fb      	ldrb	r3, [r7, #7]
 800c6ec:	2b00      	cmp	r3, #0
 800c6ee:	d001      	beq.n	800c6f4 <USER_SPI_status+0x14>
 800c6f0:	2301      	movs	r3, #1
 800c6f2:	e002      	b.n	800c6fa <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c6f4:	4b03      	ldr	r3, [pc, #12]	; (800c704 <USER_SPI_status+0x24>)
 800c6f6:	781b      	ldrb	r3, [r3, #0]
 800c6f8:	b2db      	uxtb	r3, r3
}
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	370c      	adds	r7, #12
 800c6fe:	46bd      	mov	sp, r7
 800c700:	bc80      	pop	{r7}
 800c702:	4770      	bx	lr
 800c704:	200000a8 	.word	0x200000a8

0800c708 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b084      	sub	sp, #16
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	60b9      	str	r1, [r7, #8]
 800c710:	607a      	str	r2, [r7, #4]
 800c712:	603b      	str	r3, [r7, #0]
 800c714:	4603      	mov	r3, r0
 800c716:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c718:	7bfb      	ldrb	r3, [r7, #15]
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d102      	bne.n	800c724 <USER_SPI_read+0x1c>
 800c71e:	683b      	ldr	r3, [r7, #0]
 800c720:	2b00      	cmp	r3, #0
 800c722:	d101      	bne.n	800c728 <USER_SPI_read+0x20>
 800c724:	2304      	movs	r3, #4
 800c726:	e04d      	b.n	800c7c4 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c728:	4b28      	ldr	r3, [pc, #160]	; (800c7cc <USER_SPI_read+0xc4>)
 800c72a:	781b      	ldrb	r3, [r3, #0]
 800c72c:	b2db      	uxtb	r3, r3
 800c72e:	f003 0301 	and.w	r3, r3, #1
 800c732:	2b00      	cmp	r3, #0
 800c734:	d001      	beq.n	800c73a <USER_SPI_read+0x32>
 800c736:	2303      	movs	r3, #3
 800c738:	e044      	b.n	800c7c4 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c73a:	4b25      	ldr	r3, [pc, #148]	; (800c7d0 <USER_SPI_read+0xc8>)
 800c73c:	781b      	ldrb	r3, [r3, #0]
 800c73e:	f003 0308 	and.w	r3, r3, #8
 800c742:	2b00      	cmp	r3, #0
 800c744:	d102      	bne.n	800c74c <USER_SPI_read+0x44>
 800c746:	687b      	ldr	r3, [r7, #4]
 800c748:	025b      	lsls	r3, r3, #9
 800c74a:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c74c:	683b      	ldr	r3, [r7, #0]
 800c74e:	2b01      	cmp	r3, #1
 800c750:	d111      	bne.n	800c776 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c752:	6879      	ldr	r1, [r7, #4]
 800c754:	2011      	movs	r0, #17
 800c756:	f7ff fe68 	bl	800c42a <send_cmd>
 800c75a:	4603      	mov	r3, r0
 800c75c:	2b00      	cmp	r3, #0
 800c75e:	d129      	bne.n	800c7b4 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c760:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c764:	68b8      	ldr	r0, [r7, #8]
 800c766:	f7ff fe05 	bl	800c374 <rcvr_datablock>
 800c76a:	4603      	mov	r3, r0
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d021      	beq.n	800c7b4 <USER_SPI_read+0xac>
			count = 0;
 800c770:	2300      	movs	r3, #0
 800c772:	603b      	str	r3, [r7, #0]
 800c774:	e01e      	b.n	800c7b4 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c776:	6879      	ldr	r1, [r7, #4]
 800c778:	2012      	movs	r0, #18
 800c77a:	f7ff fe56 	bl	800c42a <send_cmd>
 800c77e:	4603      	mov	r3, r0
 800c780:	2b00      	cmp	r3, #0
 800c782:	d117      	bne.n	800c7b4 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c784:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c788:	68b8      	ldr	r0, [r7, #8]
 800c78a:	f7ff fdf3 	bl	800c374 <rcvr_datablock>
 800c78e:	4603      	mov	r3, r0
 800c790:	2b00      	cmp	r3, #0
 800c792:	d00a      	beq.n	800c7aa <USER_SPI_read+0xa2>
				buff += 512;
 800c794:	68bb      	ldr	r3, [r7, #8]
 800c796:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c79a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	3b01      	subs	r3, #1
 800c7a0:	603b      	str	r3, [r7, #0]
 800c7a2:	683b      	ldr	r3, [r7, #0]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	d1ed      	bne.n	800c784 <USER_SPI_read+0x7c>
 800c7a8:	e000      	b.n	800c7ac <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c7aa:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c7ac:	2100      	movs	r1, #0
 800c7ae:	200c      	movs	r0, #12
 800c7b0:	f7ff fe3b 	bl	800c42a <send_cmd>
		}
	}
	despiselect();
 800c7b4:	f7ff fdb2 	bl	800c31c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c7b8:	683b      	ldr	r3, [r7, #0]
 800c7ba:	2b00      	cmp	r3, #0
 800c7bc:	bf14      	ite	ne
 800c7be:	2301      	movne	r3, #1
 800c7c0:	2300      	moveq	r3, #0
 800c7c2:	b2db      	uxtb	r3, r3
}
 800c7c4:	4618      	mov	r0, r3
 800c7c6:	3710      	adds	r7, #16
 800c7c8:	46bd      	mov	sp, r7
 800c7ca:	bd80      	pop	{r7, pc}
 800c7cc:	200000a8 	.word	0x200000a8
 800c7d0:	20000f0c 	.word	0x20000f0c

0800c7d4 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c7d4:	b580      	push	{r7, lr}
 800c7d6:	b084      	sub	sp, #16
 800c7d8:	af00      	add	r7, sp, #0
 800c7da:	60b9      	str	r1, [r7, #8]
 800c7dc:	607a      	str	r2, [r7, #4]
 800c7de:	603b      	str	r3, [r7, #0]
 800c7e0:	4603      	mov	r3, r0
 800c7e2:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c7e4:	7bfb      	ldrb	r3, [r7, #15]
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d102      	bne.n	800c7f0 <USER_SPI_write+0x1c>
 800c7ea:	683b      	ldr	r3, [r7, #0]
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	d101      	bne.n	800c7f4 <USER_SPI_write+0x20>
 800c7f0:	2304      	movs	r3, #4
 800c7f2:	e063      	b.n	800c8bc <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c7f4:	4b33      	ldr	r3, [pc, #204]	; (800c8c4 <USER_SPI_write+0xf0>)
 800c7f6:	781b      	ldrb	r3, [r3, #0]
 800c7f8:	b2db      	uxtb	r3, r3
 800c7fa:	f003 0301 	and.w	r3, r3, #1
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d001      	beq.n	800c806 <USER_SPI_write+0x32>
 800c802:	2303      	movs	r3, #3
 800c804:	e05a      	b.n	800c8bc <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c806:	4b2f      	ldr	r3, [pc, #188]	; (800c8c4 <USER_SPI_write+0xf0>)
 800c808:	781b      	ldrb	r3, [r3, #0]
 800c80a:	b2db      	uxtb	r3, r3
 800c80c:	f003 0304 	and.w	r3, r3, #4
 800c810:	2b00      	cmp	r3, #0
 800c812:	d001      	beq.n	800c818 <USER_SPI_write+0x44>
 800c814:	2302      	movs	r3, #2
 800c816:	e051      	b.n	800c8bc <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c818:	4b2b      	ldr	r3, [pc, #172]	; (800c8c8 <USER_SPI_write+0xf4>)
 800c81a:	781b      	ldrb	r3, [r3, #0]
 800c81c:	f003 0308 	and.w	r3, r3, #8
 800c820:	2b00      	cmp	r3, #0
 800c822:	d102      	bne.n	800c82a <USER_SPI_write+0x56>
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	025b      	lsls	r3, r3, #9
 800c828:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c82a:	683b      	ldr	r3, [r7, #0]
 800c82c:	2b01      	cmp	r3, #1
 800c82e:	d110      	bne.n	800c852 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c830:	6879      	ldr	r1, [r7, #4]
 800c832:	2018      	movs	r0, #24
 800c834:	f7ff fdf9 	bl	800c42a <send_cmd>
 800c838:	4603      	mov	r3, r0
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d136      	bne.n	800c8ac <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c83e:	21fe      	movs	r1, #254	; 0xfe
 800c840:	68b8      	ldr	r0, [r7, #8]
 800c842:	f7ff fdc0 	bl	800c3c6 <xmit_datablock>
 800c846:	4603      	mov	r3, r0
 800c848:	2b00      	cmp	r3, #0
 800c84a:	d02f      	beq.n	800c8ac <USER_SPI_write+0xd8>
			count = 0;
 800c84c:	2300      	movs	r3, #0
 800c84e:	603b      	str	r3, [r7, #0]
 800c850:	e02c      	b.n	800c8ac <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c852:	4b1d      	ldr	r3, [pc, #116]	; (800c8c8 <USER_SPI_write+0xf4>)
 800c854:	781b      	ldrb	r3, [r3, #0]
 800c856:	f003 0306 	and.w	r3, r3, #6
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d003      	beq.n	800c866 <USER_SPI_write+0x92>
 800c85e:	6839      	ldr	r1, [r7, #0]
 800c860:	2097      	movs	r0, #151	; 0x97
 800c862:	f7ff fde2 	bl	800c42a <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c866:	6879      	ldr	r1, [r7, #4]
 800c868:	2019      	movs	r0, #25
 800c86a:	f7ff fdde 	bl	800c42a <send_cmd>
 800c86e:	4603      	mov	r3, r0
 800c870:	2b00      	cmp	r3, #0
 800c872:	d11b      	bne.n	800c8ac <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c874:	21fc      	movs	r1, #252	; 0xfc
 800c876:	68b8      	ldr	r0, [r7, #8]
 800c878:	f7ff fda5 	bl	800c3c6 <xmit_datablock>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d00a      	beq.n	800c898 <USER_SPI_write+0xc4>
				buff += 512;
 800c882:	68bb      	ldr	r3, [r7, #8]
 800c884:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c888:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c88a:	683b      	ldr	r3, [r7, #0]
 800c88c:	3b01      	subs	r3, #1
 800c88e:	603b      	str	r3, [r7, #0]
 800c890:	683b      	ldr	r3, [r7, #0]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d1ee      	bne.n	800c874 <USER_SPI_write+0xa0>
 800c896:	e000      	b.n	800c89a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c898:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c89a:	21fd      	movs	r1, #253	; 0xfd
 800c89c:	2000      	movs	r0, #0
 800c89e:	f7ff fd92 	bl	800c3c6 <xmit_datablock>
 800c8a2:	4603      	mov	r3, r0
 800c8a4:	2b00      	cmp	r3, #0
 800c8a6:	d101      	bne.n	800c8ac <USER_SPI_write+0xd8>
 800c8a8:	2301      	movs	r3, #1
 800c8aa:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c8ac:	f7ff fd36 	bl	800c31c <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c8b0:	683b      	ldr	r3, [r7, #0]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	bf14      	ite	ne
 800c8b6:	2301      	movne	r3, #1
 800c8b8:	2300      	moveq	r3, #0
 800c8ba:	b2db      	uxtb	r3, r3
}
 800c8bc:	4618      	mov	r0, r3
 800c8be:	3710      	adds	r7, #16
 800c8c0:	46bd      	mov	sp, r7
 800c8c2:	bd80      	pop	{r7, pc}
 800c8c4:	200000a8 	.word	0x200000a8
 800c8c8:	20000f0c 	.word	0x20000f0c

0800c8cc <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c8cc:	b580      	push	{r7, lr}
 800c8ce:	b08c      	sub	sp, #48	; 0x30
 800c8d0:	af00      	add	r7, sp, #0
 800c8d2:	4603      	mov	r3, r0
 800c8d4:	603a      	str	r2, [r7, #0]
 800c8d6:	71fb      	strb	r3, [r7, #7]
 800c8d8:	460b      	mov	r3, r1
 800c8da:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c8dc:	79fb      	ldrb	r3, [r7, #7]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d001      	beq.n	800c8e6 <USER_SPI_ioctl+0x1a>
 800c8e2:	2304      	movs	r3, #4
 800c8e4:	e15a      	b.n	800cb9c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c8e6:	4baf      	ldr	r3, [pc, #700]	; (800cba4 <USER_SPI_ioctl+0x2d8>)
 800c8e8:	781b      	ldrb	r3, [r3, #0]
 800c8ea:	b2db      	uxtb	r3, r3
 800c8ec:	f003 0301 	and.w	r3, r3, #1
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d001      	beq.n	800c8f8 <USER_SPI_ioctl+0x2c>
 800c8f4:	2303      	movs	r3, #3
 800c8f6:	e151      	b.n	800cb9c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c8f8:	2301      	movs	r3, #1
 800c8fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800c8fe:	79bb      	ldrb	r3, [r7, #6]
 800c900:	2b04      	cmp	r3, #4
 800c902:	f200 8136 	bhi.w	800cb72 <USER_SPI_ioctl+0x2a6>
 800c906:	a201      	add	r2, pc, #4	; (adr r2, 800c90c <USER_SPI_ioctl+0x40>)
 800c908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c90c:	0800c921 	.word	0x0800c921
 800c910:	0800c935 	.word	0x0800c935
 800c914:	0800cb73 	.word	0x0800cb73
 800c918:	0800c9e1 	.word	0x0800c9e1
 800c91c:	0800cad7 	.word	0x0800cad7
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c920:	f7ff fd0c 	bl	800c33c <spiselect>
 800c924:	4603      	mov	r3, r0
 800c926:	2b00      	cmp	r3, #0
 800c928:	f000 8127 	beq.w	800cb7a <USER_SPI_ioctl+0x2ae>
 800c92c:	2300      	movs	r3, #0
 800c92e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c932:	e122      	b.n	800cb7a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c934:	2100      	movs	r1, #0
 800c936:	2009      	movs	r0, #9
 800c938:	f7ff fd77 	bl	800c42a <send_cmd>
 800c93c:	4603      	mov	r3, r0
 800c93e:	2b00      	cmp	r3, #0
 800c940:	f040 811d 	bne.w	800cb7e <USER_SPI_ioctl+0x2b2>
 800c944:	f107 030c 	add.w	r3, r7, #12
 800c948:	2110      	movs	r1, #16
 800c94a:	4618      	mov	r0, r3
 800c94c:	f7ff fd12 	bl	800c374 <rcvr_datablock>
 800c950:	4603      	mov	r3, r0
 800c952:	2b00      	cmp	r3, #0
 800c954:	f000 8113 	beq.w	800cb7e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c958:	7b3b      	ldrb	r3, [r7, #12]
 800c95a:	099b      	lsrs	r3, r3, #6
 800c95c:	b2db      	uxtb	r3, r3
 800c95e:	2b01      	cmp	r3, #1
 800c960:	d111      	bne.n	800c986 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c962:	7d7b      	ldrb	r3, [r7, #21]
 800c964:	461a      	mov	r2, r3
 800c966:	7d3b      	ldrb	r3, [r7, #20]
 800c968:	021b      	lsls	r3, r3, #8
 800c96a:	4413      	add	r3, r2
 800c96c:	461a      	mov	r2, r3
 800c96e:	7cfb      	ldrb	r3, [r7, #19]
 800c970:	041b      	lsls	r3, r3, #16
 800c972:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800c976:	4413      	add	r3, r2
 800c978:	3301      	adds	r3, #1
 800c97a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c97c:	69fb      	ldr	r3, [r7, #28]
 800c97e:	029a      	lsls	r2, r3, #10
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	601a      	str	r2, [r3, #0]
 800c984:	e028      	b.n	800c9d8 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c986:	7c7b      	ldrb	r3, [r7, #17]
 800c988:	f003 030f 	and.w	r3, r3, #15
 800c98c:	b2da      	uxtb	r2, r3
 800c98e:	7dbb      	ldrb	r3, [r7, #22]
 800c990:	09db      	lsrs	r3, r3, #7
 800c992:	b2db      	uxtb	r3, r3
 800c994:	4413      	add	r3, r2
 800c996:	b2da      	uxtb	r2, r3
 800c998:	7d7b      	ldrb	r3, [r7, #21]
 800c99a:	005b      	lsls	r3, r3, #1
 800c99c:	b2db      	uxtb	r3, r3
 800c99e:	f003 0306 	and.w	r3, r3, #6
 800c9a2:	b2db      	uxtb	r3, r3
 800c9a4:	4413      	add	r3, r2
 800c9a6:	b2db      	uxtb	r3, r3
 800c9a8:	3302      	adds	r3, #2
 800c9aa:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c9ae:	7d3b      	ldrb	r3, [r7, #20]
 800c9b0:	099b      	lsrs	r3, r3, #6
 800c9b2:	b2db      	uxtb	r3, r3
 800c9b4:	461a      	mov	r2, r3
 800c9b6:	7cfb      	ldrb	r3, [r7, #19]
 800c9b8:	009b      	lsls	r3, r3, #2
 800c9ba:	441a      	add	r2, r3
 800c9bc:	7cbb      	ldrb	r3, [r7, #18]
 800c9be:	029b      	lsls	r3, r3, #10
 800c9c0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c9c4:	4413      	add	r3, r2
 800c9c6:	3301      	adds	r3, #1
 800c9c8:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c9ca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c9ce:	3b09      	subs	r3, #9
 800c9d0:	69fa      	ldr	r2, [r7, #28]
 800c9d2:	409a      	lsls	r2, r3
 800c9d4:	683b      	ldr	r3, [r7, #0]
 800c9d6:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c9de:	e0ce      	b.n	800cb7e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c9e0:	4b71      	ldr	r3, [pc, #452]	; (800cba8 <USER_SPI_ioctl+0x2dc>)
 800c9e2:	781b      	ldrb	r3, [r3, #0]
 800c9e4:	f003 0304 	and.w	r3, r3, #4
 800c9e8:	2b00      	cmp	r3, #0
 800c9ea:	d031      	beq.n	800ca50 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c9ec:	2100      	movs	r1, #0
 800c9ee:	208d      	movs	r0, #141	; 0x8d
 800c9f0:	f7ff fd1b 	bl	800c42a <send_cmd>
 800c9f4:	4603      	mov	r3, r0
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	f040 80c3 	bne.w	800cb82 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c9fc:	20ff      	movs	r0, #255	; 0xff
 800c9fe:	f7ff fc1d 	bl	800c23c <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800ca02:	f107 030c 	add.w	r3, r7, #12
 800ca06:	2110      	movs	r1, #16
 800ca08:	4618      	mov	r0, r3
 800ca0a:	f7ff fcb3 	bl	800c374 <rcvr_datablock>
 800ca0e:	4603      	mov	r3, r0
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	f000 80b6 	beq.w	800cb82 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800ca16:	2330      	movs	r3, #48	; 0x30
 800ca18:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ca1c:	e007      	b.n	800ca2e <USER_SPI_ioctl+0x162>
 800ca1e:	20ff      	movs	r0, #255	; 0xff
 800ca20:	f7ff fc0c 	bl	800c23c <xchg_spi>
 800ca24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ca28:	3b01      	subs	r3, #1
 800ca2a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ca2e:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ca32:	2b00      	cmp	r3, #0
 800ca34:	d1f3      	bne.n	800ca1e <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800ca36:	7dbb      	ldrb	r3, [r7, #22]
 800ca38:	091b      	lsrs	r3, r3, #4
 800ca3a:	b2db      	uxtb	r3, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	2310      	movs	r3, #16
 800ca40:	fa03 f202 	lsl.w	r2, r3, r2
 800ca44:	683b      	ldr	r3, [r7, #0]
 800ca46:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800ca48:	2300      	movs	r3, #0
 800ca4a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800ca4e:	e098      	b.n	800cb82 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800ca50:	2100      	movs	r1, #0
 800ca52:	2009      	movs	r0, #9
 800ca54:	f7ff fce9 	bl	800c42a <send_cmd>
 800ca58:	4603      	mov	r3, r0
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	f040 8091 	bne.w	800cb82 <USER_SPI_ioctl+0x2b6>
 800ca60:	f107 030c 	add.w	r3, r7, #12
 800ca64:	2110      	movs	r1, #16
 800ca66:	4618      	mov	r0, r3
 800ca68:	f7ff fc84 	bl	800c374 <rcvr_datablock>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	2b00      	cmp	r3, #0
 800ca70:	f000 8087 	beq.w	800cb82 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800ca74:	4b4c      	ldr	r3, [pc, #304]	; (800cba8 <USER_SPI_ioctl+0x2dc>)
 800ca76:	781b      	ldrb	r3, [r3, #0]
 800ca78:	f003 0302 	and.w	r3, r3, #2
 800ca7c:	2b00      	cmp	r3, #0
 800ca7e:	d012      	beq.n	800caa6 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800ca80:	7dbb      	ldrb	r3, [r7, #22]
 800ca82:	005b      	lsls	r3, r3, #1
 800ca84:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800ca88:	7dfa      	ldrb	r2, [r7, #23]
 800ca8a:	09d2      	lsrs	r2, r2, #7
 800ca8c:	b2d2      	uxtb	r2, r2
 800ca8e:	4413      	add	r3, r2
 800ca90:	1c5a      	adds	r2, r3, #1
 800ca92:	7e7b      	ldrb	r3, [r7, #25]
 800ca94:	099b      	lsrs	r3, r3, #6
 800ca96:	b2db      	uxtb	r3, r3
 800ca98:	3b01      	subs	r3, #1
 800ca9a:	fa02 f303 	lsl.w	r3, r2, r3
 800ca9e:	461a      	mov	r2, r3
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	601a      	str	r2, [r3, #0]
 800caa4:	e013      	b.n	800cace <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800caa6:	7dbb      	ldrb	r3, [r7, #22]
 800caa8:	109b      	asrs	r3, r3, #2
 800caaa:	b29b      	uxth	r3, r3
 800caac:	f003 031f 	and.w	r3, r3, #31
 800cab0:	3301      	adds	r3, #1
 800cab2:	7dfa      	ldrb	r2, [r7, #23]
 800cab4:	00d2      	lsls	r2, r2, #3
 800cab6:	f002 0218 	and.w	r2, r2, #24
 800caba:	7df9      	ldrb	r1, [r7, #23]
 800cabc:	0949      	lsrs	r1, r1, #5
 800cabe:	b2c9      	uxtb	r1, r1
 800cac0:	440a      	add	r2, r1
 800cac2:	3201      	adds	r2, #1
 800cac4:	fb02 f303 	mul.w	r3, r2, r3
 800cac8:	461a      	mov	r2, r3
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800cace:	2300      	movs	r3, #0
 800cad0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800cad4:	e055      	b.n	800cb82 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800cad6:	4b34      	ldr	r3, [pc, #208]	; (800cba8 <USER_SPI_ioctl+0x2dc>)
 800cad8:	781b      	ldrb	r3, [r3, #0]
 800cada:	f003 0306 	and.w	r3, r3, #6
 800cade:	2b00      	cmp	r3, #0
 800cae0:	d051      	beq.n	800cb86 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800cae2:	f107 020c 	add.w	r2, r7, #12
 800cae6:	79fb      	ldrb	r3, [r7, #7]
 800cae8:	210b      	movs	r1, #11
 800caea:	4618      	mov	r0, r3
 800caec:	f7ff feee 	bl	800c8cc <USER_SPI_ioctl>
 800caf0:	4603      	mov	r3, r0
 800caf2:	2b00      	cmp	r3, #0
 800caf4:	d149      	bne.n	800cb8a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800caf6:	7b3b      	ldrb	r3, [r7, #12]
 800caf8:	099b      	lsrs	r3, r3, #6
 800cafa:	b2db      	uxtb	r3, r3
 800cafc:	2b00      	cmp	r3, #0
 800cafe:	d104      	bne.n	800cb0a <USER_SPI_ioctl+0x23e>
 800cb00:	7dbb      	ldrb	r3, [r7, #22]
 800cb02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d041      	beq.n	800cb8e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	623b      	str	r3, [r7, #32]
 800cb0e:	6a3b      	ldr	r3, [r7, #32]
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb14:	6a3b      	ldr	r3, [r7, #32]
 800cb16:	685b      	ldr	r3, [r3, #4]
 800cb18:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800cb1a:	4b23      	ldr	r3, [pc, #140]	; (800cba8 <USER_SPI_ioctl+0x2dc>)
 800cb1c:	781b      	ldrb	r3, [r3, #0]
 800cb1e:	f003 0308 	and.w	r3, r3, #8
 800cb22:	2b00      	cmp	r3, #0
 800cb24:	d105      	bne.n	800cb32 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800cb26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb28:	025b      	lsls	r3, r3, #9
 800cb2a:	62bb      	str	r3, [r7, #40]	; 0x28
 800cb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb2e:	025b      	lsls	r3, r3, #9
 800cb30:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800cb32:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800cb34:	2020      	movs	r0, #32
 800cb36:	f7ff fc78 	bl	800c42a <send_cmd>
 800cb3a:	4603      	mov	r3, r0
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d128      	bne.n	800cb92 <USER_SPI_ioctl+0x2c6>
 800cb40:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800cb42:	2021      	movs	r0, #33	; 0x21
 800cb44:	f7ff fc71 	bl	800c42a <send_cmd>
 800cb48:	4603      	mov	r3, r0
 800cb4a:	2b00      	cmp	r3, #0
 800cb4c:	d121      	bne.n	800cb92 <USER_SPI_ioctl+0x2c6>
 800cb4e:	2100      	movs	r1, #0
 800cb50:	2026      	movs	r0, #38	; 0x26
 800cb52:	f7ff fc6a 	bl	800c42a <send_cmd>
 800cb56:	4603      	mov	r3, r0
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d11a      	bne.n	800cb92 <USER_SPI_ioctl+0x2c6>
 800cb5c:	f247 5030 	movw	r0, #30000	; 0x7530
 800cb60:	f7ff fbb9 	bl	800c2d6 <wait_ready>
 800cb64:	4603      	mov	r3, r0
 800cb66:	2b00      	cmp	r3, #0
 800cb68:	d013      	beq.n	800cb92 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800cb6a:	2300      	movs	r3, #0
 800cb6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800cb70:	e00f      	b.n	800cb92 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800cb72:	2304      	movs	r3, #4
 800cb74:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800cb78:	e00c      	b.n	800cb94 <USER_SPI_ioctl+0x2c8>
		break;
 800cb7a:	bf00      	nop
 800cb7c:	e00a      	b.n	800cb94 <USER_SPI_ioctl+0x2c8>
		break;
 800cb7e:	bf00      	nop
 800cb80:	e008      	b.n	800cb94 <USER_SPI_ioctl+0x2c8>
		break;
 800cb82:	bf00      	nop
 800cb84:	e006      	b.n	800cb94 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800cb86:	bf00      	nop
 800cb88:	e004      	b.n	800cb94 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800cb8a:	bf00      	nop
 800cb8c:	e002      	b.n	800cb94 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800cb8e:	bf00      	nop
 800cb90:	e000      	b.n	800cb94 <USER_SPI_ioctl+0x2c8>
		break;
 800cb92:	bf00      	nop
	}

	despiselect();
 800cb94:	f7ff fbc2 	bl	800c31c <despiselect>

	return res;
 800cb98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800cb9c:	4618      	mov	r0, r3
 800cb9e:	3730      	adds	r7, #48	; 0x30
 800cba0:	46bd      	mov	sp, r7
 800cba2:	bd80      	pop	{r7, pc}
 800cba4:	200000a8 	.word	0x200000a8
 800cba8:	20000f0c 	.word	0x20000f0c

0800cbac <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cbac:	b580      	push	{r7, lr}
 800cbae:	b084      	sub	sp, #16
 800cbb0:	af00      	add	r7, sp, #0
 800cbb2:	6078      	str	r0, [r7, #4]
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800cbb8:	2300      	movs	r3, #0
 800cbba:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cbbc:	687b      	ldr	r3, [r7, #4]
 800cbbe:	7c1b      	ldrb	r3, [r3, #16]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d115      	bne.n	800cbf0 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cbc4:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbc8:	2202      	movs	r2, #2
 800cbca:	2181      	movs	r1, #129	; 0x81
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f004 ff02 	bl	80119d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2201      	movs	r2, #1
 800cbd6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cbd8:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cbdc:	2202      	movs	r2, #2
 800cbde:	2101      	movs	r1, #1
 800cbe0:	6878      	ldr	r0, [r7, #4]
 800cbe2:	f004 fef8 	bl	80119d6 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	2201      	movs	r2, #1
 800cbea:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800cbee:	e012      	b.n	800cc16 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800cbf0:	2340      	movs	r3, #64	; 0x40
 800cbf2:	2202      	movs	r2, #2
 800cbf4:	2181      	movs	r1, #129	; 0x81
 800cbf6:	6878      	ldr	r0, [r7, #4]
 800cbf8:	f004 feed 	bl	80119d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800cbfc:	687b      	ldr	r3, [r7, #4]
 800cbfe:	2201      	movs	r2, #1
 800cc00:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800cc02:	2340      	movs	r3, #64	; 0x40
 800cc04:	2202      	movs	r2, #2
 800cc06:	2101      	movs	r1, #1
 800cc08:	6878      	ldr	r0, [r7, #4]
 800cc0a:	f004 fee4 	bl	80119d6 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800cc0e:	687b      	ldr	r3, [r7, #4]
 800cc10:	2201      	movs	r2, #1
 800cc12:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800cc16:	2308      	movs	r3, #8
 800cc18:	2203      	movs	r2, #3
 800cc1a:	2182      	movs	r1, #130	; 0x82
 800cc1c:	6878      	ldr	r0, [r7, #4]
 800cc1e:	f004 feda 	bl	80119d6 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	2201      	movs	r2, #1
 800cc26:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800cc28:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800cc2c:	f004 fffa 	bl	8011c24 <USBD_static_malloc>
 800cc30:	4602      	mov	r2, r0
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d102      	bne.n	800cc48 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800cc42:	2301      	movs	r3, #1
 800cc44:	73fb      	strb	r3, [r7, #15]
 800cc46:	e026      	b.n	800cc96 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cc48:	687b      	ldr	r3, [r7, #4]
 800cc4a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc4e:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800cc50:	687b      	ldr	r3, [r7, #4]
 800cc52:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800cc5a:	68bb      	ldr	r3, [r7, #8]
 800cc5c:	2200      	movs	r2, #0
 800cc5e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800cc62:	68bb      	ldr	r3, [r7, #8]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800cc6a:	687b      	ldr	r3, [r7, #4]
 800cc6c:	7c1b      	ldrb	r3, [r3, #16]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d109      	bne.n	800cc86 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cc72:	68bb      	ldr	r3, [r7, #8]
 800cc74:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc78:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cc7c:	2101      	movs	r1, #1
 800cc7e:	6878      	ldr	r0, [r7, #4]
 800cc80:	f004 ff9a 	bl	8011bb8 <USBD_LL_PrepareReceive>
 800cc84:	e007      	b.n	800cc96 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800cc86:	68bb      	ldr	r3, [r7, #8]
 800cc88:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cc8c:	2340      	movs	r3, #64	; 0x40
 800cc8e:	2101      	movs	r1, #1
 800cc90:	6878      	ldr	r0, [r7, #4]
 800cc92:	f004 ff91 	bl	8011bb8 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800cc96:	7bfb      	ldrb	r3, [r7, #15]
}
 800cc98:	4618      	mov	r0, r3
 800cc9a:	3710      	adds	r7, #16
 800cc9c:	46bd      	mov	sp, r7
 800cc9e:	bd80      	pop	{r7, pc}

0800cca0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800cca0:	b580      	push	{r7, lr}
 800cca2:	b084      	sub	sp, #16
 800cca4:	af00      	add	r7, sp, #0
 800cca6:	6078      	str	r0, [r7, #4]
 800cca8:	460b      	mov	r3, r1
 800ccaa:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ccac:	2300      	movs	r3, #0
 800ccae:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ccb0:	2181      	movs	r1, #129	; 0x81
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f004 feb5 	bl	8011a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2200      	movs	r2, #0
 800ccbc:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ccbe:	2101      	movs	r1, #1
 800ccc0:	6878      	ldr	r0, [r7, #4]
 800ccc2:	f004 feae 	bl	8011a22 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	2200      	movs	r2, #0
 800ccca:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ccce:	2182      	movs	r1, #130	; 0x82
 800ccd0:	6878      	ldr	r0, [r7, #4]
 800ccd2:	f004 fea6 	bl	8011a22 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	2200      	movs	r2, #0
 800ccda:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cce2:	2b00      	cmp	r3, #0
 800cce4:	d00e      	beq.n	800cd04 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f004 ffa0 	bl	8011c3c <USBD_static_free>
    pdev->pClassData = NULL;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2200      	movs	r2, #0
 800cd00:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800cd04:	7bfb      	ldrb	r3, [r7, #15]
}
 800cd06:	4618      	mov	r0, r3
 800cd08:	3710      	adds	r7, #16
 800cd0a:	46bd      	mov	sp, r7
 800cd0c:	bd80      	pop	{r7, pc}

0800cd0e <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800cd0e:	b580      	push	{r7, lr}
 800cd10:	b086      	sub	sp, #24
 800cd12:	af00      	add	r7, sp, #0
 800cd14:	6078      	str	r0, [r7, #4]
 800cd16:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cd1e:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cd20:	2300      	movs	r3, #0
 800cd22:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800cd24:	2300      	movs	r3, #0
 800cd26:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800cd28:	2300      	movs	r3, #0
 800cd2a:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cd2c:	683b      	ldr	r3, [r7, #0]
 800cd2e:	781b      	ldrb	r3, [r3, #0]
 800cd30:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d039      	beq.n	800cdac <USBD_CDC_Setup+0x9e>
 800cd38:	2b20      	cmp	r3, #32
 800cd3a:	d17f      	bne.n	800ce3c <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800cd3c:	683b      	ldr	r3, [r7, #0]
 800cd3e:	88db      	ldrh	r3, [r3, #6]
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	d029      	beq.n	800cd98 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800cd44:	683b      	ldr	r3, [r7, #0]
 800cd46:	781b      	ldrb	r3, [r3, #0]
 800cd48:	b25b      	sxtb	r3, r3
 800cd4a:	2b00      	cmp	r3, #0
 800cd4c:	da11      	bge.n	800cd72 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd4e:	687b      	ldr	r3, [r7, #4]
 800cd50:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd54:	689b      	ldr	r3, [r3, #8]
 800cd56:	683a      	ldr	r2, [r7, #0]
 800cd58:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800cd5a:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd5c:	683a      	ldr	r2, [r7, #0]
 800cd5e:	88d2      	ldrh	r2, [r2, #6]
 800cd60:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cd62:	6939      	ldr	r1, [r7, #16]
 800cd64:	683b      	ldr	r3, [r7, #0]
 800cd66:	88db      	ldrh	r3, [r3, #6]
 800cd68:	461a      	mov	r2, r3
 800cd6a:	6878      	ldr	r0, [r7, #4]
 800cd6c:	f001 f993 	bl	800e096 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800cd70:	e06b      	b.n	800ce4a <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800cd72:	683b      	ldr	r3, [r7, #0]
 800cd74:	785a      	ldrb	r2, [r3, #1]
 800cd76:	693b      	ldr	r3, [r7, #16]
 800cd78:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800cd7c:	683b      	ldr	r3, [r7, #0]
 800cd7e:	88db      	ldrh	r3, [r3, #6]
 800cd80:	b2da      	uxtb	r2, r3
 800cd82:	693b      	ldr	r3, [r7, #16]
 800cd84:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cd88:	6939      	ldr	r1, [r7, #16]
 800cd8a:	683b      	ldr	r3, [r7, #0]
 800cd8c:	88db      	ldrh	r3, [r3, #6]
 800cd8e:	461a      	mov	r2, r3
 800cd90:	6878      	ldr	r0, [r7, #4]
 800cd92:	f001 f9ae 	bl	800e0f2 <USBD_CtlPrepareRx>
    break;
 800cd96:	e058      	b.n	800ce4a <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cd98:	687b      	ldr	r3, [r7, #4]
 800cd9a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd9e:	689b      	ldr	r3, [r3, #8]
 800cda0:	683a      	ldr	r2, [r7, #0]
 800cda2:	7850      	ldrb	r0, [r2, #1]
 800cda4:	2200      	movs	r2, #0
 800cda6:	6839      	ldr	r1, [r7, #0]
 800cda8:	4798      	blx	r3
    break;
 800cdaa:	e04e      	b.n	800ce4a <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cdac:	683b      	ldr	r3, [r7, #0]
 800cdae:	785b      	ldrb	r3, [r3, #1]
 800cdb0:	2b0b      	cmp	r3, #11
 800cdb2:	d02e      	beq.n	800ce12 <USBD_CDC_Setup+0x104>
 800cdb4:	2b0b      	cmp	r3, #11
 800cdb6:	dc38      	bgt.n	800ce2a <USBD_CDC_Setup+0x11c>
 800cdb8:	2b00      	cmp	r3, #0
 800cdba:	d002      	beq.n	800cdc2 <USBD_CDC_Setup+0xb4>
 800cdbc:	2b0a      	cmp	r3, #10
 800cdbe:	d014      	beq.n	800cdea <USBD_CDC_Setup+0xdc>
 800cdc0:	e033      	b.n	800ce2a <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cdc8:	2b03      	cmp	r3, #3
 800cdca:	d107      	bne.n	800cddc <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800cdcc:	f107 030c 	add.w	r3, r7, #12
 800cdd0:	2202      	movs	r2, #2
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	6878      	ldr	r0, [r7, #4]
 800cdd6:	f001 f95e 	bl	800e096 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800cdda:	e02e      	b.n	800ce3a <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800cddc:	6839      	ldr	r1, [r7, #0]
 800cdde:	6878      	ldr	r0, [r7, #4]
 800cde0:	f001 f8ef 	bl	800dfc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800cde4:	2302      	movs	r3, #2
 800cde6:	75fb      	strb	r3, [r7, #23]
      break;
 800cde8:	e027      	b.n	800ce3a <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cdea:	687b      	ldr	r3, [r7, #4]
 800cdec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cdf0:	2b03      	cmp	r3, #3
 800cdf2:	d107      	bne.n	800ce04 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800cdf4:	f107 030f 	add.w	r3, r7, #15
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	4619      	mov	r1, r3
 800cdfc:	6878      	ldr	r0, [r7, #4]
 800cdfe:	f001 f94a 	bl	800e096 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800ce02:	e01a      	b.n	800ce3a <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800ce04:	6839      	ldr	r1, [r7, #0]
 800ce06:	6878      	ldr	r0, [r7, #4]
 800ce08:	f001 f8db 	bl	800dfc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ce0c:	2302      	movs	r3, #2
 800ce0e:	75fb      	strb	r3, [r7, #23]
      break;
 800ce10:	e013      	b.n	800ce3a <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800ce12:	687b      	ldr	r3, [r7, #4]
 800ce14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800ce18:	2b03      	cmp	r3, #3
 800ce1a:	d00d      	beq.n	800ce38 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800ce1c:	6839      	ldr	r1, [r7, #0]
 800ce1e:	6878      	ldr	r0, [r7, #4]
 800ce20:	f001 f8cf 	bl	800dfc2 <USBD_CtlError>
			  ret = USBD_FAIL;
 800ce24:	2302      	movs	r3, #2
 800ce26:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800ce28:	e006      	b.n	800ce38 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800ce2a:	6839      	ldr	r1, [r7, #0]
 800ce2c:	6878      	ldr	r0, [r7, #4]
 800ce2e:	f001 f8c8 	bl	800dfc2 <USBD_CtlError>
      ret = USBD_FAIL;
 800ce32:	2302      	movs	r3, #2
 800ce34:	75fb      	strb	r3, [r7, #23]
      break;
 800ce36:	e000      	b.n	800ce3a <USBD_CDC_Setup+0x12c>
      break;
 800ce38:	bf00      	nop
    }
    break;
 800ce3a:	e006      	b.n	800ce4a <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800ce3c:	6839      	ldr	r1, [r7, #0]
 800ce3e:	6878      	ldr	r0, [r7, #4]
 800ce40:	f001 f8bf 	bl	800dfc2 <USBD_CtlError>
    ret = USBD_FAIL;
 800ce44:	2302      	movs	r3, #2
 800ce46:	75fb      	strb	r3, [r7, #23]
    break;
 800ce48:	bf00      	nop
  }

  return ret;
 800ce4a:	7dfb      	ldrb	r3, [r7, #23]
}
 800ce4c:	4618      	mov	r0, r3
 800ce4e:	3718      	adds	r7, #24
 800ce50:	46bd      	mov	sp, r7
 800ce52:	bd80      	pop	{r7, pc}

0800ce54 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800ce54:	b580      	push	{r7, lr}
 800ce56:	b084      	sub	sp, #16
 800ce58:	af00      	add	r7, sp, #0
 800ce5a:	6078      	str	r0, [r7, #4]
 800ce5c:	460b      	mov	r3, r1
 800ce5e:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800ce60:	687b      	ldr	r3, [r7, #4]
 800ce62:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce66:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800ce6e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800ce70:	687b      	ldr	r3, [r7, #4]
 800ce72:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce76:	2b00      	cmp	r3, #0
 800ce78:	d03a      	beq.n	800cef0 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800ce7a:	78fa      	ldrb	r2, [r7, #3]
 800ce7c:	6879      	ldr	r1, [r7, #4]
 800ce7e:	4613      	mov	r3, r2
 800ce80:	009b      	lsls	r3, r3, #2
 800ce82:	4413      	add	r3, r2
 800ce84:	009b      	lsls	r3, r3, #2
 800ce86:	440b      	add	r3, r1
 800ce88:	331c      	adds	r3, #28
 800ce8a:	681b      	ldr	r3, [r3, #0]
 800ce8c:	2b00      	cmp	r3, #0
 800ce8e:	d029      	beq.n	800cee4 <USBD_CDC_DataIn+0x90>
 800ce90:	78fa      	ldrb	r2, [r7, #3]
 800ce92:	6879      	ldr	r1, [r7, #4]
 800ce94:	4613      	mov	r3, r2
 800ce96:	009b      	lsls	r3, r3, #2
 800ce98:	4413      	add	r3, r2
 800ce9a:	009b      	lsls	r3, r3, #2
 800ce9c:	440b      	add	r3, r1
 800ce9e:	331c      	adds	r3, #28
 800cea0:	681a      	ldr	r2, [r3, #0]
 800cea2:	78f9      	ldrb	r1, [r7, #3]
 800cea4:	68b8      	ldr	r0, [r7, #8]
 800cea6:	460b      	mov	r3, r1
 800cea8:	009b      	lsls	r3, r3, #2
 800ceaa:	440b      	add	r3, r1
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	4403      	add	r3, r0
 800ceb0:	3338      	adds	r3, #56	; 0x38
 800ceb2:	681b      	ldr	r3, [r3, #0]
 800ceb4:	fbb2 f1f3 	udiv	r1, r2, r3
 800ceb8:	fb01 f303 	mul.w	r3, r1, r3
 800cebc:	1ad3      	subs	r3, r2, r3
 800cebe:	2b00      	cmp	r3, #0
 800cec0:	d110      	bne.n	800cee4 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cec2:	78fa      	ldrb	r2, [r7, #3]
 800cec4:	6879      	ldr	r1, [r7, #4]
 800cec6:	4613      	mov	r3, r2
 800cec8:	009b      	lsls	r3, r3, #2
 800ceca:	4413      	add	r3, r2
 800cecc:	009b      	lsls	r3, r3, #2
 800cece:	440b      	add	r3, r1
 800ced0:	331c      	adds	r3, #28
 800ced2:	2200      	movs	r2, #0
 800ced4:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800ced6:	78f9      	ldrb	r1, [r7, #3]
 800ced8:	2300      	movs	r3, #0
 800ceda:	2200      	movs	r2, #0
 800cedc:	6878      	ldr	r0, [r7, #4]
 800cede:	f004 fe48 	bl	8011b72 <USBD_LL_Transmit>
 800cee2:	e003      	b.n	800ceec <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800cee4:	68fb      	ldr	r3, [r7, #12]
 800cee6:	2200      	movs	r2, #0
 800cee8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800ceec:	2300      	movs	r3, #0
 800ceee:	e000      	b.n	800cef2 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800cef0:	2302      	movs	r3, #2
  }
}
 800cef2:	4618      	mov	r0, r3
 800cef4:	3710      	adds	r7, #16
 800cef6:	46bd      	mov	sp, r7
 800cef8:	bd80      	pop	{r7, pc}

0800cefa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cefa:	b580      	push	{r7, lr}
 800cefc:	b084      	sub	sp, #16
 800cefe:	af00      	add	r7, sp, #0
 800cf00:	6078      	str	r0, [r7, #4]
 800cf02:	460b      	mov	r3, r1
 800cf04:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cf06:	687b      	ldr	r3, [r7, #4]
 800cf08:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf0c:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800cf0e:	78fb      	ldrb	r3, [r7, #3]
 800cf10:	4619      	mov	r1, r3
 800cf12:	6878      	ldr	r0, [r7, #4]
 800cf14:	f004 fe73 	bl	8011bfe <USBD_LL_GetRxDataSize>
 800cf18:	4602      	mov	r2, r0
 800cf1a:	68fb      	ldr	r3, [r7, #12]
 800cf1c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d00d      	beq.n	800cf46 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800cf2a:	687b      	ldr	r3, [r7, #4]
 800cf2c:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf30:	68db      	ldr	r3, [r3, #12]
 800cf32:	68fa      	ldr	r2, [r7, #12]
 800cf34:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800cf38:	68fa      	ldr	r2, [r7, #12]
 800cf3a:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800cf3e:	4611      	mov	r1, r2
 800cf40:	4798      	blx	r3

    return USBD_OK;
 800cf42:	2300      	movs	r3, #0
 800cf44:	e000      	b.n	800cf48 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800cf46:	2302      	movs	r3, #2
  }
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800cf50:	b580      	push	{r7, lr}
 800cf52:	b084      	sub	sp, #16
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cf5e:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d015      	beq.n	800cf96 <USBD_CDC_EP0_RxReady+0x46>
 800cf6a:	68fb      	ldr	r3, [r7, #12]
 800cf6c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cf70:	2bff      	cmp	r3, #255	; 0xff
 800cf72:	d010      	beq.n	800cf96 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cf7a:	689b      	ldr	r3, [r3, #8]
 800cf7c:	68fa      	ldr	r2, [r7, #12]
 800cf7e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800cf82:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cf84:	68fa      	ldr	r2, [r7, #12]
 800cf86:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cf8a:	b292      	uxth	r2, r2
 800cf8c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	22ff      	movs	r2, #255	; 0xff
 800cf92:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800cf96:	2300      	movs	r3, #0
}
 800cf98:	4618      	mov	r0, r3
 800cf9a:	3710      	adds	r7, #16
 800cf9c:	46bd      	mov	sp, r7
 800cf9e:	bd80      	pop	{r7, pc}

0800cfa0 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	b083      	sub	sp, #12
 800cfa4:	af00      	add	r7, sp, #0
 800cfa6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	2243      	movs	r2, #67	; 0x43
 800cfac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800cfae:	4b03      	ldr	r3, [pc, #12]	; (800cfbc <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cfb0:	4618      	mov	r0, r3
 800cfb2:	370c      	adds	r7, #12
 800cfb4:	46bd      	mov	sp, r7
 800cfb6:	bc80      	pop	{r7}
 800cfb8:	4770      	bx	lr
 800cfba:	bf00      	nop
 800cfbc:	20000134 	.word	0x20000134

0800cfc0 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800cfc8:	687b      	ldr	r3, [r7, #4]
 800cfca:	2243      	movs	r2, #67	; 0x43
 800cfcc:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800cfce:	4b03      	ldr	r3, [pc, #12]	; (800cfdc <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	370c      	adds	r7, #12
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bc80      	pop	{r7}
 800cfd8:	4770      	bx	lr
 800cfda:	bf00      	nop
 800cfdc:	200000f0 	.word	0x200000f0

0800cfe0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800cfe0:	b480      	push	{r7}
 800cfe2:	b083      	sub	sp, #12
 800cfe4:	af00      	add	r7, sp, #0
 800cfe6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	2243      	movs	r2, #67	; 0x43
 800cfec:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800cfee:	4b03      	ldr	r3, [pc, #12]	; (800cffc <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cff0:	4618      	mov	r0, r3
 800cff2:	370c      	adds	r7, #12
 800cff4:	46bd      	mov	sp, r7
 800cff6:	bc80      	pop	{r7}
 800cff8:	4770      	bx	lr
 800cffa:	bf00      	nop
 800cffc:	20000178 	.word	0x20000178

0800d000 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800d000:	b480      	push	{r7}
 800d002:	b083      	sub	sp, #12
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800d008:	687b      	ldr	r3, [r7, #4]
 800d00a:	220a      	movs	r2, #10
 800d00c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800d00e:	4b03      	ldr	r3, [pc, #12]	; (800d01c <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800d010:	4618      	mov	r0, r3
 800d012:	370c      	adds	r7, #12
 800d014:	46bd      	mov	sp, r7
 800d016:	bc80      	pop	{r7}
 800d018:	4770      	bx	lr
 800d01a:	bf00      	nop
 800d01c:	200000ac 	.word	0x200000ac

0800d020 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800d020:	b480      	push	{r7}
 800d022:	b085      	sub	sp, #20
 800d024:	af00      	add	r7, sp, #0
 800d026:	6078      	str	r0, [r7, #4]
 800d028:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800d02a:	2302      	movs	r3, #2
 800d02c:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800d02e:	683b      	ldr	r3, [r7, #0]
 800d030:	2b00      	cmp	r3, #0
 800d032:	d005      	beq.n	800d040 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800d034:	687b      	ldr	r3, [r7, #4]
 800d036:	683a      	ldr	r2, [r7, #0]
 800d038:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800d03c:	2300      	movs	r3, #0
 800d03e:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800d040:	7bfb      	ldrb	r3, [r7, #15]
}
 800d042:	4618      	mov	r0, r3
 800d044:	3714      	adds	r7, #20
 800d046:	46bd      	mov	sp, r7
 800d048:	bc80      	pop	{r7}
 800d04a:	4770      	bx	lr

0800d04c <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800d04c:	b480      	push	{r7}
 800d04e:	b087      	sub	sp, #28
 800d050:	af00      	add	r7, sp, #0
 800d052:	60f8      	str	r0, [r7, #12]
 800d054:	60b9      	str	r1, [r7, #8]
 800d056:	4613      	mov	r3, r2
 800d058:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d060:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800d062:	697b      	ldr	r3, [r7, #20]
 800d064:	68ba      	ldr	r2, [r7, #8]
 800d066:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800d06a:	88fa      	ldrh	r2, [r7, #6]
 800d06c:	697b      	ldr	r3, [r7, #20]
 800d06e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800d072:	2300      	movs	r3, #0
}
 800d074:	4618      	mov	r0, r3
 800d076:	371c      	adds	r7, #28
 800d078:	46bd      	mov	sp, r7
 800d07a:	bc80      	pop	{r7}
 800d07c:	4770      	bx	lr

0800d07e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800d07e:	b480      	push	{r7}
 800d080:	b085      	sub	sp, #20
 800d082:	af00      	add	r7, sp, #0
 800d084:	6078      	str	r0, [r7, #4]
 800d086:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d08e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800d090:	68fb      	ldr	r3, [r7, #12]
 800d092:	683a      	ldr	r2, [r7, #0]
 800d094:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800d098:	2300      	movs	r3, #0
}
 800d09a:	4618      	mov	r0, r3
 800d09c:	3714      	adds	r7, #20
 800d09e:	46bd      	mov	sp, r7
 800d0a0:	bc80      	pop	{r7}
 800d0a2:	4770      	bx	lr

0800d0a4 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800d0a4:	b580      	push	{r7, lr}
 800d0a6:	b084      	sub	sp, #16
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0b2:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d0ba:	2b00      	cmp	r3, #0
 800d0bc:	d01c      	beq.n	800d0f8 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800d0be:	68fb      	ldr	r3, [r7, #12]
 800d0c0:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	d115      	bne.n	800d0f4 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800d0c8:	68fb      	ldr	r3, [r7, #12]
 800d0ca:	2201      	movs	r2, #1
 800d0cc:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800d0d0:	68fb      	ldr	r3, [r7, #12]
 800d0d2:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800d0d6:	687b      	ldr	r3, [r7, #4]
 800d0d8:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800d0e0:	68fb      	ldr	r3, [r7, #12]
 800d0e2:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800d0e6:	b29b      	uxth	r3, r3
 800d0e8:	2181      	movs	r1, #129	; 0x81
 800d0ea:	6878      	ldr	r0, [r7, #4]
 800d0ec:	f004 fd41 	bl	8011b72 <USBD_LL_Transmit>

      return USBD_OK;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	e002      	b.n	800d0fa <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800d0f4:	2301      	movs	r3, #1
 800d0f6:	e000      	b.n	800d0fa <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800d0f8:	2302      	movs	r3, #2
  }
}
 800d0fa:	4618      	mov	r0, r3
 800d0fc:	3710      	adds	r7, #16
 800d0fe:	46bd      	mov	sp, r7
 800d100:	bd80      	pop	{r7, pc}

0800d102 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800d102:	b580      	push	{r7, lr}
 800d104:	b084      	sub	sp, #16
 800d106:	af00      	add	r7, sp, #0
 800d108:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800d10a:	687b      	ldr	r3, [r7, #4]
 800d10c:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d110:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800d112:	687b      	ldr	r3, [r7, #4]
 800d114:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d118:	2b00      	cmp	r3, #0
 800d11a:	d017      	beq.n	800d14c <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	7c1b      	ldrb	r3, [r3, #16]
 800d120:	2b00      	cmp	r3, #0
 800d122:	d109      	bne.n	800d138 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d12a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800d12e:	2101      	movs	r1, #1
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f004 fd41 	bl	8011bb8 <USBD_LL_PrepareReceive>
 800d136:	e007      	b.n	800d148 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800d13e:	2340      	movs	r3, #64	; 0x40
 800d140:	2101      	movs	r1, #1
 800d142:	6878      	ldr	r0, [r7, #4]
 800d144:	f004 fd38 	bl	8011bb8 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800d148:	2300      	movs	r3, #0
 800d14a:	e000      	b.n	800d14e <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800d14c:	2302      	movs	r3, #2
  }
}
 800d14e:	4618      	mov	r0, r3
 800d150:	3710      	adds	r7, #16
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}

0800d156 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800d156:	b580      	push	{r7, lr}
 800d158:	b084      	sub	sp, #16
 800d15a:	af00      	add	r7, sp, #0
 800d15c:	60f8      	str	r0, [r7, #12]
 800d15e:	60b9      	str	r1, [r7, #8]
 800d160:	4613      	mov	r3, r2
 800d162:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800d164:	68fb      	ldr	r3, [r7, #12]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d101      	bne.n	800d16e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800d16a:	2302      	movs	r3, #2
 800d16c:	e01a      	b.n	800d1a4 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800d16e:	68fb      	ldr	r3, [r7, #12]
 800d170:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d174:	2b00      	cmp	r3, #0
 800d176:	d003      	beq.n	800d180 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800d178:	68fb      	ldr	r3, [r7, #12]
 800d17a:	2200      	movs	r2, #0
 800d17c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800d180:	68bb      	ldr	r3, [r7, #8]
 800d182:	2b00      	cmp	r3, #0
 800d184:	d003      	beq.n	800d18e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800d186:	68fb      	ldr	r3, [r7, #12]
 800d188:	68ba      	ldr	r2, [r7, #8]
 800d18a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	2201      	movs	r2, #1
 800d192:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800d196:	68fb      	ldr	r3, [r7, #12]
 800d198:	79fa      	ldrb	r2, [r7, #7]
 800d19a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800d19c:	68f8      	ldr	r0, [r7, #12]
 800d19e:	f004 fba5 	bl	80118ec <USBD_LL_Init>

  return USBD_OK;
 800d1a2:	2300      	movs	r3, #0
}
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	3710      	adds	r7, #16
 800d1a8:	46bd      	mov	sp, r7
 800d1aa:	bd80      	pop	{r7, pc}

0800d1ac <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800d1ac:	b480      	push	{r7}
 800d1ae:	b085      	sub	sp, #20
 800d1b0:	af00      	add	r7, sp, #0
 800d1b2:	6078      	str	r0, [r7, #4]
 800d1b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800d1b6:	2300      	movs	r3, #0
 800d1b8:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800d1ba:	683b      	ldr	r3, [r7, #0]
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d006      	beq.n	800d1ce <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	683a      	ldr	r2, [r7, #0]
 800d1c4:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800d1c8:	2300      	movs	r3, #0
 800d1ca:	73fb      	strb	r3, [r7, #15]
 800d1cc:	e001      	b.n	800d1d2 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800d1ce:	2302      	movs	r3, #2
 800d1d0:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800d1d2:	7bfb      	ldrb	r3, [r7, #15]
}
 800d1d4:	4618      	mov	r0, r3
 800d1d6:	3714      	adds	r7, #20
 800d1d8:	46bd      	mov	sp, r7
 800d1da:	bc80      	pop	{r7}
 800d1dc:	4770      	bx	lr

0800d1de <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800d1de:	b580      	push	{r7, lr}
 800d1e0:	b082      	sub	sp, #8
 800d1e2:	af00      	add	r7, sp, #0
 800d1e4:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800d1e6:	6878      	ldr	r0, [r7, #4]
 800d1e8:	f004 fbda 	bl	80119a0 <USBD_LL_Start>

  return USBD_OK;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3708      	adds	r7, #8
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}

0800d1f6 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800d1f6:	b480      	push	{r7}
 800d1f8:	b083      	sub	sp, #12
 800d1fa:	af00      	add	r7, sp, #0
 800d1fc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800d1fe:	2300      	movs	r3, #0
}
 800d200:	4618      	mov	r0, r3
 800d202:	370c      	adds	r7, #12
 800d204:	46bd      	mov	sp, r7
 800d206:	bc80      	pop	{r7}
 800d208:	4770      	bx	lr

0800d20a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d20a:	b580      	push	{r7, lr}
 800d20c:	b084      	sub	sp, #16
 800d20e:	af00      	add	r7, sp, #0
 800d210:	6078      	str	r0, [r7, #4]
 800d212:	460b      	mov	r3, r1
 800d214:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800d216:	2302      	movs	r3, #2
 800d218:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d220:	2b00      	cmp	r3, #0
 800d222:	d00c      	beq.n	800d23e <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	78fa      	ldrb	r2, [r7, #3]
 800d22e:	4611      	mov	r1, r2
 800d230:	6878      	ldr	r0, [r7, #4]
 800d232:	4798      	blx	r3
 800d234:	4603      	mov	r3, r0
 800d236:	2b00      	cmp	r3, #0
 800d238:	d101      	bne.n	800d23e <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800d23a:	2300      	movs	r3, #0
 800d23c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800d23e:	7bfb      	ldrb	r3, [r7, #15]
}
 800d240:	4618      	mov	r0, r3
 800d242:	3710      	adds	r7, #16
 800d244:	46bd      	mov	sp, r7
 800d246:	bd80      	pop	{r7, pc}

0800d248 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800d248:	b580      	push	{r7, lr}
 800d24a:	b082      	sub	sp, #8
 800d24c:	af00      	add	r7, sp, #0
 800d24e:	6078      	str	r0, [r7, #4]
 800d250:	460b      	mov	r3, r1
 800d252:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d25a:	685b      	ldr	r3, [r3, #4]
 800d25c:	78fa      	ldrb	r2, [r7, #3]
 800d25e:	4611      	mov	r1, r2
 800d260:	6878      	ldr	r0, [r7, #4]
 800d262:	4798      	blx	r3
  return USBD_OK;
 800d264:	2300      	movs	r3, #0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}

0800d26e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d26e:	b580      	push	{r7, lr}
 800d270:	b082      	sub	sp, #8
 800d272:	af00      	add	r7, sp, #0
 800d274:	6078      	str	r0, [r7, #4]
 800d276:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d27e:	6839      	ldr	r1, [r7, #0]
 800d280:	4618      	mov	r0, r3
 800d282:	f000 fe62 	bl	800df4a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	2201      	movs	r2, #1
 800d28a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d28e:	687b      	ldr	r3, [r7, #4]
 800d290:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d294:	461a      	mov	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d2a2:	f003 031f 	and.w	r3, r3, #31
 800d2a6:	2b02      	cmp	r3, #2
 800d2a8:	d016      	beq.n	800d2d8 <USBD_LL_SetupStage+0x6a>
 800d2aa:	2b02      	cmp	r3, #2
 800d2ac:	d81c      	bhi.n	800d2e8 <USBD_LL_SetupStage+0x7a>
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d002      	beq.n	800d2b8 <USBD_LL_SetupStage+0x4a>
 800d2b2:	2b01      	cmp	r3, #1
 800d2b4:	d008      	beq.n	800d2c8 <USBD_LL_SetupStage+0x5a>
 800d2b6:	e017      	b.n	800d2e8 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d2be:	4619      	mov	r1, r3
 800d2c0:	6878      	ldr	r0, [r7, #4]
 800d2c2:	f000 f9c5 	bl	800d650 <USBD_StdDevReq>
    break;
 800d2c6:	e01a      	b.n	800d2fe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d2ce:	4619      	mov	r1, r3
 800d2d0:	6878      	ldr	r0, [r7, #4]
 800d2d2:	f000 fa27 	bl	800d724 <USBD_StdItfReq>
    break;
 800d2d6:	e012      	b.n	800d2fe <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d2de:	4619      	mov	r1, r3
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f000 fa67 	bl	800d7b4 <USBD_StdEPReq>
    break;
 800d2e6:	e00a      	b.n	800d2fe <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d2ee:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d2f2:	b2db      	uxtb	r3, r3
 800d2f4:	4619      	mov	r1, r3
 800d2f6:	6878      	ldr	r0, [r7, #4]
 800d2f8:	f004 fbb2 	bl	8011a60 <USBD_LL_StallEP>
    break;
 800d2fc:	bf00      	nop
  }

  return USBD_OK;
 800d2fe:	2300      	movs	r3, #0
}
 800d300:	4618      	mov	r0, r3
 800d302:	3708      	adds	r7, #8
 800d304:	46bd      	mov	sp, r7
 800d306:	bd80      	pop	{r7, pc}

0800d308 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d308:	b580      	push	{r7, lr}
 800d30a:	b086      	sub	sp, #24
 800d30c:	af00      	add	r7, sp, #0
 800d30e:	60f8      	str	r0, [r7, #12]
 800d310:	460b      	mov	r3, r1
 800d312:	607a      	str	r2, [r7, #4]
 800d314:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d316:	7afb      	ldrb	r3, [r7, #11]
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d14b      	bne.n	800d3b4 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d322:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d324:	68fb      	ldr	r3, [r7, #12]
 800d326:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d32a:	2b03      	cmp	r3, #3
 800d32c:	d134      	bne.n	800d398 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d32e:	697b      	ldr	r3, [r7, #20]
 800d330:	68da      	ldr	r2, [r3, #12]
 800d332:	697b      	ldr	r3, [r7, #20]
 800d334:	691b      	ldr	r3, [r3, #16]
 800d336:	429a      	cmp	r2, r3
 800d338:	d919      	bls.n	800d36e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d33a:	697b      	ldr	r3, [r7, #20]
 800d33c:	68da      	ldr	r2, [r3, #12]
 800d33e:	697b      	ldr	r3, [r7, #20]
 800d340:	691b      	ldr	r3, [r3, #16]
 800d342:	1ad2      	subs	r2, r2, r3
 800d344:	697b      	ldr	r3, [r7, #20]
 800d346:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d348:	697b      	ldr	r3, [r7, #20]
 800d34a:	68da      	ldr	r2, [r3, #12]
 800d34c:	697b      	ldr	r3, [r7, #20]
 800d34e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d350:	429a      	cmp	r2, r3
 800d352:	d203      	bcs.n	800d35c <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d354:	697b      	ldr	r3, [r7, #20]
 800d356:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d358:	b29b      	uxth	r3, r3
 800d35a:	e002      	b.n	800d362 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d35c:	697b      	ldr	r3, [r7, #20]
 800d35e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d360:	b29b      	uxth	r3, r3
 800d362:	461a      	mov	r2, r3
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	68f8      	ldr	r0, [r7, #12]
 800d368:	f000 fee1 	bl	800e12e <USBD_CtlContinueRx>
 800d36c:	e038      	b.n	800d3e0 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d374:	691b      	ldr	r3, [r3, #16]
 800d376:	2b00      	cmp	r3, #0
 800d378:	d00a      	beq.n	800d390 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d37a:	68fb      	ldr	r3, [r7, #12]
 800d37c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d380:	2b03      	cmp	r3, #3
 800d382:	d105      	bne.n	800d390 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d384:	68fb      	ldr	r3, [r7, #12]
 800d386:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d38a:	691b      	ldr	r3, [r3, #16]
 800d38c:	68f8      	ldr	r0, [r7, #12]
 800d38e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d390:	68f8      	ldr	r0, [r7, #12]
 800d392:	f000 fede 	bl	800e152 <USBD_CtlSendStatus>
 800d396:	e023      	b.n	800d3e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d39e:	2b05      	cmp	r3, #5
 800d3a0:	d11e      	bne.n	800d3e0 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	2200      	movs	r2, #0
 800d3a6:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d3aa:	2100      	movs	r1, #0
 800d3ac:	68f8      	ldr	r0, [r7, #12]
 800d3ae:	f004 fb57 	bl	8011a60 <USBD_LL_StallEP>
 800d3b2:	e015      	b.n	800d3e0 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3ba:	699b      	ldr	r3, [r3, #24]
 800d3bc:	2b00      	cmp	r3, #0
 800d3be:	d00d      	beq.n	800d3dc <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d3c6:	2b03      	cmp	r3, #3
 800d3c8:	d108      	bne.n	800d3dc <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3d0:	699b      	ldr	r3, [r3, #24]
 800d3d2:	7afa      	ldrb	r2, [r7, #11]
 800d3d4:	4611      	mov	r1, r2
 800d3d6:	68f8      	ldr	r0, [r7, #12]
 800d3d8:	4798      	blx	r3
 800d3da:	e001      	b.n	800d3e0 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d3dc:	2302      	movs	r3, #2
 800d3de:	e000      	b.n	800d3e2 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d3e0:	2300      	movs	r3, #0
}
 800d3e2:	4618      	mov	r0, r3
 800d3e4:	3718      	adds	r7, #24
 800d3e6:	46bd      	mov	sp, r7
 800d3e8:	bd80      	pop	{r7, pc}

0800d3ea <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d3ea:	b580      	push	{r7, lr}
 800d3ec:	b086      	sub	sp, #24
 800d3ee:	af00      	add	r7, sp, #0
 800d3f0:	60f8      	str	r0, [r7, #12]
 800d3f2:	460b      	mov	r3, r1
 800d3f4:	607a      	str	r2, [r7, #4]
 800d3f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d3f8:	7afb      	ldrb	r3, [r7, #11]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d17f      	bne.n	800d4fe <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	3314      	adds	r3, #20
 800d402:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d40a:	2b02      	cmp	r3, #2
 800d40c:	d15c      	bne.n	800d4c8 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d40e:	697b      	ldr	r3, [r7, #20]
 800d410:	68da      	ldr	r2, [r3, #12]
 800d412:	697b      	ldr	r3, [r7, #20]
 800d414:	691b      	ldr	r3, [r3, #16]
 800d416:	429a      	cmp	r2, r3
 800d418:	d915      	bls.n	800d446 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d41a:	697b      	ldr	r3, [r7, #20]
 800d41c:	68da      	ldr	r2, [r3, #12]
 800d41e:	697b      	ldr	r3, [r7, #20]
 800d420:	691b      	ldr	r3, [r3, #16]
 800d422:	1ad2      	subs	r2, r2, r3
 800d424:	697b      	ldr	r3, [r7, #20]
 800d426:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d428:	697b      	ldr	r3, [r7, #20]
 800d42a:	68db      	ldr	r3, [r3, #12]
 800d42c:	b29b      	uxth	r3, r3
 800d42e:	461a      	mov	r2, r3
 800d430:	6879      	ldr	r1, [r7, #4]
 800d432:	68f8      	ldr	r0, [r7, #12]
 800d434:	f000 fe4b 	bl	800e0ce <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d438:	2300      	movs	r3, #0
 800d43a:	2200      	movs	r2, #0
 800d43c:	2100      	movs	r1, #0
 800d43e:	68f8      	ldr	r0, [r7, #12]
 800d440:	f004 fbba 	bl	8011bb8 <USBD_LL_PrepareReceive>
 800d444:	e04e      	b.n	800d4e4 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d446:	697b      	ldr	r3, [r7, #20]
 800d448:	689b      	ldr	r3, [r3, #8]
 800d44a:	697a      	ldr	r2, [r7, #20]
 800d44c:	6912      	ldr	r2, [r2, #16]
 800d44e:	fbb3 f1f2 	udiv	r1, r3, r2
 800d452:	fb01 f202 	mul.w	r2, r1, r2
 800d456:	1a9b      	subs	r3, r3, r2
 800d458:	2b00      	cmp	r3, #0
 800d45a:	d11c      	bne.n	800d496 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d45c:	697b      	ldr	r3, [r7, #20]
 800d45e:	689a      	ldr	r2, [r3, #8]
 800d460:	697b      	ldr	r3, [r7, #20]
 800d462:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d464:	429a      	cmp	r2, r3
 800d466:	d316      	bcc.n	800d496 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d468:	697b      	ldr	r3, [r7, #20]
 800d46a:	689a      	ldr	r2, [r3, #8]
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d472:	429a      	cmp	r2, r3
 800d474:	d20f      	bcs.n	800d496 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d476:	2200      	movs	r2, #0
 800d478:	2100      	movs	r1, #0
 800d47a:	68f8      	ldr	r0, [r7, #12]
 800d47c:	f000 fe27 	bl	800e0ce <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	2200      	movs	r2, #0
 800d484:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d488:	2300      	movs	r3, #0
 800d48a:	2200      	movs	r2, #0
 800d48c:	2100      	movs	r1, #0
 800d48e:	68f8      	ldr	r0, [r7, #12]
 800d490:	f004 fb92 	bl	8011bb8 <USBD_LL_PrepareReceive>
 800d494:	e026      	b.n	800d4e4 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d49c:	68db      	ldr	r3, [r3, #12]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d00a      	beq.n	800d4b8 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d4a2:	68fb      	ldr	r3, [r7, #12]
 800d4a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d4a8:	2b03      	cmp	r3, #3
 800d4aa:	d105      	bne.n	800d4b8 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d4ac:	68fb      	ldr	r3, [r7, #12]
 800d4ae:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d4b2:	68db      	ldr	r3, [r3, #12]
 800d4b4:	68f8      	ldr	r0, [r7, #12]
 800d4b6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d4b8:	2180      	movs	r1, #128	; 0x80
 800d4ba:	68f8      	ldr	r0, [r7, #12]
 800d4bc:	f004 fad0 	bl	8011a60 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d4c0:	68f8      	ldr	r0, [r7, #12]
 800d4c2:	f000 fe59 	bl	800e178 <USBD_CtlReceiveStatus>
 800d4c6:	e00d      	b.n	800d4e4 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d4c8:	68fb      	ldr	r3, [r7, #12]
 800d4ca:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d4ce:	2b04      	cmp	r3, #4
 800d4d0:	d004      	beq.n	800d4dc <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d103      	bne.n	800d4e4 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d4dc:	2180      	movs	r1, #128	; 0x80
 800d4de:	68f8      	ldr	r0, [r7, #12]
 800d4e0:	f004 fabe 	bl	8011a60 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800d4ea:	2b01      	cmp	r3, #1
 800d4ec:	d11d      	bne.n	800d52a <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d4ee:	68f8      	ldr	r0, [r7, #12]
 800d4f0:	f7ff fe81 	bl	800d1f6 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d4f4:	68fb      	ldr	r3, [r7, #12]
 800d4f6:	2200      	movs	r2, #0
 800d4f8:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800d4fc:	e015      	b.n	800d52a <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d504:	695b      	ldr	r3, [r3, #20]
 800d506:	2b00      	cmp	r3, #0
 800d508:	d00d      	beq.n	800d526 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d50a:	68fb      	ldr	r3, [r7, #12]
 800d50c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d510:	2b03      	cmp	r3, #3
 800d512:	d108      	bne.n	800d526 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d514:	68fb      	ldr	r3, [r7, #12]
 800d516:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d51a:	695b      	ldr	r3, [r3, #20]
 800d51c:	7afa      	ldrb	r2, [r7, #11]
 800d51e:	4611      	mov	r1, r2
 800d520:	68f8      	ldr	r0, [r7, #12]
 800d522:	4798      	blx	r3
 800d524:	e001      	b.n	800d52a <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d526:	2302      	movs	r3, #2
 800d528:	e000      	b.n	800d52c <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d52a:	2300      	movs	r3, #0
}
 800d52c:	4618      	mov	r0, r3
 800d52e:	3718      	adds	r7, #24
 800d530:	46bd      	mov	sp, r7
 800d532:	bd80      	pop	{r7, pc}

0800d534 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d534:	b580      	push	{r7, lr}
 800d536:	b082      	sub	sp, #8
 800d538:	af00      	add	r7, sp, #0
 800d53a:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d53c:	2340      	movs	r3, #64	; 0x40
 800d53e:	2200      	movs	r2, #0
 800d540:	2100      	movs	r1, #0
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f004 fa47 	bl	80119d6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	2201      	movs	r2, #1
 800d54c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	2240      	movs	r2, #64	; 0x40
 800d554:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d558:	2340      	movs	r3, #64	; 0x40
 800d55a:	2200      	movs	r2, #0
 800d55c:	2180      	movs	r1, #128	; 0x80
 800d55e:	6878      	ldr	r0, [r7, #4]
 800d560:	f004 fa39 	bl	80119d6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	2201      	movs	r2, #1
 800d568:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d56a:	687b      	ldr	r3, [r7, #4]
 800d56c:	2240      	movs	r2, #64	; 0x40
 800d56e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	2201      	movs	r2, #1
 800d574:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d578:	687b      	ldr	r3, [r7, #4]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	2200      	movs	r2, #0
 800d584:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d586:	687b      	ldr	r3, [r7, #4]
 800d588:	2200      	movs	r2, #0
 800d58a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d594:	2b00      	cmp	r3, #0
 800d596:	d009      	beq.n	800d5ac <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d598:	687b      	ldr	r3, [r7, #4]
 800d59a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d59e:	685b      	ldr	r3, [r3, #4]
 800d5a0:	687a      	ldr	r2, [r7, #4]
 800d5a2:	6852      	ldr	r2, [r2, #4]
 800d5a4:	b2d2      	uxtb	r2, r2
 800d5a6:	4611      	mov	r1, r2
 800d5a8:	6878      	ldr	r0, [r7, #4]
 800d5aa:	4798      	blx	r3
  }

  return USBD_OK;
 800d5ac:	2300      	movs	r3, #0
}
 800d5ae:	4618      	mov	r0, r3
 800d5b0:	3708      	adds	r7, #8
 800d5b2:	46bd      	mov	sp, r7
 800d5b4:	bd80      	pop	{r7, pc}

0800d5b6 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d5b6:	b480      	push	{r7}
 800d5b8:	b083      	sub	sp, #12
 800d5ba:	af00      	add	r7, sp, #0
 800d5bc:	6078      	str	r0, [r7, #4]
 800d5be:	460b      	mov	r3, r1
 800d5c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	78fa      	ldrb	r2, [r7, #3]
 800d5c6:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d5c8:	2300      	movs	r3, #0
}
 800d5ca:	4618      	mov	r0, r3
 800d5cc:	370c      	adds	r7, #12
 800d5ce:	46bd      	mov	sp, r7
 800d5d0:	bc80      	pop	{r7}
 800d5d2:	4770      	bx	lr

0800d5d4 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d5d4:	b480      	push	{r7}
 800d5d6:	b083      	sub	sp, #12
 800d5d8:	af00      	add	r7, sp, #0
 800d5da:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d5dc:	687b      	ldr	r3, [r7, #4]
 800d5de:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d5e2:	687b      	ldr	r3, [r7, #4]
 800d5e4:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2204      	movs	r2, #4
 800d5ec:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d5f0:	2300      	movs	r3, #0
}
 800d5f2:	4618      	mov	r0, r3
 800d5f4:	370c      	adds	r7, #12
 800d5f6:	46bd      	mov	sp, r7
 800d5f8:	bc80      	pop	{r7}
 800d5fa:	4770      	bx	lr

0800d5fc <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d5fc:	b480      	push	{r7}
 800d5fe:	b083      	sub	sp, #12
 800d600:	af00      	add	r7, sp, #0
 800d602:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d60a:	687b      	ldr	r3, [r7, #4]
 800d60c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d610:	2300      	movs	r3, #0
}
 800d612:	4618      	mov	r0, r3
 800d614:	370c      	adds	r7, #12
 800d616:	46bd      	mov	sp, r7
 800d618:	bc80      	pop	{r7}
 800d61a:	4770      	bx	lr

0800d61c <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b082      	sub	sp, #8
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d624:	687b      	ldr	r3, [r7, #4]
 800d626:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d62a:	2b03      	cmp	r3, #3
 800d62c:	d10b      	bne.n	800d646 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d62e:	687b      	ldr	r3, [r7, #4]
 800d630:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d634:	69db      	ldr	r3, [r3, #28]
 800d636:	2b00      	cmp	r3, #0
 800d638:	d005      	beq.n	800d646 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d640:	69db      	ldr	r3, [r3, #28]
 800d642:	6878      	ldr	r0, [r7, #4]
 800d644:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d646:	2300      	movs	r3, #0
}
 800d648:	4618      	mov	r0, r3
 800d64a:	3708      	adds	r7, #8
 800d64c:	46bd      	mov	sp, r7
 800d64e:	bd80      	pop	{r7, pc}

0800d650 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d650:	b580      	push	{r7, lr}
 800d652:	b084      	sub	sp, #16
 800d654:	af00      	add	r7, sp, #0
 800d656:	6078      	str	r0, [r7, #4]
 800d658:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d65a:	2300      	movs	r3, #0
 800d65c:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d65e:	683b      	ldr	r3, [r7, #0]
 800d660:	781b      	ldrb	r3, [r3, #0]
 800d662:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d666:	2b40      	cmp	r3, #64	; 0x40
 800d668:	d005      	beq.n	800d676 <USBD_StdDevReq+0x26>
 800d66a:	2b40      	cmp	r3, #64	; 0x40
 800d66c:	d84f      	bhi.n	800d70e <USBD_StdDevReq+0xbe>
 800d66e:	2b00      	cmp	r3, #0
 800d670:	d009      	beq.n	800d686 <USBD_StdDevReq+0x36>
 800d672:	2b20      	cmp	r3, #32
 800d674:	d14b      	bne.n	800d70e <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d67c:	689b      	ldr	r3, [r3, #8]
 800d67e:	6839      	ldr	r1, [r7, #0]
 800d680:	6878      	ldr	r0, [r7, #4]
 800d682:	4798      	blx	r3
    break;
 800d684:	e048      	b.n	800d718 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d686:	683b      	ldr	r3, [r7, #0]
 800d688:	785b      	ldrb	r3, [r3, #1]
 800d68a:	2b09      	cmp	r3, #9
 800d68c:	d839      	bhi.n	800d702 <USBD_StdDevReq+0xb2>
 800d68e:	a201      	add	r2, pc, #4	; (adr r2, 800d694 <USBD_StdDevReq+0x44>)
 800d690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d694:	0800d6e5 	.word	0x0800d6e5
 800d698:	0800d6f9 	.word	0x0800d6f9
 800d69c:	0800d703 	.word	0x0800d703
 800d6a0:	0800d6ef 	.word	0x0800d6ef
 800d6a4:	0800d703 	.word	0x0800d703
 800d6a8:	0800d6c7 	.word	0x0800d6c7
 800d6ac:	0800d6bd 	.word	0x0800d6bd
 800d6b0:	0800d703 	.word	0x0800d703
 800d6b4:	0800d6db 	.word	0x0800d6db
 800d6b8:	0800d6d1 	.word	0x0800d6d1
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d6bc:	6839      	ldr	r1, [r7, #0]
 800d6be:	6878      	ldr	r0, [r7, #4]
 800d6c0:	f000 f9da 	bl	800da78 <USBD_GetDescriptor>
      break;
 800d6c4:	e022      	b.n	800d70c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d6c6:	6839      	ldr	r1, [r7, #0]
 800d6c8:	6878      	ldr	r0, [r7, #4]
 800d6ca:	f000 facf 	bl	800dc6c <USBD_SetAddress>
      break;
 800d6ce:	e01d      	b.n	800d70c <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d6d0:	6839      	ldr	r1, [r7, #0]
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f000 fb0e 	bl	800dcf4 <USBD_SetConfig>
      break;
 800d6d8:	e018      	b.n	800d70c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d6da:	6839      	ldr	r1, [r7, #0]
 800d6dc:	6878      	ldr	r0, [r7, #4]
 800d6de:	f000 fb97 	bl	800de10 <USBD_GetConfig>
      break;
 800d6e2:	e013      	b.n	800d70c <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d6e4:	6839      	ldr	r1, [r7, #0]
 800d6e6:	6878      	ldr	r0, [r7, #4]
 800d6e8:	f000 fbc7 	bl	800de7a <USBD_GetStatus>
      break;
 800d6ec:	e00e      	b.n	800d70c <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d6ee:	6839      	ldr	r1, [r7, #0]
 800d6f0:	6878      	ldr	r0, [r7, #4]
 800d6f2:	f000 fbf5 	bl	800dee0 <USBD_SetFeature>
      break;
 800d6f6:	e009      	b.n	800d70c <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d6f8:	6839      	ldr	r1, [r7, #0]
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f000 fc04 	bl	800df08 <USBD_ClrFeature>
      break;
 800d700:	e004      	b.n	800d70c <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d702:	6839      	ldr	r1, [r7, #0]
 800d704:	6878      	ldr	r0, [r7, #4]
 800d706:	f000 fc5c 	bl	800dfc2 <USBD_CtlError>
      break;
 800d70a:	bf00      	nop
    }
    break;
 800d70c:	e004      	b.n	800d718 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d70e:	6839      	ldr	r1, [r7, #0]
 800d710:	6878      	ldr	r0, [r7, #4]
 800d712:	f000 fc56 	bl	800dfc2 <USBD_CtlError>
    break;
 800d716:	bf00      	nop
  }

  return ret;
 800d718:	7bfb      	ldrb	r3, [r7, #15]
}
 800d71a:	4618      	mov	r0, r3
 800d71c:	3710      	adds	r7, #16
 800d71e:	46bd      	mov	sp, r7
 800d720:	bd80      	pop	{r7, pc}
 800d722:	bf00      	nop

0800d724 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b084      	sub	sp, #16
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d72e:	2300      	movs	r3, #0
 800d730:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d732:	683b      	ldr	r3, [r7, #0]
 800d734:	781b      	ldrb	r3, [r3, #0]
 800d736:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d73a:	2b40      	cmp	r3, #64	; 0x40
 800d73c:	d005      	beq.n	800d74a <USBD_StdItfReq+0x26>
 800d73e:	2b40      	cmp	r3, #64	; 0x40
 800d740:	d82e      	bhi.n	800d7a0 <USBD_StdItfReq+0x7c>
 800d742:	2b00      	cmp	r3, #0
 800d744:	d001      	beq.n	800d74a <USBD_StdItfReq+0x26>
 800d746:	2b20      	cmp	r3, #32
 800d748:	d12a      	bne.n	800d7a0 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d74a:	687b      	ldr	r3, [r7, #4]
 800d74c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d750:	3b01      	subs	r3, #1
 800d752:	2b02      	cmp	r3, #2
 800d754:	d81d      	bhi.n	800d792 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d756:	683b      	ldr	r3, [r7, #0]
 800d758:	889b      	ldrh	r3, [r3, #4]
 800d75a:	b2db      	uxtb	r3, r3
 800d75c:	2b01      	cmp	r3, #1
 800d75e:	d813      	bhi.n	800d788 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d766:	689b      	ldr	r3, [r3, #8]
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	4798      	blx	r3
 800d76e:	4603      	mov	r3, r0
 800d770:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d772:	683b      	ldr	r3, [r7, #0]
 800d774:	88db      	ldrh	r3, [r3, #6]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d110      	bne.n	800d79c <USBD_StdItfReq+0x78>
 800d77a:	7bfb      	ldrb	r3, [r7, #15]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	d10d      	bne.n	800d79c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800d780:	6878      	ldr	r0, [r7, #4]
 800d782:	f000 fce6 	bl	800e152 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d786:	e009      	b.n	800d79c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d788:	6839      	ldr	r1, [r7, #0]
 800d78a:	6878      	ldr	r0, [r7, #4]
 800d78c:	f000 fc19 	bl	800dfc2 <USBD_CtlError>
      break;
 800d790:	e004      	b.n	800d79c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d792:	6839      	ldr	r1, [r7, #0]
 800d794:	6878      	ldr	r0, [r7, #4]
 800d796:	f000 fc14 	bl	800dfc2 <USBD_CtlError>
      break;
 800d79a:	e000      	b.n	800d79e <USBD_StdItfReq+0x7a>
      break;
 800d79c:	bf00      	nop
    }
    break;
 800d79e:	e004      	b.n	800d7aa <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d7a0:	6839      	ldr	r1, [r7, #0]
 800d7a2:	6878      	ldr	r0, [r7, #4]
 800d7a4:	f000 fc0d 	bl	800dfc2 <USBD_CtlError>
    break;
 800d7a8:	bf00      	nop
  }

  return USBD_OK;
 800d7aa:	2300      	movs	r3, #0
}
 800d7ac:	4618      	mov	r0, r3
 800d7ae:	3710      	adds	r7, #16
 800d7b0:	46bd      	mov	sp, r7
 800d7b2:	bd80      	pop	{r7, pc}

0800d7b4 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d7b4:	b580      	push	{r7, lr}
 800d7b6:	b084      	sub	sp, #16
 800d7b8:	af00      	add	r7, sp, #0
 800d7ba:	6078      	str	r0, [r7, #4]
 800d7bc:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d7be:	2300      	movs	r3, #0
 800d7c0:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d7c2:	683b      	ldr	r3, [r7, #0]
 800d7c4:	889b      	ldrh	r3, [r3, #4]
 800d7c6:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d7c8:	683b      	ldr	r3, [r7, #0]
 800d7ca:	781b      	ldrb	r3, [r3, #0]
 800d7cc:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7d0:	2b40      	cmp	r3, #64	; 0x40
 800d7d2:	d007      	beq.n	800d7e4 <USBD_StdEPReq+0x30>
 800d7d4:	2b40      	cmp	r3, #64	; 0x40
 800d7d6:	f200 8144 	bhi.w	800da62 <USBD_StdEPReq+0x2ae>
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d00a      	beq.n	800d7f4 <USBD_StdEPReq+0x40>
 800d7de:	2b20      	cmp	r3, #32
 800d7e0:	f040 813f 	bne.w	800da62 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d7ea:	689b      	ldr	r3, [r3, #8]
 800d7ec:	6839      	ldr	r1, [r7, #0]
 800d7ee:	6878      	ldr	r0, [r7, #4]
 800d7f0:	4798      	blx	r3
    break;
 800d7f2:	e13b      	b.n	800da6c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d7f4:	683b      	ldr	r3, [r7, #0]
 800d7f6:	781b      	ldrb	r3, [r3, #0]
 800d7f8:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d7fc:	2b20      	cmp	r3, #32
 800d7fe:	d10a      	bne.n	800d816 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d800:	687b      	ldr	r3, [r7, #4]
 800d802:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d806:	689b      	ldr	r3, [r3, #8]
 800d808:	6839      	ldr	r1, [r7, #0]
 800d80a:	6878      	ldr	r0, [r7, #4]
 800d80c:	4798      	blx	r3
 800d80e:	4603      	mov	r3, r0
 800d810:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d812:	7bfb      	ldrb	r3, [r7, #15]
 800d814:	e12b      	b.n	800da6e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	785b      	ldrb	r3, [r3, #1]
 800d81a:	2b03      	cmp	r3, #3
 800d81c:	d007      	beq.n	800d82e <USBD_StdEPReq+0x7a>
 800d81e:	2b03      	cmp	r3, #3
 800d820:	f300 8119 	bgt.w	800da56 <USBD_StdEPReq+0x2a2>
 800d824:	2b00      	cmp	r3, #0
 800d826:	d072      	beq.n	800d90e <USBD_StdEPReq+0x15a>
 800d828:	2b01      	cmp	r3, #1
 800d82a:	d03a      	beq.n	800d8a2 <USBD_StdEPReq+0xee>
 800d82c:	e113      	b.n	800da56 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d834:	2b02      	cmp	r3, #2
 800d836:	d002      	beq.n	800d83e <USBD_StdEPReq+0x8a>
 800d838:	2b03      	cmp	r3, #3
 800d83a:	d015      	beq.n	800d868 <USBD_StdEPReq+0xb4>
 800d83c:	e02b      	b.n	800d896 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d83e:	7bbb      	ldrb	r3, [r7, #14]
 800d840:	2b00      	cmp	r3, #0
 800d842:	d00c      	beq.n	800d85e <USBD_StdEPReq+0xaa>
 800d844:	7bbb      	ldrb	r3, [r7, #14]
 800d846:	2b80      	cmp	r3, #128	; 0x80
 800d848:	d009      	beq.n	800d85e <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d84a:	7bbb      	ldrb	r3, [r7, #14]
 800d84c:	4619      	mov	r1, r3
 800d84e:	6878      	ldr	r0, [r7, #4]
 800d850:	f004 f906 	bl	8011a60 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d854:	2180      	movs	r1, #128	; 0x80
 800d856:	6878      	ldr	r0, [r7, #4]
 800d858:	f004 f902 	bl	8011a60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d85c:	e020      	b.n	800d8a0 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800d85e:	6839      	ldr	r1, [r7, #0]
 800d860:	6878      	ldr	r0, [r7, #4]
 800d862:	f000 fbae 	bl	800dfc2 <USBD_CtlError>
        break;
 800d866:	e01b      	b.n	800d8a0 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	885b      	ldrh	r3, [r3, #2]
 800d86c:	2b00      	cmp	r3, #0
 800d86e:	d10e      	bne.n	800d88e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d870:	7bbb      	ldrb	r3, [r7, #14]
 800d872:	2b00      	cmp	r3, #0
 800d874:	d00b      	beq.n	800d88e <USBD_StdEPReq+0xda>
 800d876:	7bbb      	ldrb	r3, [r7, #14]
 800d878:	2b80      	cmp	r3, #128	; 0x80
 800d87a:	d008      	beq.n	800d88e <USBD_StdEPReq+0xda>
 800d87c:	683b      	ldr	r3, [r7, #0]
 800d87e:	88db      	ldrh	r3, [r3, #6]
 800d880:	2b00      	cmp	r3, #0
 800d882:	d104      	bne.n	800d88e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d884:	7bbb      	ldrb	r3, [r7, #14]
 800d886:	4619      	mov	r1, r3
 800d888:	6878      	ldr	r0, [r7, #4]
 800d88a:	f004 f8e9 	bl	8011a60 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d88e:	6878      	ldr	r0, [r7, #4]
 800d890:	f000 fc5f 	bl	800e152 <USBD_CtlSendStatus>

        break;
 800d894:	e004      	b.n	800d8a0 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800d896:	6839      	ldr	r1, [r7, #0]
 800d898:	6878      	ldr	r0, [r7, #4]
 800d89a:	f000 fb92 	bl	800dfc2 <USBD_CtlError>
        break;
 800d89e:	bf00      	nop
      }
      break;
 800d8a0:	e0de      	b.n	800da60 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d8a2:	687b      	ldr	r3, [r7, #4]
 800d8a4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d8a8:	2b02      	cmp	r3, #2
 800d8aa:	d002      	beq.n	800d8b2 <USBD_StdEPReq+0xfe>
 800d8ac:	2b03      	cmp	r3, #3
 800d8ae:	d015      	beq.n	800d8dc <USBD_StdEPReq+0x128>
 800d8b0:	e026      	b.n	800d900 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d8b2:	7bbb      	ldrb	r3, [r7, #14]
 800d8b4:	2b00      	cmp	r3, #0
 800d8b6:	d00c      	beq.n	800d8d2 <USBD_StdEPReq+0x11e>
 800d8b8:	7bbb      	ldrb	r3, [r7, #14]
 800d8ba:	2b80      	cmp	r3, #128	; 0x80
 800d8bc:	d009      	beq.n	800d8d2 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d8be:	7bbb      	ldrb	r3, [r7, #14]
 800d8c0:	4619      	mov	r1, r3
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f004 f8cc 	bl	8011a60 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d8c8:	2180      	movs	r1, #128	; 0x80
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f004 f8c8 	bl	8011a60 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d8d0:	e01c      	b.n	800d90c <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800d8d2:	6839      	ldr	r1, [r7, #0]
 800d8d4:	6878      	ldr	r0, [r7, #4]
 800d8d6:	f000 fb74 	bl	800dfc2 <USBD_CtlError>
        break;
 800d8da:	e017      	b.n	800d90c <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	885b      	ldrh	r3, [r3, #2]
 800d8e0:	2b00      	cmp	r3, #0
 800d8e2:	d112      	bne.n	800d90a <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d8e4:	7bbb      	ldrb	r3, [r7, #14]
 800d8e6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d8ea:	2b00      	cmp	r3, #0
 800d8ec:	d004      	beq.n	800d8f8 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d8ee:	7bbb      	ldrb	r3, [r7, #14]
 800d8f0:	4619      	mov	r1, r3
 800d8f2:	6878      	ldr	r0, [r7, #4]
 800d8f4:	f004 f8d3 	bl	8011a9e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d8f8:	6878      	ldr	r0, [r7, #4]
 800d8fa:	f000 fc2a 	bl	800e152 <USBD_CtlSendStatus>
        }
        break;
 800d8fe:	e004      	b.n	800d90a <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800d900:	6839      	ldr	r1, [r7, #0]
 800d902:	6878      	ldr	r0, [r7, #4]
 800d904:	f000 fb5d 	bl	800dfc2 <USBD_CtlError>
        break;
 800d908:	e000      	b.n	800d90c <USBD_StdEPReq+0x158>
        break;
 800d90a:	bf00      	nop
      }
      break;
 800d90c:	e0a8      	b.n	800da60 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d90e:	687b      	ldr	r3, [r7, #4]
 800d910:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d914:	2b02      	cmp	r3, #2
 800d916:	d002      	beq.n	800d91e <USBD_StdEPReq+0x16a>
 800d918:	2b03      	cmp	r3, #3
 800d91a:	d031      	beq.n	800d980 <USBD_StdEPReq+0x1cc>
 800d91c:	e095      	b.n	800da4a <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d91e:	7bbb      	ldrb	r3, [r7, #14]
 800d920:	2b00      	cmp	r3, #0
 800d922:	d007      	beq.n	800d934 <USBD_StdEPReq+0x180>
 800d924:	7bbb      	ldrb	r3, [r7, #14]
 800d926:	2b80      	cmp	r3, #128	; 0x80
 800d928:	d004      	beq.n	800d934 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800d92a:	6839      	ldr	r1, [r7, #0]
 800d92c:	6878      	ldr	r0, [r7, #4]
 800d92e:	f000 fb48 	bl	800dfc2 <USBD_CtlError>
          break;
 800d932:	e08f      	b.n	800da54 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d934:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d938:	2b00      	cmp	r3, #0
 800d93a:	da0b      	bge.n	800d954 <USBD_StdEPReq+0x1a0>
 800d93c:	7bbb      	ldrb	r3, [r7, #14]
 800d93e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d942:	4613      	mov	r3, r2
 800d944:	009b      	lsls	r3, r3, #2
 800d946:	4413      	add	r3, r2
 800d948:	009b      	lsls	r3, r3, #2
 800d94a:	3310      	adds	r3, #16
 800d94c:	687a      	ldr	r2, [r7, #4]
 800d94e:	4413      	add	r3, r2
 800d950:	3304      	adds	r3, #4
 800d952:	e00a      	b.n	800d96a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d954:	7bbb      	ldrb	r3, [r7, #14]
 800d956:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d95a:	4613      	mov	r3, r2
 800d95c:	009b      	lsls	r3, r3, #2
 800d95e:	4413      	add	r3, r2
 800d960:	009b      	lsls	r3, r3, #2
 800d962:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d966:	687a      	ldr	r2, [r7, #4]
 800d968:	4413      	add	r3, r2
 800d96a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d96c:	68bb      	ldr	r3, [r7, #8]
 800d96e:	2200      	movs	r2, #0
 800d970:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d972:	68bb      	ldr	r3, [r7, #8]
 800d974:	2202      	movs	r2, #2
 800d976:	4619      	mov	r1, r3
 800d978:	6878      	ldr	r0, [r7, #4]
 800d97a:	f000 fb8c 	bl	800e096 <USBD_CtlSendData>
          break;
 800d97e:	e069      	b.n	800da54 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d980:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d984:	2b00      	cmp	r3, #0
 800d986:	da11      	bge.n	800d9ac <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d988:	7bbb      	ldrb	r3, [r7, #14]
 800d98a:	f003 020f 	and.w	r2, r3, #15
 800d98e:	6879      	ldr	r1, [r7, #4]
 800d990:	4613      	mov	r3, r2
 800d992:	009b      	lsls	r3, r3, #2
 800d994:	4413      	add	r3, r2
 800d996:	009b      	lsls	r3, r3, #2
 800d998:	440b      	add	r3, r1
 800d99a:	3318      	adds	r3, #24
 800d99c:	681b      	ldr	r3, [r3, #0]
 800d99e:	2b00      	cmp	r3, #0
 800d9a0:	d117      	bne.n	800d9d2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d9a2:	6839      	ldr	r1, [r7, #0]
 800d9a4:	6878      	ldr	r0, [r7, #4]
 800d9a6:	f000 fb0c 	bl	800dfc2 <USBD_CtlError>
            break;
 800d9aa:	e053      	b.n	800da54 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d9ac:	7bbb      	ldrb	r3, [r7, #14]
 800d9ae:	f003 020f 	and.w	r2, r3, #15
 800d9b2:	6879      	ldr	r1, [r7, #4]
 800d9b4:	4613      	mov	r3, r2
 800d9b6:	009b      	lsls	r3, r3, #2
 800d9b8:	4413      	add	r3, r2
 800d9ba:	009b      	lsls	r3, r3, #2
 800d9bc:	440b      	add	r3, r1
 800d9be:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d9c2:	681b      	ldr	r3, [r3, #0]
 800d9c4:	2b00      	cmp	r3, #0
 800d9c6:	d104      	bne.n	800d9d2 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d9c8:	6839      	ldr	r1, [r7, #0]
 800d9ca:	6878      	ldr	r0, [r7, #4]
 800d9cc:	f000 faf9 	bl	800dfc2 <USBD_CtlError>
            break;
 800d9d0:	e040      	b.n	800da54 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d9d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d9d6:	2b00      	cmp	r3, #0
 800d9d8:	da0b      	bge.n	800d9f2 <USBD_StdEPReq+0x23e>
 800d9da:	7bbb      	ldrb	r3, [r7, #14]
 800d9dc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d9e0:	4613      	mov	r3, r2
 800d9e2:	009b      	lsls	r3, r3, #2
 800d9e4:	4413      	add	r3, r2
 800d9e6:	009b      	lsls	r3, r3, #2
 800d9e8:	3310      	adds	r3, #16
 800d9ea:	687a      	ldr	r2, [r7, #4]
 800d9ec:	4413      	add	r3, r2
 800d9ee:	3304      	adds	r3, #4
 800d9f0:	e00a      	b.n	800da08 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d9f2:	7bbb      	ldrb	r3, [r7, #14]
 800d9f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d9f8:	4613      	mov	r3, r2
 800d9fa:	009b      	lsls	r3, r3, #2
 800d9fc:	4413      	add	r3, r2
 800d9fe:	009b      	lsls	r3, r3, #2
 800da00:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800da04:	687a      	ldr	r2, [r7, #4]
 800da06:	4413      	add	r3, r2
 800da08:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800da0a:	7bbb      	ldrb	r3, [r7, #14]
 800da0c:	2b00      	cmp	r3, #0
 800da0e:	d002      	beq.n	800da16 <USBD_StdEPReq+0x262>
 800da10:	7bbb      	ldrb	r3, [r7, #14]
 800da12:	2b80      	cmp	r3, #128	; 0x80
 800da14:	d103      	bne.n	800da1e <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800da16:	68bb      	ldr	r3, [r7, #8]
 800da18:	2200      	movs	r2, #0
 800da1a:	601a      	str	r2, [r3, #0]
 800da1c:	e00e      	b.n	800da3c <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800da1e:	7bbb      	ldrb	r3, [r7, #14]
 800da20:	4619      	mov	r1, r3
 800da22:	6878      	ldr	r0, [r7, #4]
 800da24:	f004 f85a 	bl	8011adc <USBD_LL_IsStallEP>
 800da28:	4603      	mov	r3, r0
 800da2a:	2b00      	cmp	r3, #0
 800da2c:	d003      	beq.n	800da36 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800da2e:	68bb      	ldr	r3, [r7, #8]
 800da30:	2201      	movs	r2, #1
 800da32:	601a      	str	r2, [r3, #0]
 800da34:	e002      	b.n	800da3c <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800da36:	68bb      	ldr	r3, [r7, #8]
 800da38:	2200      	movs	r2, #0
 800da3a:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800da3c:	68bb      	ldr	r3, [r7, #8]
 800da3e:	2202      	movs	r2, #2
 800da40:	4619      	mov	r1, r3
 800da42:	6878      	ldr	r0, [r7, #4]
 800da44:	f000 fb27 	bl	800e096 <USBD_CtlSendData>
          break;
 800da48:	e004      	b.n	800da54 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800da4a:	6839      	ldr	r1, [r7, #0]
 800da4c:	6878      	ldr	r0, [r7, #4]
 800da4e:	f000 fab8 	bl	800dfc2 <USBD_CtlError>
        break;
 800da52:	bf00      	nop
      }
      break;
 800da54:	e004      	b.n	800da60 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800da56:	6839      	ldr	r1, [r7, #0]
 800da58:	6878      	ldr	r0, [r7, #4]
 800da5a:	f000 fab2 	bl	800dfc2 <USBD_CtlError>
      break;
 800da5e:	bf00      	nop
    }
    break;
 800da60:	e004      	b.n	800da6c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800da62:	6839      	ldr	r1, [r7, #0]
 800da64:	6878      	ldr	r0, [r7, #4]
 800da66:	f000 faac 	bl	800dfc2 <USBD_CtlError>
    break;
 800da6a:	bf00      	nop
  }

  return ret;
 800da6c:	7bfb      	ldrb	r3, [r7, #15]
}
 800da6e:	4618      	mov	r0, r3
 800da70:	3710      	adds	r7, #16
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
	...

0800da78 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800da78:	b580      	push	{r7, lr}
 800da7a:	b084      	sub	sp, #16
 800da7c:	af00      	add	r7, sp, #0
 800da7e:	6078      	str	r0, [r7, #4]
 800da80:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800da82:	683b      	ldr	r3, [r7, #0]
 800da84:	885b      	ldrh	r3, [r3, #2]
 800da86:	0a1b      	lsrs	r3, r3, #8
 800da88:	b29b      	uxth	r3, r3
 800da8a:	3b01      	subs	r3, #1
 800da8c:	2b06      	cmp	r3, #6
 800da8e:	f200 80c9 	bhi.w	800dc24 <USBD_GetDescriptor+0x1ac>
 800da92:	a201      	add	r2, pc, #4	; (adr r2, 800da98 <USBD_GetDescriptor+0x20>)
 800da94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800da98:	0800dab5 	.word	0x0800dab5
 800da9c:	0800dacd 	.word	0x0800dacd
 800daa0:	0800db0d 	.word	0x0800db0d
 800daa4:	0800dc25 	.word	0x0800dc25
 800daa8:	0800dc25 	.word	0x0800dc25
 800daac:	0800dbd1 	.word	0x0800dbd1
 800dab0:	0800dbf7 	.word	0x0800dbf7
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800daba:	681b      	ldr	r3, [r3, #0]
 800dabc:	687a      	ldr	r2, [r7, #4]
 800dabe:	7c12      	ldrb	r2, [r2, #16]
 800dac0:	f107 010a 	add.w	r1, r7, #10
 800dac4:	4610      	mov	r0, r2
 800dac6:	4798      	blx	r3
 800dac8:	60f8      	str	r0, [r7, #12]
    break;
 800daca:	e0b0      	b.n	800dc2e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	7c1b      	ldrb	r3, [r3, #16]
 800dad0:	2b00      	cmp	r3, #0
 800dad2:	d10d      	bne.n	800daf0 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800dad4:	687b      	ldr	r3, [r7, #4]
 800dad6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dada:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dadc:	f107 020a 	add.w	r2, r7, #10
 800dae0:	4610      	mov	r0, r2
 800dae2:	4798      	blx	r3
 800dae4:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	3301      	adds	r3, #1
 800daea:	2202      	movs	r2, #2
 800daec:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800daee:	e09e      	b.n	800dc2e <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800daf0:	687b      	ldr	r3, [r7, #4]
 800daf2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800daf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800daf8:	f107 020a 	add.w	r2, r7, #10
 800dafc:	4610      	mov	r0, r2
 800dafe:	4798      	blx	r3
 800db00:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	3301      	adds	r3, #1
 800db06:	2202      	movs	r2, #2
 800db08:	701a      	strb	r2, [r3, #0]
    break;
 800db0a:	e090      	b.n	800dc2e <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800db0c:	683b      	ldr	r3, [r7, #0]
 800db0e:	885b      	ldrh	r3, [r3, #2]
 800db10:	b2db      	uxtb	r3, r3
 800db12:	2b05      	cmp	r3, #5
 800db14:	d856      	bhi.n	800dbc4 <USBD_GetDescriptor+0x14c>
 800db16:	a201      	add	r2, pc, #4	; (adr r2, 800db1c <USBD_GetDescriptor+0xa4>)
 800db18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800db1c:	0800db35 	.word	0x0800db35
 800db20:	0800db4d 	.word	0x0800db4d
 800db24:	0800db65 	.word	0x0800db65
 800db28:	0800db7d 	.word	0x0800db7d
 800db2c:	0800db95 	.word	0x0800db95
 800db30:	0800dbad 	.word	0x0800dbad
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800db3a:	685b      	ldr	r3, [r3, #4]
 800db3c:	687a      	ldr	r2, [r7, #4]
 800db3e:	7c12      	ldrb	r2, [r2, #16]
 800db40:	f107 010a 	add.w	r1, r7, #10
 800db44:	4610      	mov	r0, r2
 800db46:	4798      	blx	r3
 800db48:	60f8      	str	r0, [r7, #12]
      break;
 800db4a:	e040      	b.n	800dbce <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800db52:	689b      	ldr	r3, [r3, #8]
 800db54:	687a      	ldr	r2, [r7, #4]
 800db56:	7c12      	ldrb	r2, [r2, #16]
 800db58:	f107 010a 	add.w	r1, r7, #10
 800db5c:	4610      	mov	r0, r2
 800db5e:	4798      	blx	r3
 800db60:	60f8      	str	r0, [r7, #12]
      break;
 800db62:	e034      	b.n	800dbce <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800db64:	687b      	ldr	r3, [r7, #4]
 800db66:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800db6a:	68db      	ldr	r3, [r3, #12]
 800db6c:	687a      	ldr	r2, [r7, #4]
 800db6e:	7c12      	ldrb	r2, [r2, #16]
 800db70:	f107 010a 	add.w	r1, r7, #10
 800db74:	4610      	mov	r0, r2
 800db76:	4798      	blx	r3
 800db78:	60f8      	str	r0, [r7, #12]
      break;
 800db7a:	e028      	b.n	800dbce <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800db82:	691b      	ldr	r3, [r3, #16]
 800db84:	687a      	ldr	r2, [r7, #4]
 800db86:	7c12      	ldrb	r2, [r2, #16]
 800db88:	f107 010a 	add.w	r1, r7, #10
 800db8c:	4610      	mov	r0, r2
 800db8e:	4798      	blx	r3
 800db90:	60f8      	str	r0, [r7, #12]
      break;
 800db92:	e01c      	b.n	800dbce <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800db94:	687b      	ldr	r3, [r7, #4]
 800db96:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800db9a:	695b      	ldr	r3, [r3, #20]
 800db9c:	687a      	ldr	r2, [r7, #4]
 800db9e:	7c12      	ldrb	r2, [r2, #16]
 800dba0:	f107 010a 	add.w	r1, r7, #10
 800dba4:	4610      	mov	r0, r2
 800dba6:	4798      	blx	r3
 800dba8:	60f8      	str	r0, [r7, #12]
      break;
 800dbaa:	e010      	b.n	800dbce <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800dbac:	687b      	ldr	r3, [r7, #4]
 800dbae:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800dbb2:	699b      	ldr	r3, [r3, #24]
 800dbb4:	687a      	ldr	r2, [r7, #4]
 800dbb6:	7c12      	ldrb	r2, [r2, #16]
 800dbb8:	f107 010a 	add.w	r1, r7, #10
 800dbbc:	4610      	mov	r0, r2
 800dbbe:	4798      	blx	r3
 800dbc0:	60f8      	str	r0, [r7, #12]
      break;
 800dbc2:	e004      	b.n	800dbce <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800dbc4:	6839      	ldr	r1, [r7, #0]
 800dbc6:	6878      	ldr	r0, [r7, #4]
 800dbc8:	f000 f9fb 	bl	800dfc2 <USBD_CtlError>
      return;
 800dbcc:	e04b      	b.n	800dc66 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800dbce:	e02e      	b.n	800dc2e <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800dbd0:	687b      	ldr	r3, [r7, #4]
 800dbd2:	7c1b      	ldrb	r3, [r3, #16]
 800dbd4:	2b00      	cmp	r3, #0
 800dbd6:	d109      	bne.n	800dbec <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800dbd8:	687b      	ldr	r3, [r7, #4]
 800dbda:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dbde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800dbe0:	f107 020a 	add.w	r2, r7, #10
 800dbe4:	4610      	mov	r0, r2
 800dbe6:	4798      	blx	r3
 800dbe8:	60f8      	str	r0, [r7, #12]
      break;
 800dbea:	e020      	b.n	800dc2e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dbec:	6839      	ldr	r1, [r7, #0]
 800dbee:	6878      	ldr	r0, [r7, #4]
 800dbf0:	f000 f9e7 	bl	800dfc2 <USBD_CtlError>
      return;
 800dbf4:	e037      	b.n	800dc66 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800dbf6:	687b      	ldr	r3, [r7, #4]
 800dbf8:	7c1b      	ldrb	r3, [r3, #16]
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d10d      	bne.n	800dc1a <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800dbfe:	687b      	ldr	r3, [r7, #4]
 800dc00:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800dc04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800dc06:	f107 020a 	add.w	r2, r7, #10
 800dc0a:	4610      	mov	r0, r2
 800dc0c:	4798      	blx	r3
 800dc0e:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	3301      	adds	r3, #1
 800dc14:	2207      	movs	r2, #7
 800dc16:	701a      	strb	r2, [r3, #0]
      break;
 800dc18:	e009      	b.n	800dc2e <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800dc1a:	6839      	ldr	r1, [r7, #0]
 800dc1c:	6878      	ldr	r0, [r7, #4]
 800dc1e:	f000 f9d0 	bl	800dfc2 <USBD_CtlError>
      return;
 800dc22:	e020      	b.n	800dc66 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800dc24:	6839      	ldr	r1, [r7, #0]
 800dc26:	6878      	ldr	r0, [r7, #4]
 800dc28:	f000 f9cb 	bl	800dfc2 <USBD_CtlError>
    return;
 800dc2c:	e01b      	b.n	800dc66 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800dc2e:	897b      	ldrh	r3, [r7, #10]
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d011      	beq.n	800dc58 <USBD_GetDescriptor+0x1e0>
 800dc34:	683b      	ldr	r3, [r7, #0]
 800dc36:	88db      	ldrh	r3, [r3, #6]
 800dc38:	2b00      	cmp	r3, #0
 800dc3a:	d00d      	beq.n	800dc58 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800dc3c:	683b      	ldr	r3, [r7, #0]
 800dc3e:	88da      	ldrh	r2, [r3, #6]
 800dc40:	897b      	ldrh	r3, [r7, #10]
 800dc42:	4293      	cmp	r3, r2
 800dc44:	bf28      	it	cs
 800dc46:	4613      	movcs	r3, r2
 800dc48:	b29b      	uxth	r3, r3
 800dc4a:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800dc4c:	897b      	ldrh	r3, [r7, #10]
 800dc4e:	461a      	mov	r2, r3
 800dc50:	68f9      	ldr	r1, [r7, #12]
 800dc52:	6878      	ldr	r0, [r7, #4]
 800dc54:	f000 fa1f 	bl	800e096 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800dc58:	683b      	ldr	r3, [r7, #0]
 800dc5a:	88db      	ldrh	r3, [r3, #6]
 800dc5c:	2b00      	cmp	r3, #0
 800dc5e:	d102      	bne.n	800dc66 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800dc60:	6878      	ldr	r0, [r7, #4]
 800dc62:	f000 fa76 	bl	800e152 <USBD_CtlSendStatus>
  }
}
 800dc66:	3710      	adds	r7, #16
 800dc68:	46bd      	mov	sp, r7
 800dc6a:	bd80      	pop	{r7, pc}

0800dc6c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dc6c:	b580      	push	{r7, lr}
 800dc6e:	b084      	sub	sp, #16
 800dc70:	af00      	add	r7, sp, #0
 800dc72:	6078      	str	r0, [r7, #4]
 800dc74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800dc76:	683b      	ldr	r3, [r7, #0]
 800dc78:	889b      	ldrh	r3, [r3, #4]
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d130      	bne.n	800dce0 <USBD_SetAddress+0x74>
 800dc7e:	683b      	ldr	r3, [r7, #0]
 800dc80:	88db      	ldrh	r3, [r3, #6]
 800dc82:	2b00      	cmp	r3, #0
 800dc84:	d12c      	bne.n	800dce0 <USBD_SetAddress+0x74>
 800dc86:	683b      	ldr	r3, [r7, #0]
 800dc88:	885b      	ldrh	r3, [r3, #2]
 800dc8a:	2b7f      	cmp	r3, #127	; 0x7f
 800dc8c:	d828      	bhi.n	800dce0 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800dc8e:	683b      	ldr	r3, [r7, #0]
 800dc90:	885b      	ldrh	r3, [r3, #2]
 800dc92:	b2db      	uxtb	r3, r3
 800dc94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800dc98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dc9a:	687b      	ldr	r3, [r7, #4]
 800dc9c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dca0:	2b03      	cmp	r3, #3
 800dca2:	d104      	bne.n	800dcae <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800dca4:	6839      	ldr	r1, [r7, #0]
 800dca6:	6878      	ldr	r0, [r7, #4]
 800dca8:	f000 f98b 	bl	800dfc2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcac:	e01d      	b.n	800dcea <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	7bfa      	ldrb	r2, [r7, #15]
 800dcb2:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800dcb6:	7bfb      	ldrb	r3, [r7, #15]
 800dcb8:	4619      	mov	r1, r3
 800dcba:	6878      	ldr	r0, [r7, #4]
 800dcbc:	f003 ff3a 	bl	8011b34 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800dcc0:	6878      	ldr	r0, [r7, #4]
 800dcc2:	f000 fa46 	bl	800e152 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800dcc6:	7bfb      	ldrb	r3, [r7, #15]
 800dcc8:	2b00      	cmp	r3, #0
 800dcca:	d004      	beq.n	800dcd6 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2202      	movs	r2, #2
 800dcd0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcd4:	e009      	b.n	800dcea <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800dcd6:	687b      	ldr	r3, [r7, #4]
 800dcd8:	2201      	movs	r2, #1
 800dcda:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800dcde:	e004      	b.n	800dcea <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800dce0:	6839      	ldr	r1, [r7, #0]
 800dce2:	6878      	ldr	r0, [r7, #4]
 800dce4:	f000 f96d 	bl	800dfc2 <USBD_CtlError>
  }
}
 800dce8:	bf00      	nop
 800dcea:	bf00      	nop
 800dcec:	3710      	adds	r7, #16
 800dcee:	46bd      	mov	sp, r7
 800dcf0:	bd80      	pop	{r7, pc}
	...

0800dcf4 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dcf4:	b580      	push	{r7, lr}
 800dcf6:	b082      	sub	sp, #8
 800dcf8:	af00      	add	r7, sp, #0
 800dcfa:	6078      	str	r0, [r7, #4]
 800dcfc:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	885b      	ldrh	r3, [r3, #2]
 800dd02:	b2da      	uxtb	r2, r3
 800dd04:	4b41      	ldr	r3, [pc, #260]	; (800de0c <USBD_SetConfig+0x118>)
 800dd06:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800dd08:	4b40      	ldr	r3, [pc, #256]	; (800de0c <USBD_SetConfig+0x118>)
 800dd0a:	781b      	ldrb	r3, [r3, #0]
 800dd0c:	2b01      	cmp	r3, #1
 800dd0e:	d904      	bls.n	800dd1a <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800dd10:	6839      	ldr	r1, [r7, #0]
 800dd12:	6878      	ldr	r0, [r7, #4]
 800dd14:	f000 f955 	bl	800dfc2 <USBD_CtlError>
 800dd18:	e075      	b.n	800de06 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800dd1a:	687b      	ldr	r3, [r7, #4]
 800dd1c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dd20:	2b02      	cmp	r3, #2
 800dd22:	d002      	beq.n	800dd2a <USBD_SetConfig+0x36>
 800dd24:	2b03      	cmp	r3, #3
 800dd26:	d023      	beq.n	800dd70 <USBD_SetConfig+0x7c>
 800dd28:	e062      	b.n	800ddf0 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800dd2a:	4b38      	ldr	r3, [pc, #224]	; (800de0c <USBD_SetConfig+0x118>)
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	2b00      	cmp	r3, #0
 800dd30:	d01a      	beq.n	800dd68 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800dd32:	4b36      	ldr	r3, [pc, #216]	; (800de0c <USBD_SetConfig+0x118>)
 800dd34:	781b      	ldrb	r3, [r3, #0]
 800dd36:	461a      	mov	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800dd3c:	687b      	ldr	r3, [r7, #4]
 800dd3e:	2203      	movs	r2, #3
 800dd40:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dd44:	4b31      	ldr	r3, [pc, #196]	; (800de0c <USBD_SetConfig+0x118>)
 800dd46:	781b      	ldrb	r3, [r3, #0]
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6878      	ldr	r0, [r7, #4]
 800dd4c:	f7ff fa5d 	bl	800d20a <USBD_SetClassConfig>
 800dd50:	4603      	mov	r3, r0
 800dd52:	2b02      	cmp	r3, #2
 800dd54:	d104      	bne.n	800dd60 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800dd56:	6839      	ldr	r1, [r7, #0]
 800dd58:	6878      	ldr	r0, [r7, #4]
 800dd5a:	f000 f932 	bl	800dfc2 <USBD_CtlError>
          return;
 800dd5e:	e052      	b.n	800de06 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800dd60:	6878      	ldr	r0, [r7, #4]
 800dd62:	f000 f9f6 	bl	800e152 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800dd66:	e04e      	b.n	800de06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800dd68:	6878      	ldr	r0, [r7, #4]
 800dd6a:	f000 f9f2 	bl	800e152 <USBD_CtlSendStatus>
      break;
 800dd6e:	e04a      	b.n	800de06 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800dd70:	4b26      	ldr	r3, [pc, #152]	; (800de0c <USBD_SetConfig+0x118>)
 800dd72:	781b      	ldrb	r3, [r3, #0]
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d112      	bne.n	800dd9e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800dd78:	687b      	ldr	r3, [r7, #4]
 800dd7a:	2202      	movs	r2, #2
 800dd7c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800dd80:	4b22      	ldr	r3, [pc, #136]	; (800de0c <USBD_SetConfig+0x118>)
 800dd82:	781b      	ldrb	r3, [r3, #0]
 800dd84:	461a      	mov	r2, r3
 800dd86:	687b      	ldr	r3, [r7, #4]
 800dd88:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800dd8a:	4b20      	ldr	r3, [pc, #128]	; (800de0c <USBD_SetConfig+0x118>)
 800dd8c:	781b      	ldrb	r3, [r3, #0]
 800dd8e:	4619      	mov	r1, r3
 800dd90:	6878      	ldr	r0, [r7, #4]
 800dd92:	f7ff fa59 	bl	800d248 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f000 f9db 	bl	800e152 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800dd9c:	e033      	b.n	800de06 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800dd9e:	4b1b      	ldr	r3, [pc, #108]	; (800de0c <USBD_SetConfig+0x118>)
 800dda0:	781b      	ldrb	r3, [r3, #0]
 800dda2:	461a      	mov	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	685b      	ldr	r3, [r3, #4]
 800dda8:	429a      	cmp	r2, r3
 800ddaa:	d01d      	beq.n	800dde8 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800ddac:	687b      	ldr	r3, [r7, #4]
 800ddae:	685b      	ldr	r3, [r3, #4]
 800ddb0:	b2db      	uxtb	r3, r3
 800ddb2:	4619      	mov	r1, r3
 800ddb4:	6878      	ldr	r0, [r7, #4]
 800ddb6:	f7ff fa47 	bl	800d248 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800ddba:	4b14      	ldr	r3, [pc, #80]	; (800de0c <USBD_SetConfig+0x118>)
 800ddbc:	781b      	ldrb	r3, [r3, #0]
 800ddbe:	461a      	mov	r2, r3
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800ddc4:	4b11      	ldr	r3, [pc, #68]	; (800de0c <USBD_SetConfig+0x118>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	4619      	mov	r1, r3
 800ddca:	6878      	ldr	r0, [r7, #4]
 800ddcc:	f7ff fa1d 	bl	800d20a <USBD_SetClassConfig>
 800ddd0:	4603      	mov	r3, r0
 800ddd2:	2b02      	cmp	r3, #2
 800ddd4:	d104      	bne.n	800dde0 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800ddd6:	6839      	ldr	r1, [r7, #0]
 800ddd8:	6878      	ldr	r0, [r7, #4]
 800ddda:	f000 f8f2 	bl	800dfc2 <USBD_CtlError>
          return;
 800ddde:	e012      	b.n	800de06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800dde0:	6878      	ldr	r0, [r7, #4]
 800dde2:	f000 f9b6 	bl	800e152 <USBD_CtlSendStatus>
      break;
 800dde6:	e00e      	b.n	800de06 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800dde8:	6878      	ldr	r0, [r7, #4]
 800ddea:	f000 f9b2 	bl	800e152 <USBD_CtlSendStatus>
      break;
 800ddee:	e00a      	b.n	800de06 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800ddf0:	6839      	ldr	r1, [r7, #0]
 800ddf2:	6878      	ldr	r0, [r7, #4]
 800ddf4:	f000 f8e5 	bl	800dfc2 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800ddf8:	4b04      	ldr	r3, [pc, #16]	; (800de0c <USBD_SetConfig+0x118>)
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	4619      	mov	r1, r3
 800ddfe:	6878      	ldr	r0, [r7, #4]
 800de00:	f7ff fa22 	bl	800d248 <USBD_ClrClassConfig>
      break;
 800de04:	bf00      	nop
    }
  }
}
 800de06:	3708      	adds	r7, #8
 800de08:	46bd      	mov	sp, r7
 800de0a:	bd80      	pop	{r7, pc}
 800de0c:	20000f18 	.word	0x20000f18

0800de10 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de10:	b580      	push	{r7, lr}
 800de12:	b082      	sub	sp, #8
 800de14:	af00      	add	r7, sp, #0
 800de16:	6078      	str	r0, [r7, #4]
 800de18:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800de1a:	683b      	ldr	r3, [r7, #0]
 800de1c:	88db      	ldrh	r3, [r3, #6]
 800de1e:	2b01      	cmp	r3, #1
 800de20:	d004      	beq.n	800de2c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800de22:	6839      	ldr	r1, [r7, #0]
 800de24:	6878      	ldr	r0, [r7, #4]
 800de26:	f000 f8cc 	bl	800dfc2 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800de2a:	e022      	b.n	800de72 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800de2c:	687b      	ldr	r3, [r7, #4]
 800de2e:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de32:	2b02      	cmp	r3, #2
 800de34:	dc02      	bgt.n	800de3c <USBD_GetConfig+0x2c>
 800de36:	2b00      	cmp	r3, #0
 800de38:	dc03      	bgt.n	800de42 <USBD_GetConfig+0x32>
 800de3a:	e015      	b.n	800de68 <USBD_GetConfig+0x58>
 800de3c:	2b03      	cmp	r3, #3
 800de3e:	d00b      	beq.n	800de58 <USBD_GetConfig+0x48>
 800de40:	e012      	b.n	800de68 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800de42:	687b      	ldr	r3, [r7, #4]
 800de44:	2200      	movs	r2, #0
 800de46:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3308      	adds	r3, #8
 800de4c:	2201      	movs	r2, #1
 800de4e:	4619      	mov	r1, r3
 800de50:	6878      	ldr	r0, [r7, #4]
 800de52:	f000 f920 	bl	800e096 <USBD_CtlSendData>
      break;
 800de56:	e00c      	b.n	800de72 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800de58:	687b      	ldr	r3, [r7, #4]
 800de5a:	3304      	adds	r3, #4
 800de5c:	2201      	movs	r2, #1
 800de5e:	4619      	mov	r1, r3
 800de60:	6878      	ldr	r0, [r7, #4]
 800de62:	f000 f918 	bl	800e096 <USBD_CtlSendData>
      break;
 800de66:	e004      	b.n	800de72 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800de68:	6839      	ldr	r1, [r7, #0]
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f000 f8a9 	bl	800dfc2 <USBD_CtlError>
      break;
 800de70:	bf00      	nop
}
 800de72:	bf00      	nop
 800de74:	3708      	adds	r7, #8
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b082      	sub	sp, #8
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
 800de82:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800de84:	687b      	ldr	r3, [r7, #4]
 800de86:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800de8a:	3b01      	subs	r3, #1
 800de8c:	2b02      	cmp	r3, #2
 800de8e:	d81e      	bhi.n	800dece <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800de90:	683b      	ldr	r3, [r7, #0]
 800de92:	88db      	ldrh	r3, [r3, #6]
 800de94:	2b02      	cmp	r3, #2
 800de96:	d004      	beq.n	800dea2 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800de98:	6839      	ldr	r1, [r7, #0]
 800de9a:	6878      	ldr	r0, [r7, #4]
 800de9c:	f000 f891 	bl	800dfc2 <USBD_CtlError>
      break;
 800dea0:	e01a      	b.n	800ded8 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dea2:	687b      	ldr	r3, [r7, #4]
 800dea4:	2201      	movs	r2, #1
 800dea6:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d005      	beq.n	800debe <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800deb2:	687b      	ldr	r3, [r7, #4]
 800deb4:	68db      	ldr	r3, [r3, #12]
 800deb6:	f043 0202 	orr.w	r2, r3, #2
 800deba:	687b      	ldr	r3, [r7, #4]
 800debc:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800debe:	687b      	ldr	r3, [r7, #4]
 800dec0:	330c      	adds	r3, #12
 800dec2:	2202      	movs	r2, #2
 800dec4:	4619      	mov	r1, r3
 800dec6:	6878      	ldr	r0, [r7, #4]
 800dec8:	f000 f8e5 	bl	800e096 <USBD_CtlSendData>
    break;
 800decc:	e004      	b.n	800ded8 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800dece:	6839      	ldr	r1, [r7, #0]
 800ded0:	6878      	ldr	r0, [r7, #4]
 800ded2:	f000 f876 	bl	800dfc2 <USBD_CtlError>
    break;
 800ded6:	bf00      	nop
  }
}
 800ded8:	bf00      	nop
 800deda:	3708      	adds	r7, #8
 800dedc:	46bd      	mov	sp, r7
 800dede:	bd80      	pop	{r7, pc}

0800dee0 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dee0:	b580      	push	{r7, lr}
 800dee2:	b082      	sub	sp, #8
 800dee4:	af00      	add	r7, sp, #0
 800dee6:	6078      	str	r0, [r7, #4]
 800dee8:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800deea:	683b      	ldr	r3, [r7, #0]
 800deec:	885b      	ldrh	r3, [r3, #2]
 800deee:	2b01      	cmp	r3, #1
 800def0:	d106      	bne.n	800df00 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800def2:	687b      	ldr	r3, [r7, #4]
 800def4:	2201      	movs	r2, #1
 800def6:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800defa:	6878      	ldr	r0, [r7, #4]
 800defc:	f000 f929 	bl	800e152 <USBD_CtlSendStatus>
  }

}
 800df00:	bf00      	nop
 800df02:	3708      	adds	r7, #8
 800df04:	46bd      	mov	sp, r7
 800df06:	bd80      	pop	{r7, pc}

0800df08 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800df08:	b580      	push	{r7, lr}
 800df0a:	b082      	sub	sp, #8
 800df0c:	af00      	add	r7, sp, #0
 800df0e:	6078      	str	r0, [r7, #4]
 800df10:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800df18:	3b01      	subs	r3, #1
 800df1a:	2b02      	cmp	r3, #2
 800df1c:	d80b      	bhi.n	800df36 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800df1e:	683b      	ldr	r3, [r7, #0]
 800df20:	885b      	ldrh	r3, [r3, #2]
 800df22:	2b01      	cmp	r3, #1
 800df24:	d10c      	bne.n	800df40 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800df26:	687b      	ldr	r3, [r7, #4]
 800df28:	2200      	movs	r2, #0
 800df2a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f000 f90f 	bl	800e152 <USBD_CtlSendStatus>
    }
    break;
 800df34:	e004      	b.n	800df40 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800df36:	6839      	ldr	r1, [r7, #0]
 800df38:	6878      	ldr	r0, [r7, #4]
 800df3a:	f000 f842 	bl	800dfc2 <USBD_CtlError>
    break;
 800df3e:	e000      	b.n	800df42 <USBD_ClrFeature+0x3a>
    break;
 800df40:	bf00      	nop
  }
}
 800df42:	bf00      	nop
 800df44:	3708      	adds	r7, #8
 800df46:	46bd      	mov	sp, r7
 800df48:	bd80      	pop	{r7, pc}

0800df4a <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800df4a:	b480      	push	{r7}
 800df4c:	b083      	sub	sp, #12
 800df4e:	af00      	add	r7, sp, #0
 800df50:	6078      	str	r0, [r7, #4]
 800df52:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800df54:	683b      	ldr	r3, [r7, #0]
 800df56:	781a      	ldrb	r2, [r3, #0]
 800df58:	687b      	ldr	r3, [r7, #4]
 800df5a:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800df5c:	683b      	ldr	r3, [r7, #0]
 800df5e:	785a      	ldrb	r2, [r3, #1]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800df64:	683b      	ldr	r3, [r7, #0]
 800df66:	3302      	adds	r3, #2
 800df68:	781b      	ldrb	r3, [r3, #0]
 800df6a:	b29a      	uxth	r2, r3
 800df6c:	683b      	ldr	r3, [r7, #0]
 800df6e:	3303      	adds	r3, #3
 800df70:	781b      	ldrb	r3, [r3, #0]
 800df72:	b29b      	uxth	r3, r3
 800df74:	021b      	lsls	r3, r3, #8
 800df76:	b29b      	uxth	r3, r3
 800df78:	4413      	add	r3, r2
 800df7a:	b29a      	uxth	r2, r3
 800df7c:	687b      	ldr	r3, [r7, #4]
 800df7e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800df80:	683b      	ldr	r3, [r7, #0]
 800df82:	3304      	adds	r3, #4
 800df84:	781b      	ldrb	r3, [r3, #0]
 800df86:	b29a      	uxth	r2, r3
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	3305      	adds	r3, #5
 800df8c:	781b      	ldrb	r3, [r3, #0]
 800df8e:	b29b      	uxth	r3, r3
 800df90:	021b      	lsls	r3, r3, #8
 800df92:	b29b      	uxth	r3, r3
 800df94:	4413      	add	r3, r2
 800df96:	b29a      	uxth	r2, r3
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800df9c:	683b      	ldr	r3, [r7, #0]
 800df9e:	3306      	adds	r3, #6
 800dfa0:	781b      	ldrb	r3, [r3, #0]
 800dfa2:	b29a      	uxth	r2, r3
 800dfa4:	683b      	ldr	r3, [r7, #0]
 800dfa6:	3307      	adds	r3, #7
 800dfa8:	781b      	ldrb	r3, [r3, #0]
 800dfaa:	b29b      	uxth	r3, r3
 800dfac:	021b      	lsls	r3, r3, #8
 800dfae:	b29b      	uxth	r3, r3
 800dfb0:	4413      	add	r3, r2
 800dfb2:	b29a      	uxth	r2, r3
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	80da      	strh	r2, [r3, #6]

}
 800dfb8:	bf00      	nop
 800dfba:	370c      	adds	r7, #12
 800dfbc:	46bd      	mov	sp, r7
 800dfbe:	bc80      	pop	{r7}
 800dfc0:	4770      	bx	lr

0800dfc2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dfc2:	b580      	push	{r7, lr}
 800dfc4:	b082      	sub	sp, #8
 800dfc6:	af00      	add	r7, sp, #0
 800dfc8:	6078      	str	r0, [r7, #4]
 800dfca:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800dfcc:	2180      	movs	r1, #128	; 0x80
 800dfce:	6878      	ldr	r0, [r7, #4]
 800dfd0:	f003 fd46 	bl	8011a60 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800dfd4:	2100      	movs	r1, #0
 800dfd6:	6878      	ldr	r0, [r7, #4]
 800dfd8:	f003 fd42 	bl	8011a60 <USBD_LL_StallEP>
}
 800dfdc:	bf00      	nop
 800dfde:	3708      	adds	r7, #8
 800dfe0:	46bd      	mov	sp, r7
 800dfe2:	bd80      	pop	{r7, pc}

0800dfe4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dfe4:	b580      	push	{r7, lr}
 800dfe6:	b086      	sub	sp, #24
 800dfe8:	af00      	add	r7, sp, #0
 800dfea:	60f8      	str	r0, [r7, #12]
 800dfec:	60b9      	str	r1, [r7, #8]
 800dfee:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dff0:	2300      	movs	r3, #0
 800dff2:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d032      	beq.n	800e060 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dffa:	68f8      	ldr	r0, [r7, #12]
 800dffc:	f000 f834 	bl	800e068 <USBD_GetLen>
 800e000:	4603      	mov	r3, r0
 800e002:	3301      	adds	r3, #1
 800e004:	b29b      	uxth	r3, r3
 800e006:	005b      	lsls	r3, r3, #1
 800e008:	b29a      	uxth	r2, r3
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800e00e:	7dfb      	ldrb	r3, [r7, #23]
 800e010:	1c5a      	adds	r2, r3, #1
 800e012:	75fa      	strb	r2, [r7, #23]
 800e014:	461a      	mov	r2, r3
 800e016:	68bb      	ldr	r3, [r7, #8]
 800e018:	4413      	add	r3, r2
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	7812      	ldrb	r2, [r2, #0]
 800e01e:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800e020:	7dfb      	ldrb	r3, [r7, #23]
 800e022:	1c5a      	adds	r2, r3, #1
 800e024:	75fa      	strb	r2, [r7, #23]
 800e026:	461a      	mov	r2, r3
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	4413      	add	r3, r2
 800e02c:	2203      	movs	r2, #3
 800e02e:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800e030:	e012      	b.n	800e058 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800e032:	68fb      	ldr	r3, [r7, #12]
 800e034:	1c5a      	adds	r2, r3, #1
 800e036:	60fa      	str	r2, [r7, #12]
 800e038:	7dfa      	ldrb	r2, [r7, #23]
 800e03a:	1c51      	adds	r1, r2, #1
 800e03c:	75f9      	strb	r1, [r7, #23]
 800e03e:	4611      	mov	r1, r2
 800e040:	68ba      	ldr	r2, [r7, #8]
 800e042:	440a      	add	r2, r1
 800e044:	781b      	ldrb	r3, [r3, #0]
 800e046:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800e048:	7dfb      	ldrb	r3, [r7, #23]
 800e04a:	1c5a      	adds	r2, r3, #1
 800e04c:	75fa      	strb	r2, [r7, #23]
 800e04e:	461a      	mov	r2, r3
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	4413      	add	r3, r2
 800e054:	2200      	movs	r2, #0
 800e056:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800e058:	68fb      	ldr	r3, [r7, #12]
 800e05a:	781b      	ldrb	r3, [r3, #0]
 800e05c:	2b00      	cmp	r3, #0
 800e05e:	d1e8      	bne.n	800e032 <USBD_GetString+0x4e>
    }
  }
}
 800e060:	bf00      	nop
 800e062:	3718      	adds	r7, #24
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}

0800e068 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800e068:	b480      	push	{r7}
 800e06a:	b085      	sub	sp, #20
 800e06c:	af00      	add	r7, sp, #0
 800e06e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800e070:	2300      	movs	r3, #0
 800e072:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800e074:	e005      	b.n	800e082 <USBD_GetLen+0x1a>
    {
        len++;
 800e076:	7bfb      	ldrb	r3, [r7, #15]
 800e078:	3301      	adds	r3, #1
 800e07a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800e07c:	687b      	ldr	r3, [r7, #4]
 800e07e:	3301      	adds	r3, #1
 800e080:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800e082:	687b      	ldr	r3, [r7, #4]
 800e084:	781b      	ldrb	r3, [r3, #0]
 800e086:	2b00      	cmp	r3, #0
 800e088:	d1f5      	bne.n	800e076 <USBD_GetLen+0xe>
    }

    return len;
 800e08a:	7bfb      	ldrb	r3, [r7, #15]
}
 800e08c:	4618      	mov	r0, r3
 800e08e:	3714      	adds	r7, #20
 800e090:	46bd      	mov	sp, r7
 800e092:	bc80      	pop	{r7}
 800e094:	4770      	bx	lr

0800e096 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800e096:	b580      	push	{r7, lr}
 800e098:	b084      	sub	sp, #16
 800e09a:	af00      	add	r7, sp, #0
 800e09c:	60f8      	str	r0, [r7, #12]
 800e09e:	60b9      	str	r1, [r7, #8]
 800e0a0:	4613      	mov	r3, r2
 800e0a2:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800e0a4:	68fb      	ldr	r3, [r7, #12]
 800e0a6:	2202      	movs	r2, #2
 800e0a8:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800e0ac:	88fa      	ldrh	r2, [r7, #6]
 800e0ae:	68fb      	ldr	r3, [r7, #12]
 800e0b0:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800e0b2:	88fa      	ldrh	r2, [r7, #6]
 800e0b4:	68fb      	ldr	r3, [r7, #12]
 800e0b6:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e0b8:	88fb      	ldrh	r3, [r7, #6]
 800e0ba:	68ba      	ldr	r2, [r7, #8]
 800e0bc:	2100      	movs	r1, #0
 800e0be:	68f8      	ldr	r0, [r7, #12]
 800e0c0:	f003 fd57 	bl	8011b72 <USBD_LL_Transmit>

  return USBD_OK;
 800e0c4:	2300      	movs	r3, #0
}
 800e0c6:	4618      	mov	r0, r3
 800e0c8:	3710      	adds	r7, #16
 800e0ca:	46bd      	mov	sp, r7
 800e0cc:	bd80      	pop	{r7, pc}

0800e0ce <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800e0ce:	b580      	push	{r7, lr}
 800e0d0:	b084      	sub	sp, #16
 800e0d2:	af00      	add	r7, sp, #0
 800e0d4:	60f8      	str	r0, [r7, #12]
 800e0d6:	60b9      	str	r1, [r7, #8]
 800e0d8:	4613      	mov	r3, r2
 800e0da:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800e0dc:	88fb      	ldrh	r3, [r7, #6]
 800e0de:	68ba      	ldr	r2, [r7, #8]
 800e0e0:	2100      	movs	r1, #0
 800e0e2:	68f8      	ldr	r0, [r7, #12]
 800e0e4:	f003 fd45 	bl	8011b72 <USBD_LL_Transmit>

  return USBD_OK;
 800e0e8:	2300      	movs	r3, #0
}
 800e0ea:	4618      	mov	r0, r3
 800e0ec:	3710      	adds	r7, #16
 800e0ee:	46bd      	mov	sp, r7
 800e0f0:	bd80      	pop	{r7, pc}

0800e0f2 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800e0f2:	b580      	push	{r7, lr}
 800e0f4:	b084      	sub	sp, #16
 800e0f6:	af00      	add	r7, sp, #0
 800e0f8:	60f8      	str	r0, [r7, #12]
 800e0fa:	60b9      	str	r1, [r7, #8]
 800e0fc:	4613      	mov	r3, r2
 800e0fe:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	2203      	movs	r2, #3
 800e104:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800e108:	88fa      	ldrh	r2, [r7, #6]
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800e110:	88fa      	ldrh	r2, [r7, #6]
 800e112:	68fb      	ldr	r3, [r7, #12]
 800e114:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800e118:	88fb      	ldrh	r3, [r7, #6]
 800e11a:	68ba      	ldr	r2, [r7, #8]
 800e11c:	2100      	movs	r1, #0
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f003 fd4a 	bl	8011bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e124:	2300      	movs	r3, #0
}
 800e126:	4618      	mov	r0, r3
 800e128:	3710      	adds	r7, #16
 800e12a:	46bd      	mov	sp, r7
 800e12c:	bd80      	pop	{r7, pc}

0800e12e <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800e12e:	b580      	push	{r7, lr}
 800e130:	b084      	sub	sp, #16
 800e132:	af00      	add	r7, sp, #0
 800e134:	60f8      	str	r0, [r7, #12]
 800e136:	60b9      	str	r1, [r7, #8]
 800e138:	4613      	mov	r3, r2
 800e13a:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800e13c:	88fb      	ldrh	r3, [r7, #6]
 800e13e:	68ba      	ldr	r2, [r7, #8]
 800e140:	2100      	movs	r1, #0
 800e142:	68f8      	ldr	r0, [r7, #12]
 800e144:	f003 fd38 	bl	8011bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e148:	2300      	movs	r3, #0
}
 800e14a:	4618      	mov	r0, r3
 800e14c:	3710      	adds	r7, #16
 800e14e:	46bd      	mov	sp, r7
 800e150:	bd80      	pop	{r7, pc}

0800e152 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800e152:	b580      	push	{r7, lr}
 800e154:	b082      	sub	sp, #8
 800e156:	af00      	add	r7, sp, #0
 800e158:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2204      	movs	r2, #4
 800e15e:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800e162:	2300      	movs	r3, #0
 800e164:	2200      	movs	r2, #0
 800e166:	2100      	movs	r1, #0
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f003 fd02 	bl	8011b72 <USBD_LL_Transmit>

  return USBD_OK;
 800e16e:	2300      	movs	r3, #0
}
 800e170:	4618      	mov	r0, r3
 800e172:	3708      	adds	r7, #8
 800e174:	46bd      	mov	sp, r7
 800e176:	bd80      	pop	{r7, pc}

0800e178 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b082      	sub	sp, #8
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800e180:	687b      	ldr	r3, [r7, #4]
 800e182:	2205      	movs	r2, #5
 800e184:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800e188:	2300      	movs	r3, #0
 800e18a:	2200      	movs	r2, #0
 800e18c:	2100      	movs	r1, #0
 800e18e:	6878      	ldr	r0, [r7, #4]
 800e190:	f003 fd12 	bl	8011bb8 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800e194:	2300      	movs	r3, #0
}
 800e196:	4618      	mov	r0, r3
 800e198:	3708      	adds	r7, #8
 800e19a:	46bd      	mov	sp, r7
 800e19c:	bd80      	pop	{r7, pc}
	...

0800e1a0 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800e1a0:	b580      	push	{r7, lr}
 800e1a2:	b084      	sub	sp, #16
 800e1a4:	af00      	add	r7, sp, #0
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800e1aa:	79fb      	ldrb	r3, [r7, #7]
 800e1ac:	4a08      	ldr	r2, [pc, #32]	; (800e1d0 <disk_status+0x30>)
 800e1ae:	009b      	lsls	r3, r3, #2
 800e1b0:	4413      	add	r3, r2
 800e1b2:	685b      	ldr	r3, [r3, #4]
 800e1b4:	685b      	ldr	r3, [r3, #4]
 800e1b6:	79fa      	ldrb	r2, [r7, #7]
 800e1b8:	4905      	ldr	r1, [pc, #20]	; (800e1d0 <disk_status+0x30>)
 800e1ba:	440a      	add	r2, r1
 800e1bc:	7a12      	ldrb	r2, [r2, #8]
 800e1be:	4610      	mov	r0, r2
 800e1c0:	4798      	blx	r3
 800e1c2:	4603      	mov	r3, r0
 800e1c4:	73fb      	strb	r3, [r7, #15]
  return stat;
 800e1c6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	3710      	adds	r7, #16
 800e1cc:	46bd      	mov	sp, r7
 800e1ce:	bd80      	pop	{r7, pc}
 800e1d0:	20001144 	.word	0x20001144

0800e1d4 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800e1d4:	b580      	push	{r7, lr}
 800e1d6:	b084      	sub	sp, #16
 800e1d8:	af00      	add	r7, sp, #0
 800e1da:	4603      	mov	r3, r0
 800e1dc:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800e1de:	2300      	movs	r3, #0
 800e1e0:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800e1e2:	79fb      	ldrb	r3, [r7, #7]
 800e1e4:	4a0d      	ldr	r2, [pc, #52]	; (800e21c <disk_initialize+0x48>)
 800e1e6:	5cd3      	ldrb	r3, [r2, r3]
 800e1e8:	2b00      	cmp	r3, #0
 800e1ea:	d111      	bne.n	800e210 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800e1ec:	79fb      	ldrb	r3, [r7, #7]
 800e1ee:	4a0b      	ldr	r2, [pc, #44]	; (800e21c <disk_initialize+0x48>)
 800e1f0:	2101      	movs	r1, #1
 800e1f2:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800e1f4:	79fb      	ldrb	r3, [r7, #7]
 800e1f6:	4a09      	ldr	r2, [pc, #36]	; (800e21c <disk_initialize+0x48>)
 800e1f8:	009b      	lsls	r3, r3, #2
 800e1fa:	4413      	add	r3, r2
 800e1fc:	685b      	ldr	r3, [r3, #4]
 800e1fe:	681b      	ldr	r3, [r3, #0]
 800e200:	79fa      	ldrb	r2, [r7, #7]
 800e202:	4906      	ldr	r1, [pc, #24]	; (800e21c <disk_initialize+0x48>)
 800e204:	440a      	add	r2, r1
 800e206:	7a12      	ldrb	r2, [r2, #8]
 800e208:	4610      	mov	r0, r2
 800e20a:	4798      	blx	r3
 800e20c:	4603      	mov	r3, r0
 800e20e:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800e210:	7bfb      	ldrb	r3, [r7, #15]
}
 800e212:	4618      	mov	r0, r3
 800e214:	3710      	adds	r7, #16
 800e216:	46bd      	mov	sp, r7
 800e218:	bd80      	pop	{r7, pc}
 800e21a:	bf00      	nop
 800e21c:	20001144 	.word	0x20001144

0800e220 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800e220:	b590      	push	{r4, r7, lr}
 800e222:	b087      	sub	sp, #28
 800e224:	af00      	add	r7, sp, #0
 800e226:	60b9      	str	r1, [r7, #8]
 800e228:	607a      	str	r2, [r7, #4]
 800e22a:	603b      	str	r3, [r7, #0]
 800e22c:	4603      	mov	r3, r0
 800e22e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800e230:	7bfb      	ldrb	r3, [r7, #15]
 800e232:	4a0a      	ldr	r2, [pc, #40]	; (800e25c <disk_read+0x3c>)
 800e234:	009b      	lsls	r3, r3, #2
 800e236:	4413      	add	r3, r2
 800e238:	685b      	ldr	r3, [r3, #4]
 800e23a:	689c      	ldr	r4, [r3, #8]
 800e23c:	7bfb      	ldrb	r3, [r7, #15]
 800e23e:	4a07      	ldr	r2, [pc, #28]	; (800e25c <disk_read+0x3c>)
 800e240:	4413      	add	r3, r2
 800e242:	7a18      	ldrb	r0, [r3, #8]
 800e244:	683b      	ldr	r3, [r7, #0]
 800e246:	687a      	ldr	r2, [r7, #4]
 800e248:	68b9      	ldr	r1, [r7, #8]
 800e24a:	47a0      	blx	r4
 800e24c:	4603      	mov	r3, r0
 800e24e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e250:	7dfb      	ldrb	r3, [r7, #23]
}
 800e252:	4618      	mov	r0, r3
 800e254:	371c      	adds	r7, #28
 800e256:	46bd      	mov	sp, r7
 800e258:	bd90      	pop	{r4, r7, pc}
 800e25a:	bf00      	nop
 800e25c:	20001144 	.word	0x20001144

0800e260 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e260:	b590      	push	{r4, r7, lr}
 800e262:	b087      	sub	sp, #28
 800e264:	af00      	add	r7, sp, #0
 800e266:	60b9      	str	r1, [r7, #8]
 800e268:	607a      	str	r2, [r7, #4]
 800e26a:	603b      	str	r3, [r7, #0]
 800e26c:	4603      	mov	r3, r0
 800e26e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e270:	7bfb      	ldrb	r3, [r7, #15]
 800e272:	4a0a      	ldr	r2, [pc, #40]	; (800e29c <disk_write+0x3c>)
 800e274:	009b      	lsls	r3, r3, #2
 800e276:	4413      	add	r3, r2
 800e278:	685b      	ldr	r3, [r3, #4]
 800e27a:	68dc      	ldr	r4, [r3, #12]
 800e27c:	7bfb      	ldrb	r3, [r7, #15]
 800e27e:	4a07      	ldr	r2, [pc, #28]	; (800e29c <disk_write+0x3c>)
 800e280:	4413      	add	r3, r2
 800e282:	7a18      	ldrb	r0, [r3, #8]
 800e284:	683b      	ldr	r3, [r7, #0]
 800e286:	687a      	ldr	r2, [r7, #4]
 800e288:	68b9      	ldr	r1, [r7, #8]
 800e28a:	47a0      	blx	r4
 800e28c:	4603      	mov	r3, r0
 800e28e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e290:	7dfb      	ldrb	r3, [r7, #23]
}
 800e292:	4618      	mov	r0, r3
 800e294:	371c      	adds	r7, #28
 800e296:	46bd      	mov	sp, r7
 800e298:	bd90      	pop	{r4, r7, pc}
 800e29a:	bf00      	nop
 800e29c:	20001144 	.word	0x20001144

0800e2a0 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e2a0:	b580      	push	{r7, lr}
 800e2a2:	b084      	sub	sp, #16
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	4603      	mov	r3, r0
 800e2a8:	603a      	str	r2, [r7, #0]
 800e2aa:	71fb      	strb	r3, [r7, #7]
 800e2ac:	460b      	mov	r3, r1
 800e2ae:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e2b0:	79fb      	ldrb	r3, [r7, #7]
 800e2b2:	4a09      	ldr	r2, [pc, #36]	; (800e2d8 <disk_ioctl+0x38>)
 800e2b4:	009b      	lsls	r3, r3, #2
 800e2b6:	4413      	add	r3, r2
 800e2b8:	685b      	ldr	r3, [r3, #4]
 800e2ba:	691b      	ldr	r3, [r3, #16]
 800e2bc:	79fa      	ldrb	r2, [r7, #7]
 800e2be:	4906      	ldr	r1, [pc, #24]	; (800e2d8 <disk_ioctl+0x38>)
 800e2c0:	440a      	add	r2, r1
 800e2c2:	7a10      	ldrb	r0, [r2, #8]
 800e2c4:	79b9      	ldrb	r1, [r7, #6]
 800e2c6:	683a      	ldr	r2, [r7, #0]
 800e2c8:	4798      	blx	r3
 800e2ca:	4603      	mov	r3, r0
 800e2cc:	73fb      	strb	r3, [r7, #15]
  return res;
 800e2ce:	7bfb      	ldrb	r3, [r7, #15]
}
 800e2d0:	4618      	mov	r0, r3
 800e2d2:	3710      	adds	r7, #16
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	bd80      	pop	{r7, pc}
 800e2d8:	20001144 	.word	0x20001144

0800e2dc <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b085      	sub	sp, #20
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e2e4:	687b      	ldr	r3, [r7, #4]
 800e2e6:	3301      	adds	r3, #1
 800e2e8:	781b      	ldrb	r3, [r3, #0]
 800e2ea:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e2ec:	89fb      	ldrh	r3, [r7, #14]
 800e2ee:	021b      	lsls	r3, r3, #8
 800e2f0:	b21a      	sxth	r2, r3
 800e2f2:	687b      	ldr	r3, [r7, #4]
 800e2f4:	781b      	ldrb	r3, [r3, #0]
 800e2f6:	b21b      	sxth	r3, r3
 800e2f8:	4313      	orrs	r3, r2
 800e2fa:	b21b      	sxth	r3, r3
 800e2fc:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e2fe:	89fb      	ldrh	r3, [r7, #14]
}
 800e300:	4618      	mov	r0, r3
 800e302:	3714      	adds	r7, #20
 800e304:	46bd      	mov	sp, r7
 800e306:	bc80      	pop	{r7}
 800e308:	4770      	bx	lr

0800e30a <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e30a:	b480      	push	{r7}
 800e30c:	b085      	sub	sp, #20
 800e30e:	af00      	add	r7, sp, #0
 800e310:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e312:	687b      	ldr	r3, [r7, #4]
 800e314:	3303      	adds	r3, #3
 800e316:	781b      	ldrb	r3, [r3, #0]
 800e318:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	021b      	lsls	r3, r3, #8
 800e31e:	687a      	ldr	r2, [r7, #4]
 800e320:	3202      	adds	r2, #2
 800e322:	7812      	ldrb	r2, [r2, #0]
 800e324:	4313      	orrs	r3, r2
 800e326:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	687a      	ldr	r2, [r7, #4]
 800e32e:	3201      	adds	r2, #1
 800e330:	7812      	ldrb	r2, [r2, #0]
 800e332:	4313      	orrs	r3, r2
 800e334:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e336:	68fb      	ldr	r3, [r7, #12]
 800e338:	021b      	lsls	r3, r3, #8
 800e33a:	687a      	ldr	r2, [r7, #4]
 800e33c:	7812      	ldrb	r2, [r2, #0]
 800e33e:	4313      	orrs	r3, r2
 800e340:	60fb      	str	r3, [r7, #12]
	return rv;
 800e342:	68fb      	ldr	r3, [r7, #12]
}
 800e344:	4618      	mov	r0, r3
 800e346:	3714      	adds	r7, #20
 800e348:	46bd      	mov	sp, r7
 800e34a:	bc80      	pop	{r7}
 800e34c:	4770      	bx	lr

0800e34e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e34e:	b480      	push	{r7}
 800e350:	b083      	sub	sp, #12
 800e352:	af00      	add	r7, sp, #0
 800e354:	6078      	str	r0, [r7, #4]
 800e356:	460b      	mov	r3, r1
 800e358:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	1c5a      	adds	r2, r3, #1
 800e35e:	607a      	str	r2, [r7, #4]
 800e360:	887a      	ldrh	r2, [r7, #2]
 800e362:	b2d2      	uxtb	r2, r2
 800e364:	701a      	strb	r2, [r3, #0]
 800e366:	887b      	ldrh	r3, [r7, #2]
 800e368:	0a1b      	lsrs	r3, r3, #8
 800e36a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e36c:	687b      	ldr	r3, [r7, #4]
 800e36e:	1c5a      	adds	r2, r3, #1
 800e370:	607a      	str	r2, [r7, #4]
 800e372:	887a      	ldrh	r2, [r7, #2]
 800e374:	b2d2      	uxtb	r2, r2
 800e376:	701a      	strb	r2, [r3, #0]
}
 800e378:	bf00      	nop
 800e37a:	370c      	adds	r7, #12
 800e37c:	46bd      	mov	sp, r7
 800e37e:	bc80      	pop	{r7}
 800e380:	4770      	bx	lr

0800e382 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e382:	b480      	push	{r7}
 800e384:	b083      	sub	sp, #12
 800e386:	af00      	add	r7, sp, #0
 800e388:	6078      	str	r0, [r7, #4]
 800e38a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e38c:	687b      	ldr	r3, [r7, #4]
 800e38e:	1c5a      	adds	r2, r3, #1
 800e390:	607a      	str	r2, [r7, #4]
 800e392:	683a      	ldr	r2, [r7, #0]
 800e394:	b2d2      	uxtb	r2, r2
 800e396:	701a      	strb	r2, [r3, #0]
 800e398:	683b      	ldr	r3, [r7, #0]
 800e39a:	0a1b      	lsrs	r3, r3, #8
 800e39c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e39e:	687b      	ldr	r3, [r7, #4]
 800e3a0:	1c5a      	adds	r2, r3, #1
 800e3a2:	607a      	str	r2, [r7, #4]
 800e3a4:	683a      	ldr	r2, [r7, #0]
 800e3a6:	b2d2      	uxtb	r2, r2
 800e3a8:	701a      	strb	r2, [r3, #0]
 800e3aa:	683b      	ldr	r3, [r7, #0]
 800e3ac:	0a1b      	lsrs	r3, r3, #8
 800e3ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e3b0:	687b      	ldr	r3, [r7, #4]
 800e3b2:	1c5a      	adds	r2, r3, #1
 800e3b4:	607a      	str	r2, [r7, #4]
 800e3b6:	683a      	ldr	r2, [r7, #0]
 800e3b8:	b2d2      	uxtb	r2, r2
 800e3ba:	701a      	strb	r2, [r3, #0]
 800e3bc:	683b      	ldr	r3, [r7, #0]
 800e3be:	0a1b      	lsrs	r3, r3, #8
 800e3c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e3c2:	687b      	ldr	r3, [r7, #4]
 800e3c4:	1c5a      	adds	r2, r3, #1
 800e3c6:	607a      	str	r2, [r7, #4]
 800e3c8:	683a      	ldr	r2, [r7, #0]
 800e3ca:	b2d2      	uxtb	r2, r2
 800e3cc:	701a      	strb	r2, [r3, #0]
}
 800e3ce:	bf00      	nop
 800e3d0:	370c      	adds	r7, #12
 800e3d2:	46bd      	mov	sp, r7
 800e3d4:	bc80      	pop	{r7}
 800e3d6:	4770      	bx	lr

0800e3d8 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e3d8:	b480      	push	{r7}
 800e3da:	b087      	sub	sp, #28
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	60f8      	str	r0, [r7, #12]
 800e3e0:	60b9      	str	r1, [r7, #8]
 800e3e2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e3e4:	68fb      	ldr	r3, [r7, #12]
 800e3e6:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e3e8:	68bb      	ldr	r3, [r7, #8]
 800e3ea:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e3ec:	687b      	ldr	r3, [r7, #4]
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d00d      	beq.n	800e40e <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e3f2:	693a      	ldr	r2, [r7, #16]
 800e3f4:	1c53      	adds	r3, r2, #1
 800e3f6:	613b      	str	r3, [r7, #16]
 800e3f8:	697b      	ldr	r3, [r7, #20]
 800e3fa:	1c59      	adds	r1, r3, #1
 800e3fc:	6179      	str	r1, [r7, #20]
 800e3fe:	7812      	ldrb	r2, [r2, #0]
 800e400:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	3b01      	subs	r3, #1
 800e406:	607b      	str	r3, [r7, #4]
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	2b00      	cmp	r3, #0
 800e40c:	d1f1      	bne.n	800e3f2 <mem_cpy+0x1a>
	}
}
 800e40e:	bf00      	nop
 800e410:	371c      	adds	r7, #28
 800e412:	46bd      	mov	sp, r7
 800e414:	bc80      	pop	{r7}
 800e416:	4770      	bx	lr

0800e418 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e418:	b480      	push	{r7}
 800e41a:	b087      	sub	sp, #28
 800e41c:	af00      	add	r7, sp, #0
 800e41e:	60f8      	str	r0, [r7, #12]
 800e420:	60b9      	str	r1, [r7, #8]
 800e422:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e428:	697b      	ldr	r3, [r7, #20]
 800e42a:	1c5a      	adds	r2, r3, #1
 800e42c:	617a      	str	r2, [r7, #20]
 800e42e:	68ba      	ldr	r2, [r7, #8]
 800e430:	b2d2      	uxtb	r2, r2
 800e432:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e434:	687b      	ldr	r3, [r7, #4]
 800e436:	3b01      	subs	r3, #1
 800e438:	607b      	str	r3, [r7, #4]
 800e43a:	687b      	ldr	r3, [r7, #4]
 800e43c:	2b00      	cmp	r3, #0
 800e43e:	d1f3      	bne.n	800e428 <mem_set+0x10>
}
 800e440:	bf00      	nop
 800e442:	bf00      	nop
 800e444:	371c      	adds	r7, #28
 800e446:	46bd      	mov	sp, r7
 800e448:	bc80      	pop	{r7}
 800e44a:	4770      	bx	lr

0800e44c <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e44c:	b480      	push	{r7}
 800e44e:	b089      	sub	sp, #36	; 0x24
 800e450:	af00      	add	r7, sp, #0
 800e452:	60f8      	str	r0, [r7, #12]
 800e454:	60b9      	str	r1, [r7, #8]
 800e456:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	61fb      	str	r3, [r7, #28]
 800e45c:	68bb      	ldr	r3, [r7, #8]
 800e45e:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e460:	2300      	movs	r3, #0
 800e462:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e464:	69fb      	ldr	r3, [r7, #28]
 800e466:	1c5a      	adds	r2, r3, #1
 800e468:	61fa      	str	r2, [r7, #28]
 800e46a:	781b      	ldrb	r3, [r3, #0]
 800e46c:	4619      	mov	r1, r3
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	1c5a      	adds	r2, r3, #1
 800e472:	61ba      	str	r2, [r7, #24]
 800e474:	781b      	ldrb	r3, [r3, #0]
 800e476:	1acb      	subs	r3, r1, r3
 800e478:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	3b01      	subs	r3, #1
 800e47e:	607b      	str	r3, [r7, #4]
 800e480:	687b      	ldr	r3, [r7, #4]
 800e482:	2b00      	cmp	r3, #0
 800e484:	d002      	beq.n	800e48c <mem_cmp+0x40>
 800e486:	697b      	ldr	r3, [r7, #20]
 800e488:	2b00      	cmp	r3, #0
 800e48a:	d0eb      	beq.n	800e464 <mem_cmp+0x18>

	return r;
 800e48c:	697b      	ldr	r3, [r7, #20]
}
 800e48e:	4618      	mov	r0, r3
 800e490:	3724      	adds	r7, #36	; 0x24
 800e492:	46bd      	mov	sp, r7
 800e494:	bc80      	pop	{r7}
 800e496:	4770      	bx	lr

0800e498 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e498:	b480      	push	{r7}
 800e49a:	b083      	sub	sp, #12
 800e49c:	af00      	add	r7, sp, #0
 800e49e:	6078      	str	r0, [r7, #4]
 800e4a0:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e4a2:	e002      	b.n	800e4aa <chk_chr+0x12>
 800e4a4:	687b      	ldr	r3, [r7, #4]
 800e4a6:	3301      	adds	r3, #1
 800e4a8:	607b      	str	r3, [r7, #4]
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	781b      	ldrb	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d005      	beq.n	800e4be <chk_chr+0x26>
 800e4b2:	687b      	ldr	r3, [r7, #4]
 800e4b4:	781b      	ldrb	r3, [r3, #0]
 800e4b6:	461a      	mov	r2, r3
 800e4b8:	683b      	ldr	r3, [r7, #0]
 800e4ba:	4293      	cmp	r3, r2
 800e4bc:	d1f2      	bne.n	800e4a4 <chk_chr+0xc>
	return *str;
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	781b      	ldrb	r3, [r3, #0]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	370c      	adds	r7, #12
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bc80      	pop	{r7}
 800e4ca:	4770      	bx	lr

0800e4cc <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e4cc:	b480      	push	{r7}
 800e4ce:	b085      	sub	sp, #20
 800e4d0:	af00      	add	r7, sp, #0
 800e4d2:	6078      	str	r0, [r7, #4]
 800e4d4:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	60bb      	str	r3, [r7, #8]
 800e4da:	68bb      	ldr	r3, [r7, #8]
 800e4dc:	60fb      	str	r3, [r7, #12]
 800e4de:	e029      	b.n	800e534 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e4e0:	4a26      	ldr	r2, [pc, #152]	; (800e57c <chk_lock+0xb0>)
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	011b      	lsls	r3, r3, #4
 800e4e6:	4413      	add	r3, r2
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	2b00      	cmp	r3, #0
 800e4ec:	d01d      	beq.n	800e52a <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e4ee:	4a23      	ldr	r2, [pc, #140]	; (800e57c <chk_lock+0xb0>)
 800e4f0:	68fb      	ldr	r3, [r7, #12]
 800e4f2:	011b      	lsls	r3, r3, #4
 800e4f4:	4413      	add	r3, r2
 800e4f6:	681a      	ldr	r2, [r3, #0]
 800e4f8:	687b      	ldr	r3, [r7, #4]
 800e4fa:	681b      	ldr	r3, [r3, #0]
 800e4fc:	429a      	cmp	r2, r3
 800e4fe:	d116      	bne.n	800e52e <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e500:	4a1e      	ldr	r2, [pc, #120]	; (800e57c <chk_lock+0xb0>)
 800e502:	68fb      	ldr	r3, [r7, #12]
 800e504:	011b      	lsls	r3, r3, #4
 800e506:	4413      	add	r3, r2
 800e508:	3304      	adds	r3, #4
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e510:	429a      	cmp	r2, r3
 800e512:	d10c      	bne.n	800e52e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e514:	4a19      	ldr	r2, [pc, #100]	; (800e57c <chk_lock+0xb0>)
 800e516:	68fb      	ldr	r3, [r7, #12]
 800e518:	011b      	lsls	r3, r3, #4
 800e51a:	4413      	add	r3, r2
 800e51c:	3308      	adds	r3, #8
 800e51e:	681a      	ldr	r2, [r3, #0]
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e524:	429a      	cmp	r2, r3
 800e526:	d102      	bne.n	800e52e <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e528:	e007      	b.n	800e53a <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e52a:	2301      	movs	r3, #1
 800e52c:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e52e:	68fb      	ldr	r3, [r7, #12]
 800e530:	3301      	adds	r3, #1
 800e532:	60fb      	str	r3, [r7, #12]
 800e534:	68fb      	ldr	r3, [r7, #12]
 800e536:	2b01      	cmp	r3, #1
 800e538:	d9d2      	bls.n	800e4e0 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e53a:	68fb      	ldr	r3, [r7, #12]
 800e53c:	2b02      	cmp	r3, #2
 800e53e:	d109      	bne.n	800e554 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e540:	68bb      	ldr	r3, [r7, #8]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d102      	bne.n	800e54c <chk_lock+0x80>
 800e546:	683b      	ldr	r3, [r7, #0]
 800e548:	2b02      	cmp	r3, #2
 800e54a:	d101      	bne.n	800e550 <chk_lock+0x84>
 800e54c:	2300      	movs	r3, #0
 800e54e:	e010      	b.n	800e572 <chk_lock+0xa6>
 800e550:	2312      	movs	r3, #18
 800e552:	e00e      	b.n	800e572 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e554:	683b      	ldr	r3, [r7, #0]
 800e556:	2b00      	cmp	r3, #0
 800e558:	d108      	bne.n	800e56c <chk_lock+0xa0>
 800e55a:	4a08      	ldr	r2, [pc, #32]	; (800e57c <chk_lock+0xb0>)
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	011b      	lsls	r3, r3, #4
 800e560:	4413      	add	r3, r2
 800e562:	330c      	adds	r3, #12
 800e564:	881b      	ldrh	r3, [r3, #0]
 800e566:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e56a:	d101      	bne.n	800e570 <chk_lock+0xa4>
 800e56c:	2310      	movs	r3, #16
 800e56e:	e000      	b.n	800e572 <chk_lock+0xa6>
 800e570:	2300      	movs	r3, #0
}
 800e572:	4618      	mov	r0, r3
 800e574:	3714      	adds	r7, #20
 800e576:	46bd      	mov	sp, r7
 800e578:	bc80      	pop	{r7}
 800e57a:	4770      	bx	lr
 800e57c:	20000f24 	.word	0x20000f24

0800e580 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e580:	b480      	push	{r7}
 800e582:	b083      	sub	sp, #12
 800e584:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e586:	2300      	movs	r3, #0
 800e588:	607b      	str	r3, [r7, #4]
 800e58a:	e002      	b.n	800e592 <enq_lock+0x12>
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	3301      	adds	r3, #1
 800e590:	607b      	str	r3, [r7, #4]
 800e592:	687b      	ldr	r3, [r7, #4]
 800e594:	2b01      	cmp	r3, #1
 800e596:	d806      	bhi.n	800e5a6 <enq_lock+0x26>
 800e598:	4a08      	ldr	r2, [pc, #32]	; (800e5bc <enq_lock+0x3c>)
 800e59a:	687b      	ldr	r3, [r7, #4]
 800e59c:	011b      	lsls	r3, r3, #4
 800e59e:	4413      	add	r3, r2
 800e5a0:	681b      	ldr	r3, [r3, #0]
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d1f2      	bne.n	800e58c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e5a6:	687b      	ldr	r3, [r7, #4]
 800e5a8:	2b02      	cmp	r3, #2
 800e5aa:	bf14      	ite	ne
 800e5ac:	2301      	movne	r3, #1
 800e5ae:	2300      	moveq	r3, #0
 800e5b0:	b2db      	uxtb	r3, r3
}
 800e5b2:	4618      	mov	r0, r3
 800e5b4:	370c      	adds	r7, #12
 800e5b6:	46bd      	mov	sp, r7
 800e5b8:	bc80      	pop	{r7}
 800e5ba:	4770      	bx	lr
 800e5bc:	20000f24 	.word	0x20000f24

0800e5c0 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e5c0:	b480      	push	{r7}
 800e5c2:	b085      	sub	sp, #20
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	60fb      	str	r3, [r7, #12]
 800e5ce:	e01f      	b.n	800e610 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e5d0:	4a41      	ldr	r2, [pc, #260]	; (800e6d8 <inc_lock+0x118>)
 800e5d2:	68fb      	ldr	r3, [r7, #12]
 800e5d4:	011b      	lsls	r3, r3, #4
 800e5d6:	4413      	add	r3, r2
 800e5d8:	681a      	ldr	r2, [r3, #0]
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	681b      	ldr	r3, [r3, #0]
 800e5de:	429a      	cmp	r2, r3
 800e5e0:	d113      	bne.n	800e60a <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e5e2:	4a3d      	ldr	r2, [pc, #244]	; (800e6d8 <inc_lock+0x118>)
 800e5e4:	68fb      	ldr	r3, [r7, #12]
 800e5e6:	011b      	lsls	r3, r3, #4
 800e5e8:	4413      	add	r3, r2
 800e5ea:	3304      	adds	r3, #4
 800e5ec:	681a      	ldr	r2, [r3, #0]
 800e5ee:	687b      	ldr	r3, [r7, #4]
 800e5f0:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e5f2:	429a      	cmp	r2, r3
 800e5f4:	d109      	bne.n	800e60a <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e5f6:	4a38      	ldr	r2, [pc, #224]	; (800e6d8 <inc_lock+0x118>)
 800e5f8:	68fb      	ldr	r3, [r7, #12]
 800e5fa:	011b      	lsls	r3, r3, #4
 800e5fc:	4413      	add	r3, r2
 800e5fe:	3308      	adds	r3, #8
 800e600:	681a      	ldr	r2, [r3, #0]
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e606:	429a      	cmp	r2, r3
 800e608:	d006      	beq.n	800e618 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e60a:	68fb      	ldr	r3, [r7, #12]
 800e60c:	3301      	adds	r3, #1
 800e60e:	60fb      	str	r3, [r7, #12]
 800e610:	68fb      	ldr	r3, [r7, #12]
 800e612:	2b01      	cmp	r3, #1
 800e614:	d9dc      	bls.n	800e5d0 <inc_lock+0x10>
 800e616:	e000      	b.n	800e61a <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e618:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e61a:	68fb      	ldr	r3, [r7, #12]
 800e61c:	2b02      	cmp	r3, #2
 800e61e:	d132      	bne.n	800e686 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e620:	2300      	movs	r3, #0
 800e622:	60fb      	str	r3, [r7, #12]
 800e624:	e002      	b.n	800e62c <inc_lock+0x6c>
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	3301      	adds	r3, #1
 800e62a:	60fb      	str	r3, [r7, #12]
 800e62c:	68fb      	ldr	r3, [r7, #12]
 800e62e:	2b01      	cmp	r3, #1
 800e630:	d806      	bhi.n	800e640 <inc_lock+0x80>
 800e632:	4a29      	ldr	r2, [pc, #164]	; (800e6d8 <inc_lock+0x118>)
 800e634:	68fb      	ldr	r3, [r7, #12]
 800e636:	011b      	lsls	r3, r3, #4
 800e638:	4413      	add	r3, r2
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d1f2      	bne.n	800e626 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e640:	68fb      	ldr	r3, [r7, #12]
 800e642:	2b02      	cmp	r3, #2
 800e644:	d101      	bne.n	800e64a <inc_lock+0x8a>
 800e646:	2300      	movs	r3, #0
 800e648:	e040      	b.n	800e6cc <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e64a:	687b      	ldr	r3, [r7, #4]
 800e64c:	681a      	ldr	r2, [r3, #0]
 800e64e:	4922      	ldr	r1, [pc, #136]	; (800e6d8 <inc_lock+0x118>)
 800e650:	68fb      	ldr	r3, [r7, #12]
 800e652:	011b      	lsls	r3, r3, #4
 800e654:	440b      	add	r3, r1
 800e656:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e658:	687b      	ldr	r3, [r7, #4]
 800e65a:	689a      	ldr	r2, [r3, #8]
 800e65c:	491e      	ldr	r1, [pc, #120]	; (800e6d8 <inc_lock+0x118>)
 800e65e:	68fb      	ldr	r3, [r7, #12]
 800e660:	011b      	lsls	r3, r3, #4
 800e662:	440b      	add	r3, r1
 800e664:	3304      	adds	r3, #4
 800e666:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e668:	687b      	ldr	r3, [r7, #4]
 800e66a:	695a      	ldr	r2, [r3, #20]
 800e66c:	491a      	ldr	r1, [pc, #104]	; (800e6d8 <inc_lock+0x118>)
 800e66e:	68fb      	ldr	r3, [r7, #12]
 800e670:	011b      	lsls	r3, r3, #4
 800e672:	440b      	add	r3, r1
 800e674:	3308      	adds	r3, #8
 800e676:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e678:	4a17      	ldr	r2, [pc, #92]	; (800e6d8 <inc_lock+0x118>)
 800e67a:	68fb      	ldr	r3, [r7, #12]
 800e67c:	011b      	lsls	r3, r3, #4
 800e67e:	4413      	add	r3, r2
 800e680:	330c      	adds	r3, #12
 800e682:	2200      	movs	r2, #0
 800e684:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e686:	683b      	ldr	r3, [r7, #0]
 800e688:	2b00      	cmp	r3, #0
 800e68a:	d009      	beq.n	800e6a0 <inc_lock+0xe0>
 800e68c:	4a12      	ldr	r2, [pc, #72]	; (800e6d8 <inc_lock+0x118>)
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	011b      	lsls	r3, r3, #4
 800e692:	4413      	add	r3, r2
 800e694:	330c      	adds	r3, #12
 800e696:	881b      	ldrh	r3, [r3, #0]
 800e698:	2b00      	cmp	r3, #0
 800e69a:	d001      	beq.n	800e6a0 <inc_lock+0xe0>
 800e69c:	2300      	movs	r3, #0
 800e69e:	e015      	b.n	800e6cc <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	2b00      	cmp	r3, #0
 800e6a4:	d108      	bne.n	800e6b8 <inc_lock+0xf8>
 800e6a6:	4a0c      	ldr	r2, [pc, #48]	; (800e6d8 <inc_lock+0x118>)
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	011b      	lsls	r3, r3, #4
 800e6ac:	4413      	add	r3, r2
 800e6ae:	330c      	adds	r3, #12
 800e6b0:	881b      	ldrh	r3, [r3, #0]
 800e6b2:	3301      	adds	r3, #1
 800e6b4:	b29a      	uxth	r2, r3
 800e6b6:	e001      	b.n	800e6bc <inc_lock+0xfc>
 800e6b8:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e6bc:	4906      	ldr	r1, [pc, #24]	; (800e6d8 <inc_lock+0x118>)
 800e6be:	68fb      	ldr	r3, [r7, #12]
 800e6c0:	011b      	lsls	r3, r3, #4
 800e6c2:	440b      	add	r3, r1
 800e6c4:	330c      	adds	r3, #12
 800e6c6:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e6c8:	68fb      	ldr	r3, [r7, #12]
 800e6ca:	3301      	adds	r3, #1
}
 800e6cc:	4618      	mov	r0, r3
 800e6ce:	3714      	adds	r7, #20
 800e6d0:	46bd      	mov	sp, r7
 800e6d2:	bc80      	pop	{r7}
 800e6d4:	4770      	bx	lr
 800e6d6:	bf00      	nop
 800e6d8:	20000f24 	.word	0x20000f24

0800e6dc <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e6dc:	b480      	push	{r7}
 800e6de:	b085      	sub	sp, #20
 800e6e0:	af00      	add	r7, sp, #0
 800e6e2:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	3b01      	subs	r3, #1
 800e6e8:	607b      	str	r3, [r7, #4]
 800e6ea:	687b      	ldr	r3, [r7, #4]
 800e6ec:	2b01      	cmp	r3, #1
 800e6ee:	d825      	bhi.n	800e73c <dec_lock+0x60>
		n = Files[i].ctr;
 800e6f0:	4a16      	ldr	r2, [pc, #88]	; (800e74c <dec_lock+0x70>)
 800e6f2:	687b      	ldr	r3, [r7, #4]
 800e6f4:	011b      	lsls	r3, r3, #4
 800e6f6:	4413      	add	r3, r2
 800e6f8:	330c      	adds	r3, #12
 800e6fa:	881b      	ldrh	r3, [r3, #0]
 800e6fc:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e6fe:	89fb      	ldrh	r3, [r7, #14]
 800e700:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e704:	d101      	bne.n	800e70a <dec_lock+0x2e>
 800e706:	2300      	movs	r3, #0
 800e708:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e70a:	89fb      	ldrh	r3, [r7, #14]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d002      	beq.n	800e716 <dec_lock+0x3a>
 800e710:	89fb      	ldrh	r3, [r7, #14]
 800e712:	3b01      	subs	r3, #1
 800e714:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e716:	4a0d      	ldr	r2, [pc, #52]	; (800e74c <dec_lock+0x70>)
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	011b      	lsls	r3, r3, #4
 800e71c:	4413      	add	r3, r2
 800e71e:	330c      	adds	r3, #12
 800e720:	89fa      	ldrh	r2, [r7, #14]
 800e722:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e724:	89fb      	ldrh	r3, [r7, #14]
 800e726:	2b00      	cmp	r3, #0
 800e728:	d105      	bne.n	800e736 <dec_lock+0x5a>
 800e72a:	4a08      	ldr	r2, [pc, #32]	; (800e74c <dec_lock+0x70>)
 800e72c:	687b      	ldr	r3, [r7, #4]
 800e72e:	011b      	lsls	r3, r3, #4
 800e730:	4413      	add	r3, r2
 800e732:	2200      	movs	r2, #0
 800e734:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e736:	2300      	movs	r3, #0
 800e738:	737b      	strb	r3, [r7, #13]
 800e73a:	e001      	b.n	800e740 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e73c:	2302      	movs	r3, #2
 800e73e:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e740:	7b7b      	ldrb	r3, [r7, #13]
}
 800e742:	4618      	mov	r0, r3
 800e744:	3714      	adds	r7, #20
 800e746:	46bd      	mov	sp, r7
 800e748:	bc80      	pop	{r7}
 800e74a:	4770      	bx	lr
 800e74c:	20000f24 	.word	0x20000f24

0800e750 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e750:	b480      	push	{r7}
 800e752:	b085      	sub	sp, #20
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e758:	2300      	movs	r3, #0
 800e75a:	60fb      	str	r3, [r7, #12]
 800e75c:	e010      	b.n	800e780 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e75e:	4a0d      	ldr	r2, [pc, #52]	; (800e794 <clear_lock+0x44>)
 800e760:	68fb      	ldr	r3, [r7, #12]
 800e762:	011b      	lsls	r3, r3, #4
 800e764:	4413      	add	r3, r2
 800e766:	681b      	ldr	r3, [r3, #0]
 800e768:	687a      	ldr	r2, [r7, #4]
 800e76a:	429a      	cmp	r2, r3
 800e76c:	d105      	bne.n	800e77a <clear_lock+0x2a>
 800e76e:	4a09      	ldr	r2, [pc, #36]	; (800e794 <clear_lock+0x44>)
 800e770:	68fb      	ldr	r3, [r7, #12]
 800e772:	011b      	lsls	r3, r3, #4
 800e774:	4413      	add	r3, r2
 800e776:	2200      	movs	r2, #0
 800e778:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	3301      	adds	r3, #1
 800e77e:	60fb      	str	r3, [r7, #12]
 800e780:	68fb      	ldr	r3, [r7, #12]
 800e782:	2b01      	cmp	r3, #1
 800e784:	d9eb      	bls.n	800e75e <clear_lock+0xe>
	}
}
 800e786:	bf00      	nop
 800e788:	bf00      	nop
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bc80      	pop	{r7}
 800e790:	4770      	bx	lr
 800e792:	bf00      	nop
 800e794:	20000f24 	.word	0x20000f24

0800e798 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e798:	b580      	push	{r7, lr}
 800e79a:	b086      	sub	sp, #24
 800e79c:	af00      	add	r7, sp, #0
 800e79e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e7a0:	2300      	movs	r3, #0
 800e7a2:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e7a4:	687b      	ldr	r3, [r7, #4]
 800e7a6:	78db      	ldrb	r3, [r3, #3]
 800e7a8:	2b00      	cmp	r3, #0
 800e7aa:	d034      	beq.n	800e816 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7b0:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e7b2:	687b      	ldr	r3, [r7, #4]
 800e7b4:	7858      	ldrb	r0, [r3, #1]
 800e7b6:	687b      	ldr	r3, [r7, #4]
 800e7b8:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e7bc:	2301      	movs	r3, #1
 800e7be:	697a      	ldr	r2, [r7, #20]
 800e7c0:	f7ff fd4e 	bl	800e260 <disk_write>
 800e7c4:	4603      	mov	r3, r0
 800e7c6:	2b00      	cmp	r3, #0
 800e7c8:	d002      	beq.n	800e7d0 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e7ca:	2301      	movs	r3, #1
 800e7cc:	73fb      	strb	r3, [r7, #15]
 800e7ce:	e022      	b.n	800e816 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e7d6:	687b      	ldr	r3, [r7, #4]
 800e7d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e7da:	697a      	ldr	r2, [r7, #20]
 800e7dc:	1ad2      	subs	r2, r2, r3
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	69db      	ldr	r3, [r3, #28]
 800e7e2:	429a      	cmp	r2, r3
 800e7e4:	d217      	bcs.n	800e816 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e7e6:	687b      	ldr	r3, [r7, #4]
 800e7e8:	789b      	ldrb	r3, [r3, #2]
 800e7ea:	613b      	str	r3, [r7, #16]
 800e7ec:	e010      	b.n	800e810 <sync_window+0x78>
					wsect += fs->fsize;
 800e7ee:	687b      	ldr	r3, [r7, #4]
 800e7f0:	69db      	ldr	r3, [r3, #28]
 800e7f2:	697a      	ldr	r2, [r7, #20]
 800e7f4:	4413      	add	r3, r2
 800e7f6:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	7858      	ldrb	r0, [r3, #1]
 800e7fc:	687b      	ldr	r3, [r7, #4]
 800e7fe:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e802:	2301      	movs	r3, #1
 800e804:	697a      	ldr	r2, [r7, #20]
 800e806:	f7ff fd2b 	bl	800e260 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e80a:	693b      	ldr	r3, [r7, #16]
 800e80c:	3b01      	subs	r3, #1
 800e80e:	613b      	str	r3, [r7, #16]
 800e810:	693b      	ldr	r3, [r7, #16]
 800e812:	2b01      	cmp	r3, #1
 800e814:	d8eb      	bhi.n	800e7ee <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e816:	7bfb      	ldrb	r3, [r7, #15]
}
 800e818:	4618      	mov	r0, r3
 800e81a:	3718      	adds	r7, #24
 800e81c:	46bd      	mov	sp, r7
 800e81e:	bd80      	pop	{r7, pc}

0800e820 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b084      	sub	sp, #16
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
 800e828:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e82a:	2300      	movs	r3, #0
 800e82c:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e82e:	687b      	ldr	r3, [r7, #4]
 800e830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e832:	683a      	ldr	r2, [r7, #0]
 800e834:	429a      	cmp	r2, r3
 800e836:	d01b      	beq.n	800e870 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f7ff ffad 	bl	800e798 <sync_window>
 800e83e:	4603      	mov	r3, r0
 800e840:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e842:	7bfb      	ldrb	r3, [r7, #15]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d113      	bne.n	800e870 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e848:	687b      	ldr	r3, [r7, #4]
 800e84a:	7858      	ldrb	r0, [r3, #1]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e852:	2301      	movs	r3, #1
 800e854:	683a      	ldr	r2, [r7, #0]
 800e856:	f7ff fce3 	bl	800e220 <disk_read>
 800e85a:	4603      	mov	r3, r0
 800e85c:	2b00      	cmp	r3, #0
 800e85e:	d004      	beq.n	800e86a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e860:	f04f 33ff 	mov.w	r3, #4294967295
 800e864:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e866:	2301      	movs	r3, #1
 800e868:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e86a:	687b      	ldr	r3, [r7, #4]
 800e86c:	683a      	ldr	r2, [r7, #0]
 800e86e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e870:	7bfb      	ldrb	r3, [r7, #15]
}
 800e872:	4618      	mov	r0, r3
 800e874:	3710      	adds	r7, #16
 800e876:	46bd      	mov	sp, r7
 800e878:	bd80      	pop	{r7, pc}
	...

0800e87c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e87c:	b580      	push	{r7, lr}
 800e87e:	b084      	sub	sp, #16
 800e880:	af00      	add	r7, sp, #0
 800e882:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e884:	6878      	ldr	r0, [r7, #4]
 800e886:	f7ff ff87 	bl	800e798 <sync_window>
 800e88a:	4603      	mov	r3, r0
 800e88c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e88e:	7bfb      	ldrb	r3, [r7, #15]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d158      	bne.n	800e946 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e894:	687b      	ldr	r3, [r7, #4]
 800e896:	781b      	ldrb	r3, [r3, #0]
 800e898:	2b03      	cmp	r3, #3
 800e89a:	d148      	bne.n	800e92e <sync_fs+0xb2>
 800e89c:	687b      	ldr	r3, [r7, #4]
 800e89e:	791b      	ldrb	r3, [r3, #4]
 800e8a0:	2b01      	cmp	r3, #1
 800e8a2:	d144      	bne.n	800e92e <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e8a4:	687b      	ldr	r3, [r7, #4]
 800e8a6:	3334      	adds	r3, #52	; 0x34
 800e8a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e8ac:	2100      	movs	r1, #0
 800e8ae:	4618      	mov	r0, r3
 800e8b0:	f7ff fdb2 	bl	800e418 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	3334      	adds	r3, #52	; 0x34
 800e8b8:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e8bc:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e8c0:	4618      	mov	r0, r3
 800e8c2:	f7ff fd44 	bl	800e34e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e8c6:	687b      	ldr	r3, [r7, #4]
 800e8c8:	3334      	adds	r3, #52	; 0x34
 800e8ca:	4921      	ldr	r1, [pc, #132]	; (800e950 <sync_fs+0xd4>)
 800e8cc:	4618      	mov	r0, r3
 800e8ce:	f7ff fd58 	bl	800e382 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e8d2:	687b      	ldr	r3, [r7, #4]
 800e8d4:	3334      	adds	r3, #52	; 0x34
 800e8d6:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e8da:	491e      	ldr	r1, [pc, #120]	; (800e954 <sync_fs+0xd8>)
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f7ff fd50 	bl	800e382 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e8e2:	687b      	ldr	r3, [r7, #4]
 800e8e4:	3334      	adds	r3, #52	; 0x34
 800e8e6:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e8ea:	687b      	ldr	r3, [r7, #4]
 800e8ec:	695b      	ldr	r3, [r3, #20]
 800e8ee:	4619      	mov	r1, r3
 800e8f0:	4610      	mov	r0, r2
 800e8f2:	f7ff fd46 	bl	800e382 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e8f6:	687b      	ldr	r3, [r7, #4]
 800e8f8:	3334      	adds	r3, #52	; 0x34
 800e8fa:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	691b      	ldr	r3, [r3, #16]
 800e902:	4619      	mov	r1, r3
 800e904:	4610      	mov	r0, r2
 800e906:	f7ff fd3c 	bl	800e382 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	6a1b      	ldr	r3, [r3, #32]
 800e90e:	1c5a      	adds	r2, r3, #1
 800e910:	687b      	ldr	r3, [r7, #4]
 800e912:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	7858      	ldrb	r0, [r3, #1]
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e922:	2301      	movs	r3, #1
 800e924:	f7ff fc9c 	bl	800e260 <disk_write>
			fs->fsi_flag = 0;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	2200      	movs	r2, #0
 800e92c:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	785b      	ldrb	r3, [r3, #1]
 800e932:	2200      	movs	r2, #0
 800e934:	2100      	movs	r1, #0
 800e936:	4618      	mov	r0, r3
 800e938:	f7ff fcb2 	bl	800e2a0 <disk_ioctl>
 800e93c:	4603      	mov	r3, r0
 800e93e:	2b00      	cmp	r3, #0
 800e940:	d001      	beq.n	800e946 <sync_fs+0xca>
 800e942:	2301      	movs	r3, #1
 800e944:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e946:	7bfb      	ldrb	r3, [r7, #15]
}
 800e948:	4618      	mov	r0, r3
 800e94a:	3710      	adds	r7, #16
 800e94c:	46bd      	mov	sp, r7
 800e94e:	bd80      	pop	{r7, pc}
 800e950:	41615252 	.word	0x41615252
 800e954:	61417272 	.word	0x61417272

0800e958 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e958:	b480      	push	{r7}
 800e95a:	b083      	sub	sp, #12
 800e95c:	af00      	add	r7, sp, #0
 800e95e:	6078      	str	r0, [r7, #4]
 800e960:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e962:	683b      	ldr	r3, [r7, #0]
 800e964:	3b02      	subs	r3, #2
 800e966:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e968:	687b      	ldr	r3, [r7, #4]
 800e96a:	699b      	ldr	r3, [r3, #24]
 800e96c:	3b02      	subs	r3, #2
 800e96e:	683a      	ldr	r2, [r7, #0]
 800e970:	429a      	cmp	r2, r3
 800e972:	d301      	bcc.n	800e978 <clust2sect+0x20>
 800e974:	2300      	movs	r3, #0
 800e976:	e008      	b.n	800e98a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	895b      	ldrh	r3, [r3, #10]
 800e97c:	461a      	mov	r2, r3
 800e97e:	683b      	ldr	r3, [r7, #0]
 800e980:	fb03 f202 	mul.w	r2, r3, r2
 800e984:	687b      	ldr	r3, [r7, #4]
 800e986:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e988:	4413      	add	r3, r2
}
 800e98a:	4618      	mov	r0, r3
 800e98c:	370c      	adds	r7, #12
 800e98e:	46bd      	mov	sp, r7
 800e990:	bc80      	pop	{r7}
 800e992:	4770      	bx	lr

0800e994 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e994:	b580      	push	{r7, lr}
 800e996:	b086      	sub	sp, #24
 800e998:	af00      	add	r7, sp, #0
 800e99a:	6078      	str	r0, [r7, #4]
 800e99c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e99e:	687b      	ldr	r3, [r7, #4]
 800e9a0:	681b      	ldr	r3, [r3, #0]
 800e9a2:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e9a4:	683b      	ldr	r3, [r7, #0]
 800e9a6:	2b01      	cmp	r3, #1
 800e9a8:	d904      	bls.n	800e9b4 <get_fat+0x20>
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	699b      	ldr	r3, [r3, #24]
 800e9ae:	683a      	ldr	r2, [r7, #0]
 800e9b0:	429a      	cmp	r2, r3
 800e9b2:	d302      	bcc.n	800e9ba <get_fat+0x26>
		val = 1;	/* Internal error */
 800e9b4:	2301      	movs	r3, #1
 800e9b6:	617b      	str	r3, [r7, #20]
 800e9b8:	e08f      	b.n	800eada <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e9ba:	f04f 33ff 	mov.w	r3, #4294967295
 800e9be:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e9c0:	693b      	ldr	r3, [r7, #16]
 800e9c2:	781b      	ldrb	r3, [r3, #0]
 800e9c4:	2b03      	cmp	r3, #3
 800e9c6:	d062      	beq.n	800ea8e <get_fat+0xfa>
 800e9c8:	2b03      	cmp	r3, #3
 800e9ca:	dc7c      	bgt.n	800eac6 <get_fat+0x132>
 800e9cc:	2b01      	cmp	r3, #1
 800e9ce:	d002      	beq.n	800e9d6 <get_fat+0x42>
 800e9d0:	2b02      	cmp	r3, #2
 800e9d2:	d042      	beq.n	800ea5a <get_fat+0xc6>
 800e9d4:	e077      	b.n	800eac6 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e9d6:	683b      	ldr	r3, [r7, #0]
 800e9d8:	60fb      	str	r3, [r7, #12]
 800e9da:	68fb      	ldr	r3, [r7, #12]
 800e9dc:	085b      	lsrs	r3, r3, #1
 800e9de:	68fa      	ldr	r2, [r7, #12]
 800e9e0:	4413      	add	r3, r2
 800e9e2:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e9e4:	693b      	ldr	r3, [r7, #16]
 800e9e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9e8:	68fb      	ldr	r3, [r7, #12]
 800e9ea:	0a5b      	lsrs	r3, r3, #9
 800e9ec:	4413      	add	r3, r2
 800e9ee:	4619      	mov	r1, r3
 800e9f0:	6938      	ldr	r0, [r7, #16]
 800e9f2:	f7ff ff15 	bl	800e820 <move_window>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2b00      	cmp	r3, #0
 800e9fa:	d167      	bne.n	800eacc <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e9fc:	68fb      	ldr	r3, [r7, #12]
 800e9fe:	1c5a      	adds	r2, r3, #1
 800ea00:	60fa      	str	r2, [r7, #12]
 800ea02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea06:	693a      	ldr	r2, [r7, #16]
 800ea08:	4413      	add	r3, r2
 800ea0a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea0e:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ea10:	693b      	ldr	r3, [r7, #16]
 800ea12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	0a5b      	lsrs	r3, r3, #9
 800ea18:	4413      	add	r3, r2
 800ea1a:	4619      	mov	r1, r3
 800ea1c:	6938      	ldr	r0, [r7, #16]
 800ea1e:	f7ff feff 	bl	800e820 <move_window>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b00      	cmp	r3, #0
 800ea26:	d153      	bne.n	800ead0 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ea2e:	693a      	ldr	r2, [r7, #16]
 800ea30:	4413      	add	r3, r2
 800ea32:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ea36:	021b      	lsls	r3, r3, #8
 800ea38:	461a      	mov	r2, r3
 800ea3a:	68bb      	ldr	r3, [r7, #8]
 800ea3c:	4313      	orrs	r3, r2
 800ea3e:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800ea40:	683b      	ldr	r3, [r7, #0]
 800ea42:	f003 0301 	and.w	r3, r3, #1
 800ea46:	2b00      	cmp	r3, #0
 800ea48:	d002      	beq.n	800ea50 <get_fat+0xbc>
 800ea4a:	68bb      	ldr	r3, [r7, #8]
 800ea4c:	091b      	lsrs	r3, r3, #4
 800ea4e:	e002      	b.n	800ea56 <get_fat+0xc2>
 800ea50:	68bb      	ldr	r3, [r7, #8]
 800ea52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ea56:	617b      	str	r3, [r7, #20]
			break;
 800ea58:	e03f      	b.n	800eada <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ea5a:	693b      	ldr	r3, [r7, #16]
 800ea5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea5e:	683b      	ldr	r3, [r7, #0]
 800ea60:	0a1b      	lsrs	r3, r3, #8
 800ea62:	4413      	add	r3, r2
 800ea64:	4619      	mov	r1, r3
 800ea66:	6938      	ldr	r0, [r7, #16]
 800ea68:	f7ff feda 	bl	800e820 <move_window>
 800ea6c:	4603      	mov	r3, r0
 800ea6e:	2b00      	cmp	r3, #0
 800ea70:	d130      	bne.n	800ead4 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800ea72:	693b      	ldr	r3, [r7, #16]
 800ea74:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea78:	683b      	ldr	r3, [r7, #0]
 800ea7a:	005b      	lsls	r3, r3, #1
 800ea7c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ea80:	4413      	add	r3, r2
 800ea82:	4618      	mov	r0, r3
 800ea84:	f7ff fc2a 	bl	800e2dc <ld_word>
 800ea88:	4603      	mov	r3, r0
 800ea8a:	617b      	str	r3, [r7, #20]
			break;
 800ea8c:	e025      	b.n	800eada <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ea8e:	693b      	ldr	r3, [r7, #16]
 800ea90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ea92:	683b      	ldr	r3, [r7, #0]
 800ea94:	09db      	lsrs	r3, r3, #7
 800ea96:	4413      	add	r3, r2
 800ea98:	4619      	mov	r1, r3
 800ea9a:	6938      	ldr	r0, [r7, #16]
 800ea9c:	f7ff fec0 	bl	800e820 <move_window>
 800eaa0:	4603      	mov	r3, r0
 800eaa2:	2b00      	cmp	r3, #0
 800eaa4:	d118      	bne.n	800ead8 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800eaa6:	693b      	ldr	r3, [r7, #16]
 800eaa8:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eaac:	683b      	ldr	r3, [r7, #0]
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800eab4:	4413      	add	r3, r2
 800eab6:	4618      	mov	r0, r3
 800eab8:	f7ff fc27 	bl	800e30a <ld_dword>
 800eabc:	4603      	mov	r3, r0
 800eabe:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800eac2:	617b      	str	r3, [r7, #20]
			break;
 800eac4:	e009      	b.n	800eada <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800eac6:	2301      	movs	r3, #1
 800eac8:	617b      	str	r3, [r7, #20]
 800eaca:	e006      	b.n	800eada <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800eacc:	bf00      	nop
 800eace:	e004      	b.n	800eada <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800ead0:	bf00      	nop
 800ead2:	e002      	b.n	800eada <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800ead4:	bf00      	nop
 800ead6:	e000      	b.n	800eada <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800ead8:	bf00      	nop
		}
	}

	return val;
 800eada:	697b      	ldr	r3, [r7, #20]
}
 800eadc:	4618      	mov	r0, r3
 800eade:	3718      	adds	r7, #24
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}

0800eae4 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800eae4:	b590      	push	{r4, r7, lr}
 800eae6:	b089      	sub	sp, #36	; 0x24
 800eae8:	af00      	add	r7, sp, #0
 800eaea:	60f8      	str	r0, [r7, #12]
 800eaec:	60b9      	str	r1, [r7, #8]
 800eaee:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800eaf0:	2302      	movs	r3, #2
 800eaf2:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800eaf4:	68bb      	ldr	r3, [r7, #8]
 800eaf6:	2b01      	cmp	r3, #1
 800eaf8:	f240 80d9 	bls.w	800ecae <put_fat+0x1ca>
 800eafc:	68fb      	ldr	r3, [r7, #12]
 800eafe:	699b      	ldr	r3, [r3, #24]
 800eb00:	68ba      	ldr	r2, [r7, #8]
 800eb02:	429a      	cmp	r2, r3
 800eb04:	f080 80d3 	bcs.w	800ecae <put_fat+0x1ca>
		switch (fs->fs_type) {
 800eb08:	68fb      	ldr	r3, [r7, #12]
 800eb0a:	781b      	ldrb	r3, [r3, #0]
 800eb0c:	2b03      	cmp	r3, #3
 800eb0e:	f000 8096 	beq.w	800ec3e <put_fat+0x15a>
 800eb12:	2b03      	cmp	r3, #3
 800eb14:	f300 80cb 	bgt.w	800ecae <put_fat+0x1ca>
 800eb18:	2b01      	cmp	r3, #1
 800eb1a:	d002      	beq.n	800eb22 <put_fat+0x3e>
 800eb1c:	2b02      	cmp	r3, #2
 800eb1e:	d06e      	beq.n	800ebfe <put_fat+0x11a>
 800eb20:	e0c5      	b.n	800ecae <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800eb22:	68bb      	ldr	r3, [r7, #8]
 800eb24:	61bb      	str	r3, [r7, #24]
 800eb26:	69bb      	ldr	r3, [r7, #24]
 800eb28:	085b      	lsrs	r3, r3, #1
 800eb2a:	69ba      	ldr	r2, [r7, #24]
 800eb2c:	4413      	add	r3, r2
 800eb2e:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb30:	68fb      	ldr	r3, [r7, #12]
 800eb32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb34:	69bb      	ldr	r3, [r7, #24]
 800eb36:	0a5b      	lsrs	r3, r3, #9
 800eb38:	4413      	add	r3, r2
 800eb3a:	4619      	mov	r1, r3
 800eb3c:	68f8      	ldr	r0, [r7, #12]
 800eb3e:	f7ff fe6f 	bl	800e820 <move_window>
 800eb42:	4603      	mov	r3, r0
 800eb44:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800eb46:	7ffb      	ldrb	r3, [r7, #31]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	f040 80a9 	bne.w	800eca0 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800eb4e:	68fb      	ldr	r3, [r7, #12]
 800eb50:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eb54:	69bb      	ldr	r3, [r7, #24]
 800eb56:	1c59      	adds	r1, r3, #1
 800eb58:	61b9      	str	r1, [r7, #24]
 800eb5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800eb5e:	4413      	add	r3, r2
 800eb60:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800eb62:	68bb      	ldr	r3, [r7, #8]
 800eb64:	f003 0301 	and.w	r3, r3, #1
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d00d      	beq.n	800eb88 <put_fat+0xa4>
 800eb6c:	697b      	ldr	r3, [r7, #20]
 800eb6e:	781b      	ldrb	r3, [r3, #0]
 800eb70:	b25b      	sxtb	r3, r3
 800eb72:	f003 030f 	and.w	r3, r3, #15
 800eb76:	b25a      	sxtb	r2, r3
 800eb78:	687b      	ldr	r3, [r7, #4]
 800eb7a:	b2db      	uxtb	r3, r3
 800eb7c:	011b      	lsls	r3, r3, #4
 800eb7e:	b25b      	sxtb	r3, r3
 800eb80:	4313      	orrs	r3, r2
 800eb82:	b25b      	sxtb	r3, r3
 800eb84:	b2db      	uxtb	r3, r3
 800eb86:	e001      	b.n	800eb8c <put_fat+0xa8>
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	b2db      	uxtb	r3, r3
 800eb8c:	697a      	ldr	r2, [r7, #20]
 800eb8e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800eb90:	68fb      	ldr	r3, [r7, #12]
 800eb92:	2201      	movs	r2, #1
 800eb94:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800eb96:	68fb      	ldr	r3, [r7, #12]
 800eb98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800eb9a:	69bb      	ldr	r3, [r7, #24]
 800eb9c:	0a5b      	lsrs	r3, r3, #9
 800eb9e:	4413      	add	r3, r2
 800eba0:	4619      	mov	r1, r3
 800eba2:	68f8      	ldr	r0, [r7, #12]
 800eba4:	f7ff fe3c 	bl	800e820 <move_window>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ebac:	7ffb      	ldrb	r3, [r7, #31]
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d178      	bne.n	800eca4 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ebb8:	69bb      	ldr	r3, [r7, #24]
 800ebba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ebbe:	4413      	add	r3, r2
 800ebc0:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800ebc2:	68bb      	ldr	r3, [r7, #8]
 800ebc4:	f003 0301 	and.w	r3, r3, #1
 800ebc8:	2b00      	cmp	r3, #0
 800ebca:	d003      	beq.n	800ebd4 <put_fat+0xf0>
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	091b      	lsrs	r3, r3, #4
 800ebd0:	b2db      	uxtb	r3, r3
 800ebd2:	e00e      	b.n	800ebf2 <put_fat+0x10e>
 800ebd4:	697b      	ldr	r3, [r7, #20]
 800ebd6:	781b      	ldrb	r3, [r3, #0]
 800ebd8:	b25b      	sxtb	r3, r3
 800ebda:	f023 030f 	bic.w	r3, r3, #15
 800ebde:	b25a      	sxtb	r2, r3
 800ebe0:	687b      	ldr	r3, [r7, #4]
 800ebe2:	0a1b      	lsrs	r3, r3, #8
 800ebe4:	b25b      	sxtb	r3, r3
 800ebe6:	f003 030f 	and.w	r3, r3, #15
 800ebea:	b25b      	sxtb	r3, r3
 800ebec:	4313      	orrs	r3, r2
 800ebee:	b25b      	sxtb	r3, r3
 800ebf0:	b2db      	uxtb	r3, r3
 800ebf2:	697a      	ldr	r2, [r7, #20]
 800ebf4:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	2201      	movs	r2, #1
 800ebfa:	70da      	strb	r2, [r3, #3]
			break;
 800ebfc:	e057      	b.n	800ecae <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec02:	68bb      	ldr	r3, [r7, #8]
 800ec04:	0a1b      	lsrs	r3, r3, #8
 800ec06:	4413      	add	r3, r2
 800ec08:	4619      	mov	r1, r3
 800ec0a:	68f8      	ldr	r0, [r7, #12]
 800ec0c:	f7ff fe08 	bl	800e820 <move_window>
 800ec10:	4603      	mov	r3, r0
 800ec12:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec14:	7ffb      	ldrb	r3, [r7, #31]
 800ec16:	2b00      	cmp	r3, #0
 800ec18:	d146      	bne.n	800eca8 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec20:	68bb      	ldr	r3, [r7, #8]
 800ec22:	005b      	lsls	r3, r3, #1
 800ec24:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800ec28:	4413      	add	r3, r2
 800ec2a:	687a      	ldr	r2, [r7, #4]
 800ec2c:	b292      	uxth	r2, r2
 800ec2e:	4611      	mov	r1, r2
 800ec30:	4618      	mov	r0, r3
 800ec32:	f7ff fb8c 	bl	800e34e <st_word>
			fs->wflag = 1;
 800ec36:	68fb      	ldr	r3, [r7, #12]
 800ec38:	2201      	movs	r2, #1
 800ec3a:	70da      	strb	r2, [r3, #3]
			break;
 800ec3c:	e037      	b.n	800ecae <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800ec3e:	68fb      	ldr	r3, [r7, #12]
 800ec40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ec42:	68bb      	ldr	r3, [r7, #8]
 800ec44:	09db      	lsrs	r3, r3, #7
 800ec46:	4413      	add	r3, r2
 800ec48:	4619      	mov	r1, r3
 800ec4a:	68f8      	ldr	r0, [r7, #12]
 800ec4c:	f7ff fde8 	bl	800e820 <move_window>
 800ec50:	4603      	mov	r3, r0
 800ec52:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800ec54:	7ffb      	ldrb	r3, [r7, #31]
 800ec56:	2b00      	cmp	r3, #0
 800ec58:	d128      	bne.n	800ecac <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ec60:	68fb      	ldr	r3, [r7, #12]
 800ec62:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec66:	68bb      	ldr	r3, [r7, #8]
 800ec68:	009b      	lsls	r3, r3, #2
 800ec6a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ec6e:	4413      	add	r3, r2
 800ec70:	4618      	mov	r0, r3
 800ec72:	f7ff fb4a 	bl	800e30a <ld_dword>
 800ec76:	4603      	mov	r3, r0
 800ec78:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ec7c:	4323      	orrs	r3, r4
 800ec7e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ec80:	68fb      	ldr	r3, [r7, #12]
 800ec82:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ec86:	68bb      	ldr	r3, [r7, #8]
 800ec88:	009b      	lsls	r3, r3, #2
 800ec8a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ec8e:	4413      	add	r3, r2
 800ec90:	6879      	ldr	r1, [r7, #4]
 800ec92:	4618      	mov	r0, r3
 800ec94:	f7ff fb75 	bl	800e382 <st_dword>
			fs->wflag = 1;
 800ec98:	68fb      	ldr	r3, [r7, #12]
 800ec9a:	2201      	movs	r2, #1
 800ec9c:	70da      	strb	r2, [r3, #3]
			break;
 800ec9e:	e006      	b.n	800ecae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eca0:	bf00      	nop
 800eca2:	e004      	b.n	800ecae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eca4:	bf00      	nop
 800eca6:	e002      	b.n	800ecae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800eca8:	bf00      	nop
 800ecaa:	e000      	b.n	800ecae <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ecac:	bf00      	nop
		}
	}
	return res;
 800ecae:	7ffb      	ldrb	r3, [r7, #31]
}
 800ecb0:	4618      	mov	r0, r3
 800ecb2:	3724      	adds	r7, #36	; 0x24
 800ecb4:	46bd      	mov	sp, r7
 800ecb6:	bd90      	pop	{r4, r7, pc}

0800ecb8 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b088      	sub	sp, #32
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	60f8      	str	r0, [r7, #12]
 800ecc0:	60b9      	str	r1, [r7, #8]
 800ecc2:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ecc4:	2300      	movs	r3, #0
 800ecc6:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ecc8:	68fb      	ldr	r3, [r7, #12]
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ecce:	68bb      	ldr	r3, [r7, #8]
 800ecd0:	2b01      	cmp	r3, #1
 800ecd2:	d904      	bls.n	800ecde <remove_chain+0x26>
 800ecd4:	69bb      	ldr	r3, [r7, #24]
 800ecd6:	699b      	ldr	r3, [r3, #24]
 800ecd8:	68ba      	ldr	r2, [r7, #8]
 800ecda:	429a      	cmp	r2, r3
 800ecdc:	d301      	bcc.n	800ece2 <remove_chain+0x2a>
 800ecde:	2302      	movs	r3, #2
 800ece0:	e04b      	b.n	800ed7a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d00c      	beq.n	800ed02 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ece8:	f04f 32ff 	mov.w	r2, #4294967295
 800ecec:	6879      	ldr	r1, [r7, #4]
 800ecee:	69b8      	ldr	r0, [r7, #24]
 800ecf0:	f7ff fef8 	bl	800eae4 <put_fat>
 800ecf4:	4603      	mov	r3, r0
 800ecf6:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ecf8:	7ffb      	ldrb	r3, [r7, #31]
 800ecfa:	2b00      	cmp	r3, #0
 800ecfc:	d001      	beq.n	800ed02 <remove_chain+0x4a>
 800ecfe:	7ffb      	ldrb	r3, [r7, #31]
 800ed00:	e03b      	b.n	800ed7a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800ed02:	68b9      	ldr	r1, [r7, #8]
 800ed04:	68f8      	ldr	r0, [r7, #12]
 800ed06:	f7ff fe45 	bl	800e994 <get_fat>
 800ed0a:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800ed0c:	697b      	ldr	r3, [r7, #20]
 800ed0e:	2b00      	cmp	r3, #0
 800ed10:	d031      	beq.n	800ed76 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800ed12:	697b      	ldr	r3, [r7, #20]
 800ed14:	2b01      	cmp	r3, #1
 800ed16:	d101      	bne.n	800ed1c <remove_chain+0x64>
 800ed18:	2302      	movs	r3, #2
 800ed1a:	e02e      	b.n	800ed7a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800ed1c:	697b      	ldr	r3, [r7, #20]
 800ed1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed22:	d101      	bne.n	800ed28 <remove_chain+0x70>
 800ed24:	2301      	movs	r3, #1
 800ed26:	e028      	b.n	800ed7a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800ed28:	2200      	movs	r2, #0
 800ed2a:	68b9      	ldr	r1, [r7, #8]
 800ed2c:	69b8      	ldr	r0, [r7, #24]
 800ed2e:	f7ff fed9 	bl	800eae4 <put_fat>
 800ed32:	4603      	mov	r3, r0
 800ed34:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ed36:	7ffb      	ldrb	r3, [r7, #31]
 800ed38:	2b00      	cmp	r3, #0
 800ed3a:	d001      	beq.n	800ed40 <remove_chain+0x88>
 800ed3c:	7ffb      	ldrb	r3, [r7, #31]
 800ed3e:	e01c      	b.n	800ed7a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800ed40:	69bb      	ldr	r3, [r7, #24]
 800ed42:	695a      	ldr	r2, [r3, #20]
 800ed44:	69bb      	ldr	r3, [r7, #24]
 800ed46:	699b      	ldr	r3, [r3, #24]
 800ed48:	3b02      	subs	r3, #2
 800ed4a:	429a      	cmp	r2, r3
 800ed4c:	d20b      	bcs.n	800ed66 <remove_chain+0xae>
			fs->free_clst++;
 800ed4e:	69bb      	ldr	r3, [r7, #24]
 800ed50:	695b      	ldr	r3, [r3, #20]
 800ed52:	1c5a      	adds	r2, r3, #1
 800ed54:	69bb      	ldr	r3, [r7, #24]
 800ed56:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800ed58:	69bb      	ldr	r3, [r7, #24]
 800ed5a:	791b      	ldrb	r3, [r3, #4]
 800ed5c:	f043 0301 	orr.w	r3, r3, #1
 800ed60:	b2da      	uxtb	r2, r3
 800ed62:	69bb      	ldr	r3, [r7, #24]
 800ed64:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800ed6a:	69bb      	ldr	r3, [r7, #24]
 800ed6c:	699b      	ldr	r3, [r3, #24]
 800ed6e:	68ba      	ldr	r2, [r7, #8]
 800ed70:	429a      	cmp	r2, r3
 800ed72:	d3c6      	bcc.n	800ed02 <remove_chain+0x4a>
 800ed74:	e000      	b.n	800ed78 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800ed76:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800ed78:	2300      	movs	r3, #0
}
 800ed7a:	4618      	mov	r0, r3
 800ed7c:	3720      	adds	r7, #32
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	bd80      	pop	{r7, pc}

0800ed82 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800ed82:	b580      	push	{r7, lr}
 800ed84:	b088      	sub	sp, #32
 800ed86:	af00      	add	r7, sp, #0
 800ed88:	6078      	str	r0, [r7, #4]
 800ed8a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800ed8c:	687b      	ldr	r3, [r7, #4]
 800ed8e:	681b      	ldr	r3, [r3, #0]
 800ed90:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800ed92:	683b      	ldr	r3, [r7, #0]
 800ed94:	2b00      	cmp	r3, #0
 800ed96:	d10d      	bne.n	800edb4 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800ed98:	693b      	ldr	r3, [r7, #16]
 800ed9a:	691b      	ldr	r3, [r3, #16]
 800ed9c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800ed9e:	69bb      	ldr	r3, [r7, #24]
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d004      	beq.n	800edae <create_chain+0x2c>
 800eda4:	693b      	ldr	r3, [r7, #16]
 800eda6:	699b      	ldr	r3, [r3, #24]
 800eda8:	69ba      	ldr	r2, [r7, #24]
 800edaa:	429a      	cmp	r2, r3
 800edac:	d31b      	bcc.n	800ede6 <create_chain+0x64>
 800edae:	2301      	movs	r3, #1
 800edb0:	61bb      	str	r3, [r7, #24]
 800edb2:	e018      	b.n	800ede6 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800edb4:	6839      	ldr	r1, [r7, #0]
 800edb6:	6878      	ldr	r0, [r7, #4]
 800edb8:	f7ff fdec 	bl	800e994 <get_fat>
 800edbc:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	2b01      	cmp	r3, #1
 800edc2:	d801      	bhi.n	800edc8 <create_chain+0x46>
 800edc4:	2301      	movs	r3, #1
 800edc6:	e070      	b.n	800eeaa <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800edc8:	68fb      	ldr	r3, [r7, #12]
 800edca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800edce:	d101      	bne.n	800edd4 <create_chain+0x52>
 800edd0:	68fb      	ldr	r3, [r7, #12]
 800edd2:	e06a      	b.n	800eeaa <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800edd4:	693b      	ldr	r3, [r7, #16]
 800edd6:	699b      	ldr	r3, [r3, #24]
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	429a      	cmp	r2, r3
 800eddc:	d201      	bcs.n	800ede2 <create_chain+0x60>
 800edde:	68fb      	ldr	r3, [r7, #12]
 800ede0:	e063      	b.n	800eeaa <create_chain+0x128>
		scl = clst;
 800ede2:	683b      	ldr	r3, [r7, #0]
 800ede4:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800ede6:	69bb      	ldr	r3, [r7, #24]
 800ede8:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800edea:	69fb      	ldr	r3, [r7, #28]
 800edec:	3301      	adds	r3, #1
 800edee:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800edf0:	693b      	ldr	r3, [r7, #16]
 800edf2:	699b      	ldr	r3, [r3, #24]
 800edf4:	69fa      	ldr	r2, [r7, #28]
 800edf6:	429a      	cmp	r2, r3
 800edf8:	d307      	bcc.n	800ee0a <create_chain+0x88>
				ncl = 2;
 800edfa:	2302      	movs	r3, #2
 800edfc:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800edfe:	69fa      	ldr	r2, [r7, #28]
 800ee00:	69bb      	ldr	r3, [r7, #24]
 800ee02:	429a      	cmp	r2, r3
 800ee04:	d901      	bls.n	800ee0a <create_chain+0x88>
 800ee06:	2300      	movs	r3, #0
 800ee08:	e04f      	b.n	800eeaa <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ee0a:	69f9      	ldr	r1, [r7, #28]
 800ee0c:	6878      	ldr	r0, [r7, #4]
 800ee0e:	f7ff fdc1 	bl	800e994 <get_fat>
 800ee12:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ee14:	68fb      	ldr	r3, [r7, #12]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d00e      	beq.n	800ee38 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ee1a:	68fb      	ldr	r3, [r7, #12]
 800ee1c:	2b01      	cmp	r3, #1
 800ee1e:	d003      	beq.n	800ee28 <create_chain+0xa6>
 800ee20:	68fb      	ldr	r3, [r7, #12]
 800ee22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee26:	d101      	bne.n	800ee2c <create_chain+0xaa>
 800ee28:	68fb      	ldr	r3, [r7, #12]
 800ee2a:	e03e      	b.n	800eeaa <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ee2c:	69fa      	ldr	r2, [r7, #28]
 800ee2e:	69bb      	ldr	r3, [r7, #24]
 800ee30:	429a      	cmp	r2, r3
 800ee32:	d1da      	bne.n	800edea <create_chain+0x68>
 800ee34:	2300      	movs	r3, #0
 800ee36:	e038      	b.n	800eeaa <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ee38:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ee3a:	f04f 32ff 	mov.w	r2, #4294967295
 800ee3e:	69f9      	ldr	r1, [r7, #28]
 800ee40:	6938      	ldr	r0, [r7, #16]
 800ee42:	f7ff fe4f 	bl	800eae4 <put_fat>
 800ee46:	4603      	mov	r3, r0
 800ee48:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ee4a:	7dfb      	ldrb	r3, [r7, #23]
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d109      	bne.n	800ee64 <create_chain+0xe2>
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d006      	beq.n	800ee64 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ee56:	69fa      	ldr	r2, [r7, #28]
 800ee58:	6839      	ldr	r1, [r7, #0]
 800ee5a:	6938      	ldr	r0, [r7, #16]
 800ee5c:	f7ff fe42 	bl	800eae4 <put_fat>
 800ee60:	4603      	mov	r3, r0
 800ee62:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ee64:	7dfb      	ldrb	r3, [r7, #23]
 800ee66:	2b00      	cmp	r3, #0
 800ee68:	d116      	bne.n	800ee98 <create_chain+0x116>
		fs->last_clst = ncl;
 800ee6a:	693b      	ldr	r3, [r7, #16]
 800ee6c:	69fa      	ldr	r2, [r7, #28]
 800ee6e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ee70:	693b      	ldr	r3, [r7, #16]
 800ee72:	695a      	ldr	r2, [r3, #20]
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	699b      	ldr	r3, [r3, #24]
 800ee78:	3b02      	subs	r3, #2
 800ee7a:	429a      	cmp	r2, r3
 800ee7c:	d804      	bhi.n	800ee88 <create_chain+0x106>
 800ee7e:	693b      	ldr	r3, [r7, #16]
 800ee80:	695b      	ldr	r3, [r3, #20]
 800ee82:	1e5a      	subs	r2, r3, #1
 800ee84:	693b      	ldr	r3, [r7, #16]
 800ee86:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ee88:	693b      	ldr	r3, [r7, #16]
 800ee8a:	791b      	ldrb	r3, [r3, #4]
 800ee8c:	f043 0301 	orr.w	r3, r3, #1
 800ee90:	b2da      	uxtb	r2, r3
 800ee92:	693b      	ldr	r3, [r7, #16]
 800ee94:	711a      	strb	r2, [r3, #4]
 800ee96:	e007      	b.n	800eea8 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ee98:	7dfb      	ldrb	r3, [r7, #23]
 800ee9a:	2b01      	cmp	r3, #1
 800ee9c:	d102      	bne.n	800eea4 <create_chain+0x122>
 800ee9e:	f04f 33ff 	mov.w	r3, #4294967295
 800eea2:	e000      	b.n	800eea6 <create_chain+0x124>
 800eea4:	2301      	movs	r3, #1
 800eea6:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800eea8:	69fb      	ldr	r3, [r7, #28]
}
 800eeaa:	4618      	mov	r0, r3
 800eeac:	3720      	adds	r7, #32
 800eeae:	46bd      	mov	sp, r7
 800eeb0:	bd80      	pop	{r7, pc}

0800eeb2 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800eeb2:	b480      	push	{r7}
 800eeb4:	b087      	sub	sp, #28
 800eeb6:	af00      	add	r7, sp, #0
 800eeb8:	6078      	str	r0, [r7, #4]
 800eeba:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800eebc:	687b      	ldr	r3, [r7, #4]
 800eebe:	681b      	ldr	r3, [r3, #0]
 800eec0:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800eec6:	3304      	adds	r3, #4
 800eec8:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800eeca:	683b      	ldr	r3, [r7, #0]
 800eecc:	0a5b      	lsrs	r3, r3, #9
 800eece:	68fa      	ldr	r2, [r7, #12]
 800eed0:	8952      	ldrh	r2, [r2, #10]
 800eed2:	fbb3 f3f2 	udiv	r3, r3, r2
 800eed6:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eed8:	693b      	ldr	r3, [r7, #16]
 800eeda:	1d1a      	adds	r2, r3, #4
 800eedc:	613a      	str	r2, [r7, #16]
 800eede:	681b      	ldr	r3, [r3, #0]
 800eee0:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800eee2:	68bb      	ldr	r3, [r7, #8]
 800eee4:	2b00      	cmp	r3, #0
 800eee6:	d101      	bne.n	800eeec <clmt_clust+0x3a>
 800eee8:	2300      	movs	r3, #0
 800eeea:	e010      	b.n	800ef0e <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800eeec:	697a      	ldr	r2, [r7, #20]
 800eeee:	68bb      	ldr	r3, [r7, #8]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d307      	bcc.n	800ef04 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800eef4:	697a      	ldr	r2, [r7, #20]
 800eef6:	68bb      	ldr	r3, [r7, #8]
 800eef8:	1ad3      	subs	r3, r2, r3
 800eefa:	617b      	str	r3, [r7, #20]
 800eefc:	693b      	ldr	r3, [r7, #16]
 800eefe:	3304      	adds	r3, #4
 800ef00:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ef02:	e7e9      	b.n	800eed8 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800ef04:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800ef06:	693b      	ldr	r3, [r7, #16]
 800ef08:	681a      	ldr	r2, [r3, #0]
 800ef0a:	697b      	ldr	r3, [r7, #20]
 800ef0c:	4413      	add	r3, r2
}
 800ef0e:	4618      	mov	r0, r3
 800ef10:	371c      	adds	r7, #28
 800ef12:	46bd      	mov	sp, r7
 800ef14:	bc80      	pop	{r7}
 800ef16:	4770      	bx	lr

0800ef18 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ef18:	b580      	push	{r7, lr}
 800ef1a:	b086      	sub	sp, #24
 800ef1c:	af00      	add	r7, sp, #0
 800ef1e:	6078      	str	r0, [r7, #4]
 800ef20:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ef22:	687b      	ldr	r3, [r7, #4]
 800ef24:	681b      	ldr	r3, [r3, #0]
 800ef26:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ef28:	683b      	ldr	r3, [r7, #0]
 800ef2a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ef2e:	d204      	bcs.n	800ef3a <dir_sdi+0x22>
 800ef30:	683b      	ldr	r3, [r7, #0]
 800ef32:	f003 031f 	and.w	r3, r3, #31
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d001      	beq.n	800ef3e <dir_sdi+0x26>
		return FR_INT_ERR;
 800ef3a:	2302      	movs	r3, #2
 800ef3c:	e063      	b.n	800f006 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ef3e:	687b      	ldr	r3, [r7, #4]
 800ef40:	683a      	ldr	r2, [r7, #0]
 800ef42:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ef44:	687b      	ldr	r3, [r7, #4]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ef4a:	697b      	ldr	r3, [r7, #20]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d106      	bne.n	800ef5e <dir_sdi+0x46>
 800ef50:	693b      	ldr	r3, [r7, #16]
 800ef52:	781b      	ldrb	r3, [r3, #0]
 800ef54:	2b02      	cmp	r3, #2
 800ef56:	d902      	bls.n	800ef5e <dir_sdi+0x46>
		clst = fs->dirbase;
 800ef58:	693b      	ldr	r3, [r7, #16]
 800ef5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ef5c:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ef5e:	697b      	ldr	r3, [r7, #20]
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d10c      	bne.n	800ef7e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ef64:	683b      	ldr	r3, [r7, #0]
 800ef66:	095b      	lsrs	r3, r3, #5
 800ef68:	693a      	ldr	r2, [r7, #16]
 800ef6a:	8912      	ldrh	r2, [r2, #8]
 800ef6c:	4293      	cmp	r3, r2
 800ef6e:	d301      	bcc.n	800ef74 <dir_sdi+0x5c>
 800ef70:	2302      	movs	r3, #2
 800ef72:	e048      	b.n	800f006 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ef78:	687b      	ldr	r3, [r7, #4]
 800ef7a:	61da      	str	r2, [r3, #28]
 800ef7c:	e029      	b.n	800efd2 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ef7e:	693b      	ldr	r3, [r7, #16]
 800ef80:	895b      	ldrh	r3, [r3, #10]
 800ef82:	025b      	lsls	r3, r3, #9
 800ef84:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ef86:	e019      	b.n	800efbc <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	6979      	ldr	r1, [r7, #20]
 800ef8c:	4618      	mov	r0, r3
 800ef8e:	f7ff fd01 	bl	800e994 <get_fat>
 800ef92:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ef94:	697b      	ldr	r3, [r7, #20]
 800ef96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef9a:	d101      	bne.n	800efa0 <dir_sdi+0x88>
 800ef9c:	2301      	movs	r3, #1
 800ef9e:	e032      	b.n	800f006 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800efa0:	697b      	ldr	r3, [r7, #20]
 800efa2:	2b01      	cmp	r3, #1
 800efa4:	d904      	bls.n	800efb0 <dir_sdi+0x98>
 800efa6:	693b      	ldr	r3, [r7, #16]
 800efa8:	699b      	ldr	r3, [r3, #24]
 800efaa:	697a      	ldr	r2, [r7, #20]
 800efac:	429a      	cmp	r2, r3
 800efae:	d301      	bcc.n	800efb4 <dir_sdi+0x9c>
 800efb0:	2302      	movs	r3, #2
 800efb2:	e028      	b.n	800f006 <dir_sdi+0xee>
			ofs -= csz;
 800efb4:	683a      	ldr	r2, [r7, #0]
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	1ad3      	subs	r3, r2, r3
 800efba:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800efbc:	683a      	ldr	r2, [r7, #0]
 800efbe:	68fb      	ldr	r3, [r7, #12]
 800efc0:	429a      	cmp	r2, r3
 800efc2:	d2e1      	bcs.n	800ef88 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800efc4:	6979      	ldr	r1, [r7, #20]
 800efc6:	6938      	ldr	r0, [r7, #16]
 800efc8:	f7ff fcc6 	bl	800e958 <clust2sect>
 800efcc:	4602      	mov	r2, r0
 800efce:	687b      	ldr	r3, [r7, #4]
 800efd0:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	697a      	ldr	r2, [r7, #20]
 800efd6:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	69db      	ldr	r3, [r3, #28]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	d101      	bne.n	800efe4 <dir_sdi+0xcc>
 800efe0:	2302      	movs	r3, #2
 800efe2:	e010      	b.n	800f006 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800efe4:	687b      	ldr	r3, [r7, #4]
 800efe6:	69da      	ldr	r2, [r3, #28]
 800efe8:	683b      	ldr	r3, [r7, #0]
 800efea:	0a5b      	lsrs	r3, r3, #9
 800efec:	441a      	add	r2, r3
 800efee:	687b      	ldr	r3, [r7, #4]
 800eff0:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800eff2:	693b      	ldr	r3, [r7, #16]
 800eff4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800eff8:	683b      	ldr	r3, [r7, #0]
 800effa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800effe:	441a      	add	r2, r3
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f004:	2300      	movs	r3, #0
}
 800f006:	4618      	mov	r0, r3
 800f008:	3718      	adds	r7, #24
 800f00a:	46bd      	mov	sp, r7
 800f00c:	bd80      	pop	{r7, pc}

0800f00e <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800f00e:	b580      	push	{r7, lr}
 800f010:	b086      	sub	sp, #24
 800f012:	af00      	add	r7, sp, #0
 800f014:	6078      	str	r0, [r7, #4]
 800f016:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	681b      	ldr	r3, [r3, #0]
 800f01c:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	695b      	ldr	r3, [r3, #20]
 800f022:	3320      	adds	r3, #32
 800f024:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	69db      	ldr	r3, [r3, #28]
 800f02a:	2b00      	cmp	r3, #0
 800f02c:	d003      	beq.n	800f036 <dir_next+0x28>
 800f02e:	68bb      	ldr	r3, [r7, #8]
 800f030:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800f034:	d301      	bcc.n	800f03a <dir_next+0x2c>
 800f036:	2304      	movs	r3, #4
 800f038:	e0aa      	b.n	800f190 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800f03a:	68bb      	ldr	r3, [r7, #8]
 800f03c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f040:	2b00      	cmp	r3, #0
 800f042:	f040 8098 	bne.w	800f176 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	69db      	ldr	r3, [r3, #28]
 800f04a:	1c5a      	adds	r2, r3, #1
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800f050:	687b      	ldr	r3, [r7, #4]
 800f052:	699b      	ldr	r3, [r3, #24]
 800f054:	2b00      	cmp	r3, #0
 800f056:	d10b      	bne.n	800f070 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800f058:	68bb      	ldr	r3, [r7, #8]
 800f05a:	095b      	lsrs	r3, r3, #5
 800f05c:	68fa      	ldr	r2, [r7, #12]
 800f05e:	8912      	ldrh	r2, [r2, #8]
 800f060:	4293      	cmp	r3, r2
 800f062:	f0c0 8088 	bcc.w	800f176 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800f066:	687b      	ldr	r3, [r7, #4]
 800f068:	2200      	movs	r2, #0
 800f06a:	61da      	str	r2, [r3, #28]
 800f06c:	2304      	movs	r3, #4
 800f06e:	e08f      	b.n	800f190 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800f070:	68bb      	ldr	r3, [r7, #8]
 800f072:	0a5b      	lsrs	r3, r3, #9
 800f074:	68fa      	ldr	r2, [r7, #12]
 800f076:	8952      	ldrh	r2, [r2, #10]
 800f078:	3a01      	subs	r2, #1
 800f07a:	4013      	ands	r3, r2
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d17a      	bne.n	800f176 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800f080:	687a      	ldr	r2, [r7, #4]
 800f082:	687b      	ldr	r3, [r7, #4]
 800f084:	699b      	ldr	r3, [r3, #24]
 800f086:	4619      	mov	r1, r3
 800f088:	4610      	mov	r0, r2
 800f08a:	f7ff fc83 	bl	800e994 <get_fat>
 800f08e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800f090:	697b      	ldr	r3, [r7, #20]
 800f092:	2b01      	cmp	r3, #1
 800f094:	d801      	bhi.n	800f09a <dir_next+0x8c>
 800f096:	2302      	movs	r3, #2
 800f098:	e07a      	b.n	800f190 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800f09a:	697b      	ldr	r3, [r7, #20]
 800f09c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0a0:	d101      	bne.n	800f0a6 <dir_next+0x98>
 800f0a2:	2301      	movs	r3, #1
 800f0a4:	e074      	b.n	800f190 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	699b      	ldr	r3, [r3, #24]
 800f0aa:	697a      	ldr	r2, [r7, #20]
 800f0ac:	429a      	cmp	r2, r3
 800f0ae:	d358      	bcc.n	800f162 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800f0b0:	683b      	ldr	r3, [r7, #0]
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d104      	bne.n	800f0c0 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800f0b6:	687b      	ldr	r3, [r7, #4]
 800f0b8:	2200      	movs	r2, #0
 800f0ba:	61da      	str	r2, [r3, #28]
 800f0bc:	2304      	movs	r3, #4
 800f0be:	e067      	b.n	800f190 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800f0c0:	687a      	ldr	r2, [r7, #4]
 800f0c2:	687b      	ldr	r3, [r7, #4]
 800f0c4:	699b      	ldr	r3, [r3, #24]
 800f0c6:	4619      	mov	r1, r3
 800f0c8:	4610      	mov	r0, r2
 800f0ca:	f7ff fe5a 	bl	800ed82 <create_chain>
 800f0ce:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800f0d0:	697b      	ldr	r3, [r7, #20]
 800f0d2:	2b00      	cmp	r3, #0
 800f0d4:	d101      	bne.n	800f0da <dir_next+0xcc>
 800f0d6:	2307      	movs	r3, #7
 800f0d8:	e05a      	b.n	800f190 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800f0da:	697b      	ldr	r3, [r7, #20]
 800f0dc:	2b01      	cmp	r3, #1
 800f0de:	d101      	bne.n	800f0e4 <dir_next+0xd6>
 800f0e0:	2302      	movs	r3, #2
 800f0e2:	e055      	b.n	800f190 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800f0e4:	697b      	ldr	r3, [r7, #20]
 800f0e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f0ea:	d101      	bne.n	800f0f0 <dir_next+0xe2>
 800f0ec:	2301      	movs	r3, #1
 800f0ee:	e04f      	b.n	800f190 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800f0f0:	68f8      	ldr	r0, [r7, #12]
 800f0f2:	f7ff fb51 	bl	800e798 <sync_window>
 800f0f6:	4603      	mov	r3, r0
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d001      	beq.n	800f100 <dir_next+0xf2>
 800f0fc:	2301      	movs	r3, #1
 800f0fe:	e047      	b.n	800f190 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800f100:	68fb      	ldr	r3, [r7, #12]
 800f102:	3334      	adds	r3, #52	; 0x34
 800f104:	f44f 7200 	mov.w	r2, #512	; 0x200
 800f108:	2100      	movs	r1, #0
 800f10a:	4618      	mov	r0, r3
 800f10c:	f7ff f984 	bl	800e418 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f110:	2300      	movs	r3, #0
 800f112:	613b      	str	r3, [r7, #16]
 800f114:	6979      	ldr	r1, [r7, #20]
 800f116:	68f8      	ldr	r0, [r7, #12]
 800f118:	f7ff fc1e 	bl	800e958 <clust2sect>
 800f11c:	4602      	mov	r2, r0
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	631a      	str	r2, [r3, #48]	; 0x30
 800f122:	e012      	b.n	800f14a <dir_next+0x13c>
						fs->wflag = 1;
 800f124:	68fb      	ldr	r3, [r7, #12]
 800f126:	2201      	movs	r2, #1
 800f128:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800f12a:	68f8      	ldr	r0, [r7, #12]
 800f12c:	f7ff fb34 	bl	800e798 <sync_window>
 800f130:	4603      	mov	r3, r0
 800f132:	2b00      	cmp	r3, #0
 800f134:	d001      	beq.n	800f13a <dir_next+0x12c>
 800f136:	2301      	movs	r3, #1
 800f138:	e02a      	b.n	800f190 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800f13a:	693b      	ldr	r3, [r7, #16]
 800f13c:	3301      	adds	r3, #1
 800f13e:	613b      	str	r3, [r7, #16]
 800f140:	68fb      	ldr	r3, [r7, #12]
 800f142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f144:	1c5a      	adds	r2, r3, #1
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	631a      	str	r2, [r3, #48]	; 0x30
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	895b      	ldrh	r3, [r3, #10]
 800f14e:	461a      	mov	r2, r3
 800f150:	693b      	ldr	r3, [r7, #16]
 800f152:	4293      	cmp	r3, r2
 800f154:	d3e6      	bcc.n	800f124 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800f156:	68fb      	ldr	r3, [r7, #12]
 800f158:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f15a:	693b      	ldr	r3, [r7, #16]
 800f15c:	1ad2      	subs	r2, r2, r3
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	697a      	ldr	r2, [r7, #20]
 800f166:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800f168:	6979      	ldr	r1, [r7, #20]
 800f16a:	68f8      	ldr	r0, [r7, #12]
 800f16c:	f7ff fbf4 	bl	800e958 <clust2sect>
 800f170:	4602      	mov	r2, r0
 800f172:	687b      	ldr	r3, [r7, #4]
 800f174:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	68ba      	ldr	r2, [r7, #8]
 800f17a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800f17c:	68fb      	ldr	r3, [r7, #12]
 800f17e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800f182:	68bb      	ldr	r3, [r7, #8]
 800f184:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f188:	441a      	add	r2, r3
 800f18a:	687b      	ldr	r3, [r7, #4]
 800f18c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800f18e:	2300      	movs	r3, #0
}
 800f190:	4618      	mov	r0, r3
 800f192:	3718      	adds	r7, #24
 800f194:	46bd      	mov	sp, r7
 800f196:	bd80      	pop	{r7, pc}

0800f198 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800f198:	b580      	push	{r7, lr}
 800f19a:	b086      	sub	sp, #24
 800f19c:	af00      	add	r7, sp, #0
 800f19e:	6078      	str	r0, [r7, #4]
 800f1a0:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
 800f1a6:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800f1a8:	2100      	movs	r1, #0
 800f1aa:	6878      	ldr	r0, [r7, #4]
 800f1ac:	f7ff feb4 	bl	800ef18 <dir_sdi>
 800f1b0:	4603      	mov	r3, r0
 800f1b2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800f1b4:	7dfb      	ldrb	r3, [r7, #23]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d12b      	bne.n	800f212 <dir_alloc+0x7a>
		n = 0;
 800f1ba:	2300      	movs	r3, #0
 800f1bc:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	69db      	ldr	r3, [r3, #28]
 800f1c2:	4619      	mov	r1, r3
 800f1c4:	68f8      	ldr	r0, [r7, #12]
 800f1c6:	f7ff fb2b 	bl	800e820 <move_window>
 800f1ca:	4603      	mov	r3, r0
 800f1cc:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800f1ce:	7dfb      	ldrb	r3, [r7, #23]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d11d      	bne.n	800f210 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	6a1b      	ldr	r3, [r3, #32]
 800f1d8:	781b      	ldrb	r3, [r3, #0]
 800f1da:	2be5      	cmp	r3, #229	; 0xe5
 800f1dc:	d004      	beq.n	800f1e8 <dir_alloc+0x50>
 800f1de:	687b      	ldr	r3, [r7, #4]
 800f1e0:	6a1b      	ldr	r3, [r3, #32]
 800f1e2:	781b      	ldrb	r3, [r3, #0]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	d107      	bne.n	800f1f8 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800f1e8:	693b      	ldr	r3, [r7, #16]
 800f1ea:	3301      	adds	r3, #1
 800f1ec:	613b      	str	r3, [r7, #16]
 800f1ee:	693a      	ldr	r2, [r7, #16]
 800f1f0:	683b      	ldr	r3, [r7, #0]
 800f1f2:	429a      	cmp	r2, r3
 800f1f4:	d102      	bne.n	800f1fc <dir_alloc+0x64>
 800f1f6:	e00c      	b.n	800f212 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800f1f8:	2300      	movs	r3, #0
 800f1fa:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800f1fc:	2101      	movs	r1, #1
 800f1fe:	6878      	ldr	r0, [r7, #4]
 800f200:	f7ff ff05 	bl	800f00e <dir_next>
 800f204:	4603      	mov	r3, r0
 800f206:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800f208:	7dfb      	ldrb	r3, [r7, #23]
 800f20a:	2b00      	cmp	r3, #0
 800f20c:	d0d7      	beq.n	800f1be <dir_alloc+0x26>
 800f20e:	e000      	b.n	800f212 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800f210:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800f212:	7dfb      	ldrb	r3, [r7, #23]
 800f214:	2b04      	cmp	r3, #4
 800f216:	d101      	bne.n	800f21c <dir_alloc+0x84>
 800f218:	2307      	movs	r3, #7
 800f21a:	75fb      	strb	r3, [r7, #23]
	return res;
 800f21c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f21e:	4618      	mov	r0, r3
 800f220:	3718      	adds	r7, #24
 800f222:	46bd      	mov	sp, r7
 800f224:	bd80      	pop	{r7, pc}

0800f226 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800f226:	b580      	push	{r7, lr}
 800f228:	b084      	sub	sp, #16
 800f22a:	af00      	add	r7, sp, #0
 800f22c:	6078      	str	r0, [r7, #4]
 800f22e:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800f230:	683b      	ldr	r3, [r7, #0]
 800f232:	331a      	adds	r3, #26
 800f234:	4618      	mov	r0, r3
 800f236:	f7ff f851 	bl	800e2dc <ld_word>
 800f23a:	4603      	mov	r3, r0
 800f23c:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800f23e:	687b      	ldr	r3, [r7, #4]
 800f240:	781b      	ldrb	r3, [r3, #0]
 800f242:	2b03      	cmp	r3, #3
 800f244:	d109      	bne.n	800f25a <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800f246:	683b      	ldr	r3, [r7, #0]
 800f248:	3314      	adds	r3, #20
 800f24a:	4618      	mov	r0, r3
 800f24c:	f7ff f846 	bl	800e2dc <ld_word>
 800f250:	4603      	mov	r3, r0
 800f252:	041b      	lsls	r3, r3, #16
 800f254:	68fa      	ldr	r2, [r7, #12]
 800f256:	4313      	orrs	r3, r2
 800f258:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800f25a:	68fb      	ldr	r3, [r7, #12]
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3710      	adds	r7, #16
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b084      	sub	sp, #16
 800f268:	af00      	add	r7, sp, #0
 800f26a:	60f8      	str	r0, [r7, #12]
 800f26c:	60b9      	str	r1, [r7, #8]
 800f26e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f270:	68bb      	ldr	r3, [r7, #8]
 800f272:	331a      	adds	r3, #26
 800f274:	687a      	ldr	r2, [r7, #4]
 800f276:	b292      	uxth	r2, r2
 800f278:	4611      	mov	r1, r2
 800f27a:	4618      	mov	r0, r3
 800f27c:	f7ff f867 	bl	800e34e <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f280:	68fb      	ldr	r3, [r7, #12]
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	2b03      	cmp	r3, #3
 800f286:	d109      	bne.n	800f29c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f288:	68bb      	ldr	r3, [r7, #8]
 800f28a:	f103 0214 	add.w	r2, r3, #20
 800f28e:	687b      	ldr	r3, [r7, #4]
 800f290:	0c1b      	lsrs	r3, r3, #16
 800f292:	b29b      	uxth	r3, r3
 800f294:	4619      	mov	r1, r3
 800f296:	4610      	mov	r0, r2
 800f298:	f7ff f859 	bl	800e34e <st_word>
	}
}
 800f29c:	bf00      	nop
 800f29e:	3710      	adds	r7, #16
 800f2a0:	46bd      	mov	sp, r7
 800f2a2:	bd80      	pop	{r7, pc}

0800f2a4 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f2a4:	b590      	push	{r4, r7, lr}
 800f2a6:	b087      	sub	sp, #28
 800f2a8:	af00      	add	r7, sp, #0
 800f2aa:	6078      	str	r0, [r7, #4]
 800f2ac:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f2ae:	683b      	ldr	r3, [r7, #0]
 800f2b0:	331a      	adds	r3, #26
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f7ff f812 	bl	800e2dc <ld_word>
 800f2b8:	4603      	mov	r3, r0
 800f2ba:	2b00      	cmp	r3, #0
 800f2bc:	d001      	beq.n	800f2c2 <cmp_lfn+0x1e>
 800f2be:	2300      	movs	r3, #0
 800f2c0:	e059      	b.n	800f376 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f2c2:	683b      	ldr	r3, [r7, #0]
 800f2c4:	781b      	ldrb	r3, [r3, #0]
 800f2c6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f2ca:	1e5a      	subs	r2, r3, #1
 800f2cc:	4613      	mov	r3, r2
 800f2ce:	005b      	lsls	r3, r3, #1
 800f2d0:	4413      	add	r3, r2
 800f2d2:	009b      	lsls	r3, r3, #2
 800f2d4:	4413      	add	r3, r2
 800f2d6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f2d8:	2301      	movs	r3, #1
 800f2da:	81fb      	strh	r3, [r7, #14]
 800f2dc:	2300      	movs	r3, #0
 800f2de:	613b      	str	r3, [r7, #16]
 800f2e0:	e033      	b.n	800f34a <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f2e2:	4a27      	ldr	r2, [pc, #156]	; (800f380 <cmp_lfn+0xdc>)
 800f2e4:	693b      	ldr	r3, [r7, #16]
 800f2e6:	4413      	add	r3, r2
 800f2e8:	781b      	ldrb	r3, [r3, #0]
 800f2ea:	461a      	mov	r2, r3
 800f2ec:	683b      	ldr	r3, [r7, #0]
 800f2ee:	4413      	add	r3, r2
 800f2f0:	4618      	mov	r0, r3
 800f2f2:	f7fe fff3 	bl	800e2dc <ld_word>
 800f2f6:	4603      	mov	r3, r0
 800f2f8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f2fa:	89fb      	ldrh	r3, [r7, #14]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d01a      	beq.n	800f336 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f300:	697b      	ldr	r3, [r7, #20]
 800f302:	2bfe      	cmp	r3, #254	; 0xfe
 800f304:	d812      	bhi.n	800f32c <cmp_lfn+0x88>
 800f306:	89bb      	ldrh	r3, [r7, #12]
 800f308:	4618      	mov	r0, r3
 800f30a:	f001 ff91 	bl	8011230 <ff_wtoupper>
 800f30e:	4603      	mov	r3, r0
 800f310:	461c      	mov	r4, r3
 800f312:	697b      	ldr	r3, [r7, #20]
 800f314:	1c5a      	adds	r2, r3, #1
 800f316:	617a      	str	r2, [r7, #20]
 800f318:	005b      	lsls	r3, r3, #1
 800f31a:	687a      	ldr	r2, [r7, #4]
 800f31c:	4413      	add	r3, r2
 800f31e:	881b      	ldrh	r3, [r3, #0]
 800f320:	4618      	mov	r0, r3
 800f322:	f001 ff85 	bl	8011230 <ff_wtoupper>
 800f326:	4603      	mov	r3, r0
 800f328:	429c      	cmp	r4, r3
 800f32a:	d001      	beq.n	800f330 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f32c:	2300      	movs	r3, #0
 800f32e:	e022      	b.n	800f376 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f330:	89bb      	ldrh	r3, [r7, #12]
 800f332:	81fb      	strh	r3, [r7, #14]
 800f334:	e006      	b.n	800f344 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f336:	89bb      	ldrh	r3, [r7, #12]
 800f338:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f33c:	4293      	cmp	r3, r2
 800f33e:	d001      	beq.n	800f344 <cmp_lfn+0xa0>
 800f340:	2300      	movs	r3, #0
 800f342:	e018      	b.n	800f376 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f344:	693b      	ldr	r3, [r7, #16]
 800f346:	3301      	adds	r3, #1
 800f348:	613b      	str	r3, [r7, #16]
 800f34a:	693b      	ldr	r3, [r7, #16]
 800f34c:	2b0c      	cmp	r3, #12
 800f34e:	d9c8      	bls.n	800f2e2 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	781b      	ldrb	r3, [r3, #0]
 800f354:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f358:	2b00      	cmp	r3, #0
 800f35a:	d00b      	beq.n	800f374 <cmp_lfn+0xd0>
 800f35c:	89fb      	ldrh	r3, [r7, #14]
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d008      	beq.n	800f374 <cmp_lfn+0xd0>
 800f362:	697b      	ldr	r3, [r7, #20]
 800f364:	005b      	lsls	r3, r3, #1
 800f366:	687a      	ldr	r2, [r7, #4]
 800f368:	4413      	add	r3, r2
 800f36a:	881b      	ldrh	r3, [r3, #0]
 800f36c:	2b00      	cmp	r3, #0
 800f36e:	d001      	beq.n	800f374 <cmp_lfn+0xd0>
 800f370:	2300      	movs	r3, #0
 800f372:	e000      	b.n	800f376 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f374:	2301      	movs	r3, #1
}
 800f376:	4618      	mov	r0, r3
 800f378:	371c      	adds	r7, #28
 800f37a:	46bd      	mov	sp, r7
 800f37c:	bd90      	pop	{r4, r7, pc}
 800f37e:	bf00      	nop
 800f380:	08012858 	.word	0x08012858

0800f384 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b086      	sub	sp, #24
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
 800f38c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f38e:	683b      	ldr	r3, [r7, #0]
 800f390:	331a      	adds	r3, #26
 800f392:	4618      	mov	r0, r3
 800f394:	f7fe ffa2 	bl	800e2dc <ld_word>
 800f398:	4603      	mov	r3, r0
 800f39a:	2b00      	cmp	r3, #0
 800f39c:	d001      	beq.n	800f3a2 <pick_lfn+0x1e>
 800f39e:	2300      	movs	r3, #0
 800f3a0:	e04d      	b.n	800f43e <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f3a2:	683b      	ldr	r3, [r7, #0]
 800f3a4:	781b      	ldrb	r3, [r3, #0]
 800f3a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f3aa:	1e5a      	subs	r2, r3, #1
 800f3ac:	4613      	mov	r3, r2
 800f3ae:	005b      	lsls	r3, r3, #1
 800f3b0:	4413      	add	r3, r2
 800f3b2:	009b      	lsls	r3, r3, #2
 800f3b4:	4413      	add	r3, r2
 800f3b6:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f3b8:	2301      	movs	r3, #1
 800f3ba:	81fb      	strh	r3, [r7, #14]
 800f3bc:	2300      	movs	r3, #0
 800f3be:	613b      	str	r3, [r7, #16]
 800f3c0:	e028      	b.n	800f414 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f3c2:	4a21      	ldr	r2, [pc, #132]	; (800f448 <pick_lfn+0xc4>)
 800f3c4:	693b      	ldr	r3, [r7, #16]
 800f3c6:	4413      	add	r3, r2
 800f3c8:	781b      	ldrb	r3, [r3, #0]
 800f3ca:	461a      	mov	r2, r3
 800f3cc:	683b      	ldr	r3, [r7, #0]
 800f3ce:	4413      	add	r3, r2
 800f3d0:	4618      	mov	r0, r3
 800f3d2:	f7fe ff83 	bl	800e2dc <ld_word>
 800f3d6:	4603      	mov	r3, r0
 800f3d8:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f3da:	89fb      	ldrh	r3, [r7, #14]
 800f3dc:	2b00      	cmp	r3, #0
 800f3de:	d00f      	beq.n	800f400 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f3e0:	697b      	ldr	r3, [r7, #20]
 800f3e2:	2bfe      	cmp	r3, #254	; 0xfe
 800f3e4:	d901      	bls.n	800f3ea <pick_lfn+0x66>
 800f3e6:	2300      	movs	r3, #0
 800f3e8:	e029      	b.n	800f43e <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f3ea:	89bb      	ldrh	r3, [r7, #12]
 800f3ec:	81fb      	strh	r3, [r7, #14]
 800f3ee:	697b      	ldr	r3, [r7, #20]
 800f3f0:	1c5a      	adds	r2, r3, #1
 800f3f2:	617a      	str	r2, [r7, #20]
 800f3f4:	005b      	lsls	r3, r3, #1
 800f3f6:	687a      	ldr	r2, [r7, #4]
 800f3f8:	4413      	add	r3, r2
 800f3fa:	89fa      	ldrh	r2, [r7, #14]
 800f3fc:	801a      	strh	r2, [r3, #0]
 800f3fe:	e006      	b.n	800f40e <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f400:	89bb      	ldrh	r3, [r7, #12]
 800f402:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f406:	4293      	cmp	r3, r2
 800f408:	d001      	beq.n	800f40e <pick_lfn+0x8a>
 800f40a:	2300      	movs	r3, #0
 800f40c:	e017      	b.n	800f43e <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f40e:	693b      	ldr	r3, [r7, #16]
 800f410:	3301      	adds	r3, #1
 800f412:	613b      	str	r3, [r7, #16]
 800f414:	693b      	ldr	r3, [r7, #16]
 800f416:	2b0c      	cmp	r3, #12
 800f418:	d9d3      	bls.n	800f3c2 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	781b      	ldrb	r3, [r3, #0]
 800f41e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f422:	2b00      	cmp	r3, #0
 800f424:	d00a      	beq.n	800f43c <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f426:	697b      	ldr	r3, [r7, #20]
 800f428:	2bfe      	cmp	r3, #254	; 0xfe
 800f42a:	d901      	bls.n	800f430 <pick_lfn+0xac>
 800f42c:	2300      	movs	r3, #0
 800f42e:	e006      	b.n	800f43e <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f430:	697b      	ldr	r3, [r7, #20]
 800f432:	005b      	lsls	r3, r3, #1
 800f434:	687a      	ldr	r2, [r7, #4]
 800f436:	4413      	add	r3, r2
 800f438:	2200      	movs	r2, #0
 800f43a:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f43c:	2301      	movs	r3, #1
}
 800f43e:	4618      	mov	r0, r3
 800f440:	3718      	adds	r7, #24
 800f442:	46bd      	mov	sp, r7
 800f444:	bd80      	pop	{r7, pc}
 800f446:	bf00      	nop
 800f448:	08012858 	.word	0x08012858

0800f44c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f44c:	b580      	push	{r7, lr}
 800f44e:	b088      	sub	sp, #32
 800f450:	af00      	add	r7, sp, #0
 800f452:	60f8      	str	r0, [r7, #12]
 800f454:	60b9      	str	r1, [r7, #8]
 800f456:	4611      	mov	r1, r2
 800f458:	461a      	mov	r2, r3
 800f45a:	460b      	mov	r3, r1
 800f45c:	71fb      	strb	r3, [r7, #7]
 800f45e:	4613      	mov	r3, r2
 800f460:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f462:	68bb      	ldr	r3, [r7, #8]
 800f464:	330d      	adds	r3, #13
 800f466:	79ba      	ldrb	r2, [r7, #6]
 800f468:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f46a:	68bb      	ldr	r3, [r7, #8]
 800f46c:	330b      	adds	r3, #11
 800f46e:	220f      	movs	r2, #15
 800f470:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f472:	68bb      	ldr	r3, [r7, #8]
 800f474:	330c      	adds	r3, #12
 800f476:	2200      	movs	r2, #0
 800f478:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f47a:	68bb      	ldr	r3, [r7, #8]
 800f47c:	331a      	adds	r3, #26
 800f47e:	2100      	movs	r1, #0
 800f480:	4618      	mov	r0, r3
 800f482:	f7fe ff64 	bl	800e34e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f486:	79fb      	ldrb	r3, [r7, #7]
 800f488:	1e5a      	subs	r2, r3, #1
 800f48a:	4613      	mov	r3, r2
 800f48c:	005b      	lsls	r3, r3, #1
 800f48e:	4413      	add	r3, r2
 800f490:	009b      	lsls	r3, r3, #2
 800f492:	4413      	add	r3, r2
 800f494:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f496:	2300      	movs	r3, #0
 800f498:	82fb      	strh	r3, [r7, #22]
 800f49a:	2300      	movs	r3, #0
 800f49c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f49e:	8afb      	ldrh	r3, [r7, #22]
 800f4a0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4a4:	4293      	cmp	r3, r2
 800f4a6:	d007      	beq.n	800f4b8 <put_lfn+0x6c>
 800f4a8:	69fb      	ldr	r3, [r7, #28]
 800f4aa:	1c5a      	adds	r2, r3, #1
 800f4ac:	61fa      	str	r2, [r7, #28]
 800f4ae:	005b      	lsls	r3, r3, #1
 800f4b0:	68fa      	ldr	r2, [r7, #12]
 800f4b2:	4413      	add	r3, r2
 800f4b4:	881b      	ldrh	r3, [r3, #0]
 800f4b6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f4b8:	4a17      	ldr	r2, [pc, #92]	; (800f518 <put_lfn+0xcc>)
 800f4ba:	69bb      	ldr	r3, [r7, #24]
 800f4bc:	4413      	add	r3, r2
 800f4be:	781b      	ldrb	r3, [r3, #0]
 800f4c0:	461a      	mov	r2, r3
 800f4c2:	68bb      	ldr	r3, [r7, #8]
 800f4c4:	4413      	add	r3, r2
 800f4c6:	8afa      	ldrh	r2, [r7, #22]
 800f4c8:	4611      	mov	r1, r2
 800f4ca:	4618      	mov	r0, r3
 800f4cc:	f7fe ff3f 	bl	800e34e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f4d0:	8afb      	ldrh	r3, [r7, #22]
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d102      	bne.n	800f4dc <put_lfn+0x90>
 800f4d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f4da:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f4dc:	69bb      	ldr	r3, [r7, #24]
 800f4de:	3301      	adds	r3, #1
 800f4e0:	61bb      	str	r3, [r7, #24]
 800f4e2:	69bb      	ldr	r3, [r7, #24]
 800f4e4:	2b0c      	cmp	r3, #12
 800f4e6:	d9da      	bls.n	800f49e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f4e8:	8afb      	ldrh	r3, [r7, #22]
 800f4ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f4ee:	4293      	cmp	r3, r2
 800f4f0:	d006      	beq.n	800f500 <put_lfn+0xb4>
 800f4f2:	69fb      	ldr	r3, [r7, #28]
 800f4f4:	005b      	lsls	r3, r3, #1
 800f4f6:	68fa      	ldr	r2, [r7, #12]
 800f4f8:	4413      	add	r3, r2
 800f4fa:	881b      	ldrh	r3, [r3, #0]
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d103      	bne.n	800f508 <put_lfn+0xbc>
 800f500:	79fb      	ldrb	r3, [r7, #7]
 800f502:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f506:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	79fa      	ldrb	r2, [r7, #7]
 800f50c:	701a      	strb	r2, [r3, #0]
}
 800f50e:	bf00      	nop
 800f510:	3720      	adds	r7, #32
 800f512:	46bd      	mov	sp, r7
 800f514:	bd80      	pop	{r7, pc}
 800f516:	bf00      	nop
 800f518:	08012858 	.word	0x08012858

0800f51c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f51c:	b580      	push	{r7, lr}
 800f51e:	b08c      	sub	sp, #48	; 0x30
 800f520:	af00      	add	r7, sp, #0
 800f522:	60f8      	str	r0, [r7, #12]
 800f524:	60b9      	str	r1, [r7, #8]
 800f526:	607a      	str	r2, [r7, #4]
 800f528:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f52a:	220b      	movs	r2, #11
 800f52c:	68b9      	ldr	r1, [r7, #8]
 800f52e:	68f8      	ldr	r0, [r7, #12]
 800f530:	f7fe ff52 	bl	800e3d8 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f534:	683b      	ldr	r3, [r7, #0]
 800f536:	2b05      	cmp	r3, #5
 800f538:	d92b      	bls.n	800f592 <gen_numname+0x76>
		sr = seq;
 800f53a:	683b      	ldr	r3, [r7, #0]
 800f53c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f53e:	e022      	b.n	800f586 <gen_numname+0x6a>
			wc = *lfn++;
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	1c9a      	adds	r2, r3, #2
 800f544:	607a      	str	r2, [r7, #4]
 800f546:	881b      	ldrh	r3, [r3, #0]
 800f548:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f54a:	2300      	movs	r3, #0
 800f54c:	62bb      	str	r3, [r7, #40]	; 0x28
 800f54e:	e017      	b.n	800f580 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f550:	69fb      	ldr	r3, [r7, #28]
 800f552:	005a      	lsls	r2, r3, #1
 800f554:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f556:	f003 0301 	and.w	r3, r3, #1
 800f55a:	4413      	add	r3, r2
 800f55c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f55e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f560:	085b      	lsrs	r3, r3, #1
 800f562:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f564:	69fb      	ldr	r3, [r7, #28]
 800f566:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f56a:	2b00      	cmp	r3, #0
 800f56c:	d005      	beq.n	800f57a <gen_numname+0x5e>
 800f56e:	69fb      	ldr	r3, [r7, #28]
 800f570:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f574:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f578:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f57a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57c:	3301      	adds	r3, #1
 800f57e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f582:	2b0f      	cmp	r3, #15
 800f584:	d9e4      	bls.n	800f550 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f586:	687b      	ldr	r3, [r7, #4]
 800f588:	881b      	ldrh	r3, [r3, #0]
 800f58a:	2b00      	cmp	r3, #0
 800f58c:	d1d8      	bne.n	800f540 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f58e:	69fb      	ldr	r3, [r7, #28]
 800f590:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f592:	2307      	movs	r3, #7
 800f594:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f596:	683b      	ldr	r3, [r7, #0]
 800f598:	b2db      	uxtb	r3, r3
 800f59a:	f003 030f 	and.w	r3, r3, #15
 800f59e:	b2db      	uxtb	r3, r3
 800f5a0:	3330      	adds	r3, #48	; 0x30
 800f5a2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f5a6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5aa:	2b39      	cmp	r3, #57	; 0x39
 800f5ac:	d904      	bls.n	800f5b8 <gen_numname+0x9c>
 800f5ae:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f5b2:	3307      	adds	r3, #7
 800f5b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f5b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5ba:	1e5a      	subs	r2, r3, #1
 800f5bc:	62ba      	str	r2, [r7, #40]	; 0x28
 800f5be:	3330      	adds	r3, #48	; 0x30
 800f5c0:	443b      	add	r3, r7
 800f5c2:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f5c6:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f5ca:	683b      	ldr	r3, [r7, #0]
 800f5cc:	091b      	lsrs	r3, r3, #4
 800f5ce:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f5d0:	683b      	ldr	r3, [r7, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d1df      	bne.n	800f596 <gen_numname+0x7a>
	ns[i] = '~';
 800f5d6:	f107 0214 	add.w	r2, r7, #20
 800f5da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5dc:	4413      	add	r3, r2
 800f5de:	227e      	movs	r2, #126	; 0x7e
 800f5e0:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	627b      	str	r3, [r7, #36]	; 0x24
 800f5e6:	e002      	b.n	800f5ee <gen_numname+0xd2>
 800f5e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ea:	3301      	adds	r3, #1
 800f5ec:	627b      	str	r3, [r7, #36]	; 0x24
 800f5ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5f2:	429a      	cmp	r2, r3
 800f5f4:	d205      	bcs.n	800f602 <gen_numname+0xe6>
 800f5f6:	68fa      	ldr	r2, [r7, #12]
 800f5f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5fa:	4413      	add	r3, r2
 800f5fc:	781b      	ldrb	r3, [r3, #0]
 800f5fe:	2b20      	cmp	r3, #32
 800f600:	d1f2      	bne.n	800f5e8 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f604:	2b07      	cmp	r3, #7
 800f606:	d807      	bhi.n	800f618 <gen_numname+0xfc>
 800f608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f60a:	1c5a      	adds	r2, r3, #1
 800f60c:	62ba      	str	r2, [r7, #40]	; 0x28
 800f60e:	3330      	adds	r3, #48	; 0x30
 800f610:	443b      	add	r3, r7
 800f612:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f616:	e000      	b.n	800f61a <gen_numname+0xfe>
 800f618:	2120      	movs	r1, #32
 800f61a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f61c:	1c5a      	adds	r2, r3, #1
 800f61e:	627a      	str	r2, [r7, #36]	; 0x24
 800f620:	68fa      	ldr	r2, [r7, #12]
 800f622:	4413      	add	r3, r2
 800f624:	460a      	mov	r2, r1
 800f626:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	2b07      	cmp	r3, #7
 800f62c:	d9e9      	bls.n	800f602 <gen_numname+0xe6>
}
 800f62e:	bf00      	nop
 800f630:	bf00      	nop
 800f632:	3730      	adds	r7, #48	; 0x30
 800f634:	46bd      	mov	sp, r7
 800f636:	bd80      	pop	{r7, pc}

0800f638 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f638:	b480      	push	{r7}
 800f63a:	b085      	sub	sp, #20
 800f63c:	af00      	add	r7, sp, #0
 800f63e:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f640:	2300      	movs	r3, #0
 800f642:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f644:	230b      	movs	r3, #11
 800f646:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f648:	7bfb      	ldrb	r3, [r7, #15]
 800f64a:	b2da      	uxtb	r2, r3
 800f64c:	0852      	lsrs	r2, r2, #1
 800f64e:	01db      	lsls	r3, r3, #7
 800f650:	4313      	orrs	r3, r2
 800f652:	b2da      	uxtb	r2, r3
 800f654:	687b      	ldr	r3, [r7, #4]
 800f656:	1c59      	adds	r1, r3, #1
 800f658:	6079      	str	r1, [r7, #4]
 800f65a:	781b      	ldrb	r3, [r3, #0]
 800f65c:	4413      	add	r3, r2
 800f65e:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f660:	68bb      	ldr	r3, [r7, #8]
 800f662:	3b01      	subs	r3, #1
 800f664:	60bb      	str	r3, [r7, #8]
 800f666:	68bb      	ldr	r3, [r7, #8]
 800f668:	2b00      	cmp	r3, #0
 800f66a:	d1ed      	bne.n	800f648 <sum_sfn+0x10>
	return sum;
 800f66c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f66e:	4618      	mov	r0, r3
 800f670:	3714      	adds	r7, #20
 800f672:	46bd      	mov	sp, r7
 800f674:	bc80      	pop	{r7}
 800f676:	4770      	bx	lr

0800f678 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f678:	b580      	push	{r7, lr}
 800f67a:	b086      	sub	sp, #24
 800f67c:	af00      	add	r7, sp, #0
 800f67e:	6078      	str	r0, [r7, #4]
 800f680:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f682:	2304      	movs	r3, #4
 800f684:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f686:	687b      	ldr	r3, [r7, #4]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f68c:	23ff      	movs	r3, #255	; 0xff
 800f68e:	757b      	strb	r3, [r7, #21]
 800f690:	23ff      	movs	r3, #255	; 0xff
 800f692:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f694:	e081      	b.n	800f79a <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f696:	687b      	ldr	r3, [r7, #4]
 800f698:	69db      	ldr	r3, [r3, #28]
 800f69a:	4619      	mov	r1, r3
 800f69c:	6938      	ldr	r0, [r7, #16]
 800f69e:	f7ff f8bf 	bl	800e820 <move_window>
 800f6a2:	4603      	mov	r3, r0
 800f6a4:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f6a6:	7dfb      	ldrb	r3, [r7, #23]
 800f6a8:	2b00      	cmp	r3, #0
 800f6aa:	d17c      	bne.n	800f7a6 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f6ac:	687b      	ldr	r3, [r7, #4]
 800f6ae:	6a1b      	ldr	r3, [r3, #32]
 800f6b0:	781b      	ldrb	r3, [r3, #0]
 800f6b2:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f6b4:	7dbb      	ldrb	r3, [r7, #22]
 800f6b6:	2b00      	cmp	r3, #0
 800f6b8:	d102      	bne.n	800f6c0 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f6ba:	2304      	movs	r3, #4
 800f6bc:	75fb      	strb	r3, [r7, #23]
 800f6be:	e077      	b.n	800f7b0 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f6c0:	687b      	ldr	r3, [r7, #4]
 800f6c2:	6a1b      	ldr	r3, [r3, #32]
 800f6c4:	330b      	adds	r3, #11
 800f6c6:	781b      	ldrb	r3, [r3, #0]
 800f6c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6cc:	73fb      	strb	r3, [r7, #15]
 800f6ce:	687b      	ldr	r3, [r7, #4]
 800f6d0:	7bfa      	ldrb	r2, [r7, #15]
 800f6d2:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f6d4:	7dbb      	ldrb	r3, [r7, #22]
 800f6d6:	2be5      	cmp	r3, #229	; 0xe5
 800f6d8:	d00e      	beq.n	800f6f8 <dir_read+0x80>
 800f6da:	7dbb      	ldrb	r3, [r7, #22]
 800f6dc:	2b2e      	cmp	r3, #46	; 0x2e
 800f6de:	d00b      	beq.n	800f6f8 <dir_read+0x80>
 800f6e0:	7bfb      	ldrb	r3, [r7, #15]
 800f6e2:	f023 0320 	bic.w	r3, r3, #32
 800f6e6:	2b08      	cmp	r3, #8
 800f6e8:	bf0c      	ite	eq
 800f6ea:	2301      	moveq	r3, #1
 800f6ec:	2300      	movne	r3, #0
 800f6ee:	b2db      	uxtb	r3, r3
 800f6f0:	461a      	mov	r2, r3
 800f6f2:	683b      	ldr	r3, [r7, #0]
 800f6f4:	4293      	cmp	r3, r2
 800f6f6:	d002      	beq.n	800f6fe <dir_read+0x86>
				ord = 0xFF;
 800f6f8:	23ff      	movs	r3, #255	; 0xff
 800f6fa:	757b      	strb	r3, [r7, #21]
 800f6fc:	e044      	b.n	800f788 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f6fe:	7bfb      	ldrb	r3, [r7, #15]
 800f700:	2b0f      	cmp	r3, #15
 800f702:	d12f      	bne.n	800f764 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f704:	7dbb      	ldrb	r3, [r7, #22]
 800f706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f70a:	2b00      	cmp	r3, #0
 800f70c:	d00d      	beq.n	800f72a <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6a1b      	ldr	r3, [r3, #32]
 800f712:	7b5b      	ldrb	r3, [r3, #13]
 800f714:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f716:	7dbb      	ldrb	r3, [r7, #22]
 800f718:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f71c:	75bb      	strb	r3, [r7, #22]
 800f71e:	7dbb      	ldrb	r3, [r7, #22]
 800f720:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f722:	687b      	ldr	r3, [r7, #4]
 800f724:	695a      	ldr	r2, [r3, #20]
 800f726:	687b      	ldr	r3, [r7, #4]
 800f728:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f72a:	7dba      	ldrb	r2, [r7, #22]
 800f72c:	7d7b      	ldrb	r3, [r7, #21]
 800f72e:	429a      	cmp	r2, r3
 800f730:	d115      	bne.n	800f75e <dir_read+0xe6>
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6a1b      	ldr	r3, [r3, #32]
 800f736:	330d      	adds	r3, #13
 800f738:	781b      	ldrb	r3, [r3, #0]
 800f73a:	7d3a      	ldrb	r2, [r7, #20]
 800f73c:	429a      	cmp	r2, r3
 800f73e:	d10e      	bne.n	800f75e <dir_read+0xe6>
 800f740:	693b      	ldr	r3, [r7, #16]
 800f742:	68da      	ldr	r2, [r3, #12]
 800f744:	687b      	ldr	r3, [r7, #4]
 800f746:	6a1b      	ldr	r3, [r3, #32]
 800f748:	4619      	mov	r1, r3
 800f74a:	4610      	mov	r0, r2
 800f74c:	f7ff fe1a 	bl	800f384 <pick_lfn>
 800f750:	4603      	mov	r3, r0
 800f752:	2b00      	cmp	r3, #0
 800f754:	d003      	beq.n	800f75e <dir_read+0xe6>
 800f756:	7d7b      	ldrb	r3, [r7, #21]
 800f758:	3b01      	subs	r3, #1
 800f75a:	b2db      	uxtb	r3, r3
 800f75c:	e000      	b.n	800f760 <dir_read+0xe8>
 800f75e:	23ff      	movs	r3, #255	; 0xff
 800f760:	757b      	strb	r3, [r7, #21]
 800f762:	e011      	b.n	800f788 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f764:	7d7b      	ldrb	r3, [r7, #21]
 800f766:	2b00      	cmp	r3, #0
 800f768:	d109      	bne.n	800f77e <dir_read+0x106>
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	6a1b      	ldr	r3, [r3, #32]
 800f76e:	4618      	mov	r0, r3
 800f770:	f7ff ff62 	bl	800f638 <sum_sfn>
 800f774:	4603      	mov	r3, r0
 800f776:	461a      	mov	r2, r3
 800f778:	7d3b      	ldrb	r3, [r7, #20]
 800f77a:	4293      	cmp	r3, r2
 800f77c:	d015      	beq.n	800f7aa <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f77e:	687b      	ldr	r3, [r7, #4]
 800f780:	f04f 32ff 	mov.w	r2, #4294967295
 800f784:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f786:	e010      	b.n	800f7aa <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f788:	2100      	movs	r1, #0
 800f78a:	6878      	ldr	r0, [r7, #4]
 800f78c:	f7ff fc3f 	bl	800f00e <dir_next>
 800f790:	4603      	mov	r3, r0
 800f792:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f794:	7dfb      	ldrb	r3, [r7, #23]
 800f796:	2b00      	cmp	r3, #0
 800f798:	d109      	bne.n	800f7ae <dir_read+0x136>
	while (dp->sect) {
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	69db      	ldr	r3, [r3, #28]
 800f79e:	2b00      	cmp	r3, #0
 800f7a0:	f47f af79 	bne.w	800f696 <dir_read+0x1e>
 800f7a4:	e004      	b.n	800f7b0 <dir_read+0x138>
		if (res != FR_OK) break;
 800f7a6:	bf00      	nop
 800f7a8:	e002      	b.n	800f7b0 <dir_read+0x138>
					break;
 800f7aa:	bf00      	nop
 800f7ac:	e000      	b.n	800f7b0 <dir_read+0x138>
		if (res != FR_OK) break;
 800f7ae:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f7b0:	7dfb      	ldrb	r3, [r7, #23]
 800f7b2:	2b00      	cmp	r3, #0
 800f7b4:	d002      	beq.n	800f7bc <dir_read+0x144>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	2200      	movs	r2, #0
 800f7ba:	61da      	str	r2, [r3, #28]
	return res;
 800f7bc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f7be:	4618      	mov	r0, r3
 800f7c0:	3718      	adds	r7, #24
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd80      	pop	{r7, pc}

0800f7c6 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b086      	sub	sp, #24
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f7ce:	687b      	ldr	r3, [r7, #4]
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f7d4:	2100      	movs	r1, #0
 800f7d6:	6878      	ldr	r0, [r7, #4]
 800f7d8:	f7ff fb9e 	bl	800ef18 <dir_sdi>
 800f7dc:	4603      	mov	r3, r0
 800f7de:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f7e0:	7dfb      	ldrb	r3, [r7, #23]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d001      	beq.n	800f7ea <dir_find+0x24>
 800f7e6:	7dfb      	ldrb	r3, [r7, #23]
 800f7e8:	e0a9      	b.n	800f93e <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f7ea:	23ff      	movs	r3, #255	; 0xff
 800f7ec:	753b      	strb	r3, [r7, #20]
 800f7ee:	7d3b      	ldrb	r3, [r7, #20]
 800f7f0:	757b      	strb	r3, [r7, #21]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	f04f 32ff 	mov.w	r2, #4294967295
 800f7f8:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	69db      	ldr	r3, [r3, #28]
 800f7fe:	4619      	mov	r1, r3
 800f800:	6938      	ldr	r0, [r7, #16]
 800f802:	f7ff f80d 	bl	800e820 <move_window>
 800f806:	4603      	mov	r3, r0
 800f808:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f80a:	7dfb      	ldrb	r3, [r7, #23]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	f040 8090 	bne.w	800f932 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	6a1b      	ldr	r3, [r3, #32]
 800f816:	781b      	ldrb	r3, [r3, #0]
 800f818:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f81a:	7dbb      	ldrb	r3, [r7, #22]
 800f81c:	2b00      	cmp	r3, #0
 800f81e:	d102      	bne.n	800f826 <dir_find+0x60>
 800f820:	2304      	movs	r3, #4
 800f822:	75fb      	strb	r3, [r7, #23]
 800f824:	e08a      	b.n	800f93c <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	6a1b      	ldr	r3, [r3, #32]
 800f82a:	330b      	adds	r3, #11
 800f82c:	781b      	ldrb	r3, [r3, #0]
 800f82e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f832:	73fb      	strb	r3, [r7, #15]
 800f834:	687b      	ldr	r3, [r7, #4]
 800f836:	7bfa      	ldrb	r2, [r7, #15]
 800f838:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f83a:	7dbb      	ldrb	r3, [r7, #22]
 800f83c:	2be5      	cmp	r3, #229	; 0xe5
 800f83e:	d007      	beq.n	800f850 <dir_find+0x8a>
 800f840:	7bfb      	ldrb	r3, [r7, #15]
 800f842:	f003 0308 	and.w	r3, r3, #8
 800f846:	2b00      	cmp	r3, #0
 800f848:	d009      	beq.n	800f85e <dir_find+0x98>
 800f84a:	7bfb      	ldrb	r3, [r7, #15]
 800f84c:	2b0f      	cmp	r3, #15
 800f84e:	d006      	beq.n	800f85e <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f850:	23ff      	movs	r3, #255	; 0xff
 800f852:	757b      	strb	r3, [r7, #21]
 800f854:	687b      	ldr	r3, [r7, #4]
 800f856:	f04f 32ff 	mov.w	r2, #4294967295
 800f85a:	631a      	str	r2, [r3, #48]	; 0x30
 800f85c:	e05e      	b.n	800f91c <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f85e:	7bfb      	ldrb	r3, [r7, #15]
 800f860:	2b0f      	cmp	r3, #15
 800f862:	d136      	bne.n	800f8d2 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f86a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f86e:	2b00      	cmp	r3, #0
 800f870:	d154      	bne.n	800f91c <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f872:	7dbb      	ldrb	r3, [r7, #22]
 800f874:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d00d      	beq.n	800f898 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	6a1b      	ldr	r3, [r3, #32]
 800f880:	7b5b      	ldrb	r3, [r3, #13]
 800f882:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f884:	7dbb      	ldrb	r3, [r7, #22]
 800f886:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f88a:	75bb      	strb	r3, [r7, #22]
 800f88c:	7dbb      	ldrb	r3, [r7, #22]
 800f88e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	695a      	ldr	r2, [r3, #20]
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f898:	7dba      	ldrb	r2, [r7, #22]
 800f89a:	7d7b      	ldrb	r3, [r7, #21]
 800f89c:	429a      	cmp	r2, r3
 800f89e:	d115      	bne.n	800f8cc <dir_find+0x106>
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	6a1b      	ldr	r3, [r3, #32]
 800f8a4:	330d      	adds	r3, #13
 800f8a6:	781b      	ldrb	r3, [r3, #0]
 800f8a8:	7d3a      	ldrb	r2, [r7, #20]
 800f8aa:	429a      	cmp	r2, r3
 800f8ac:	d10e      	bne.n	800f8cc <dir_find+0x106>
 800f8ae:	693b      	ldr	r3, [r7, #16]
 800f8b0:	68da      	ldr	r2, [r3, #12]
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a1b      	ldr	r3, [r3, #32]
 800f8b6:	4619      	mov	r1, r3
 800f8b8:	4610      	mov	r0, r2
 800f8ba:	f7ff fcf3 	bl	800f2a4 <cmp_lfn>
 800f8be:	4603      	mov	r3, r0
 800f8c0:	2b00      	cmp	r3, #0
 800f8c2:	d003      	beq.n	800f8cc <dir_find+0x106>
 800f8c4:	7d7b      	ldrb	r3, [r7, #21]
 800f8c6:	3b01      	subs	r3, #1
 800f8c8:	b2db      	uxtb	r3, r3
 800f8ca:	e000      	b.n	800f8ce <dir_find+0x108>
 800f8cc:	23ff      	movs	r3, #255	; 0xff
 800f8ce:	757b      	strb	r3, [r7, #21]
 800f8d0:	e024      	b.n	800f91c <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f8d2:	7d7b      	ldrb	r3, [r7, #21]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d109      	bne.n	800f8ec <dir_find+0x126>
 800f8d8:	687b      	ldr	r3, [r7, #4]
 800f8da:	6a1b      	ldr	r3, [r3, #32]
 800f8dc:	4618      	mov	r0, r3
 800f8de:	f7ff feab 	bl	800f638 <sum_sfn>
 800f8e2:	4603      	mov	r3, r0
 800f8e4:	461a      	mov	r2, r3
 800f8e6:	7d3b      	ldrb	r3, [r7, #20]
 800f8e8:	4293      	cmp	r3, r2
 800f8ea:	d024      	beq.n	800f936 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f8ec:	687b      	ldr	r3, [r7, #4]
 800f8ee:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f8f2:	f003 0301 	and.w	r3, r3, #1
 800f8f6:	2b00      	cmp	r3, #0
 800f8f8:	d10a      	bne.n	800f910 <dir_find+0x14a>
 800f8fa:	687b      	ldr	r3, [r7, #4]
 800f8fc:	6a18      	ldr	r0, [r3, #32]
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	3324      	adds	r3, #36	; 0x24
 800f902:	220b      	movs	r2, #11
 800f904:	4619      	mov	r1, r3
 800f906:	f7fe fda1 	bl	800e44c <mem_cmp>
 800f90a:	4603      	mov	r3, r0
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	d014      	beq.n	800f93a <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f910:	23ff      	movs	r3, #255	; 0xff
 800f912:	757b      	strb	r3, [r7, #21]
 800f914:	687b      	ldr	r3, [r7, #4]
 800f916:	f04f 32ff 	mov.w	r2, #4294967295
 800f91a:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f91c:	2100      	movs	r1, #0
 800f91e:	6878      	ldr	r0, [r7, #4]
 800f920:	f7ff fb75 	bl	800f00e <dir_next>
 800f924:	4603      	mov	r3, r0
 800f926:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f928:	7dfb      	ldrb	r3, [r7, #23]
 800f92a:	2b00      	cmp	r3, #0
 800f92c:	f43f af65 	beq.w	800f7fa <dir_find+0x34>
 800f930:	e004      	b.n	800f93c <dir_find+0x176>
		if (res != FR_OK) break;
 800f932:	bf00      	nop
 800f934:	e002      	b.n	800f93c <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f936:	bf00      	nop
 800f938:	e000      	b.n	800f93c <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f93a:	bf00      	nop

	return res;
 800f93c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f93e:	4618      	mov	r0, r3
 800f940:	3718      	adds	r7, #24
 800f942:	46bd      	mov	sp, r7
 800f944:	bd80      	pop	{r7, pc}
	...

0800f948 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f948:	b580      	push	{r7, lr}
 800f94a:	b08c      	sub	sp, #48	; 0x30
 800f94c:	af00      	add	r7, sp, #0
 800f94e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f950:	687b      	ldr	r3, [r7, #4]
 800f952:	681b      	ldr	r3, [r3, #0]
 800f954:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f956:	687b      	ldr	r3, [r7, #4]
 800f958:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f95c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d001      	beq.n	800f968 <dir_register+0x20>
 800f964:	2306      	movs	r3, #6
 800f966:	e0e0      	b.n	800fb2a <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f968:	2300      	movs	r3, #0
 800f96a:	627b      	str	r3, [r7, #36]	; 0x24
 800f96c:	e002      	b.n	800f974 <dir_register+0x2c>
 800f96e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f970:	3301      	adds	r3, #1
 800f972:	627b      	str	r3, [r7, #36]	; 0x24
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	68da      	ldr	r2, [r3, #12]
 800f978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f97a:	005b      	lsls	r3, r3, #1
 800f97c:	4413      	add	r3, r2
 800f97e:	881b      	ldrh	r3, [r3, #0]
 800f980:	2b00      	cmp	r3, #0
 800f982:	d1f4      	bne.n	800f96e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f984:	687b      	ldr	r3, [r7, #4]
 800f986:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f98a:	f107 030c 	add.w	r3, r7, #12
 800f98e:	220c      	movs	r2, #12
 800f990:	4618      	mov	r0, r3
 800f992:	f7fe fd21 	bl	800e3d8 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	f003 0301 	and.w	r3, r3, #1
 800f99c:	2b00      	cmp	r3, #0
 800f99e:	d032      	beq.n	800fa06 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f9a0:	687b      	ldr	r3, [r7, #4]
 800f9a2:	2240      	movs	r2, #64	; 0x40
 800f9a4:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f9a8:	2301      	movs	r3, #1
 800f9aa:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9ac:	e016      	b.n	800f9dc <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f9ae:	687b      	ldr	r3, [r7, #4]
 800f9b0:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f9b4:	69fb      	ldr	r3, [r7, #28]
 800f9b6:	68da      	ldr	r2, [r3, #12]
 800f9b8:	f107 010c 	add.w	r1, r7, #12
 800f9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9be:	f7ff fdad 	bl	800f51c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f9c2:	6878      	ldr	r0, [r7, #4]
 800f9c4:	f7ff feff 	bl	800f7c6 <dir_find>
 800f9c8:	4603      	mov	r3, r0
 800f9ca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f9ce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d106      	bne.n	800f9e4 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f9d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9d8:	3301      	adds	r3, #1
 800f9da:	62bb      	str	r3, [r7, #40]	; 0x28
 800f9dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9de:	2b63      	cmp	r3, #99	; 0x63
 800f9e0:	d9e5      	bls.n	800f9ae <dir_register+0x66>
 800f9e2:	e000      	b.n	800f9e6 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f9e4:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f9e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f9e8:	2b64      	cmp	r3, #100	; 0x64
 800f9ea:	d101      	bne.n	800f9f0 <dir_register+0xa8>
 800f9ec:	2307      	movs	r3, #7
 800f9ee:	e09c      	b.n	800fb2a <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f9f0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f9f4:	2b04      	cmp	r3, #4
 800f9f6:	d002      	beq.n	800f9fe <dir_register+0xb6>
 800f9f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f9fc:	e095      	b.n	800fb2a <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f9fe:	7dfa      	ldrb	r2, [r7, #23]
 800fa00:	687b      	ldr	r3, [r7, #4]
 800fa02:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800fa06:	7dfb      	ldrb	r3, [r7, #23]
 800fa08:	f003 0302 	and.w	r3, r3, #2
 800fa0c:	2b00      	cmp	r3, #0
 800fa0e:	d007      	beq.n	800fa20 <dir_register+0xd8>
 800fa10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fa12:	330c      	adds	r3, #12
 800fa14:	4a47      	ldr	r2, [pc, #284]	; (800fb34 <dir_register+0x1ec>)
 800fa16:	fba2 2303 	umull	r2, r3, r2, r3
 800fa1a:	089b      	lsrs	r3, r3, #2
 800fa1c:	3301      	adds	r3, #1
 800fa1e:	e000      	b.n	800fa22 <dir_register+0xda>
 800fa20:	2301      	movs	r3, #1
 800fa22:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800fa24:	6a39      	ldr	r1, [r7, #32]
 800fa26:	6878      	ldr	r0, [r7, #4]
 800fa28:	f7ff fbb6 	bl	800f198 <dir_alloc>
 800fa2c:	4603      	mov	r3, r0
 800fa2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800fa32:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	d148      	bne.n	800facc <dir_register+0x184>
 800fa3a:	6a3b      	ldr	r3, [r7, #32]
 800fa3c:	3b01      	subs	r3, #1
 800fa3e:	623b      	str	r3, [r7, #32]
 800fa40:	6a3b      	ldr	r3, [r7, #32]
 800fa42:	2b00      	cmp	r3, #0
 800fa44:	d042      	beq.n	800facc <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	695a      	ldr	r2, [r3, #20]
 800fa4a:	6a3b      	ldr	r3, [r7, #32]
 800fa4c:	015b      	lsls	r3, r3, #5
 800fa4e:	1ad3      	subs	r3, r2, r3
 800fa50:	4619      	mov	r1, r3
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f7ff fa60 	bl	800ef18 <dir_sdi>
 800fa58:	4603      	mov	r3, r0
 800fa5a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fa5e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	d132      	bne.n	800facc <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800fa66:	687b      	ldr	r3, [r7, #4]
 800fa68:	3324      	adds	r3, #36	; 0x24
 800fa6a:	4618      	mov	r0, r3
 800fa6c:	f7ff fde4 	bl	800f638 <sum_sfn>
 800fa70:	4603      	mov	r3, r0
 800fa72:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800fa74:	687b      	ldr	r3, [r7, #4]
 800fa76:	69db      	ldr	r3, [r3, #28]
 800fa78:	4619      	mov	r1, r3
 800fa7a:	69f8      	ldr	r0, [r7, #28]
 800fa7c:	f7fe fed0 	bl	800e820 <move_window>
 800fa80:	4603      	mov	r3, r0
 800fa82:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800fa86:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d11d      	bne.n	800faca <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800fa8e:	69fb      	ldr	r3, [r7, #28]
 800fa90:	68d8      	ldr	r0, [r3, #12]
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	6a19      	ldr	r1, [r3, #32]
 800fa96:	6a3b      	ldr	r3, [r7, #32]
 800fa98:	b2da      	uxtb	r2, r3
 800fa9a:	7efb      	ldrb	r3, [r7, #27]
 800fa9c:	f7ff fcd6 	bl	800f44c <put_lfn>
				fs->wflag = 1;
 800faa0:	69fb      	ldr	r3, [r7, #28]
 800faa2:	2201      	movs	r2, #1
 800faa4:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800faa6:	2100      	movs	r1, #0
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	f7ff fab0 	bl	800f00e <dir_next>
 800faae:	4603      	mov	r3, r0
 800fab0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800fab4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fab8:	2b00      	cmp	r3, #0
 800faba:	d107      	bne.n	800facc <dir_register+0x184>
 800fabc:	6a3b      	ldr	r3, [r7, #32]
 800fabe:	3b01      	subs	r3, #1
 800fac0:	623b      	str	r3, [r7, #32]
 800fac2:	6a3b      	ldr	r3, [r7, #32]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d1d5      	bne.n	800fa74 <dir_register+0x12c>
 800fac8:	e000      	b.n	800facc <dir_register+0x184>
				if (res != FR_OK) break;
 800faca:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800facc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d128      	bne.n	800fb26 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800fad4:	687b      	ldr	r3, [r7, #4]
 800fad6:	69db      	ldr	r3, [r3, #28]
 800fad8:	4619      	mov	r1, r3
 800fada:	69f8      	ldr	r0, [r7, #28]
 800fadc:	f7fe fea0 	bl	800e820 <move_window>
 800fae0:	4603      	mov	r3, r0
 800fae2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800fae6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800faea:	2b00      	cmp	r3, #0
 800faec:	d11b      	bne.n	800fb26 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800faee:	687b      	ldr	r3, [r7, #4]
 800faf0:	6a1b      	ldr	r3, [r3, #32]
 800faf2:	2220      	movs	r2, #32
 800faf4:	2100      	movs	r1, #0
 800faf6:	4618      	mov	r0, r3
 800faf8:	f7fe fc8e 	bl	800e418 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	6a18      	ldr	r0, [r3, #32]
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	3324      	adds	r3, #36	; 0x24
 800fb04:	220b      	movs	r2, #11
 800fb06:	4619      	mov	r1, r3
 800fb08:	f7fe fc66 	bl	800e3d8 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800fb12:	687b      	ldr	r3, [r7, #4]
 800fb14:	6a1b      	ldr	r3, [r3, #32]
 800fb16:	330c      	adds	r3, #12
 800fb18:	f002 0218 	and.w	r2, r2, #24
 800fb1c:	b2d2      	uxtb	r2, r2
 800fb1e:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800fb20:	69fb      	ldr	r3, [r7, #28]
 800fb22:	2201      	movs	r2, #1
 800fb24:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800fb26:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800fb2a:	4618      	mov	r0, r3
 800fb2c:	3730      	adds	r7, #48	; 0x30
 800fb2e:	46bd      	mov	sp, r7
 800fb30:	bd80      	pop	{r7, pc}
 800fb32:	bf00      	nop
 800fb34:	4ec4ec4f 	.word	0x4ec4ec4f

0800fb38 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800fb38:	b580      	push	{r7, lr}
 800fb3a:	b088      	sub	sp, #32
 800fb3c:	af00      	add	r7, sp, #0
 800fb3e:	6078      	str	r0, [r7, #4]
 800fb40:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	681b      	ldr	r3, [r3, #0]
 800fb46:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	2200      	movs	r2, #0
 800fb4c:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fb4e:	687b      	ldr	r3, [r7, #4]
 800fb50:	69db      	ldr	r3, [r3, #28]
 800fb52:	2b00      	cmp	r3, #0
 800fb54:	f000 80c9 	beq.w	800fcea <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800fb58:	687b      	ldr	r3, [r7, #4]
 800fb5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fb5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb60:	d032      	beq.n	800fbc8 <get_fileinfo+0x90>
			i = j = 0;
 800fb62:	2300      	movs	r3, #0
 800fb64:	61bb      	str	r3, [r7, #24]
 800fb66:	69bb      	ldr	r3, [r7, #24]
 800fb68:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fb6a:	e01b      	b.n	800fba4 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800fb6c:	89fb      	ldrh	r3, [r7, #14]
 800fb6e:	2100      	movs	r1, #0
 800fb70:	4618      	mov	r0, r3
 800fb72:	f001 fb23 	bl	80111bc <ff_convert>
 800fb76:	4603      	mov	r3, r0
 800fb78:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800fb7a:	89fb      	ldrh	r3, [r7, #14]
 800fb7c:	2b00      	cmp	r3, #0
 800fb7e:	d102      	bne.n	800fb86 <get_fileinfo+0x4e>
 800fb80:	2300      	movs	r3, #0
 800fb82:	61fb      	str	r3, [r7, #28]
 800fb84:	e01a      	b.n	800fbbc <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	2bfe      	cmp	r3, #254	; 0xfe
 800fb8a:	d902      	bls.n	800fb92 <get_fileinfo+0x5a>
 800fb8c:	2300      	movs	r3, #0
 800fb8e:	61fb      	str	r3, [r7, #28]
 800fb90:	e014      	b.n	800fbbc <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800fb92:	69fb      	ldr	r3, [r7, #28]
 800fb94:	1c5a      	adds	r2, r3, #1
 800fb96:	61fa      	str	r2, [r7, #28]
 800fb98:	89fa      	ldrh	r2, [r7, #14]
 800fb9a:	b2d1      	uxtb	r1, r2
 800fb9c:	683a      	ldr	r2, [r7, #0]
 800fb9e:	4413      	add	r3, r2
 800fba0:	460a      	mov	r2, r1
 800fba2:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800fba4:	693b      	ldr	r3, [r7, #16]
 800fba6:	68da      	ldr	r2, [r3, #12]
 800fba8:	69bb      	ldr	r3, [r7, #24]
 800fbaa:	1c59      	adds	r1, r3, #1
 800fbac:	61b9      	str	r1, [r7, #24]
 800fbae:	005b      	lsls	r3, r3, #1
 800fbb0:	4413      	add	r3, r2
 800fbb2:	881b      	ldrh	r3, [r3, #0]
 800fbb4:	81fb      	strh	r3, [r7, #14]
 800fbb6:	89fb      	ldrh	r3, [r7, #14]
 800fbb8:	2b00      	cmp	r3, #0
 800fbba:	d1d7      	bne.n	800fb6c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800fbbc:	683a      	ldr	r2, [r7, #0]
 800fbbe:	69fb      	ldr	r3, [r7, #28]
 800fbc0:	4413      	add	r3, r2
 800fbc2:	3316      	adds	r3, #22
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800fbc8:	2300      	movs	r3, #0
 800fbca:	61bb      	str	r3, [r7, #24]
 800fbcc:	69bb      	ldr	r3, [r7, #24]
 800fbce:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800fbd0:	683a      	ldr	r2, [r7, #0]
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	3316      	adds	r3, #22
 800fbd8:	781b      	ldrb	r3, [r3, #0]
 800fbda:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800fbdc:	e04c      	b.n	800fc78 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800fbde:	687b      	ldr	r3, [r7, #4]
 800fbe0:	6a1a      	ldr	r2, [r3, #32]
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	1c59      	adds	r1, r3, #1
 800fbe6:	61f9      	str	r1, [r7, #28]
 800fbe8:	4413      	add	r3, r2
 800fbea:	781b      	ldrb	r3, [r3, #0]
 800fbec:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800fbee:	7dfb      	ldrb	r3, [r7, #23]
 800fbf0:	2b20      	cmp	r3, #32
 800fbf2:	d100      	bne.n	800fbf6 <get_fileinfo+0xbe>
 800fbf4:	e040      	b.n	800fc78 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800fbf6:	7dfb      	ldrb	r3, [r7, #23]
 800fbf8:	2b05      	cmp	r3, #5
 800fbfa:	d101      	bne.n	800fc00 <get_fileinfo+0xc8>
 800fbfc:	23e5      	movs	r3, #229	; 0xe5
 800fbfe:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	2b09      	cmp	r3, #9
 800fc04:	d10f      	bne.n	800fc26 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800fc06:	89bb      	ldrh	r3, [r7, #12]
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d105      	bne.n	800fc18 <get_fileinfo+0xe0>
 800fc0c:	683a      	ldr	r2, [r7, #0]
 800fc0e:	69bb      	ldr	r3, [r7, #24]
 800fc10:	4413      	add	r3, r2
 800fc12:	3316      	adds	r3, #22
 800fc14:	222e      	movs	r2, #46	; 0x2e
 800fc16:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	1c5a      	adds	r2, r3, #1
 800fc1c:	61ba      	str	r2, [r7, #24]
 800fc1e:	683a      	ldr	r2, [r7, #0]
 800fc20:	4413      	add	r3, r2
 800fc22:	222e      	movs	r2, #46	; 0x2e
 800fc24:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800fc26:	683a      	ldr	r2, [r7, #0]
 800fc28:	69bb      	ldr	r3, [r7, #24]
 800fc2a:	4413      	add	r3, r2
 800fc2c:	3309      	adds	r3, #9
 800fc2e:	7dfa      	ldrb	r2, [r7, #23]
 800fc30:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800fc32:	89bb      	ldrh	r3, [r7, #12]
 800fc34:	2b00      	cmp	r3, #0
 800fc36:	d11c      	bne.n	800fc72 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800fc38:	7dfb      	ldrb	r3, [r7, #23]
 800fc3a:	2b40      	cmp	r3, #64	; 0x40
 800fc3c:	d913      	bls.n	800fc66 <get_fileinfo+0x12e>
 800fc3e:	7dfb      	ldrb	r3, [r7, #23]
 800fc40:	2b5a      	cmp	r3, #90	; 0x5a
 800fc42:	d810      	bhi.n	800fc66 <get_fileinfo+0x12e>
 800fc44:	687b      	ldr	r3, [r7, #4]
 800fc46:	6a1b      	ldr	r3, [r3, #32]
 800fc48:	330c      	adds	r3, #12
 800fc4a:	781b      	ldrb	r3, [r3, #0]
 800fc4c:	461a      	mov	r2, r3
 800fc4e:	69fb      	ldr	r3, [r7, #28]
 800fc50:	2b08      	cmp	r3, #8
 800fc52:	d901      	bls.n	800fc58 <get_fileinfo+0x120>
 800fc54:	2310      	movs	r3, #16
 800fc56:	e000      	b.n	800fc5a <get_fileinfo+0x122>
 800fc58:	2308      	movs	r3, #8
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	d002      	beq.n	800fc66 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800fc60:	7dfb      	ldrb	r3, [r7, #23]
 800fc62:	3320      	adds	r3, #32
 800fc64:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800fc66:	683a      	ldr	r2, [r7, #0]
 800fc68:	69bb      	ldr	r3, [r7, #24]
 800fc6a:	4413      	add	r3, r2
 800fc6c:	3316      	adds	r3, #22
 800fc6e:	7dfa      	ldrb	r2, [r7, #23]
 800fc70:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800fc72:	69bb      	ldr	r3, [r7, #24]
 800fc74:	3301      	adds	r3, #1
 800fc76:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800fc78:	69fb      	ldr	r3, [r7, #28]
 800fc7a:	2b0a      	cmp	r3, #10
 800fc7c:	d9af      	bls.n	800fbde <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800fc7e:	89bb      	ldrh	r3, [r7, #12]
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d10d      	bne.n	800fca0 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800fc84:	683a      	ldr	r2, [r7, #0]
 800fc86:	69bb      	ldr	r3, [r7, #24]
 800fc88:	4413      	add	r3, r2
 800fc8a:	3316      	adds	r3, #22
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800fc90:	687b      	ldr	r3, [r7, #4]
 800fc92:	6a1b      	ldr	r3, [r3, #32]
 800fc94:	330c      	adds	r3, #12
 800fc96:	781b      	ldrb	r3, [r3, #0]
 800fc98:	2b00      	cmp	r3, #0
 800fc9a:	d101      	bne.n	800fca0 <get_fileinfo+0x168>
 800fc9c:	2300      	movs	r3, #0
 800fc9e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800fca0:	683a      	ldr	r2, [r7, #0]
 800fca2:	69bb      	ldr	r3, [r7, #24]
 800fca4:	4413      	add	r3, r2
 800fca6:	3309      	adds	r3, #9
 800fca8:	2200      	movs	r2, #0
 800fcaa:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fcac:	687b      	ldr	r3, [r7, #4]
 800fcae:	6a1b      	ldr	r3, [r3, #32]
 800fcb0:	7ada      	ldrb	r2, [r3, #11]
 800fcb2:	683b      	ldr	r3, [r7, #0]
 800fcb4:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	331c      	adds	r3, #28
 800fcbc:	4618      	mov	r0, r3
 800fcbe:	f7fe fb24 	bl	800e30a <ld_dword>
 800fcc2:	4602      	mov	r2, r0
 800fcc4:	683b      	ldr	r3, [r7, #0]
 800fcc6:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	6a1b      	ldr	r3, [r3, #32]
 800fccc:	3316      	adds	r3, #22
 800fcce:	4618      	mov	r0, r3
 800fcd0:	f7fe fb1b 	bl	800e30a <ld_dword>
 800fcd4:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fcd6:	68bb      	ldr	r3, [r7, #8]
 800fcd8:	b29a      	uxth	r2, r3
 800fcda:	683b      	ldr	r3, [r7, #0]
 800fcdc:	80da      	strh	r2, [r3, #6]
 800fcde:	68bb      	ldr	r3, [r7, #8]
 800fce0:	0c1b      	lsrs	r3, r3, #16
 800fce2:	b29a      	uxth	r2, r3
 800fce4:	683b      	ldr	r3, [r7, #0]
 800fce6:	809a      	strh	r2, [r3, #4]
 800fce8:	e000      	b.n	800fcec <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fcea:	bf00      	nop
}
 800fcec:	3720      	adds	r7, #32
 800fcee:	46bd      	mov	sp, r7
 800fcf0:	bd80      	pop	{r7, pc}
	...

0800fcf4 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fcf4:	b580      	push	{r7, lr}
 800fcf6:	b08a      	sub	sp, #40	; 0x28
 800fcf8:	af00      	add	r7, sp, #0
 800fcfa:	6078      	str	r0, [r7, #4]
 800fcfc:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fcfe:	683b      	ldr	r3, [r7, #0]
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	613b      	str	r3, [r7, #16]
 800fd04:	687b      	ldr	r3, [r7, #4]
 800fd06:	681b      	ldr	r3, [r3, #0]
 800fd08:	68db      	ldr	r3, [r3, #12]
 800fd0a:	60fb      	str	r3, [r7, #12]
 800fd0c:	2300      	movs	r3, #0
 800fd0e:	617b      	str	r3, [r7, #20]
 800fd10:	697b      	ldr	r3, [r7, #20]
 800fd12:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fd14:	69bb      	ldr	r3, [r7, #24]
 800fd16:	1c5a      	adds	r2, r3, #1
 800fd18:	61ba      	str	r2, [r7, #24]
 800fd1a:	693a      	ldr	r2, [r7, #16]
 800fd1c:	4413      	add	r3, r2
 800fd1e:	781b      	ldrb	r3, [r3, #0]
 800fd20:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fd22:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd24:	2b1f      	cmp	r3, #31
 800fd26:	d940      	bls.n	800fdaa <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fd28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd2a:	2b2f      	cmp	r3, #47	; 0x2f
 800fd2c:	d006      	beq.n	800fd3c <create_name+0x48>
 800fd2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd30:	2b5c      	cmp	r3, #92	; 0x5c
 800fd32:	d110      	bne.n	800fd56 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fd34:	e002      	b.n	800fd3c <create_name+0x48>
 800fd36:	69bb      	ldr	r3, [r7, #24]
 800fd38:	3301      	adds	r3, #1
 800fd3a:	61bb      	str	r3, [r7, #24]
 800fd3c:	693a      	ldr	r2, [r7, #16]
 800fd3e:	69bb      	ldr	r3, [r7, #24]
 800fd40:	4413      	add	r3, r2
 800fd42:	781b      	ldrb	r3, [r3, #0]
 800fd44:	2b2f      	cmp	r3, #47	; 0x2f
 800fd46:	d0f6      	beq.n	800fd36 <create_name+0x42>
 800fd48:	693a      	ldr	r2, [r7, #16]
 800fd4a:	69bb      	ldr	r3, [r7, #24]
 800fd4c:	4413      	add	r3, r2
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	2b5c      	cmp	r3, #92	; 0x5c
 800fd52:	d0f0      	beq.n	800fd36 <create_name+0x42>
			break;
 800fd54:	e02a      	b.n	800fdac <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800fd56:	697b      	ldr	r3, [r7, #20]
 800fd58:	2bfe      	cmp	r3, #254	; 0xfe
 800fd5a:	d901      	bls.n	800fd60 <create_name+0x6c>
 800fd5c:	2306      	movs	r3, #6
 800fd5e:	e17d      	b.n	801005c <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fd60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd62:	b2db      	uxtb	r3, r3
 800fd64:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fd66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd68:	2101      	movs	r1, #1
 800fd6a:	4618      	mov	r0, r3
 800fd6c:	f001 fa26 	bl	80111bc <ff_convert>
 800fd70:	4603      	mov	r3, r0
 800fd72:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fd74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d101      	bne.n	800fd7e <create_name+0x8a>
 800fd7a:	2306      	movs	r3, #6
 800fd7c:	e16e      	b.n	801005c <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fd7e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd80:	2b7f      	cmp	r3, #127	; 0x7f
 800fd82:	d809      	bhi.n	800fd98 <create_name+0xa4>
 800fd84:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd86:	4619      	mov	r1, r3
 800fd88:	488d      	ldr	r0, [pc, #564]	; (800ffc0 <create_name+0x2cc>)
 800fd8a:	f7fe fb85 	bl	800e498 <chk_chr>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d001      	beq.n	800fd98 <create_name+0xa4>
 800fd94:	2306      	movs	r3, #6
 800fd96:	e161      	b.n	801005c <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800fd98:	697b      	ldr	r3, [r7, #20]
 800fd9a:	1c5a      	adds	r2, r3, #1
 800fd9c:	617a      	str	r2, [r7, #20]
 800fd9e:	005b      	lsls	r3, r3, #1
 800fda0:	68fa      	ldr	r2, [r7, #12]
 800fda2:	4413      	add	r3, r2
 800fda4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fda6:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fda8:	e7b4      	b.n	800fd14 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fdaa:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fdac:	693a      	ldr	r2, [r7, #16]
 800fdae:	69bb      	ldr	r3, [r7, #24]
 800fdb0:	441a      	add	r2, r3
 800fdb2:	683b      	ldr	r3, [r7, #0]
 800fdb4:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fdb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fdb8:	2b1f      	cmp	r3, #31
 800fdba:	d801      	bhi.n	800fdc0 <create_name+0xcc>
 800fdbc:	2304      	movs	r3, #4
 800fdbe:	e000      	b.n	800fdc2 <create_name+0xce>
 800fdc0:	2300      	movs	r3, #0
 800fdc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fdc6:	e011      	b.n	800fdec <create_name+0xf8>
		w = lfn[di - 1];
 800fdc8:	697b      	ldr	r3, [r7, #20]
 800fdca:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fdce:	3b01      	subs	r3, #1
 800fdd0:	005b      	lsls	r3, r3, #1
 800fdd2:	68fa      	ldr	r2, [r7, #12]
 800fdd4:	4413      	add	r3, r2
 800fdd6:	881b      	ldrh	r3, [r3, #0]
 800fdd8:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fdda:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fddc:	2b20      	cmp	r3, #32
 800fdde:	d002      	beq.n	800fde6 <create_name+0xf2>
 800fde0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fde2:	2b2e      	cmp	r3, #46	; 0x2e
 800fde4:	d106      	bne.n	800fdf4 <create_name+0x100>
		di--;
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	3b01      	subs	r3, #1
 800fdea:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	2b00      	cmp	r3, #0
 800fdf0:	d1ea      	bne.n	800fdc8 <create_name+0xd4>
 800fdf2:	e000      	b.n	800fdf6 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fdf4:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fdf6:	697b      	ldr	r3, [r7, #20]
 800fdf8:	005b      	lsls	r3, r3, #1
 800fdfa:	68fa      	ldr	r2, [r7, #12]
 800fdfc:	4413      	add	r3, r2
 800fdfe:	2200      	movs	r2, #0
 800fe00:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fe02:	697b      	ldr	r3, [r7, #20]
 800fe04:	2b00      	cmp	r3, #0
 800fe06:	d101      	bne.n	800fe0c <create_name+0x118>
 800fe08:	2306      	movs	r3, #6
 800fe0a:	e127      	b.n	801005c <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	3324      	adds	r3, #36	; 0x24
 800fe10:	220b      	movs	r2, #11
 800fe12:	2120      	movs	r1, #32
 800fe14:	4618      	mov	r0, r3
 800fe16:	f7fe faff 	bl	800e418 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fe1a:	2300      	movs	r3, #0
 800fe1c:	61bb      	str	r3, [r7, #24]
 800fe1e:	e002      	b.n	800fe26 <create_name+0x132>
 800fe20:	69bb      	ldr	r3, [r7, #24]
 800fe22:	3301      	adds	r3, #1
 800fe24:	61bb      	str	r3, [r7, #24]
 800fe26:	69bb      	ldr	r3, [r7, #24]
 800fe28:	005b      	lsls	r3, r3, #1
 800fe2a:	68fa      	ldr	r2, [r7, #12]
 800fe2c:	4413      	add	r3, r2
 800fe2e:	881b      	ldrh	r3, [r3, #0]
 800fe30:	2b20      	cmp	r3, #32
 800fe32:	d0f5      	beq.n	800fe20 <create_name+0x12c>
 800fe34:	69bb      	ldr	r3, [r7, #24]
 800fe36:	005b      	lsls	r3, r3, #1
 800fe38:	68fa      	ldr	r2, [r7, #12]
 800fe3a:	4413      	add	r3, r2
 800fe3c:	881b      	ldrh	r3, [r3, #0]
 800fe3e:	2b2e      	cmp	r3, #46	; 0x2e
 800fe40:	d0ee      	beq.n	800fe20 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fe42:	69bb      	ldr	r3, [r7, #24]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d009      	beq.n	800fe5c <create_name+0x168>
 800fe48:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fe4c:	f043 0303 	orr.w	r3, r3, #3
 800fe50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fe54:	e002      	b.n	800fe5c <create_name+0x168>
 800fe56:	697b      	ldr	r3, [r7, #20]
 800fe58:	3b01      	subs	r3, #1
 800fe5a:	617b      	str	r3, [r7, #20]
 800fe5c:	697b      	ldr	r3, [r7, #20]
 800fe5e:	2b00      	cmp	r3, #0
 800fe60:	d009      	beq.n	800fe76 <create_name+0x182>
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fe68:	3b01      	subs	r3, #1
 800fe6a:	005b      	lsls	r3, r3, #1
 800fe6c:	68fa      	ldr	r2, [r7, #12]
 800fe6e:	4413      	add	r3, r2
 800fe70:	881b      	ldrh	r3, [r3, #0]
 800fe72:	2b2e      	cmp	r3, #46	; 0x2e
 800fe74:	d1ef      	bne.n	800fe56 <create_name+0x162>

	i = b = 0; ni = 8;
 800fe76:	2300      	movs	r3, #0
 800fe78:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fe7c:	2300      	movs	r3, #0
 800fe7e:	623b      	str	r3, [r7, #32]
 800fe80:	2308      	movs	r3, #8
 800fe82:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fe84:	69bb      	ldr	r3, [r7, #24]
 800fe86:	1c5a      	adds	r2, r3, #1
 800fe88:	61ba      	str	r2, [r7, #24]
 800fe8a:	005b      	lsls	r3, r3, #1
 800fe8c:	68fa      	ldr	r2, [r7, #12]
 800fe8e:	4413      	add	r3, r2
 800fe90:	881b      	ldrh	r3, [r3, #0]
 800fe92:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fe94:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	f000 8090 	beq.w	800ffbc <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fe9c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fe9e:	2b20      	cmp	r3, #32
 800fea0:	d006      	beq.n	800feb0 <create_name+0x1bc>
 800fea2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fea4:	2b2e      	cmp	r3, #46	; 0x2e
 800fea6:	d10a      	bne.n	800febe <create_name+0x1ca>
 800fea8:	69ba      	ldr	r2, [r7, #24]
 800feaa:	697b      	ldr	r3, [r7, #20]
 800feac:	429a      	cmp	r2, r3
 800feae:	d006      	beq.n	800febe <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800feb0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feb4:	f043 0303 	orr.w	r3, r3, #3
 800feb8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800febc:	e07d      	b.n	800ffba <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800febe:	6a3a      	ldr	r2, [r7, #32]
 800fec0:	69fb      	ldr	r3, [r7, #28]
 800fec2:	429a      	cmp	r2, r3
 800fec4:	d203      	bcs.n	800fece <create_name+0x1da>
 800fec6:	69ba      	ldr	r2, [r7, #24]
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	429a      	cmp	r2, r3
 800fecc:	d123      	bne.n	800ff16 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fece:	69fb      	ldr	r3, [r7, #28]
 800fed0:	2b0b      	cmp	r3, #11
 800fed2:	d106      	bne.n	800fee2 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fed4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fed8:	f043 0303 	orr.w	r3, r3, #3
 800fedc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fee0:	e075      	b.n	800ffce <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fee2:	69ba      	ldr	r2, [r7, #24]
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	429a      	cmp	r2, r3
 800fee8:	d005      	beq.n	800fef6 <create_name+0x202>
 800feea:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800feee:	f043 0303 	orr.w	r3, r3, #3
 800fef2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fef6:	69ba      	ldr	r2, [r7, #24]
 800fef8:	697b      	ldr	r3, [r7, #20]
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d866      	bhi.n	800ffcc <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fefe:	697b      	ldr	r3, [r7, #20]
 800ff00:	61bb      	str	r3, [r7, #24]
 800ff02:	2308      	movs	r3, #8
 800ff04:	623b      	str	r3, [r7, #32]
 800ff06:	230b      	movs	r3, #11
 800ff08:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800ff0a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff0e:	009b      	lsls	r3, r3, #2
 800ff10:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ff14:	e051      	b.n	800ffba <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800ff16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff18:	2b7f      	cmp	r3, #127	; 0x7f
 800ff1a:	d914      	bls.n	800ff46 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800ff1c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff1e:	2100      	movs	r1, #0
 800ff20:	4618      	mov	r0, r3
 800ff22:	f001 f94b 	bl	80111bc <ff_convert>
 800ff26:	4603      	mov	r3, r0
 800ff28:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800ff2a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d004      	beq.n	800ff3a <create_name+0x246>
 800ff30:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff32:	3b80      	subs	r3, #128	; 0x80
 800ff34:	4a23      	ldr	r2, [pc, #140]	; (800ffc4 <create_name+0x2d0>)
 800ff36:	5cd3      	ldrb	r3, [r2, r3]
 800ff38:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800ff3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff3e:	f043 0302 	orr.w	r3, r3, #2
 800ff42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800ff46:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d007      	beq.n	800ff5c <create_name+0x268>
 800ff4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff4e:	4619      	mov	r1, r3
 800ff50:	481d      	ldr	r0, [pc, #116]	; (800ffc8 <create_name+0x2d4>)
 800ff52:	f7fe faa1 	bl	800e498 <chk_chr>
 800ff56:	4603      	mov	r3, r0
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d008      	beq.n	800ff6e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800ff5c:	235f      	movs	r3, #95	; 0x5f
 800ff5e:	84bb      	strh	r3, [r7, #36]	; 0x24
 800ff60:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ff64:	f043 0303 	orr.w	r3, r3, #3
 800ff68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800ff6c:	e01b      	b.n	800ffa6 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800ff6e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff70:	2b40      	cmp	r3, #64	; 0x40
 800ff72:	d909      	bls.n	800ff88 <create_name+0x294>
 800ff74:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff76:	2b5a      	cmp	r3, #90	; 0x5a
 800ff78:	d806      	bhi.n	800ff88 <create_name+0x294>
					b |= 2;
 800ff7a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff7e:	f043 0302 	orr.w	r3, r3, #2
 800ff82:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ff86:	e00e      	b.n	800ffa6 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800ff88:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff8a:	2b60      	cmp	r3, #96	; 0x60
 800ff8c:	d90b      	bls.n	800ffa6 <create_name+0x2b2>
 800ff8e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ff90:	2b7a      	cmp	r3, #122	; 0x7a
 800ff92:	d808      	bhi.n	800ffa6 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800ff94:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ff98:	f043 0301 	orr.w	r3, r3, #1
 800ff9c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800ffa0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800ffa2:	3b20      	subs	r3, #32
 800ffa4:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800ffa6:	6a3b      	ldr	r3, [r7, #32]
 800ffa8:	1c5a      	adds	r2, r3, #1
 800ffaa:	623a      	str	r2, [r7, #32]
 800ffac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800ffae:	b2d1      	uxtb	r1, r2
 800ffb0:	687a      	ldr	r2, [r7, #4]
 800ffb2:	4413      	add	r3, r2
 800ffb4:	460a      	mov	r2, r1
 800ffb6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800ffba:	e763      	b.n	800fe84 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800ffbc:	bf00      	nop
 800ffbe:	e006      	b.n	800ffce <create_name+0x2da>
 800ffc0:	08012718 	.word	0x08012718
 800ffc4:	080127d8 	.word	0x080127d8
 800ffc8:	08012724 	.word	0x08012724
			if (si > di) break;			/* No extension */
 800ffcc:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800ffd4:	2be5      	cmp	r3, #229	; 0xe5
 800ffd6:	d103      	bne.n	800ffe0 <create_name+0x2ec>
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	2205      	movs	r2, #5
 800ffdc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800ffe0:	69fb      	ldr	r3, [r7, #28]
 800ffe2:	2b08      	cmp	r3, #8
 800ffe4:	d104      	bne.n	800fff0 <create_name+0x2fc>
 800ffe6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800ffea:	009b      	lsls	r3, r3, #2
 800ffec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fff0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fff4:	f003 030c 	and.w	r3, r3, #12
 800fff8:	2b0c      	cmp	r3, #12
 800fffa:	d005      	beq.n	8010008 <create_name+0x314>
 800fffc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010000:	f003 0303 	and.w	r3, r3, #3
 8010004:	2b03      	cmp	r3, #3
 8010006:	d105      	bne.n	8010014 <create_name+0x320>
 8010008:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801000c:	f043 0302 	orr.w	r3, r3, #2
 8010010:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 8010014:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010018:	f003 0302 	and.w	r3, r3, #2
 801001c:	2b00      	cmp	r3, #0
 801001e:	d117      	bne.n	8010050 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8010020:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8010024:	f003 0303 	and.w	r3, r3, #3
 8010028:	2b01      	cmp	r3, #1
 801002a:	d105      	bne.n	8010038 <create_name+0x344>
 801002c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010030:	f043 0310 	orr.w	r3, r3, #16
 8010034:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8010038:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801003c:	f003 030c 	and.w	r3, r3, #12
 8010040:	2b04      	cmp	r3, #4
 8010042:	d105      	bne.n	8010050 <create_name+0x35c>
 8010044:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8010048:	f043 0308 	orr.w	r3, r3, #8
 801004c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8010050:	687b      	ldr	r3, [r7, #4]
 8010052:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8010056:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 801005a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 801005c:	4618      	mov	r0, r3
 801005e:	3728      	adds	r7, #40	; 0x28
 8010060:	46bd      	mov	sp, r7
 8010062:	bd80      	pop	{r7, pc}

08010064 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8010064:	b580      	push	{r7, lr}
 8010066:	b086      	sub	sp, #24
 8010068:	af00      	add	r7, sp, #0
 801006a:	6078      	str	r0, [r7, #4]
 801006c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 801006e:	687b      	ldr	r3, [r7, #4]
 8010070:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 8010072:	693b      	ldr	r3, [r7, #16]
 8010074:	681b      	ldr	r3, [r3, #0]
 8010076:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8010078:	e002      	b.n	8010080 <follow_path+0x1c>
 801007a:	683b      	ldr	r3, [r7, #0]
 801007c:	3301      	adds	r3, #1
 801007e:	603b      	str	r3, [r7, #0]
 8010080:	683b      	ldr	r3, [r7, #0]
 8010082:	781b      	ldrb	r3, [r3, #0]
 8010084:	2b2f      	cmp	r3, #47	; 0x2f
 8010086:	d0f8      	beq.n	801007a <follow_path+0x16>
 8010088:	683b      	ldr	r3, [r7, #0]
 801008a:	781b      	ldrb	r3, [r3, #0]
 801008c:	2b5c      	cmp	r3, #92	; 0x5c
 801008e:	d0f4      	beq.n	801007a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 8010090:	693b      	ldr	r3, [r7, #16]
 8010092:	2200      	movs	r2, #0
 8010094:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8010096:	683b      	ldr	r3, [r7, #0]
 8010098:	781b      	ldrb	r3, [r3, #0]
 801009a:	2b1f      	cmp	r3, #31
 801009c:	d80a      	bhi.n	80100b4 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 801009e:	687b      	ldr	r3, [r7, #4]
 80100a0:	2280      	movs	r2, #128	; 0x80
 80100a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 80100a6:	2100      	movs	r1, #0
 80100a8:	6878      	ldr	r0, [r7, #4]
 80100aa:	f7fe ff35 	bl	800ef18 <dir_sdi>
 80100ae:	4603      	mov	r3, r0
 80100b0:	75fb      	strb	r3, [r7, #23]
 80100b2:	e043      	b.n	801013c <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80100b4:	463b      	mov	r3, r7
 80100b6:	4619      	mov	r1, r3
 80100b8:	6878      	ldr	r0, [r7, #4]
 80100ba:	f7ff fe1b 	bl	800fcf4 <create_name>
 80100be:	4603      	mov	r3, r0
 80100c0:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80100c2:	7dfb      	ldrb	r3, [r7, #23]
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d134      	bne.n	8010132 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80100c8:	6878      	ldr	r0, [r7, #4]
 80100ca:	f7ff fb7c 	bl	800f7c6 <dir_find>
 80100ce:	4603      	mov	r3, r0
 80100d0:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80100d2:	687b      	ldr	r3, [r7, #4]
 80100d4:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80100d8:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80100da:	7dfb      	ldrb	r3, [r7, #23]
 80100dc:	2b00      	cmp	r3, #0
 80100de:	d00a      	beq.n	80100f6 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80100e0:	7dfb      	ldrb	r3, [r7, #23]
 80100e2:	2b04      	cmp	r3, #4
 80100e4:	d127      	bne.n	8010136 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80100e6:	7afb      	ldrb	r3, [r7, #11]
 80100e8:	f003 0304 	and.w	r3, r3, #4
 80100ec:	2b00      	cmp	r3, #0
 80100ee:	d122      	bne.n	8010136 <follow_path+0xd2>
 80100f0:	2305      	movs	r3, #5
 80100f2:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80100f4:	e01f      	b.n	8010136 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80100f6:	7afb      	ldrb	r3, [r7, #11]
 80100f8:	f003 0304 	and.w	r3, r3, #4
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d11c      	bne.n	801013a <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 8010100:	693b      	ldr	r3, [r7, #16]
 8010102:	799b      	ldrb	r3, [r3, #6]
 8010104:	f003 0310 	and.w	r3, r3, #16
 8010108:	2b00      	cmp	r3, #0
 801010a:	d102      	bne.n	8010112 <follow_path+0xae>
				res = FR_NO_PATH; break;
 801010c:	2305      	movs	r3, #5
 801010e:	75fb      	strb	r3, [r7, #23]
 8010110:	e014      	b.n	801013c <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 8010112:	68fb      	ldr	r3, [r7, #12]
 8010114:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	695b      	ldr	r3, [r3, #20]
 801011c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010120:	4413      	add	r3, r2
 8010122:	4619      	mov	r1, r3
 8010124:	68f8      	ldr	r0, [r7, #12]
 8010126:	f7ff f87e 	bl	800f226 <ld_clust>
 801012a:	4602      	mov	r2, r0
 801012c:	693b      	ldr	r3, [r7, #16]
 801012e:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8010130:	e7c0      	b.n	80100b4 <follow_path+0x50>
			if (res != FR_OK) break;
 8010132:	bf00      	nop
 8010134:	e002      	b.n	801013c <follow_path+0xd8>
				break;
 8010136:	bf00      	nop
 8010138:	e000      	b.n	801013c <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 801013a:	bf00      	nop
			}
		}
	}

	return res;
 801013c:	7dfb      	ldrb	r3, [r7, #23]
}
 801013e:	4618      	mov	r0, r3
 8010140:	3718      	adds	r7, #24
 8010142:	46bd      	mov	sp, r7
 8010144:	bd80      	pop	{r7, pc}

08010146 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8010146:	b480      	push	{r7}
 8010148:	b087      	sub	sp, #28
 801014a:	af00      	add	r7, sp, #0
 801014c:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 801014e:	f04f 33ff 	mov.w	r3, #4294967295
 8010152:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8010154:	687b      	ldr	r3, [r7, #4]
 8010156:	681b      	ldr	r3, [r3, #0]
 8010158:	2b00      	cmp	r3, #0
 801015a:	d031      	beq.n	80101c0 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 801015c:	687b      	ldr	r3, [r7, #4]
 801015e:	681b      	ldr	r3, [r3, #0]
 8010160:	617b      	str	r3, [r7, #20]
 8010162:	e002      	b.n	801016a <get_ldnumber+0x24>
 8010164:	697b      	ldr	r3, [r7, #20]
 8010166:	3301      	adds	r3, #1
 8010168:	617b      	str	r3, [r7, #20]
 801016a:	697b      	ldr	r3, [r7, #20]
 801016c:	781b      	ldrb	r3, [r3, #0]
 801016e:	2b1f      	cmp	r3, #31
 8010170:	d903      	bls.n	801017a <get_ldnumber+0x34>
 8010172:	697b      	ldr	r3, [r7, #20]
 8010174:	781b      	ldrb	r3, [r3, #0]
 8010176:	2b3a      	cmp	r3, #58	; 0x3a
 8010178:	d1f4      	bne.n	8010164 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 801017a:	697b      	ldr	r3, [r7, #20]
 801017c:	781b      	ldrb	r3, [r3, #0]
 801017e:	2b3a      	cmp	r3, #58	; 0x3a
 8010180:	d11c      	bne.n	80101bc <get_ldnumber+0x76>
			tp = *path;
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	681b      	ldr	r3, [r3, #0]
 8010186:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8010188:	68fb      	ldr	r3, [r7, #12]
 801018a:	1c5a      	adds	r2, r3, #1
 801018c:	60fa      	str	r2, [r7, #12]
 801018e:	781b      	ldrb	r3, [r3, #0]
 8010190:	3b30      	subs	r3, #48	; 0x30
 8010192:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8010194:	68bb      	ldr	r3, [r7, #8]
 8010196:	2b09      	cmp	r3, #9
 8010198:	d80e      	bhi.n	80101b8 <get_ldnumber+0x72>
 801019a:	68fa      	ldr	r2, [r7, #12]
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	429a      	cmp	r2, r3
 80101a0:	d10a      	bne.n	80101b8 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80101a2:	68bb      	ldr	r3, [r7, #8]
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d107      	bne.n	80101b8 <get_ldnumber+0x72>
					vol = (int)i;
 80101a8:	68bb      	ldr	r3, [r7, #8]
 80101aa:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 80101ac:	697b      	ldr	r3, [r7, #20]
 80101ae:	3301      	adds	r3, #1
 80101b0:	617b      	str	r3, [r7, #20]
 80101b2:	687b      	ldr	r3, [r7, #4]
 80101b4:	697a      	ldr	r2, [r7, #20]
 80101b6:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80101b8:	693b      	ldr	r3, [r7, #16]
 80101ba:	e002      	b.n	80101c2 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80101bc:	2300      	movs	r3, #0
 80101be:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80101c0:	693b      	ldr	r3, [r7, #16]
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	371c      	adds	r7, #28
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bc80      	pop	{r7}
 80101ca:	4770      	bx	lr

080101cc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80101cc:	b580      	push	{r7, lr}
 80101ce:	b082      	sub	sp, #8
 80101d0:	af00      	add	r7, sp, #0
 80101d2:	6078      	str	r0, [r7, #4]
 80101d4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80101d6:	687b      	ldr	r3, [r7, #4]
 80101d8:	2200      	movs	r2, #0
 80101da:	70da      	strb	r2, [r3, #3]
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	f04f 32ff 	mov.w	r2, #4294967295
 80101e2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80101e4:	6839      	ldr	r1, [r7, #0]
 80101e6:	6878      	ldr	r0, [r7, #4]
 80101e8:	f7fe fb1a 	bl	800e820 <move_window>
 80101ec:	4603      	mov	r3, r0
 80101ee:	2b00      	cmp	r3, #0
 80101f0:	d001      	beq.n	80101f6 <check_fs+0x2a>
 80101f2:	2304      	movs	r3, #4
 80101f4:	e038      	b.n	8010268 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	3334      	adds	r3, #52	; 0x34
 80101fa:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80101fe:	4618      	mov	r0, r3
 8010200:	f7fe f86c 	bl	800e2dc <ld_word>
 8010204:	4603      	mov	r3, r0
 8010206:	461a      	mov	r2, r3
 8010208:	f64a 2355 	movw	r3, #43605	; 0xaa55
 801020c:	429a      	cmp	r2, r3
 801020e:	d001      	beq.n	8010214 <check_fs+0x48>
 8010210:	2303      	movs	r3, #3
 8010212:	e029      	b.n	8010268 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 801021a:	2be9      	cmp	r3, #233	; 0xe9
 801021c:	d009      	beq.n	8010232 <check_fs+0x66>
 801021e:	687b      	ldr	r3, [r7, #4]
 8010220:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8010224:	2beb      	cmp	r3, #235	; 0xeb
 8010226:	d11e      	bne.n	8010266 <check_fs+0x9a>
 8010228:	687b      	ldr	r3, [r7, #4]
 801022a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 801022e:	2b90      	cmp	r3, #144	; 0x90
 8010230:	d119      	bne.n	8010266 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	3334      	adds	r3, #52	; 0x34
 8010236:	3336      	adds	r3, #54	; 0x36
 8010238:	4618      	mov	r0, r3
 801023a:	f7fe f866 	bl	800e30a <ld_dword>
 801023e:	4603      	mov	r3, r0
 8010240:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8010244:	4a0a      	ldr	r2, [pc, #40]	; (8010270 <check_fs+0xa4>)
 8010246:	4293      	cmp	r3, r2
 8010248:	d101      	bne.n	801024e <check_fs+0x82>
 801024a:	2300      	movs	r3, #0
 801024c:	e00c      	b.n	8010268 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 801024e:	687b      	ldr	r3, [r7, #4]
 8010250:	3334      	adds	r3, #52	; 0x34
 8010252:	3352      	adds	r3, #82	; 0x52
 8010254:	4618      	mov	r0, r3
 8010256:	f7fe f858 	bl	800e30a <ld_dword>
 801025a:	4603      	mov	r3, r0
 801025c:	4a05      	ldr	r2, [pc, #20]	; (8010274 <check_fs+0xa8>)
 801025e:	4293      	cmp	r3, r2
 8010260:	d101      	bne.n	8010266 <check_fs+0x9a>
 8010262:	2300      	movs	r3, #0
 8010264:	e000      	b.n	8010268 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010266:	2302      	movs	r3, #2
}
 8010268:	4618      	mov	r0, r3
 801026a:	3708      	adds	r7, #8
 801026c:	46bd      	mov	sp, r7
 801026e:	bd80      	pop	{r7, pc}
 8010270:	00544146 	.word	0x00544146
 8010274:	33544146 	.word	0x33544146

08010278 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010278:	b580      	push	{r7, lr}
 801027a:	b096      	sub	sp, #88	; 0x58
 801027c:	af00      	add	r7, sp, #0
 801027e:	60f8      	str	r0, [r7, #12]
 8010280:	60b9      	str	r1, [r7, #8]
 8010282:	4613      	mov	r3, r2
 8010284:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010286:	68bb      	ldr	r3, [r7, #8]
 8010288:	2200      	movs	r2, #0
 801028a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801028c:	68f8      	ldr	r0, [r7, #12]
 801028e:	f7ff ff5a 	bl	8010146 <get_ldnumber>
 8010292:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010296:	2b00      	cmp	r3, #0
 8010298:	da01      	bge.n	801029e <find_volume+0x26>
 801029a:	230b      	movs	r3, #11
 801029c:	e230      	b.n	8010700 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801029e:	4aa1      	ldr	r2, [pc, #644]	; (8010524 <find_volume+0x2ac>)
 80102a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80102a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80102a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80102a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d101      	bne.n	80102b2 <find_volume+0x3a>
 80102ae:	230c      	movs	r3, #12
 80102b0:	e226      	b.n	8010700 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80102b2:	68bb      	ldr	r3, [r7, #8]
 80102b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102b6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80102b8:	79fb      	ldrb	r3, [r7, #7]
 80102ba:	f023 0301 	bic.w	r3, r3, #1
 80102be:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80102c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102c2:	781b      	ldrb	r3, [r3, #0]
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d01a      	beq.n	80102fe <find_volume+0x86>
		stat = disk_status(fs->drv);
 80102c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80102ca:	785b      	ldrb	r3, [r3, #1]
 80102cc:	4618      	mov	r0, r3
 80102ce:	f7fd ff67 	bl	800e1a0 <disk_status>
 80102d2:	4603      	mov	r3, r0
 80102d4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80102d8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102dc:	f003 0301 	and.w	r3, r3, #1
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d10c      	bne.n	80102fe <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80102e4:	79fb      	ldrb	r3, [r7, #7]
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d007      	beq.n	80102fa <find_volume+0x82>
 80102ea:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80102ee:	f003 0304 	and.w	r3, r3, #4
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d001      	beq.n	80102fa <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80102f6:	230a      	movs	r3, #10
 80102f8:	e202      	b.n	8010700 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 80102fa:	2300      	movs	r3, #0
 80102fc:	e200      	b.n	8010700 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80102fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010300:	2200      	movs	r2, #0
 8010302:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 8010304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010306:	b2da      	uxtb	r2, r3
 8010308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030a:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 801030c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030e:	785b      	ldrb	r3, [r3, #1]
 8010310:	4618      	mov	r0, r3
 8010312:	f7fd ff5f 	bl	800e1d4 <disk_initialize>
 8010316:	4603      	mov	r3, r0
 8010318:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 801031c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010320:	f003 0301 	and.w	r3, r3, #1
 8010324:	2b00      	cmp	r3, #0
 8010326:	d001      	beq.n	801032c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8010328:	2303      	movs	r3, #3
 801032a:	e1e9      	b.n	8010700 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 801032c:	79fb      	ldrb	r3, [r7, #7]
 801032e:	2b00      	cmp	r3, #0
 8010330:	d007      	beq.n	8010342 <find_volume+0xca>
 8010332:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010336:	f003 0304 	and.w	r3, r3, #4
 801033a:	2b00      	cmp	r3, #0
 801033c:	d001      	beq.n	8010342 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 801033e:	230a      	movs	r3, #10
 8010340:	e1de      	b.n	8010700 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8010342:	2300      	movs	r3, #0
 8010344:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8010346:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8010348:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801034a:	f7ff ff3f 	bl	80101cc <check_fs>
 801034e:	4603      	mov	r3, r0
 8010350:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8010354:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010358:	2b02      	cmp	r3, #2
 801035a:	d149      	bne.n	80103f0 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801035c:	2300      	movs	r3, #0
 801035e:	643b      	str	r3, [r7, #64]	; 0x40
 8010360:	e01e      	b.n	80103a0 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010364:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010368:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801036a:	011b      	lsls	r3, r3, #4
 801036c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010370:	4413      	add	r3, r2
 8010372:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010374:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010376:	3304      	adds	r3, #4
 8010378:	781b      	ldrb	r3, [r3, #0]
 801037a:	2b00      	cmp	r3, #0
 801037c:	d006      	beq.n	801038c <find_volume+0x114>
 801037e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010380:	3308      	adds	r3, #8
 8010382:	4618      	mov	r0, r3
 8010384:	f7fd ffc1 	bl	800e30a <ld_dword>
 8010388:	4602      	mov	r2, r0
 801038a:	e000      	b.n	801038e <find_volume+0x116>
 801038c:	2200      	movs	r2, #0
 801038e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	3358      	adds	r3, #88	; 0x58
 8010394:	443b      	add	r3, r7
 8010396:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801039a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801039c:	3301      	adds	r3, #1
 801039e:	643b      	str	r3, [r7, #64]	; 0x40
 80103a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103a2:	2b03      	cmp	r3, #3
 80103a4:	d9dd      	bls.n	8010362 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 80103a6:	2300      	movs	r3, #0
 80103a8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80103aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d002      	beq.n	80103b6 <find_volume+0x13e>
 80103b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b2:	3b01      	subs	r3, #1
 80103b4:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80103b6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103b8:	009b      	lsls	r3, r3, #2
 80103ba:	3358      	adds	r3, #88	; 0x58
 80103bc:	443b      	add	r3, r7
 80103be:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80103c2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80103c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d005      	beq.n	80103d6 <find_volume+0x15e>
 80103ca:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80103cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103ce:	f7ff fefd 	bl	80101cc <check_fs>
 80103d2:	4603      	mov	r3, r0
 80103d4:	e000      	b.n	80103d8 <find_volume+0x160>
 80103d6:	2303      	movs	r3, #3
 80103d8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80103dc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d905      	bls.n	80103f0 <find_volume+0x178>
 80103e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103e6:	3301      	adds	r3, #1
 80103e8:	643b      	str	r3, [r7, #64]	; 0x40
 80103ea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80103ec:	2b03      	cmp	r3, #3
 80103ee:	d9e2      	bls.n	80103b6 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80103f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103f4:	2b04      	cmp	r3, #4
 80103f6:	d101      	bne.n	80103fc <find_volume+0x184>
 80103f8:	2301      	movs	r3, #1
 80103fa:	e181      	b.n	8010700 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80103fc:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010400:	2b01      	cmp	r3, #1
 8010402:	d901      	bls.n	8010408 <find_volume+0x190>
 8010404:	230d      	movs	r3, #13
 8010406:	e17b      	b.n	8010700 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8010408:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040a:	3334      	adds	r3, #52	; 0x34
 801040c:	330b      	adds	r3, #11
 801040e:	4618      	mov	r0, r3
 8010410:	f7fd ff64 	bl	800e2dc <ld_word>
 8010414:	4603      	mov	r3, r0
 8010416:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801041a:	d001      	beq.n	8010420 <find_volume+0x1a8>
 801041c:	230d      	movs	r3, #13
 801041e:	e16f      	b.n	8010700 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8010420:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010422:	3334      	adds	r3, #52	; 0x34
 8010424:	3316      	adds	r3, #22
 8010426:	4618      	mov	r0, r3
 8010428:	f7fd ff58 	bl	800e2dc <ld_word>
 801042c:	4603      	mov	r3, r0
 801042e:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8010430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010432:	2b00      	cmp	r3, #0
 8010434:	d106      	bne.n	8010444 <find_volume+0x1cc>
 8010436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010438:	3334      	adds	r3, #52	; 0x34
 801043a:	3324      	adds	r3, #36	; 0x24
 801043c:	4618      	mov	r0, r3
 801043e:	f7fd ff64 	bl	800e30a <ld_dword>
 8010442:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8010444:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010446:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010448:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 801044a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801044c:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8010450:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010452:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8010454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010456:	789b      	ldrb	r3, [r3, #2]
 8010458:	2b01      	cmp	r3, #1
 801045a:	d005      	beq.n	8010468 <find_volume+0x1f0>
 801045c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801045e:	789b      	ldrb	r3, [r3, #2]
 8010460:	2b02      	cmp	r3, #2
 8010462:	d001      	beq.n	8010468 <find_volume+0x1f0>
 8010464:	230d      	movs	r3, #13
 8010466:	e14b      	b.n	8010700 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010468:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801046a:	789b      	ldrb	r3, [r3, #2]
 801046c:	461a      	mov	r2, r3
 801046e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010470:	fb02 f303 	mul.w	r3, r2, r3
 8010474:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801047c:	b29a      	uxth	r2, r3
 801047e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010480:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010482:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010484:	895b      	ldrh	r3, [r3, #10]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d008      	beq.n	801049c <find_volume+0x224>
 801048a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801048c:	895b      	ldrh	r3, [r3, #10]
 801048e:	461a      	mov	r2, r3
 8010490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010492:	895b      	ldrh	r3, [r3, #10]
 8010494:	3b01      	subs	r3, #1
 8010496:	4013      	ands	r3, r2
 8010498:	2b00      	cmp	r3, #0
 801049a:	d001      	beq.n	80104a0 <find_volume+0x228>
 801049c:	230d      	movs	r3, #13
 801049e:	e12f      	b.n	8010700 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80104a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104a2:	3334      	adds	r3, #52	; 0x34
 80104a4:	3311      	adds	r3, #17
 80104a6:	4618      	mov	r0, r3
 80104a8:	f7fd ff18 	bl	800e2dc <ld_word>
 80104ac:	4603      	mov	r3, r0
 80104ae:	461a      	mov	r2, r3
 80104b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b2:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80104b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104b6:	891b      	ldrh	r3, [r3, #8]
 80104b8:	f003 030f 	and.w	r3, r3, #15
 80104bc:	b29b      	uxth	r3, r3
 80104be:	2b00      	cmp	r3, #0
 80104c0:	d001      	beq.n	80104c6 <find_volume+0x24e>
 80104c2:	230d      	movs	r3, #13
 80104c4:	e11c      	b.n	8010700 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80104c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104c8:	3334      	adds	r3, #52	; 0x34
 80104ca:	3313      	adds	r3, #19
 80104cc:	4618      	mov	r0, r3
 80104ce:	f7fd ff05 	bl	800e2dc <ld_word>
 80104d2:	4603      	mov	r3, r0
 80104d4:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80104d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80104d8:	2b00      	cmp	r3, #0
 80104da:	d106      	bne.n	80104ea <find_volume+0x272>
 80104dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104de:	3334      	adds	r3, #52	; 0x34
 80104e0:	3320      	adds	r3, #32
 80104e2:	4618      	mov	r0, r3
 80104e4:	f7fd ff11 	bl	800e30a <ld_dword>
 80104e8:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80104ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80104ec:	3334      	adds	r3, #52	; 0x34
 80104ee:	330e      	adds	r3, #14
 80104f0:	4618      	mov	r0, r3
 80104f2:	f7fd fef3 	bl	800e2dc <ld_word>
 80104f6:	4603      	mov	r3, r0
 80104f8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80104fa:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80104fc:	2b00      	cmp	r3, #0
 80104fe:	d101      	bne.n	8010504 <find_volume+0x28c>
 8010500:	230d      	movs	r3, #13
 8010502:	e0fd      	b.n	8010700 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 8010504:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010508:	4413      	add	r3, r2
 801050a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801050c:	8912      	ldrh	r2, [r2, #8]
 801050e:	0912      	lsrs	r2, r2, #4
 8010510:	b292      	uxth	r2, r2
 8010512:	4413      	add	r3, r2
 8010514:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 8010516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010518:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801051a:	429a      	cmp	r2, r3
 801051c:	d204      	bcs.n	8010528 <find_volume+0x2b0>
 801051e:	230d      	movs	r3, #13
 8010520:	e0ee      	b.n	8010700 <find_volume+0x488>
 8010522:	bf00      	nop
 8010524:	20000f1c 	.word	0x20000f1c
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8010528:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801052a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801052c:	1ad3      	subs	r3, r2, r3
 801052e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010530:	8952      	ldrh	r2, [r2, #10]
 8010532:	fbb3 f3f2 	udiv	r3, r3, r2
 8010536:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8010538:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801053a:	2b00      	cmp	r3, #0
 801053c:	d101      	bne.n	8010542 <find_volume+0x2ca>
 801053e:	230d      	movs	r3, #13
 8010540:	e0de      	b.n	8010700 <find_volume+0x488>
		fmt = FS_FAT32;
 8010542:	2303      	movs	r3, #3
 8010544:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 8010548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801054a:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 801054e:	4293      	cmp	r3, r2
 8010550:	d802      	bhi.n	8010558 <find_volume+0x2e0>
 8010552:	2302      	movs	r3, #2
 8010554:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 8010558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801055a:	f640 72f5 	movw	r2, #4085	; 0xff5
 801055e:	4293      	cmp	r3, r2
 8010560:	d802      	bhi.n	8010568 <find_volume+0x2f0>
 8010562:	2301      	movs	r3, #1
 8010564:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801056a:	1c9a      	adds	r2, r3, #2
 801056c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801056e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010572:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010574:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010576:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010578:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801057a:	441a      	add	r2, r3
 801057c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801057e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010580:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010584:	441a      	add	r2, r3
 8010586:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010588:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801058a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801058e:	2b03      	cmp	r3, #3
 8010590:	d11e      	bne.n	80105d0 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010594:	3334      	adds	r3, #52	; 0x34
 8010596:	332a      	adds	r3, #42	; 0x2a
 8010598:	4618      	mov	r0, r3
 801059a:	f7fd fe9f 	bl	800e2dc <ld_word>
 801059e:	4603      	mov	r3, r0
 80105a0:	2b00      	cmp	r3, #0
 80105a2:	d001      	beq.n	80105a8 <find_volume+0x330>
 80105a4:	230d      	movs	r3, #13
 80105a6:	e0ab      	b.n	8010700 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 80105a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105aa:	891b      	ldrh	r3, [r3, #8]
 80105ac:	2b00      	cmp	r3, #0
 80105ae:	d001      	beq.n	80105b4 <find_volume+0x33c>
 80105b0:	230d      	movs	r3, #13
 80105b2:	e0a5      	b.n	8010700 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80105b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105b6:	3334      	adds	r3, #52	; 0x34
 80105b8:	332c      	adds	r3, #44	; 0x2c
 80105ba:	4618      	mov	r0, r3
 80105bc:	f7fd fea5 	bl	800e30a <ld_dword>
 80105c0:	4602      	mov	r2, r0
 80105c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c4:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80105c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105c8:	699b      	ldr	r3, [r3, #24]
 80105ca:	009b      	lsls	r3, r3, #2
 80105cc:	647b      	str	r3, [r7, #68]	; 0x44
 80105ce:	e01f      	b.n	8010610 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80105d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105d2:	891b      	ldrh	r3, [r3, #8]
 80105d4:	2b00      	cmp	r3, #0
 80105d6:	d101      	bne.n	80105dc <find_volume+0x364>
 80105d8:	230d      	movs	r3, #13
 80105da:	e091      	b.n	8010700 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80105dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105de:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80105e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80105e2:	441a      	add	r2, r3
 80105e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105e6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80105e8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80105ec:	2b02      	cmp	r3, #2
 80105ee:	d103      	bne.n	80105f8 <find_volume+0x380>
 80105f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105f2:	699b      	ldr	r3, [r3, #24]
 80105f4:	005b      	lsls	r3, r3, #1
 80105f6:	e00a      	b.n	801060e <find_volume+0x396>
 80105f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80105fa:	699a      	ldr	r2, [r3, #24]
 80105fc:	4613      	mov	r3, r2
 80105fe:	005b      	lsls	r3, r3, #1
 8010600:	4413      	add	r3, r2
 8010602:	085a      	lsrs	r2, r3, #1
 8010604:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010606:	699b      	ldr	r3, [r3, #24]
 8010608:	f003 0301 	and.w	r3, r3, #1
 801060c:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 801060e:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8010610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010612:	69da      	ldr	r2, [r3, #28]
 8010614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010616:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 801061a:	0a5b      	lsrs	r3, r3, #9
 801061c:	429a      	cmp	r2, r3
 801061e:	d201      	bcs.n	8010624 <find_volume+0x3ac>
 8010620:	230d      	movs	r3, #13
 8010622:	e06d      	b.n	8010700 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8010624:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010626:	f04f 32ff 	mov.w	r2, #4294967295
 801062a:	615a      	str	r2, [r3, #20]
 801062c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801062e:	695a      	ldr	r2, [r3, #20]
 8010630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010632:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8010634:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010636:	2280      	movs	r2, #128	; 0x80
 8010638:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 801063a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801063e:	2b03      	cmp	r3, #3
 8010640:	d149      	bne.n	80106d6 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8010642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010644:	3334      	adds	r3, #52	; 0x34
 8010646:	3330      	adds	r3, #48	; 0x30
 8010648:	4618      	mov	r0, r3
 801064a:	f7fd fe47 	bl	800e2dc <ld_word>
 801064e:	4603      	mov	r3, r0
 8010650:	2b01      	cmp	r3, #1
 8010652:	d140      	bne.n	80106d6 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 8010654:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010656:	3301      	adds	r3, #1
 8010658:	4619      	mov	r1, r3
 801065a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801065c:	f7fe f8e0 	bl	800e820 <move_window>
 8010660:	4603      	mov	r3, r0
 8010662:	2b00      	cmp	r3, #0
 8010664:	d137      	bne.n	80106d6 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010668:	2200      	movs	r2, #0
 801066a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801066c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801066e:	3334      	adds	r3, #52	; 0x34
 8010670:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010674:	4618      	mov	r0, r3
 8010676:	f7fd fe31 	bl	800e2dc <ld_word>
 801067a:	4603      	mov	r3, r0
 801067c:	461a      	mov	r2, r3
 801067e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010682:	429a      	cmp	r2, r3
 8010684:	d127      	bne.n	80106d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010686:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010688:	3334      	adds	r3, #52	; 0x34
 801068a:	4618      	mov	r0, r3
 801068c:	f7fd fe3d 	bl	800e30a <ld_dword>
 8010690:	4603      	mov	r3, r0
 8010692:	4a1d      	ldr	r2, [pc, #116]	; (8010708 <find_volume+0x490>)
 8010694:	4293      	cmp	r3, r2
 8010696:	d11e      	bne.n	80106d6 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801069a:	3334      	adds	r3, #52	; 0x34
 801069c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 80106a0:	4618      	mov	r0, r3
 80106a2:	f7fd fe32 	bl	800e30a <ld_dword>
 80106a6:	4603      	mov	r3, r0
 80106a8:	4a18      	ldr	r2, [pc, #96]	; (801070c <find_volume+0x494>)
 80106aa:	4293      	cmp	r3, r2
 80106ac:	d113      	bne.n	80106d6 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80106ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106b0:	3334      	adds	r3, #52	; 0x34
 80106b2:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80106b6:	4618      	mov	r0, r3
 80106b8:	f7fd fe27 	bl	800e30a <ld_dword>
 80106bc:	4602      	mov	r2, r0
 80106be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c0:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	3334      	adds	r3, #52	; 0x34
 80106c6:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80106ca:	4618      	mov	r0, r3
 80106cc:	f7fd fe1d 	bl	800e30a <ld_dword>
 80106d0:	4602      	mov	r2, r0
 80106d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d4:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80106d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d8:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80106dc:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80106de:	4b0c      	ldr	r3, [pc, #48]	; (8010710 <find_volume+0x498>)
 80106e0:	881b      	ldrh	r3, [r3, #0]
 80106e2:	3301      	adds	r3, #1
 80106e4:	b29a      	uxth	r2, r3
 80106e6:	4b0a      	ldr	r3, [pc, #40]	; (8010710 <find_volume+0x498>)
 80106e8:	801a      	strh	r2, [r3, #0]
 80106ea:	4b09      	ldr	r3, [pc, #36]	; (8010710 <find_volume+0x498>)
 80106ec:	881a      	ldrh	r2, [r3, #0]
 80106ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f0:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80106f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106f4:	4a07      	ldr	r2, [pc, #28]	; (8010714 <find_volume+0x49c>)
 80106f6:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80106f8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80106fa:	f7fe f829 	bl	800e750 <clear_lock>
#endif
	return FR_OK;
 80106fe:	2300      	movs	r3, #0
}
 8010700:	4618      	mov	r0, r3
 8010702:	3758      	adds	r7, #88	; 0x58
 8010704:	46bd      	mov	sp, r7
 8010706:	bd80      	pop	{r7, pc}
 8010708:	41615252 	.word	0x41615252
 801070c:	61417272 	.word	0x61417272
 8010710:	20000f20 	.word	0x20000f20
 8010714:	20000f44 	.word	0x20000f44

08010718 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 8010718:	b580      	push	{r7, lr}
 801071a:	b084      	sub	sp, #16
 801071c:	af00      	add	r7, sp, #0
 801071e:	6078      	str	r0, [r7, #4]
 8010720:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8010722:	2309      	movs	r3, #9
 8010724:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 8010726:	687b      	ldr	r3, [r7, #4]
 8010728:	2b00      	cmp	r3, #0
 801072a:	d01c      	beq.n	8010766 <validate+0x4e>
 801072c:	687b      	ldr	r3, [r7, #4]
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d018      	beq.n	8010766 <validate+0x4e>
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	781b      	ldrb	r3, [r3, #0]
 801073a:	2b00      	cmp	r3, #0
 801073c:	d013      	beq.n	8010766 <validate+0x4e>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	889a      	ldrh	r2, [r3, #4]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	88db      	ldrh	r3, [r3, #6]
 8010748:	429a      	cmp	r2, r3
 801074a:	d10c      	bne.n	8010766 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 801074c:	687b      	ldr	r3, [r7, #4]
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	785b      	ldrb	r3, [r3, #1]
 8010752:	4618      	mov	r0, r3
 8010754:	f7fd fd24 	bl	800e1a0 <disk_status>
 8010758:	4603      	mov	r3, r0
 801075a:	f003 0301 	and.w	r3, r3, #1
 801075e:	2b00      	cmp	r3, #0
 8010760:	d101      	bne.n	8010766 <validate+0x4e>
			res = FR_OK;
 8010762:	2300      	movs	r3, #0
 8010764:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010766:	7bfb      	ldrb	r3, [r7, #15]
 8010768:	2b00      	cmp	r3, #0
 801076a:	d102      	bne.n	8010772 <validate+0x5a>
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	681b      	ldr	r3, [r3, #0]
 8010770:	e000      	b.n	8010774 <validate+0x5c>
 8010772:	2300      	movs	r3, #0
 8010774:	683a      	ldr	r2, [r7, #0]
 8010776:	6013      	str	r3, [r2, #0]
	return res;
 8010778:	7bfb      	ldrb	r3, [r7, #15]
}
 801077a:	4618      	mov	r0, r3
 801077c:	3710      	adds	r7, #16
 801077e:	46bd      	mov	sp, r7
 8010780:	bd80      	pop	{r7, pc}
	...

08010784 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010784:	b580      	push	{r7, lr}
 8010786:	b088      	sub	sp, #32
 8010788:	af00      	add	r7, sp, #0
 801078a:	60f8      	str	r0, [r7, #12]
 801078c:	60b9      	str	r1, [r7, #8]
 801078e:	4613      	mov	r3, r2
 8010790:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010792:	68bb      	ldr	r3, [r7, #8]
 8010794:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010796:	f107 0310 	add.w	r3, r7, #16
 801079a:	4618      	mov	r0, r3
 801079c:	f7ff fcd3 	bl	8010146 <get_ldnumber>
 80107a0:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 80107a2:	69fb      	ldr	r3, [r7, #28]
 80107a4:	2b00      	cmp	r3, #0
 80107a6:	da01      	bge.n	80107ac <f_mount+0x28>
 80107a8:	230b      	movs	r3, #11
 80107aa:	e02b      	b.n	8010804 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80107ac:	4a17      	ldr	r2, [pc, #92]	; (801080c <f_mount+0x88>)
 80107ae:	69fb      	ldr	r3, [r7, #28]
 80107b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80107b4:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80107b6:	69bb      	ldr	r3, [r7, #24]
 80107b8:	2b00      	cmp	r3, #0
 80107ba:	d005      	beq.n	80107c8 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80107bc:	69b8      	ldr	r0, [r7, #24]
 80107be:	f7fd ffc7 	bl	800e750 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80107c2:	69bb      	ldr	r3, [r7, #24]
 80107c4:	2200      	movs	r2, #0
 80107c6:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80107c8:	68fb      	ldr	r3, [r7, #12]
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d002      	beq.n	80107d4 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80107ce:	68fb      	ldr	r3, [r7, #12]
 80107d0:	2200      	movs	r2, #0
 80107d2:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80107d4:	68fa      	ldr	r2, [r7, #12]
 80107d6:	490d      	ldr	r1, [pc, #52]	; (801080c <f_mount+0x88>)
 80107d8:	69fb      	ldr	r3, [r7, #28]
 80107da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d002      	beq.n	80107ea <f_mount+0x66>
 80107e4:	79fb      	ldrb	r3, [r7, #7]
 80107e6:	2b01      	cmp	r3, #1
 80107e8:	d001      	beq.n	80107ee <f_mount+0x6a>
 80107ea:	2300      	movs	r3, #0
 80107ec:	e00a      	b.n	8010804 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80107ee:	f107 010c 	add.w	r1, r7, #12
 80107f2:	f107 0308 	add.w	r3, r7, #8
 80107f6:	2200      	movs	r2, #0
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7ff fd3d 	bl	8010278 <find_volume>
 80107fe:	4603      	mov	r3, r0
 8010800:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 8010802:	7dfb      	ldrb	r3, [r7, #23]
}
 8010804:	4618      	mov	r0, r3
 8010806:	3720      	adds	r7, #32
 8010808:	46bd      	mov	sp, r7
 801080a:	bd80      	pop	{r7, pc}
 801080c:	20000f1c 	.word	0x20000f1c

08010810 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8010810:	b580      	push	{r7, lr}
 8010812:	b09a      	sub	sp, #104	; 0x68
 8010814:	af00      	add	r7, sp, #0
 8010816:	60f8      	str	r0, [r7, #12]
 8010818:	60b9      	str	r1, [r7, #8]
 801081a:	4613      	mov	r3, r2
 801081c:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	2b00      	cmp	r3, #0
 8010822:	d101      	bne.n	8010828 <f_open+0x18>
 8010824:	2309      	movs	r3, #9
 8010826:	e1ad      	b.n	8010b84 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8010828:	79fb      	ldrb	r3, [r7, #7]
 801082a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801082e:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8010830:	79fa      	ldrb	r2, [r7, #7]
 8010832:	f107 0114 	add.w	r1, r7, #20
 8010836:	f107 0308 	add.w	r3, r7, #8
 801083a:	4618      	mov	r0, r3
 801083c:	f7ff fd1c 	bl	8010278 <find_volume>
 8010840:	4603      	mov	r3, r0
 8010842:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8010846:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801084a:	2b00      	cmp	r3, #0
 801084c:	f040 8191 	bne.w	8010b72 <f_open+0x362>
		dj.obj.fs = fs;
 8010850:	697b      	ldr	r3, [r7, #20]
 8010852:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8010854:	68ba      	ldr	r2, [r7, #8]
 8010856:	f107 0318 	add.w	r3, r7, #24
 801085a:	4611      	mov	r1, r2
 801085c:	4618      	mov	r0, r3
 801085e:	f7ff fc01 	bl	8010064 <follow_path>
 8010862:	4603      	mov	r3, r0
 8010864:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010868:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801086c:	2b00      	cmp	r3, #0
 801086e:	d11a      	bne.n	80108a6 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010870:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010874:	b25b      	sxtb	r3, r3
 8010876:	2b00      	cmp	r3, #0
 8010878:	da03      	bge.n	8010882 <f_open+0x72>
				res = FR_INVALID_NAME;
 801087a:	2306      	movs	r3, #6
 801087c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010880:	e011      	b.n	80108a6 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010882:	79fb      	ldrb	r3, [r7, #7]
 8010884:	f023 0301 	bic.w	r3, r3, #1
 8010888:	2b00      	cmp	r3, #0
 801088a:	bf14      	ite	ne
 801088c:	2301      	movne	r3, #1
 801088e:	2300      	moveq	r3, #0
 8010890:	b2db      	uxtb	r3, r3
 8010892:	461a      	mov	r2, r3
 8010894:	f107 0318 	add.w	r3, r7, #24
 8010898:	4611      	mov	r1, r2
 801089a:	4618      	mov	r0, r3
 801089c:	f7fd fe16 	bl	800e4cc <chk_lock>
 80108a0:	4603      	mov	r3, r0
 80108a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 80108a6:	79fb      	ldrb	r3, [r7, #7]
 80108a8:	f003 031c 	and.w	r3, r3, #28
 80108ac:	2b00      	cmp	r3, #0
 80108ae:	d07f      	beq.n	80109b0 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 80108b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d017      	beq.n	80108e8 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 80108b8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108bc:	2b04      	cmp	r3, #4
 80108be:	d10e      	bne.n	80108de <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 80108c0:	f7fd fe5e 	bl	800e580 <enq_lock>
 80108c4:	4603      	mov	r3, r0
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d006      	beq.n	80108d8 <f_open+0xc8>
 80108ca:	f107 0318 	add.w	r3, r7, #24
 80108ce:	4618      	mov	r0, r3
 80108d0:	f7ff f83a 	bl	800f948 <dir_register>
 80108d4:	4603      	mov	r3, r0
 80108d6:	e000      	b.n	80108da <f_open+0xca>
 80108d8:	2312      	movs	r3, #18
 80108da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 80108de:	79fb      	ldrb	r3, [r7, #7]
 80108e0:	f043 0308 	orr.w	r3, r3, #8
 80108e4:	71fb      	strb	r3, [r7, #7]
 80108e6:	e010      	b.n	801090a <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 80108e8:	7fbb      	ldrb	r3, [r7, #30]
 80108ea:	f003 0311 	and.w	r3, r3, #17
 80108ee:	2b00      	cmp	r3, #0
 80108f0:	d003      	beq.n	80108fa <f_open+0xea>
					res = FR_DENIED;
 80108f2:	2307      	movs	r3, #7
 80108f4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80108f8:	e007      	b.n	801090a <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 80108fa:	79fb      	ldrb	r3, [r7, #7]
 80108fc:	f003 0304 	and.w	r3, r3, #4
 8010900:	2b00      	cmp	r3, #0
 8010902:	d002      	beq.n	801090a <f_open+0xfa>
 8010904:	2308      	movs	r3, #8
 8010906:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 801090a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801090e:	2b00      	cmp	r3, #0
 8010910:	d168      	bne.n	80109e4 <f_open+0x1d4>
 8010912:	79fb      	ldrb	r3, [r7, #7]
 8010914:	f003 0308 	and.w	r3, r3, #8
 8010918:	2b00      	cmp	r3, #0
 801091a:	d063      	beq.n	80109e4 <f_open+0x1d4>
				dw = GET_FATTIME();
 801091c:	f7fb fc08 	bl	800c130 <get_fattime>
 8010920:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8010922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010924:	330e      	adds	r3, #14
 8010926:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010928:	4618      	mov	r0, r3
 801092a:	f7fd fd2a 	bl	800e382 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 801092e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010930:	3316      	adds	r3, #22
 8010932:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8010934:	4618      	mov	r0, r3
 8010936:	f7fd fd24 	bl	800e382 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 801093a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801093c:	330b      	adds	r3, #11
 801093e:	2220      	movs	r2, #32
 8010940:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8010942:	697b      	ldr	r3, [r7, #20]
 8010944:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010946:	4611      	mov	r1, r2
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe fc6c 	bl	800f226 <ld_clust>
 801094e:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8010950:	697b      	ldr	r3, [r7, #20]
 8010952:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8010954:	2200      	movs	r2, #0
 8010956:	4618      	mov	r0, r3
 8010958:	f7fe fc84 	bl	800f264 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 801095c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801095e:	331c      	adds	r3, #28
 8010960:	2100      	movs	r1, #0
 8010962:	4618      	mov	r0, r3
 8010964:	f7fd fd0d 	bl	800e382 <st_dword>
					fs->wflag = 1;
 8010968:	697b      	ldr	r3, [r7, #20]
 801096a:	2201      	movs	r2, #1
 801096c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801096e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010970:	2b00      	cmp	r3, #0
 8010972:	d037      	beq.n	80109e4 <f_open+0x1d4>
						dw = fs->winsect;
 8010974:	697b      	ldr	r3, [r7, #20]
 8010976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010978:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801097a:	f107 0318 	add.w	r3, r7, #24
 801097e:	2200      	movs	r2, #0
 8010980:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010982:	4618      	mov	r0, r3
 8010984:	f7fe f998 	bl	800ecb8 <remove_chain>
 8010988:	4603      	mov	r3, r0
 801098a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801098e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010992:	2b00      	cmp	r3, #0
 8010994:	d126      	bne.n	80109e4 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010996:	697b      	ldr	r3, [r7, #20]
 8010998:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801099a:	4618      	mov	r0, r3
 801099c:	f7fd ff40 	bl	800e820 <move_window>
 80109a0:	4603      	mov	r3, r0
 80109a2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 80109a6:	697b      	ldr	r3, [r7, #20]
 80109a8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80109aa:	3a01      	subs	r2, #1
 80109ac:	611a      	str	r2, [r3, #16]
 80109ae:	e019      	b.n	80109e4 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 80109b0:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80109b4:	2b00      	cmp	r3, #0
 80109b6:	d115      	bne.n	80109e4 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 80109b8:	7fbb      	ldrb	r3, [r7, #30]
 80109ba:	f003 0310 	and.w	r3, r3, #16
 80109be:	2b00      	cmp	r3, #0
 80109c0:	d003      	beq.n	80109ca <f_open+0x1ba>
					res = FR_NO_FILE;
 80109c2:	2304      	movs	r3, #4
 80109c4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80109c8:	e00c      	b.n	80109e4 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 80109ca:	79fb      	ldrb	r3, [r7, #7]
 80109cc:	f003 0302 	and.w	r3, r3, #2
 80109d0:	2b00      	cmp	r3, #0
 80109d2:	d007      	beq.n	80109e4 <f_open+0x1d4>
 80109d4:	7fbb      	ldrb	r3, [r7, #30]
 80109d6:	f003 0301 	and.w	r3, r3, #1
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d002      	beq.n	80109e4 <f_open+0x1d4>
						res = FR_DENIED;
 80109de:	2307      	movs	r3, #7
 80109e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 80109e4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80109e8:	2b00      	cmp	r3, #0
 80109ea:	d128      	bne.n	8010a3e <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 80109ec:	79fb      	ldrb	r3, [r7, #7]
 80109ee:	f003 0308 	and.w	r3, r3, #8
 80109f2:	2b00      	cmp	r3, #0
 80109f4:	d003      	beq.n	80109fe <f_open+0x1ee>
				mode |= FA_MODIFIED;
 80109f6:	79fb      	ldrb	r3, [r7, #7]
 80109f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80109fc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 80109fe:	697b      	ldr	r3, [r7, #20]
 8010a00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a02:	68fb      	ldr	r3, [r7, #12]
 8010a04:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8010a06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a08:	68fb      	ldr	r3, [r7, #12]
 8010a0a:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010a0c:	79fb      	ldrb	r3, [r7, #7]
 8010a0e:	f023 0301 	bic.w	r3, r3, #1
 8010a12:	2b00      	cmp	r3, #0
 8010a14:	bf14      	ite	ne
 8010a16:	2301      	movne	r3, #1
 8010a18:	2300      	moveq	r3, #0
 8010a1a:	b2db      	uxtb	r3, r3
 8010a1c:	461a      	mov	r2, r3
 8010a1e:	f107 0318 	add.w	r3, r7, #24
 8010a22:	4611      	mov	r1, r2
 8010a24:	4618      	mov	r0, r3
 8010a26:	f7fd fdcb 	bl	800e5c0 <inc_lock>
 8010a2a:	4602      	mov	r2, r0
 8010a2c:	68fb      	ldr	r3, [r7, #12]
 8010a2e:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8010a30:	68fb      	ldr	r3, [r7, #12]
 8010a32:	691b      	ldr	r3, [r3, #16]
 8010a34:	2b00      	cmp	r3, #0
 8010a36:	d102      	bne.n	8010a3e <f_open+0x22e>
 8010a38:	2302      	movs	r3, #2
 8010a3a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8010a3e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010a42:	2b00      	cmp	r3, #0
 8010a44:	f040 8095 	bne.w	8010b72 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8010a48:	697b      	ldr	r3, [r7, #20]
 8010a4a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010a4c:	4611      	mov	r1, r2
 8010a4e:	4618      	mov	r0, r3
 8010a50:	f7fe fbe9 	bl	800f226 <ld_clust>
 8010a54:	4602      	mov	r2, r0
 8010a56:	68fb      	ldr	r3, [r7, #12]
 8010a58:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8010a5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010a5c:	331c      	adds	r3, #28
 8010a5e:	4618      	mov	r0, r3
 8010a60:	f7fd fc53 	bl	800e30a <ld_dword>
 8010a64:	4602      	mov	r2, r0
 8010a66:	68fb      	ldr	r3, [r7, #12]
 8010a68:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8010a6a:	68fb      	ldr	r3, [r7, #12]
 8010a6c:	2200      	movs	r2, #0
 8010a6e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010a70:	697a      	ldr	r2, [r7, #20]
 8010a72:	68fb      	ldr	r3, [r7, #12]
 8010a74:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010a76:	697b      	ldr	r3, [r7, #20]
 8010a78:	88da      	ldrh	r2, [r3, #6]
 8010a7a:	68fb      	ldr	r3, [r7, #12]
 8010a7c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8010a7e:	68fb      	ldr	r3, [r7, #12]
 8010a80:	79fa      	ldrb	r2, [r7, #7]
 8010a82:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010a84:	68fb      	ldr	r3, [r7, #12]
 8010a86:	2200      	movs	r2, #0
 8010a88:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	2200      	movs	r2, #0
 8010a8e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010a90:	68fb      	ldr	r3, [r7, #12]
 8010a92:	2200      	movs	r2, #0
 8010a94:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010a96:	68fb      	ldr	r3, [r7, #12]
 8010a98:	3330      	adds	r3, #48	; 0x30
 8010a9a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010a9e:	2100      	movs	r1, #0
 8010aa0:	4618      	mov	r0, r3
 8010aa2:	f7fd fcb9 	bl	800e418 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010aa6:	79fb      	ldrb	r3, [r7, #7]
 8010aa8:	f003 0320 	and.w	r3, r3, #32
 8010aac:	2b00      	cmp	r3, #0
 8010aae:	d060      	beq.n	8010b72 <f_open+0x362>
 8010ab0:	68fb      	ldr	r3, [r7, #12]
 8010ab2:	68db      	ldr	r3, [r3, #12]
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d05c      	beq.n	8010b72 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	68da      	ldr	r2, [r3, #12]
 8010abc:	68fb      	ldr	r3, [r7, #12]
 8010abe:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010ac0:	697b      	ldr	r3, [r7, #20]
 8010ac2:	895b      	ldrh	r3, [r3, #10]
 8010ac4:	025b      	lsls	r3, r3, #9
 8010ac6:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010ac8:	68fb      	ldr	r3, [r7, #12]
 8010aca:	689b      	ldr	r3, [r3, #8]
 8010acc:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	68db      	ldr	r3, [r3, #12]
 8010ad2:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010ad4:	e016      	b.n	8010b04 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010ad6:	68fb      	ldr	r3, [r7, #12]
 8010ad8:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7fd ff5a 	bl	800e994 <get_fat>
 8010ae0:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010ae2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010ae4:	2b01      	cmp	r3, #1
 8010ae6:	d802      	bhi.n	8010aee <f_open+0x2de>
 8010ae8:	2302      	movs	r3, #2
 8010aea:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8010aee:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010af0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010af4:	d102      	bne.n	8010afc <f_open+0x2ec>
 8010af6:	2301      	movs	r3, #1
 8010af8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8010afc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010afe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b00:	1ad3      	subs	r3, r2, r3
 8010b02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010b04:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b08:	2b00      	cmp	r3, #0
 8010b0a:	d103      	bne.n	8010b14 <f_open+0x304>
 8010b0c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8010b0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010b10:	429a      	cmp	r2, r3
 8010b12:	d8e0      	bhi.n	8010ad6 <f_open+0x2c6>
				}
				fp->clust = clst;
 8010b14:	68fb      	ldr	r3, [r7, #12]
 8010b16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8010b18:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8010b1a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b1e:	2b00      	cmp	r3, #0
 8010b20:	d127      	bne.n	8010b72 <f_open+0x362>
 8010b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d022      	beq.n	8010b72 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8010b2c:	697b      	ldr	r3, [r7, #20]
 8010b2e:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8010b30:	4618      	mov	r0, r3
 8010b32:	f7fd ff11 	bl	800e958 <clust2sect>
 8010b36:	64f8      	str	r0, [r7, #76]	; 0x4c
 8010b38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b3a:	2b00      	cmp	r3, #0
 8010b3c:	d103      	bne.n	8010b46 <f_open+0x336>
						res = FR_INT_ERR;
 8010b3e:	2302      	movs	r3, #2
 8010b40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010b44:	e015      	b.n	8010b72 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8010b46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8010b48:	0a5a      	lsrs	r2, r3, #9
 8010b4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010b4c:	441a      	add	r2, r3
 8010b4e:	68fb      	ldr	r3, [r7, #12]
 8010b50:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8010b52:	697b      	ldr	r3, [r7, #20]
 8010b54:	7858      	ldrb	r0, [r3, #1]
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	6a1a      	ldr	r2, [r3, #32]
 8010b60:	2301      	movs	r3, #1
 8010b62:	f7fd fb5d 	bl	800e220 <disk_read>
 8010b66:	4603      	mov	r3, r0
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d002      	beq.n	8010b72 <f_open+0x362>
 8010b6c:	2301      	movs	r3, #1
 8010b6e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010b72:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010b76:	2b00      	cmp	r3, #0
 8010b78:	d002      	beq.n	8010b80 <f_open+0x370>
 8010b7a:	68fb      	ldr	r3, [r7, #12]
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010b80:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010b84:	4618      	mov	r0, r3
 8010b86:	3768      	adds	r7, #104	; 0x68
 8010b88:	46bd      	mov	sp, r7
 8010b8a:	bd80      	pop	{r7, pc}

08010b8c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 8010b8c:	b580      	push	{r7, lr}
 8010b8e:	b08e      	sub	sp, #56	; 0x38
 8010b90:	af00      	add	r7, sp, #0
 8010b92:	60f8      	str	r0, [r7, #12]
 8010b94:	60b9      	str	r1, [r7, #8]
 8010b96:	607a      	str	r2, [r7, #4]
 8010b98:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 8010b9e:	683b      	ldr	r3, [r7, #0]
 8010ba0:	2200      	movs	r2, #0
 8010ba2:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010ba4:	68fb      	ldr	r3, [r7, #12]
 8010ba6:	f107 0214 	add.w	r2, r7, #20
 8010baa:	4611      	mov	r1, r2
 8010bac:	4618      	mov	r0, r3
 8010bae:	f7ff fdb3 	bl	8010718 <validate>
 8010bb2:	4603      	mov	r3, r0
 8010bb4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010bb8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bbc:	2b00      	cmp	r3, #0
 8010bbe:	d107      	bne.n	8010bd0 <f_read+0x44>
 8010bc0:	68fb      	ldr	r3, [r7, #12]
 8010bc2:	7d5b      	ldrb	r3, [r3, #21]
 8010bc4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010bc8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bcc:	2b00      	cmp	r3, #0
 8010bce:	d002      	beq.n	8010bd6 <f_read+0x4a>
 8010bd0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010bd4:	e115      	b.n	8010e02 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	7d1b      	ldrb	r3, [r3, #20]
 8010bda:	f003 0301 	and.w	r3, r3, #1
 8010bde:	2b00      	cmp	r3, #0
 8010be0:	d101      	bne.n	8010be6 <f_read+0x5a>
 8010be2:	2307      	movs	r3, #7
 8010be4:	e10d      	b.n	8010e02 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010be6:	68fb      	ldr	r3, [r7, #12]
 8010be8:	68da      	ldr	r2, [r3, #12]
 8010bea:	68fb      	ldr	r3, [r7, #12]
 8010bec:	699b      	ldr	r3, [r3, #24]
 8010bee:	1ad3      	subs	r3, r2, r3
 8010bf0:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010bf2:	687a      	ldr	r2, [r7, #4]
 8010bf4:	6a3b      	ldr	r3, [r7, #32]
 8010bf6:	429a      	cmp	r2, r3
 8010bf8:	f240 80fe 	bls.w	8010df8 <f_read+0x26c>
 8010bfc:	6a3b      	ldr	r3, [r7, #32]
 8010bfe:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8010c00:	e0fa      	b.n	8010df8 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 8010c02:	68fb      	ldr	r3, [r7, #12]
 8010c04:	699b      	ldr	r3, [r3, #24]
 8010c06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010c0a:	2b00      	cmp	r3, #0
 8010c0c:	f040 80c6 	bne.w	8010d9c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 8010c10:	68fb      	ldr	r3, [r7, #12]
 8010c12:	699b      	ldr	r3, [r3, #24]
 8010c14:	0a5b      	lsrs	r3, r3, #9
 8010c16:	697a      	ldr	r2, [r7, #20]
 8010c18:	8952      	ldrh	r2, [r2, #10]
 8010c1a:	3a01      	subs	r2, #1
 8010c1c:	4013      	ands	r3, r2
 8010c1e:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 8010c20:	69fb      	ldr	r3, [r7, #28]
 8010c22:	2b00      	cmp	r3, #0
 8010c24:	d12f      	bne.n	8010c86 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8010c26:	68fb      	ldr	r3, [r7, #12]
 8010c28:	699b      	ldr	r3, [r3, #24]
 8010c2a:	2b00      	cmp	r3, #0
 8010c2c:	d103      	bne.n	8010c36 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	689b      	ldr	r3, [r3, #8]
 8010c32:	633b      	str	r3, [r7, #48]	; 0x30
 8010c34:	e013      	b.n	8010c5e <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c3a:	2b00      	cmp	r3, #0
 8010c3c:	d007      	beq.n	8010c4e <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	699b      	ldr	r3, [r3, #24]
 8010c42:	4619      	mov	r1, r3
 8010c44:	68f8      	ldr	r0, [r7, #12]
 8010c46:	f7fe f934 	bl	800eeb2 <clmt_clust>
 8010c4a:	6338      	str	r0, [r7, #48]	; 0x30
 8010c4c:	e007      	b.n	8010c5e <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 8010c4e:	68fa      	ldr	r2, [r7, #12]
 8010c50:	68fb      	ldr	r3, [r7, #12]
 8010c52:	69db      	ldr	r3, [r3, #28]
 8010c54:	4619      	mov	r1, r3
 8010c56:	4610      	mov	r0, r2
 8010c58:	f7fd fe9c 	bl	800e994 <get_fat>
 8010c5c:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 8010c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c60:	2b01      	cmp	r3, #1
 8010c62:	d804      	bhi.n	8010c6e <f_read+0xe2>
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	2202      	movs	r2, #2
 8010c68:	755a      	strb	r2, [r3, #21]
 8010c6a:	2302      	movs	r3, #2
 8010c6c:	e0c9      	b.n	8010e02 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010c74:	d104      	bne.n	8010c80 <f_read+0xf4>
 8010c76:	68fb      	ldr	r3, [r7, #12]
 8010c78:	2201      	movs	r2, #1
 8010c7a:	755a      	strb	r2, [r3, #21]
 8010c7c:	2301      	movs	r3, #1
 8010c7e:	e0c0      	b.n	8010e02 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010c80:	68fb      	ldr	r3, [r7, #12]
 8010c82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010c84:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010c86:	697a      	ldr	r2, [r7, #20]
 8010c88:	68fb      	ldr	r3, [r7, #12]
 8010c8a:	69db      	ldr	r3, [r3, #28]
 8010c8c:	4619      	mov	r1, r3
 8010c8e:	4610      	mov	r0, r2
 8010c90:	f7fd fe62 	bl	800e958 <clust2sect>
 8010c94:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010c96:	69bb      	ldr	r3, [r7, #24]
 8010c98:	2b00      	cmp	r3, #0
 8010c9a:	d104      	bne.n	8010ca6 <f_read+0x11a>
 8010c9c:	68fb      	ldr	r3, [r7, #12]
 8010c9e:	2202      	movs	r2, #2
 8010ca0:	755a      	strb	r2, [r3, #21]
 8010ca2:	2302      	movs	r3, #2
 8010ca4:	e0ad      	b.n	8010e02 <f_read+0x276>
			sect += csect;
 8010ca6:	69ba      	ldr	r2, [r7, #24]
 8010ca8:	69fb      	ldr	r3, [r7, #28]
 8010caa:	4413      	add	r3, r2
 8010cac:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010cae:	687b      	ldr	r3, [r7, #4]
 8010cb0:	0a5b      	lsrs	r3, r3, #9
 8010cb2:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010cb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d039      	beq.n	8010d2e <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010cba:	69fa      	ldr	r2, [r7, #28]
 8010cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cbe:	4413      	add	r3, r2
 8010cc0:	697a      	ldr	r2, [r7, #20]
 8010cc2:	8952      	ldrh	r2, [r2, #10]
 8010cc4:	4293      	cmp	r3, r2
 8010cc6:	d905      	bls.n	8010cd4 <f_read+0x148>
					cc = fs->csize - csect;
 8010cc8:	697b      	ldr	r3, [r7, #20]
 8010cca:	895b      	ldrh	r3, [r3, #10]
 8010ccc:	461a      	mov	r2, r3
 8010cce:	69fb      	ldr	r3, [r7, #28]
 8010cd0:	1ad3      	subs	r3, r2, r3
 8010cd2:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010cd4:	697b      	ldr	r3, [r7, #20]
 8010cd6:	7858      	ldrb	r0, [r3, #1]
 8010cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010cda:	69ba      	ldr	r2, [r7, #24]
 8010cdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010cde:	f7fd fa9f 	bl	800e220 <disk_read>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d004      	beq.n	8010cf2 <f_read+0x166>
 8010ce8:	68fb      	ldr	r3, [r7, #12]
 8010cea:	2201      	movs	r2, #1
 8010cec:	755a      	strb	r2, [r3, #21]
 8010cee:	2301      	movs	r3, #1
 8010cf0:	e087      	b.n	8010e02 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010cf2:	68fb      	ldr	r3, [r7, #12]
 8010cf4:	7d1b      	ldrb	r3, [r3, #20]
 8010cf6:	b25b      	sxtb	r3, r3
 8010cf8:	2b00      	cmp	r3, #0
 8010cfa:	da14      	bge.n	8010d26 <f_read+0x19a>
 8010cfc:	68fb      	ldr	r3, [r7, #12]
 8010cfe:	6a1a      	ldr	r2, [r3, #32]
 8010d00:	69bb      	ldr	r3, [r7, #24]
 8010d02:	1ad3      	subs	r3, r2, r3
 8010d04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010d06:	429a      	cmp	r2, r3
 8010d08:	d90d      	bls.n	8010d26 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010d0a:	68fb      	ldr	r3, [r7, #12]
 8010d0c:	6a1a      	ldr	r2, [r3, #32]
 8010d0e:	69bb      	ldr	r3, [r7, #24]
 8010d10:	1ad3      	subs	r3, r2, r3
 8010d12:	025b      	lsls	r3, r3, #9
 8010d14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010d16:	18d0      	adds	r0, r2, r3
 8010d18:	68fb      	ldr	r3, [r7, #12]
 8010d1a:	3330      	adds	r3, #48	; 0x30
 8010d1c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010d20:	4619      	mov	r1, r3
 8010d22:	f7fd fb59 	bl	800e3d8 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010d28:	025b      	lsls	r3, r3, #9
 8010d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010d2c:	e050      	b.n	8010dd0 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010d2e:	68fb      	ldr	r3, [r7, #12]
 8010d30:	6a1b      	ldr	r3, [r3, #32]
 8010d32:	69ba      	ldr	r2, [r7, #24]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d02e      	beq.n	8010d96 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010d38:	68fb      	ldr	r3, [r7, #12]
 8010d3a:	7d1b      	ldrb	r3, [r3, #20]
 8010d3c:	b25b      	sxtb	r3, r3
 8010d3e:	2b00      	cmp	r3, #0
 8010d40:	da18      	bge.n	8010d74 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010d42:	697b      	ldr	r3, [r7, #20]
 8010d44:	7858      	ldrb	r0, [r3, #1]
 8010d46:	68fb      	ldr	r3, [r7, #12]
 8010d48:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d4c:	68fb      	ldr	r3, [r7, #12]
 8010d4e:	6a1a      	ldr	r2, [r3, #32]
 8010d50:	2301      	movs	r3, #1
 8010d52:	f7fd fa85 	bl	800e260 <disk_write>
 8010d56:	4603      	mov	r3, r0
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d004      	beq.n	8010d66 <f_read+0x1da>
 8010d5c:	68fb      	ldr	r3, [r7, #12]
 8010d5e:	2201      	movs	r2, #1
 8010d60:	755a      	strb	r2, [r3, #21]
 8010d62:	2301      	movs	r3, #1
 8010d64:	e04d      	b.n	8010e02 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	7d1b      	ldrb	r3, [r3, #20]
 8010d6a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010d6e:	b2da      	uxtb	r2, r3
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010d74:	697b      	ldr	r3, [r7, #20]
 8010d76:	7858      	ldrb	r0, [r3, #1]
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010d7e:	2301      	movs	r3, #1
 8010d80:	69ba      	ldr	r2, [r7, #24]
 8010d82:	f7fd fa4d 	bl	800e220 <disk_read>
 8010d86:	4603      	mov	r3, r0
 8010d88:	2b00      	cmp	r3, #0
 8010d8a:	d004      	beq.n	8010d96 <f_read+0x20a>
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	2201      	movs	r2, #1
 8010d90:	755a      	strb	r2, [r3, #21]
 8010d92:	2301      	movs	r3, #1
 8010d94:	e035      	b.n	8010e02 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010d96:	68fb      	ldr	r3, [r7, #12]
 8010d98:	69ba      	ldr	r2, [r7, #24]
 8010d9a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010d9c:	68fb      	ldr	r3, [r7, #12]
 8010d9e:	699b      	ldr	r3, [r3, #24]
 8010da0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010da4:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010da8:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010daa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dac:	687b      	ldr	r3, [r7, #4]
 8010dae:	429a      	cmp	r2, r3
 8010db0:	d901      	bls.n	8010db6 <f_read+0x22a>
 8010db2:	687b      	ldr	r3, [r7, #4]
 8010db4:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010db6:	68fb      	ldr	r3, [r7, #12]
 8010db8:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010dbc:	68fb      	ldr	r3, [r7, #12]
 8010dbe:	699b      	ldr	r3, [r3, #24]
 8010dc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010dc4:	4413      	add	r3, r2
 8010dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010dc8:	4619      	mov	r1, r3
 8010dca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010dcc:	f7fd fb04 	bl	800e3d8 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010dd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dd4:	4413      	add	r3, r2
 8010dd6:	627b      	str	r3, [r7, #36]	; 0x24
 8010dd8:	68fb      	ldr	r3, [r7, #12]
 8010dda:	699a      	ldr	r2, [r3, #24]
 8010ddc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dde:	441a      	add	r2, r3
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	619a      	str	r2, [r3, #24]
 8010de4:	683b      	ldr	r3, [r7, #0]
 8010de6:	681a      	ldr	r2, [r3, #0]
 8010de8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010dea:	441a      	add	r2, r3
 8010dec:	683b      	ldr	r3, [r7, #0]
 8010dee:	601a      	str	r2, [r3, #0]
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010df8:	687b      	ldr	r3, [r7, #4]
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	f47f af01 	bne.w	8010c02 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010e00:	2300      	movs	r3, #0
}
 8010e02:	4618      	mov	r0, r3
 8010e04:	3738      	adds	r7, #56	; 0x38
 8010e06:	46bd      	mov	sp, r7
 8010e08:	bd80      	pop	{r7, pc}

08010e0a <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010e0a:	b580      	push	{r7, lr}
 8010e0c:	b086      	sub	sp, #24
 8010e0e:	af00      	add	r7, sp, #0
 8010e10:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010e12:	687b      	ldr	r3, [r7, #4]
 8010e14:	f107 0208 	add.w	r2, r7, #8
 8010e18:	4611      	mov	r1, r2
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	f7ff fc7c 	bl	8010718 <validate>
 8010e20:	4603      	mov	r3, r0
 8010e22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010e24:	7dfb      	ldrb	r3, [r7, #23]
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d168      	bne.n	8010efc <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	7d1b      	ldrb	r3, [r3, #20]
 8010e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d062      	beq.n	8010efc <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	7d1b      	ldrb	r3, [r3, #20]
 8010e3a:	b25b      	sxtb	r3, r3
 8010e3c:	2b00      	cmp	r3, #0
 8010e3e:	da15      	bge.n	8010e6c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010e40:	68bb      	ldr	r3, [r7, #8]
 8010e42:	7858      	ldrb	r0, [r3, #1]
 8010e44:	687b      	ldr	r3, [r7, #4]
 8010e46:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010e4a:	687b      	ldr	r3, [r7, #4]
 8010e4c:	6a1a      	ldr	r2, [r3, #32]
 8010e4e:	2301      	movs	r3, #1
 8010e50:	f7fd fa06 	bl	800e260 <disk_write>
 8010e54:	4603      	mov	r3, r0
 8010e56:	2b00      	cmp	r3, #0
 8010e58:	d001      	beq.n	8010e5e <f_sync+0x54>
 8010e5a:	2301      	movs	r3, #1
 8010e5c:	e04f      	b.n	8010efe <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010e5e:	687b      	ldr	r3, [r7, #4]
 8010e60:	7d1b      	ldrb	r3, [r3, #20]
 8010e62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010e66:	b2da      	uxtb	r2, r3
 8010e68:	687b      	ldr	r3, [r7, #4]
 8010e6a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010e6c:	f7fb f960 	bl	800c130 <get_fattime>
 8010e70:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010e72:	68ba      	ldr	r2, [r7, #8]
 8010e74:	687b      	ldr	r3, [r7, #4]
 8010e76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010e78:	4619      	mov	r1, r3
 8010e7a:	4610      	mov	r0, r2
 8010e7c:	f7fd fcd0 	bl	800e820 <move_window>
 8010e80:	4603      	mov	r3, r0
 8010e82:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010e84:	7dfb      	ldrb	r3, [r7, #23]
 8010e86:	2b00      	cmp	r3, #0
 8010e88:	d138      	bne.n	8010efc <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010e8a:	687b      	ldr	r3, [r7, #4]
 8010e8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010e8e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010e90:	68fb      	ldr	r3, [r7, #12]
 8010e92:	330b      	adds	r3, #11
 8010e94:	781a      	ldrb	r2, [r3, #0]
 8010e96:	68fb      	ldr	r3, [r7, #12]
 8010e98:	330b      	adds	r3, #11
 8010e9a:	f042 0220 	orr.w	r2, r2, #32
 8010e9e:	b2d2      	uxtb	r2, r2
 8010ea0:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010ea2:	687b      	ldr	r3, [r7, #4]
 8010ea4:	6818      	ldr	r0, [r3, #0]
 8010ea6:	687b      	ldr	r3, [r7, #4]
 8010ea8:	689b      	ldr	r3, [r3, #8]
 8010eaa:	461a      	mov	r2, r3
 8010eac:	68f9      	ldr	r1, [r7, #12]
 8010eae:	f7fe f9d9 	bl	800f264 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	f103 021c 	add.w	r2, r3, #28
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	68db      	ldr	r3, [r3, #12]
 8010ebc:	4619      	mov	r1, r3
 8010ebe:	4610      	mov	r0, r2
 8010ec0:	f7fd fa5f 	bl	800e382 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010ec4:	68fb      	ldr	r3, [r7, #12]
 8010ec6:	3316      	adds	r3, #22
 8010ec8:	6939      	ldr	r1, [r7, #16]
 8010eca:	4618      	mov	r0, r3
 8010ecc:	f7fd fa59 	bl	800e382 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010ed0:	68fb      	ldr	r3, [r7, #12]
 8010ed2:	3312      	adds	r3, #18
 8010ed4:	2100      	movs	r1, #0
 8010ed6:	4618      	mov	r0, r3
 8010ed8:	f7fd fa39 	bl	800e34e <st_word>
					fs->wflag = 1;
 8010edc:	68bb      	ldr	r3, [r7, #8]
 8010ede:	2201      	movs	r2, #1
 8010ee0:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010ee2:	68bb      	ldr	r3, [r7, #8]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f7fd fcc9 	bl	800e87c <sync_fs>
 8010eea:	4603      	mov	r3, r0
 8010eec:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010eee:	687b      	ldr	r3, [r7, #4]
 8010ef0:	7d1b      	ldrb	r3, [r3, #20]
 8010ef2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010ef6:	b2da      	uxtb	r2, r3
 8010ef8:	687b      	ldr	r3, [r7, #4]
 8010efa:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010efc:	7dfb      	ldrb	r3, [r7, #23]
}
 8010efe:	4618      	mov	r0, r3
 8010f00:	3718      	adds	r7, #24
 8010f02:	46bd      	mov	sp, r7
 8010f04:	bd80      	pop	{r7, pc}

08010f06 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010f06:	b580      	push	{r7, lr}
 8010f08:	b084      	sub	sp, #16
 8010f0a:	af00      	add	r7, sp, #0
 8010f0c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010f0e:	6878      	ldr	r0, [r7, #4]
 8010f10:	f7ff ff7b 	bl	8010e0a <f_sync>
 8010f14:	4603      	mov	r3, r0
 8010f16:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010f18:	7bfb      	ldrb	r3, [r7, #15]
 8010f1a:	2b00      	cmp	r3, #0
 8010f1c:	d118      	bne.n	8010f50 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	f107 0208 	add.w	r2, r7, #8
 8010f24:	4611      	mov	r1, r2
 8010f26:	4618      	mov	r0, r3
 8010f28:	f7ff fbf6 	bl	8010718 <validate>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010f30:	7bfb      	ldrb	r3, [r7, #15]
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d10c      	bne.n	8010f50 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	691b      	ldr	r3, [r3, #16]
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fd fbce 	bl	800e6dc <dec_lock>
 8010f40:	4603      	mov	r3, r0
 8010f42:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010f44:	7bfb      	ldrb	r3, [r7, #15]
 8010f46:	2b00      	cmp	r3, #0
 8010f48:	d102      	bne.n	8010f50 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010f4a:	687b      	ldr	r3, [r7, #4]
 8010f4c:	2200      	movs	r2, #0
 8010f4e:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3710      	adds	r7, #16
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}

08010f5a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010f5a:	b580      	push	{r7, lr}
 8010f5c:	b086      	sub	sp, #24
 8010f5e:	af00      	add	r7, sp, #0
 8010f60:	6078      	str	r0, [r7, #4]
 8010f62:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010f64:	687b      	ldr	r3, [r7, #4]
 8010f66:	2b00      	cmp	r3, #0
 8010f68:	d101      	bne.n	8010f6e <f_opendir+0x14>
 8010f6a:	2309      	movs	r3, #9
 8010f6c:	e064      	b.n	8011038 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010f72:	f107 010c 	add.w	r1, r7, #12
 8010f76:	463b      	mov	r3, r7
 8010f78:	2200      	movs	r2, #0
 8010f7a:	4618      	mov	r0, r3
 8010f7c:	f7ff f97c 	bl	8010278 <find_volume>
 8010f80:	4603      	mov	r3, r0
 8010f82:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010f84:	7dfb      	ldrb	r3, [r7, #23]
 8010f86:	2b00      	cmp	r3, #0
 8010f88:	d14f      	bne.n	801102a <f_opendir+0xd0>
		obj->fs = fs;
 8010f8a:	68fa      	ldr	r2, [r7, #12]
 8010f8c:	693b      	ldr	r3, [r7, #16]
 8010f8e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010f90:	683b      	ldr	r3, [r7, #0]
 8010f92:	4619      	mov	r1, r3
 8010f94:	6878      	ldr	r0, [r7, #4]
 8010f96:	f7ff f865 	bl	8010064 <follow_path>
 8010f9a:	4603      	mov	r3, r0
 8010f9c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010f9e:	7dfb      	ldrb	r3, [r7, #23]
 8010fa0:	2b00      	cmp	r3, #0
 8010fa2:	d13d      	bne.n	8011020 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010fa4:	687b      	ldr	r3, [r7, #4]
 8010fa6:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010faa:	b25b      	sxtb	r3, r3
 8010fac:	2b00      	cmp	r3, #0
 8010fae:	db12      	blt.n	8010fd6 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010fb0:	693b      	ldr	r3, [r7, #16]
 8010fb2:	799b      	ldrb	r3, [r3, #6]
 8010fb4:	f003 0310 	and.w	r3, r3, #16
 8010fb8:	2b00      	cmp	r3, #0
 8010fba:	d00a      	beq.n	8010fd2 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010fbc:	68fa      	ldr	r2, [r7, #12]
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6a1b      	ldr	r3, [r3, #32]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	4610      	mov	r0, r2
 8010fc6:	f7fe f92e 	bl	800f226 <ld_clust>
 8010fca:	4602      	mov	r2, r0
 8010fcc:	693b      	ldr	r3, [r7, #16]
 8010fce:	609a      	str	r2, [r3, #8]
 8010fd0:	e001      	b.n	8010fd6 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010fd2:	2305      	movs	r3, #5
 8010fd4:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010fd6:	7dfb      	ldrb	r3, [r7, #23]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d121      	bne.n	8011020 <f_opendir+0xc6>
				obj->id = fs->id;
 8010fdc:	68fb      	ldr	r3, [r7, #12]
 8010fde:	88da      	ldrh	r2, [r3, #6]
 8010fe0:	693b      	ldr	r3, [r7, #16]
 8010fe2:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010fe4:	2100      	movs	r1, #0
 8010fe6:	6878      	ldr	r0, [r7, #4]
 8010fe8:	f7fd ff96 	bl	800ef18 <dir_sdi>
 8010fec:	4603      	mov	r3, r0
 8010fee:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010ff0:	7dfb      	ldrb	r3, [r7, #23]
 8010ff2:	2b00      	cmp	r3, #0
 8010ff4:	d114      	bne.n	8011020 <f_opendir+0xc6>
					if (obj->sclust) {
 8010ff6:	693b      	ldr	r3, [r7, #16]
 8010ff8:	689b      	ldr	r3, [r3, #8]
 8010ffa:	2b00      	cmp	r3, #0
 8010ffc:	d00d      	beq.n	801101a <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010ffe:	2100      	movs	r1, #0
 8011000:	6878      	ldr	r0, [r7, #4]
 8011002:	f7fd fadd 	bl	800e5c0 <inc_lock>
 8011006:	4602      	mov	r2, r0
 8011008:	693b      	ldr	r3, [r7, #16]
 801100a:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 801100c:	693b      	ldr	r3, [r7, #16]
 801100e:	691b      	ldr	r3, [r3, #16]
 8011010:	2b00      	cmp	r3, #0
 8011012:	d105      	bne.n	8011020 <f_opendir+0xc6>
 8011014:	2312      	movs	r3, #18
 8011016:	75fb      	strb	r3, [r7, #23]
 8011018:	e002      	b.n	8011020 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 801101a:	693b      	ldr	r3, [r7, #16]
 801101c:	2200      	movs	r2, #0
 801101e:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8011020:	7dfb      	ldrb	r3, [r7, #23]
 8011022:	2b04      	cmp	r3, #4
 8011024:	d101      	bne.n	801102a <f_opendir+0xd0>
 8011026:	2305      	movs	r3, #5
 8011028:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 801102a:	7dfb      	ldrb	r3, [r7, #23]
 801102c:	2b00      	cmp	r3, #0
 801102e:	d002      	beq.n	8011036 <f_opendir+0xdc>
 8011030:	693b      	ldr	r3, [r7, #16]
 8011032:	2200      	movs	r2, #0
 8011034:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8011036:	7dfb      	ldrb	r3, [r7, #23]
}
 8011038:	4618      	mov	r0, r3
 801103a:	3718      	adds	r7, #24
 801103c:	46bd      	mov	sp, r7
 801103e:	bd80      	pop	{r7, pc}

08011040 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8011040:	b580      	push	{r7, lr}
 8011042:	b084      	sub	sp, #16
 8011044:	af00      	add	r7, sp, #0
 8011046:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8011048:	687b      	ldr	r3, [r7, #4]
 801104a:	f107 0208 	add.w	r2, r7, #8
 801104e:	4611      	mov	r1, r2
 8011050:	4618      	mov	r0, r3
 8011052:	f7ff fb61 	bl	8010718 <validate>
 8011056:	4603      	mov	r3, r0
 8011058:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 801105a:	7bfb      	ldrb	r3, [r7, #15]
 801105c:	2b00      	cmp	r3, #0
 801105e:	d110      	bne.n	8011082 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8011060:	687b      	ldr	r3, [r7, #4]
 8011062:	691b      	ldr	r3, [r3, #16]
 8011064:	2b00      	cmp	r3, #0
 8011066:	d006      	beq.n	8011076 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8011068:	687b      	ldr	r3, [r7, #4]
 801106a:	691b      	ldr	r3, [r3, #16]
 801106c:	4618      	mov	r0, r3
 801106e:	f7fd fb35 	bl	800e6dc <dec_lock>
 8011072:	4603      	mov	r3, r0
 8011074:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8011076:	7bfb      	ldrb	r3, [r7, #15]
 8011078:	2b00      	cmp	r3, #0
 801107a:	d102      	bne.n	8011082 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 801107c:	687b      	ldr	r3, [r7, #4]
 801107e:	2200      	movs	r2, #0
 8011080:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8011082:	7bfb      	ldrb	r3, [r7, #15]
}
 8011084:	4618      	mov	r0, r3
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}

0801108c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 801108c:	b580      	push	{r7, lr}
 801108e:	b084      	sub	sp, #16
 8011090:	af00      	add	r7, sp, #0
 8011092:	6078      	str	r0, [r7, #4]
 8011094:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8011096:	687b      	ldr	r3, [r7, #4]
 8011098:	f107 0208 	add.w	r2, r7, #8
 801109c:	4611      	mov	r1, r2
 801109e:	4618      	mov	r0, r3
 80110a0:	f7ff fb3a 	bl	8010718 <validate>
 80110a4:	4603      	mov	r3, r0
 80110a6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80110a8:	7bfb      	ldrb	r3, [r7, #15]
 80110aa:	2b00      	cmp	r3, #0
 80110ac:	d126      	bne.n	80110fc <f_readdir+0x70>
		if (!fno) {
 80110ae:	683b      	ldr	r3, [r7, #0]
 80110b0:	2b00      	cmp	r3, #0
 80110b2:	d106      	bne.n	80110c2 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 80110b4:	2100      	movs	r1, #0
 80110b6:	6878      	ldr	r0, [r7, #4]
 80110b8:	f7fd ff2e 	bl	800ef18 <dir_sdi>
 80110bc:	4603      	mov	r3, r0
 80110be:	73fb      	strb	r3, [r7, #15]
 80110c0:	e01c      	b.n	80110fc <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 80110c2:	2100      	movs	r1, #0
 80110c4:	6878      	ldr	r0, [r7, #4]
 80110c6:	f7fe fad7 	bl	800f678 <dir_read>
 80110ca:	4603      	mov	r3, r0
 80110cc:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 80110ce:	7bfb      	ldrb	r3, [r7, #15]
 80110d0:	2b04      	cmp	r3, #4
 80110d2:	d101      	bne.n	80110d8 <f_readdir+0x4c>
 80110d4:	2300      	movs	r3, #0
 80110d6:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 80110d8:	7bfb      	ldrb	r3, [r7, #15]
 80110da:	2b00      	cmp	r3, #0
 80110dc:	d10e      	bne.n	80110fc <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 80110de:	6839      	ldr	r1, [r7, #0]
 80110e0:	6878      	ldr	r0, [r7, #4]
 80110e2:	f7fe fd29 	bl	800fb38 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80110e6:	2100      	movs	r1, #0
 80110e8:	6878      	ldr	r0, [r7, #4]
 80110ea:	f7fd ff90 	bl	800f00e <dir_next>
 80110ee:	4603      	mov	r3, r0
 80110f0:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 80110f2:	7bfb      	ldrb	r3, [r7, #15]
 80110f4:	2b04      	cmp	r3, #4
 80110f6:	d101      	bne.n	80110fc <f_readdir+0x70>
 80110f8:	2300      	movs	r3, #0
 80110fa:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 80110fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80110fe:	4618      	mov	r0, r3
 8011100:	3710      	adds	r7, #16
 8011102:	46bd      	mov	sp, r7
 8011104:	bd80      	pop	{r7, pc}
	...

08011108 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8011108:	b480      	push	{r7}
 801110a:	b087      	sub	sp, #28
 801110c:	af00      	add	r7, sp, #0
 801110e:	60f8      	str	r0, [r7, #12]
 8011110:	60b9      	str	r1, [r7, #8]
 8011112:	4613      	mov	r3, r2
 8011114:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8011116:	2301      	movs	r3, #1
 8011118:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 801111a:	2300      	movs	r3, #0
 801111c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 801111e:	4b1e      	ldr	r3, [pc, #120]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 8011120:	7a5b      	ldrb	r3, [r3, #9]
 8011122:	b2db      	uxtb	r3, r3
 8011124:	2b00      	cmp	r3, #0
 8011126:	d131      	bne.n	801118c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8011128:	4b1b      	ldr	r3, [pc, #108]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 801112a:	7a5b      	ldrb	r3, [r3, #9]
 801112c:	b2db      	uxtb	r3, r3
 801112e:	461a      	mov	r2, r3
 8011130:	4b19      	ldr	r3, [pc, #100]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 8011132:	2100      	movs	r1, #0
 8011134:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8011136:	4b18      	ldr	r3, [pc, #96]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 8011138:	7a5b      	ldrb	r3, [r3, #9]
 801113a:	b2db      	uxtb	r3, r3
 801113c:	4a16      	ldr	r2, [pc, #88]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 801113e:	009b      	lsls	r3, r3, #2
 8011140:	4413      	add	r3, r2
 8011142:	68fa      	ldr	r2, [r7, #12]
 8011144:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8011146:	4b14      	ldr	r3, [pc, #80]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 8011148:	7a5b      	ldrb	r3, [r3, #9]
 801114a:	b2db      	uxtb	r3, r3
 801114c:	461a      	mov	r2, r3
 801114e:	4b12      	ldr	r3, [pc, #72]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 8011150:	4413      	add	r3, r2
 8011152:	79fa      	ldrb	r2, [r7, #7]
 8011154:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8011156:	4b10      	ldr	r3, [pc, #64]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 8011158:	7a5b      	ldrb	r3, [r3, #9]
 801115a:	b2db      	uxtb	r3, r3
 801115c:	1c5a      	adds	r2, r3, #1
 801115e:	b2d1      	uxtb	r1, r2
 8011160:	4a0d      	ldr	r2, [pc, #52]	; (8011198 <FATFS_LinkDriverEx+0x90>)
 8011162:	7251      	strb	r1, [r2, #9]
 8011164:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8011166:	7dbb      	ldrb	r3, [r7, #22]
 8011168:	3330      	adds	r3, #48	; 0x30
 801116a:	b2da      	uxtb	r2, r3
 801116c:	68bb      	ldr	r3, [r7, #8]
 801116e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8011170:	68bb      	ldr	r3, [r7, #8]
 8011172:	3301      	adds	r3, #1
 8011174:	223a      	movs	r2, #58	; 0x3a
 8011176:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8011178:	68bb      	ldr	r3, [r7, #8]
 801117a:	3302      	adds	r3, #2
 801117c:	222f      	movs	r2, #47	; 0x2f
 801117e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8011180:	68bb      	ldr	r3, [r7, #8]
 8011182:	3303      	adds	r3, #3
 8011184:	2200      	movs	r2, #0
 8011186:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8011188:	2300      	movs	r3, #0
 801118a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 801118c:	7dfb      	ldrb	r3, [r7, #23]
}
 801118e:	4618      	mov	r0, r3
 8011190:	371c      	adds	r7, #28
 8011192:	46bd      	mov	sp, r7
 8011194:	bc80      	pop	{r7}
 8011196:	4770      	bx	lr
 8011198:	20001144 	.word	0x20001144

0801119c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 801119c:	b580      	push	{r7, lr}
 801119e:	b082      	sub	sp, #8
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 80111a6:	2200      	movs	r2, #0
 80111a8:	6839      	ldr	r1, [r7, #0]
 80111aa:	6878      	ldr	r0, [r7, #4]
 80111ac:	f7ff ffac 	bl	8011108 <FATFS_LinkDriverEx>
 80111b0:	4603      	mov	r3, r0
}
 80111b2:	4618      	mov	r0, r3
 80111b4:	3708      	adds	r7, #8
 80111b6:	46bd      	mov	sp, r7
 80111b8:	bd80      	pop	{r7, pc}
	...

080111bc <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 80111bc:	b480      	push	{r7}
 80111be:	b085      	sub	sp, #20
 80111c0:	af00      	add	r7, sp, #0
 80111c2:	4603      	mov	r3, r0
 80111c4:	6039      	str	r1, [r7, #0]
 80111c6:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 80111c8:	88fb      	ldrh	r3, [r7, #6]
 80111ca:	2b7f      	cmp	r3, #127	; 0x7f
 80111cc:	d802      	bhi.n	80111d4 <ff_convert+0x18>
		c = chr;
 80111ce:	88fb      	ldrh	r3, [r7, #6]
 80111d0:	81fb      	strh	r3, [r7, #14]
 80111d2:	e025      	b.n	8011220 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 80111d4:	683b      	ldr	r3, [r7, #0]
 80111d6:	2b00      	cmp	r3, #0
 80111d8:	d00b      	beq.n	80111f2 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 80111da:	88fb      	ldrh	r3, [r7, #6]
 80111dc:	2bff      	cmp	r3, #255	; 0xff
 80111de:	d805      	bhi.n	80111ec <ff_convert+0x30>
 80111e0:	88fb      	ldrh	r3, [r7, #6]
 80111e2:	3b80      	subs	r3, #128	; 0x80
 80111e4:	4a11      	ldr	r2, [pc, #68]	; (801122c <ff_convert+0x70>)
 80111e6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80111ea:	e000      	b.n	80111ee <ff_convert+0x32>
 80111ec:	2300      	movs	r3, #0
 80111ee:	81fb      	strh	r3, [r7, #14]
 80111f0:	e016      	b.n	8011220 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 80111f2:	2300      	movs	r3, #0
 80111f4:	81fb      	strh	r3, [r7, #14]
 80111f6:	e009      	b.n	801120c <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 80111f8:	89fb      	ldrh	r3, [r7, #14]
 80111fa:	4a0c      	ldr	r2, [pc, #48]	; (801122c <ff_convert+0x70>)
 80111fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8011200:	88fa      	ldrh	r2, [r7, #6]
 8011202:	429a      	cmp	r2, r3
 8011204:	d006      	beq.n	8011214 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8011206:	89fb      	ldrh	r3, [r7, #14]
 8011208:	3301      	adds	r3, #1
 801120a:	81fb      	strh	r3, [r7, #14]
 801120c:	89fb      	ldrh	r3, [r7, #14]
 801120e:	2b7f      	cmp	r3, #127	; 0x7f
 8011210:	d9f2      	bls.n	80111f8 <ff_convert+0x3c>
 8011212:	e000      	b.n	8011216 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8011214:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8011216:	89fb      	ldrh	r3, [r7, #14]
 8011218:	3380      	adds	r3, #128	; 0x80
 801121a:	b29b      	uxth	r3, r3
 801121c:	b2db      	uxtb	r3, r3
 801121e:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8011220:	89fb      	ldrh	r3, [r7, #14]
}
 8011222:	4618      	mov	r0, r3
 8011224:	3714      	adds	r7, #20
 8011226:	46bd      	mov	sp, r7
 8011228:	bc80      	pop	{r7}
 801122a:	4770      	bx	lr
 801122c:	08012868 	.word	0x08012868

08011230 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8011230:	b480      	push	{r7}
 8011232:	b087      	sub	sp, #28
 8011234:	af00      	add	r7, sp, #0
 8011236:	4603      	mov	r3, r0
 8011238:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 801123a:	88fb      	ldrh	r3, [r7, #6]
 801123c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011240:	d201      	bcs.n	8011246 <ff_wtoupper+0x16>
 8011242:	4b3d      	ldr	r3, [pc, #244]	; (8011338 <ff_wtoupper+0x108>)
 8011244:	e000      	b.n	8011248 <ff_wtoupper+0x18>
 8011246:	4b3d      	ldr	r3, [pc, #244]	; (801133c <ff_wtoupper+0x10c>)
 8011248:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 801124a:	697b      	ldr	r3, [r7, #20]
 801124c:	1c9a      	adds	r2, r3, #2
 801124e:	617a      	str	r2, [r7, #20]
 8011250:	881b      	ldrh	r3, [r3, #0]
 8011252:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8011254:	8a7b      	ldrh	r3, [r7, #18]
 8011256:	2b00      	cmp	r3, #0
 8011258:	d068      	beq.n	801132c <ff_wtoupper+0xfc>
 801125a:	88fa      	ldrh	r2, [r7, #6]
 801125c:	8a7b      	ldrh	r3, [r7, #18]
 801125e:	429a      	cmp	r2, r3
 8011260:	d364      	bcc.n	801132c <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011262:	697b      	ldr	r3, [r7, #20]
 8011264:	1c9a      	adds	r2, r3, #2
 8011266:	617a      	str	r2, [r7, #20]
 8011268:	881b      	ldrh	r3, [r3, #0]
 801126a:	823b      	strh	r3, [r7, #16]
 801126c:	8a3b      	ldrh	r3, [r7, #16]
 801126e:	0a1b      	lsrs	r3, r3, #8
 8011270:	81fb      	strh	r3, [r7, #14]
 8011272:	8a3b      	ldrh	r3, [r7, #16]
 8011274:	b2db      	uxtb	r3, r3
 8011276:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011278:	88fa      	ldrh	r2, [r7, #6]
 801127a:	8a79      	ldrh	r1, [r7, #18]
 801127c:	8a3b      	ldrh	r3, [r7, #16]
 801127e:	440b      	add	r3, r1
 8011280:	429a      	cmp	r2, r3
 8011282:	da49      	bge.n	8011318 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011284:	89fb      	ldrh	r3, [r7, #14]
 8011286:	2b08      	cmp	r3, #8
 8011288:	d84f      	bhi.n	801132a <ff_wtoupper+0xfa>
 801128a:	a201      	add	r2, pc, #4	; (adr r2, 8011290 <ff_wtoupper+0x60>)
 801128c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011290:	080112b5 	.word	0x080112b5
 8011294:	080112c7 	.word	0x080112c7
 8011298:	080112dd 	.word	0x080112dd
 801129c:	080112e5 	.word	0x080112e5
 80112a0:	080112ed 	.word	0x080112ed
 80112a4:	080112f5 	.word	0x080112f5
 80112a8:	080112fd 	.word	0x080112fd
 80112ac:	08011305 	.word	0x08011305
 80112b0:	0801130d 	.word	0x0801130d
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 80112b4:	88fa      	ldrh	r2, [r7, #6]
 80112b6:	8a7b      	ldrh	r3, [r7, #18]
 80112b8:	1ad3      	subs	r3, r2, r3
 80112ba:	005b      	lsls	r3, r3, #1
 80112bc:	697a      	ldr	r2, [r7, #20]
 80112be:	4413      	add	r3, r2
 80112c0:	881b      	ldrh	r3, [r3, #0]
 80112c2:	80fb      	strh	r3, [r7, #6]
 80112c4:	e027      	b.n	8011316 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 80112c6:	88fa      	ldrh	r2, [r7, #6]
 80112c8:	8a7b      	ldrh	r3, [r7, #18]
 80112ca:	1ad3      	subs	r3, r2, r3
 80112cc:	b29b      	uxth	r3, r3
 80112ce:	f003 0301 	and.w	r3, r3, #1
 80112d2:	b29b      	uxth	r3, r3
 80112d4:	88fa      	ldrh	r2, [r7, #6]
 80112d6:	1ad3      	subs	r3, r2, r3
 80112d8:	80fb      	strh	r3, [r7, #6]
 80112da:	e01c      	b.n	8011316 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80112dc:	88fb      	ldrh	r3, [r7, #6]
 80112de:	3b10      	subs	r3, #16
 80112e0:	80fb      	strh	r3, [r7, #6]
 80112e2:	e018      	b.n	8011316 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80112e4:	88fb      	ldrh	r3, [r7, #6]
 80112e6:	3b20      	subs	r3, #32
 80112e8:	80fb      	strh	r3, [r7, #6]
 80112ea:	e014      	b.n	8011316 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80112ec:	88fb      	ldrh	r3, [r7, #6]
 80112ee:	3b30      	subs	r3, #48	; 0x30
 80112f0:	80fb      	strh	r3, [r7, #6]
 80112f2:	e010      	b.n	8011316 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80112f4:	88fb      	ldrh	r3, [r7, #6]
 80112f6:	3b1a      	subs	r3, #26
 80112f8:	80fb      	strh	r3, [r7, #6]
 80112fa:	e00c      	b.n	8011316 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80112fc:	88fb      	ldrh	r3, [r7, #6]
 80112fe:	3308      	adds	r3, #8
 8011300:	80fb      	strh	r3, [r7, #6]
 8011302:	e008      	b.n	8011316 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 8011304:	88fb      	ldrh	r3, [r7, #6]
 8011306:	3b50      	subs	r3, #80	; 0x50
 8011308:	80fb      	strh	r3, [r7, #6]
 801130a:	e004      	b.n	8011316 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 801130c:	88fb      	ldrh	r3, [r7, #6]
 801130e:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 8011312:	80fb      	strh	r3, [r7, #6]
 8011314:	bf00      	nop
			}
			break;
 8011316:	e008      	b.n	801132a <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 8011318:	89fb      	ldrh	r3, [r7, #14]
 801131a:	2b00      	cmp	r3, #0
 801131c:	d195      	bne.n	801124a <ff_wtoupper+0x1a>
 801131e:	8a3b      	ldrh	r3, [r7, #16]
 8011320:	005b      	lsls	r3, r3, #1
 8011322:	697a      	ldr	r2, [r7, #20]
 8011324:	4413      	add	r3, r2
 8011326:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 8011328:	e78f      	b.n	801124a <ff_wtoupper+0x1a>
			break;
 801132a:	bf00      	nop
	}

	return chr;
 801132c:	88fb      	ldrh	r3, [r7, #6]
}
 801132e:	4618      	mov	r0, r3
 8011330:	371c      	adds	r7, #28
 8011332:	46bd      	mov	sp, r7
 8011334:	bc80      	pop	{r7}
 8011336:	4770      	bx	lr
 8011338:	08012968 	.word	0x08012968
 801133c:	08012b5c 	.word	0x08012b5c

08011340 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8011340:	b580      	push	{r7, lr}
 8011342:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8011344:	2200      	movs	r2, #0
 8011346:	4912      	ldr	r1, [pc, #72]	; (8011390 <MX_USB_DEVICE_Init+0x50>)
 8011348:	4812      	ldr	r0, [pc, #72]	; (8011394 <MX_USB_DEVICE_Init+0x54>)
 801134a:	f7fb ff04 	bl	800d156 <USBD_Init>
 801134e:	4603      	mov	r3, r0
 8011350:	2b00      	cmp	r3, #0
 8011352:	d001      	beq.n	8011358 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8011354:	f7f2 fe70 	bl	8004038 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8011358:	490f      	ldr	r1, [pc, #60]	; (8011398 <MX_USB_DEVICE_Init+0x58>)
 801135a:	480e      	ldr	r0, [pc, #56]	; (8011394 <MX_USB_DEVICE_Init+0x54>)
 801135c:	f7fb ff26 	bl	800d1ac <USBD_RegisterClass>
 8011360:	4603      	mov	r3, r0
 8011362:	2b00      	cmp	r3, #0
 8011364:	d001      	beq.n	801136a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011366:	f7f2 fe67 	bl	8004038 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801136a:	490c      	ldr	r1, [pc, #48]	; (801139c <MX_USB_DEVICE_Init+0x5c>)
 801136c:	4809      	ldr	r0, [pc, #36]	; (8011394 <MX_USB_DEVICE_Init+0x54>)
 801136e:	f7fb fe57 	bl	800d020 <USBD_CDC_RegisterInterface>
 8011372:	4603      	mov	r3, r0
 8011374:	2b00      	cmp	r3, #0
 8011376:	d001      	beq.n	801137c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011378:	f7f2 fe5e 	bl	8004038 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801137c:	4805      	ldr	r0, [pc, #20]	; (8011394 <MX_USB_DEVICE_Init+0x54>)
 801137e:	f7fb ff2e 	bl	800d1de <USBD_Start>
 8011382:	4603      	mov	r3, r0
 8011384:	2b00      	cmp	r3, #0
 8011386:	d001      	beq.n	801138c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011388:	f7f2 fe56 	bl	8004038 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801138c:	bf00      	nop
 801138e:	bd80      	pop	{r7, pc}
 8011390:	200001cc 	.word	0x200001cc
 8011394:	20001150 	.word	0x20001150
 8011398:	200000b8 	.word	0x200000b8
 801139c:	200001bc 	.word	0x200001bc

080113a0 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 80113a0:	b580      	push	{r7, lr}
 80113a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 80113a4:	2200      	movs	r2, #0
 80113a6:	4905      	ldr	r1, [pc, #20]	; (80113bc <CDC_Init_FS+0x1c>)
 80113a8:	4805      	ldr	r0, [pc, #20]	; (80113c0 <CDC_Init_FS+0x20>)
 80113aa:	f7fb fe4f 	bl	800d04c <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80113ae:	4905      	ldr	r1, [pc, #20]	; (80113c4 <CDC_Init_FS+0x24>)
 80113b0:	4803      	ldr	r0, [pc, #12]	; (80113c0 <CDC_Init_FS+0x20>)
 80113b2:	f7fb fe64 	bl	800d07e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 80113b6:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 80113b8:	4618      	mov	r0, r3
 80113ba:	bd80      	pop	{r7, pc}
 80113bc:	200017d4 	.word	0x200017d4
 80113c0:	20001150 	.word	0x20001150
 80113c4:	200013ec 	.word	0x200013ec

080113c8 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 80113c8:	b480      	push	{r7}
 80113ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 80113cc:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 80113ce:	4618      	mov	r0, r3
 80113d0:	46bd      	mov	sp, r7
 80113d2:	bc80      	pop	{r7}
 80113d4:	4770      	bx	lr
	...

080113d8 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 80113d8:	b480      	push	{r7}
 80113da:	b083      	sub	sp, #12
 80113dc:	af00      	add	r7, sp, #0
 80113de:	4603      	mov	r3, r0
 80113e0:	6039      	str	r1, [r7, #0]
 80113e2:	71fb      	strb	r3, [r7, #7]
 80113e4:	4613      	mov	r3, r2
 80113e6:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 80113e8:	79fb      	ldrb	r3, [r7, #7]
 80113ea:	2b23      	cmp	r3, #35	; 0x23
 80113ec:	d84a      	bhi.n	8011484 <CDC_Control_FS+0xac>
 80113ee:	a201      	add	r2, pc, #4	; (adr r2, 80113f4 <CDC_Control_FS+0x1c>)
 80113f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113f4:	08011485 	.word	0x08011485
 80113f8:	08011485 	.word	0x08011485
 80113fc:	08011485 	.word	0x08011485
 8011400:	08011485 	.word	0x08011485
 8011404:	08011485 	.word	0x08011485
 8011408:	08011485 	.word	0x08011485
 801140c:	08011485 	.word	0x08011485
 8011410:	08011485 	.word	0x08011485
 8011414:	08011485 	.word	0x08011485
 8011418:	08011485 	.word	0x08011485
 801141c:	08011485 	.word	0x08011485
 8011420:	08011485 	.word	0x08011485
 8011424:	08011485 	.word	0x08011485
 8011428:	08011485 	.word	0x08011485
 801142c:	08011485 	.word	0x08011485
 8011430:	08011485 	.word	0x08011485
 8011434:	08011485 	.word	0x08011485
 8011438:	08011485 	.word	0x08011485
 801143c:	08011485 	.word	0x08011485
 8011440:	08011485 	.word	0x08011485
 8011444:	08011485 	.word	0x08011485
 8011448:	08011485 	.word	0x08011485
 801144c:	08011485 	.word	0x08011485
 8011450:	08011485 	.word	0x08011485
 8011454:	08011485 	.word	0x08011485
 8011458:	08011485 	.word	0x08011485
 801145c:	08011485 	.word	0x08011485
 8011460:	08011485 	.word	0x08011485
 8011464:	08011485 	.word	0x08011485
 8011468:	08011485 	.word	0x08011485
 801146c:	08011485 	.word	0x08011485
 8011470:	08011485 	.word	0x08011485
 8011474:	08011485 	.word	0x08011485
 8011478:	08011485 	.word	0x08011485
 801147c:	08011485 	.word	0x08011485
 8011480:	08011485 	.word	0x08011485
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011484:	bf00      	nop
  }

  return (USBD_OK);
 8011486:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011488:	4618      	mov	r0, r3
 801148a:	370c      	adds	r7, #12
 801148c:	46bd      	mov	sp, r7
 801148e:	bc80      	pop	{r7}
 8011490:	4770      	bx	lr
 8011492:	bf00      	nop

08011494 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011494:	b580      	push	{r7, lr}
 8011496:	b082      	sub	sp, #8
 8011498:	af00      	add	r7, sp, #0
 801149a:	6078      	str	r0, [r7, #4]
 801149c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801149e:	6879      	ldr	r1, [r7, #4]
 80114a0:	4807      	ldr	r0, [pc, #28]	; (80114c0 <CDC_Receive_FS+0x2c>)
 80114a2:	f7fb fdec 	bl	800d07e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80114a6:	4806      	ldr	r0, [pc, #24]	; (80114c0 <CDC_Receive_FS+0x2c>)
 80114a8:	f7fb fe2b 	bl	800d102 <USBD_CDC_ReceivePacket>

  //then copy contents
//  memcpy(USB_Rx_Buf, Buf, (uint8_t)*Len);

  //handle the parsing of the buffer in the main function
  USBDataReceived_IT(Buf, Len);
 80114ac:	6839      	ldr	r1, [r7, #0]
 80114ae:	6878      	ldr	r0, [r7, #4]
 80114b0:	f7f2 f8ca 	bl	8003648 <USBDataReceived_IT>

  return (USBD_OK);
 80114b4:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80114b6:	4618      	mov	r0, r3
 80114b8:	3708      	adds	r7, #8
 80114ba:	46bd      	mov	sp, r7
 80114bc:	bd80      	pop	{r7, pc}
 80114be:	bf00      	nop
 80114c0:	20001150 	.word	0x20001150

080114c4 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80114c4:	b580      	push	{r7, lr}
 80114c6:	b084      	sub	sp, #16
 80114c8:	af00      	add	r7, sp, #0
 80114ca:	6078      	str	r0, [r7, #4]
 80114cc:	460b      	mov	r3, r1
 80114ce:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 80114d0:	2300      	movs	r3, #0
 80114d2:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80114d4:	4b0d      	ldr	r3, [pc, #52]	; (801150c <CDC_Transmit_FS+0x48>)
 80114d6:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 80114da:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 80114dc:	68bb      	ldr	r3, [r7, #8]
 80114de:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d001      	beq.n	80114ea <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 80114e6:	2301      	movs	r3, #1
 80114e8:	e00b      	b.n	8011502 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80114ea:	887b      	ldrh	r3, [r7, #2]
 80114ec:	461a      	mov	r2, r3
 80114ee:	6879      	ldr	r1, [r7, #4]
 80114f0:	4806      	ldr	r0, [pc, #24]	; (801150c <CDC_Transmit_FS+0x48>)
 80114f2:	f7fb fdab 	bl	800d04c <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80114f6:	4805      	ldr	r0, [pc, #20]	; (801150c <CDC_Transmit_FS+0x48>)
 80114f8:	f7fb fdd4 	bl	800d0a4 <USBD_CDC_TransmitPacket>
 80114fc:	4603      	mov	r3, r0
 80114fe:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 8011500:	7bfb      	ldrb	r3, [r7, #15]
}
 8011502:	4618      	mov	r0, r3
 8011504:	3710      	adds	r7, #16
 8011506:	46bd      	mov	sp, r7
 8011508:	bd80      	pop	{r7, pc}
 801150a:	bf00      	nop
 801150c:	20001150 	.word	0x20001150

08011510 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011510:	b480      	push	{r7}
 8011512:	b083      	sub	sp, #12
 8011514:	af00      	add	r7, sp, #0
 8011516:	4603      	mov	r3, r0
 8011518:	6039      	str	r1, [r7, #0]
 801151a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801151c:	683b      	ldr	r3, [r7, #0]
 801151e:	2212      	movs	r2, #18
 8011520:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8011522:	4b03      	ldr	r3, [pc, #12]	; (8011530 <USBD_FS_DeviceDescriptor+0x20>)
}
 8011524:	4618      	mov	r0, r3
 8011526:	370c      	adds	r7, #12
 8011528:	46bd      	mov	sp, r7
 801152a:	bc80      	pop	{r7}
 801152c:	4770      	bx	lr
 801152e:	bf00      	nop
 8011530:	200001e8 	.word	0x200001e8

08011534 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011534:	b480      	push	{r7}
 8011536:	b083      	sub	sp, #12
 8011538:	af00      	add	r7, sp, #0
 801153a:	4603      	mov	r3, r0
 801153c:	6039      	str	r1, [r7, #0]
 801153e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8011540:	683b      	ldr	r3, [r7, #0]
 8011542:	2204      	movs	r2, #4
 8011544:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8011546:	4b03      	ldr	r3, [pc, #12]	; (8011554 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8011548:	4618      	mov	r0, r3
 801154a:	370c      	adds	r7, #12
 801154c:	46bd      	mov	sp, r7
 801154e:	bc80      	pop	{r7}
 8011550:	4770      	bx	lr
 8011552:	bf00      	nop
 8011554:	200001fc 	.word	0x200001fc

08011558 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	4603      	mov	r3, r0
 8011560:	6039      	str	r1, [r7, #0]
 8011562:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011564:	79fb      	ldrb	r3, [r7, #7]
 8011566:	2b00      	cmp	r3, #0
 8011568:	d105      	bne.n	8011576 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801156a:	683a      	ldr	r2, [r7, #0]
 801156c:	4907      	ldr	r1, [pc, #28]	; (801158c <USBD_FS_ProductStrDescriptor+0x34>)
 801156e:	4808      	ldr	r0, [pc, #32]	; (8011590 <USBD_FS_ProductStrDescriptor+0x38>)
 8011570:	f7fc fd38 	bl	800dfe4 <USBD_GetString>
 8011574:	e004      	b.n	8011580 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011576:	683a      	ldr	r2, [r7, #0]
 8011578:	4904      	ldr	r1, [pc, #16]	; (801158c <USBD_FS_ProductStrDescriptor+0x34>)
 801157a:	4805      	ldr	r0, [pc, #20]	; (8011590 <USBD_FS_ProductStrDescriptor+0x38>)
 801157c:	f7fc fd32 	bl	800dfe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011580:	4b02      	ldr	r3, [pc, #8]	; (801158c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011582:	4618      	mov	r0, r3
 8011584:	3708      	adds	r7, #8
 8011586:	46bd      	mov	sp, r7
 8011588:	bd80      	pop	{r7, pc}
 801158a:	bf00      	nop
 801158c:	20001bbc 	.word	0x20001bbc
 8011590:	08012760 	.word	0x08012760

08011594 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011594:	b580      	push	{r7, lr}
 8011596:	b082      	sub	sp, #8
 8011598:	af00      	add	r7, sp, #0
 801159a:	4603      	mov	r3, r0
 801159c:	6039      	str	r1, [r7, #0]
 801159e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80115a0:	683a      	ldr	r2, [r7, #0]
 80115a2:	4904      	ldr	r1, [pc, #16]	; (80115b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80115a4:	4804      	ldr	r0, [pc, #16]	; (80115b8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80115a6:	f7fc fd1d 	bl	800dfe4 <USBD_GetString>
  return USBD_StrDesc;
 80115aa:	4b02      	ldr	r3, [pc, #8]	; (80115b4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80115ac:	4618      	mov	r0, r3
 80115ae:	3708      	adds	r7, #8
 80115b0:	46bd      	mov	sp, r7
 80115b2:	bd80      	pop	{r7, pc}
 80115b4:	20001bbc 	.word	0x20001bbc
 80115b8:	08012784 	.word	0x08012784

080115bc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115bc:	b580      	push	{r7, lr}
 80115be:	b082      	sub	sp, #8
 80115c0:	af00      	add	r7, sp, #0
 80115c2:	4603      	mov	r3, r0
 80115c4:	6039      	str	r1, [r7, #0]
 80115c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80115c8:	683b      	ldr	r3, [r7, #0]
 80115ca:	221a      	movs	r2, #26
 80115cc:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80115ce:	f000 f843 	bl	8011658 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80115d2:	4b02      	ldr	r3, [pc, #8]	; (80115dc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80115d4:	4618      	mov	r0, r3
 80115d6:	3708      	adds	r7, #8
 80115d8:	46bd      	mov	sp, r7
 80115da:	bd80      	pop	{r7, pc}
 80115dc:	20000200 	.word	0x20000200

080115e0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80115e0:	b580      	push	{r7, lr}
 80115e2:	b082      	sub	sp, #8
 80115e4:	af00      	add	r7, sp, #0
 80115e6:	4603      	mov	r3, r0
 80115e8:	6039      	str	r1, [r7, #0]
 80115ea:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80115ec:	79fb      	ldrb	r3, [r7, #7]
 80115ee:	2b00      	cmp	r3, #0
 80115f0:	d105      	bne.n	80115fe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115f2:	683a      	ldr	r2, [r7, #0]
 80115f4:	4907      	ldr	r1, [pc, #28]	; (8011614 <USBD_FS_ConfigStrDescriptor+0x34>)
 80115f6:	4808      	ldr	r0, [pc, #32]	; (8011618 <USBD_FS_ConfigStrDescriptor+0x38>)
 80115f8:	f7fc fcf4 	bl	800dfe4 <USBD_GetString>
 80115fc:	e004      	b.n	8011608 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80115fe:	683a      	ldr	r2, [r7, #0]
 8011600:	4904      	ldr	r1, [pc, #16]	; (8011614 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011602:	4805      	ldr	r0, [pc, #20]	; (8011618 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011604:	f7fc fcee 	bl	800dfe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011608:	4b02      	ldr	r3, [pc, #8]	; (8011614 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 801160a:	4618      	mov	r0, r3
 801160c:	3708      	adds	r7, #8
 801160e:	46bd      	mov	sp, r7
 8011610:	bd80      	pop	{r7, pc}
 8011612:	bf00      	nop
 8011614:	20001bbc 	.word	0x20001bbc
 8011618:	08012798 	.word	0x08012798

0801161c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	4603      	mov	r3, r0
 8011624:	6039      	str	r1, [r7, #0]
 8011626:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011628:	79fb      	ldrb	r3, [r7, #7]
 801162a:	2b00      	cmp	r3, #0
 801162c:	d105      	bne.n	801163a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801162e:	683a      	ldr	r2, [r7, #0]
 8011630:	4907      	ldr	r1, [pc, #28]	; (8011650 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8011632:	4808      	ldr	r0, [pc, #32]	; (8011654 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011634:	f7fc fcd6 	bl	800dfe4 <USBD_GetString>
 8011638:	e004      	b.n	8011644 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 801163a:	683a      	ldr	r2, [r7, #0]
 801163c:	4904      	ldr	r1, [pc, #16]	; (8011650 <USBD_FS_InterfaceStrDescriptor+0x34>)
 801163e:	4805      	ldr	r0, [pc, #20]	; (8011654 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8011640:	f7fc fcd0 	bl	800dfe4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011644:	4b02      	ldr	r3, [pc, #8]	; (8011650 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8011646:	4618      	mov	r0, r3
 8011648:	3708      	adds	r7, #8
 801164a:	46bd      	mov	sp, r7
 801164c:	bd80      	pop	{r7, pc}
 801164e:	bf00      	nop
 8011650:	20001bbc 	.word	0x20001bbc
 8011654:	080127a4 	.word	0x080127a4

08011658 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8011658:	b580      	push	{r7, lr}
 801165a:	b084      	sub	sp, #16
 801165c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801165e:	4b0f      	ldr	r3, [pc, #60]	; (801169c <Get_SerialNum+0x44>)
 8011660:	681b      	ldr	r3, [r3, #0]
 8011662:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011664:	4b0e      	ldr	r3, [pc, #56]	; (80116a0 <Get_SerialNum+0x48>)
 8011666:	681b      	ldr	r3, [r3, #0]
 8011668:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801166a:	4b0e      	ldr	r3, [pc, #56]	; (80116a4 <Get_SerialNum+0x4c>)
 801166c:	681b      	ldr	r3, [r3, #0]
 801166e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011670:	68fa      	ldr	r2, [r7, #12]
 8011672:	687b      	ldr	r3, [r7, #4]
 8011674:	4413      	add	r3, r2
 8011676:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011678:	68fb      	ldr	r3, [r7, #12]
 801167a:	2b00      	cmp	r3, #0
 801167c:	d009      	beq.n	8011692 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801167e:	2208      	movs	r2, #8
 8011680:	4909      	ldr	r1, [pc, #36]	; (80116a8 <Get_SerialNum+0x50>)
 8011682:	68f8      	ldr	r0, [r7, #12]
 8011684:	f000 f814 	bl	80116b0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011688:	2204      	movs	r2, #4
 801168a:	4908      	ldr	r1, [pc, #32]	; (80116ac <Get_SerialNum+0x54>)
 801168c:	68b8      	ldr	r0, [r7, #8]
 801168e:	f000 f80f 	bl	80116b0 <IntToUnicode>
  }
}
 8011692:	bf00      	nop
 8011694:	3710      	adds	r7, #16
 8011696:	46bd      	mov	sp, r7
 8011698:	bd80      	pop	{r7, pc}
 801169a:	bf00      	nop
 801169c:	1ff80050 	.word	0x1ff80050
 80116a0:	1ff80054 	.word	0x1ff80054
 80116a4:	1ff80058 	.word	0x1ff80058
 80116a8:	20000202 	.word	0x20000202
 80116ac:	20000212 	.word	0x20000212

080116b0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80116b0:	b480      	push	{r7}
 80116b2:	b087      	sub	sp, #28
 80116b4:	af00      	add	r7, sp, #0
 80116b6:	60f8      	str	r0, [r7, #12]
 80116b8:	60b9      	str	r1, [r7, #8]
 80116ba:	4613      	mov	r3, r2
 80116bc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80116be:	2300      	movs	r3, #0
 80116c0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80116c2:	2300      	movs	r3, #0
 80116c4:	75fb      	strb	r3, [r7, #23]
 80116c6:	e027      	b.n	8011718 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80116c8:	68fb      	ldr	r3, [r7, #12]
 80116ca:	0f1b      	lsrs	r3, r3, #28
 80116cc:	2b09      	cmp	r3, #9
 80116ce:	d80b      	bhi.n	80116e8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80116d0:	68fb      	ldr	r3, [r7, #12]
 80116d2:	0f1b      	lsrs	r3, r3, #28
 80116d4:	b2da      	uxtb	r2, r3
 80116d6:	7dfb      	ldrb	r3, [r7, #23]
 80116d8:	005b      	lsls	r3, r3, #1
 80116da:	4619      	mov	r1, r3
 80116dc:	68bb      	ldr	r3, [r7, #8]
 80116de:	440b      	add	r3, r1
 80116e0:	3230      	adds	r2, #48	; 0x30
 80116e2:	b2d2      	uxtb	r2, r2
 80116e4:	701a      	strb	r2, [r3, #0]
 80116e6:	e00a      	b.n	80116fe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	0f1b      	lsrs	r3, r3, #28
 80116ec:	b2da      	uxtb	r2, r3
 80116ee:	7dfb      	ldrb	r3, [r7, #23]
 80116f0:	005b      	lsls	r3, r3, #1
 80116f2:	4619      	mov	r1, r3
 80116f4:	68bb      	ldr	r3, [r7, #8]
 80116f6:	440b      	add	r3, r1
 80116f8:	3237      	adds	r2, #55	; 0x37
 80116fa:	b2d2      	uxtb	r2, r2
 80116fc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	011b      	lsls	r3, r3, #4
 8011702:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8011704:	7dfb      	ldrb	r3, [r7, #23]
 8011706:	005b      	lsls	r3, r3, #1
 8011708:	3301      	adds	r3, #1
 801170a:	68ba      	ldr	r2, [r7, #8]
 801170c:	4413      	add	r3, r2
 801170e:	2200      	movs	r2, #0
 8011710:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8011712:	7dfb      	ldrb	r3, [r7, #23]
 8011714:	3301      	adds	r3, #1
 8011716:	75fb      	strb	r3, [r7, #23]
 8011718:	7dfa      	ldrb	r2, [r7, #23]
 801171a:	79fb      	ldrb	r3, [r7, #7]
 801171c:	429a      	cmp	r2, r3
 801171e:	d3d3      	bcc.n	80116c8 <IntToUnicode+0x18>
  }
}
 8011720:	bf00      	nop
 8011722:	bf00      	nop
 8011724:	371c      	adds	r7, #28
 8011726:	46bd      	mov	sp, r7
 8011728:	bc80      	pop	{r7}
 801172a:	4770      	bx	lr

0801172c <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801172c:	b480      	push	{r7}
 801172e:	b083      	sub	sp, #12
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
 8011734:	460b      	mov	r3, r1
 8011736:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 8011738:	78fb      	ldrb	r3, [r7, #3]
 801173a:	2b01      	cmp	r3, #1
 801173c:	d106      	bne.n	801174c <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 801173e:	4b09      	ldr	r3, [pc, #36]	; (8011764 <HAL_PCDEx_SetConnectionState+0x38>)
 8011740:	685b      	ldr	r3, [r3, #4]
 8011742:	4a08      	ldr	r2, [pc, #32]	; (8011764 <HAL_PCDEx_SetConnectionState+0x38>)
 8011744:	f043 0301 	orr.w	r3, r3, #1
 8011748:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 801174a:	e005      	b.n	8011758 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 801174c:	4b05      	ldr	r3, [pc, #20]	; (8011764 <HAL_PCDEx_SetConnectionState+0x38>)
 801174e:	685b      	ldr	r3, [r3, #4]
 8011750:	4a04      	ldr	r2, [pc, #16]	; (8011764 <HAL_PCDEx_SetConnectionState+0x38>)
 8011752:	f023 0301 	bic.w	r3, r3, #1
 8011756:	6053      	str	r3, [r2, #4]
}
 8011758:	bf00      	nop
 801175a:	370c      	adds	r7, #12
 801175c:	46bd      	mov	sp, r7
 801175e:	bc80      	pop	{r7}
 8011760:	4770      	bx	lr
 8011762:	bf00      	nop
 8011764:	40010000 	.word	0x40010000

08011768 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011768:	b580      	push	{r7, lr}
 801176a:	b084      	sub	sp, #16
 801176c:	af00      	add	r7, sp, #0
 801176e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8011770:	687b      	ldr	r3, [r7, #4]
 8011772:	681b      	ldr	r3, [r3, #0]
 8011774:	4a0d      	ldr	r2, [pc, #52]	; (80117ac <HAL_PCD_MspInit+0x44>)
 8011776:	4293      	cmp	r3, r2
 8011778:	d113      	bne.n	80117a2 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801177a:	4b0d      	ldr	r3, [pc, #52]	; (80117b0 <HAL_PCD_MspInit+0x48>)
 801177c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801177e:	4a0c      	ldr	r2, [pc, #48]	; (80117b0 <HAL_PCD_MspInit+0x48>)
 8011780:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011784:	6253      	str	r3, [r2, #36]	; 0x24
 8011786:	4b0a      	ldr	r3, [pc, #40]	; (80117b0 <HAL_PCD_MspInit+0x48>)
 8011788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801178a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801178e:	60fb      	str	r3, [r7, #12]
 8011790:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011792:	2200      	movs	r2, #0
 8011794:	2100      	movs	r1, #0
 8011796:	2014      	movs	r0, #20
 8011798:	f7f3 fd0d 	bl	80051b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801179c:	2014      	movs	r0, #20
 801179e:	f7f3 fd26 	bl	80051ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 80117a2:	bf00      	nop
 80117a4:	3710      	adds	r7, #16
 80117a6:	46bd      	mov	sp, r7
 80117a8:	bd80      	pop	{r7, pc}
 80117aa:	bf00      	nop
 80117ac:	40005c00 	.word	0x40005c00
 80117b0:	40023800 	.word	0x40023800

080117b4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117b4:	b580      	push	{r7, lr}
 80117b6:	b082      	sub	sp, #8
 80117b8:	af00      	add	r7, sp, #0
 80117ba:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80117bc:	687b      	ldr	r3, [r7, #4]
 80117be:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 80117c2:	687b      	ldr	r3, [r7, #4]
 80117c4:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 80117c8:	4619      	mov	r1, r3
 80117ca:	4610      	mov	r0, r2
 80117cc:	f7fb fd4f 	bl	800d26e <USBD_LL_SetupStage>
}
 80117d0:	bf00      	nop
 80117d2:	3708      	adds	r7, #8
 80117d4:	46bd      	mov	sp, r7
 80117d6:	bd80      	pop	{r7, pc}

080117d8 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80117d8:	b580      	push	{r7, lr}
 80117da:	b082      	sub	sp, #8
 80117dc:	af00      	add	r7, sp, #0
 80117de:	6078      	str	r0, [r7, #4]
 80117e0:	460b      	mov	r3, r1
 80117e2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80117e4:	687b      	ldr	r3, [r7, #4]
 80117e6:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80117ea:	78fa      	ldrb	r2, [r7, #3]
 80117ec:	6879      	ldr	r1, [r7, #4]
 80117ee:	4613      	mov	r3, r2
 80117f0:	009b      	lsls	r3, r3, #2
 80117f2:	4413      	add	r3, r2
 80117f4:	00db      	lsls	r3, r3, #3
 80117f6:	440b      	add	r3, r1
 80117f8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80117fc:	681a      	ldr	r2, [r3, #0]
 80117fe:	78fb      	ldrb	r3, [r7, #3]
 8011800:	4619      	mov	r1, r3
 8011802:	f7fb fd81 	bl	800d308 <USBD_LL_DataOutStage>
}
 8011806:	bf00      	nop
 8011808:	3708      	adds	r7, #8
 801180a:	46bd      	mov	sp, r7
 801180c:	bd80      	pop	{r7, pc}

0801180e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801180e:	b580      	push	{r7, lr}
 8011810:	b082      	sub	sp, #8
 8011812:	af00      	add	r7, sp, #0
 8011814:	6078      	str	r0, [r7, #4]
 8011816:	460b      	mov	r3, r1
 8011818:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 801181a:	687b      	ldr	r3, [r7, #4]
 801181c:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 8011820:	78fa      	ldrb	r2, [r7, #3]
 8011822:	6879      	ldr	r1, [r7, #4]
 8011824:	4613      	mov	r3, r2
 8011826:	009b      	lsls	r3, r3, #2
 8011828:	4413      	add	r3, r2
 801182a:	00db      	lsls	r3, r3, #3
 801182c:	440b      	add	r3, r1
 801182e:	333c      	adds	r3, #60	; 0x3c
 8011830:	681a      	ldr	r2, [r3, #0]
 8011832:	78fb      	ldrb	r3, [r7, #3]
 8011834:	4619      	mov	r1, r3
 8011836:	f7fb fdd8 	bl	800d3ea <USBD_LL_DataInStage>
}
 801183a:	bf00      	nop
 801183c:	3708      	adds	r7, #8
 801183e:	46bd      	mov	sp, r7
 8011840:	bd80      	pop	{r7, pc}

08011842 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011842:	b580      	push	{r7, lr}
 8011844:	b082      	sub	sp, #8
 8011846:	af00      	add	r7, sp, #0
 8011848:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 801184a:	687b      	ldr	r3, [r7, #4]
 801184c:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 8011850:	4618      	mov	r0, r3
 8011852:	f7fb fee3 	bl	800d61c <USBD_LL_SOF>
}
 8011856:	bf00      	nop
 8011858:	3708      	adds	r7, #8
 801185a:	46bd      	mov	sp, r7
 801185c:	bd80      	pop	{r7, pc}

0801185e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801185e:	b580      	push	{r7, lr}
 8011860:	b084      	sub	sp, #16
 8011862:	af00      	add	r7, sp, #0
 8011864:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011866:	2301      	movs	r3, #1
 8011868:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801186a:	687b      	ldr	r3, [r7, #4]
 801186c:	689b      	ldr	r3, [r3, #8]
 801186e:	2b02      	cmp	r3, #2
 8011870:	d001      	beq.n	8011876 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011872:	f7f2 fbe1 	bl	8004038 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011876:	687b      	ldr	r3, [r7, #4]
 8011878:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801187c:	7bfa      	ldrb	r2, [r7, #15]
 801187e:	4611      	mov	r1, r2
 8011880:	4618      	mov	r0, r3
 8011882:	f7fb fe98 	bl	800d5b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011886:	687b      	ldr	r3, [r7, #4]
 8011888:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801188c:	4618      	mov	r0, r3
 801188e:	f7fb fe51 	bl	800d534 <USBD_LL_Reset>
}
 8011892:	bf00      	nop
 8011894:	3710      	adds	r7, #16
 8011896:	46bd      	mov	sp, r7
 8011898:	bd80      	pop	{r7, pc}
	...

0801189c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801189c:	b580      	push	{r7, lr}
 801189e:	b082      	sub	sp, #8
 80118a0:	af00      	add	r7, sp, #0
 80118a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80118aa:	4618      	mov	r0, r3
 80118ac:	f7fb fe92 	bl	800d5d4 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80118b0:	687b      	ldr	r3, [r7, #4]
 80118b2:	699b      	ldr	r3, [r3, #24]
 80118b4:	2b00      	cmp	r3, #0
 80118b6:	d005      	beq.n	80118c4 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80118b8:	4b04      	ldr	r3, [pc, #16]	; (80118cc <HAL_PCD_SuspendCallback+0x30>)
 80118ba:	691b      	ldr	r3, [r3, #16]
 80118bc:	4a03      	ldr	r2, [pc, #12]	; (80118cc <HAL_PCD_SuspendCallback+0x30>)
 80118be:	f043 0306 	orr.w	r3, r3, #6
 80118c2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80118c4:	bf00      	nop
 80118c6:	3708      	adds	r7, #8
 80118c8:	46bd      	mov	sp, r7
 80118ca:	bd80      	pop	{r7, pc}
 80118cc:	e000ed00 	.word	0xe000ed00

080118d0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80118d0:	b580      	push	{r7, lr}
 80118d2:	b082      	sub	sp, #8
 80118d4:	af00      	add	r7, sp, #0
 80118d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80118d8:	687b      	ldr	r3, [r7, #4]
 80118da:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80118de:	4618      	mov	r0, r3
 80118e0:	f7fb fe8c 	bl	800d5fc <USBD_LL_Resume>
}
 80118e4:	bf00      	nop
 80118e6:	3708      	adds	r7, #8
 80118e8:	46bd      	mov	sp, r7
 80118ea:	bd80      	pop	{r7, pc}

080118ec <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80118ec:	b580      	push	{r7, lr}
 80118ee:	b082      	sub	sp, #8
 80118f0:	af00      	add	r7, sp, #0
 80118f2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 80118f4:	4a28      	ldr	r2, [pc, #160]	; (8011998 <USBD_LL_Init+0xac>)
 80118f6:	687b      	ldr	r3, [r7, #4]
 80118f8:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 80118fc:	687b      	ldr	r3, [r7, #4]
 80118fe:	4a26      	ldr	r2, [pc, #152]	; (8011998 <USBD_LL_Init+0xac>)
 8011900:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 8011904:	4b24      	ldr	r3, [pc, #144]	; (8011998 <USBD_LL_Init+0xac>)
 8011906:	4a25      	ldr	r2, [pc, #148]	; (801199c <USBD_LL_Init+0xb0>)
 8011908:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801190a:	4b23      	ldr	r3, [pc, #140]	; (8011998 <USBD_LL_Init+0xac>)
 801190c:	2208      	movs	r2, #8
 801190e:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8011910:	4b21      	ldr	r3, [pc, #132]	; (8011998 <USBD_LL_Init+0xac>)
 8011912:	2202      	movs	r2, #2
 8011914:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8011916:	4b20      	ldr	r3, [pc, #128]	; (8011998 <USBD_LL_Init+0xac>)
 8011918:	2202      	movs	r2, #2
 801191a:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 801191c:	4b1e      	ldr	r3, [pc, #120]	; (8011998 <USBD_LL_Init+0xac>)
 801191e:	2200      	movs	r2, #0
 8011920:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8011922:	4b1d      	ldr	r3, [pc, #116]	; (8011998 <USBD_LL_Init+0xac>)
 8011924:	2200      	movs	r2, #0
 8011926:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8011928:	481b      	ldr	r0, [pc, #108]	; (8011998 <USBD_LL_Init+0xac>)
 801192a:	f7f4 faa5 	bl	8005e78 <HAL_PCD_Init>
 801192e:	4603      	mov	r3, r0
 8011930:	2b00      	cmp	r3, #0
 8011932:	d001      	beq.n	8011938 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 8011934:	f7f2 fb80 	bl	8004038 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8011938:	687b      	ldr	r3, [r7, #4]
 801193a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801193e:	2318      	movs	r3, #24
 8011940:	2200      	movs	r2, #0
 8011942:	2100      	movs	r1, #0
 8011944:	f7f5 fe82 	bl	800764c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8011948:	687b      	ldr	r3, [r7, #4]
 801194a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801194e:	2358      	movs	r3, #88	; 0x58
 8011950:	2200      	movs	r2, #0
 8011952:	2180      	movs	r1, #128	; 0x80
 8011954:	f7f5 fe7a 	bl	800764c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801195e:	23c0      	movs	r3, #192	; 0xc0
 8011960:	2200      	movs	r2, #0
 8011962:	2181      	movs	r1, #129	; 0x81
 8011964:	f7f5 fe72 	bl	800764c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011968:	687b      	ldr	r3, [r7, #4]
 801196a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801196e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011972:	2200      	movs	r2, #0
 8011974:	2101      	movs	r1, #1
 8011976:	f7f5 fe69 	bl	800764c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801197a:	687b      	ldr	r3, [r7, #4]
 801197c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011980:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011984:	2200      	movs	r2, #0
 8011986:	2182      	movs	r1, #130	; 0x82
 8011988:	f7f5 fe60 	bl	800764c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801198c:	2300      	movs	r3, #0
}
 801198e:	4618      	mov	r0, r3
 8011990:	3708      	adds	r7, #8
 8011992:	46bd      	mov	sp, r7
 8011994:	bd80      	pop	{r7, pc}
 8011996:	bf00      	nop
 8011998:	20001dbc 	.word	0x20001dbc
 801199c:	40005c00 	.word	0x40005c00

080119a0 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80119a0:	b580      	push	{r7, lr}
 80119a2:	b084      	sub	sp, #16
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119a8:	2300      	movs	r3, #0
 80119aa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119ac:	2300      	movs	r3, #0
 80119ae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80119b0:	687b      	ldr	r3, [r7, #4]
 80119b2:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80119b6:	4618      	mov	r0, r3
 80119b8:	f7f4 fb3c 	bl	8006034 <HAL_PCD_Start>
 80119bc:	4603      	mov	r3, r0
 80119be:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80119c0:	7bfb      	ldrb	r3, [r7, #15]
 80119c2:	4618      	mov	r0, r3
 80119c4:	f000 f944 	bl	8011c50 <USBD_Get_USB_Status>
 80119c8:	4603      	mov	r3, r0
 80119ca:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80119cc:	7bbb      	ldrb	r3, [r7, #14]
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	3710      	adds	r7, #16
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bd80      	pop	{r7, pc}

080119d6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80119d6:	b580      	push	{r7, lr}
 80119d8:	b084      	sub	sp, #16
 80119da:	af00      	add	r7, sp, #0
 80119dc:	6078      	str	r0, [r7, #4]
 80119de:	4608      	mov	r0, r1
 80119e0:	4611      	mov	r1, r2
 80119e2:	461a      	mov	r2, r3
 80119e4:	4603      	mov	r3, r0
 80119e6:	70fb      	strb	r3, [r7, #3]
 80119e8:	460b      	mov	r3, r1
 80119ea:	70bb      	strb	r3, [r7, #2]
 80119ec:	4613      	mov	r3, r2
 80119ee:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80119f0:	2300      	movs	r3, #0
 80119f2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119f4:	2300      	movs	r3, #0
 80119f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80119f8:	687b      	ldr	r3, [r7, #4]
 80119fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80119fe:	78bb      	ldrb	r3, [r7, #2]
 8011a00:	883a      	ldrh	r2, [r7, #0]
 8011a02:	78f9      	ldrb	r1, [r7, #3]
 8011a04:	f7f4 fc58 	bl	80062b8 <HAL_PCD_EP_Open>
 8011a08:	4603      	mov	r3, r0
 8011a0a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a0c:	7bfb      	ldrb	r3, [r7, #15]
 8011a0e:	4618      	mov	r0, r3
 8011a10:	f000 f91e 	bl	8011c50 <USBD_Get_USB_Status>
 8011a14:	4603      	mov	r3, r0
 8011a16:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a18:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a1a:	4618      	mov	r0, r3
 8011a1c:	3710      	adds	r7, #16
 8011a1e:	46bd      	mov	sp, r7
 8011a20:	bd80      	pop	{r7, pc}

08011a22 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a22:	b580      	push	{r7, lr}
 8011a24:	b084      	sub	sp, #16
 8011a26:	af00      	add	r7, sp, #0
 8011a28:	6078      	str	r0, [r7, #4]
 8011a2a:	460b      	mov	r3, r1
 8011a2c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a2e:	2300      	movs	r3, #0
 8011a30:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a32:	2300      	movs	r3, #0
 8011a34:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8011a36:	687b      	ldr	r3, [r7, #4]
 8011a38:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011a3c:	78fa      	ldrb	r2, [r7, #3]
 8011a3e:	4611      	mov	r1, r2
 8011a40:	4618      	mov	r0, r3
 8011a42:	f7f4 fc9f 	bl	8006384 <HAL_PCD_EP_Close>
 8011a46:	4603      	mov	r3, r0
 8011a48:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a4a:	7bfb      	ldrb	r3, [r7, #15]
 8011a4c:	4618      	mov	r0, r3
 8011a4e:	f000 f8ff 	bl	8011c50 <USBD_Get_USB_Status>
 8011a52:	4603      	mov	r3, r0
 8011a54:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a56:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a58:	4618      	mov	r0, r3
 8011a5a:	3710      	adds	r7, #16
 8011a5c:	46bd      	mov	sp, r7
 8011a5e:	bd80      	pop	{r7, pc}

08011a60 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a60:	b580      	push	{r7, lr}
 8011a62:	b084      	sub	sp, #16
 8011a64:	af00      	add	r7, sp, #0
 8011a66:	6078      	str	r0, [r7, #4]
 8011a68:	460b      	mov	r3, r1
 8011a6a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011a6c:	2300      	movs	r3, #0
 8011a6e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011a70:	2300      	movs	r3, #0
 8011a72:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011a74:	687b      	ldr	r3, [r7, #4]
 8011a76:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011a7a:	78fa      	ldrb	r2, [r7, #3]
 8011a7c:	4611      	mov	r1, r2
 8011a7e:	4618      	mov	r0, r3
 8011a80:	f7f4 fd5f 	bl	8006542 <HAL_PCD_EP_SetStall>
 8011a84:	4603      	mov	r3, r0
 8011a86:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011a88:	7bfb      	ldrb	r3, [r7, #15]
 8011a8a:	4618      	mov	r0, r3
 8011a8c:	f000 f8e0 	bl	8011c50 <USBD_Get_USB_Status>
 8011a90:	4603      	mov	r3, r0
 8011a92:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011a94:	7bbb      	ldrb	r3, [r7, #14]
}
 8011a96:	4618      	mov	r0, r3
 8011a98:	3710      	adds	r7, #16
 8011a9a:	46bd      	mov	sp, r7
 8011a9c:	bd80      	pop	{r7, pc}

08011a9e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011a9e:	b580      	push	{r7, lr}
 8011aa0:	b084      	sub	sp, #16
 8011aa2:	af00      	add	r7, sp, #0
 8011aa4:	6078      	str	r0, [r7, #4]
 8011aa6:	460b      	mov	r3, r1
 8011aa8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011aaa:	2300      	movs	r3, #0
 8011aac:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011aae:	2300      	movs	r3, #0
 8011ab0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011ab8:	78fa      	ldrb	r2, [r7, #3]
 8011aba:	4611      	mov	r1, r2
 8011abc:	4618      	mov	r0, r3
 8011abe:	f7f4 fd92 	bl	80065e6 <HAL_PCD_EP_ClrStall>
 8011ac2:	4603      	mov	r3, r0
 8011ac4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ac6:	7bfb      	ldrb	r3, [r7, #15]
 8011ac8:	4618      	mov	r0, r3
 8011aca:	f000 f8c1 	bl	8011c50 <USBD_Get_USB_Status>
 8011ace:	4603      	mov	r3, r0
 8011ad0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011ad2:	7bbb      	ldrb	r3, [r7, #14]
}
 8011ad4:	4618      	mov	r0, r3
 8011ad6:	3710      	adds	r7, #16
 8011ad8:	46bd      	mov	sp, r7
 8011ada:	bd80      	pop	{r7, pc}

08011adc <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011adc:	b480      	push	{r7}
 8011ade:	b085      	sub	sp, #20
 8011ae0:	af00      	add	r7, sp, #0
 8011ae2:	6078      	str	r0, [r7, #4]
 8011ae4:	460b      	mov	r3, r1
 8011ae6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011ae8:	687b      	ldr	r3, [r7, #4]
 8011aea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011aee:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011af0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011af4:	2b00      	cmp	r3, #0
 8011af6:	da0c      	bge.n	8011b12 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011af8:	78fb      	ldrb	r3, [r7, #3]
 8011afa:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8011afe:	68f9      	ldr	r1, [r7, #12]
 8011b00:	1c5a      	adds	r2, r3, #1
 8011b02:	4613      	mov	r3, r2
 8011b04:	009b      	lsls	r3, r3, #2
 8011b06:	4413      	add	r3, r2
 8011b08:	00db      	lsls	r3, r3, #3
 8011b0a:	440b      	add	r3, r1
 8011b0c:	3302      	adds	r3, #2
 8011b0e:	781b      	ldrb	r3, [r3, #0]
 8011b10:	e00b      	b.n	8011b2a <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8011b12:	78fb      	ldrb	r3, [r7, #3]
 8011b14:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8011b18:	68f9      	ldr	r1, [r7, #12]
 8011b1a:	4613      	mov	r3, r2
 8011b1c:	009b      	lsls	r3, r3, #2
 8011b1e:	4413      	add	r3, r2
 8011b20:	00db      	lsls	r3, r3, #3
 8011b22:	440b      	add	r3, r1
 8011b24:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 8011b28:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011b2a:	4618      	mov	r0, r3
 8011b2c:	3714      	adds	r7, #20
 8011b2e:	46bd      	mov	sp, r7
 8011b30:	bc80      	pop	{r7}
 8011b32:	4770      	bx	lr

08011b34 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8011b34:	b580      	push	{r7, lr}
 8011b36:	b084      	sub	sp, #16
 8011b38:	af00      	add	r7, sp, #0
 8011b3a:	6078      	str	r0, [r7, #4]
 8011b3c:	460b      	mov	r3, r1
 8011b3e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b40:	2300      	movs	r3, #0
 8011b42:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b44:	2300      	movs	r3, #0
 8011b46:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8011b48:	687b      	ldr	r3, [r7, #4]
 8011b4a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011b4e:	78fa      	ldrb	r2, [r7, #3]
 8011b50:	4611      	mov	r1, r2
 8011b52:	4618      	mov	r0, r3
 8011b54:	f7f4 fb8b 	bl	800626e <HAL_PCD_SetAddress>
 8011b58:	4603      	mov	r3, r0
 8011b5a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011b5c:	7bfb      	ldrb	r3, [r7, #15]
 8011b5e:	4618      	mov	r0, r3
 8011b60:	f000 f876 	bl	8011c50 <USBD_Get_USB_Status>
 8011b64:	4603      	mov	r3, r0
 8011b66:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011b68:	7bbb      	ldrb	r3, [r7, #14]
}
 8011b6a:	4618      	mov	r0, r3
 8011b6c:	3710      	adds	r7, #16
 8011b6e:	46bd      	mov	sp, r7
 8011b70:	bd80      	pop	{r7, pc}

08011b72 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011b72:	b580      	push	{r7, lr}
 8011b74:	b086      	sub	sp, #24
 8011b76:	af00      	add	r7, sp, #0
 8011b78:	60f8      	str	r0, [r7, #12]
 8011b7a:	607a      	str	r2, [r7, #4]
 8011b7c:	461a      	mov	r2, r3
 8011b7e:	460b      	mov	r3, r1
 8011b80:	72fb      	strb	r3, [r7, #11]
 8011b82:	4613      	mov	r3, r2
 8011b84:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011b86:	2300      	movs	r3, #0
 8011b88:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011b8a:	2300      	movs	r3, #0
 8011b8c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8011b8e:	68fb      	ldr	r3, [r7, #12]
 8011b90:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011b94:	893b      	ldrh	r3, [r7, #8]
 8011b96:	7af9      	ldrb	r1, [r7, #11]
 8011b98:	687a      	ldr	r2, [r7, #4]
 8011b9a:	f7f4 fc8f 	bl	80064bc <HAL_PCD_EP_Transmit>
 8011b9e:	4603      	mov	r3, r0
 8011ba0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011ba2:	7dfb      	ldrb	r3, [r7, #23]
 8011ba4:	4618      	mov	r0, r3
 8011ba6:	f000 f853 	bl	8011c50 <USBD_Get_USB_Status>
 8011baa:	4603      	mov	r3, r0
 8011bac:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011bae:	7dbb      	ldrb	r3, [r7, #22]
}
 8011bb0:	4618      	mov	r0, r3
 8011bb2:	3718      	adds	r7, #24
 8011bb4:	46bd      	mov	sp, r7
 8011bb6:	bd80      	pop	{r7, pc}

08011bb8 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011bb8:	b580      	push	{r7, lr}
 8011bba:	b086      	sub	sp, #24
 8011bbc:	af00      	add	r7, sp, #0
 8011bbe:	60f8      	str	r0, [r7, #12]
 8011bc0:	607a      	str	r2, [r7, #4]
 8011bc2:	461a      	mov	r2, r3
 8011bc4:	460b      	mov	r3, r1
 8011bc6:	72fb      	strb	r3, [r7, #11]
 8011bc8:	4613      	mov	r3, r2
 8011bca:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011bcc:	2300      	movs	r3, #0
 8011bce:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011bd0:	2300      	movs	r3, #0
 8011bd2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011bd4:	68fb      	ldr	r3, [r7, #12]
 8011bd6:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011bda:	893b      	ldrh	r3, [r7, #8]
 8011bdc:	7af9      	ldrb	r1, [r7, #11]
 8011bde:	687a      	ldr	r2, [r7, #4]
 8011be0:	f7f4 fc18 	bl	8006414 <HAL_PCD_EP_Receive>
 8011be4:	4603      	mov	r3, r0
 8011be6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011be8:	7dfb      	ldrb	r3, [r7, #23]
 8011bea:	4618      	mov	r0, r3
 8011bec:	f000 f830 	bl	8011c50 <USBD_Get_USB_Status>
 8011bf0:	4603      	mov	r3, r0
 8011bf2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011bf4:	7dbb      	ldrb	r3, [r7, #22]
}
 8011bf6:	4618      	mov	r0, r3
 8011bf8:	3718      	adds	r7, #24
 8011bfa:	46bd      	mov	sp, r7
 8011bfc:	bd80      	pop	{r7, pc}

08011bfe <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011bfe:	b580      	push	{r7, lr}
 8011c00:	b082      	sub	sp, #8
 8011c02:	af00      	add	r7, sp, #0
 8011c04:	6078      	str	r0, [r7, #4]
 8011c06:	460b      	mov	r3, r1
 8011c08:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011c10:	78fa      	ldrb	r2, [r7, #3]
 8011c12:	4611      	mov	r1, r2
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7f4 fc3a 	bl	800648e <HAL_PCD_EP_GetRxCount>
 8011c1a:	4603      	mov	r3, r0
}
 8011c1c:	4618      	mov	r0, r3
 8011c1e:	3708      	adds	r7, #8
 8011c20:	46bd      	mov	sp, r7
 8011c22:	bd80      	pop	{r7, pc}

08011c24 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8011c24:	b480      	push	{r7}
 8011c26:	b083      	sub	sp, #12
 8011c28:	af00      	add	r7, sp, #0
 8011c2a:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8011c2c:	4b02      	ldr	r3, [pc, #8]	; (8011c38 <USBD_static_malloc+0x14>)
}
 8011c2e:	4618      	mov	r0, r3
 8011c30:	370c      	adds	r7, #12
 8011c32:	46bd      	mov	sp, r7
 8011c34:	bc80      	pop	{r7}
 8011c36:	4770      	bx	lr
 8011c38:	200020a8 	.word	0x200020a8

08011c3c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8011c3c:	b480      	push	{r7}
 8011c3e:	b083      	sub	sp, #12
 8011c40:	af00      	add	r7, sp, #0
 8011c42:	6078      	str	r0, [r7, #4]

}
 8011c44:	bf00      	nop
 8011c46:	370c      	adds	r7, #12
 8011c48:	46bd      	mov	sp, r7
 8011c4a:	bc80      	pop	{r7}
 8011c4c:	4770      	bx	lr
	...

08011c50 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8011c50:	b480      	push	{r7}
 8011c52:	b085      	sub	sp, #20
 8011c54:	af00      	add	r7, sp, #0
 8011c56:	4603      	mov	r3, r0
 8011c58:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011c5a:	2300      	movs	r3, #0
 8011c5c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8011c5e:	79fb      	ldrb	r3, [r7, #7]
 8011c60:	2b03      	cmp	r3, #3
 8011c62:	d817      	bhi.n	8011c94 <USBD_Get_USB_Status+0x44>
 8011c64:	a201      	add	r2, pc, #4	; (adr r2, 8011c6c <USBD_Get_USB_Status+0x1c>)
 8011c66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c6a:	bf00      	nop
 8011c6c:	08011c7d 	.word	0x08011c7d
 8011c70:	08011c83 	.word	0x08011c83
 8011c74:	08011c89 	.word	0x08011c89
 8011c78:	08011c8f 	.word	0x08011c8f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011c7c:	2300      	movs	r3, #0
 8011c7e:	73fb      	strb	r3, [r7, #15]
    break;
 8011c80:	e00b      	b.n	8011c9a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011c82:	2302      	movs	r3, #2
 8011c84:	73fb      	strb	r3, [r7, #15]
    break;
 8011c86:	e008      	b.n	8011c9a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011c88:	2301      	movs	r3, #1
 8011c8a:	73fb      	strb	r3, [r7, #15]
    break;
 8011c8c:	e005      	b.n	8011c9a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011c8e:	2302      	movs	r3, #2
 8011c90:	73fb      	strb	r3, [r7, #15]
    break;
 8011c92:	e002      	b.n	8011c9a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011c94:	2302      	movs	r3, #2
 8011c96:	73fb      	strb	r3, [r7, #15]
    break;
 8011c98:	bf00      	nop
  }
  return usb_status;
 8011c9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011c9c:	4618      	mov	r0, r3
 8011c9e:	3714      	adds	r7, #20
 8011ca0:	46bd      	mov	sp, r7
 8011ca2:	bc80      	pop	{r7}
 8011ca4:	4770      	bx	lr
 8011ca6:	bf00      	nop

08011ca8 <siprintf>:
 8011ca8:	b40e      	push	{r1, r2, r3}
 8011caa:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011cae:	b500      	push	{lr}
 8011cb0:	b09c      	sub	sp, #112	; 0x70
 8011cb2:	ab1d      	add	r3, sp, #116	; 0x74
 8011cb4:	9002      	str	r0, [sp, #8]
 8011cb6:	9006      	str	r0, [sp, #24]
 8011cb8:	9107      	str	r1, [sp, #28]
 8011cba:	9104      	str	r1, [sp, #16]
 8011cbc:	4808      	ldr	r0, [pc, #32]	; (8011ce0 <siprintf+0x38>)
 8011cbe:	4909      	ldr	r1, [pc, #36]	; (8011ce4 <siprintf+0x3c>)
 8011cc0:	f853 2b04 	ldr.w	r2, [r3], #4
 8011cc4:	9105      	str	r1, [sp, #20]
 8011cc6:	6800      	ldr	r0, [r0, #0]
 8011cc8:	a902      	add	r1, sp, #8
 8011cca:	9301      	str	r3, [sp, #4]
 8011ccc:	f000 f9b0 	bl	8012030 <_svfiprintf_r>
 8011cd0:	2200      	movs	r2, #0
 8011cd2:	9b02      	ldr	r3, [sp, #8]
 8011cd4:	701a      	strb	r2, [r3, #0]
 8011cd6:	b01c      	add	sp, #112	; 0x70
 8011cd8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011cdc:	b003      	add	sp, #12
 8011cde:	4770      	bx	lr
 8011ce0:	20000268 	.word	0x20000268
 8011ce4:	ffff0208 	.word	0xffff0208

08011ce8 <memset>:
 8011ce8:	4603      	mov	r3, r0
 8011cea:	4402      	add	r2, r0
 8011cec:	4293      	cmp	r3, r2
 8011cee:	d100      	bne.n	8011cf2 <memset+0xa>
 8011cf0:	4770      	bx	lr
 8011cf2:	f803 1b01 	strb.w	r1, [r3], #1
 8011cf6:	e7f9      	b.n	8011cec <memset+0x4>

08011cf8 <strncpy>:
 8011cf8:	4603      	mov	r3, r0
 8011cfa:	b510      	push	{r4, lr}
 8011cfc:	3901      	subs	r1, #1
 8011cfe:	b132      	cbz	r2, 8011d0e <strncpy+0x16>
 8011d00:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011d04:	3a01      	subs	r2, #1
 8011d06:	f803 4b01 	strb.w	r4, [r3], #1
 8011d0a:	2c00      	cmp	r4, #0
 8011d0c:	d1f7      	bne.n	8011cfe <strncpy+0x6>
 8011d0e:	2100      	movs	r1, #0
 8011d10:	441a      	add	r2, r3
 8011d12:	4293      	cmp	r3, r2
 8011d14:	d100      	bne.n	8011d18 <strncpy+0x20>
 8011d16:	bd10      	pop	{r4, pc}
 8011d18:	f803 1b01 	strb.w	r1, [r3], #1
 8011d1c:	e7f9      	b.n	8011d12 <strncpy+0x1a>
	...

08011d20 <__errno>:
 8011d20:	4b01      	ldr	r3, [pc, #4]	; (8011d28 <__errno+0x8>)
 8011d22:	6818      	ldr	r0, [r3, #0]
 8011d24:	4770      	bx	lr
 8011d26:	bf00      	nop
 8011d28:	20000268 	.word	0x20000268

08011d2c <__libc_init_array>:
 8011d2c:	b570      	push	{r4, r5, r6, lr}
 8011d2e:	2600      	movs	r6, #0
 8011d30:	4d0c      	ldr	r5, [pc, #48]	; (8011d64 <__libc_init_array+0x38>)
 8011d32:	4c0d      	ldr	r4, [pc, #52]	; (8011d68 <__libc_init_array+0x3c>)
 8011d34:	1b64      	subs	r4, r4, r5
 8011d36:	10a4      	asrs	r4, r4, #2
 8011d38:	42a6      	cmp	r6, r4
 8011d3a:	d109      	bne.n	8011d50 <__libc_init_array+0x24>
 8011d3c:	f000 fc7a 	bl	8012634 <_init>
 8011d40:	2600      	movs	r6, #0
 8011d42:	4d0a      	ldr	r5, [pc, #40]	; (8011d6c <__libc_init_array+0x40>)
 8011d44:	4c0a      	ldr	r4, [pc, #40]	; (8011d70 <__libc_init_array+0x44>)
 8011d46:	1b64      	subs	r4, r4, r5
 8011d48:	10a4      	asrs	r4, r4, #2
 8011d4a:	42a6      	cmp	r6, r4
 8011d4c:	d105      	bne.n	8011d5a <__libc_init_array+0x2e>
 8011d4e:	bd70      	pop	{r4, r5, r6, pc}
 8011d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d54:	4798      	blx	r3
 8011d56:	3601      	adds	r6, #1
 8011d58:	e7ee      	b.n	8011d38 <__libc_init_array+0xc>
 8011d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8011d5e:	4798      	blx	r3
 8011d60:	3601      	adds	r6, #1
 8011d62:	e7f2      	b.n	8011d4a <__libc_init_array+0x1e>
 8011d64:	08012c54 	.word	0x08012c54
 8011d68:	08012c54 	.word	0x08012c54
 8011d6c:	08012c54 	.word	0x08012c54
 8011d70:	08012c58 	.word	0x08012c58

08011d74 <__retarget_lock_acquire_recursive>:
 8011d74:	4770      	bx	lr

08011d76 <__retarget_lock_release_recursive>:
 8011d76:	4770      	bx	lr

08011d78 <memcpy>:
 8011d78:	440a      	add	r2, r1
 8011d7a:	4291      	cmp	r1, r2
 8011d7c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011d80:	d100      	bne.n	8011d84 <memcpy+0xc>
 8011d82:	4770      	bx	lr
 8011d84:	b510      	push	{r4, lr}
 8011d86:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011d8a:	4291      	cmp	r1, r2
 8011d8c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011d90:	d1f9      	bne.n	8011d86 <memcpy+0xe>
 8011d92:	bd10      	pop	{r4, pc}

08011d94 <_free_r>:
 8011d94:	b538      	push	{r3, r4, r5, lr}
 8011d96:	4605      	mov	r5, r0
 8011d98:	2900      	cmp	r1, #0
 8011d9a:	d040      	beq.n	8011e1e <_free_r+0x8a>
 8011d9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011da0:	1f0c      	subs	r4, r1, #4
 8011da2:	2b00      	cmp	r3, #0
 8011da4:	bfb8      	it	lt
 8011da6:	18e4      	addlt	r4, r4, r3
 8011da8:	f000 f8dc 	bl	8011f64 <__malloc_lock>
 8011dac:	4a1c      	ldr	r2, [pc, #112]	; (8011e20 <_free_r+0x8c>)
 8011dae:	6813      	ldr	r3, [r2, #0]
 8011db0:	b933      	cbnz	r3, 8011dc0 <_free_r+0x2c>
 8011db2:	6063      	str	r3, [r4, #4]
 8011db4:	6014      	str	r4, [r2, #0]
 8011db6:	4628      	mov	r0, r5
 8011db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011dbc:	f000 b8d8 	b.w	8011f70 <__malloc_unlock>
 8011dc0:	42a3      	cmp	r3, r4
 8011dc2:	d908      	bls.n	8011dd6 <_free_r+0x42>
 8011dc4:	6820      	ldr	r0, [r4, #0]
 8011dc6:	1821      	adds	r1, r4, r0
 8011dc8:	428b      	cmp	r3, r1
 8011dca:	bf01      	itttt	eq
 8011dcc:	6819      	ldreq	r1, [r3, #0]
 8011dce:	685b      	ldreq	r3, [r3, #4]
 8011dd0:	1809      	addeq	r1, r1, r0
 8011dd2:	6021      	streq	r1, [r4, #0]
 8011dd4:	e7ed      	b.n	8011db2 <_free_r+0x1e>
 8011dd6:	461a      	mov	r2, r3
 8011dd8:	685b      	ldr	r3, [r3, #4]
 8011dda:	b10b      	cbz	r3, 8011de0 <_free_r+0x4c>
 8011ddc:	42a3      	cmp	r3, r4
 8011dde:	d9fa      	bls.n	8011dd6 <_free_r+0x42>
 8011de0:	6811      	ldr	r1, [r2, #0]
 8011de2:	1850      	adds	r0, r2, r1
 8011de4:	42a0      	cmp	r0, r4
 8011de6:	d10b      	bne.n	8011e00 <_free_r+0x6c>
 8011de8:	6820      	ldr	r0, [r4, #0]
 8011dea:	4401      	add	r1, r0
 8011dec:	1850      	adds	r0, r2, r1
 8011dee:	4283      	cmp	r3, r0
 8011df0:	6011      	str	r1, [r2, #0]
 8011df2:	d1e0      	bne.n	8011db6 <_free_r+0x22>
 8011df4:	6818      	ldr	r0, [r3, #0]
 8011df6:	685b      	ldr	r3, [r3, #4]
 8011df8:	4408      	add	r0, r1
 8011dfa:	6010      	str	r0, [r2, #0]
 8011dfc:	6053      	str	r3, [r2, #4]
 8011dfe:	e7da      	b.n	8011db6 <_free_r+0x22>
 8011e00:	d902      	bls.n	8011e08 <_free_r+0x74>
 8011e02:	230c      	movs	r3, #12
 8011e04:	602b      	str	r3, [r5, #0]
 8011e06:	e7d6      	b.n	8011db6 <_free_r+0x22>
 8011e08:	6820      	ldr	r0, [r4, #0]
 8011e0a:	1821      	adds	r1, r4, r0
 8011e0c:	428b      	cmp	r3, r1
 8011e0e:	bf01      	itttt	eq
 8011e10:	6819      	ldreq	r1, [r3, #0]
 8011e12:	685b      	ldreq	r3, [r3, #4]
 8011e14:	1809      	addeq	r1, r1, r0
 8011e16:	6021      	streq	r1, [r4, #0]
 8011e18:	6063      	str	r3, [r4, #4]
 8011e1a:	6054      	str	r4, [r2, #4]
 8011e1c:	e7cb      	b.n	8011db6 <_free_r+0x22>
 8011e1e:	bd38      	pop	{r3, r4, r5, pc}
 8011e20:	20002408 	.word	0x20002408

08011e24 <sbrk_aligned>:
 8011e24:	b570      	push	{r4, r5, r6, lr}
 8011e26:	4e0e      	ldr	r6, [pc, #56]	; (8011e60 <sbrk_aligned+0x3c>)
 8011e28:	460c      	mov	r4, r1
 8011e2a:	6831      	ldr	r1, [r6, #0]
 8011e2c:	4605      	mov	r5, r0
 8011e2e:	b911      	cbnz	r1, 8011e36 <sbrk_aligned+0x12>
 8011e30:	f000 fbaa 	bl	8012588 <_sbrk_r>
 8011e34:	6030      	str	r0, [r6, #0]
 8011e36:	4621      	mov	r1, r4
 8011e38:	4628      	mov	r0, r5
 8011e3a:	f000 fba5 	bl	8012588 <_sbrk_r>
 8011e3e:	1c43      	adds	r3, r0, #1
 8011e40:	d00a      	beq.n	8011e58 <sbrk_aligned+0x34>
 8011e42:	1cc4      	adds	r4, r0, #3
 8011e44:	f024 0403 	bic.w	r4, r4, #3
 8011e48:	42a0      	cmp	r0, r4
 8011e4a:	d007      	beq.n	8011e5c <sbrk_aligned+0x38>
 8011e4c:	1a21      	subs	r1, r4, r0
 8011e4e:	4628      	mov	r0, r5
 8011e50:	f000 fb9a 	bl	8012588 <_sbrk_r>
 8011e54:	3001      	adds	r0, #1
 8011e56:	d101      	bne.n	8011e5c <sbrk_aligned+0x38>
 8011e58:	f04f 34ff 	mov.w	r4, #4294967295
 8011e5c:	4620      	mov	r0, r4
 8011e5e:	bd70      	pop	{r4, r5, r6, pc}
 8011e60:	2000240c 	.word	0x2000240c

08011e64 <_malloc_r>:
 8011e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011e68:	1ccd      	adds	r5, r1, #3
 8011e6a:	f025 0503 	bic.w	r5, r5, #3
 8011e6e:	3508      	adds	r5, #8
 8011e70:	2d0c      	cmp	r5, #12
 8011e72:	bf38      	it	cc
 8011e74:	250c      	movcc	r5, #12
 8011e76:	2d00      	cmp	r5, #0
 8011e78:	4607      	mov	r7, r0
 8011e7a:	db01      	blt.n	8011e80 <_malloc_r+0x1c>
 8011e7c:	42a9      	cmp	r1, r5
 8011e7e:	d905      	bls.n	8011e8c <_malloc_r+0x28>
 8011e80:	230c      	movs	r3, #12
 8011e82:	2600      	movs	r6, #0
 8011e84:	603b      	str	r3, [r7, #0]
 8011e86:	4630      	mov	r0, r6
 8011e88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011e8c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011f60 <_malloc_r+0xfc>
 8011e90:	f000 f868 	bl	8011f64 <__malloc_lock>
 8011e94:	f8d8 3000 	ldr.w	r3, [r8]
 8011e98:	461c      	mov	r4, r3
 8011e9a:	bb5c      	cbnz	r4, 8011ef4 <_malloc_r+0x90>
 8011e9c:	4629      	mov	r1, r5
 8011e9e:	4638      	mov	r0, r7
 8011ea0:	f7ff ffc0 	bl	8011e24 <sbrk_aligned>
 8011ea4:	1c43      	adds	r3, r0, #1
 8011ea6:	4604      	mov	r4, r0
 8011ea8:	d155      	bne.n	8011f56 <_malloc_r+0xf2>
 8011eaa:	f8d8 4000 	ldr.w	r4, [r8]
 8011eae:	4626      	mov	r6, r4
 8011eb0:	2e00      	cmp	r6, #0
 8011eb2:	d145      	bne.n	8011f40 <_malloc_r+0xdc>
 8011eb4:	2c00      	cmp	r4, #0
 8011eb6:	d048      	beq.n	8011f4a <_malloc_r+0xe6>
 8011eb8:	6823      	ldr	r3, [r4, #0]
 8011eba:	4631      	mov	r1, r6
 8011ebc:	4638      	mov	r0, r7
 8011ebe:	eb04 0903 	add.w	r9, r4, r3
 8011ec2:	f000 fb61 	bl	8012588 <_sbrk_r>
 8011ec6:	4581      	cmp	r9, r0
 8011ec8:	d13f      	bne.n	8011f4a <_malloc_r+0xe6>
 8011eca:	6821      	ldr	r1, [r4, #0]
 8011ecc:	4638      	mov	r0, r7
 8011ece:	1a6d      	subs	r5, r5, r1
 8011ed0:	4629      	mov	r1, r5
 8011ed2:	f7ff ffa7 	bl	8011e24 <sbrk_aligned>
 8011ed6:	3001      	adds	r0, #1
 8011ed8:	d037      	beq.n	8011f4a <_malloc_r+0xe6>
 8011eda:	6823      	ldr	r3, [r4, #0]
 8011edc:	442b      	add	r3, r5
 8011ede:	6023      	str	r3, [r4, #0]
 8011ee0:	f8d8 3000 	ldr.w	r3, [r8]
 8011ee4:	2b00      	cmp	r3, #0
 8011ee6:	d038      	beq.n	8011f5a <_malloc_r+0xf6>
 8011ee8:	685a      	ldr	r2, [r3, #4]
 8011eea:	42a2      	cmp	r2, r4
 8011eec:	d12b      	bne.n	8011f46 <_malloc_r+0xe2>
 8011eee:	2200      	movs	r2, #0
 8011ef0:	605a      	str	r2, [r3, #4]
 8011ef2:	e00f      	b.n	8011f14 <_malloc_r+0xb0>
 8011ef4:	6822      	ldr	r2, [r4, #0]
 8011ef6:	1b52      	subs	r2, r2, r5
 8011ef8:	d41f      	bmi.n	8011f3a <_malloc_r+0xd6>
 8011efa:	2a0b      	cmp	r2, #11
 8011efc:	d917      	bls.n	8011f2e <_malloc_r+0xca>
 8011efe:	1961      	adds	r1, r4, r5
 8011f00:	42a3      	cmp	r3, r4
 8011f02:	6025      	str	r5, [r4, #0]
 8011f04:	bf18      	it	ne
 8011f06:	6059      	strne	r1, [r3, #4]
 8011f08:	6863      	ldr	r3, [r4, #4]
 8011f0a:	bf08      	it	eq
 8011f0c:	f8c8 1000 	streq.w	r1, [r8]
 8011f10:	5162      	str	r2, [r4, r5]
 8011f12:	604b      	str	r3, [r1, #4]
 8011f14:	4638      	mov	r0, r7
 8011f16:	f104 060b 	add.w	r6, r4, #11
 8011f1a:	f000 f829 	bl	8011f70 <__malloc_unlock>
 8011f1e:	f026 0607 	bic.w	r6, r6, #7
 8011f22:	1d23      	adds	r3, r4, #4
 8011f24:	1af2      	subs	r2, r6, r3
 8011f26:	d0ae      	beq.n	8011e86 <_malloc_r+0x22>
 8011f28:	1b9b      	subs	r3, r3, r6
 8011f2a:	50a3      	str	r3, [r4, r2]
 8011f2c:	e7ab      	b.n	8011e86 <_malloc_r+0x22>
 8011f2e:	42a3      	cmp	r3, r4
 8011f30:	6862      	ldr	r2, [r4, #4]
 8011f32:	d1dd      	bne.n	8011ef0 <_malloc_r+0x8c>
 8011f34:	f8c8 2000 	str.w	r2, [r8]
 8011f38:	e7ec      	b.n	8011f14 <_malloc_r+0xb0>
 8011f3a:	4623      	mov	r3, r4
 8011f3c:	6864      	ldr	r4, [r4, #4]
 8011f3e:	e7ac      	b.n	8011e9a <_malloc_r+0x36>
 8011f40:	4634      	mov	r4, r6
 8011f42:	6876      	ldr	r6, [r6, #4]
 8011f44:	e7b4      	b.n	8011eb0 <_malloc_r+0x4c>
 8011f46:	4613      	mov	r3, r2
 8011f48:	e7cc      	b.n	8011ee4 <_malloc_r+0x80>
 8011f4a:	230c      	movs	r3, #12
 8011f4c:	4638      	mov	r0, r7
 8011f4e:	603b      	str	r3, [r7, #0]
 8011f50:	f000 f80e 	bl	8011f70 <__malloc_unlock>
 8011f54:	e797      	b.n	8011e86 <_malloc_r+0x22>
 8011f56:	6025      	str	r5, [r4, #0]
 8011f58:	e7dc      	b.n	8011f14 <_malloc_r+0xb0>
 8011f5a:	605b      	str	r3, [r3, #4]
 8011f5c:	deff      	udf	#255	; 0xff
 8011f5e:	bf00      	nop
 8011f60:	20002408 	.word	0x20002408

08011f64 <__malloc_lock>:
 8011f64:	4801      	ldr	r0, [pc, #4]	; (8011f6c <__malloc_lock+0x8>)
 8011f66:	f7ff bf05 	b.w	8011d74 <__retarget_lock_acquire_recursive>
 8011f6a:	bf00      	nop
 8011f6c:	20002404 	.word	0x20002404

08011f70 <__malloc_unlock>:
 8011f70:	4801      	ldr	r0, [pc, #4]	; (8011f78 <__malloc_unlock+0x8>)
 8011f72:	f7ff bf00 	b.w	8011d76 <__retarget_lock_release_recursive>
 8011f76:	bf00      	nop
 8011f78:	20002404 	.word	0x20002404

08011f7c <__ssputs_r>:
 8011f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011f80:	461f      	mov	r7, r3
 8011f82:	688e      	ldr	r6, [r1, #8]
 8011f84:	4682      	mov	sl, r0
 8011f86:	42be      	cmp	r6, r7
 8011f88:	460c      	mov	r4, r1
 8011f8a:	4690      	mov	r8, r2
 8011f8c:	680b      	ldr	r3, [r1, #0]
 8011f8e:	d82c      	bhi.n	8011fea <__ssputs_r+0x6e>
 8011f90:	898a      	ldrh	r2, [r1, #12]
 8011f92:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011f96:	d026      	beq.n	8011fe6 <__ssputs_r+0x6a>
 8011f98:	6965      	ldr	r5, [r4, #20]
 8011f9a:	6909      	ldr	r1, [r1, #16]
 8011f9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011fa0:	eba3 0901 	sub.w	r9, r3, r1
 8011fa4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011fa8:	1c7b      	adds	r3, r7, #1
 8011faa:	444b      	add	r3, r9
 8011fac:	106d      	asrs	r5, r5, #1
 8011fae:	429d      	cmp	r5, r3
 8011fb0:	bf38      	it	cc
 8011fb2:	461d      	movcc	r5, r3
 8011fb4:	0553      	lsls	r3, r2, #21
 8011fb6:	d527      	bpl.n	8012008 <__ssputs_r+0x8c>
 8011fb8:	4629      	mov	r1, r5
 8011fba:	f7ff ff53 	bl	8011e64 <_malloc_r>
 8011fbe:	4606      	mov	r6, r0
 8011fc0:	b360      	cbz	r0, 801201c <__ssputs_r+0xa0>
 8011fc2:	464a      	mov	r2, r9
 8011fc4:	6921      	ldr	r1, [r4, #16]
 8011fc6:	f7ff fed7 	bl	8011d78 <memcpy>
 8011fca:	89a3      	ldrh	r3, [r4, #12]
 8011fcc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011fd0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011fd4:	81a3      	strh	r3, [r4, #12]
 8011fd6:	6126      	str	r6, [r4, #16]
 8011fd8:	444e      	add	r6, r9
 8011fda:	6026      	str	r6, [r4, #0]
 8011fdc:	463e      	mov	r6, r7
 8011fde:	6165      	str	r5, [r4, #20]
 8011fe0:	eba5 0509 	sub.w	r5, r5, r9
 8011fe4:	60a5      	str	r5, [r4, #8]
 8011fe6:	42be      	cmp	r6, r7
 8011fe8:	d900      	bls.n	8011fec <__ssputs_r+0x70>
 8011fea:	463e      	mov	r6, r7
 8011fec:	4632      	mov	r2, r6
 8011fee:	4641      	mov	r1, r8
 8011ff0:	6820      	ldr	r0, [r4, #0]
 8011ff2:	f000 faaf 	bl	8012554 <memmove>
 8011ff6:	2000      	movs	r0, #0
 8011ff8:	68a3      	ldr	r3, [r4, #8]
 8011ffa:	1b9b      	subs	r3, r3, r6
 8011ffc:	60a3      	str	r3, [r4, #8]
 8011ffe:	6823      	ldr	r3, [r4, #0]
 8012000:	4433      	add	r3, r6
 8012002:	6023      	str	r3, [r4, #0]
 8012004:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012008:	462a      	mov	r2, r5
 801200a:	f000 fadb 	bl	80125c4 <_realloc_r>
 801200e:	4606      	mov	r6, r0
 8012010:	2800      	cmp	r0, #0
 8012012:	d1e0      	bne.n	8011fd6 <__ssputs_r+0x5a>
 8012014:	4650      	mov	r0, sl
 8012016:	6921      	ldr	r1, [r4, #16]
 8012018:	f7ff febc 	bl	8011d94 <_free_r>
 801201c:	230c      	movs	r3, #12
 801201e:	f8ca 3000 	str.w	r3, [sl]
 8012022:	89a3      	ldrh	r3, [r4, #12]
 8012024:	f04f 30ff 	mov.w	r0, #4294967295
 8012028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801202c:	81a3      	strh	r3, [r4, #12]
 801202e:	e7e9      	b.n	8012004 <__ssputs_r+0x88>

08012030 <_svfiprintf_r>:
 8012030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012034:	4698      	mov	r8, r3
 8012036:	898b      	ldrh	r3, [r1, #12]
 8012038:	4607      	mov	r7, r0
 801203a:	061b      	lsls	r3, r3, #24
 801203c:	460d      	mov	r5, r1
 801203e:	4614      	mov	r4, r2
 8012040:	b09d      	sub	sp, #116	; 0x74
 8012042:	d50e      	bpl.n	8012062 <_svfiprintf_r+0x32>
 8012044:	690b      	ldr	r3, [r1, #16]
 8012046:	b963      	cbnz	r3, 8012062 <_svfiprintf_r+0x32>
 8012048:	2140      	movs	r1, #64	; 0x40
 801204a:	f7ff ff0b 	bl	8011e64 <_malloc_r>
 801204e:	6028      	str	r0, [r5, #0]
 8012050:	6128      	str	r0, [r5, #16]
 8012052:	b920      	cbnz	r0, 801205e <_svfiprintf_r+0x2e>
 8012054:	230c      	movs	r3, #12
 8012056:	603b      	str	r3, [r7, #0]
 8012058:	f04f 30ff 	mov.w	r0, #4294967295
 801205c:	e0d0      	b.n	8012200 <_svfiprintf_r+0x1d0>
 801205e:	2340      	movs	r3, #64	; 0x40
 8012060:	616b      	str	r3, [r5, #20]
 8012062:	2300      	movs	r3, #0
 8012064:	9309      	str	r3, [sp, #36]	; 0x24
 8012066:	2320      	movs	r3, #32
 8012068:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801206c:	2330      	movs	r3, #48	; 0x30
 801206e:	f04f 0901 	mov.w	r9, #1
 8012072:	f8cd 800c 	str.w	r8, [sp, #12]
 8012076:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8012218 <_svfiprintf_r+0x1e8>
 801207a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801207e:	4623      	mov	r3, r4
 8012080:	469a      	mov	sl, r3
 8012082:	f813 2b01 	ldrb.w	r2, [r3], #1
 8012086:	b10a      	cbz	r2, 801208c <_svfiprintf_r+0x5c>
 8012088:	2a25      	cmp	r2, #37	; 0x25
 801208a:	d1f9      	bne.n	8012080 <_svfiprintf_r+0x50>
 801208c:	ebba 0b04 	subs.w	fp, sl, r4
 8012090:	d00b      	beq.n	80120aa <_svfiprintf_r+0x7a>
 8012092:	465b      	mov	r3, fp
 8012094:	4622      	mov	r2, r4
 8012096:	4629      	mov	r1, r5
 8012098:	4638      	mov	r0, r7
 801209a:	f7ff ff6f 	bl	8011f7c <__ssputs_r>
 801209e:	3001      	adds	r0, #1
 80120a0:	f000 80a9 	beq.w	80121f6 <_svfiprintf_r+0x1c6>
 80120a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80120a6:	445a      	add	r2, fp
 80120a8:	9209      	str	r2, [sp, #36]	; 0x24
 80120aa:	f89a 3000 	ldrb.w	r3, [sl]
 80120ae:	2b00      	cmp	r3, #0
 80120b0:	f000 80a1 	beq.w	80121f6 <_svfiprintf_r+0x1c6>
 80120b4:	2300      	movs	r3, #0
 80120b6:	f04f 32ff 	mov.w	r2, #4294967295
 80120ba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80120be:	f10a 0a01 	add.w	sl, sl, #1
 80120c2:	9304      	str	r3, [sp, #16]
 80120c4:	9307      	str	r3, [sp, #28]
 80120c6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80120ca:	931a      	str	r3, [sp, #104]	; 0x68
 80120cc:	4654      	mov	r4, sl
 80120ce:	2205      	movs	r2, #5
 80120d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80120d4:	4850      	ldr	r0, [pc, #320]	; (8012218 <_svfiprintf_r+0x1e8>)
 80120d6:	f000 fa67 	bl	80125a8 <memchr>
 80120da:	9a04      	ldr	r2, [sp, #16]
 80120dc:	b9d8      	cbnz	r0, 8012116 <_svfiprintf_r+0xe6>
 80120de:	06d0      	lsls	r0, r2, #27
 80120e0:	bf44      	itt	mi
 80120e2:	2320      	movmi	r3, #32
 80120e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120e8:	0711      	lsls	r1, r2, #28
 80120ea:	bf44      	itt	mi
 80120ec:	232b      	movmi	r3, #43	; 0x2b
 80120ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80120f2:	f89a 3000 	ldrb.w	r3, [sl]
 80120f6:	2b2a      	cmp	r3, #42	; 0x2a
 80120f8:	d015      	beq.n	8012126 <_svfiprintf_r+0xf6>
 80120fa:	4654      	mov	r4, sl
 80120fc:	2000      	movs	r0, #0
 80120fe:	f04f 0c0a 	mov.w	ip, #10
 8012102:	9a07      	ldr	r2, [sp, #28]
 8012104:	4621      	mov	r1, r4
 8012106:	f811 3b01 	ldrb.w	r3, [r1], #1
 801210a:	3b30      	subs	r3, #48	; 0x30
 801210c:	2b09      	cmp	r3, #9
 801210e:	d94d      	bls.n	80121ac <_svfiprintf_r+0x17c>
 8012110:	b1b0      	cbz	r0, 8012140 <_svfiprintf_r+0x110>
 8012112:	9207      	str	r2, [sp, #28]
 8012114:	e014      	b.n	8012140 <_svfiprintf_r+0x110>
 8012116:	eba0 0308 	sub.w	r3, r0, r8
 801211a:	fa09 f303 	lsl.w	r3, r9, r3
 801211e:	4313      	orrs	r3, r2
 8012120:	46a2      	mov	sl, r4
 8012122:	9304      	str	r3, [sp, #16]
 8012124:	e7d2      	b.n	80120cc <_svfiprintf_r+0x9c>
 8012126:	9b03      	ldr	r3, [sp, #12]
 8012128:	1d19      	adds	r1, r3, #4
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	9103      	str	r1, [sp, #12]
 801212e:	2b00      	cmp	r3, #0
 8012130:	bfbb      	ittet	lt
 8012132:	425b      	neglt	r3, r3
 8012134:	f042 0202 	orrlt.w	r2, r2, #2
 8012138:	9307      	strge	r3, [sp, #28]
 801213a:	9307      	strlt	r3, [sp, #28]
 801213c:	bfb8      	it	lt
 801213e:	9204      	strlt	r2, [sp, #16]
 8012140:	7823      	ldrb	r3, [r4, #0]
 8012142:	2b2e      	cmp	r3, #46	; 0x2e
 8012144:	d10c      	bne.n	8012160 <_svfiprintf_r+0x130>
 8012146:	7863      	ldrb	r3, [r4, #1]
 8012148:	2b2a      	cmp	r3, #42	; 0x2a
 801214a:	d134      	bne.n	80121b6 <_svfiprintf_r+0x186>
 801214c:	9b03      	ldr	r3, [sp, #12]
 801214e:	3402      	adds	r4, #2
 8012150:	1d1a      	adds	r2, r3, #4
 8012152:	681b      	ldr	r3, [r3, #0]
 8012154:	9203      	str	r2, [sp, #12]
 8012156:	2b00      	cmp	r3, #0
 8012158:	bfb8      	it	lt
 801215a:	f04f 33ff 	movlt.w	r3, #4294967295
 801215e:	9305      	str	r3, [sp, #20]
 8012160:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 801221c <_svfiprintf_r+0x1ec>
 8012164:	2203      	movs	r2, #3
 8012166:	4650      	mov	r0, sl
 8012168:	7821      	ldrb	r1, [r4, #0]
 801216a:	f000 fa1d 	bl	80125a8 <memchr>
 801216e:	b138      	cbz	r0, 8012180 <_svfiprintf_r+0x150>
 8012170:	2240      	movs	r2, #64	; 0x40
 8012172:	9b04      	ldr	r3, [sp, #16]
 8012174:	eba0 000a 	sub.w	r0, r0, sl
 8012178:	4082      	lsls	r2, r0
 801217a:	4313      	orrs	r3, r2
 801217c:	3401      	adds	r4, #1
 801217e:	9304      	str	r3, [sp, #16]
 8012180:	f814 1b01 	ldrb.w	r1, [r4], #1
 8012184:	2206      	movs	r2, #6
 8012186:	4826      	ldr	r0, [pc, #152]	; (8012220 <_svfiprintf_r+0x1f0>)
 8012188:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801218c:	f000 fa0c 	bl	80125a8 <memchr>
 8012190:	2800      	cmp	r0, #0
 8012192:	d038      	beq.n	8012206 <_svfiprintf_r+0x1d6>
 8012194:	4b23      	ldr	r3, [pc, #140]	; (8012224 <_svfiprintf_r+0x1f4>)
 8012196:	bb1b      	cbnz	r3, 80121e0 <_svfiprintf_r+0x1b0>
 8012198:	9b03      	ldr	r3, [sp, #12]
 801219a:	3307      	adds	r3, #7
 801219c:	f023 0307 	bic.w	r3, r3, #7
 80121a0:	3308      	adds	r3, #8
 80121a2:	9303      	str	r3, [sp, #12]
 80121a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80121a6:	4433      	add	r3, r6
 80121a8:	9309      	str	r3, [sp, #36]	; 0x24
 80121aa:	e768      	b.n	801207e <_svfiprintf_r+0x4e>
 80121ac:	460c      	mov	r4, r1
 80121ae:	2001      	movs	r0, #1
 80121b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80121b4:	e7a6      	b.n	8012104 <_svfiprintf_r+0xd4>
 80121b6:	2300      	movs	r3, #0
 80121b8:	f04f 0c0a 	mov.w	ip, #10
 80121bc:	4619      	mov	r1, r3
 80121be:	3401      	adds	r4, #1
 80121c0:	9305      	str	r3, [sp, #20]
 80121c2:	4620      	mov	r0, r4
 80121c4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80121c8:	3a30      	subs	r2, #48	; 0x30
 80121ca:	2a09      	cmp	r2, #9
 80121cc:	d903      	bls.n	80121d6 <_svfiprintf_r+0x1a6>
 80121ce:	2b00      	cmp	r3, #0
 80121d0:	d0c6      	beq.n	8012160 <_svfiprintf_r+0x130>
 80121d2:	9105      	str	r1, [sp, #20]
 80121d4:	e7c4      	b.n	8012160 <_svfiprintf_r+0x130>
 80121d6:	4604      	mov	r4, r0
 80121d8:	2301      	movs	r3, #1
 80121da:	fb0c 2101 	mla	r1, ip, r1, r2
 80121de:	e7f0      	b.n	80121c2 <_svfiprintf_r+0x192>
 80121e0:	ab03      	add	r3, sp, #12
 80121e2:	9300      	str	r3, [sp, #0]
 80121e4:	462a      	mov	r2, r5
 80121e6:	4638      	mov	r0, r7
 80121e8:	4b0f      	ldr	r3, [pc, #60]	; (8012228 <_svfiprintf_r+0x1f8>)
 80121ea:	a904      	add	r1, sp, #16
 80121ec:	f3af 8000 	nop.w
 80121f0:	1c42      	adds	r2, r0, #1
 80121f2:	4606      	mov	r6, r0
 80121f4:	d1d6      	bne.n	80121a4 <_svfiprintf_r+0x174>
 80121f6:	89ab      	ldrh	r3, [r5, #12]
 80121f8:	065b      	lsls	r3, r3, #25
 80121fa:	f53f af2d 	bmi.w	8012058 <_svfiprintf_r+0x28>
 80121fe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8012200:	b01d      	add	sp, #116	; 0x74
 8012202:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012206:	ab03      	add	r3, sp, #12
 8012208:	9300      	str	r3, [sp, #0]
 801220a:	462a      	mov	r2, r5
 801220c:	4638      	mov	r0, r7
 801220e:	4b06      	ldr	r3, [pc, #24]	; (8012228 <_svfiprintf_r+0x1f8>)
 8012210:	a904      	add	r1, sp, #16
 8012212:	f000 f87d 	bl	8012310 <_printf_i>
 8012216:	e7eb      	b.n	80121f0 <_svfiprintf_r+0x1c0>
 8012218:	08012c18 	.word	0x08012c18
 801221c:	08012c1e 	.word	0x08012c1e
 8012220:	08012c22 	.word	0x08012c22
 8012224:	00000000 	.word	0x00000000
 8012228:	08011f7d 	.word	0x08011f7d

0801222c <_printf_common>:
 801222c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012230:	4616      	mov	r6, r2
 8012232:	4699      	mov	r9, r3
 8012234:	688a      	ldr	r2, [r1, #8]
 8012236:	690b      	ldr	r3, [r1, #16]
 8012238:	4607      	mov	r7, r0
 801223a:	4293      	cmp	r3, r2
 801223c:	bfb8      	it	lt
 801223e:	4613      	movlt	r3, r2
 8012240:	6033      	str	r3, [r6, #0]
 8012242:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8012246:	460c      	mov	r4, r1
 8012248:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801224c:	b10a      	cbz	r2, 8012252 <_printf_common+0x26>
 801224e:	3301      	adds	r3, #1
 8012250:	6033      	str	r3, [r6, #0]
 8012252:	6823      	ldr	r3, [r4, #0]
 8012254:	0699      	lsls	r1, r3, #26
 8012256:	bf42      	ittt	mi
 8012258:	6833      	ldrmi	r3, [r6, #0]
 801225a:	3302      	addmi	r3, #2
 801225c:	6033      	strmi	r3, [r6, #0]
 801225e:	6825      	ldr	r5, [r4, #0]
 8012260:	f015 0506 	ands.w	r5, r5, #6
 8012264:	d106      	bne.n	8012274 <_printf_common+0x48>
 8012266:	f104 0a19 	add.w	sl, r4, #25
 801226a:	68e3      	ldr	r3, [r4, #12]
 801226c:	6832      	ldr	r2, [r6, #0]
 801226e:	1a9b      	subs	r3, r3, r2
 8012270:	42ab      	cmp	r3, r5
 8012272:	dc2b      	bgt.n	80122cc <_printf_common+0xa0>
 8012274:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012278:	1e13      	subs	r3, r2, #0
 801227a:	6822      	ldr	r2, [r4, #0]
 801227c:	bf18      	it	ne
 801227e:	2301      	movne	r3, #1
 8012280:	0692      	lsls	r2, r2, #26
 8012282:	d430      	bmi.n	80122e6 <_printf_common+0xba>
 8012284:	4649      	mov	r1, r9
 8012286:	4638      	mov	r0, r7
 8012288:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801228c:	47c0      	blx	r8
 801228e:	3001      	adds	r0, #1
 8012290:	d023      	beq.n	80122da <_printf_common+0xae>
 8012292:	6823      	ldr	r3, [r4, #0]
 8012294:	6922      	ldr	r2, [r4, #16]
 8012296:	f003 0306 	and.w	r3, r3, #6
 801229a:	2b04      	cmp	r3, #4
 801229c:	bf14      	ite	ne
 801229e:	2500      	movne	r5, #0
 80122a0:	6833      	ldreq	r3, [r6, #0]
 80122a2:	f04f 0600 	mov.w	r6, #0
 80122a6:	bf08      	it	eq
 80122a8:	68e5      	ldreq	r5, [r4, #12]
 80122aa:	f104 041a 	add.w	r4, r4, #26
 80122ae:	bf08      	it	eq
 80122b0:	1aed      	subeq	r5, r5, r3
 80122b2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80122b6:	bf08      	it	eq
 80122b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80122bc:	4293      	cmp	r3, r2
 80122be:	bfc4      	itt	gt
 80122c0:	1a9b      	subgt	r3, r3, r2
 80122c2:	18ed      	addgt	r5, r5, r3
 80122c4:	42b5      	cmp	r5, r6
 80122c6:	d11a      	bne.n	80122fe <_printf_common+0xd2>
 80122c8:	2000      	movs	r0, #0
 80122ca:	e008      	b.n	80122de <_printf_common+0xb2>
 80122cc:	2301      	movs	r3, #1
 80122ce:	4652      	mov	r2, sl
 80122d0:	4649      	mov	r1, r9
 80122d2:	4638      	mov	r0, r7
 80122d4:	47c0      	blx	r8
 80122d6:	3001      	adds	r0, #1
 80122d8:	d103      	bne.n	80122e2 <_printf_common+0xb6>
 80122da:	f04f 30ff 	mov.w	r0, #4294967295
 80122de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80122e2:	3501      	adds	r5, #1
 80122e4:	e7c1      	b.n	801226a <_printf_common+0x3e>
 80122e6:	2030      	movs	r0, #48	; 0x30
 80122e8:	18e1      	adds	r1, r4, r3
 80122ea:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80122ee:	1c5a      	adds	r2, r3, #1
 80122f0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80122f4:	4422      	add	r2, r4
 80122f6:	3302      	adds	r3, #2
 80122f8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80122fc:	e7c2      	b.n	8012284 <_printf_common+0x58>
 80122fe:	2301      	movs	r3, #1
 8012300:	4622      	mov	r2, r4
 8012302:	4649      	mov	r1, r9
 8012304:	4638      	mov	r0, r7
 8012306:	47c0      	blx	r8
 8012308:	3001      	adds	r0, #1
 801230a:	d0e6      	beq.n	80122da <_printf_common+0xae>
 801230c:	3601      	adds	r6, #1
 801230e:	e7d9      	b.n	80122c4 <_printf_common+0x98>

08012310 <_printf_i>:
 8012310:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012314:	7e0f      	ldrb	r7, [r1, #24]
 8012316:	4691      	mov	r9, r2
 8012318:	2f78      	cmp	r7, #120	; 0x78
 801231a:	4680      	mov	r8, r0
 801231c:	460c      	mov	r4, r1
 801231e:	469a      	mov	sl, r3
 8012320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8012322:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8012326:	d807      	bhi.n	8012338 <_printf_i+0x28>
 8012328:	2f62      	cmp	r7, #98	; 0x62
 801232a:	d80a      	bhi.n	8012342 <_printf_i+0x32>
 801232c:	2f00      	cmp	r7, #0
 801232e:	f000 80d5 	beq.w	80124dc <_printf_i+0x1cc>
 8012332:	2f58      	cmp	r7, #88	; 0x58
 8012334:	f000 80c1 	beq.w	80124ba <_printf_i+0x1aa>
 8012338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801233c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8012340:	e03a      	b.n	80123b8 <_printf_i+0xa8>
 8012342:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8012346:	2b15      	cmp	r3, #21
 8012348:	d8f6      	bhi.n	8012338 <_printf_i+0x28>
 801234a:	a101      	add	r1, pc, #4	; (adr r1, 8012350 <_printf_i+0x40>)
 801234c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012350:	080123a9 	.word	0x080123a9
 8012354:	080123bd 	.word	0x080123bd
 8012358:	08012339 	.word	0x08012339
 801235c:	08012339 	.word	0x08012339
 8012360:	08012339 	.word	0x08012339
 8012364:	08012339 	.word	0x08012339
 8012368:	080123bd 	.word	0x080123bd
 801236c:	08012339 	.word	0x08012339
 8012370:	08012339 	.word	0x08012339
 8012374:	08012339 	.word	0x08012339
 8012378:	08012339 	.word	0x08012339
 801237c:	080124c3 	.word	0x080124c3
 8012380:	080123e9 	.word	0x080123e9
 8012384:	0801247d 	.word	0x0801247d
 8012388:	08012339 	.word	0x08012339
 801238c:	08012339 	.word	0x08012339
 8012390:	080124e5 	.word	0x080124e5
 8012394:	08012339 	.word	0x08012339
 8012398:	080123e9 	.word	0x080123e9
 801239c:	08012339 	.word	0x08012339
 80123a0:	08012339 	.word	0x08012339
 80123a4:	08012485 	.word	0x08012485
 80123a8:	682b      	ldr	r3, [r5, #0]
 80123aa:	1d1a      	adds	r2, r3, #4
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	602a      	str	r2, [r5, #0]
 80123b0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80123b4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80123b8:	2301      	movs	r3, #1
 80123ba:	e0a0      	b.n	80124fe <_printf_i+0x1ee>
 80123bc:	6820      	ldr	r0, [r4, #0]
 80123be:	682b      	ldr	r3, [r5, #0]
 80123c0:	0607      	lsls	r7, r0, #24
 80123c2:	f103 0104 	add.w	r1, r3, #4
 80123c6:	6029      	str	r1, [r5, #0]
 80123c8:	d501      	bpl.n	80123ce <_printf_i+0xbe>
 80123ca:	681e      	ldr	r6, [r3, #0]
 80123cc:	e003      	b.n	80123d6 <_printf_i+0xc6>
 80123ce:	0646      	lsls	r6, r0, #25
 80123d0:	d5fb      	bpl.n	80123ca <_printf_i+0xba>
 80123d2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80123d6:	2e00      	cmp	r6, #0
 80123d8:	da03      	bge.n	80123e2 <_printf_i+0xd2>
 80123da:	232d      	movs	r3, #45	; 0x2d
 80123dc:	4276      	negs	r6, r6
 80123de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80123e2:	230a      	movs	r3, #10
 80123e4:	4859      	ldr	r0, [pc, #356]	; (801254c <_printf_i+0x23c>)
 80123e6:	e012      	b.n	801240e <_printf_i+0xfe>
 80123e8:	682b      	ldr	r3, [r5, #0]
 80123ea:	6820      	ldr	r0, [r4, #0]
 80123ec:	1d19      	adds	r1, r3, #4
 80123ee:	6029      	str	r1, [r5, #0]
 80123f0:	0605      	lsls	r5, r0, #24
 80123f2:	d501      	bpl.n	80123f8 <_printf_i+0xe8>
 80123f4:	681e      	ldr	r6, [r3, #0]
 80123f6:	e002      	b.n	80123fe <_printf_i+0xee>
 80123f8:	0641      	lsls	r1, r0, #25
 80123fa:	d5fb      	bpl.n	80123f4 <_printf_i+0xe4>
 80123fc:	881e      	ldrh	r6, [r3, #0]
 80123fe:	2f6f      	cmp	r7, #111	; 0x6f
 8012400:	bf0c      	ite	eq
 8012402:	2308      	moveq	r3, #8
 8012404:	230a      	movne	r3, #10
 8012406:	4851      	ldr	r0, [pc, #324]	; (801254c <_printf_i+0x23c>)
 8012408:	2100      	movs	r1, #0
 801240a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801240e:	6865      	ldr	r5, [r4, #4]
 8012410:	2d00      	cmp	r5, #0
 8012412:	bfa8      	it	ge
 8012414:	6821      	ldrge	r1, [r4, #0]
 8012416:	60a5      	str	r5, [r4, #8]
 8012418:	bfa4      	itt	ge
 801241a:	f021 0104 	bicge.w	r1, r1, #4
 801241e:	6021      	strge	r1, [r4, #0]
 8012420:	b90e      	cbnz	r6, 8012426 <_printf_i+0x116>
 8012422:	2d00      	cmp	r5, #0
 8012424:	d04b      	beq.n	80124be <_printf_i+0x1ae>
 8012426:	4615      	mov	r5, r2
 8012428:	fbb6 f1f3 	udiv	r1, r6, r3
 801242c:	fb03 6711 	mls	r7, r3, r1, r6
 8012430:	5dc7      	ldrb	r7, [r0, r7]
 8012432:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8012436:	4637      	mov	r7, r6
 8012438:	42bb      	cmp	r3, r7
 801243a:	460e      	mov	r6, r1
 801243c:	d9f4      	bls.n	8012428 <_printf_i+0x118>
 801243e:	2b08      	cmp	r3, #8
 8012440:	d10b      	bne.n	801245a <_printf_i+0x14a>
 8012442:	6823      	ldr	r3, [r4, #0]
 8012444:	07de      	lsls	r6, r3, #31
 8012446:	d508      	bpl.n	801245a <_printf_i+0x14a>
 8012448:	6923      	ldr	r3, [r4, #16]
 801244a:	6861      	ldr	r1, [r4, #4]
 801244c:	4299      	cmp	r1, r3
 801244e:	bfde      	ittt	le
 8012450:	2330      	movle	r3, #48	; 0x30
 8012452:	f805 3c01 	strble.w	r3, [r5, #-1]
 8012456:	f105 35ff 	addle.w	r5, r5, #4294967295
 801245a:	1b52      	subs	r2, r2, r5
 801245c:	6122      	str	r2, [r4, #16]
 801245e:	464b      	mov	r3, r9
 8012460:	4621      	mov	r1, r4
 8012462:	4640      	mov	r0, r8
 8012464:	f8cd a000 	str.w	sl, [sp]
 8012468:	aa03      	add	r2, sp, #12
 801246a:	f7ff fedf 	bl	801222c <_printf_common>
 801246e:	3001      	adds	r0, #1
 8012470:	d14a      	bne.n	8012508 <_printf_i+0x1f8>
 8012472:	f04f 30ff 	mov.w	r0, #4294967295
 8012476:	b004      	add	sp, #16
 8012478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801247c:	6823      	ldr	r3, [r4, #0]
 801247e:	f043 0320 	orr.w	r3, r3, #32
 8012482:	6023      	str	r3, [r4, #0]
 8012484:	2778      	movs	r7, #120	; 0x78
 8012486:	4832      	ldr	r0, [pc, #200]	; (8012550 <_printf_i+0x240>)
 8012488:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801248c:	6823      	ldr	r3, [r4, #0]
 801248e:	6829      	ldr	r1, [r5, #0]
 8012490:	061f      	lsls	r7, r3, #24
 8012492:	f851 6b04 	ldr.w	r6, [r1], #4
 8012496:	d402      	bmi.n	801249e <_printf_i+0x18e>
 8012498:	065f      	lsls	r7, r3, #25
 801249a:	bf48      	it	mi
 801249c:	b2b6      	uxthmi	r6, r6
 801249e:	07df      	lsls	r7, r3, #31
 80124a0:	bf48      	it	mi
 80124a2:	f043 0320 	orrmi.w	r3, r3, #32
 80124a6:	6029      	str	r1, [r5, #0]
 80124a8:	bf48      	it	mi
 80124aa:	6023      	strmi	r3, [r4, #0]
 80124ac:	b91e      	cbnz	r6, 80124b6 <_printf_i+0x1a6>
 80124ae:	6823      	ldr	r3, [r4, #0]
 80124b0:	f023 0320 	bic.w	r3, r3, #32
 80124b4:	6023      	str	r3, [r4, #0]
 80124b6:	2310      	movs	r3, #16
 80124b8:	e7a6      	b.n	8012408 <_printf_i+0xf8>
 80124ba:	4824      	ldr	r0, [pc, #144]	; (801254c <_printf_i+0x23c>)
 80124bc:	e7e4      	b.n	8012488 <_printf_i+0x178>
 80124be:	4615      	mov	r5, r2
 80124c0:	e7bd      	b.n	801243e <_printf_i+0x12e>
 80124c2:	682b      	ldr	r3, [r5, #0]
 80124c4:	6826      	ldr	r6, [r4, #0]
 80124c6:	1d18      	adds	r0, r3, #4
 80124c8:	6961      	ldr	r1, [r4, #20]
 80124ca:	6028      	str	r0, [r5, #0]
 80124cc:	0635      	lsls	r5, r6, #24
 80124ce:	681b      	ldr	r3, [r3, #0]
 80124d0:	d501      	bpl.n	80124d6 <_printf_i+0x1c6>
 80124d2:	6019      	str	r1, [r3, #0]
 80124d4:	e002      	b.n	80124dc <_printf_i+0x1cc>
 80124d6:	0670      	lsls	r0, r6, #25
 80124d8:	d5fb      	bpl.n	80124d2 <_printf_i+0x1c2>
 80124da:	8019      	strh	r1, [r3, #0]
 80124dc:	2300      	movs	r3, #0
 80124de:	4615      	mov	r5, r2
 80124e0:	6123      	str	r3, [r4, #16]
 80124e2:	e7bc      	b.n	801245e <_printf_i+0x14e>
 80124e4:	682b      	ldr	r3, [r5, #0]
 80124e6:	2100      	movs	r1, #0
 80124e8:	1d1a      	adds	r2, r3, #4
 80124ea:	602a      	str	r2, [r5, #0]
 80124ec:	681d      	ldr	r5, [r3, #0]
 80124ee:	6862      	ldr	r2, [r4, #4]
 80124f0:	4628      	mov	r0, r5
 80124f2:	f000 f859 	bl	80125a8 <memchr>
 80124f6:	b108      	cbz	r0, 80124fc <_printf_i+0x1ec>
 80124f8:	1b40      	subs	r0, r0, r5
 80124fa:	6060      	str	r0, [r4, #4]
 80124fc:	6863      	ldr	r3, [r4, #4]
 80124fe:	6123      	str	r3, [r4, #16]
 8012500:	2300      	movs	r3, #0
 8012502:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012506:	e7aa      	b.n	801245e <_printf_i+0x14e>
 8012508:	462a      	mov	r2, r5
 801250a:	4649      	mov	r1, r9
 801250c:	4640      	mov	r0, r8
 801250e:	6923      	ldr	r3, [r4, #16]
 8012510:	47d0      	blx	sl
 8012512:	3001      	adds	r0, #1
 8012514:	d0ad      	beq.n	8012472 <_printf_i+0x162>
 8012516:	6823      	ldr	r3, [r4, #0]
 8012518:	079b      	lsls	r3, r3, #30
 801251a:	d413      	bmi.n	8012544 <_printf_i+0x234>
 801251c:	68e0      	ldr	r0, [r4, #12]
 801251e:	9b03      	ldr	r3, [sp, #12]
 8012520:	4298      	cmp	r0, r3
 8012522:	bfb8      	it	lt
 8012524:	4618      	movlt	r0, r3
 8012526:	e7a6      	b.n	8012476 <_printf_i+0x166>
 8012528:	2301      	movs	r3, #1
 801252a:	4632      	mov	r2, r6
 801252c:	4649      	mov	r1, r9
 801252e:	4640      	mov	r0, r8
 8012530:	47d0      	blx	sl
 8012532:	3001      	adds	r0, #1
 8012534:	d09d      	beq.n	8012472 <_printf_i+0x162>
 8012536:	3501      	adds	r5, #1
 8012538:	68e3      	ldr	r3, [r4, #12]
 801253a:	9903      	ldr	r1, [sp, #12]
 801253c:	1a5b      	subs	r3, r3, r1
 801253e:	42ab      	cmp	r3, r5
 8012540:	dcf2      	bgt.n	8012528 <_printf_i+0x218>
 8012542:	e7eb      	b.n	801251c <_printf_i+0x20c>
 8012544:	2500      	movs	r5, #0
 8012546:	f104 0619 	add.w	r6, r4, #25
 801254a:	e7f5      	b.n	8012538 <_printf_i+0x228>
 801254c:	08012c29 	.word	0x08012c29
 8012550:	08012c3a 	.word	0x08012c3a

08012554 <memmove>:
 8012554:	4288      	cmp	r0, r1
 8012556:	b510      	push	{r4, lr}
 8012558:	eb01 0402 	add.w	r4, r1, r2
 801255c:	d902      	bls.n	8012564 <memmove+0x10>
 801255e:	4284      	cmp	r4, r0
 8012560:	4623      	mov	r3, r4
 8012562:	d807      	bhi.n	8012574 <memmove+0x20>
 8012564:	1e43      	subs	r3, r0, #1
 8012566:	42a1      	cmp	r1, r4
 8012568:	d008      	beq.n	801257c <memmove+0x28>
 801256a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801256e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012572:	e7f8      	b.n	8012566 <memmove+0x12>
 8012574:	4601      	mov	r1, r0
 8012576:	4402      	add	r2, r0
 8012578:	428a      	cmp	r2, r1
 801257a:	d100      	bne.n	801257e <memmove+0x2a>
 801257c:	bd10      	pop	{r4, pc}
 801257e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012582:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012586:	e7f7      	b.n	8012578 <memmove+0x24>

08012588 <_sbrk_r>:
 8012588:	b538      	push	{r3, r4, r5, lr}
 801258a:	2300      	movs	r3, #0
 801258c:	4d05      	ldr	r5, [pc, #20]	; (80125a4 <_sbrk_r+0x1c>)
 801258e:	4604      	mov	r4, r0
 8012590:	4608      	mov	r0, r1
 8012592:	602b      	str	r3, [r5, #0]
 8012594:	f7f2 f87e 	bl	8004694 <_sbrk>
 8012598:	1c43      	adds	r3, r0, #1
 801259a:	d102      	bne.n	80125a2 <_sbrk_r+0x1a>
 801259c:	682b      	ldr	r3, [r5, #0]
 801259e:	b103      	cbz	r3, 80125a2 <_sbrk_r+0x1a>
 80125a0:	6023      	str	r3, [r4, #0]
 80125a2:	bd38      	pop	{r3, r4, r5, pc}
 80125a4:	20002400 	.word	0x20002400

080125a8 <memchr>:
 80125a8:	4603      	mov	r3, r0
 80125aa:	b510      	push	{r4, lr}
 80125ac:	b2c9      	uxtb	r1, r1
 80125ae:	4402      	add	r2, r0
 80125b0:	4293      	cmp	r3, r2
 80125b2:	4618      	mov	r0, r3
 80125b4:	d101      	bne.n	80125ba <memchr+0x12>
 80125b6:	2000      	movs	r0, #0
 80125b8:	e003      	b.n	80125c2 <memchr+0x1a>
 80125ba:	7804      	ldrb	r4, [r0, #0]
 80125bc:	3301      	adds	r3, #1
 80125be:	428c      	cmp	r4, r1
 80125c0:	d1f6      	bne.n	80125b0 <memchr+0x8>
 80125c2:	bd10      	pop	{r4, pc}

080125c4 <_realloc_r>:
 80125c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125c8:	4680      	mov	r8, r0
 80125ca:	4614      	mov	r4, r2
 80125cc:	460e      	mov	r6, r1
 80125ce:	b921      	cbnz	r1, 80125da <_realloc_r+0x16>
 80125d0:	4611      	mov	r1, r2
 80125d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80125d6:	f7ff bc45 	b.w	8011e64 <_malloc_r>
 80125da:	b92a      	cbnz	r2, 80125e8 <_realloc_r+0x24>
 80125dc:	f7ff fbda 	bl	8011d94 <_free_r>
 80125e0:	4625      	mov	r5, r4
 80125e2:	4628      	mov	r0, r5
 80125e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80125e8:	f000 f81b 	bl	8012622 <_malloc_usable_size_r>
 80125ec:	4284      	cmp	r4, r0
 80125ee:	4607      	mov	r7, r0
 80125f0:	d802      	bhi.n	80125f8 <_realloc_r+0x34>
 80125f2:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80125f6:	d812      	bhi.n	801261e <_realloc_r+0x5a>
 80125f8:	4621      	mov	r1, r4
 80125fa:	4640      	mov	r0, r8
 80125fc:	f7ff fc32 	bl	8011e64 <_malloc_r>
 8012600:	4605      	mov	r5, r0
 8012602:	2800      	cmp	r0, #0
 8012604:	d0ed      	beq.n	80125e2 <_realloc_r+0x1e>
 8012606:	42bc      	cmp	r4, r7
 8012608:	4622      	mov	r2, r4
 801260a:	4631      	mov	r1, r6
 801260c:	bf28      	it	cs
 801260e:	463a      	movcs	r2, r7
 8012610:	f7ff fbb2 	bl	8011d78 <memcpy>
 8012614:	4631      	mov	r1, r6
 8012616:	4640      	mov	r0, r8
 8012618:	f7ff fbbc 	bl	8011d94 <_free_r>
 801261c:	e7e1      	b.n	80125e2 <_realloc_r+0x1e>
 801261e:	4635      	mov	r5, r6
 8012620:	e7df      	b.n	80125e2 <_realloc_r+0x1e>

08012622 <_malloc_usable_size_r>:
 8012622:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8012626:	1f18      	subs	r0, r3, #4
 8012628:	2b00      	cmp	r3, #0
 801262a:	bfbc      	itt	lt
 801262c:	580b      	ldrlt	r3, [r1, r0]
 801262e:	18c0      	addlt	r0, r0, r3
 8012630:	4770      	bx	lr
	...

08012634 <_init>:
 8012634:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012636:	bf00      	nop
 8012638:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801263a:	bc08      	pop	{r3}
 801263c:	469e      	mov	lr, r3
 801263e:	4770      	bx	lr

08012640 <_fini>:
 8012640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012642:	bf00      	nop
 8012644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8012646:	bc08      	pop	{r3}
 8012648:	469e      	mov	lr, r3
 801264a:	4770      	bx	lr
