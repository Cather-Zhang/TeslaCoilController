
L151_interrupter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000122ac  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  080123ec  080123ec  000223ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080129ec  080129ec  00030268  2**0
                  CONTENTS
  4 .ARM          00000008  080129ec  080129ec  000229ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080129f4  080129f4  00030268  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080129f4  080129f4  000229f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080129f8  080129f8  000229f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000268  20000000  080129fc  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000215c  20000268  08012c64  00030268  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200023c4  08012c64  000323c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00030268  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030291  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ccb4  00000000  00000000  000302d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049fb  00000000  00000000  0004cf88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000019e0  00000000  00000000  00051988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000013df  00000000  00000000  00053368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001a68e  00000000  00000000  00054747  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00024070  00000000  00000000  0006edd5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008c15b  00000000  00000000  00092e45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007274  00000000  00000000  0011efa0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000073  00000000  00000000  00126214  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000268 	.word	0x20000268
 800015c:	00000000 	.word	0x00000000
 8000160:	080123d4 	.word	0x080123d4

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000026c 	.word	0x2000026c
 800017c:	080123d4 	.word	0x080123d4

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__aeabi_d2iz>:
 800092c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000930:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000934:	d215      	bcs.n	8000962 <__aeabi_d2iz+0x36>
 8000936:	d511      	bpl.n	800095c <__aeabi_d2iz+0x30>
 8000938:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800093c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000940:	d912      	bls.n	8000968 <__aeabi_d2iz+0x3c>
 8000942:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000946:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800094a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800094e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000952:	fa23 f002 	lsr.w	r0, r3, r2
 8000956:	bf18      	it	ne
 8000958:	4240      	negne	r0, r0
 800095a:	4770      	bx	lr
 800095c:	f04f 0000 	mov.w	r0, #0
 8000960:	4770      	bx	lr
 8000962:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000966:	d105      	bne.n	8000974 <__aeabi_d2iz+0x48>
 8000968:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800096c:	bf08      	it	eq
 800096e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000972:	4770      	bx	lr
 8000974:	f04f 0000 	mov.w	r0, #0
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop

0800097c <__aeabi_frsub>:
 800097c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000980:	e002      	b.n	8000988 <__addsf3>
 8000982:	bf00      	nop

08000984 <__aeabi_fsub>:
 8000984:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000988 <__addsf3>:
 8000988:	0042      	lsls	r2, r0, #1
 800098a:	bf1f      	itttt	ne
 800098c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000990:	ea92 0f03 	teqne	r2, r3
 8000994:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000998:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800099c:	d06a      	beq.n	8000a74 <__addsf3+0xec>
 800099e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009a2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009a6:	bfc1      	itttt	gt
 80009a8:	18d2      	addgt	r2, r2, r3
 80009aa:	4041      	eorgt	r1, r0
 80009ac:	4048      	eorgt	r0, r1
 80009ae:	4041      	eorgt	r1, r0
 80009b0:	bfb8      	it	lt
 80009b2:	425b      	neglt	r3, r3
 80009b4:	2b19      	cmp	r3, #25
 80009b6:	bf88      	it	hi
 80009b8:	4770      	bxhi	lr
 80009ba:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 80009be:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009c2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ce:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80009d2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4249      	negne	r1, r1
 80009da:	ea92 0f03 	teq	r2, r3
 80009de:	d03f      	beq.n	8000a60 <__addsf3+0xd8>
 80009e0:	f1a2 0201 	sub.w	r2, r2, #1
 80009e4:	fa41 fc03 	asr.w	ip, r1, r3
 80009e8:	eb10 000c 	adds.w	r0, r0, ip
 80009ec:	f1c3 0320 	rsb	r3, r3, #32
 80009f0:	fa01 f103 	lsl.w	r1, r1, r3
 80009f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80009f8:	d502      	bpl.n	8000a00 <__addsf3+0x78>
 80009fa:	4249      	negs	r1, r1
 80009fc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a00:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000a04:	d313      	bcc.n	8000a2e <__addsf3+0xa6>
 8000a06:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000a0a:	d306      	bcc.n	8000a1a <__addsf3+0x92>
 8000a0c:	0840      	lsrs	r0, r0, #1
 8000a0e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a12:	f102 0201 	add.w	r2, r2, #1
 8000a16:	2afe      	cmp	r2, #254	; 0xfe
 8000a18:	d251      	bcs.n	8000abe <__addsf3+0x136>
 8000a1a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000a1e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a22:	bf08      	it	eq
 8000a24:	f020 0001 	biceq.w	r0, r0, #1
 8000a28:	ea40 0003 	orr.w	r0, r0, r3
 8000a2c:	4770      	bx	lr
 8000a2e:	0049      	lsls	r1, r1, #1
 8000a30:	eb40 0000 	adc.w	r0, r0, r0
 8000a34:	3a01      	subs	r2, #1
 8000a36:	bf28      	it	cs
 8000a38:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000a3c:	d2ed      	bcs.n	8000a1a <__addsf3+0x92>
 8000a3e:	fab0 fc80 	clz	ip, r0
 8000a42:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a46:	ebb2 020c 	subs.w	r2, r2, ip
 8000a4a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a4e:	bfaa      	itet	ge
 8000a50:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a54:	4252      	neglt	r2, r2
 8000a56:	4318      	orrge	r0, r3
 8000a58:	bfbc      	itt	lt
 8000a5a:	40d0      	lsrlt	r0, r2
 8000a5c:	4318      	orrlt	r0, r3
 8000a5e:	4770      	bx	lr
 8000a60:	f092 0f00 	teq	r2, #0
 8000a64:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000a68:	bf06      	itte	eq
 8000a6a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000a6e:	3201      	addeq	r2, #1
 8000a70:	3b01      	subne	r3, #1
 8000a72:	e7b5      	b.n	80009e0 <__addsf3+0x58>
 8000a74:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a78:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a7c:	bf18      	it	ne
 8000a7e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a82:	d021      	beq.n	8000ac8 <__addsf3+0x140>
 8000a84:	ea92 0f03 	teq	r2, r3
 8000a88:	d004      	beq.n	8000a94 <__addsf3+0x10c>
 8000a8a:	f092 0f00 	teq	r2, #0
 8000a8e:	bf08      	it	eq
 8000a90:	4608      	moveq	r0, r1
 8000a92:	4770      	bx	lr
 8000a94:	ea90 0f01 	teq	r0, r1
 8000a98:	bf1c      	itt	ne
 8000a9a:	2000      	movne	r0, #0
 8000a9c:	4770      	bxne	lr
 8000a9e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000aa2:	d104      	bne.n	8000aae <__addsf3+0x126>
 8000aa4:	0040      	lsls	r0, r0, #1
 8000aa6:	bf28      	it	cs
 8000aa8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000aac:	4770      	bx	lr
 8000aae:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000ab2:	bf3c      	itt	cc
 8000ab4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ab8:	4770      	bxcc	lr
 8000aba:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000abe:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000ac2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac6:	4770      	bx	lr
 8000ac8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000acc:	bf16      	itet	ne
 8000ace:	4608      	movne	r0, r1
 8000ad0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ad4:	4601      	movne	r1, r0
 8000ad6:	0242      	lsls	r2, r0, #9
 8000ad8:	bf06      	itte	eq
 8000ada:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000ade:	ea90 0f01 	teqeq	r0, r1
 8000ae2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000ae6:	4770      	bx	lr

08000ae8 <__aeabi_ui2f>:
 8000ae8:	f04f 0300 	mov.w	r3, #0
 8000aec:	e004      	b.n	8000af8 <__aeabi_i2f+0x8>
 8000aee:	bf00      	nop

08000af0 <__aeabi_i2f>:
 8000af0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000af4:	bf48      	it	mi
 8000af6:	4240      	negmi	r0, r0
 8000af8:	ea5f 0c00 	movs.w	ip, r0
 8000afc:	bf08      	it	eq
 8000afe:	4770      	bxeq	lr
 8000b00:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000b04:	4601      	mov	r1, r0
 8000b06:	f04f 0000 	mov.w	r0, #0
 8000b0a:	e01c      	b.n	8000b46 <__aeabi_l2f+0x2a>

08000b0c <__aeabi_ul2f>:
 8000b0c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b10:	bf08      	it	eq
 8000b12:	4770      	bxeq	lr
 8000b14:	f04f 0300 	mov.w	r3, #0
 8000b18:	e00a      	b.n	8000b30 <__aeabi_l2f+0x14>
 8000b1a:	bf00      	nop

08000b1c <__aeabi_l2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000b28:	d502      	bpl.n	8000b30 <__aeabi_l2f+0x14>
 8000b2a:	4240      	negs	r0, r0
 8000b2c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b30:	ea5f 0c01 	movs.w	ip, r1
 8000b34:	bf02      	ittt	eq
 8000b36:	4684      	moveq	ip, r0
 8000b38:	4601      	moveq	r1, r0
 8000b3a:	2000      	moveq	r0, #0
 8000b3c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000b40:	bf08      	it	eq
 8000b42:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000b46:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000b4a:	fabc f28c 	clz	r2, ip
 8000b4e:	3a08      	subs	r2, #8
 8000b50:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b54:	db10      	blt.n	8000b78 <__aeabi_l2f+0x5c>
 8000b56:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b5a:	4463      	add	r3, ip
 8000b5c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b60:	f1c2 0220 	rsb	r2, r2, #32
 8000b64:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000b68:	fa20 f202 	lsr.w	r2, r0, r2
 8000b6c:	eb43 0002 	adc.w	r0, r3, r2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f102 0220 	add.w	r2, r2, #32
 8000b7c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b80:	f1c2 0220 	rsb	r2, r2, #32
 8000b84:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b88:	fa21 f202 	lsr.w	r2, r1, r2
 8000b8c:	eb43 0002 	adc.w	r0, r3, r2
 8000b90:	bf08      	it	eq
 8000b92:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_fmul>:
 8000b98:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000b9c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ba0:	bf1e      	ittt	ne
 8000ba2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ba6:	ea92 0f0c 	teqne	r2, ip
 8000baa:	ea93 0f0c 	teqne	r3, ip
 8000bae:	d06f      	beq.n	8000c90 <__aeabi_fmul+0xf8>
 8000bb0:	441a      	add	r2, r3
 8000bb2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bb6:	0240      	lsls	r0, r0, #9
 8000bb8:	bf18      	it	ne
 8000bba:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bbe:	d01e      	beq.n	8000bfe <__aeabi_fmul+0x66>
 8000bc0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000bc4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bc8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bcc:	fba0 3101 	umull	r3, r1, r0, r1
 8000bd0:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000bd4:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000bd8:	bf3e      	ittt	cc
 8000bda:	0049      	lslcc	r1, r1, #1
 8000bdc:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000be0:	005b      	lslcc	r3, r3, #1
 8000be2:	ea40 0001 	orr.w	r0, r0, r1
 8000be6:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000bea:	2afd      	cmp	r2, #253	; 0xfd
 8000bec:	d81d      	bhi.n	8000c2a <__aeabi_fmul+0x92>
 8000bee:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	4770      	bx	lr
 8000bfe:	f090 0f00 	teq	r0, #0
 8000c02:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000c06:	bf08      	it	eq
 8000c08:	0249      	lsleq	r1, r1, #9
 8000c0a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c0e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c12:	3a7f      	subs	r2, #127	; 0x7f
 8000c14:	bfc2      	ittt	gt
 8000c16:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000c1a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c1e:	4770      	bxgt	lr
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	f04f 0300 	mov.w	r3, #0
 8000c28:	3a01      	subs	r2, #1
 8000c2a:	dc5d      	bgt.n	8000ce8 <__aeabi_fmul+0x150>
 8000c2c:	f112 0f19 	cmn.w	r2, #25
 8000c30:	bfdc      	itt	le
 8000c32:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000c36:	4770      	bxle	lr
 8000c38:	f1c2 0200 	rsb	r2, r2, #0
 8000c3c:	0041      	lsls	r1, r0, #1
 8000c3e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c42:	f1c2 0220 	rsb	r2, r2, #32
 8000c46:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c4a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c4e:	f140 0000 	adc.w	r0, r0, #0
 8000c52:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c56:	bf08      	it	eq
 8000c58:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c5c:	4770      	bx	lr
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000c66:	bf02      	ittt	eq
 8000c68:	0040      	lsleq	r0, r0, #1
 8000c6a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000c6e:	3a01      	subeq	r2, #1
 8000c70:	d0f9      	beq.n	8000c66 <__aeabi_fmul+0xce>
 8000c72:	ea40 000c 	orr.w	r0, r0, ip
 8000c76:	f093 0f00 	teq	r3, #0
 8000c7a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c7e:	bf02      	ittt	eq
 8000c80:	0049      	lsleq	r1, r1, #1
 8000c82:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000c86:	3b01      	subeq	r3, #1
 8000c88:	d0f9      	beq.n	8000c7e <__aeabi_fmul+0xe6>
 8000c8a:	ea41 010c 	orr.w	r1, r1, ip
 8000c8e:	e78f      	b.n	8000bb0 <__aeabi_fmul+0x18>
 8000c90:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000c94:	ea92 0f0c 	teq	r2, ip
 8000c98:	bf18      	it	ne
 8000c9a:	ea93 0f0c 	teqne	r3, ip
 8000c9e:	d00a      	beq.n	8000cb6 <__aeabi_fmul+0x11e>
 8000ca0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ca4:	bf18      	it	ne
 8000ca6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000caa:	d1d8      	bne.n	8000c5e <__aeabi_fmul+0xc6>
 8000cac:	ea80 0001 	eor.w	r0, r0, r1
 8000cb0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cb4:	4770      	bx	lr
 8000cb6:	f090 0f00 	teq	r0, #0
 8000cba:	bf17      	itett	ne
 8000cbc:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000cc0:	4608      	moveq	r0, r1
 8000cc2:	f091 0f00 	teqne	r1, #0
 8000cc6:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000cca:	d014      	beq.n	8000cf6 <__aeabi_fmul+0x15e>
 8000ccc:	ea92 0f0c 	teq	r2, ip
 8000cd0:	d101      	bne.n	8000cd6 <__aeabi_fmul+0x13e>
 8000cd2:	0242      	lsls	r2, r0, #9
 8000cd4:	d10f      	bne.n	8000cf6 <__aeabi_fmul+0x15e>
 8000cd6:	ea93 0f0c 	teq	r3, ip
 8000cda:	d103      	bne.n	8000ce4 <__aeabi_fmul+0x14c>
 8000cdc:	024b      	lsls	r3, r1, #9
 8000cde:	bf18      	it	ne
 8000ce0:	4608      	movne	r0, r1
 8000ce2:	d108      	bne.n	8000cf6 <__aeabi_fmul+0x15e>
 8000ce4:	ea80 0001 	eor.w	r0, r0, r1
 8000ce8:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000cec:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cf0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cf4:	4770      	bx	lr
 8000cf6:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cfa:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000cfe:	4770      	bx	lr

08000d00 <__aeabi_fdiv>:
 8000d00:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d04:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d08:	bf1e      	ittt	ne
 8000d0a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d0e:	ea92 0f0c 	teqne	r2, ip
 8000d12:	ea93 0f0c 	teqne	r3, ip
 8000d16:	d069      	beq.n	8000dec <__aeabi_fdiv+0xec>
 8000d18:	eba2 0203 	sub.w	r2, r2, r3
 8000d1c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d20:	0249      	lsls	r1, r1, #9
 8000d22:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d26:	d037      	beq.n	8000d98 <__aeabi_fdiv+0x98>
 8000d28:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000d2c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d30:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d34:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d38:	428b      	cmp	r3, r1
 8000d3a:	bf38      	it	cc
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000d42:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000d46:	428b      	cmp	r3, r1
 8000d48:	bf24      	itt	cs
 8000d4a:	1a5b      	subcs	r3, r3, r1
 8000d4c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d50:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d54:	bf24      	itt	cs
 8000d56:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d5a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d5e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d62:	bf24      	itt	cs
 8000d64:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d68:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d6c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d70:	bf24      	itt	cs
 8000d72:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d76:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d7a:	011b      	lsls	r3, r3, #4
 8000d7c:	bf18      	it	ne
 8000d7e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d82:	d1e0      	bne.n	8000d46 <__aeabi_fdiv+0x46>
 8000d84:	2afd      	cmp	r2, #253	; 0xfd
 8000d86:	f63f af50 	bhi.w	8000c2a <__aeabi_fmul+0x92>
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d90:	bf08      	it	eq
 8000d92:	f020 0001 	biceq.w	r0, r0, #1
 8000d96:	4770      	bx	lr
 8000d98:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d9c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000da0:	327f      	adds	r2, #127	; 0x7f
 8000da2:	bfc2      	ittt	gt
 8000da4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000da8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dac:	4770      	bxgt	lr
 8000dae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000db2:	f04f 0300 	mov.w	r3, #0
 8000db6:	3a01      	subs	r2, #1
 8000db8:	e737      	b.n	8000c2a <__aeabi_fmul+0x92>
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fdiv+0xc2>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fdiv+0xda>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e795      	b.n	8000d18 <__aeabi_fdiv+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	d108      	bne.n	8000e08 <__aeabi_fdiv+0x108>
 8000df6:	0242      	lsls	r2, r0, #9
 8000df8:	f47f af7d 	bne.w	8000cf6 <__aeabi_fmul+0x15e>
 8000dfc:	ea93 0f0c 	teq	r3, ip
 8000e00:	f47f af70 	bne.w	8000ce4 <__aeabi_fmul+0x14c>
 8000e04:	4608      	mov	r0, r1
 8000e06:	e776      	b.n	8000cf6 <__aeabi_fmul+0x15e>
 8000e08:	ea93 0f0c 	teq	r3, ip
 8000e0c:	d104      	bne.n	8000e18 <__aeabi_fdiv+0x118>
 8000e0e:	024b      	lsls	r3, r1, #9
 8000e10:	f43f af4c 	beq.w	8000cac <__aeabi_fmul+0x114>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e76e      	b.n	8000cf6 <__aeabi_fmul+0x15e>
 8000e18:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e1c:	bf18      	it	ne
 8000e1e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e22:	d1ca      	bne.n	8000dba <__aeabi_fdiv+0xba>
 8000e24:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000e28:	f47f af5c 	bne.w	8000ce4 <__aeabi_fmul+0x14c>
 8000e2c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000e30:	f47f af3c 	bne.w	8000cac <__aeabi_fmul+0x114>
 8000e34:	e75f      	b.n	8000cf6 <__aeabi_fmul+0x15e>
 8000e36:	bf00      	nop

08000e38 <__aeabi_f2uiz>:
 8000e38:	0042      	lsls	r2, r0, #1
 8000e3a:	d20e      	bcs.n	8000e5a <__aeabi_f2uiz+0x22>
 8000e3c:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e40:	d30b      	bcc.n	8000e5a <__aeabi_f2uiz+0x22>
 8000e42:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e46:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e4a:	d409      	bmi.n	8000e60 <__aeabi_f2uiz+0x28>
 8000e4c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e50:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e54:	fa23 f002 	lsr.w	r0, r3, r2
 8000e58:	4770      	bx	lr
 8000e5a:	f04f 0000 	mov.w	r0, #0
 8000e5e:	4770      	bx	lr
 8000e60:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e64:	d101      	bne.n	8000e6a <__aeabi_f2uiz+0x32>
 8000e66:	0242      	lsls	r2, r0, #9
 8000e68:	d102      	bne.n	8000e70 <__aeabi_f2uiz+0x38>
 8000e6a:	f04f 30ff 	mov.w	r0, #4294967295
 8000e6e:	4770      	bx	lr
 8000e70:	f04f 0000 	mov.w	r0, #0
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <__aeabi_uldivmod>:
 8000e78:	b953      	cbnz	r3, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7a:	b94a      	cbnz	r2, 8000e90 <__aeabi_uldivmod+0x18>
 8000e7c:	2900      	cmp	r1, #0
 8000e7e:	bf08      	it	eq
 8000e80:	2800      	cmpeq	r0, #0
 8000e82:	bf1c      	itt	ne
 8000e84:	f04f 31ff 	movne.w	r1, #4294967295
 8000e88:	f04f 30ff 	movne.w	r0, #4294967295
 8000e8c:	f000 b972 	b.w	8001174 <__aeabi_idiv0>
 8000e90:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e94:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e98:	f000 f806 	bl	8000ea8 <__udivmoddi4>
 8000e9c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ea0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ea4:	b004      	add	sp, #16
 8000ea6:	4770      	bx	lr

08000ea8 <__udivmoddi4>:
 8000ea8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000eac:	9e08      	ldr	r6, [sp, #32]
 8000eae:	460d      	mov	r5, r1
 8000eb0:	4604      	mov	r4, r0
 8000eb2:	468e      	mov	lr, r1
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d14c      	bne.n	8000f52 <__udivmoddi4+0xaa>
 8000eb8:	428a      	cmp	r2, r1
 8000eba:	4694      	mov	ip, r2
 8000ebc:	d967      	bls.n	8000f8e <__udivmoddi4+0xe6>
 8000ebe:	fab2 f382 	clz	r3, r2
 8000ec2:	b153      	cbz	r3, 8000eda <__udivmoddi4+0x32>
 8000ec4:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ec8:	f1c3 0220 	rsb	r2, r3, #32
 8000ecc:	fa01 fe03 	lsl.w	lr, r1, r3
 8000ed0:	fa20 f202 	lsr.w	r2, r0, r2
 8000ed4:	ea42 0e0e 	orr.w	lr, r2, lr
 8000ed8:	409c      	lsls	r4, r3
 8000eda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ede:	fbbe f1f7 	udiv	r1, lr, r7
 8000ee2:	fa1f f58c 	uxth.w	r5, ip
 8000ee6:	fb07 ee11 	mls	lr, r7, r1, lr
 8000eea:	fb01 f005 	mul.w	r0, r1, r5
 8000eee:	0c22      	lsrs	r2, r4, #16
 8000ef0:	ea42 420e 	orr.w	r2, r2, lr, lsl #16
 8000ef4:	4290      	cmp	r0, r2
 8000ef6:	d90a      	bls.n	8000f0e <__udivmoddi4+0x66>
 8000ef8:	eb1c 0202 	adds.w	r2, ip, r2
 8000efc:	f101 3eff 	add.w	lr, r1, #4294967295
 8000f00:	f080 8119 	bcs.w	8001136 <__udivmoddi4+0x28e>
 8000f04:	4290      	cmp	r0, r2
 8000f06:	f240 8116 	bls.w	8001136 <__udivmoddi4+0x28e>
 8000f0a:	3902      	subs	r1, #2
 8000f0c:	4462      	add	r2, ip
 8000f0e:	1a12      	subs	r2, r2, r0
 8000f10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000f14:	fb07 2210 	mls	r2, r7, r0, r2
 8000f18:	fb00 f505 	mul.w	r5, r0, r5
 8000f1c:	b2a4      	uxth	r4, r4
 8000f1e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000f22:	42a5      	cmp	r5, r4
 8000f24:	d90a      	bls.n	8000f3c <__udivmoddi4+0x94>
 8000f26:	eb1c 0404 	adds.w	r4, ip, r4
 8000f2a:	f100 32ff 	add.w	r2, r0, #4294967295
 8000f2e:	f080 8104 	bcs.w	800113a <__udivmoddi4+0x292>
 8000f32:	42a5      	cmp	r5, r4
 8000f34:	f240 8101 	bls.w	800113a <__udivmoddi4+0x292>
 8000f38:	4464      	add	r4, ip
 8000f3a:	3802      	subs	r0, #2
 8000f3c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000f40:	2100      	movs	r1, #0
 8000f42:	1b64      	subs	r4, r4, r5
 8000f44:	b11e      	cbz	r6, 8000f4e <__udivmoddi4+0xa6>
 8000f46:	40dc      	lsrs	r4, r3
 8000f48:	2300      	movs	r3, #0
 8000f4a:	e9c6 4300 	strd	r4, r3, [r6]
 8000f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f52:	428b      	cmp	r3, r1
 8000f54:	d908      	bls.n	8000f68 <__udivmoddi4+0xc0>
 8000f56:	2e00      	cmp	r6, #0
 8000f58:	f000 80ea 	beq.w	8001130 <__udivmoddi4+0x288>
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	e9c6 0500 	strd	r0, r5, [r6]
 8000f62:	4608      	mov	r0, r1
 8000f64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f68:	fab3 f183 	clz	r1, r3
 8000f6c:	2900      	cmp	r1, #0
 8000f6e:	d148      	bne.n	8001002 <__udivmoddi4+0x15a>
 8000f70:	42ab      	cmp	r3, r5
 8000f72:	d302      	bcc.n	8000f7a <__udivmoddi4+0xd2>
 8000f74:	4282      	cmp	r2, r0
 8000f76:	f200 80f8 	bhi.w	800116a <__udivmoddi4+0x2c2>
 8000f7a:	1a84      	subs	r4, r0, r2
 8000f7c:	eb65 0203 	sbc.w	r2, r5, r3
 8000f80:	2001      	movs	r0, #1
 8000f82:	4696      	mov	lr, r2
 8000f84:	2e00      	cmp	r6, #0
 8000f86:	d0e2      	beq.n	8000f4e <__udivmoddi4+0xa6>
 8000f88:	e9c6 4e00 	strd	r4, lr, [r6]
 8000f8c:	e7df      	b.n	8000f4e <__udivmoddi4+0xa6>
 8000f8e:	b902      	cbnz	r2, 8000f92 <__udivmoddi4+0xea>
 8000f90:	deff      	udf	#255	; 0xff
 8000f92:	fab2 f382 	clz	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	f040 808e 	bne.w	80010b8 <__udivmoddi4+0x210>
 8000f9c:	1a88      	subs	r0, r1, r2
 8000f9e:	2101      	movs	r1, #1
 8000fa0:	0c17      	lsrs	r7, r2, #16
 8000fa2:	fa1f fe82 	uxth.w	lr, r2
 8000fa6:	fbb0 f5f7 	udiv	r5, r0, r7
 8000faa:	fb07 0015 	mls	r0, r7, r5, r0
 8000fae:	0c22      	lsrs	r2, r4, #16
 8000fb0:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000fb4:	fb0e f005 	mul.w	r0, lr, r5
 8000fb8:	4290      	cmp	r0, r2
 8000fba:	d908      	bls.n	8000fce <__udivmoddi4+0x126>
 8000fbc:	eb1c 0202 	adds.w	r2, ip, r2
 8000fc0:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fc4:	d202      	bcs.n	8000fcc <__udivmoddi4+0x124>
 8000fc6:	4290      	cmp	r0, r2
 8000fc8:	f200 80cc 	bhi.w	8001164 <__udivmoddi4+0x2bc>
 8000fcc:	4645      	mov	r5, r8
 8000fce:	1a12      	subs	r2, r2, r0
 8000fd0:	fbb2 f0f7 	udiv	r0, r2, r7
 8000fd4:	fb07 2210 	mls	r2, r7, r0, r2
 8000fd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000fdc:	b2a4      	uxth	r4, r4
 8000fde:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000fe2:	45a6      	cmp	lr, r4
 8000fe4:	d908      	bls.n	8000ff8 <__udivmoddi4+0x150>
 8000fe6:	eb1c 0404 	adds.w	r4, ip, r4
 8000fea:	f100 32ff 	add.w	r2, r0, #4294967295
 8000fee:	d202      	bcs.n	8000ff6 <__udivmoddi4+0x14e>
 8000ff0:	45a6      	cmp	lr, r4
 8000ff2:	f200 80b4 	bhi.w	800115e <__udivmoddi4+0x2b6>
 8000ff6:	4610      	mov	r0, r2
 8000ff8:	eba4 040e 	sub.w	r4, r4, lr
 8000ffc:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8001000:	e7a0      	b.n	8000f44 <__udivmoddi4+0x9c>
 8001002:	f1c1 0720 	rsb	r7, r1, #32
 8001006:	408b      	lsls	r3, r1
 8001008:	fa22 fc07 	lsr.w	ip, r2, r7
 800100c:	ea4c 0c03 	orr.w	ip, ip, r3
 8001010:	fa25 fa07 	lsr.w	sl, r5, r7
 8001014:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8001018:	fbba f8f9 	udiv	r8, sl, r9
 800101c:	408d      	lsls	r5, r1
 800101e:	fa20 f307 	lsr.w	r3, r0, r7
 8001022:	fb09 aa18 	mls	sl, r9, r8, sl
 8001026:	fa1f fe8c 	uxth.w	lr, ip
 800102a:	432b      	orrs	r3, r5
 800102c:	fa00 f501 	lsl.w	r5, r0, r1
 8001030:	fb08 f00e 	mul.w	r0, r8, lr
 8001034:	0c1c      	lsrs	r4, r3, #16
 8001036:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800103a:	42a0      	cmp	r0, r4
 800103c:	fa02 f201 	lsl.w	r2, r2, r1
 8001040:	d90b      	bls.n	800105a <__udivmoddi4+0x1b2>
 8001042:	eb1c 0404 	adds.w	r4, ip, r4
 8001046:	f108 3aff 	add.w	sl, r8, #4294967295
 800104a:	f080 8086 	bcs.w	800115a <__udivmoddi4+0x2b2>
 800104e:	42a0      	cmp	r0, r4
 8001050:	f240 8083 	bls.w	800115a <__udivmoddi4+0x2b2>
 8001054:	f1a8 0802 	sub.w	r8, r8, #2
 8001058:	4464      	add	r4, ip
 800105a:	1a24      	subs	r4, r4, r0
 800105c:	b298      	uxth	r0, r3
 800105e:	fbb4 f3f9 	udiv	r3, r4, r9
 8001062:	fb09 4413 	mls	r4, r9, r3, r4
 8001066:	fb03 fe0e 	mul.w	lr, r3, lr
 800106a:	ea40 4404 	orr.w	r4, r0, r4, lsl #16
 800106e:	45a6      	cmp	lr, r4
 8001070:	d908      	bls.n	8001084 <__udivmoddi4+0x1dc>
 8001072:	eb1c 0404 	adds.w	r4, ip, r4
 8001076:	f103 30ff 	add.w	r0, r3, #4294967295
 800107a:	d26a      	bcs.n	8001152 <__udivmoddi4+0x2aa>
 800107c:	45a6      	cmp	lr, r4
 800107e:	d968      	bls.n	8001152 <__udivmoddi4+0x2aa>
 8001080:	3b02      	subs	r3, #2
 8001082:	4464      	add	r4, ip
 8001084:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8001088:	fba0 9302 	umull	r9, r3, r0, r2
 800108c:	eba4 040e 	sub.w	r4, r4, lr
 8001090:	429c      	cmp	r4, r3
 8001092:	46c8      	mov	r8, r9
 8001094:	469e      	mov	lr, r3
 8001096:	d354      	bcc.n	8001142 <__udivmoddi4+0x29a>
 8001098:	d051      	beq.n	800113e <__udivmoddi4+0x296>
 800109a:	2e00      	cmp	r6, #0
 800109c:	d067      	beq.n	800116e <__udivmoddi4+0x2c6>
 800109e:	ebb5 0308 	subs.w	r3, r5, r8
 80010a2:	eb64 040e 	sbc.w	r4, r4, lr
 80010a6:	40cb      	lsrs	r3, r1
 80010a8:	fa04 f707 	lsl.w	r7, r4, r7
 80010ac:	431f      	orrs	r7, r3
 80010ae:	40cc      	lsrs	r4, r1
 80010b0:	e9c6 7400 	strd	r7, r4, [r6]
 80010b4:	2100      	movs	r1, #0
 80010b6:	e74a      	b.n	8000f4e <__udivmoddi4+0xa6>
 80010b8:	fa02 fc03 	lsl.w	ip, r2, r3
 80010bc:	f1c3 0020 	rsb	r0, r3, #32
 80010c0:	40c1      	lsrs	r1, r0
 80010c2:	409d      	lsls	r5, r3
 80010c4:	fa24 f000 	lsr.w	r0, r4, r0
 80010c8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80010cc:	4328      	orrs	r0, r5
 80010ce:	fbb1 f5f7 	udiv	r5, r1, r7
 80010d2:	fb07 1115 	mls	r1, r7, r5, r1
 80010d6:	fa1f fe8c 	uxth.w	lr, ip
 80010da:	0c02      	lsrs	r2, r0, #16
 80010dc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80010e0:	fb05 f10e 	mul.w	r1, r5, lr
 80010e4:	4291      	cmp	r1, r2
 80010e6:	fa04 f403 	lsl.w	r4, r4, r3
 80010ea:	d908      	bls.n	80010fe <__udivmoddi4+0x256>
 80010ec:	eb1c 0202 	adds.w	r2, ip, r2
 80010f0:	f105 38ff 	add.w	r8, r5, #4294967295
 80010f4:	d22f      	bcs.n	8001156 <__udivmoddi4+0x2ae>
 80010f6:	4291      	cmp	r1, r2
 80010f8:	d92d      	bls.n	8001156 <__udivmoddi4+0x2ae>
 80010fa:	3d02      	subs	r5, #2
 80010fc:	4462      	add	r2, ip
 80010fe:	1a52      	subs	r2, r2, r1
 8001100:	fbb2 f1f7 	udiv	r1, r2, r7
 8001104:	fb07 2211 	mls	r2, r7, r1, r2
 8001108:	b280      	uxth	r0, r0
 800110a:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 800110e:	fb01 f20e 	mul.w	r2, r1, lr
 8001112:	4282      	cmp	r2, r0
 8001114:	d908      	bls.n	8001128 <__udivmoddi4+0x280>
 8001116:	eb1c 0000 	adds.w	r0, ip, r0
 800111a:	f101 38ff 	add.w	r8, r1, #4294967295
 800111e:	d216      	bcs.n	800114e <__udivmoddi4+0x2a6>
 8001120:	4282      	cmp	r2, r0
 8001122:	d914      	bls.n	800114e <__udivmoddi4+0x2a6>
 8001124:	3902      	subs	r1, #2
 8001126:	4460      	add	r0, ip
 8001128:	1a80      	subs	r0, r0, r2
 800112a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800112e:	e73a      	b.n	8000fa6 <__udivmoddi4+0xfe>
 8001130:	4631      	mov	r1, r6
 8001132:	4630      	mov	r0, r6
 8001134:	e70b      	b.n	8000f4e <__udivmoddi4+0xa6>
 8001136:	4671      	mov	r1, lr
 8001138:	e6e9      	b.n	8000f0e <__udivmoddi4+0x66>
 800113a:	4610      	mov	r0, r2
 800113c:	e6fe      	b.n	8000f3c <__udivmoddi4+0x94>
 800113e:	454d      	cmp	r5, r9
 8001140:	d2ab      	bcs.n	800109a <__udivmoddi4+0x1f2>
 8001142:	ebb9 0802 	subs.w	r8, r9, r2
 8001146:	eb63 0e0c 	sbc.w	lr, r3, ip
 800114a:	3801      	subs	r0, #1
 800114c:	e7a5      	b.n	800109a <__udivmoddi4+0x1f2>
 800114e:	4641      	mov	r1, r8
 8001150:	e7ea      	b.n	8001128 <__udivmoddi4+0x280>
 8001152:	4603      	mov	r3, r0
 8001154:	e796      	b.n	8001084 <__udivmoddi4+0x1dc>
 8001156:	4645      	mov	r5, r8
 8001158:	e7d1      	b.n	80010fe <__udivmoddi4+0x256>
 800115a:	46d0      	mov	r8, sl
 800115c:	e77d      	b.n	800105a <__udivmoddi4+0x1b2>
 800115e:	4464      	add	r4, ip
 8001160:	3802      	subs	r0, #2
 8001162:	e749      	b.n	8000ff8 <__udivmoddi4+0x150>
 8001164:	3d02      	subs	r5, #2
 8001166:	4462      	add	r2, ip
 8001168:	e731      	b.n	8000fce <__udivmoddi4+0x126>
 800116a:	4608      	mov	r0, r1
 800116c:	e70a      	b.n	8000f84 <__udivmoddi4+0xdc>
 800116e:	4631      	mov	r1, r6
 8001170:	e6ed      	b.n	8000f4e <__udivmoddi4+0xa6>
 8001172:	bf00      	nop

08001174 <__aeabi_idiv0>:
 8001174:	4770      	bx	lr
 8001176:	bf00      	nop

08001178 <initLCD>:
//HAL_I2C_Master_Receive

/*
 * Initializes LCD struct, resets the LCD, and sets it to 4 bit mode
 */
HAL_StatusTypeDef initLCD(LCD *dev, I2C_HandleTypeDef *handle, uint8_t nRows, uint8_t nCols, uint8_t address){
 8001178:	b580      	push	{r7, lr}
 800117a:	b086      	sub	sp, #24
 800117c:	af00      	add	r7, sp, #0
 800117e:	60f8      	str	r0, [r7, #12]
 8001180:	60b9      	str	r1, [r7, #8]
 8001182:	4611      	mov	r1, r2
 8001184:	461a      	mov	r2, r3
 8001186:	460b      	mov	r3, r1
 8001188:	71fb      	strb	r3, [r7, #7]
 800118a:	4613      	mov	r3, r2
 800118c:	71bb      	strb	r3, [r7, #6]
	dev->cols = nCols;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	79ba      	ldrb	r2, [r7, #6]
 8001192:	705a      	strb	r2, [r3, #1]
	dev->rows = nRows;
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	79fa      	ldrb	r2, [r7, #7]
 8001198:	701a      	strb	r2, [r3, #0]
	dev->addr = address<<1;
 800119a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	b2da      	uxtb	r2, r3
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	709a      	strb	r2, [r3, #2]
	dev->handle = *handle;
 80011a6:	68fb      	ldr	r3, [r7, #12]
 80011a8:	68ba      	ldr	r2, [r7, #8]
 80011aa:	3304      	adds	r3, #4
 80011ac:	4611      	mov	r1, r2
 80011ae:	2254      	movs	r2, #84	; 0x54
 80011b0:	4618      	mov	r0, r3
 80011b2:	f010 fcb1 	bl	8011b18 <memcpy>

	//page 46 of datasheet
	HAL_Delay(50);
 80011b6:	2032      	movs	r0, #50	; 0x32
 80011b8:	f003 fa0c 	bl	80045d4 <HAL_Delay>
	HAL_StatusTypeDef stat = write4BitsToInstructionReg(dev, 0b0000);
 80011bc:	2100      	movs	r1, #0
 80011be:	68f8      	ldr	r0, [r7, #12]
 80011c0:	f000 f977 	bl	80014b2 <write4BitsToInstructionReg>
 80011c4:	4603      	mov	r3, r0
 80011c6:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80011c8:	2032      	movs	r0, #50	; 0x32
 80011ca:	f003 fa03 	bl	80045d4 <HAL_Delay>
	write4BitsToInstructionReg(dev, 0b0010);
 80011ce:	2102      	movs	r1, #2
 80011d0:	68f8      	ldr	r0, [r7, #12]
 80011d2:	f000 f96e 	bl	80014b2 <write4BitsToInstructionReg>
	HAL_Delay(50);
 80011d6:	2032      	movs	r0, #50	; 0x32
 80011d8:	f003 f9fc 	bl	80045d4 <HAL_Delay>
//	write4BitsToInstructionReg(dev, 0b0010);
//	HAL_Delay(50);

	//clear display
	stat |= writeToRegister(dev, 0b00000001, INSTRUCTION);
 80011dc:	2200      	movs	r2, #0
 80011de:	2101      	movs	r1, #1
 80011e0:	68f8      	ldr	r0, [r7, #12]
 80011e2:	f000 f924 	bl	800142e <writeToRegister>
 80011e6:	4603      	mov	r3, r0
 80011e8:	461a      	mov	r2, r3
 80011ea:	7dfb      	ldrb	r3, [r7, #23]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 80011f0:	2032      	movs	r0, #50	; 0x32
 80011f2:	f003 f9ef 	bl	80045d4 <HAL_Delay>

	stat |= writeToRegister(dev, 0b00000010, INSTRUCTION);
 80011f6:	2200      	movs	r2, #0
 80011f8:	2102      	movs	r1, #2
 80011fa:	68f8      	ldr	r0, [r7, #12]
 80011fc:	f000 f917 	bl	800142e <writeToRegister>
 8001200:	4603      	mov	r3, r0
 8001202:	461a      	mov	r2, r3
 8001204:	7dfb      	ldrb	r3, [r7, #23]
 8001206:	4313      	orrs	r3, r2
 8001208:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 800120a:	2032      	movs	r0, #50	; 0x32
 800120c:	f003 f9e2 	bl	80045d4 <HAL_Delay>

	stat |= writeToRegister(dev, 0b00001101, INSTRUCTION);
 8001210:	2200      	movs	r2, #0
 8001212:	210d      	movs	r1, #13
 8001214:	68f8      	ldr	r0, [r7, #12]
 8001216:	f000 f90a 	bl	800142e <writeToRegister>
 800121a:	4603      	mov	r3, r0
 800121c:	461a      	mov	r2, r3
 800121e:	7dfb      	ldrb	r3, [r7, #23]
 8001220:	4313      	orrs	r3, r2
 8001222:	75fb      	strb	r3, [r7, #23]
	HAL_Delay(50);
 8001224:	2032      	movs	r0, #50	; 0x32
 8001226:	f003 f9d5 	bl	80045d4 <HAL_Delay>

	return stat;
 800122a:	7dfb      	ldrb	r3, [r7, #23]
}
 800122c:	4618      	mov	r0, r3
 800122e:	3718      	adds	r7, #24
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}

08001234 <setCursor>:
 * 			row 0: 0  1  2 ...19
 * 			row 1: 40 42 43...59
 * 			row 2: 20 22 23...39
 * 			row 3: 60 61 62...79
 */
HAL_StatusTypeDef setCursor(LCD *dev, uint8_t col, uint8_t row){
 8001234:	b580      	push	{r7, lr}
 8001236:	b084      	sub	sp, #16
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	460b      	mov	r3, r1
 800123e:	70fb      	strb	r3, [r7, #3]
 8001240:	4613      	mov	r3, r2
 8001242:	70bb      	strb	r3, [r7, #2]
	if(row < 0 || row > (dev->rows - 1) || col < 0 || col > (dev->cols - 1))return HAL_ERROR;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	781b      	ldrb	r3, [r3, #0]
 8001248:	78ba      	ldrb	r2, [r7, #2]
 800124a:	429a      	cmp	r2, r3
 800124c:	d204      	bcs.n	8001258 <setCursor+0x24>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	785b      	ldrb	r3, [r3, #1]
 8001252:	78fa      	ldrb	r2, [r7, #3]
 8001254:	429a      	cmp	r2, r3
 8001256:	d301      	bcc.n	800125c <setCursor+0x28>
 8001258:	2301      	movs	r3, #1
 800125a:	e021      	b.n	80012a0 <setCursor+0x6c>
	uint8_t addr = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	73fb      	strb	r3, [r7, #15]
	if(row == 0) addr = col;
 8001260:	78bb      	ldrb	r3, [r7, #2]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d102      	bne.n	800126c <setCursor+0x38>
 8001266:	78fb      	ldrb	r3, [r7, #3]
 8001268:	73fb      	strb	r3, [r7, #15]
 800126a:	e013      	b.n	8001294 <setCursor+0x60>
	else if (row == 1) addr = col+64;
 800126c:	78bb      	ldrb	r3, [r7, #2]
 800126e:	2b01      	cmp	r3, #1
 8001270:	d103      	bne.n	800127a <setCursor+0x46>
 8001272:	78fb      	ldrb	r3, [r7, #3]
 8001274:	3340      	adds	r3, #64	; 0x40
 8001276:	73fb      	strb	r3, [r7, #15]
 8001278:	e00c      	b.n	8001294 <setCursor+0x60>
	else if(row == 2) addr = col+20;
 800127a:	78bb      	ldrb	r3, [r7, #2]
 800127c:	2b02      	cmp	r3, #2
 800127e:	d103      	bne.n	8001288 <setCursor+0x54>
 8001280:	78fb      	ldrb	r3, [r7, #3]
 8001282:	3314      	adds	r3, #20
 8001284:	73fb      	strb	r3, [r7, #15]
 8001286:	e005      	b.n	8001294 <setCursor+0x60>
	else if(row == 3) addr = col+84;
 8001288:	78bb      	ldrb	r3, [r7, #2]
 800128a:	2b03      	cmp	r3, #3
 800128c:	d102      	bne.n	8001294 <setCursor+0x60>
 800128e:	78fb      	ldrb	r3, [r7, #3]
 8001290:	3354      	adds	r3, #84	; 0x54
 8001292:	73fb      	strb	r3, [r7, #15]

	return setDDRAMAddress(dev, addr);
 8001294:	7bfb      	ldrb	r3, [r7, #15]
 8001296:	4619      	mov	r1, r3
 8001298:	6878      	ldr	r0, [r7, #4]
 800129a:	f000 f89b 	bl	80013d4 <setDDRAMAddress>
 800129e:	4603      	mov	r3, r0
}
 80012a0:	4618      	mov	r0, r3
 80012a2:	3710      	adds	r7, #16
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}

080012a8 <LCDPrint>:

/**
 *	@brief	prints a given char array to the screen. Set the position first.
 */
HAL_StatusTypeDef LCDPrint(LCD *dev, char *pString){
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
 80012b0:	6039      	str	r1, [r7, #0]
	uint8_t len = strlen(pString);
 80012b2:	6838      	ldr	r0, [r7, #0]
 80012b4:	f7fe ff64 	bl	8000180 <strlen>
 80012b8:	4603      	mov	r3, r0
 80012ba:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef stat = HAL_OK;
 80012bc:	2300      	movs	r3, #0
 80012be:	75fb      	strb	r3, [r7, #23]
	for(int i = 0; i<len; i++){
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
 80012c4:	e014      	b.n	80012f0 <LCDPrint+0x48>
		stat |= writeToRegister(dev, *pString, DATA);
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	2201      	movs	r2, #1
 80012cc:	4619      	mov	r1, r3
 80012ce:	6878      	ldr	r0, [r7, #4]
 80012d0:	f000 f8ad 	bl	800142e <writeToRegister>
 80012d4:	4603      	mov	r3, r0
 80012d6:	461a      	mov	r2, r3
 80012d8:	7dfb      	ldrb	r3, [r7, #23]
 80012da:	4313      	orrs	r3, r2
 80012dc:	75fb      	strb	r3, [r7, #23]
		pString++;
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	3301      	adds	r3, #1
 80012e2:	603b      	str	r3, [r7, #0]
		HAL_Delay(1);
 80012e4:	2001      	movs	r0, #1
 80012e6:	f003 f975 	bl	80045d4 <HAL_Delay>
	for(int i = 0; i<len; i++){
 80012ea:	693b      	ldr	r3, [r7, #16]
 80012ec:	3301      	adds	r3, #1
 80012ee:	613b      	str	r3, [r7, #16]
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	dbe6      	blt.n	80012c6 <LCDPrint+0x1e>
//		delayMicroseconds(50); //takes 37 microseconds
	}
	return stat;
 80012f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	3718      	adds	r7, #24
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}
	...

08001304 <LCDPrintNumber>:

HAL_StatusTypeDef LCDPrintNumber(LCD *dev, uint16_t num, uint8_t col, uint8_t row, uint8_t spaceNum){
 8001304:	b580      	push	{r7, lr}
 8001306:	b088      	sub	sp, #32
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
 800130c:	4608      	mov	r0, r1
 800130e:	4611      	mov	r1, r2
 8001310:	461a      	mov	r2, r3
 8001312:	4603      	mov	r3, r0
 8001314:	807b      	strh	r3, [r7, #2]
 8001316:	460b      	mov	r3, r1
 8001318:	707b      	strb	r3, [r7, #1]
 800131a:	4613      	mov	r3, r2
 800131c:	703b      	strb	r3, [r7, #0]

    int digits = 0;
 800131e:	2300      	movs	r3, #0
 8001320:	61fb      	str	r3, [r7, #28]
    uint16_t n = num;
 8001322:	887b      	ldrh	r3, [r7, #2]
 8001324:	837b      	strh	r3, [r7, #26]
    char numberString[12];

    while (n != 0) {
 8001326:	e008      	b.n	800133a <LCDPrintNumber+0x36>
        n /= 10;
 8001328:	8b7b      	ldrh	r3, [r7, #26]
 800132a:	4a18      	ldr	r2, [pc, #96]	; (800138c <LCDPrintNumber+0x88>)
 800132c:	fba2 2303 	umull	r2, r3, r2, r3
 8001330:	08db      	lsrs	r3, r3, #3
 8001332:	837b      	strh	r3, [r7, #26]
        digits++;
 8001334:	69fb      	ldr	r3, [r7, #28]
 8001336:	3301      	adds	r3, #1
 8001338:	61fb      	str	r3, [r7, #28]
    while (n != 0) {
 800133a:	8b7b      	ldrh	r3, [r7, #26]
 800133c:	2b00      	cmp	r3, #0
 800133e:	d1f3      	bne.n	8001328 <LCDPrintNumber+0x24>
    }

    if (num == 0) {
 8001340:	887b      	ldrh	r3, [r7, #2]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d101      	bne.n	800134a <LCDPrintNumber+0x46>
        digits = 1;
 8001346:	2301      	movs	r3, #1
 8001348:	61fb      	str	r3, [r7, #28]
    }

    sprintf(numberString, "%0*d", spaceNum , num);
 800134a:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 800134e:	887b      	ldrh	r3, [r7, #2]
 8001350:	f107 000c 	add.w	r0, r7, #12
 8001354:	490e      	ldr	r1, [pc, #56]	; (8001390 <LCDPrintNumber+0x8c>)
 8001356:	f010 fb77 	bl	8011a48 <siprintf>

    HAL_StatusTypeDef stat = setCursor(dev, col, row);
 800135a:	783a      	ldrb	r2, [r7, #0]
 800135c:	787b      	ldrb	r3, [r7, #1]
 800135e:	4619      	mov	r1, r3
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f7ff ff67 	bl	8001234 <setCursor>
 8001366:	4603      	mov	r3, r0
 8001368:	767b      	strb	r3, [r7, #25]

    stat |= LCDPrintAtPos(dev, numberString, col, row);
 800136a:	783b      	ldrb	r3, [r7, #0]
 800136c:	787a      	ldrb	r2, [r7, #1]
 800136e:	f107 010c 	add.w	r1, r7, #12
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f000 f80e 	bl	8001394 <LCDPrintAtPos>
 8001378:	4603      	mov	r3, r0
 800137a:	461a      	mov	r2, r3
 800137c:	7e7b      	ldrb	r3, [r7, #25]
 800137e:	4313      	orrs	r3, r2
 8001380:	767b      	strb	r3, [r7, #25]



    return stat;
 8001382:	7e7b      	ldrb	r3, [r7, #25]
}
 8001384:	4618      	mov	r0, r3
 8001386:	3720      	adds	r7, #32
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	cccccccd 	.word	0xcccccccd
 8001390:	080123ec 	.word	0x080123ec

08001394 <LCDPrintAtPos>:

HAL_StatusTypeDef LCDPrintAtPos(LCD *dev, char *pString, uint8_t col, uint8_t row){
 8001394:	b580      	push	{r7, lr}
 8001396:	b086      	sub	sp, #24
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	460b      	mov	r3, r1
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	4613      	mov	r3, r2
 80013a8:	71bb      	strb	r3, [r7, #6]
//	uint8_t len = strlen(pString);
	HAL_StatusTypeDef stat = setCursor(dev, col, row);
 80013aa:	79ba      	ldrb	r2, [r7, #6]
 80013ac:	79fb      	ldrb	r3, [r7, #7]
 80013ae:	4619      	mov	r1, r3
 80013b0:	68f8      	ldr	r0, [r7, #12]
 80013b2:	f7ff ff3f 	bl	8001234 <setCursor>
 80013b6:	4603      	mov	r3, r0
 80013b8:	75fb      	strb	r3, [r7, #23]
	return stat | LCDPrint(dev, pString);
 80013ba:	68b9      	ldr	r1, [r7, #8]
 80013bc:	68f8      	ldr	r0, [r7, #12]
 80013be:	f7ff ff73 	bl	80012a8 <LCDPrint>
 80013c2:	4603      	mov	r3, r0
 80013c4:	461a      	mov	r2, r3
 80013c6:	7dfb      	ldrb	r3, [r7, #23]
 80013c8:	4313      	orrs	r3, r2
 80013ca:	b2db      	uxtb	r3, r3
}
 80013cc:	4618      	mov	r0, r3
 80013ce:	3718      	adds	r7, #24
 80013d0:	46bd      	mov	sp, r7
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <setDDRAMAddress>:
}

/**
 * @brief	sets the DDRAM address (cursor position). Address is 7 bits
 */
HAL_StatusTypeDef setDDRAMAddress(LCD *dev, uint8_t addr){
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af00      	add	r7, sp, #0
 80013da:	6078      	str	r0, [r7, #4]
 80013dc:	460b      	mov	r3, r1
 80013de:	70fb      	strb	r3, [r7, #3]
	//				  			command    7 bits of address
	uint8_t dataByte = SET_DDRAM_ADDR_BIT | (addr & 0b01111111);
 80013e0:	78fb      	ldrb	r3, [r7, #3]
 80013e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80013e6:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef bruh = writeToRegister(dev, dataByte, INSTRUCTION);
 80013e8:	7bfb      	ldrb	r3, [r7, #15]
 80013ea:	2200      	movs	r2, #0
 80013ec:	4619      	mov	r1, r3
 80013ee:	6878      	ldr	r0, [r7, #4]
 80013f0:	f000 f81d 	bl	800142e <writeToRegister>
 80013f4:	4603      	mov	r3, r0
 80013f6:	73bb      	strb	r3, [r7, #14]
	return bruh;
 80013f8:	7bbb      	ldrb	r3, [r7, #14]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3710      	adds	r7, #16
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <clearDisplay>:
 * 			sets the cursor to home (top left corner)
 * 			7		6		5		4		3		2		1		0
 * 	byte1	db7		db6		db5		db4		BT		EN		RW		RS
 * 	byte2	db3		db2		db1		db0
 */
HAL_StatusTypeDef clearDisplay(LCD *dev){
 8001402:	b580      	push	{r7, lr}
 8001404:	b084      	sub	sp, #16
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
	uint8_t dataByte = 0b00000001; //instruction from datasheet
 800140a:	2301      	movs	r3, #1
 800140c:	73fb      	strb	r3, [r7, #15]
	HAL_StatusTypeDef bruh = writeToRegister(dev, dataByte, 0);
 800140e:	7bfb      	ldrb	r3, [r7, #15]
 8001410:	2200      	movs	r2, #0
 8001412:	4619      	mov	r1, r3
 8001414:	6878      	ldr	r0, [r7, #4]
 8001416:	f000 f80a 	bl	800142e <writeToRegister>
 800141a:	4603      	mov	r3, r0
 800141c:	73bb      	strb	r3, [r7, #14]
	HAL_Delay(1);
 800141e:	2001      	movs	r0, #1
 8001420:	f003 f8d8 	bl	80045d4 <HAL_Delay>
	return bruh;
 8001424:	7bbb      	ldrb	r3, [r7, #14]
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <writeToRegister>:
 * @brief	mid level function writes db0-db7 (byte) to a register (rs)
 * @param 	dev - pointer to the LCD object
 * @param	byte - what to send to pins db0-db7
 * @param	rs - register select. 1 for data, 0 for instruction
 */
HAL_StatusTypeDef writeToRegister(LCD *dev, uint8_t byte, uint8_t rs){
 800142e:	b580      	push	{r7, lr}
 8001430:	b084      	sub	sp, #16
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
 8001436:	460b      	mov	r3, r1
 8001438:	70fb      	strb	r3, [r7, #3]
 800143a:	4613      	mov	r3, r2
 800143c:	70bb      	strb	r3, [r7, #2]
//	uint8_t second = ((byte & 0x0F) << 4) | rs<<RS | 1<<BT;
//	first  &= ~(1<<RW);
//	second &= ~(1<<RW);	//make sure write is high
//	HAL_StatusTypeDef bruh = writeAByte(dev, first);
//	bruh |= writeAByte(dev, second);
	HAL_StatusTypeDef bruh = HAL_OK;
 800143e:	2300      	movs	r3, #0
 8001440:	73fb      	strb	r3, [r7, #15]
	if(rs == INSTRUCTION){
 8001442:	78bb      	ldrb	r3, [r7, #2]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d116      	bne.n	8001476 <writeToRegister+0x48>
		bruh = write4BitsToInstructionReg(dev, (byte & 0xF0) >> 4);
 8001448:	78fb      	ldrb	r3, [r7, #3]
 800144a:	091b      	lsrs	r3, r3, #4
 800144c:	b2db      	uxtb	r3, r3
 800144e:	4619      	mov	r1, r3
 8001450:	6878      	ldr	r0, [r7, #4]
 8001452:	f000 f82e 	bl	80014b2 <write4BitsToInstructionReg>
 8001456:	4603      	mov	r3, r0
 8001458:	73fb      	strb	r3, [r7, #15]
		bruh |= write4BitsToInstructionReg(dev, byte & 0x0F);
 800145a:	78fb      	ldrb	r3, [r7, #3]
 800145c:	f003 030f 	and.w	r3, r3, #15
 8001460:	b2db      	uxtb	r3, r3
 8001462:	4619      	mov	r1, r3
 8001464:	6878      	ldr	r0, [r7, #4]
 8001466:	f000 f824 	bl	80014b2 <write4BitsToInstructionReg>
 800146a:	4603      	mov	r3, r0
 800146c:	461a      	mov	r2, r3
 800146e:	7bfb      	ldrb	r3, [r7, #15]
 8001470:	4313      	orrs	r3, r2
 8001472:	73fb      	strb	r3, [r7, #15]
 8001474:	e018      	b.n	80014a8 <writeToRegister+0x7a>
	}
	else if(rs == DATA){
 8001476:	78bb      	ldrb	r3, [r7, #2]
 8001478:	2b01      	cmp	r3, #1
 800147a:	d115      	bne.n	80014a8 <writeToRegister+0x7a>
		bruh = write4BitsToDataReg(dev, (byte & 0xF0) >> 4);
 800147c:	78fb      	ldrb	r3, [r7, #3]
 800147e:	091b      	lsrs	r3, r3, #4
 8001480:	b2db      	uxtb	r3, r3
 8001482:	4619      	mov	r1, r3
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	f000 f86b 	bl	8001560 <write4BitsToDataReg>
 800148a:	4603      	mov	r3, r0
 800148c:	73fb      	strb	r3, [r7, #15]
		bruh |= write4BitsToDataReg(dev, byte & 0x0F);
 800148e:	78fb      	ldrb	r3, [r7, #3]
 8001490:	f003 030f 	and.w	r3, r3, #15
 8001494:	b2db      	uxtb	r3, r3
 8001496:	4619      	mov	r1, r3
 8001498:	6878      	ldr	r0, [r7, #4]
 800149a:	f000 f861 	bl	8001560 <write4BitsToDataReg>
 800149e:	4603      	mov	r3, r0
 80014a0:	461a      	mov	r2, r3
 80014a2:	7bfb      	ldrb	r3, [r7, #15]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	73fb      	strb	r3, [r7, #15]
	}
	return bruh;
 80014a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80014aa:	4618      	mov	r0, r3
 80014ac:	3710      	adds	r7, #16
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}

080014b2 <write4BitsToInstructionReg>:

/**
 * @brief	puts the LS nibble of bits onto db4-7
 */
HAL_StatusTypeDef write4BitsToInstructionReg(LCD *dev, uint8_t bits){
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af02      	add	r7, sp, #8
 80014b8:	6078      	str	r0, [r7, #4]
 80014ba:	460b      	mov	r3, r1
 80014bc:	70fb      	strb	r3, [r7, #3]
	uint8_t expanderVal = 0;
 80014be:	2300      	movs	r3, #0
 80014c0:	73bb      	strb	r3, [r7, #14]
	expanderVal |= (bits & 0x0F) << 4;
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	011b      	lsls	r3, r3, #4
 80014c6:	b25a      	sxtb	r2, r3
 80014c8:	7bbb      	ldrb	r3, [r7, #14]
 80014ca:	b25b      	sxtb	r3, r3
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b25b      	sxtb	r3, r3
 80014d0:	b2db      	uxtb	r3, r3
 80014d2:	73bb      	strb	r3, [r7, #14]
	expanderVal |= 1 << BT;
 80014d4:	7bbb      	ldrb	r3, [r7, #14]
 80014d6:	f043 0308 	orr.w	r3, r3, #8
 80014da:	b2db      	uxtb	r3, r3
 80014dc:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	1d18      	adds	r0, r3, #4
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	789b      	ldrb	r3, [r3, #2]
 80014e6:	b299      	uxth	r1, r3
 80014e8:	f107 020e 	add.w	r2, r7, #14
 80014ec:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80014f0:	9300      	str	r3, [sp, #0]
 80014f2:	2301      	movs	r3, #1
 80014f4:	f004 f88a 	bl	800560c <HAL_I2C_Master_Transmit>
 80014f8:	4603      	mov	r3, r0
 80014fa:	73fb      	strb	r3, [r7, #15]
	expanderVal |= 1<<EN;
 80014fc:	7bbb      	ldrb	r3, [r7, #14]
 80014fe:	f043 0304 	orr.w	r3, r3, #4
 8001502:	b2db      	uxtb	r3, r3
 8001504:	73bb      	strb	r3, [r7, #14]
	stat |= HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	1d18      	adds	r0, r3, #4
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	789b      	ldrb	r3, [r3, #2]
 800150e:	b299      	uxth	r1, r3
 8001510:	f107 020e 	add.w	r2, r7, #14
 8001514:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	2301      	movs	r3, #1
 800151c:	f004 f876 	bl	800560c <HAL_I2C_Master_Transmit>
 8001520:	4603      	mov	r3, r0
 8001522:	461a      	mov	r2, r3
 8001524:	7bfb      	ldrb	r3, [r7, #15]
 8001526:	4313      	orrs	r3, r2
 8001528:	73fb      	strb	r3, [r7, #15]
	expanderVal &= ~(1<<EN);
 800152a:	7bbb      	ldrb	r3, [r7, #14]
 800152c:	f023 0304 	bic.w	r3, r3, #4
 8001530:	b2db      	uxtb	r3, r3
 8001532:	73bb      	strb	r3, [r7, #14]
	return stat | HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	1d18      	adds	r0, r3, #4
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	789b      	ldrb	r3, [r3, #2]
 800153c:	b299      	uxth	r1, r3
 800153e:	f107 020e 	add.w	r2, r7, #14
 8001542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001546:	9300      	str	r3, [sp, #0]
 8001548:	2301      	movs	r3, #1
 800154a:	f004 f85f 	bl	800560c <HAL_I2C_Master_Transmit>
 800154e:	4603      	mov	r3, r0
 8001550:	461a      	mov	r2, r3
 8001552:	7bfb      	ldrb	r3, [r7, #15]
 8001554:	4313      	orrs	r3, r2
 8001556:	b2db      	uxtb	r3, r3
}
 8001558:	4618      	mov	r0, r3
 800155a:	3710      	adds	r7, #16
 800155c:	46bd      	mov	sp, r7
 800155e:	bd80      	pop	{r7, pc}

08001560 <write4BitsToDataReg>:

HAL_StatusTypeDef write4BitsToDataReg(LCD *dev, uint8_t bits){
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af02      	add	r7, sp, #8
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	460b      	mov	r3, r1
 800156a:	70fb      	strb	r3, [r7, #3]
	uint8_t expanderVal = 0;
 800156c:	2300      	movs	r3, #0
 800156e:	73bb      	strb	r3, [r7, #14]
	expanderVal |= (bits & 0x0F)<<4;
 8001570:	78fb      	ldrb	r3, [r7, #3]
 8001572:	011b      	lsls	r3, r3, #4
 8001574:	b25a      	sxtb	r2, r3
 8001576:	7bbb      	ldrb	r3, [r7, #14]
 8001578:	b25b      	sxtb	r3, r3
 800157a:	4313      	orrs	r3, r2
 800157c:	b25b      	sxtb	r3, r3
 800157e:	b2db      	uxtb	r3, r3
 8001580:	73bb      	strb	r3, [r7, #14]
	expanderVal |= 1 << BT | 1 << RS;
 8001582:	7bbb      	ldrb	r3, [r7, #14]
 8001584:	f043 0309 	orr.w	r3, r3, #9
 8001588:	b2db      	uxtb	r3, r3
 800158a:	73bb      	strb	r3, [r7, #14]
	HAL_StatusTypeDef stat = HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	1d18      	adds	r0, r3, #4
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	789b      	ldrb	r3, [r3, #2]
 8001594:	b299      	uxth	r1, r3
 8001596:	f107 020e 	add.w	r2, r7, #14
 800159a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2301      	movs	r3, #1
 80015a2:	f004 f833 	bl	800560c <HAL_I2C_Master_Transmit>
 80015a6:	4603      	mov	r3, r0
 80015a8:	73fb      	strb	r3, [r7, #15]
	expanderVal |= 1<<EN;
 80015aa:	7bbb      	ldrb	r3, [r7, #14]
 80015ac:	f043 0304 	orr.w	r3, r3, #4
 80015b0:	b2db      	uxtb	r3, r3
 80015b2:	73bb      	strb	r3, [r7, #14]
	stat |= HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	1d18      	adds	r0, r3, #4
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	789b      	ldrb	r3, [r3, #2]
 80015bc:	b299      	uxth	r1, r3
 80015be:	f107 020e 	add.w	r2, r7, #14
 80015c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015c6:	9300      	str	r3, [sp, #0]
 80015c8:	2301      	movs	r3, #1
 80015ca:	f004 f81f 	bl	800560c <HAL_I2C_Master_Transmit>
 80015ce:	4603      	mov	r3, r0
 80015d0:	461a      	mov	r2, r3
 80015d2:	7bfb      	ldrb	r3, [r7, #15]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	73fb      	strb	r3, [r7, #15]
	expanderVal &= ~(1<<EN);
 80015d8:	7bbb      	ldrb	r3, [r7, #14]
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	b2db      	uxtb	r3, r3
 80015e0:	73bb      	strb	r3, [r7, #14]
	return stat | HAL_I2C_Master_Transmit(&(dev->handle), dev->addr, &expanderVal, 1, 1000);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	1d18      	adds	r0, r3, #4
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	789b      	ldrb	r3, [r3, #2]
 80015ea:	b299      	uxth	r1, r3
 80015ec:	f107 020e 	add.w	r2, r7, #14
 80015f0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80015f4:	9300      	str	r3, [sp, #0]
 80015f6:	2301      	movs	r3, #1
 80015f8:	f004 f808 	bl	800560c <HAL_I2C_Master_Transmit>
 80015fc:	4603      	mov	r3, r0
 80015fe:	461a      	mov	r2, r3
 8001600:	7bfb      	ldrb	r3, [r7, #15]
 8001602:	4313      	orrs	r3, r2
 8001604:	b2db      	uxtb	r3, r3
}
 8001606:	4618      	mov	r0, r3
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
	...

08001610 <setTimerFrequencyPulseWidth>:
 * @brief 	sets a given timer to a frequency of freq (Hz) and pulseWidth (us). Set pulsewidth to 0 to turn off
 * @param	pTim pointer to the timer struct
 * @param	freq frequency in hertz
 * @param	pulseWidth desired pulsewidth in microseconds. Be careful of low frequencies!
 */
void setTimerFrequencyPulseWidth(TIM_HandleTypeDef* pTim, uint16_t freq, uint16_t pulseWidth, uint32_t channel){
 8001610:	b580      	push	{r7, lr}
 8001612:	b08c      	sub	sp, #48	; 0x30
 8001614:	af00      	add	r7, sp, #0
 8001616:	60f8      	str	r0, [r7, #12]
 8001618:	607b      	str	r3, [r7, #4]
 800161a:	460b      	mov	r3, r1
 800161c:	817b      	strh	r3, [r7, #10]
 800161e:	4613      	mov	r3, r2
 8001620:	813b      	strh	r3, [r7, #8]

	//foo->bar = (*foo).bar
	//frequency of auto reload (pwm frequency) = FCLK/(PSC+1)/(ARR+1)

	//disable interrupts. turn timer off first tho
	pTim->Instance->CCR1 = 0;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	2200      	movs	r2, #0
 8001628:	635a      	str	r2, [r3, #52]	; 0x34
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800162a:	b672      	cpsid	i
}
 800162c:	bf00      	nop

	__disable_irq();


	if(pulseWidth != 0 && freq > 0){
 800162e:	893b      	ldrh	r3, [r7, #8]
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80a2 	beq.w	800177a <setTimerFrequencyPulseWidth+0x16a>
 8001636:	897b      	ldrh	r3, [r7, #10]
 8001638:	2b00      	cmp	r3, #0
 800163a:	f000 809e 	beq.w	800177a <setTimerFrequencyPulseWidth+0x16a>

		uint16_t autoReloadReg, prescaler;
		//set bounds
		//if(freq < 1)freq = 1;
		if(freq>MAX_FREQUENCY) freq = MAX_FREQUENCY;
 800163e:	897b      	ldrh	r3, [r7, #10]
 8001640:	f5b3 7f48 	cmp.w	r3, #800	; 0x320
 8001644:	d902      	bls.n	800164c <setTimerFrequencyPulseWidth+0x3c>
 8001646:	f44f 7348 	mov.w	r3, #800	; 0x320
 800164a:	817b      	strh	r3, [r7, #10]

		int minPulseWidth = 16/freq;	//for low frequencies. We only have an accuracy of 16us at 1 Hz
 800164c:	897b      	ldrh	r3, [r7, #10]
 800164e:	2210      	movs	r2, #16
 8001650:	fb92 f3f3 	sdiv	r3, r2, r3
 8001654:	62bb      	str	r3, [r7, #40]	; 0x28
		if(minPulseWidth < 5)minPulseWidth = 5;
 8001656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001658:	2b04      	cmp	r3, #4
 800165a:	dc01      	bgt.n	8001660 <setTimerFrequencyPulseWidth+0x50>
 800165c:	2305      	movs	r3, #5
 800165e:	62bb      	str	r3, [r7, #40]	; 0x28

		if(pulseWidth > MAX_PULSE_WIDTH) pulseWidth = MAX_PULSE_WIDTH;
 8001660:	893b      	ldrh	r3, [r7, #8]
 8001662:	2b7d      	cmp	r3, #125	; 0x7d
 8001664:	d901      	bls.n	800166a <setTimerFrequencyPulseWidth+0x5a>
 8001666:	237d      	movs	r3, #125	; 0x7d
 8001668:	813b      	strh	r3, [r7, #8]
		if(pulseWidth < minPulseWidth) pulseWidth = minPulseWidth;
 800166a:	893b      	ldrh	r3, [r7, #8]
 800166c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800166e:	429a      	cmp	r2, r3
 8001670:	dd01      	ble.n	8001676 <setTimerFrequencyPulseWidth+0x66>
 8001672:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001674:	813b      	strh	r3, [r7, #8]

		//Precalculated prescalers. We could calculate these every function call,
		//but why waste the time.
		if(freq == 1)        prescaler = 512 - 1;
 8001676:	897b      	ldrh	r3, [r7, #10]
 8001678:	2b01      	cmp	r3, #1
 800167a:	d103      	bne.n	8001684 <setTimerFrequencyPulseWidth+0x74>
 800167c:	f240 13ff 	movw	r3, #511	; 0x1ff
 8001680:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8001682:	e032      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 3)   prescaler = 256-1;
 8001684:	897b      	ldrh	r3, [r7, #10]
 8001686:	2b03      	cmp	r3, #3
 8001688:	d802      	bhi.n	8001690 <setTimerFrequencyPulseWidth+0x80>
 800168a:	23ff      	movs	r3, #255	; 0xff
 800168c:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800168e:	e02c      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 7)   prescaler = 128-1;
 8001690:	897b      	ldrh	r3, [r7, #10]
 8001692:	2b07      	cmp	r3, #7
 8001694:	d802      	bhi.n	800169c <setTimerFrequencyPulseWidth+0x8c>
 8001696:	237f      	movs	r3, #127	; 0x7f
 8001698:	85fb      	strh	r3, [r7, #46]	; 0x2e
 800169a:	e026      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 15)  prescaler = 64-1;
 800169c:	897b      	ldrh	r3, [r7, #10]
 800169e:	2b0f      	cmp	r3, #15
 80016a0:	d802      	bhi.n	80016a8 <setTimerFrequencyPulseWidth+0x98>
 80016a2:	233f      	movs	r3, #63	; 0x3f
 80016a4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016a6:	e020      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 32)  prescaler = 32-1;
 80016a8:	897b      	ldrh	r3, [r7, #10]
 80016aa:	2b20      	cmp	r3, #32
 80016ac:	d802      	bhi.n	80016b4 <setTimerFrequencyPulseWidth+0xa4>
 80016ae:	231f      	movs	r3, #31
 80016b0:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016b2:	e01a      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 63)  prescaler = 16-1;
 80016b4:	897b      	ldrh	r3, [r7, #10]
 80016b6:	2b3f      	cmp	r3, #63	; 0x3f
 80016b8:	d802      	bhi.n	80016c0 <setTimerFrequencyPulseWidth+0xb0>
 80016ba:	230f      	movs	r3, #15
 80016bc:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016be:	e014      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 127) prescaler = 8-1;
 80016c0:	897b      	ldrh	r3, [r7, #10]
 80016c2:	2b7f      	cmp	r3, #127	; 0x7f
 80016c4:	d802      	bhi.n	80016cc <setTimerFrequencyPulseWidth+0xbc>
 80016c6:	2307      	movs	r3, #7
 80016c8:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016ca:	e00e      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 255) prescaler = 4-1;
 80016cc:	897b      	ldrh	r3, [r7, #10]
 80016ce:	2bff      	cmp	r3, #255	; 0xff
 80016d0:	d802      	bhi.n	80016d8 <setTimerFrequencyPulseWidth+0xc8>
 80016d2:	2303      	movs	r3, #3
 80016d4:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016d6:	e008      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else if(freq <= 511) prescaler = 2-1;
 80016d8:	897b      	ldrh	r3, [r7, #10]
 80016da:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016de:	d202      	bcs.n	80016e6 <setTimerFrequencyPulseWidth+0xd6>
 80016e0:	2301      	movs	r3, #1
 80016e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80016e4:	e001      	b.n	80016ea <setTimerFrequencyPulseWidth+0xda>
		else prescaler = 1-1;
 80016e6:	2300      	movs	r3, #0
 80016e8:	85fb      	strh	r3, [r7, #46]	; 0x2e

		//always round down
		autoReloadReg = CPU_CLK / ((prescaler+1) * freq);
 80016ea:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016ec:	3301      	adds	r3, #1
 80016ee:	897a      	ldrh	r2, [r7, #10]
 80016f0:	fb02 f303 	mul.w	r3, r2, r3
 80016f4:	4a2e      	ldr	r2, [pc, #184]	; (80017b0 <setTimerFrequencyPulseWidth+0x1a0>)
 80016f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80016fa:	84fb      	strh	r3, [r7, #38]	; 0x26

		double usPerBit = ((double)(prescaler+1) / 32000000.0) * 1000000.0;
 80016fc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80016fe:	3301      	adds	r3, #1
 8001700:	4618      	mov	r0, r3
 8001702:	f7fe fe97 	bl	8000434 <__aeabi_i2d>
 8001706:	a326      	add	r3, pc, #152	; (adr r3, 80017a0 <setTimerFrequencyPulseWidth+0x190>)
 8001708:	e9d3 2300 	ldrd	r2, r3, [r3]
 800170c:	f7ff f826 	bl	800075c <__aeabi_ddiv>
 8001710:	4602      	mov	r2, r0
 8001712:	460b      	mov	r3, r1
 8001714:	4610      	mov	r0, r2
 8001716:	4619      	mov	r1, r3
 8001718:	a323      	add	r3, pc, #140	; (adr r3, 80017a8 <setTimerFrequencyPulseWidth+0x198>)
 800171a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800171e:	f7fe fef3 	bl	8000508 <__aeabi_dmul>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	e9c7 2306 	strd	r2, r3, [r7, #24]
		int bits = (int)((double)pulseWidth / usPerBit);
 800172a:	893b      	ldrh	r3, [r7, #8]
 800172c:	4618      	mov	r0, r3
 800172e:	f7fe fe71 	bl	8000414 <__aeabi_ui2d>
 8001732:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001736:	f7ff f811 	bl	800075c <__aeabi_ddiv>
 800173a:	4602      	mov	r2, r0
 800173c:	460b      	mov	r3, r1
 800173e:	4610      	mov	r0, r2
 8001740:	4619      	mov	r1, r3
 8001742:	f7ff f8f3 	bl	800092c <__aeabi_d2iz>
 8001746:	4603      	mov	r3, r0
 8001748:	617b      	str	r3, [r7, #20]

		pTim->Instance->ARR = autoReloadReg;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
		pTim->Instance->PSC = prescaler;
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8001758:	629a      	str	r2, [r3, #40]	; 0x28
		if(channel == TIM_CHANNEL_1)     pTim->Instance->CCR1 = bits;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d104      	bne.n	800176a <setTimerFrequencyPulseWidth+0x15a>
 8001760:	68fb      	ldr	r3, [r7, #12]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	635a      	str	r2, [r3, #52]	; 0x34
	if(pulseWidth != 0 && freq > 0){
 8001768:	e010      	b.n	800178c <setTimerFrequencyPulseWidth+0x17c>
		else if(channel == TIM_CHANNEL_2)pTim->Instance->CCR2 = bits;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	2b04      	cmp	r3, #4
 800176e:	d10d      	bne.n	800178c <setTimerFrequencyPulseWidth+0x17c>
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	697a      	ldr	r2, [r7, #20]
 8001776:	639a      	str	r2, [r3, #56]	; 0x38
	if(pulseWidth != 0 && freq > 0){
 8001778:	e008      	b.n	800178c <setTimerFrequencyPulseWidth+0x17c>
	}
	else{
		pTim->Instance->CCR1 = 0;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	2200      	movs	r2, #0
 8001780:	635a      	str	r2, [r3, #52]	; 0x34
		pTim->Instance->CCR2 = 0;
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	2200      	movs	r2, #0
 8001788:	639a      	str	r2, [r3, #56]	; 0x38
 800178a:	e000      	b.n	800178e <setTimerFrequencyPulseWidth+0x17e>
	if(pulseWidth != 0 && freq > 0){
 800178c:	bf00      	nop
  __ASM volatile ("cpsie i" : : : "memory");
 800178e:	b662      	cpsie	i
}
 8001790:	bf00      	nop
		//		HAL_TIM_PWM_Stop(ptim, channel);
	}
	//enable interrupts
	__enable_irq();
}
 8001792:	bf00      	nop
 8001794:	3730      	adds	r7, #48	; 0x30
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	f3af 8000 	nop.w
 80017a0:	00000000 	.word	0x00000000
 80017a4:	417e8480 	.word	0x417e8480
 80017a8:	00000000 	.word	0x00000000
 80017ac:	412e8480 	.word	0x412e8480
 80017b0:	01e84800 	.word	0x01e84800

080017b4 <flashInit>:
 * @param	dev the struct
 * @param	_spiHandle pointer to the SPI struct that the chip is connected to
 * @param	ssPin slave select GPIO pin
 * @param 	ssBank the bank of the ss gpio
 */
void flashInit(W25X40CL *dev, SPI_HandleTypeDef *_spiHandle, uint32_t ssPin, GPIO_TypeDef  *ssBank){
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	60f8      	str	r0, [r7, #12]
 80017bc:	60b9      	str	r1, [r7, #8]
 80017be:	607a      	str	r2, [r7, #4]
 80017c0:	603b      	str	r3, [r7, #0]
	dev->spiHandle = _spiHandle;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	68ba      	ldr	r2, [r7, #8]
 80017c6:	601a      	str	r2, [r3, #0]
	dev->SS_Bank = ssBank;
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	683a      	ldr	r2, [r7, #0]
 80017cc:	605a      	str	r2, [r3, #4]
	dev->SS_Pin = ssPin;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	609a      	str	r2, [r3, #8]
}
 80017d4:	bf00      	nop
 80017d6:	3714      	adds	r7, #20
 80017d8:	46bd      	mov	sp, r7
 80017da:	bc80      	pop	{r7}
 80017dc:	4770      	bx	lr
	...

080017e0 <setTimersAccordingly>:
 * 			Will bump notes played at the same time down to the next coil. ex if coil1 is playing
 * 			and two other notes come on simultaneously, they'll be pushed to coils 2 and 3. If all
 * 			5 coils are on, the note will not play
 * 			To turn off a coil, this function will find whichever coil is playing that frequency
 */
void setTimersAccordingly(uint8_t coil, uint16_t freq, uint8_t velocity) {
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b082      	sub	sp, #8
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	4603      	mov	r3, r0
 80017e8:	71fb      	strb	r3, [r7, #7]
 80017ea:	460b      	mov	r3, r1
 80017ec:	80bb      	strh	r3, [r7, #4]
 80017ee:	4613      	mov	r3, r2
 80017f0:	71bb      	strb	r3, [r7, #6]
	//if velocity is 0, turn off that coil
	//if velocity is not 0, push the note down the chain
	//scaling not yet implemented
	if (velocity != 0) {
 80017f2:	79bb      	ldrb	r3, [r7, #6]
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	f000 808a 	beq.w	800190e <setTimersAccordingly+0x12e>
		switch (coil) {
 80017fa:	79fb      	ldrb	r3, [r7, #7]
 80017fc:	3b01      	subs	r3, #1
 80017fe:	2b04      	cmp	r3, #4
 8001800:	f200 8146 	bhi.w	8001a90 <setTimersAccordingly+0x2b0>
 8001804:	a201      	add	r2, pc, #4	; (adr r2, 800180c <setTimersAccordingly+0x2c>)
 8001806:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800180a:	bf00      	nop
 800180c:	08001821 	.word	0x08001821
 8001810:	08001853 	.word	0x08001853
 8001814:	08001885 	.word	0x08001885
 8001818:	080018b7 	.word	0x080018b7
 800181c:	080018e9 	.word	0x080018e9
		case 1:
			if (!coil1On) {
 8001820:	4b9d      	ldr	r3, [pc, #628]	; (8001a98 <setTimersAccordingly+0x2b8>)
 8001822:	781b      	ldrb	r3, [r3, #0]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d10d      	bne.n	8001844 <setTimersAccordingly+0x64>
				setTimerFrequencyPulseWidth(&COIL1, freq, velocity, COIL1_CH);
 8001828:	79bb      	ldrb	r3, [r7, #6]
 800182a:	b29a      	uxth	r2, r3
 800182c:	88b9      	ldrh	r1, [r7, #4]
 800182e:	2300      	movs	r3, #0
 8001830:	489a      	ldr	r0, [pc, #616]	; (8001a9c <setTimersAccordingly+0x2bc>)
 8001832:	f7ff feed 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil1On = true;
 8001836:	4b98      	ldr	r3, [pc, #608]	; (8001a98 <setTimersAccordingly+0x2b8>)
 8001838:	2201      	movs	r2, #1
 800183a:	701a      	strb	r2, [r3, #0]
				coil1Freq = freq;
 800183c:	4a98      	ldr	r2, [pc, #608]	; (8001aa0 <setTimersAccordingly+0x2c0>)
 800183e:	88bb      	ldrh	r3, [r7, #4]
 8001840:	8013      	strh	r3, [r2, #0]
			} else
				setTimersAccordingly(2, freq, velocity);
			break;
 8001842:	e125      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(2, freq, velocity);
 8001844:	79ba      	ldrb	r2, [r7, #6]
 8001846:	88bb      	ldrh	r3, [r7, #4]
 8001848:	4619      	mov	r1, r3
 800184a:	2002      	movs	r0, #2
 800184c:	f7ff ffc8 	bl	80017e0 <setTimersAccordingly>
			break;
 8001850:	e11e      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 2:
			if (!coil2On) {
 8001852:	4b94      	ldr	r3, [pc, #592]	; (8001aa4 <setTimersAccordingly+0x2c4>)
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d10d      	bne.n	8001876 <setTimersAccordingly+0x96>
				setTimerFrequencyPulseWidth(&COIL2, freq, velocity, COIL2_CH);
 800185a:	79bb      	ldrb	r3, [r7, #6]
 800185c:	b29a      	uxth	r2, r3
 800185e:	88b9      	ldrh	r1, [r7, #4]
 8001860:	2304      	movs	r3, #4
 8001862:	4891      	ldr	r0, [pc, #580]	; (8001aa8 <setTimersAccordingly+0x2c8>)
 8001864:	f7ff fed4 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil2On = true;
 8001868:	4b8e      	ldr	r3, [pc, #568]	; (8001aa4 <setTimersAccordingly+0x2c4>)
 800186a:	2201      	movs	r2, #1
 800186c:	701a      	strb	r2, [r3, #0]
				coil2Freq = freq;
 800186e:	4a8f      	ldr	r2, [pc, #572]	; (8001aac <setTimersAccordingly+0x2cc>)
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	8013      	strh	r3, [r2, #0]
			} else
				setTimersAccordingly(3, freq, velocity);
			break;
 8001874:	e10c      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(3, freq, velocity);
 8001876:	79ba      	ldrb	r2, [r7, #6]
 8001878:	88bb      	ldrh	r3, [r7, #4]
 800187a:	4619      	mov	r1, r3
 800187c:	2003      	movs	r0, #3
 800187e:	f7ff ffaf 	bl	80017e0 <setTimersAccordingly>
			break;
 8001882:	e105      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 3:
			if (!coil3On) {
 8001884:	4b8a      	ldr	r3, [pc, #552]	; (8001ab0 <setTimersAccordingly+0x2d0>)
 8001886:	781b      	ldrb	r3, [r3, #0]
 8001888:	2b00      	cmp	r3, #0
 800188a:	d10d      	bne.n	80018a8 <setTimersAccordingly+0xc8>
				setTimerFrequencyPulseWidth(&COIL3, freq, velocity, COIL3_CH);
 800188c:	79bb      	ldrb	r3, [r7, #6]
 800188e:	b29a      	uxth	r2, r3
 8001890:	88b9      	ldrh	r1, [r7, #4]
 8001892:	2300      	movs	r3, #0
 8001894:	4887      	ldr	r0, [pc, #540]	; (8001ab4 <setTimersAccordingly+0x2d4>)
 8001896:	f7ff febb 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil3On = true;
 800189a:	4b85      	ldr	r3, [pc, #532]	; (8001ab0 <setTimersAccordingly+0x2d0>)
 800189c:	2201      	movs	r2, #1
 800189e:	701a      	strb	r2, [r3, #0]
				coil3Freq = freq;
 80018a0:	4a85      	ldr	r2, [pc, #532]	; (8001ab8 <setTimersAccordingly+0x2d8>)
 80018a2:	88bb      	ldrh	r3, [r7, #4]
 80018a4:	8013      	strh	r3, [r2, #0]
			} else
				setTimersAccordingly(4, freq, velocity);
			break;
 80018a6:	e0f3      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(4, freq, velocity);
 80018a8:	79ba      	ldrb	r2, [r7, #6]
 80018aa:	88bb      	ldrh	r3, [r7, #4]
 80018ac:	4619      	mov	r1, r3
 80018ae:	2004      	movs	r0, #4
 80018b0:	f7ff ff96 	bl	80017e0 <setTimersAccordingly>
			break;
 80018b4:	e0ec      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 4:
			if (!coil4On) {
 80018b6:	4b81      	ldr	r3, [pc, #516]	; (8001abc <setTimersAccordingly+0x2dc>)
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d10d      	bne.n	80018da <setTimersAccordingly+0xfa>
				setTimerFrequencyPulseWidth(&COIL4, freq, velocity, COIL4_CH);
 80018be:	79bb      	ldrb	r3, [r7, #6]
 80018c0:	b29a      	uxth	r2, r3
 80018c2:	88b9      	ldrh	r1, [r7, #4]
 80018c4:	2300      	movs	r3, #0
 80018c6:	487e      	ldr	r0, [pc, #504]	; (8001ac0 <setTimersAccordingly+0x2e0>)
 80018c8:	f7ff fea2 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil4On = true;
 80018cc:	4b7b      	ldr	r3, [pc, #492]	; (8001abc <setTimersAccordingly+0x2dc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	701a      	strb	r2, [r3, #0]
				coil4Freq = freq;
 80018d2:	4a7c      	ldr	r2, [pc, #496]	; (8001ac4 <setTimersAccordingly+0x2e4>)
 80018d4:	88bb      	ldrh	r3, [r7, #4]
 80018d6:	8013      	strh	r3, [r2, #0]
			} else
				setTimersAccordingly(5, freq, velocity);
			break;
 80018d8:	e0da      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(5, freq, velocity);
 80018da:	79ba      	ldrb	r2, [r7, #6]
 80018dc:	88bb      	ldrh	r3, [r7, #4]
 80018de:	4619      	mov	r1, r3
 80018e0:	2005      	movs	r0, #5
 80018e2:	f7ff ff7d 	bl	80017e0 <setTimersAccordingly>
			break;
 80018e6:	e0d3      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 5:
			if (!coil5On) {
 80018e8:	4b77      	ldr	r3, [pc, #476]	; (8001ac8 <setTimersAccordingly+0x2e8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	f040 80ce 	bne.w	8001a8e <setTimersAccordingly+0x2ae>
				setTimerFrequencyPulseWidth(&COIL5, freq, velocity, COIL5_CH);
 80018f2:	79bb      	ldrb	r3, [r7, #6]
 80018f4:	b29a      	uxth	r2, r3
 80018f6:	88b9      	ldrh	r1, [r7, #4]
 80018f8:	2300      	movs	r3, #0
 80018fa:	4874      	ldr	r0, [pc, #464]	; (8001acc <setTimersAccordingly+0x2ec>)
 80018fc:	f7ff fe88 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil5On = true;
 8001900:	4b71      	ldr	r3, [pc, #452]	; (8001ac8 <setTimersAccordingly+0x2e8>)
 8001902:	2201      	movs	r2, #1
 8001904:	701a      	strb	r2, [r3, #0]
				coil5Freq = freq;
 8001906:	4a72      	ldr	r2, [pc, #456]	; (8001ad0 <setTimersAccordingly+0x2f0>)
 8001908:	88bb      	ldrh	r3, [r7, #4]
 800190a:	8013      	strh	r3, [r2, #0]
			}
			//uncommenting the else statement below will create a loop
			//else setTimersAccordingly(1, freq, velocity);
			break;
 800190c:	e0bf      	b.n	8001a8e <setTimersAccordingly+0x2ae>
		}
	}			//end if (velocity != 0)
	else if (velocity == 0) {
 800190e:	79bb      	ldrb	r3, [r7, #6]
 8001910:	2b00      	cmp	r3, #0
 8001912:	f040 80bd 	bne.w	8001a90 <setTimersAccordingly+0x2b0>
		switch (coil) {
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	3b01      	subs	r3, #1
 800191a:	2b04      	cmp	r3, #4
 800191c:	f200 80b8 	bhi.w	8001a90 <setTimersAccordingly+0x2b0>
 8001920:	a201      	add	r2, pc, #4	; (adr r2, 8001928 <setTimersAccordingly+0x148>)
 8001922:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001926:	bf00      	nop
 8001928:	0800193d 	.word	0x0800193d
 800192c:	08001977 	.word	0x08001977
 8001930:	080019b1 	.word	0x080019b1
 8001934:	080019eb 	.word	0x080019eb
 8001938:	08001a25 	.word	0x08001a25
		case 1:
			if (coil1On && coil1Freq == freq) {
 800193c:	4b56      	ldr	r3, [pc, #344]	; (8001a98 <setTimersAccordingly+0x2b8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
 8001940:	2b00      	cmp	r3, #0
 8001942:	d011      	beq.n	8001968 <setTimersAccordingly+0x188>
 8001944:	4b56      	ldr	r3, [pc, #344]	; (8001aa0 <setTimersAccordingly+0x2c0>)
 8001946:	881b      	ldrh	r3, [r3, #0]
 8001948:	88ba      	ldrh	r2, [r7, #4]
 800194a:	429a      	cmp	r2, r3
 800194c:	d10c      	bne.n	8001968 <setTimersAccordingly+0x188>
				setTimerFrequencyPulseWidth(&COIL1, 0, 0, COIL1_CH);
 800194e:	2300      	movs	r3, #0
 8001950:	2200      	movs	r2, #0
 8001952:	2100      	movs	r1, #0
 8001954:	4851      	ldr	r0, [pc, #324]	; (8001a9c <setTimersAccordingly+0x2bc>)
 8001956:	f7ff fe5b 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil1On = false;
 800195a:	4b4f      	ldr	r3, [pc, #316]	; (8001a98 <setTimersAccordingly+0x2b8>)
 800195c:	2200      	movs	r2, #0
 800195e:	701a      	strb	r2, [r3, #0]
				coil1Freq = 0;
 8001960:	4b4f      	ldr	r3, [pc, #316]	; (8001aa0 <setTimersAccordingly+0x2c0>)
 8001962:	2200      	movs	r2, #0
 8001964:	801a      	strh	r2, [r3, #0]
			} else
				setTimersAccordingly(2, freq, 0);
			break;
 8001966:	e093      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(2, freq, 0);
 8001968:	88bb      	ldrh	r3, [r7, #4]
 800196a:	2200      	movs	r2, #0
 800196c:	4619      	mov	r1, r3
 800196e:	2002      	movs	r0, #2
 8001970:	f7ff ff36 	bl	80017e0 <setTimersAccordingly>
			break;
 8001974:	e08c      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 2:
			if (coil2On && coil2Freq == freq) {
 8001976:	4b4b      	ldr	r3, [pc, #300]	; (8001aa4 <setTimersAccordingly+0x2c4>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d011      	beq.n	80019a2 <setTimersAccordingly+0x1c2>
 800197e:	4b4b      	ldr	r3, [pc, #300]	; (8001aac <setTimersAccordingly+0x2cc>)
 8001980:	881b      	ldrh	r3, [r3, #0]
 8001982:	88ba      	ldrh	r2, [r7, #4]
 8001984:	429a      	cmp	r2, r3
 8001986:	d10c      	bne.n	80019a2 <setTimersAccordingly+0x1c2>
				setTimerFrequencyPulseWidth(&COIL2, 0, 0, COIL2_CH);
 8001988:	2304      	movs	r3, #4
 800198a:	2200      	movs	r2, #0
 800198c:	2100      	movs	r1, #0
 800198e:	4846      	ldr	r0, [pc, #280]	; (8001aa8 <setTimersAccordingly+0x2c8>)
 8001990:	f7ff fe3e 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil2On = false;
 8001994:	4b43      	ldr	r3, [pc, #268]	; (8001aa4 <setTimersAccordingly+0x2c4>)
 8001996:	2200      	movs	r2, #0
 8001998:	701a      	strb	r2, [r3, #0]
				coil2Freq = 0;
 800199a:	4b44      	ldr	r3, [pc, #272]	; (8001aac <setTimersAccordingly+0x2cc>)
 800199c:	2200      	movs	r2, #0
 800199e:	801a      	strh	r2, [r3, #0]
			} else
				setTimersAccordingly(3, freq, 0);
			break;
 80019a0:	e076      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(3, freq, 0);
 80019a2:	88bb      	ldrh	r3, [r7, #4]
 80019a4:	2200      	movs	r2, #0
 80019a6:	4619      	mov	r1, r3
 80019a8:	2003      	movs	r0, #3
 80019aa:	f7ff ff19 	bl	80017e0 <setTimersAccordingly>
			break;
 80019ae:	e06f      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 3:
			if (coil3On && coil3Freq == freq) {
 80019b0:	4b3f      	ldr	r3, [pc, #252]	; (8001ab0 <setTimersAccordingly+0x2d0>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d011      	beq.n	80019dc <setTimersAccordingly+0x1fc>
 80019b8:	4b3f      	ldr	r3, [pc, #252]	; (8001ab8 <setTimersAccordingly+0x2d8>)
 80019ba:	881b      	ldrh	r3, [r3, #0]
 80019bc:	88ba      	ldrh	r2, [r7, #4]
 80019be:	429a      	cmp	r2, r3
 80019c0:	d10c      	bne.n	80019dc <setTimersAccordingly+0x1fc>
				setTimerFrequencyPulseWidth(&COIL3, 0, 0, COIL3_CH);
 80019c2:	2300      	movs	r3, #0
 80019c4:	2200      	movs	r2, #0
 80019c6:	2100      	movs	r1, #0
 80019c8:	483a      	ldr	r0, [pc, #232]	; (8001ab4 <setTimersAccordingly+0x2d4>)
 80019ca:	f7ff fe21 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil3On = false;
 80019ce:	4b38      	ldr	r3, [pc, #224]	; (8001ab0 <setTimersAccordingly+0x2d0>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	701a      	strb	r2, [r3, #0]
				coil3Freq = 0;
 80019d4:	4b38      	ldr	r3, [pc, #224]	; (8001ab8 <setTimersAccordingly+0x2d8>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	801a      	strh	r2, [r3, #0]
			} else
				setTimersAccordingly(4, freq, 0);
			break;
 80019da:	e059      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(4, freq, 0);
 80019dc:	88bb      	ldrh	r3, [r7, #4]
 80019de:	2200      	movs	r2, #0
 80019e0:	4619      	mov	r1, r3
 80019e2:	2004      	movs	r0, #4
 80019e4:	f7ff fefc 	bl	80017e0 <setTimersAccordingly>
			break;
 80019e8:	e052      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 4:
			if (coil4On && coil4Freq == freq) {
 80019ea:	4b34      	ldr	r3, [pc, #208]	; (8001abc <setTimersAccordingly+0x2dc>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d011      	beq.n	8001a16 <setTimersAccordingly+0x236>
 80019f2:	4b34      	ldr	r3, [pc, #208]	; (8001ac4 <setTimersAccordingly+0x2e4>)
 80019f4:	881b      	ldrh	r3, [r3, #0]
 80019f6:	88ba      	ldrh	r2, [r7, #4]
 80019f8:	429a      	cmp	r2, r3
 80019fa:	d10c      	bne.n	8001a16 <setTimersAccordingly+0x236>
				setTimerFrequencyPulseWidth(&COIL4, 0, 0, COIL4_CH);
 80019fc:	2300      	movs	r3, #0
 80019fe:	2200      	movs	r2, #0
 8001a00:	2100      	movs	r1, #0
 8001a02:	482f      	ldr	r0, [pc, #188]	; (8001ac0 <setTimersAccordingly+0x2e0>)
 8001a04:	f7ff fe04 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil4On = false;
 8001a08:	4b2c      	ldr	r3, [pc, #176]	; (8001abc <setTimersAccordingly+0x2dc>)
 8001a0a:	2200      	movs	r2, #0
 8001a0c:	701a      	strb	r2, [r3, #0]
				coil4Freq = 0;
 8001a0e:	4b2d      	ldr	r3, [pc, #180]	; (8001ac4 <setTimersAccordingly+0x2e4>)
 8001a10:	2200      	movs	r2, #0
 8001a12:	801a      	strh	r2, [r3, #0]
			} else
				setTimersAccordingly(5, freq, 0);
			break;
 8001a14:	e03c      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimersAccordingly(5, freq, 0);
 8001a16:	88bb      	ldrh	r3, [r7, #4]
 8001a18:	2200      	movs	r2, #0
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	2005      	movs	r0, #5
 8001a1e:	f7ff fedf 	bl	80017e0 <setTimersAccordingly>
			break;
 8001a22:	e035      	b.n	8001a90 <setTimersAccordingly+0x2b0>
		case 5:
			if (coil5On && coil5Freq == freq) {
 8001a24:	4b28      	ldr	r3, [pc, #160]	; (8001ac8 <setTimersAccordingly+0x2e8>)
 8001a26:	781b      	ldrb	r3, [r3, #0]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d011      	beq.n	8001a50 <setTimersAccordingly+0x270>
 8001a2c:	4b28      	ldr	r3, [pc, #160]	; (8001ad0 <setTimersAccordingly+0x2f0>)
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	88ba      	ldrh	r2, [r7, #4]
 8001a32:	429a      	cmp	r2, r3
 8001a34:	d10c      	bne.n	8001a50 <setTimersAccordingly+0x270>
				setTimerFrequencyPulseWidth(&COIL5, 0, 0, COIL5_CH);
 8001a36:	2300      	movs	r3, #0
 8001a38:	2200      	movs	r2, #0
 8001a3a:	2100      	movs	r1, #0
 8001a3c:	4823      	ldr	r0, [pc, #140]	; (8001acc <setTimersAccordingly+0x2ec>)
 8001a3e:	f7ff fde7 	bl	8001610 <setTimerFrequencyPulseWidth>
				coil5On = false;
 8001a42:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <setTimersAccordingly+0x2e8>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	701a      	strb	r2, [r3, #0]
				coil5Freq = 0;
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <setTimersAccordingly+0x2f0>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	801a      	strh	r2, [r3, #0]
				setTimerFrequencyPulseWidth(&COIL2, 0, 0, COIL2_CH);
				setTimerFrequencyPulseWidth(&COIL3, 0, 0, COIL3_CH);
				setTimerFrequencyPulseWidth(&COIL4, 0, 0, COIL4_CH);
				setTimerFrequencyPulseWidth(&COIL5, 0, 0, COIL5_CH);
			}
			break;
 8001a4e:	e01f      	b.n	8001a90 <setTimersAccordingly+0x2b0>
				setTimerFrequencyPulseWidth(&COIL1, 0, 0, COIL1_CH);
 8001a50:	2300      	movs	r3, #0
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	4811      	ldr	r0, [pc, #68]	; (8001a9c <setTimersAccordingly+0x2bc>)
 8001a58:	f7ff fdda 	bl	8001610 <setTimerFrequencyPulseWidth>
				setTimerFrequencyPulseWidth(&COIL2, 0, 0, COIL2_CH);
 8001a5c:	2304      	movs	r3, #4
 8001a5e:	2200      	movs	r2, #0
 8001a60:	2100      	movs	r1, #0
 8001a62:	4811      	ldr	r0, [pc, #68]	; (8001aa8 <setTimersAccordingly+0x2c8>)
 8001a64:	f7ff fdd4 	bl	8001610 <setTimerFrequencyPulseWidth>
				setTimerFrequencyPulseWidth(&COIL3, 0, 0, COIL3_CH);
 8001a68:	2300      	movs	r3, #0
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	2100      	movs	r1, #0
 8001a6e:	4811      	ldr	r0, [pc, #68]	; (8001ab4 <setTimersAccordingly+0x2d4>)
 8001a70:	f7ff fdce 	bl	8001610 <setTimerFrequencyPulseWidth>
				setTimerFrequencyPulseWidth(&COIL4, 0, 0, COIL4_CH);
 8001a74:	2300      	movs	r3, #0
 8001a76:	2200      	movs	r2, #0
 8001a78:	2100      	movs	r1, #0
 8001a7a:	4811      	ldr	r0, [pc, #68]	; (8001ac0 <setTimersAccordingly+0x2e0>)
 8001a7c:	f7ff fdc8 	bl	8001610 <setTimerFrequencyPulseWidth>
				setTimerFrequencyPulseWidth(&COIL5, 0, 0, COIL5_CH);
 8001a80:	2300      	movs	r3, #0
 8001a82:	2200      	movs	r2, #0
 8001a84:	2100      	movs	r1, #0
 8001a86:	4811      	ldr	r0, [pc, #68]	; (8001acc <setTimersAccordingly+0x2ec>)
 8001a88:	f7ff fdc2 	bl	8001610 <setTimerFrequencyPulseWidth>
			break;
 8001a8c:	e000      	b.n	8001a90 <setTimersAccordingly+0x2b0>
			break;
 8001a8e:	bf00      	nop
		} //end of switch
	} //end if velocity == 0
}
 8001a90:	bf00      	nop
 8001a92:	3708      	adds	r7, #8
 8001a94:	46bd      	mov	sp, r7
 8001a96:	bd80      	pop	{r7, pc}
 8001a98:	20000e9f 	.word	0x20000e9f
 8001a9c:	200003dc 	.word	0x200003dc
 8001aa0:	20000ea4 	.word	0x20000ea4
 8001aa4:	20000ea0 	.word	0x20000ea0
 8001aa8:	2000051c 	.word	0x2000051c
 8001aac:	20000ea6 	.word	0x20000ea6
 8001ab0:	20000ea1 	.word	0x20000ea1
 8001ab4:	2000041c 	.word	0x2000041c
 8001ab8:	20000ea8 	.word	0x20000ea8
 8001abc:	20000ea2 	.word	0x20000ea2
 8001ac0:	2000045c 	.word	0x2000045c
 8001ac4:	20000eaa 	.word	0x20000eaa
 8001ac8:	20000ea3 	.word	0x20000ea3
 8001acc:	2000055c 	.word	0x2000055c
 8001ad0:	20000eac 	.word	0x20000eac

08001ad4 <turnOffAllCoils>:

void turnOffAllCoils() {
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0
	setTimerFrequencyPulseWidth(&COIL1, 0, 0, COIL1_CH);
 8001ad8:	2300      	movs	r3, #0
 8001ada:	2200      	movs	r2, #0
 8001adc:	2100      	movs	r1, #0
 8001ade:	481d      	ldr	r0, [pc, #116]	; (8001b54 <turnOffAllCoils+0x80>)
 8001ae0:	f7ff fd96 	bl	8001610 <setTimerFrequencyPulseWidth>
	coil1On = false;
 8001ae4:	4b1c      	ldr	r3, [pc, #112]	; (8001b58 <turnOffAllCoils+0x84>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	701a      	strb	r2, [r3, #0]
	coil1Freq = 0;
 8001aea:	4b1c      	ldr	r3, [pc, #112]	; (8001b5c <turnOffAllCoils+0x88>)
 8001aec:	2200      	movs	r2, #0
 8001aee:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL2, 0, 0, COIL2_CH);
 8001af0:	2304      	movs	r3, #4
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	481a      	ldr	r0, [pc, #104]	; (8001b60 <turnOffAllCoils+0x8c>)
 8001af8:	f7ff fd8a 	bl	8001610 <setTimerFrequencyPulseWidth>
	coil2On = false;
 8001afc:	4b19      	ldr	r3, [pc, #100]	; (8001b64 <turnOffAllCoils+0x90>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	701a      	strb	r2, [r3, #0]
	coil2Freq = 0;
 8001b02:	4b19      	ldr	r3, [pc, #100]	; (8001b68 <turnOffAllCoils+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL3, 0, 0, COIL3_CH);
 8001b08:	2300      	movs	r3, #0
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	4817      	ldr	r0, [pc, #92]	; (8001b6c <turnOffAllCoils+0x98>)
 8001b10:	f7ff fd7e 	bl	8001610 <setTimerFrequencyPulseWidth>
	coil3On = false;
 8001b14:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <turnOffAllCoils+0x9c>)
 8001b16:	2200      	movs	r2, #0
 8001b18:	701a      	strb	r2, [r3, #0]
	coil3Freq = 0;
 8001b1a:	4b16      	ldr	r3, [pc, #88]	; (8001b74 <turnOffAllCoils+0xa0>)
 8001b1c:	2200      	movs	r2, #0
 8001b1e:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL4, 0, 0, COIL4_CH);
 8001b20:	2300      	movs	r3, #0
 8001b22:	2200      	movs	r2, #0
 8001b24:	2100      	movs	r1, #0
 8001b26:	4814      	ldr	r0, [pc, #80]	; (8001b78 <turnOffAllCoils+0xa4>)
 8001b28:	f7ff fd72 	bl	8001610 <setTimerFrequencyPulseWidth>
	coil4On = false;
 8001b2c:	4b13      	ldr	r3, [pc, #76]	; (8001b7c <turnOffAllCoils+0xa8>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
	coil4Freq = 0;
 8001b32:	4b13      	ldr	r3, [pc, #76]	; (8001b80 <turnOffAllCoils+0xac>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	801a      	strh	r2, [r3, #0]

	setTimerFrequencyPulseWidth(&COIL5, 0, 0, COIL5_CH);
 8001b38:	2300      	movs	r3, #0
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	4811      	ldr	r0, [pc, #68]	; (8001b84 <turnOffAllCoils+0xb0>)
 8001b40:	f7ff fd66 	bl	8001610 <setTimerFrequencyPulseWidth>
	coil5On = false;
 8001b44:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <turnOffAllCoils+0xb4>)
 8001b46:	2200      	movs	r2, #0
 8001b48:	701a      	strb	r2, [r3, #0]
	coil5Freq = 0;
 8001b4a:	4b10      	ldr	r3, [pc, #64]	; (8001b8c <turnOffAllCoils+0xb8>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	801a      	strh	r2, [r3, #0]

}
 8001b50:	bf00      	nop
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	200003dc 	.word	0x200003dc
 8001b58:	20000e9f 	.word	0x20000e9f
 8001b5c:	20000ea4 	.word	0x20000ea4
 8001b60:	2000051c 	.word	0x2000051c
 8001b64:	20000ea0 	.word	0x20000ea0
 8001b68:	20000ea6 	.word	0x20000ea6
 8001b6c:	2000041c 	.word	0x2000041c
 8001b70:	20000ea1 	.word	0x20000ea1
 8001b74:	20000ea8 	.word	0x20000ea8
 8001b78:	2000045c 	.word	0x2000045c
 8001b7c:	20000ea2 	.word	0x20000ea2
 8001b80:	20000eaa 	.word	0x20000eaa
 8001b84:	2000055c 	.word	0x2000055c
 8001b88:	20000ea3 	.word	0x20000ea3
 8001b8c:	20000eac 	.word	0x20000eac

08001b90 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001b90:	b590      	push	{r4, r7, lr}
 8001b92:	b08b      	sub	sp, #44	; 0x2c
 8001b94:	af02      	add	r7, sp, #8
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001b96:	f002 fcae 	bl	80044f6 <HAL_Init>

	/* USER CODE BEGIN Init */
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001b9a:	f001 fb1f 	bl	80031dc <SystemClock_Config>

	/* USER CODE BEGIN SysInit */
	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001b9e:	f001 ff61 	bl	8003a64 <MX_GPIO_Init>
	MX_ADC_Init();
 8001ba2:	f001 fb6b 	bl	800327c <MX_ADC_Init>
	MX_TIM2_Init();
 8001ba6:	f001 fc59 	bl	800345c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001baa:	f001 fcdf 	bl	800356c <MX_TIM3_Init>
	MX_TIM4_Init();
 8001bae:	f001 fd51 	bl	8003654 <MX_TIM4_Init>
	MX_TIM9_Init();
 8001bb2:	f001 fe41 	bl	8003838 <MX_TIM9_Init>
	MX_TIM10_Init();
 8001bb6:	f001 feb3 	bl	8003920 <MX_TIM10_Init>
	MX_TIM11_Init();
 8001bba:	f001 ff11 	bl	80039e0 <MX_TIM11_Init>
	MX_I2C2_Init();
 8001bbe:	f001 fbb7 	bl	8003330 <MX_I2C2_Init>
	MX_SPI1_Init();
 8001bc2:	f001 fbe3 	bl	800338c <MX_SPI1_Init>
	MX_SPI2_Init();
 8001bc6:	f001 fc15 	bl	80033f4 <MX_SPI2_Init>
	MX_FATFS_Init();
 8001bca:	f00a f96f 	bl	800beac <MX_FATFS_Init>
	MX_TIM6_Init();
 8001bce:	f001 fdc9 	bl	8003764 <MX_TIM6_Init>
	MX_USB_DEVICE_Init();
 8001bd2:	f00f fa85 	bl	80110e0 <MX_USB_DEVICE_Init>
	MX_TIM7_Init();
 8001bd6:	f001 fdf9 	bl	80037cc <MX_TIM7_Init>


	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);	//microseconds counter
 8001bda:	48aa      	ldr	r0, [pc, #680]	; (8001e84 <main+0x2f4>)
 8001bdc:	f006 fd10 	bl	8008600 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim7);
 8001be0:	48a9      	ldr	r0, [pc, #676]	; (8001e88 <main+0x2f8>)
 8001be2:	f006 fd0d 	bl	8008600 <HAL_TIM_Base_Start_IT>
	 * 7. Test output compare mode of timers (or even just using PeriodElapsedCallback and a delay function
	 * 8. Make a function to control status LEDs
	 */


	initLCD(&lcd, &hi2c2, MAX_ROW, 20, 0x27);
 8001be6:	2327      	movs	r3, #39	; 0x27
 8001be8:	9300      	str	r3, [sp, #0]
 8001bea:	2314      	movs	r3, #20
 8001bec:	2204      	movs	r2, #4
 8001bee:	49a7      	ldr	r1, [pc, #668]	; (8001e8c <main+0x2fc>)
 8001bf0:	48a7      	ldr	r0, [pc, #668]	; (8001e90 <main+0x300>)
 8001bf2:	f7ff fac1 	bl	8001178 <initLCD>
	setCursor(&lcd, 0, 0);
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	2100      	movs	r1, #0
 8001bfa:	48a5      	ldr	r0, [pc, #660]	; (8001e90 <main+0x300>)
 8001bfc:	f7ff fb1a 	bl	8001234 <setCursor>

	HAL_ADC_Start(&hadc);
 8001c00:	48a4      	ldr	r0, [pc, #656]	; (8001e94 <main+0x304>)
 8001c02:	f002 fe4f 	bl	80048a4 <HAL_ADC_Start>

	//HAL_Delay();
	//__HAL_TIM_GET_COUNTER(&htim16); //returns count

	HAL_GPIO_WritePin(GPIOB, Flash__wp_Pin | Flash__Hold_Pin, GPIO_PIN_SET);//active low signals
 8001c06:	2201      	movs	r2, #1
 8001c08:	2106      	movs	r1, #6
 8001c0a:	48a3      	ldr	r0, [pc, #652]	; (8001e98 <main+0x308>)
 8001c0c:	f003 fb71 	bl	80052f2 <HAL_GPIO_WritePin>
	flashInit(&flash, &hspi2, SPI2_SS_Pin, GPIOB);
 8001c10:	4ba1      	ldr	r3, [pc, #644]	; (8001e98 <main+0x308>)
 8001c12:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001c16:	49a1      	ldr	r1, [pc, #644]	; (8001e9c <main+0x30c>)
 8001c18:	48a1      	ldr	r0, [pc, #644]	; (8001ea0 <main+0x310>)
 8001c1a:	f7ff fdcb 	bl	80017b4 <flashInit>
	//uint8_t data [4] = {1, 244, 250, 69};
	//flashPageProgram(&flash, 69, &data[0], 4);

	//uint8_t data[4];
	//flashReadData(&flash, 69, &data[0], 4);
	writeStatusLED(0b11001100);
 8001c1e:	20cc      	movs	r0, #204	; 0xcc
 8001c20:	f001 ffe6 	bl	8003bf0 <writeStatusLED>

	//HAL_ADC_Start_IT(&hadc);
	//if(manu_id != 0x)

	HAL_Delay(50);
 8001c24:	2032      	movs	r0, #50	; 0x32
 8001c26:	f002 fcd5 	bl	80045d4 <HAL_Delay>
	fresult = f_mount(&fs, "", 1);
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	499d      	ldr	r1, [pc, #628]	; (8001ea4 <main+0x314>)
 8001c2e:	489e      	ldr	r0, [pc, #632]	; (8001ea8 <main+0x318>)
 8001c30:	f00e fc78 	bl	8010524 <f_mount>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461a      	mov	r2, r3
 8001c38:	4b9c      	ldr	r3, [pc, #624]	; (8001eac <main+0x31c>)
 8001c3a:	701a      	strb	r2, [r3, #0]
	if (fresult != FR_OK)
 8001c3c:	4b9b      	ldr	r3, [pc, #620]	; (8001eac <main+0x31c>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d002      	beq.n	8001c4a <main+0xba>
		printToUSB("Error mounting SD card");
 8001c44:	489a      	ldr	r0, [pc, #616]	; (8001eb0 <main+0x320>)
 8001c46:	f002 f84f 	bl	8003ce8 <printToUSB>


	/* USER CODE END 2 */

	HAL_TIM_PWM_Start(&COIL1, COIL1_CH);	//IF 1
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	4899      	ldr	r0, [pc, #612]	; (8001eb4 <main+0x324>)
 8001c4e:	f006 fdb1 	bl	80087b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL2, COIL2_CH);	//IF 2
 8001c52:	2104      	movs	r1, #4
 8001c54:	4898      	ldr	r0, [pc, #608]	; (8001eb8 <main+0x328>)
 8001c56:	f006 fdad 	bl	80087b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL3, COIL3_CH);	//IF 3
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4897      	ldr	r0, [pc, #604]	; (8001ebc <main+0x32c>)
 8001c5e:	f006 fda9 	bl	80087b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL4, COIL4_CH);	//IF 4
 8001c62:	2100      	movs	r1, #0
 8001c64:	4896      	ldr	r0, [pc, #600]	; (8001ec0 <main+0x330>)
 8001c66:	f006 fda5 	bl	80087b4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&COIL5, COIL5_CH);	//IF 5
 8001c6a:	2100      	movs	r1, #0
 8001c6c:	4895      	ldr	r0, [pc, #596]	; (8001ec4 <main+0x334>)
 8001c6e:	f006 fda1 	bl	80087b4 <HAL_TIM_PWM_Start>
	htim2.Instance->CCR1 = 0;
 8001c72:	4b90      	ldr	r3, [pc, #576]	; (8001eb4 <main+0x324>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	2200      	movs	r2, #0
 8001c78:	635a      	str	r2, [r3, #52]	; 0x34
	htim9.Instance->CCR2 = 0;
 8001c7a:	4b8f      	ldr	r3, [pc, #572]	; (8001eb8 <main+0x328>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	639a      	str	r2, [r3, #56]	; 0x38
	htim3.Instance->CCR1 = 0;
 8001c82:	4b8e      	ldr	r3, [pc, #568]	; (8001ebc <main+0x32c>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	2200      	movs	r2, #0
 8001c88:	635a      	str	r2, [r3, #52]	; 0x34
	htim4.Instance->CCR1 = 0;
 8001c8a:	4b8d      	ldr	r3, [pc, #564]	; (8001ec0 <main+0x330>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	635a      	str	r2, [r3, #52]	; 0x34
	htim10.Instance->CCR1 = 0;
 8001c92:	4b8c      	ldr	r3, [pc, #560]	; (8001ec4 <main+0x334>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	2200      	movs	r2, #0
 8001c98:	635a      	str	r2, [r3, #52]	; 0x34


	//Open SD card and store all file names in an array
	fresult = f_opendir(&dir, "");
 8001c9a:	4982      	ldr	r1, [pc, #520]	; (8001ea4 <main+0x314>)
 8001c9c:	488a      	ldr	r0, [pc, #552]	; (8001ec8 <main+0x338>)
 8001c9e:	f00f f82c 	bl	8010cfa <f_opendir>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	4b81      	ldr	r3, [pc, #516]	; (8001eac <main+0x31c>)
 8001ca8:	701a      	strb	r2, [r3, #0]

	int fileCount = 0;
 8001caa:	2300      	movs	r3, #0
 8001cac:	61fb      	str	r3, [r7, #28]
    if (fresult == FR_OK) {
 8001cae:	4b7f      	ldr	r3, [pc, #508]	; (8001eac <main+0x31c>)
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d129      	bne.n	8001d0a <main+0x17a>
        // Read the directory and store file names
        for (;;) {
        	fresult = f_readdir(&dir, &fno);
 8001cb6:	4985      	ldr	r1, [pc, #532]	; (8001ecc <main+0x33c>)
 8001cb8:	4883      	ldr	r0, [pc, #524]	; (8001ec8 <main+0x338>)
 8001cba:	f00f f8b7 	bl	8010e2c <f_readdir>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	461a      	mov	r2, r3
 8001cc2:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <main+0x31c>)
 8001cc4:	701a      	strb	r2, [r3, #0]
            if (fresult != FR_OK || fno.fname[0] == 0) {
 8001cc6:	4b79      	ldr	r3, [pc, #484]	; (8001eac <main+0x31c>)
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11a      	bne.n	8001d04 <main+0x174>
 8001cce:	4b7f      	ldr	r3, [pc, #508]	; (8001ecc <main+0x33c>)
 8001cd0:	7d9b      	ldrb	r3, [r3, #22]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d016      	beq.n	8001d04 <main+0x174>
                break; // No more files in the directory or an error occurred
            }
            if (fno.fattrib & AM_DIR) {
 8001cd6:	4b7d      	ldr	r3, [pc, #500]	; (8001ecc <main+0x33c>)
 8001cd8:	7a1b      	ldrb	r3, [r3, #8]
 8001cda:	f003 0310 	and.w	r3, r3, #16
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d10e      	bne.n	8001d00 <main+0x170>
                // Skip directories
                continue;
            }

            // Copy the file name to the array
            strncpy(fileNames[fileCount++], fno.fname, 30);
 8001ce2:	69fa      	ldr	r2, [r7, #28]
 8001ce4:	1c53      	adds	r3, r2, #1
 8001ce6:	61fb      	str	r3, [r7, #28]
 8001ce8:	4613      	mov	r3, r2
 8001cea:	011b      	lsls	r3, r3, #4
 8001cec:	1a9b      	subs	r3, r3, r2
 8001cee:	005b      	lsls	r3, r3, #1
 8001cf0:	4a77      	ldr	r2, [pc, #476]	; (8001ed0 <main+0x340>)
 8001cf2:	4413      	add	r3, r2
 8001cf4:	221e      	movs	r2, #30
 8001cf6:	4977      	ldr	r1, [pc, #476]	; (8001ed4 <main+0x344>)
 8001cf8:	4618      	mov	r0, r3
 8001cfa:	f00f fecd 	bl	8011a98 <strncpy>
 8001cfe:	e7da      	b.n	8001cb6 <main+0x126>
                continue;
 8001d00:	bf00      	nop
        	fresult = f_readdir(&dir, &fno);
 8001d02:	e7d8      	b.n	8001cb6 <main+0x126>
        }
        f_closedir(&dir);
 8001d04:	4870      	ldr	r0, [pc, #448]	; (8001ec8 <main+0x338>)
 8001d06:	f00f f86b 	bl	8010de0 <f_closedir>
    }

    //The last option is always "BACK" to mode selection
    strncpy(fileNames[fileCount], "BACK", 30);
 8001d0a:	69fa      	ldr	r2, [r7, #28]
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	011b      	lsls	r3, r3, #4
 8001d10:	1a9b      	subs	r3, r3, r2
 8001d12:	005b      	lsls	r3, r3, #1
 8001d14:	4a6e      	ldr	r2, [pc, #440]	; (8001ed0 <main+0x340>)
 8001d16:	4413      	add	r3, r2
 8001d18:	221e      	movs	r2, #30
 8001d1a:	496f      	ldr	r1, [pc, #444]	; (8001ed8 <main+0x348>)
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	f00f febb 	bl	8011a98 <strncpy>



	while (1) {
		time = HAL_GetTick();
 8001d22:	f002 fc4d 	bl	80045c0 <HAL_GetTick>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a6c      	ldr	r2, [pc, #432]	; (8001edc <main+0x34c>)
 8001d2a:	6013      	str	r3, [r2, #0]
		if(time%500==0){
			//writeStatusLED(time/1000);
			//HAL_GPIO_TogglePin(LED_Heartbeat_GPIO_Port, LED_Heartbeat_Pin);
		}

		switch (state) {
 8001d2c:	4b6c      	ldr	r3, [pc, #432]	; (8001ee0 <main+0x350>)
 8001d2e:	781b      	ldrb	r3, [r3, #0]
 8001d30:	2b03      	cmp	r3, #3
 8001d32:	f200 87b0 	bhi.w	8002c96 <main+0x1106>
 8001d36:	a201      	add	r2, pc, #4	; (adr r2, 8001d3c <main+0x1ac>)
 8001d38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d3c:	08001d4d 	.word	0x08001d4d
 8001d40:	08001f1b 	.word	0x08001f1b
 8001d44:	08002551 	.word	0x08002551
 8001d48:	08002949 	.word	0x08002949
		case MODE_SELECT:
			songNum = 0;
 8001d4c:	4b65      	ldr	r3, [pc, #404]	; (8001ee4 <main+0x354>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	701a      	strb	r2, [r3, #0]

			//List all modes
			if (!printed) {
 8001d52:	4b65      	ldr	r3, [pc, #404]	; (8001ee8 <main+0x358>)
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	2b00      	cmp	r3, #0
 8001d58:	d128      	bne.n	8001dac <main+0x21c>
				LCDPrintAtPos(&lcd, "Select mode:", 0, 0);
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	4963      	ldr	r1, [pc, #396]	; (8001eec <main+0x35c>)
 8001d60:	484b      	ldr	r0, [pc, #300]	; (8001e90 <main+0x300>)
 8001d62:	f7ff fb17 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, ">", 1, modeNum);
 8001d66:	4b62      	ldr	r3, [pc, #392]	; (8001ef0 <main+0x360>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	4961      	ldr	r1, [pc, #388]	; (8001ef4 <main+0x364>)
 8001d6e:	4848      	ldr	r0, [pc, #288]	; (8001e90 <main+0x300>)
 8001d70:	f7ff fb10 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "1.SD Card", 2, 1);
 8001d74:	2301      	movs	r3, #1
 8001d76:	2202      	movs	r2, #2
 8001d78:	495f      	ldr	r1, [pc, #380]	; (8001ef8 <main+0x368>)
 8001d7a:	4845      	ldr	r0, [pc, #276]	; (8001e90 <main+0x300>)
 8001d7c:	f7ff fb0a 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "2.Burst", 2, 2);
 8001d80:	2302      	movs	r3, #2
 8001d82:	2202      	movs	r2, #2
 8001d84:	495d      	ldr	r1, [pc, #372]	; (8001efc <main+0x36c>)
 8001d86:	4842      	ldr	r0, [pc, #264]	; (8001e90 <main+0x300>)
 8001d88:	f7ff fb04 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "3.Fixed", 2, 3);
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	2202      	movs	r2, #2
 8001d90:	495b      	ldr	r1, [pc, #364]	; (8001f00 <main+0x370>)
 8001d92:	483f      	ldr	r0, [pc, #252]	; (8001e90 <main+0x300>)
 8001d94:	f7ff fafe 	bl	8001394 <LCDPrintAtPos>
				setCursor(&lcd, 1, modeNum);
 8001d98:	4b55      	ldr	r3, [pc, #340]	; (8001ef0 <main+0x360>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	461a      	mov	r2, r3
 8001d9e:	2101      	movs	r1, #1
 8001da0:	483b      	ldr	r0, [pc, #236]	; (8001e90 <main+0x300>)
 8001da2:	f7ff fa47 	bl	8001234 <setCursor>
				printed = true;
 8001da6:	4b50      	ldr	r3, [pc, #320]	; (8001ee8 <main+0x358>)
 8001da8:	2201      	movs	r2, #1
 8001daa:	701a      	strb	r2, [r3, #0]
			}

			// Choosing the mode
			if(rotaryVal != prevRotaryVal)
 8001dac:	4b55      	ldr	r3, [pc, #340]	; (8001f04 <main+0x374>)
 8001dae:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001db2:	4b55      	ldr	r3, [pc, #340]	; (8001f08 <main+0x378>)
 8001db4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d03e      	beq.n	8001e3a <main+0x2aa>
			{
				LCDPrintAtPos(&lcd, " ", 1, modeNum);
 8001dbc:	4b4c      	ldr	r3, [pc, #304]	; (8001ef0 <main+0x360>)
 8001dbe:	781b      	ldrb	r3, [r3, #0]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	4952      	ldr	r1, [pc, #328]	; (8001f0c <main+0x37c>)
 8001dc4:	4832      	ldr	r0, [pc, #200]	; (8001e90 <main+0x300>)
 8001dc6:	f7ff fae5 	bl	8001394 <LCDPrintAtPos>

				//Move down
				if (rotaryVal > prevRotaryVal){
 8001dca:	4b4e      	ldr	r3, [pc, #312]	; (8001f04 <main+0x374>)
 8001dcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001dd0:	4b4d      	ldr	r3, [pc, #308]	; (8001f08 <main+0x378>)
 8001dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	dd0e      	ble.n	8001df8 <main+0x268>
					modeNum == MODE_NUM ? modeNum = 1 : modeNum ++;
 8001dda:	4b45      	ldr	r3, [pc, #276]	; (8001ef0 <main+0x360>)
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d103      	bne.n	8001dea <main+0x25a>
 8001de2:	4b43      	ldr	r3, [pc, #268]	; (8001ef0 <main+0x360>)
 8001de4:	2201      	movs	r2, #1
 8001de6:	701a      	strb	r2, [r3, #0]
 8001de8:	e014      	b.n	8001e14 <main+0x284>
 8001dea:	4b41      	ldr	r3, [pc, #260]	; (8001ef0 <main+0x360>)
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	3301      	adds	r3, #1
 8001df0:	b2da      	uxtb	r2, r3
 8001df2:	4b3f      	ldr	r3, [pc, #252]	; (8001ef0 <main+0x360>)
 8001df4:	701a      	strb	r2, [r3, #0]
 8001df6:	e00d      	b.n	8001e14 <main+0x284>
				}
				//Move up
				else {
					(modeNum == 1)? modeNum = MODE_NUM : modeNum --;
 8001df8:	4b3d      	ldr	r3, [pc, #244]	; (8001ef0 <main+0x360>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d103      	bne.n	8001e08 <main+0x278>
 8001e00:	4b3b      	ldr	r3, [pc, #236]	; (8001ef0 <main+0x360>)
 8001e02:	2203      	movs	r2, #3
 8001e04:	701a      	strb	r2, [r3, #0]
 8001e06:	e005      	b.n	8001e14 <main+0x284>
 8001e08:	4b39      	ldr	r3, [pc, #228]	; (8001ef0 <main+0x360>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	3b01      	subs	r3, #1
 8001e0e:	b2da      	uxtb	r2, r3
 8001e10:	4b37      	ldr	r3, [pc, #220]	; (8001ef0 <main+0x360>)
 8001e12:	701a      	strb	r2, [r3, #0]
				}

				LCDPrintAtPos(&lcd, ">", 1, modeNum);
 8001e14:	4b36      	ldr	r3, [pc, #216]	; (8001ef0 <main+0x360>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2201      	movs	r2, #1
 8001e1a:	4936      	ldr	r1, [pc, #216]	; (8001ef4 <main+0x364>)
 8001e1c:	481c      	ldr	r0, [pc, #112]	; (8001e90 <main+0x300>)
 8001e1e:	f7ff fab9 	bl	8001394 <LCDPrintAtPos>
				setCursor(&lcd, 1, modeNum);
 8001e22:	4b33      	ldr	r3, [pc, #204]	; (8001ef0 <main+0x360>)
 8001e24:	781b      	ldrb	r3, [r3, #0]
 8001e26:	461a      	mov	r2, r3
 8001e28:	2101      	movs	r1, #1
 8001e2a:	4819      	ldr	r0, [pc, #100]	; (8001e90 <main+0x300>)
 8001e2c:	f7ff fa02 	bl	8001234 <setCursor>
				prevRotaryVal =  rotaryVal;
 8001e30:	4b34      	ldr	r3, [pc, #208]	; (8001f04 <main+0x374>)
 8001e32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001e36:	4b34      	ldr	r3, [pc, #208]	; (8001f08 <main+0x378>)
 8001e38:	801a      	strh	r2, [r3, #0]
			}

			// Button pushed, change state
			if (buttonPushed) {
 8001e3a:	4b35      	ldr	r3, [pc, #212]	; (8001f10 <main+0x380>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	f000 872b 	beq.w	8002c9a <main+0x110a>
				buttonPushed = false;
 8001e44:	4b32      	ldr	r3, [pc, #200]	; (8001f10 <main+0x380>)
 8001e46:	2200      	movs	r2, #0
 8001e48:	701a      	strb	r2, [r3, #0]
				printed = false;
 8001e4a:	4b27      	ldr	r3, [pc, #156]	; (8001ee8 <main+0x358>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	701a      	strb	r2, [r3, #0]
				clearDisplay(&lcd);
 8001e50:	480f      	ldr	r0, [pc, #60]	; (8001e90 <main+0x300>)
 8001e52:	f7ff fad6 	bl	8001402 <clearDisplay>

				switch (modeNum)
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <main+0x360>)
 8001e58:	781b      	ldrb	r3, [r3, #0]
 8001e5a:	2b03      	cmp	r3, #3
 8001e5c:	d00e      	beq.n	8001e7c <main+0x2ec>
 8001e5e:	2b03      	cmp	r3, #3
 8001e60:	dc58      	bgt.n	8001f14 <main+0x384>
 8001e62:	2b01      	cmp	r3, #1
 8001e64:	d002      	beq.n	8001e6c <main+0x2dc>
 8001e66:	2b02      	cmp	r3, #2
 8001e68:	d004      	beq.n	8001e74 <main+0x2e4>
					break;
				case FIXED_MODE:
					state = FIXED_MODE;
					break;
				default:
					break;
 8001e6a:	e053      	b.n	8001f14 <main+0x384>
					state = SD_MODE;
 8001e6c:	4b1c      	ldr	r3, [pc, #112]	; (8001ee0 <main+0x350>)
 8001e6e:	2201      	movs	r2, #1
 8001e70:	701a      	strb	r2, [r3, #0]
					break;
 8001e72:	e050      	b.n	8001f16 <main+0x386>
					state = BURST_MODE;
 8001e74:	4b1a      	ldr	r3, [pc, #104]	; (8001ee0 <main+0x350>)
 8001e76:	2202      	movs	r2, #2
 8001e78:	701a      	strb	r2, [r3, #0]
					break;
 8001e7a:	e04c      	b.n	8001f16 <main+0x386>
					state = FIXED_MODE;
 8001e7c:	4b18      	ldr	r3, [pc, #96]	; (8001ee0 <main+0x350>)
 8001e7e:	2203      	movs	r2, #3
 8001e80:	701a      	strb	r2, [r3, #0]
					break;
 8001e82:	e048      	b.n	8001f16 <main+0x386>
 8001e84:	2000049c 	.word	0x2000049c
 8001e88:	200004dc 	.word	0x200004dc
 8001e8c:	200002d8 	.word	0x200002d8
 8001e90:	200005e8 	.word	0x200005e8
 8001e94:	20000284 	.word	0x20000284
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	20000384 	.word	0x20000384
 8001ea0:	200005dc 	.word	0x200005dc
 8001ea4:	080123f4 	.word	0x080123f4
 8001ea8:	20000654 	.word	0x20000654
 8001eac:	20000ab8 	.word	0x20000ab8
 8001eb0:	080123f8 	.word	0x080123f8
 8001eb4:	200003dc 	.word	0x200003dc
 8001eb8:	2000051c 	.word	0x2000051c
 8001ebc:	2000041c 	.word	0x2000041c
 8001ec0:	2000045c 	.word	0x2000045c
 8001ec4:	2000055c 	.word	0x2000055c
 8001ec8:	20000bd4 	.word	0x20000bd4
 8001ecc:	20000abc 	.word	0x20000abc
 8001ed0:	20000c34 	.word	0x20000c34
 8001ed4:	20000ad2 	.word	0x20000ad2
 8001ed8:	08012410 	.word	0x08012410
 8001edc:	20000c08 	.word	0x20000c08
 8001ee0:	20000c28 	.word	0x20000c28
 8001ee4:	20000c29 	.word	0x20000c29
 8001ee8:	20000c2c 	.word	0x20000c2c
 8001eec:	08012418 	.word	0x08012418
 8001ef0:	20000078 	.word	0x20000078
 8001ef4:	08012428 	.word	0x08012428
 8001ef8:	0801242c 	.word	0x0801242c
 8001efc:	08012438 	.word	0x08012438
 8001f00:	08012440 	.word	0x08012440
 8001f04:	20000648 	.word	0x20000648
 8001f08:	2000064a 	.word	0x2000064a
 8001f0c:	08012448 	.word	0x08012448
 8001f10:	20000650 	.word	0x20000650
					break;
 8001f14:	bf00      	nop
				}
			}

			break;
 8001f16:	f000 bec0 	b.w	8002c9a <main+0x110a>

		case SD_MODE:
			if (!isDirOpen) {
 8001f1a:	4bad      	ldr	r3, [pc, #692]	; (80021d0 <main+0x640>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d10a      	bne.n	8001f38 <main+0x3a8>
				fresult = f_opendir(&dir, "");
 8001f22:	49ac      	ldr	r1, [pc, #688]	; (80021d4 <main+0x644>)
 8001f24:	48ac      	ldr	r0, [pc, #688]	; (80021d8 <main+0x648>)
 8001f26:	f00e fee8 	bl	8010cfa <f_opendir>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	461a      	mov	r2, r3
 8001f2e:	4bab      	ldr	r3, [pc, #684]	; (80021dc <main+0x64c>)
 8001f30:	701a      	strb	r2, [r3, #0]
				isDirOpen = true;
 8001f32:	4ba7      	ldr	r3, [pc, #668]	; (80021d0 <main+0x640>)
 8001f34:	2201      	movs	r2, #1
 8001f36:	701a      	strb	r2, [r3, #0]
			}
			if (!isPlaying) {
 8001f38:	4ba9      	ldr	r3, [pc, #676]	; (80021e0 <main+0x650>)
 8001f3a:	781b      	ldrb	r3, [r3, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	f040 81b6 	bne.w	80022ae <main+0x71e>
				// No need to print again if no need to refresh
				// e.g. Going to a new page
				if (!printed) {
 8001f42:	4ba8      	ldr	r3, [pc, #672]	; (80021e4 <main+0x654>)
 8001f44:	781b      	ldrb	r3, [r3, #0]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d14b      	bne.n	8001fe2 <main+0x452>
					clearDisplay(&lcd);
 8001f4a:	48a7      	ldr	r0, [pc, #668]	; (80021e8 <main+0x658>)
 8001f4c:	f7ff fa59 	bl	8001402 <clearDisplay>
					LCDPrintAtPos(&lcd, ">", 0, songNum % MAX_ROW );
 8001f50:	4ba6      	ldr	r3, [pc, #664]	; (80021ec <main+0x65c>)
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	f003 0303 	and.w	r3, r3, #3
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	49a4      	ldr	r1, [pc, #656]	; (80021f0 <main+0x660>)
 8001f5e:	48a2      	ldr	r0, [pc, #648]	; (80021e8 <main+0x658>)
 8001f60:	f7ff fa18 	bl	8001394 <LCDPrintAtPos>
					for (int i = 0; i < MAX_ROW; i++) {
 8001f64:	2300      	movs	r3, #0
 8001f66:	61bb      	str	r3, [r7, #24]
 8001f68:	e029      	b.n	8001fbe <main+0x42e>
						if (((int)(songNum / MAX_ROW) * MAX_ROW + i) == fileCount + 1) break;
 8001f6a:	4ba0      	ldr	r3, [pc, #640]	; (80021ec <main+0x65c>)
 8001f6c:	781b      	ldrb	r3, [r3, #0]
 8001f6e:	089b      	lsrs	r3, r3, #2
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	009a      	lsls	r2, r3, #2
 8001f74:	69bb      	ldr	r3, [r7, #24]
 8001f76:	441a      	add	r2, r3
 8001f78:	69fb      	ldr	r3, [r7, #28]
 8001f7a:	3301      	adds	r3, #1
 8001f7c:	429a      	cmp	r2, r3
 8001f7e:	d022      	beq.n	8001fc6 <main+0x436>
						strncpy(displayedText, &fileNames[(int)(songNum / MAX_ROW) * MAX_ROW + i][0], MAX_CHAR_ON_SCREEN);
 8001f80:	4b9a      	ldr	r3, [pc, #616]	; (80021ec <main+0x65c>)
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	089b      	lsrs	r3, r3, #2
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	009a      	lsls	r2, r3, #2
 8001f8a:	69bb      	ldr	r3, [r7, #24]
 8001f8c:	441a      	add	r2, r3
 8001f8e:	4613      	mov	r3, r2
 8001f90:	011b      	lsls	r3, r3, #4
 8001f92:	1a9b      	subs	r3, r3, r2
 8001f94:	005b      	lsls	r3, r3, #1
 8001f96:	4a97      	ldr	r2, [pc, #604]	; (80021f4 <main+0x664>)
 8001f98:	4413      	add	r3, r2
 8001f9a:	2213      	movs	r2, #19
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	4896      	ldr	r0, [pc, #600]	; (80021f8 <main+0x668>)
 8001fa0:	f00f fd7a 	bl	8011a98 <strncpy>
						displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 8001fa4:	4b94      	ldr	r3, [pc, #592]	; (80021f8 <main+0x668>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	74da      	strb	r2, [r3, #19]
						LCDPrintAtPos(&lcd, displayedText,1, i);
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2201      	movs	r2, #1
 8001fb0:	4991      	ldr	r1, [pc, #580]	; (80021f8 <main+0x668>)
 8001fb2:	488d      	ldr	r0, [pc, #564]	; (80021e8 <main+0x658>)
 8001fb4:	f7ff f9ee 	bl	8001394 <LCDPrintAtPos>
					for (int i = 0; i < MAX_ROW; i++) {
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69bb      	ldr	r3, [r7, #24]
 8001fc0:	2b03      	cmp	r3, #3
 8001fc2:	ddd2      	ble.n	8001f6a <main+0x3da>
 8001fc4:	e000      	b.n	8001fc8 <main+0x438>
						if (((int)(songNum / MAX_ROW) * MAX_ROW + i) == fileCount + 1) break;
 8001fc6:	bf00      	nop
					}
					printed = true;
 8001fc8:	4b86      	ldr	r3, [pc, #536]	; (80021e4 <main+0x654>)
 8001fca:	2201      	movs	r2, #1
 8001fcc:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, songNum % MAX_ROW);
 8001fce:	4b87      	ldr	r3, [pc, #540]	; (80021ec <main+0x65c>)
 8001fd0:	781b      	ldrb	r3, [r3, #0]
 8001fd2:	f003 0303 	and.w	r3, r3, #3
 8001fd6:	b2db      	uxtb	r3, r3
 8001fd8:	461a      	mov	r2, r3
 8001fda:	2100      	movs	r1, #0
 8001fdc:	4882      	ldr	r0, [pc, #520]	; (80021e8 <main+0x658>)
 8001fde:	f7ff f929 	bl	8001234 <setCursor>
				}

				// If the current selected song is longer than what the screen can display,
				// give it scroll effect
				if (strlen(fileNames[songNum]) > MAX_CHAR_ON_SCREEN) {
 8001fe2:	4b82      	ldr	r3, [pc, #520]	; (80021ec <main+0x65c>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	461a      	mov	r2, r3
 8001fe8:	4613      	mov	r3, r2
 8001fea:	011b      	lsls	r3, r3, #4
 8001fec:	1a9b      	subs	r3, r3, r2
 8001fee:	005b      	lsls	r3, r3, #1
 8001ff0:	4a80      	ldr	r2, [pc, #512]	; (80021f4 <main+0x664>)
 8001ff2:	4413      	add	r3, r2
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	f7fe f8c3 	bl	8000180 <strlen>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	2b13      	cmp	r3, #19
 8001ffe:	d93e      	bls.n	800207e <main+0x4ee>
					strncpy(displayedText, &fileNames[songNum][scrollPosition], MAX_CHAR_ON_SCREEN);
 8002000:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <main+0x65c>)
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	461a      	mov	r2, r3
 8002006:	4b7d      	ldr	r3, [pc, #500]	; (80021fc <main+0x66c>)
 8002008:	781b      	ldrb	r3, [r3, #0]
 800200a:	4619      	mov	r1, r3
 800200c:	4613      	mov	r3, r2
 800200e:	011b      	lsls	r3, r3, #4
 8002010:	1a9b      	subs	r3, r3, r2
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	440b      	add	r3, r1
 8002016:	4a77      	ldr	r2, [pc, #476]	; (80021f4 <main+0x664>)
 8002018:	4413      	add	r3, r2
 800201a:	2213      	movs	r2, #19
 800201c:	4619      	mov	r1, r3
 800201e:	4876      	ldr	r0, [pc, #472]	; (80021f8 <main+0x668>)
 8002020:	f00f fd3a 	bl	8011a98 <strncpy>
					displayedText[MAX_CHAR_ON_SCREEN] = '\0';  // Null-terminate the string
 8002024:	4b74      	ldr	r3, [pc, #464]	; (80021f8 <main+0x668>)
 8002026:	2200      	movs	r2, #0
 8002028:	74da      	strb	r2, [r3, #19]

					// Display the portion on the LCD
					LCDPrintAtPos(&lcd, displayedText, 1, songNum % MAX_ROW);
 800202a:	4b70      	ldr	r3, [pc, #448]	; (80021ec <main+0x65c>)
 800202c:	781b      	ldrb	r3, [r3, #0]
 800202e:	f003 0303 	and.w	r3, r3, #3
 8002032:	b2db      	uxtb	r3, r3
 8002034:	2201      	movs	r2, #1
 8002036:	4970      	ldr	r1, [pc, #448]	; (80021f8 <main+0x668>)
 8002038:	486b      	ldr	r0, [pc, #428]	; (80021e8 <main+0x658>)
 800203a:	f7ff f9ab 	bl	8001394 <LCDPrintAtPos>

					// Increment the scroll position and wrap around
					scrollPosition++;
 800203e:	4b6f      	ldr	r3, [pc, #444]	; (80021fc <main+0x66c>)
 8002040:	781b      	ldrb	r3, [r3, #0]
 8002042:	3301      	adds	r3, #1
 8002044:	b2da      	uxtb	r2, r3
 8002046:	4b6d      	ldr	r3, [pc, #436]	; (80021fc <main+0x66c>)
 8002048:	701a      	strb	r2, [r3, #0]
					if (scrollPosition > strlen(fileNames[songNum]) - MAX_CHAR_ON_SCREEN)
 800204a:	4b6c      	ldr	r3, [pc, #432]	; (80021fc <main+0x66c>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	461c      	mov	r4, r3
 8002050:	4b66      	ldr	r3, [pc, #408]	; (80021ec <main+0x65c>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	461a      	mov	r2, r3
 8002056:	4613      	mov	r3, r2
 8002058:	011b      	lsls	r3, r3, #4
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	005b      	lsls	r3, r3, #1
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <main+0x664>)
 8002060:	4413      	add	r3, r2
 8002062:	4618      	mov	r0, r3
 8002064:	f7fe f88c 	bl	8000180 <strlen>
 8002068:	4603      	mov	r3, r0
 800206a:	3b13      	subs	r3, #19
 800206c:	429c      	cmp	r4, r3
 800206e:	d902      	bls.n	8002076 <main+0x4e6>
						scrollPosition = 0;
 8002070:	4b62      	ldr	r3, [pc, #392]	; (80021fc <main+0x66c>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
					HAL_Delay(750);
 8002076:	f240 20ee 	movw	r0, #750	; 0x2ee
 800207a:	f002 faab 	bl	80045d4 <HAL_Delay>
				}

				// Scrolling up and down to choose the song
				if(rotaryVal != prevRotaryVal)
 800207e:	4b60      	ldr	r3, [pc, #384]	; (8002200 <main+0x670>)
 8002080:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002084:	4b5f      	ldr	r3, [pc, #380]	; (8002204 <main+0x674>)
 8002086:	f9b3 3000 	ldrsh.w	r3, [r3]
 800208a:	429a      	cmp	r2, r3
 800208c:	f000 80eb 	beq.w	8002266 <main+0x6d6>
				{
					LCDPrintAtPos(&lcd, " ", 0, songNum % MAX_ROW);
 8002090:	4b56      	ldr	r3, [pc, #344]	; (80021ec <main+0x65c>)
 8002092:	781b      	ldrb	r3, [r3, #0]
 8002094:	f003 0303 	and.w	r3, r3, #3
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2200      	movs	r2, #0
 800209c:	495a      	ldr	r1, [pc, #360]	; (8002208 <main+0x678>)
 800209e:	4852      	ldr	r0, [pc, #328]	; (80021e8 <main+0x658>)
 80020a0:	f7ff f978 	bl	8001394 <LCDPrintAtPos>

					//Move down
					if (rotaryVal > prevRotaryVal)
 80020a4:	4b56      	ldr	r3, [pc, #344]	; (8002200 <main+0x670>)
 80020a6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80020aa:	4b56      	ldr	r3, [pc, #344]	; (8002204 <main+0x674>)
 80020ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020b0:	429a      	cmp	r2, r3
 80020b2:	dd48      	ble.n	8002146 <main+0x5b6>
					{
						//We need to go to a new page, so display need to refresh
						if (songNum % MAX_ROW == MAX_ROW-1) printed = false;
 80020b4:	4b4d      	ldr	r3, [pc, #308]	; (80021ec <main+0x65c>)
 80020b6:	781b      	ldrb	r3, [r3, #0]
 80020b8:	f003 0303 	and.w	r3, r3, #3
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b03      	cmp	r3, #3
 80020c0:	d103      	bne.n	80020ca <main+0x53a>
 80020c2:	4b48      	ldr	r3, [pc, #288]	; (80021e4 <main+0x654>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
 80020c8:	e029      	b.n	800211e <main+0x58e>

						// If the previous song had the scroll effect, we make the screen
						// display what it can
						else {
							if (strlen(fileNames[songNum]) > MAX_CHAR_ON_SCREEN) {
 80020ca:	4b48      	ldr	r3, [pc, #288]	; (80021ec <main+0x65c>)
 80020cc:	781b      	ldrb	r3, [r3, #0]
 80020ce:	461a      	mov	r2, r3
 80020d0:	4613      	mov	r3, r2
 80020d2:	011b      	lsls	r3, r3, #4
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	005b      	lsls	r3, r3, #1
 80020d8:	4a46      	ldr	r2, [pc, #280]	; (80021f4 <main+0x664>)
 80020da:	4413      	add	r3, r2
 80020dc:	4618      	mov	r0, r3
 80020de:	f7fe f84f 	bl	8000180 <strlen>
 80020e2:	4603      	mov	r3, r0
 80020e4:	2b13      	cmp	r3, #19
 80020e6:	d91a      	bls.n	800211e <main+0x58e>
								strncpy(displayedText, &fileNames[songNum][0], MAX_CHAR_ON_SCREEN);
 80020e8:	4b40      	ldr	r3, [pc, #256]	; (80021ec <main+0x65c>)
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	461a      	mov	r2, r3
 80020ee:	4613      	mov	r3, r2
 80020f0:	011b      	lsls	r3, r3, #4
 80020f2:	1a9b      	subs	r3, r3, r2
 80020f4:	005b      	lsls	r3, r3, #1
 80020f6:	4a3f      	ldr	r2, [pc, #252]	; (80021f4 <main+0x664>)
 80020f8:	4413      	add	r3, r2
 80020fa:	2213      	movs	r2, #19
 80020fc:	4619      	mov	r1, r3
 80020fe:	483e      	ldr	r0, [pc, #248]	; (80021f8 <main+0x668>)
 8002100:	f00f fcca 	bl	8011a98 <strncpy>
								displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 8002104:	4b3c      	ldr	r3, [pc, #240]	; (80021f8 <main+0x668>)
 8002106:	2200      	movs	r2, #0
 8002108:	74da      	strb	r2, [r3, #19]
								LCDPrintAtPos(&lcd, displayedText, 1, songNum % MAX_ROW);
 800210a:	4b38      	ldr	r3, [pc, #224]	; (80021ec <main+0x65c>)
 800210c:	781b      	ldrb	r3, [r3, #0]
 800210e:	f003 0303 	and.w	r3, r3, #3
 8002112:	b2db      	uxtb	r3, r3
 8002114:	2201      	movs	r2, #1
 8002116:	4938      	ldr	r1, [pc, #224]	; (80021f8 <main+0x668>)
 8002118:	4833      	ldr	r0, [pc, #204]	; (80021e8 <main+0x658>)
 800211a:	f7ff f93b 	bl	8001394 <LCDPrintAtPos>
							}
						}

						if (songNum == fileCount) {
 800211e:	4b33      	ldr	r3, [pc, #204]	; (80021ec <main+0x65c>)
 8002120:	781b      	ldrb	r3, [r3, #0]
 8002122:	461a      	mov	r2, r3
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	4293      	cmp	r3, r2
 8002128:	d106      	bne.n	8002138 <main+0x5a8>
							songNum = 0;
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <main+0x65c>)
 800212c:	2200      	movs	r2, #0
 800212e:	701a      	strb	r2, [r3, #0]
							printed = false;
 8002130:	4b2c      	ldr	r3, [pc, #176]	; (80021e4 <main+0x654>)
 8002132:	2200      	movs	r2, #0
 8002134:	701a      	strb	r2, [r3, #0]
 8002136:	e07d      	b.n	8002234 <main+0x6a4>
						}
						else {
							songNum ++;
 8002138:	4b2c      	ldr	r3, [pc, #176]	; (80021ec <main+0x65c>)
 800213a:	781b      	ldrb	r3, [r3, #0]
 800213c:	3301      	adds	r3, #1
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <main+0x65c>)
 8002142:	701a      	strb	r2, [r3, #0]
 8002144:	e076      	b.n	8002234 <main+0x6a4>

					//Move up
					else
					{
						//We need to go to a new page, so display need to refresh
						if (songNum % MAX_ROW == 0) {
 8002146:	4b29      	ldr	r3, [pc, #164]	; (80021ec <main+0x65c>)
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	f003 0303 	and.w	r3, r3, #3
 800214e:	b2db      	uxtb	r3, r3
 8002150:	2b00      	cmp	r3, #0
 8002152:	d103      	bne.n	800215c <main+0x5cc>
							printed = false;
 8002154:	4b23      	ldr	r3, [pc, #140]	; (80021e4 <main+0x654>)
 8002156:	2200      	movs	r2, #0
 8002158:	701a      	strb	r2, [r3, #0]
 800215a:	e029      	b.n	80021b0 <main+0x620>
						}

						// If the previous song had the scroll effect, we make the screen
						// display what it can
						else {
							if (strlen(fileNames[songNum]) > MAX_CHAR_ON_SCREEN) {
 800215c:	4b23      	ldr	r3, [pc, #140]	; (80021ec <main+0x65c>)
 800215e:	781b      	ldrb	r3, [r3, #0]
 8002160:	461a      	mov	r2, r3
 8002162:	4613      	mov	r3, r2
 8002164:	011b      	lsls	r3, r3, #4
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	4a22      	ldr	r2, [pc, #136]	; (80021f4 <main+0x664>)
 800216c:	4413      	add	r3, r2
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f806 	bl	8000180 <strlen>
 8002174:	4603      	mov	r3, r0
 8002176:	2b13      	cmp	r3, #19
 8002178:	d91a      	bls.n	80021b0 <main+0x620>
								strncpy(displayedText, &fileNames[songNum][0], MAX_CHAR_ON_SCREEN);
 800217a:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <main+0x65c>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	461a      	mov	r2, r3
 8002180:	4613      	mov	r3, r2
 8002182:	011b      	lsls	r3, r3, #4
 8002184:	1a9b      	subs	r3, r3, r2
 8002186:	005b      	lsls	r3, r3, #1
 8002188:	4a1a      	ldr	r2, [pc, #104]	; (80021f4 <main+0x664>)
 800218a:	4413      	add	r3, r2
 800218c:	2213      	movs	r2, #19
 800218e:	4619      	mov	r1, r3
 8002190:	4819      	ldr	r0, [pc, #100]	; (80021f8 <main+0x668>)
 8002192:	f00f fc81 	bl	8011a98 <strncpy>
								displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 8002196:	4b18      	ldr	r3, [pc, #96]	; (80021f8 <main+0x668>)
 8002198:	2200      	movs	r2, #0
 800219a:	74da      	strb	r2, [r3, #19]
								LCDPrintAtPos(&lcd, displayedText,1, songNum % MAX_ROW);
 800219c:	4b13      	ldr	r3, [pc, #76]	; (80021ec <main+0x65c>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2201      	movs	r2, #1
 80021a8:	4913      	ldr	r1, [pc, #76]	; (80021f8 <main+0x668>)
 80021aa:	480f      	ldr	r0, [pc, #60]	; (80021e8 <main+0x658>)
 80021ac:	f7ff f8f2 	bl	8001394 <LCDPrintAtPos>
							}
						}

						if (songNum == 0) {
 80021b0:	4b0e      	ldr	r3, [pc, #56]	; (80021ec <main+0x65c>)
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d129      	bne.n	800220c <main+0x67c>
							songNum = (int)(fileCount / MAX_ROW) * MAX_ROW;
 80021b8:	69fb      	ldr	r3, [r7, #28]
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da00      	bge.n	80021c0 <main+0x630>
 80021be:	3303      	adds	r3, #3
 80021c0:	109b      	asrs	r3, r3, #2
 80021c2:	b2db      	uxtb	r3, r3
 80021c4:	009b      	lsls	r3, r3, #2
 80021c6:	b2da      	uxtb	r2, r3
 80021c8:	4b08      	ldr	r3, [pc, #32]	; (80021ec <main+0x65c>)
 80021ca:	701a      	strb	r2, [r3, #0]
 80021cc:	e032      	b.n	8002234 <main+0x6a4>
 80021ce:	bf00      	nop
 80021d0:	20000c2a 	.word	0x20000c2a
 80021d4:	080123f4 	.word	0x080123f4
 80021d8:	20000bd4 	.word	0x20000bd4
 80021dc:	20000ab8 	.word	0x20000ab8
 80021e0:	20000c2b 	.word	0x20000c2b
 80021e4:	20000c2c 	.word	0x20000c2c
 80021e8:	200005e8 	.word	0x200005e8
 80021ec:	20000c29 	.word	0x20000c29
 80021f0:	08012428 	.word	0x08012428
 80021f4:	20000c34 	.word	0x20000c34
 80021f8:	20000e8c 	.word	0x20000e8c
 80021fc:	20000c2d 	.word	0x20000c2d
 8002200:	20000648 	.word	0x20000648
 8002204:	2000064a 	.word	0x2000064a
 8002208:	08012448 	.word	0x08012448
						}
						else if (songNum % MAX_ROW == 0) {
 800220c:	4b95      	ldr	r3, [pc, #596]	; (8002464 <main+0x8d4>)
 800220e:	781b      	ldrb	r3, [r3, #0]
 8002210:	f003 0303 	and.w	r3, r3, #3
 8002214:	b2db      	uxtb	r3, r3
 8002216:	2b00      	cmp	r3, #0
 8002218:	d106      	bne.n	8002228 <main+0x698>
							songNum -= MAX_ROW;
 800221a:	4b92      	ldr	r3, [pc, #584]	; (8002464 <main+0x8d4>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	3b04      	subs	r3, #4
 8002220:	b2da      	uxtb	r2, r3
 8002222:	4b90      	ldr	r3, [pc, #576]	; (8002464 <main+0x8d4>)
 8002224:	701a      	strb	r2, [r3, #0]
 8002226:	e005      	b.n	8002234 <main+0x6a4>
						}
						else {
							songNum --;
 8002228:	4b8e      	ldr	r3, [pc, #568]	; (8002464 <main+0x8d4>)
 800222a:	781b      	ldrb	r3, [r3, #0]
 800222c:	3b01      	subs	r3, #1
 800222e:	b2da      	uxtb	r2, r3
 8002230:	4b8c      	ldr	r3, [pc, #560]	; (8002464 <main+0x8d4>)
 8002232:	701a      	strb	r2, [r3, #0]
						}
					}

					LCDPrintAtPos(&lcd, ">", 0, songNum % MAX_ROW);
 8002234:	4b8b      	ldr	r3, [pc, #556]	; (8002464 <main+0x8d4>)
 8002236:	781b      	ldrb	r3, [r3, #0]
 8002238:	f003 0303 	and.w	r3, r3, #3
 800223c:	b2db      	uxtb	r3, r3
 800223e:	2200      	movs	r2, #0
 8002240:	4989      	ldr	r1, [pc, #548]	; (8002468 <main+0x8d8>)
 8002242:	488a      	ldr	r0, [pc, #552]	; (800246c <main+0x8dc>)
 8002244:	f7ff f8a6 	bl	8001394 <LCDPrintAtPos>
					setCursor(&lcd, 0, songNum % MAX_ROW);
 8002248:	4b86      	ldr	r3, [pc, #536]	; (8002464 <main+0x8d4>)
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	f003 0303 	and.w	r3, r3, #3
 8002250:	b2db      	uxtb	r3, r3
 8002252:	461a      	mov	r2, r3
 8002254:	2100      	movs	r1, #0
 8002256:	4885      	ldr	r0, [pc, #532]	; (800246c <main+0x8dc>)
 8002258:	f7fe ffec 	bl	8001234 <setCursor>
					prevRotaryVal =  rotaryVal;
 800225c:	4b84      	ldr	r3, [pc, #528]	; (8002470 <main+0x8e0>)
 800225e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002262:	4b84      	ldr	r3, [pc, #528]	; (8002474 <main+0x8e4>)
 8002264:	801a      	strh	r2, [r3, #0]
				}

				// Song selected, either a song or "BACK" button
				if (buttonPushed) {
 8002266:	4b84      	ldr	r3, [pc, #528]	; (8002478 <main+0x8e8>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	f000 8517 	beq.w	8002c9e <main+0x110e>
					buttonPushed = false;
 8002270:	4b81      	ldr	r3, [pc, #516]	; (8002478 <main+0x8e8>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
					printed = false;
 8002276:	4b81      	ldr	r3, [pc, #516]	; (800247c <main+0x8ec>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
					clearDisplay(&lcd);
 800227c:	487b      	ldr	r0, [pc, #492]	; (800246c <main+0x8dc>)
 800227e:	f7ff f8c0 	bl	8001402 <clearDisplay>

					if (songNum == fileCount) {
 8002282:	4b78      	ldr	r3, [pc, #480]	; (8002464 <main+0x8d4>)
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	461a      	mov	r2, r3
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4293      	cmp	r3, r2
 800228c:	d10a      	bne.n	80022a4 <main+0x714>
						isDirOpen = false;
 800228e:	4b7c      	ldr	r3, [pc, #496]	; (8002480 <main+0x8f0>)
 8002290:	2200      	movs	r2, #0
 8002292:	701a      	strb	r2, [r3, #0]
						f_closedir(&dir);
 8002294:	487b      	ldr	r0, [pc, #492]	; (8002484 <main+0x8f4>)
 8002296:	f00e fda3 	bl	8010de0 <f_closedir>
						state = MODE_SELECT;
 800229a:	4b7b      	ldr	r3, [pc, #492]	; (8002488 <main+0x8f8>)
 800229c:	2200      	movs	r2, #0
 800229e:	701a      	strb	r2, [r3, #0]
				}

			}


			break;
 80022a0:	f000 bcfd 	b.w	8002c9e <main+0x110e>
						isPlaying = true;
 80022a4:	4b79      	ldr	r3, [pc, #484]	; (800248c <main+0x8fc>)
 80022a6:	2201      	movs	r2, #1
 80022a8:	701a      	strb	r2, [r3, #0]
			break;
 80022aa:	f000 bcf8 	b.w	8002c9e <main+0x110e>
				if (!printed) {
 80022ae:	4b73      	ldr	r3, [pc, #460]	; (800247c <main+0x8ec>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d131      	bne.n	800231a <main+0x78a>
					LCDPrintAtPos(&lcd, "Playing...", 0, 0);
 80022b6:	2300      	movs	r3, #0
 80022b8:	2200      	movs	r2, #0
 80022ba:	4975      	ldr	r1, [pc, #468]	; (8002490 <main+0x900>)
 80022bc:	486b      	ldr	r0, [pc, #428]	; (800246c <main+0x8dc>)
 80022be:	f7ff f869 	bl	8001394 <LCDPrintAtPos>
					strncpy(displayedText, &fileNames[songNum][0], MAX_CHAR_ON_SCREEN);
 80022c2:	4b68      	ldr	r3, [pc, #416]	; (8002464 <main+0x8d4>)
 80022c4:	781b      	ldrb	r3, [r3, #0]
 80022c6:	461a      	mov	r2, r3
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4a70      	ldr	r2, [pc, #448]	; (8002494 <main+0x904>)
 80022d2:	4413      	add	r3, r2
 80022d4:	2213      	movs	r2, #19
 80022d6:	4619      	mov	r1, r3
 80022d8:	486f      	ldr	r0, [pc, #444]	; (8002498 <main+0x908>)
 80022da:	f00f fbdd 	bl	8011a98 <strncpy>
					displayedText[MAX_CHAR_ON_SCREEN] = '\0';
 80022de:	4b6e      	ldr	r3, [pc, #440]	; (8002498 <main+0x908>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	74da      	strb	r2, [r3, #19]
					LCDPrintAtPos(&lcd, displayedText, 1, 1);
 80022e4:	2301      	movs	r3, #1
 80022e6:	2201      	movs	r2, #1
 80022e8:	496b      	ldr	r1, [pc, #428]	; (8002498 <main+0x908>)
 80022ea:	4860      	ldr	r0, [pc, #384]	; (800246c <main+0x8dc>)
 80022ec:	f7ff f852 	bl	8001394 <LCDPrintAtPos>
					LCDPrintAtPos(&lcd, "Click to return", 0, 2);
 80022f0:	2302      	movs	r3, #2
 80022f2:	2200      	movs	r2, #0
 80022f4:	4969      	ldr	r1, [pc, #420]	; (800249c <main+0x90c>)
 80022f6:	485d      	ldr	r0, [pc, #372]	; (800246c <main+0x8dc>)
 80022f8:	f7ff f84c 	bl	8001394 <LCDPrintAtPos>
					LCDPrintAtPos(&lcd, "Ontime/Vol:", 0, 3);
 80022fc:	2303      	movs	r3, #3
 80022fe:	2200      	movs	r2, #0
 8002300:	4967      	ldr	r1, [pc, #412]	; (80024a0 <main+0x910>)
 8002302:	485a      	ldr	r0, [pc, #360]	; (800246c <main+0x8dc>)
 8002304:	f7ff f846 	bl	8001394 <LCDPrintAtPos>
					LCDPrintAtPos(&lcd, "us", 14, 3);
 8002308:	2303      	movs	r3, #3
 800230a:	220e      	movs	r2, #14
 800230c:	4965      	ldr	r1, [pc, #404]	; (80024a4 <main+0x914>)
 800230e:	4857      	ldr	r0, [pc, #348]	; (800246c <main+0x8dc>)
 8002310:	f7ff f840 	bl	8001394 <LCDPrintAtPos>
					printed = true;
 8002314:	4b59      	ldr	r3, [pc, #356]	; (800247c <main+0x8ec>)
 8002316:	2201      	movs	r2, #1
 8002318:	701a      	strb	r2, [r3, #0]
				LCDPrintNumber(&lcd, onTime, 11, 3, 3);
 800231a:	4b63      	ldr	r3, [pc, #396]	; (80024a8 <main+0x918>)
 800231c:	781b      	ldrb	r3, [r3, #0]
 800231e:	b299      	uxth	r1, r3
 8002320:	2303      	movs	r3, #3
 8002322:	9300      	str	r3, [sp, #0]
 8002324:	2303      	movs	r3, #3
 8002326:	220b      	movs	r2, #11
 8002328:	4850      	ldr	r0, [pc, #320]	; (800246c <main+0x8dc>)
 800232a:	f7fe ffeb 	bl	8001304 <LCDPrintNumber>
				setCursor(&lcd, 16, 3);
 800232e:	2203      	movs	r2, #3
 8002330:	2110      	movs	r1, #16
 8002332:	484e      	ldr	r0, [pc, #312]	; (800246c <main+0x8dc>)
 8002334:	f7fe ff7e 	bl	8001234 <setCursor>
				if(timeStarted==0){
 8002338:	4b5c      	ldr	r3, [pc, #368]	; (80024ac <main+0x91c>)
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d137      	bne.n	80023b0 <main+0x820>
					f_open(&fil, fileNames[songNum], FA_READ);
 8002340:	4b48      	ldr	r3, [pc, #288]	; (8002464 <main+0x8d4>)
 8002342:	781b      	ldrb	r3, [r3, #0]
 8002344:	461a      	mov	r2, r3
 8002346:	4613      	mov	r3, r2
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	1a9b      	subs	r3, r3, r2
 800234c:	005b      	lsls	r3, r3, #1
 800234e:	4a51      	ldr	r2, [pc, #324]	; (8002494 <main+0x904>)
 8002350:	4413      	add	r3, r2
 8002352:	2201      	movs	r2, #1
 8002354:	4619      	mov	r1, r3
 8002356:	4856      	ldr	r0, [pc, #344]	; (80024b0 <main+0x920>)
 8002358:	f00e f92a 	bl	80105b0 <f_open>
					fresult = f_read(&fil, &numEventsSplit[0], 2, &bytesRead);
 800235c:	4b55      	ldr	r3, [pc, #340]	; (80024b4 <main+0x924>)
 800235e:	2202      	movs	r2, #2
 8002360:	4955      	ldr	r1, [pc, #340]	; (80024b8 <main+0x928>)
 8002362:	4853      	ldr	r0, [pc, #332]	; (80024b0 <main+0x920>)
 8002364:	f00e fae2 	bl	801092c <f_read>
 8002368:	4603      	mov	r3, r0
 800236a:	461a      	mov	r2, r3
 800236c:	4b53      	ldr	r3, [pc, #332]	; (80024bc <main+0x92c>)
 800236e:	701a      	strb	r2, [r3, #0]
					fresult = f_read(&fil, &midiBuf[0], 6, &bytesRead);
 8002370:	4b50      	ldr	r3, [pc, #320]	; (80024b4 <main+0x924>)
 8002372:	2206      	movs	r2, #6
 8002374:	4952      	ldr	r1, [pc, #328]	; (80024c0 <main+0x930>)
 8002376:	484e      	ldr	r0, [pc, #312]	; (80024b0 <main+0x920>)
 8002378:	f00e fad8 	bl	801092c <f_read>
 800237c:	4603      	mov	r3, r0
 800237e:	461a      	mov	r2, r3
 8002380:	4b4e      	ldr	r3, [pc, #312]	; (80024bc <main+0x92c>)
 8002382:	701a      	strb	r2, [r3, #0]
					numEvents = numEventsSplit[0] | (numEventsSplit[1] << 8);
 8002384:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <main+0x928>)
 8002386:	781b      	ldrb	r3, [r3, #0]
 8002388:	b21a      	sxth	r2, r3
 800238a:	4b4b      	ldr	r3, [pc, #300]	; (80024b8 <main+0x928>)
 800238c:	785b      	ldrb	r3, [r3, #1]
 800238e:	021b      	lsls	r3, r3, #8
 8002390:	b21b      	sxth	r3, r3
 8002392:	4313      	orrs	r3, r2
 8002394:	b21b      	sxth	r3, r3
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b4a      	ldr	r3, [pc, #296]	; (80024c4 <main+0x934>)
 800239a:	801a      	strh	r2, [r3, #0]
					eventCounter++;
 800239c:	4b4a      	ldr	r3, [pc, #296]	; (80024c8 <main+0x938>)
 800239e:	881b      	ldrh	r3, [r3, #0]
 80023a0:	3301      	adds	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	4b48      	ldr	r3, [pc, #288]	; (80024c8 <main+0x938>)
 80023a6:	801a      	strh	r2, [r3, #0]
					timeStarted = time;
 80023a8:	4b48      	ldr	r3, [pc, #288]	; (80024cc <main+0x93c>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a3f      	ldr	r2, [pc, #252]	; (80024ac <main+0x91c>)
 80023ae:	6013      	str	r3, [r2, #0]
				uint32_t tNext = (midiBuf[1]) | (midiBuf[2]<<8) | (midiBuf[3]<<16);
 80023b0:	4b43      	ldr	r3, [pc, #268]	; (80024c0 <main+0x930>)
 80023b2:	785b      	ldrb	r3, [r3, #1]
 80023b4:	461a      	mov	r2, r3
 80023b6:	4b42      	ldr	r3, [pc, #264]	; (80024c0 <main+0x930>)
 80023b8:	789b      	ldrb	r3, [r3, #2]
 80023ba:	021b      	lsls	r3, r3, #8
 80023bc:	431a      	orrs	r2, r3
 80023be:	4b40      	ldr	r3, [pc, #256]	; (80024c0 <main+0x930>)
 80023c0:	78db      	ldrb	r3, [r3, #3]
 80023c2:	041b      	lsls	r3, r3, #16
 80023c4:	4313      	orrs	r3, r2
 80023c6:	617b      	str	r3, [r7, #20]
				if(tNext <= (time-timeStarted)){
 80023c8:	4b40      	ldr	r3, [pc, #256]	; (80024cc <main+0x93c>)
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	4b37      	ldr	r3, [pc, #220]	; (80024ac <main+0x91c>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	697a      	ldr	r2, [r7, #20]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	f200 809a 	bhi.w	800250e <main+0x97e>
					uint8_t track = midiBuf[0];
 80023da:	4b39      	ldr	r3, [pc, #228]	; (80024c0 <main+0x930>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	74fb      	strb	r3, [r7, #19]
					uint16_t freq = noteFreq[midiBuf[4]];
 80023e0:	4b37      	ldr	r3, [pc, #220]	; (80024c0 <main+0x930>)
 80023e2:	791b      	ldrb	r3, [r3, #4]
 80023e4:	461a      	mov	r2, r3
 80023e6:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <main+0x940>)
 80023e8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80023ec:	823b      	strh	r3, [r7, #16]
					uint8_t velocity = midiBuf[5];
 80023ee:	4b34      	ldr	r3, [pc, #208]	; (80024c0 <main+0x930>)
 80023f0:	795b      	ldrb	r3, [r3, #5]
 80023f2:	73fb      	strb	r3, [r7, #15]
					float velRatio = (float)velocity / 127.0;
 80023f4:	7bfb      	ldrb	r3, [r7, #15]
 80023f6:	4618      	mov	r0, r3
 80023f8:	f7fe fb76 	bl	8000ae8 <__aeabi_ui2f>
 80023fc:	4603      	mov	r3, r0
 80023fe:	4935      	ldr	r1, [pc, #212]	; (80024d4 <main+0x944>)
 8002400:	4618      	mov	r0, r3
 8002402:	f7fe fc7d 	bl	8000d00 <__aeabi_fdiv>
 8002406:	4603      	mov	r3, r0
 8002408:	60bb      	str	r3, [r7, #8]
					uint8_t actualOnTime = velRatio * onTime;
 800240a:	4b27      	ldr	r3, [pc, #156]	; (80024a8 <main+0x918>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f7fe fb6e 	bl	8000af0 <__aeabi_i2f>
 8002414:	4603      	mov	r3, r0
 8002416:	68b9      	ldr	r1, [r7, #8]
 8002418:	4618      	mov	r0, r3
 800241a:	f7fe fbbd 	bl	8000b98 <__aeabi_fmul>
 800241e:	4603      	mov	r3, r0
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe fd09 	bl	8000e38 <__aeabi_f2uiz>
 8002426:	4603      	mov	r3, r0
 8002428:	71fb      	strb	r3, [r7, #7]
					setTimersAccordingly(track, freq, actualOnTime);
 800242a:	79fa      	ldrb	r2, [r7, #7]
 800242c:	8a39      	ldrh	r1, [r7, #16]
 800242e:	7cfb      	ldrb	r3, [r7, #19]
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff f9d5 	bl	80017e0 <setTimersAccordingly>
					if (eventCounter < numEvents){
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <main+0x938>)
 8002438:	881a      	ldrh	r2, [r3, #0]
 800243a:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <main+0x934>)
 800243c:	881b      	ldrh	r3, [r3, #0]
 800243e:	429a      	cmp	r2, r3
 8002440:	d24a      	bcs.n	80024d8 <main+0x948>
						fresult = f_read(&fil, &midiBuf[0], 6, &bytesRead);
 8002442:	4b1c      	ldr	r3, [pc, #112]	; (80024b4 <main+0x924>)
 8002444:	2206      	movs	r2, #6
 8002446:	491e      	ldr	r1, [pc, #120]	; (80024c0 <main+0x930>)
 8002448:	4819      	ldr	r0, [pc, #100]	; (80024b0 <main+0x920>)
 800244a:	f00e fa6f 	bl	801092c <f_read>
 800244e:	4603      	mov	r3, r0
 8002450:	461a      	mov	r2, r3
 8002452:	4b1a      	ldr	r3, [pc, #104]	; (80024bc <main+0x92c>)
 8002454:	701a      	strb	r2, [r3, #0]
						eventCounter++;
 8002456:	4b1c      	ldr	r3, [pc, #112]	; (80024c8 <main+0x938>)
 8002458:	881b      	ldrh	r3, [r3, #0]
 800245a:	3301      	adds	r3, #1
 800245c:	b29a      	uxth	r2, r3
 800245e:	4b1a      	ldr	r3, [pc, #104]	; (80024c8 <main+0x938>)
 8002460:	801a      	strh	r2, [r3, #0]
 8002462:	e051      	b.n	8002508 <main+0x978>
 8002464:	20000c29 	.word	0x20000c29
 8002468:	08012428 	.word	0x08012428
 800246c:	200005e8 	.word	0x200005e8
 8002470:	20000648 	.word	0x20000648
 8002474:	2000064a 	.word	0x2000064a
 8002478:	20000650 	.word	0x20000650
 800247c:	20000c2c 	.word	0x20000c2c
 8002480:	20000c2a 	.word	0x20000c2a
 8002484:	20000bd4 	.word	0x20000bd4
 8002488:	20000c28 	.word	0x20000c28
 800248c:	20000c2b 	.word	0x20000c2b
 8002490:	0801244c 	.word	0x0801244c
 8002494:	20000c34 	.word	0x20000c34
 8002498:	20000e8c 	.word	0x20000e8c
 800249c:	08012458 	.word	0x08012458
 80024a0:	08012468 	.word	0x08012468
 80024a4:	08012474 	.word	0x08012474
 80024a8:	2000064e 	.word	0x2000064e
 80024ac:	20000c0c 	.word	0x20000c0c
 80024b0:	20000888 	.word	0x20000888
 80024b4:	20000c24 	.word	0x20000c24
 80024b8:	20000c1c 	.word	0x20000c1c
 80024bc:	20000ab8 	.word	0x20000ab8
 80024c0:	20000c14 	.word	0x20000c14
 80024c4:	20000c1e 	.word	0x20000c1e
 80024c8:	20000c20 	.word	0x20000c20
 80024cc:	20000c08 	.word	0x20000c08
 80024d0:	20000000 	.word	0x20000000
 80024d4:	42fe0000 	.word	0x42fe0000
						turnOffAllCoils();
 80024d8:	f7ff fafc 	bl	8001ad4 <turnOffAllCoils>
						eventCounter = 0;
 80024dc:	4ba0      	ldr	r3, [pc, #640]	; (8002760 <main+0xbd0>)
 80024de:	2200      	movs	r2, #0
 80024e0:	801a      	strh	r2, [r3, #0]
						timeStarted = 0;
 80024e2:	4ba0      	ldr	r3, [pc, #640]	; (8002764 <main+0xbd4>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	601a      	str	r2, [r3, #0]
						fresult = f_close(&fil);
 80024e8:	489f      	ldr	r0, [pc, #636]	; (8002768 <main+0xbd8>)
 80024ea:	f00e fbdc 	bl	8010ca6 <f_close>
 80024ee:	4603      	mov	r3, r0
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b9e      	ldr	r3, [pc, #632]	; (800276c <main+0xbdc>)
 80024f4:	701a      	strb	r2, [r3, #0]
						clearDisplay(&lcd);
 80024f6:	489e      	ldr	r0, [pc, #632]	; (8002770 <main+0xbe0>)
 80024f8:	f7fe ff83 	bl	8001402 <clearDisplay>
						printed = false;
 80024fc:	4b9d      	ldr	r3, [pc, #628]	; (8002774 <main+0xbe4>)
 80024fe:	2200      	movs	r2, #0
 8002500:	701a      	strb	r2, [r3, #0]
						isPlaying = false;
 8002502:	4b9d      	ldr	r3, [pc, #628]	; (8002778 <main+0xbe8>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
					HAL_Delay(1);
 8002508:	2001      	movs	r0, #1
 800250a:	f002 f863 	bl	80045d4 <HAL_Delay>
				if (buttonPushed) {
 800250e:	4b9b      	ldr	r3, [pc, #620]	; (800277c <main+0xbec>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	f000 83c3 	beq.w	8002c9e <main+0x110e>
					buttonPushed = false;
 8002518:	4b98      	ldr	r3, [pc, #608]	; (800277c <main+0xbec>)
 800251a:	2200      	movs	r2, #0
 800251c:	701a      	strb	r2, [r3, #0]
					turnOffAllCoils();
 800251e:	f7ff fad9 	bl	8001ad4 <turnOffAllCoils>
					eventCounter = 0;
 8002522:	4b8f      	ldr	r3, [pc, #572]	; (8002760 <main+0xbd0>)
 8002524:	2200      	movs	r2, #0
 8002526:	801a      	strh	r2, [r3, #0]
					timeStarted = 0;
 8002528:	4b8e      	ldr	r3, [pc, #568]	; (8002764 <main+0xbd4>)
 800252a:	2200      	movs	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
					fresult = f_close(&fil);
 800252e:	488e      	ldr	r0, [pc, #568]	; (8002768 <main+0xbd8>)
 8002530:	f00e fbb9 	bl	8010ca6 <f_close>
 8002534:	4603      	mov	r3, r0
 8002536:	461a      	mov	r2, r3
 8002538:	4b8c      	ldr	r3, [pc, #560]	; (800276c <main+0xbdc>)
 800253a:	701a      	strb	r2, [r3, #0]
					clearDisplay(&lcd);
 800253c:	488c      	ldr	r0, [pc, #560]	; (8002770 <main+0xbe0>)
 800253e:	f7fe ff60 	bl	8001402 <clearDisplay>
					printed = false;
 8002542:	4b8c      	ldr	r3, [pc, #560]	; (8002774 <main+0xbe4>)
 8002544:	2200      	movs	r2, #0
 8002546:	701a      	strb	r2, [r3, #0]
					isPlaying = false;
 8002548:	4b8b      	ldr	r3, [pc, #556]	; (8002778 <main+0xbe8>)
 800254a:	2200      	movs	r2, #0
 800254c:	701a      	strb	r2, [r3, #0]
			break;
 800254e:	e3a6      	b.n	8002c9e <main+0x110e>


		case BURST_MODE:
			if (!printed) {
 8002550:	4b88      	ldr	r3, [pc, #544]	; (8002774 <main+0xbe4>)
 8002552:	781b      	ldrb	r3, [r3, #0]
 8002554:	2b00      	cmp	r3, #0
 8002556:	d15c      	bne.n	8002612 <main+0xa82>
				LCDPrintAtPos(&lcd, ">", 0, field_select);
 8002558:	4b89      	ldr	r3, [pc, #548]	; (8002780 <main+0xbf0>)
 800255a:	781b      	ldrb	r3, [r3, #0]
 800255c:	2200      	movs	r2, #0
 800255e:	4989      	ldr	r1, [pc, #548]	; (8002784 <main+0xbf4>)
 8002560:	4883      	ldr	r0, [pc, #524]	; (8002770 <main+0xbe0>)
 8002562:	f7fe ff17 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "Freq:", 1, 0);
 8002566:	2300      	movs	r3, #0
 8002568:	2201      	movs	r2, #1
 800256a:	4987      	ldr	r1, [pc, #540]	; (8002788 <main+0xbf8>)
 800256c:	4880      	ldr	r0, [pc, #512]	; (8002770 <main+0xbe0>)
 800256e:	f7fe ff11 	bl	8001394 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, frequency, FREQ_DISP_POS, 0, 3);
 8002572:	4b86      	ldr	r3, [pc, #536]	; (800278c <main+0xbfc>)
 8002574:	8819      	ldrh	r1, [r3, #0]
 8002576:	2303      	movs	r3, #3
 8002578:	9300      	str	r3, [sp, #0]
 800257a:	2300      	movs	r3, #0
 800257c:	2206      	movs	r2, #6
 800257e:	487c      	ldr	r0, [pc, #496]	; (8002770 <main+0xbe0>)
 8002580:	f7fe fec0 	bl	8001304 <LCDPrintNumber>

				LCDPrintAtPos(&lcd, "T_on:", 1, 1);
 8002584:	2301      	movs	r3, #1
 8002586:	2201      	movs	r2, #1
 8002588:	4981      	ldr	r1, [pc, #516]	; (8002790 <main+0xc00>)
 800258a:	4879      	ldr	r0, [pc, #484]	; (8002770 <main+0xbe0>)
 800258c:	f7fe ff02 	bl	8001394 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, t_on, T_ON_DISP_POS, 1, 3);
 8002590:	4b80      	ldr	r3, [pc, #512]	; (8002794 <main+0xc04>)
 8002592:	8819      	ldrh	r1, [r3, #0]
 8002594:	2303      	movs	r3, #3
 8002596:	9300      	str	r3, [sp, #0]
 8002598:	2301      	movs	r3, #1
 800259a:	2206      	movs	r2, #6
 800259c:	4874      	ldr	r0, [pc, #464]	; (8002770 <main+0xbe0>)
 800259e:	f7fe feb1 	bl	8001304 <LCDPrintNumber>
				LCDPrintAtPos(&lcd, "BURST", 15, 0);
 80025a2:	2300      	movs	r3, #0
 80025a4:	220f      	movs	r2, #15
 80025a6:	497c      	ldr	r1, [pc, #496]	; (8002798 <main+0xc08>)
 80025a8:	4871      	ldr	r0, [pc, #452]	; (8002770 <main+0xbe0>)
 80025aa:	f7fe fef3 	bl	8001394 <LCDPrintAtPos>

				LCDPrintAtPos(&lcd, "T_off:", 1, 2);
 80025ae:	2302      	movs	r3, #2
 80025b0:	2201      	movs	r2, #1
 80025b2:	497a      	ldr	r1, [pc, #488]	; (800279c <main+0xc0c>)
 80025b4:	486e      	ldr	r0, [pc, #440]	; (8002770 <main+0xbe0>)
 80025b6:	f7fe feed 	bl	8001394 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, t_off, T_OFF_DISP_POS, 2, 3);
 80025ba:	4b79      	ldr	r3, [pc, #484]	; (80027a0 <main+0xc10>)
 80025bc:	8819      	ldrh	r1, [r3, #0]
 80025be:	2303      	movs	r3, #3
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2302      	movs	r3, #2
 80025c4:	2207      	movs	r2, #7
 80025c6:	486a      	ldr	r0, [pc, #424]	; (8002770 <main+0xbe0>)
 80025c8:	f7fe fe9c 	bl	8001304 <LCDPrintNumber>

				LCDPrintAtPos(&lcd, "BACK", 16, 2);
 80025cc:	2302      	movs	r3, #2
 80025ce:	2210      	movs	r2, #16
 80025d0:	4974      	ldr	r1, [pc, #464]	; (80027a4 <main+0xc14>)
 80025d2:	4867      	ldr	r0, [pc, #412]	; (8002770 <main+0xbe0>)
 80025d4:	f7fe fede 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "Ontime:", 8, 3);
 80025d8:	2303      	movs	r3, #3
 80025da:	2208      	movs	r2, #8
 80025dc:	4972      	ldr	r1, [pc, #456]	; (80027a8 <main+0xc18>)
 80025de:	4864      	ldr	r0, [pc, #400]	; (8002770 <main+0xbe0>)
 80025e0:	f7fe fed8 	bl	8001394 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, onTime, 15, 3, 3);
 80025e4:	4b71      	ldr	r3, [pc, #452]	; (80027ac <main+0xc1c>)
 80025e6:	781b      	ldrb	r3, [r3, #0]
 80025e8:	b299      	uxth	r1, r3
 80025ea:	2303      	movs	r3, #3
 80025ec:	9300      	str	r3, [sp, #0]
 80025ee:	2303      	movs	r3, #3
 80025f0:	220f      	movs	r2, #15
 80025f2:	485f      	ldr	r0, [pc, #380]	; (8002770 <main+0xbe0>)
 80025f4:	f7fe fe86 	bl	8001304 <LCDPrintNumber>
				LCDPrintAtPos(&lcd, "us", 18, 3);
 80025f8:	2303      	movs	r3, #3
 80025fa:	2212      	movs	r2, #18
 80025fc:	496c      	ldr	r1, [pc, #432]	; (80027b0 <main+0xc20>)
 80025fe:	485c      	ldr	r0, [pc, #368]	; (8002770 <main+0xbe0>)
 8002600:	f7fe fec8 	bl	8001394 <LCDPrintAtPos>
				setCursor(&lcd, 0, field_select);
 8002604:	4b5e      	ldr	r3, [pc, #376]	; (8002780 <main+0xbf0>)
 8002606:	781b      	ldrb	r3, [r3, #0]
 8002608:	461a      	mov	r2, r3
 800260a:	2100      	movs	r1, #0
 800260c:	4858      	ldr	r0, [pc, #352]	; (8002770 <main+0xbe0>)
 800260e:	f7fe fe11 	bl	8001234 <setCursor>
			}


			if (!isPlaying) {
 8002612:	4b59      	ldr	r3, [pc, #356]	; (8002778 <main+0xbe8>)
 8002614:	781b      	ldrb	r3, [r3, #0]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d12f      	bne.n	800267a <main+0xaea>
				if (!printed) {
 800261a:	4b56      	ldr	r3, [pc, #344]	; (8002774 <main+0xbe4>)
 800261c:	781b      	ldrb	r3, [r3, #0]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10f      	bne.n	8002642 <main+0xab2>
					LCDPrintAtPos(&lcd, "Play", 1, 3);
 8002622:	2303      	movs	r3, #3
 8002624:	2201      	movs	r2, #1
 8002626:	4963      	ldr	r1, [pc, #396]	; (80027b4 <main+0xc24>)
 8002628:	4851      	ldr	r0, [pc, #324]	; (8002770 <main+0xbe0>)
 800262a:	f7fe feb3 	bl	8001394 <LCDPrintAtPos>
					printed = true;
 800262e:	4b51      	ldr	r3, [pc, #324]	; (8002774 <main+0xbe4>)
 8002630:	2201      	movs	r2, #1
 8002632:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, field_select);
 8002634:	4b52      	ldr	r3, [pc, #328]	; (8002780 <main+0xbf0>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	461a      	mov	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	484c      	ldr	r0, [pc, #304]	; (8002770 <main+0xbe0>)
 800263e:	f7fe fdf9 	bl	8001234 <setCursor>
				}
				if (onTime != prevOnTime) {
 8002642:	4b5a      	ldr	r3, [pc, #360]	; (80027ac <main+0xc1c>)
 8002644:	781a      	ldrb	r2, [r3, #0]
 8002646:	4b5c      	ldr	r3, [pc, #368]	; (80027b8 <main+0xc28>)
 8002648:	781b      	ldrb	r3, [r3, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d05f      	beq.n	800270e <main+0xb7e>
					prevOnTime = onTime;
 800264e:	4b57      	ldr	r3, [pc, #348]	; (80027ac <main+0xc1c>)
 8002650:	781a      	ldrb	r2, [r3, #0]
 8002652:	4b59      	ldr	r3, [pc, #356]	; (80027b8 <main+0xc28>)
 8002654:	701a      	strb	r2, [r3, #0]
					LCDPrintNumber(&lcd, onTime, 15, 3, 3);
 8002656:	4b55      	ldr	r3, [pc, #340]	; (80027ac <main+0xc1c>)
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	b299      	uxth	r1, r3
 800265c:	2303      	movs	r3, #3
 800265e:	9300      	str	r3, [sp, #0]
 8002660:	2303      	movs	r3, #3
 8002662:	220f      	movs	r2, #15
 8002664:	4842      	ldr	r0, [pc, #264]	; (8002770 <main+0xbe0>)
 8002666:	f7fe fe4d 	bl	8001304 <LCDPrintNumber>
					setCursor(&lcd, 0, field_select);
 800266a:	4b45      	ldr	r3, [pc, #276]	; (8002780 <main+0xbf0>)
 800266c:	781b      	ldrb	r3, [r3, #0]
 800266e:	461a      	mov	r2, r3
 8002670:	2100      	movs	r1, #0
 8002672:	483f      	ldr	r0, [pc, #252]	; (8002770 <main+0xbe0>)
 8002674:	f7fe fdde 	bl	8001234 <setCursor>
 8002678:	e049      	b.n	800270e <main+0xb7e>

			}

			//isPlaying = true
			else {
				if (!printed) {
 800267a:	4b3e      	ldr	r3, [pc, #248]	; (8002774 <main+0xbe4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b00      	cmp	r3, #0
 8002680:	d10f      	bne.n	80026a2 <main+0xb12>
					LCDPrintAtPos(&lcd, "Pause", 1, 3);
 8002682:	2303      	movs	r3, #3
 8002684:	2201      	movs	r2, #1
 8002686:	494d      	ldr	r1, [pc, #308]	; (80027bc <main+0xc2c>)
 8002688:	4839      	ldr	r0, [pc, #228]	; (8002770 <main+0xbe0>)
 800268a:	f7fe fe83 	bl	8001394 <LCDPrintAtPos>
					printed = true;
 800268e:	4b39      	ldr	r3, [pc, #228]	; (8002774 <main+0xbe4>)
 8002690:	2201      	movs	r2, #1
 8002692:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, field_select);
 8002694:	4b3a      	ldr	r3, [pc, #232]	; (8002780 <main+0xbf0>)
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	461a      	mov	r2, r3
 800269a:	2100      	movs	r1, #0
 800269c:	4834      	ldr	r0, [pc, #208]	; (8002770 <main+0xbe0>)
 800269e:	f7fe fdc9 	bl	8001234 <setCursor>
				}

				if (!inCycle) {
 80026a2:	4b47      	ldr	r3, [pc, #284]	; (80027c0 <main+0xc30>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d103      	bne.n	80026b2 <main+0xb22>
					timeStarted = time;
 80026aa:	4b46      	ldr	r3, [pc, #280]	; (80027c4 <main+0xc34>)
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	4a2d      	ldr	r2, [pc, #180]	; (8002764 <main+0xbd4>)
 80026b0:	6013      	str	r3, [r2, #0]
				}
				if (time <= timeStarted + t_on + t_off) {
 80026b2:	4b38      	ldr	r3, [pc, #224]	; (8002794 <main+0xc04>)
 80026b4:	881b      	ldrh	r3, [r3, #0]
 80026b6:	461a      	mov	r2, r3
 80026b8:	4b2a      	ldr	r3, [pc, #168]	; (8002764 <main+0xbd4>)
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	4413      	add	r3, r2
 80026be:	4a38      	ldr	r2, [pc, #224]	; (80027a0 <main+0xc10>)
 80026c0:	8812      	ldrh	r2, [r2, #0]
 80026c2:	441a      	add	r2, r3
 80026c4:	4b3f      	ldr	r3, [pc, #252]	; (80027c4 <main+0xc34>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d31d      	bcc.n	8002708 <main+0xb78>
					inCycle = true;
 80026cc:	4b3c      	ldr	r3, [pc, #240]	; (80027c0 <main+0xc30>)
 80026ce:	2201      	movs	r2, #1
 80026d0:	701a      	strb	r2, [r3, #0]
					if (time <= timeStarted + t_on) {
 80026d2:	4b30      	ldr	r3, [pc, #192]	; (8002794 <main+0xc04>)
 80026d4:	881b      	ldrh	r3, [r3, #0]
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b22      	ldr	r3, [pc, #136]	; (8002764 <main+0xbd4>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	441a      	add	r2, r3
 80026de:	4b39      	ldr	r3, [pc, #228]	; (80027c4 <main+0xc34>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d309      	bcc.n	80026fa <main+0xb6a>
						setTimerFrequencyPulseWidth(&COIL1, frequency, onTime, COIL1_CH);
 80026e6:	4b29      	ldr	r3, [pc, #164]	; (800278c <main+0xbfc>)
 80026e8:	8819      	ldrh	r1, [r3, #0]
 80026ea:	4b30      	ldr	r3, [pc, #192]	; (80027ac <main+0xc1c>)
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	b29a      	uxth	r2, r3
 80026f0:	2300      	movs	r3, #0
 80026f2:	4835      	ldr	r0, [pc, #212]	; (80027c8 <main+0xc38>)
 80026f4:	f7fe ff8c 	bl	8001610 <setTimerFrequencyPulseWidth>
 80026f8:	e009      	b.n	800270e <main+0xb7e>
					}
					else {
						setTimerFrequencyPulseWidth(&COIL1, 0, 0, COIL1_CH);
 80026fa:	2300      	movs	r3, #0
 80026fc:	2200      	movs	r2, #0
 80026fe:	2100      	movs	r1, #0
 8002700:	4831      	ldr	r0, [pc, #196]	; (80027c8 <main+0xc38>)
 8002702:	f7fe ff85 	bl	8001610 <setTimerFrequencyPulseWidth>
 8002706:	e002      	b.n	800270e <main+0xb7e>
					}
				}
				else inCycle = false;
 8002708:	4b2d      	ldr	r3, [pc, #180]	; (80027c0 <main+0xc30>)
 800270a:	2200      	movs	r2, #0
 800270c:	701a      	strb	r2, [r3, #0]


			}

			switch (submode) {
 800270e:	4b2f      	ldr	r3, [pc, #188]	; (80027cc <main+0xc3c>)
 8002710:	781b      	ldrb	r3, [r3, #0]
 8002712:	2b02      	cmp	r3, #2
 8002714:	d01a      	beq.n	800274c <main+0xbbc>
 8002716:	2b02      	cmp	r3, #2
 8002718:	dc5c      	bgt.n	80027d4 <main+0xc44>
 800271a:	2b00      	cmp	r3, #0
 800271c:	d002      	beq.n	8002724 <main+0xb94>
 800271e:	2b01      	cmp	r3, #1
 8002720:	d00a      	beq.n	8002738 <main+0xba8>
				changeNumber(&t_off, MAX_TIME_OFF, T_OFF_DISP_POS);

				break;

			default:
				break;
 8002722:	e057      	b.n	80027d4 <main+0xc44>
				inSubmode = true;
 8002724:	4b2a      	ldr	r3, [pc, #168]	; (80027d0 <main+0xc40>)
 8002726:	2201      	movs	r2, #1
 8002728:	701a      	strb	r2, [r3, #0]
				changeNumber(&frequency, MAX_FREQUENCY, FREQ_DISP_POS);
 800272a:	2206      	movs	r2, #6
 800272c:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002730:	4816      	ldr	r0, [pc, #88]	; (800278c <main+0xbfc>)
 8002732:	f000 fb23 	bl	8002d7c <changeNumber>
				break;
 8002736:	e04e      	b.n	80027d6 <main+0xc46>
				inSubmode = true;
 8002738:	4b25      	ldr	r3, [pc, #148]	; (80027d0 <main+0xc40>)
 800273a:	2201      	movs	r2, #1
 800273c:	701a      	strb	r2, [r3, #0]
				changeNumber(&t_on, MAX_TIME_ON, T_ON_DISP_POS);
 800273e:	2206      	movs	r2, #6
 8002740:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002744:	4813      	ldr	r0, [pc, #76]	; (8002794 <main+0xc04>)
 8002746:	f000 fb19 	bl	8002d7c <changeNumber>
				break;
 800274a:	e044      	b.n	80027d6 <main+0xc46>
				inSubmode = true;
 800274c:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <main+0xc40>)
 800274e:	2201      	movs	r2, #1
 8002750:	701a      	strb	r2, [r3, #0]
				changeNumber(&t_off, MAX_TIME_OFF, T_OFF_DISP_POS);
 8002752:	2207      	movs	r2, #7
 8002754:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8002758:	4811      	ldr	r0, [pc, #68]	; (80027a0 <main+0xc10>)
 800275a:	f000 fb0f 	bl	8002d7c <changeNumber>
				break;
 800275e:	e03a      	b.n	80027d6 <main+0xc46>
 8002760:	20000c20 	.word	0x20000c20
 8002764:	20000c0c 	.word	0x20000c0c
 8002768:	20000888 	.word	0x20000888
 800276c:	20000ab8 	.word	0x20000ab8
 8002770:	200005e8 	.word	0x200005e8
 8002774:	20000c2c 	.word	0x20000c2c
 8002778:	20000c2b 	.word	0x20000c2b
 800277c:	20000650 	.word	0x20000650
 8002780:	20000c31 	.word	0x20000c31
 8002784:	08012428 	.word	0x08012428
 8002788:	08012478 	.word	0x08012478
 800278c:	2000007a 	.word	0x2000007a
 8002790:	08012480 	.word	0x08012480
 8002794:	2000007e 	.word	0x2000007e
 8002798:	08012488 	.word	0x08012488
 800279c:	08012490 	.word	0x08012490
 80027a0:	20000080 	.word	0x20000080
 80027a4:	08012410 	.word	0x08012410
 80027a8:	08012498 	.word	0x08012498
 80027ac:	2000064e 	.word	0x2000064e
 80027b0:	08012474 	.word	0x08012474
 80027b4:	080124a0 	.word	0x080124a0
 80027b8:	2000064f 	.word	0x2000064f
 80027bc:	080124a8 	.word	0x080124a8
 80027c0:	20000c2e 	.word	0x20000c2e
 80027c4:	20000c08 	.word	0x20000c08
 80027c8:	200003dc 	.word	0x200003dc
 80027cc:	20000082 	.word	0x20000082
 80027d0:	20000c32 	.word	0x20000c32
				break;
 80027d4:	bf00      	nop
			}

			if (!inSubmode) {
 80027d6:	4b98      	ldr	r3, [pc, #608]	; (8002a38 <main+0xea8>)
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f040 8261 	bne.w	8002ca2 <main+0x1112>
			// Choosing the field to config
				if(rotaryVal != prevRotaryVal)
 80027e0:	4b96      	ldr	r3, [pc, #600]	; (8002a3c <main+0xeac>)
 80027e2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80027e6:	4b96      	ldr	r3, [pc, #600]	; (8002a40 <main+0xeb0>)
 80027e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d054      	beq.n	800289a <main+0xd0a>
				{
					//BACK is displayed at the bottom right
					if (field_select == B_BACK) {
 80027f0:	4b94      	ldr	r3, [pc, #592]	; (8002a44 <main+0xeb4>)
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b04      	cmp	r3, #4
 80027f6:	d106      	bne.n	8002806 <main+0xc76>
						LCDPrintAtPos(&lcd, " ", 15, 2);
 80027f8:	2302      	movs	r3, #2
 80027fa:	220f      	movs	r2, #15
 80027fc:	4992      	ldr	r1, [pc, #584]	; (8002a48 <main+0xeb8>)
 80027fe:	4893      	ldr	r0, [pc, #588]	; (8002a4c <main+0xebc>)
 8002800:	f7fe fdc8 	bl	8001394 <LCDPrintAtPos>
 8002804:	e006      	b.n	8002814 <main+0xc84>
					}
					else LCDPrintAtPos(&lcd, " ", 0, field_select);
 8002806:	4b8f      	ldr	r3, [pc, #572]	; (8002a44 <main+0xeb4>)
 8002808:	781b      	ldrb	r3, [r3, #0]
 800280a:	2200      	movs	r2, #0
 800280c:	498e      	ldr	r1, [pc, #568]	; (8002a48 <main+0xeb8>)
 800280e:	488f      	ldr	r0, [pc, #572]	; (8002a4c <main+0xebc>)
 8002810:	f7fe fdc0 	bl	8001394 <LCDPrintAtPos>

					//Move down
					if (rotaryVal > prevRotaryVal){
 8002814:	4b89      	ldr	r3, [pc, #548]	; (8002a3c <main+0xeac>)
 8002816:	f9b3 2000 	ldrsh.w	r2, [r3]
 800281a:	4b89      	ldr	r3, [pc, #548]	; (8002a40 <main+0xeb0>)
 800281c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002820:	429a      	cmp	r2, r3
 8002822:	dd0e      	ble.n	8002842 <main+0xcb2>
						field_select == BURST_STATE_NUM ? field_select = 0 : field_select ++;
 8002824:	4b87      	ldr	r3, [pc, #540]	; (8002a44 <main+0xeb4>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	2b04      	cmp	r3, #4
 800282a:	d103      	bne.n	8002834 <main+0xca4>
 800282c:	4b85      	ldr	r3, [pc, #532]	; (8002a44 <main+0xeb4>)
 800282e:	2200      	movs	r2, #0
 8002830:	701a      	strb	r2, [r3, #0]
 8002832:	e014      	b.n	800285e <main+0xcce>
 8002834:	4b83      	ldr	r3, [pc, #524]	; (8002a44 <main+0xeb4>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	3301      	adds	r3, #1
 800283a:	b2da      	uxtb	r2, r3
 800283c:	4b81      	ldr	r3, [pc, #516]	; (8002a44 <main+0xeb4>)
 800283e:	701a      	strb	r2, [r3, #0]
 8002840:	e00d      	b.n	800285e <main+0xcce>
					}
					//Move up
					else {
						(field_select == 0)? field_select = BURST_STATE_NUM : field_select --;
 8002842:	4b80      	ldr	r3, [pc, #512]	; (8002a44 <main+0xeb4>)
 8002844:	781b      	ldrb	r3, [r3, #0]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d103      	bne.n	8002852 <main+0xcc2>
 800284a:	4b7e      	ldr	r3, [pc, #504]	; (8002a44 <main+0xeb4>)
 800284c:	2204      	movs	r2, #4
 800284e:	701a      	strb	r2, [r3, #0]
 8002850:	e005      	b.n	800285e <main+0xcce>
 8002852:	4b7c      	ldr	r3, [pc, #496]	; (8002a44 <main+0xeb4>)
 8002854:	781b      	ldrb	r3, [r3, #0]
 8002856:	3b01      	subs	r3, #1
 8002858:	b2da      	uxtb	r2, r3
 800285a:	4b7a      	ldr	r3, [pc, #488]	; (8002a44 <main+0xeb4>)
 800285c:	701a      	strb	r2, [r3, #0]
					}

					//BACK is displayed at the bottom right
					if (field_select == B_BACK) {
 800285e:	4b79      	ldr	r3, [pc, #484]	; (8002a44 <main+0xeb4>)
 8002860:	781b      	ldrb	r3, [r3, #0]
 8002862:	2b04      	cmp	r3, #4
 8002864:	d106      	bne.n	8002874 <main+0xce4>
						LCDPrintAtPos(&lcd, ">", 15, 2);
 8002866:	2302      	movs	r3, #2
 8002868:	220f      	movs	r2, #15
 800286a:	4979      	ldr	r1, [pc, #484]	; (8002a50 <main+0xec0>)
 800286c:	4877      	ldr	r0, [pc, #476]	; (8002a4c <main+0xebc>)
 800286e:	f7fe fd91 	bl	8001394 <LCDPrintAtPos>
 8002872:	e006      	b.n	8002882 <main+0xcf2>
					}
					else LCDPrintAtPos(&lcd, ">", 0, field_select);
 8002874:	4b73      	ldr	r3, [pc, #460]	; (8002a44 <main+0xeb4>)
 8002876:	781b      	ldrb	r3, [r3, #0]
 8002878:	2200      	movs	r2, #0
 800287a:	4975      	ldr	r1, [pc, #468]	; (8002a50 <main+0xec0>)
 800287c:	4873      	ldr	r0, [pc, #460]	; (8002a4c <main+0xebc>)
 800287e:	f7fe fd89 	bl	8001394 <LCDPrintAtPos>
					setCursor(&lcd, 0, field_select);
 8002882:	4b70      	ldr	r3, [pc, #448]	; (8002a44 <main+0xeb4>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	461a      	mov	r2, r3
 8002888:	2100      	movs	r1, #0
 800288a:	4870      	ldr	r0, [pc, #448]	; (8002a4c <main+0xebc>)
 800288c:	f7fe fcd2 	bl	8001234 <setCursor>

					prevRotaryVal =  rotaryVal;
 8002890:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <main+0xeac>)
 8002892:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002896:	4b6a      	ldr	r3, [pc, #424]	; (8002a40 <main+0xeb0>)
 8002898:	801a      	strh	r2, [r3, #0]
				}

				if (buttonPushed) {
 800289a:	4b6e      	ldr	r3, [pc, #440]	; (8002a54 <main+0xec4>)
 800289c:	781b      	ldrb	r3, [r3, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	f000 81ff 	beq.w	8002ca2 <main+0x1112>
					buttonPushed = false;
 80028a4:	4b6b      	ldr	r3, [pc, #428]	; (8002a54 <main+0xec4>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]

					switch (field_select) {
 80028aa:	4b66      	ldr	r3, [pc, #408]	; (8002a44 <main+0xeb4>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d848      	bhi.n	8002944 <main+0xdb4>
 80028b2:	a201      	add	r2, pc, #4	; (adr r2, 80028b8 <main+0xd28>)
 80028b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b8:	080028cd 	.word	0x080028cd
 80028bc:	080028d5 	.word	0x080028d5
 80028c0:	080028dd 	.word	0x080028dd
 80028c4:	080028e5 	.word	0x080028e5
 80028c8:	08002913 	.word	0x08002913
					case B_FREQUENCY:
						submode = B_FREQUENCY;
 80028cc:	4b62      	ldr	r3, [pc, #392]	; (8002a58 <main+0xec8>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
						break;
 80028d2:	e038      	b.n	8002946 <main+0xdb6>

					case B_TON:
						submode = B_TON;
 80028d4:	4b60      	ldr	r3, [pc, #384]	; (8002a58 <main+0xec8>)
 80028d6:	2201      	movs	r2, #1
 80028d8:	701a      	strb	r2, [r3, #0]
						break;
 80028da:	e034      	b.n	8002946 <main+0xdb6>

					case B_TOFF:
						submode = B_TOFF;
 80028dc:	4b5e      	ldr	r3, [pc, #376]	; (8002a58 <main+0xec8>)
 80028de:	2202      	movs	r2, #2
 80028e0:	701a      	strb	r2, [r3, #0]
						break;
 80028e2:	e030      	b.n	8002946 <main+0xdb6>

					case B_PLAY_PAUSE:
						printed = false;
 80028e4:	4b5d      	ldr	r3, [pc, #372]	; (8002a5c <main+0xecc>)
 80028e6:	2200      	movs	r2, #0
 80028e8:	701a      	strb	r2, [r3, #0]
						clearDisplay(&lcd);
 80028ea:	4858      	ldr	r0, [pc, #352]	; (8002a4c <main+0xebc>)
 80028ec:	f7fe fd89 	bl	8001402 <clearDisplay>
						if (isPlaying) {
 80028f0:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <main+0xed0>)
 80028f2:	781b      	ldrb	r3, [r3, #0]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d001      	beq.n	80028fc <main+0xd6c>
							turnOffAllCoils();
 80028f8:	f7ff f8ec 	bl	8001ad4 <turnOffAllCoils>
						}
						isPlaying = !isPlaying;
 80028fc:	4b58      	ldr	r3, [pc, #352]	; (8002a60 <main+0xed0>)
 80028fe:	781b      	ldrb	r3, [r3, #0]
 8002900:	2b00      	cmp	r3, #0
 8002902:	bf0c      	ite	eq
 8002904:	2301      	moveq	r3, #1
 8002906:	2300      	movne	r3, #0
 8002908:	b2db      	uxtb	r3, r3
 800290a:	461a      	mov	r2, r3
 800290c:	4b54      	ldr	r3, [pc, #336]	; (8002a60 <main+0xed0>)
 800290e:	701a      	strb	r2, [r3, #0]

						break;
 8002910:	e019      	b.n	8002946 <main+0xdb6>

					case B_BACK:
						submode = -1;
 8002912:	4b51      	ldr	r3, [pc, #324]	; (8002a58 <main+0xec8>)
 8002914:	22ff      	movs	r2, #255	; 0xff
 8002916:	701a      	strb	r2, [r3, #0]
						printed = false;
 8002918:	4b50      	ldr	r3, [pc, #320]	; (8002a5c <main+0xecc>)
 800291a:	2200      	movs	r2, #0
 800291c:	701a      	strb	r2, [r3, #0]
						clearDisplay(&lcd);
 800291e:	484b      	ldr	r0, [pc, #300]	; (8002a4c <main+0xebc>)
 8002920:	f7fe fd6f 	bl	8001402 <clearDisplay>
						field_select = 0;
 8002924:	4b47      	ldr	r3, [pc, #284]	; (8002a44 <main+0xeb4>)
 8002926:	2200      	movs	r2, #0
 8002928:	701a      	strb	r2, [r3, #0]
						if (isPlaying) {
 800292a:	4b4d      	ldr	r3, [pc, #308]	; (8002a60 <main+0xed0>)
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d004      	beq.n	800293c <main+0xdac>
							turnOffAllCoils();
 8002932:	f7ff f8cf 	bl	8001ad4 <turnOffAllCoils>
							isPlaying = false;
 8002936:	4b4a      	ldr	r3, [pc, #296]	; (8002a60 <main+0xed0>)
 8002938:	2200      	movs	r2, #0
 800293a:	701a      	strb	r2, [r3, #0]
						}
						state = MODE_SELECT;
 800293c:	4b49      	ldr	r3, [pc, #292]	; (8002a64 <main+0xed4>)
 800293e:	2200      	movs	r2, #0
 8002940:	701a      	strb	r2, [r3, #0]
						break;
 8002942:	e000      	b.n	8002946 <main+0xdb6>

					default:
						break;
 8002944:	bf00      	nop
					}
				}
			}


			break;
 8002946:	e1ac      	b.n	8002ca2 <main+0x1112>

		case FIXED_MODE:
			if (!printed) {
 8002948:	4b44      	ldr	r3, [pc, #272]	; (8002a5c <main+0xecc>)
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b00      	cmp	r3, #0
 800294e:	d13e      	bne.n	80029ce <main+0xe3e>
				LCDPrintAtPos(&lcd, ">", 0, field_select);
 8002950:	4b3c      	ldr	r3, [pc, #240]	; (8002a44 <main+0xeb4>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	2200      	movs	r2, #0
 8002956:	493e      	ldr	r1, [pc, #248]	; (8002a50 <main+0xec0>)
 8002958:	483c      	ldr	r0, [pc, #240]	; (8002a4c <main+0xebc>)
 800295a:	f7fe fd1b 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "Freq:", 1, 0);
 800295e:	2300      	movs	r3, #0
 8002960:	2201      	movs	r2, #1
 8002962:	4941      	ldr	r1, [pc, #260]	; (8002a68 <main+0xed8>)
 8002964:	4839      	ldr	r0, [pc, #228]	; (8002a4c <main+0xebc>)
 8002966:	f7fe fd15 	bl	8001394 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, frequency, FREQ_DISP_POS, 0, 3);
 800296a:	4b40      	ldr	r3, [pc, #256]	; (8002a6c <main+0xedc>)
 800296c:	8819      	ldrh	r1, [r3, #0]
 800296e:	2303      	movs	r3, #3
 8002970:	9300      	str	r3, [sp, #0]
 8002972:	2300      	movs	r3, #0
 8002974:	2206      	movs	r2, #6
 8002976:	4835      	ldr	r0, [pc, #212]	; (8002a4c <main+0xebc>)
 8002978:	f7fe fcc4 	bl	8001304 <LCDPrintNumber>

				LCDPrintAtPos(&lcd, "FIXED", 15, 0);
 800297c:	2300      	movs	r3, #0
 800297e:	220f      	movs	r2, #15
 8002980:	493b      	ldr	r1, [pc, #236]	; (8002a70 <main+0xee0>)
 8002982:	4832      	ldr	r0, [pc, #200]	; (8002a4c <main+0xebc>)
 8002984:	f7fe fd06 	bl	8001394 <LCDPrintAtPos>
				LCDPrintAtPos(&lcd, "BACK", 1, 2);
 8002988:	2302      	movs	r3, #2
 800298a:	2201      	movs	r2, #1
 800298c:	4939      	ldr	r1, [pc, #228]	; (8002a74 <main+0xee4>)
 800298e:	482f      	ldr	r0, [pc, #188]	; (8002a4c <main+0xebc>)
 8002990:	f7fe fd00 	bl	8001394 <LCDPrintAtPos>

				LCDPrintAtPos(&lcd, "Ontime:", 1, 3);
 8002994:	2303      	movs	r3, #3
 8002996:	2201      	movs	r2, #1
 8002998:	4937      	ldr	r1, [pc, #220]	; (8002a78 <main+0xee8>)
 800299a:	482c      	ldr	r0, [pc, #176]	; (8002a4c <main+0xebc>)
 800299c:	f7fe fcfa 	bl	8001394 <LCDPrintAtPos>
				LCDPrintNumber(&lcd, onTime, 8, 3, 3);
 80029a0:	4b36      	ldr	r3, [pc, #216]	; (8002a7c <main+0xeec>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	b299      	uxth	r1, r3
 80029a6:	2303      	movs	r3, #3
 80029a8:	9300      	str	r3, [sp, #0]
 80029aa:	2303      	movs	r3, #3
 80029ac:	2208      	movs	r2, #8
 80029ae:	4827      	ldr	r0, [pc, #156]	; (8002a4c <main+0xebc>)
 80029b0:	f7fe fca8 	bl	8001304 <LCDPrintNumber>
				LCDPrintAtPos(&lcd, "us", 11, 3);
 80029b4:	2303      	movs	r3, #3
 80029b6:	220b      	movs	r2, #11
 80029b8:	4931      	ldr	r1, [pc, #196]	; (8002a80 <main+0xef0>)
 80029ba:	4824      	ldr	r0, [pc, #144]	; (8002a4c <main+0xebc>)
 80029bc:	f7fe fcea 	bl	8001394 <LCDPrintAtPos>
				setCursor(&lcd, 0, field_select);
 80029c0:	4b20      	ldr	r3, [pc, #128]	; (8002a44 <main+0xeb4>)
 80029c2:	781b      	ldrb	r3, [r3, #0]
 80029c4:	461a      	mov	r2, r3
 80029c6:	2100      	movs	r1, #0
 80029c8:	4820      	ldr	r0, [pc, #128]	; (8002a4c <main+0xebc>)
 80029ca:	f7fe fc33 	bl	8001234 <setCursor>
			}


			if (!isPlaying) {
 80029ce:	4b24      	ldr	r3, [pc, #144]	; (8002a60 <main+0xed0>)
 80029d0:	781b      	ldrb	r3, [r3, #0]
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d15a      	bne.n	8002a8c <main+0xefc>
				if (!printed) {
 80029d6:	4b21      	ldr	r3, [pc, #132]	; (8002a5c <main+0xecc>)
 80029d8:	781b      	ldrb	r3, [r3, #0]
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d10f      	bne.n	80029fe <main+0xe6e>
					LCDPrintAtPos(&lcd, "Play", 1, 1);
 80029de:	2301      	movs	r3, #1
 80029e0:	2201      	movs	r2, #1
 80029e2:	4928      	ldr	r1, [pc, #160]	; (8002a84 <main+0xef4>)
 80029e4:	4819      	ldr	r0, [pc, #100]	; (8002a4c <main+0xebc>)
 80029e6:	f7fe fcd5 	bl	8001394 <LCDPrintAtPos>
					printed = true;
 80029ea:	4b1c      	ldr	r3, [pc, #112]	; (8002a5c <main+0xecc>)
 80029ec:	2201      	movs	r2, #1
 80029ee:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, field_select);
 80029f0:	4b14      	ldr	r3, [pc, #80]	; (8002a44 <main+0xeb4>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	461a      	mov	r2, r3
 80029f6:	2100      	movs	r1, #0
 80029f8:	4814      	ldr	r0, [pc, #80]	; (8002a4c <main+0xebc>)
 80029fa:	f7fe fc1b 	bl	8001234 <setCursor>
				}
				if (onTime != prevOnTime) {
 80029fe:	4b1f      	ldr	r3, [pc, #124]	; (8002a7c <main+0xeec>)
 8002a00:	781a      	ldrb	r2, [r3, #0]
 8002a02:	4b21      	ldr	r3, [pc, #132]	; (8002a88 <main+0xef8>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	f000 8097 	beq.w	8002b3a <main+0xfaa>
					prevOnTime = onTime;
 8002a0c:	4b1b      	ldr	r3, [pc, #108]	; (8002a7c <main+0xeec>)
 8002a0e:	781a      	ldrb	r2, [r3, #0]
 8002a10:	4b1d      	ldr	r3, [pc, #116]	; (8002a88 <main+0xef8>)
 8002a12:	701a      	strb	r2, [r3, #0]
					LCDPrintNumber(&lcd, onTime, 8, 3, 3);
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <main+0xeec>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	b299      	uxth	r1, r3
 8002a1a:	2303      	movs	r3, #3
 8002a1c:	9300      	str	r3, [sp, #0]
 8002a1e:	2303      	movs	r3, #3
 8002a20:	2208      	movs	r2, #8
 8002a22:	480a      	ldr	r0, [pc, #40]	; (8002a4c <main+0xebc>)
 8002a24:	f7fe fc6e 	bl	8001304 <LCDPrintNumber>
					setCursor(&lcd, 0, field_select);
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <main+0xeb4>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	2100      	movs	r1, #0
 8002a30:	4806      	ldr	r0, [pc, #24]	; (8002a4c <main+0xebc>)
 8002a32:	f7fe fbff 	bl	8001234 <setCursor>
 8002a36:	e080      	b.n	8002b3a <main+0xfaa>
 8002a38:	20000c32 	.word	0x20000c32
 8002a3c:	20000648 	.word	0x20000648
 8002a40:	2000064a 	.word	0x2000064a
 8002a44:	20000c31 	.word	0x20000c31
 8002a48:	08012448 	.word	0x08012448
 8002a4c:	200005e8 	.word	0x200005e8
 8002a50:	08012428 	.word	0x08012428
 8002a54:	20000650 	.word	0x20000650
 8002a58:	20000082 	.word	0x20000082
 8002a5c:	20000c2c 	.word	0x20000c2c
 8002a60:	20000c2b 	.word	0x20000c2b
 8002a64:	20000c28 	.word	0x20000c28
 8002a68:	08012478 	.word	0x08012478
 8002a6c:	2000007a 	.word	0x2000007a
 8002a70:	080124b0 	.word	0x080124b0
 8002a74:	08012410 	.word	0x08012410
 8002a78:	08012498 	.word	0x08012498
 8002a7c:	2000064e 	.word	0x2000064e
 8002a80:	08012474 	.word	0x08012474
 8002a84:	080124a0 	.word	0x080124a0
 8002a88:	2000064f 	.word	0x2000064f
				}
			}

			//isPlaying = true
			else {
				if (!printed) {
 8002a8c:	4b86      	ldr	r3, [pc, #536]	; (8002ca8 <main+0x1118>)
 8002a8e:	781b      	ldrb	r3, [r3, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d10f      	bne.n	8002ab4 <main+0xf24>
					LCDPrintAtPos(&lcd, "Pause", 1, 1);
 8002a94:	2301      	movs	r3, #1
 8002a96:	2201      	movs	r2, #1
 8002a98:	4984      	ldr	r1, [pc, #528]	; (8002cac <main+0x111c>)
 8002a9a:	4885      	ldr	r0, [pc, #532]	; (8002cb0 <main+0x1120>)
 8002a9c:	f7fe fc7a 	bl	8001394 <LCDPrintAtPos>
					printed = true;
 8002aa0:	4b81      	ldr	r3, [pc, #516]	; (8002ca8 <main+0x1118>)
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, field_select);
 8002aa6:	4b83      	ldr	r3, [pc, #524]	; (8002cb4 <main+0x1124>)
 8002aa8:	781b      	ldrb	r3, [r3, #0]
 8002aaa:	461a      	mov	r2, r3
 8002aac:	2100      	movs	r1, #0
 8002aae:	4880      	ldr	r0, [pc, #512]	; (8002cb0 <main+0x1120>)
 8002ab0:	f7fe fbc0 	bl	8001234 <setCursor>
				}

				if (!coil1On) {
 8002ab4:	4b80      	ldr	r3, [pc, #512]	; (8002cb8 <main+0x1128>)
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d10b      	bne.n	8002ad4 <main+0xf44>
					setTimerFrequencyPulseWidth(&COIL1, frequency, onTime, COIL1_CH);
 8002abc:	4b7f      	ldr	r3, [pc, #508]	; (8002cbc <main+0x112c>)
 8002abe:	8819      	ldrh	r1, [r3, #0]
 8002ac0:	4b7f      	ldr	r3, [pc, #508]	; (8002cc0 <main+0x1130>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	b29a      	uxth	r2, r3
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	487e      	ldr	r0, [pc, #504]	; (8002cc4 <main+0x1134>)
 8002aca:	f7fe fda1 	bl	8001610 <setTimerFrequencyPulseWidth>
					coil1On = true;
 8002ace:	4b7a      	ldr	r3, [pc, #488]	; (8002cb8 <main+0x1128>)
 8002ad0:	2201      	movs	r2, #1
 8002ad2:	701a      	strb	r2, [r3, #0]
				}

				if (prevFrequency != frequency || onTime != prevOnTime) {
 8002ad4:	4b7c      	ldr	r3, [pc, #496]	; (8002cc8 <main+0x1138>)
 8002ad6:	881a      	ldrh	r2, [r3, #0]
 8002ad8:	4b78      	ldr	r3, [pc, #480]	; (8002cbc <main+0x112c>)
 8002ada:	881b      	ldrh	r3, [r3, #0]
 8002adc:	429a      	cmp	r2, r3
 8002ade:	d105      	bne.n	8002aec <main+0xf5c>
 8002ae0:	4b77      	ldr	r3, [pc, #476]	; (8002cc0 <main+0x1130>)
 8002ae2:	781a      	ldrb	r2, [r3, #0]
 8002ae4:	4b79      	ldr	r3, [pc, #484]	; (8002ccc <main+0x113c>)
 8002ae6:	781b      	ldrb	r3, [r3, #0]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	d026      	beq.n	8002b3a <main+0xfaa>
					turnOffAllCoils();
 8002aec:	f7fe fff2 	bl	8001ad4 <turnOffAllCoils>
					setTimerFrequencyPulseWidth(&COIL1, frequency, onTime, COIL1_CH);
 8002af0:	4b72      	ldr	r3, [pc, #456]	; (8002cbc <main+0x112c>)
 8002af2:	8819      	ldrh	r1, [r3, #0]
 8002af4:	4b72      	ldr	r3, [pc, #456]	; (8002cc0 <main+0x1130>)
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	b29a      	uxth	r2, r3
 8002afa:	2300      	movs	r3, #0
 8002afc:	4871      	ldr	r0, [pc, #452]	; (8002cc4 <main+0x1134>)
 8002afe:	f7fe fd87 	bl	8001610 <setTimerFrequencyPulseWidth>
					prevFrequency = frequency;
 8002b02:	4b6e      	ldr	r3, [pc, #440]	; (8002cbc <main+0x112c>)
 8002b04:	881a      	ldrh	r2, [r3, #0]
 8002b06:	4b70      	ldr	r3, [pc, #448]	; (8002cc8 <main+0x1138>)
 8002b08:	801a      	strh	r2, [r3, #0]
					prevOnTime = onTime;
 8002b0a:	4b6d      	ldr	r3, [pc, #436]	; (8002cc0 <main+0x1130>)
 8002b0c:	781a      	ldrb	r2, [r3, #0]
 8002b0e:	4b6f      	ldr	r3, [pc, #444]	; (8002ccc <main+0x113c>)
 8002b10:	701a      	strb	r2, [r3, #0]
					LCDPrintNumber(&lcd, onTime, 8, 3, 3);
 8002b12:	4b6b      	ldr	r3, [pc, #428]	; (8002cc0 <main+0x1130>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	b299      	uxth	r1, r3
 8002b18:	2303      	movs	r3, #3
 8002b1a:	9300      	str	r3, [sp, #0]
 8002b1c:	2303      	movs	r3, #3
 8002b1e:	2208      	movs	r2, #8
 8002b20:	4863      	ldr	r0, [pc, #396]	; (8002cb0 <main+0x1120>)
 8002b22:	f7fe fbef 	bl	8001304 <LCDPrintNumber>
					coil1On = true;
 8002b26:	4b64      	ldr	r3, [pc, #400]	; (8002cb8 <main+0x1128>)
 8002b28:	2201      	movs	r2, #1
 8002b2a:	701a      	strb	r2, [r3, #0]
					setCursor(&lcd, 0, field_select);
 8002b2c:	4b61      	ldr	r3, [pc, #388]	; (8002cb4 <main+0x1124>)
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	461a      	mov	r2, r3
 8002b32:	2100      	movs	r1, #0
 8002b34:	485e      	ldr	r0, [pc, #376]	; (8002cb0 <main+0x1120>)
 8002b36:	f7fe fb7d 	bl	8001234 <setCursor>
				}
			}



			switch (submode) {
 8002b3a:	4b65      	ldr	r3, [pc, #404]	; (8002cd0 <main+0x1140>)
 8002b3c:	781b      	ldrb	r3, [r3, #0]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d109      	bne.n	8002b56 <main+0xfc6>
				case F_FREQUENCY:
					inSubmode = true;
 8002b42:	4b64      	ldr	r3, [pc, #400]	; (8002cd4 <main+0x1144>)
 8002b44:	2201      	movs	r2, #1
 8002b46:	701a      	strb	r2, [r3, #0]
					changeNumber(&frequency, MAX_FREQUENCY, FREQ_DISP_POS);
 8002b48:	2206      	movs	r2, #6
 8002b4a:	f44f 7148 	mov.w	r1, #800	; 0x320
 8002b4e:	485b      	ldr	r0, [pc, #364]	; (8002cbc <main+0x112c>)
 8002b50:	f000 f914 	bl	8002d7c <changeNumber>
					break;
 8002b54:	e000      	b.n	8002b58 <main+0xfc8>

				default:
					break;
 8002b56:	bf00      	nop
				}



			if (!inSubmode) {
 8002b58:	4b5e      	ldr	r3, [pc, #376]	; (8002cd4 <main+0x1144>)
 8002b5a:	781b      	ldrb	r3, [r3, #0]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f040 80c9 	bne.w	8002cf4 <main+0x1164>
			// Choosing the field to config
				if(rotaryVal != prevRotaryVal)
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <main+0x1148>)
 8002b64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b68:	4b5c      	ldr	r3, [pc, #368]	; (8002cdc <main+0x114c>)
 8002b6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d049      	beq.n	8002c06 <main+0x1076>
				{
					//BACK is displayed at the bottom right
					if (field_select == B_BACK) {
 8002b72:	4b50      	ldr	r3, [pc, #320]	; (8002cb4 <main+0x1124>)
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	2b04      	cmp	r3, #4
 8002b78:	d106      	bne.n	8002b88 <main+0xff8>
						LCDPrintAtPos(&lcd, " ", 0, 2);
 8002b7a:	2302      	movs	r3, #2
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	4958      	ldr	r1, [pc, #352]	; (8002ce0 <main+0x1150>)
 8002b80:	484b      	ldr	r0, [pc, #300]	; (8002cb0 <main+0x1120>)
 8002b82:	f7fe fc07 	bl	8001394 <LCDPrintAtPos>
 8002b86:	e006      	b.n	8002b96 <main+0x1006>
					}
					else LCDPrintAtPos(&lcd, " ", 0, field_select);
 8002b88:	4b4a      	ldr	r3, [pc, #296]	; (8002cb4 <main+0x1124>)
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	4954      	ldr	r1, [pc, #336]	; (8002ce0 <main+0x1150>)
 8002b90:	4847      	ldr	r0, [pc, #284]	; (8002cb0 <main+0x1120>)
 8002b92:	f7fe fbff 	bl	8001394 <LCDPrintAtPos>

					//Move down
					if (rotaryVal > prevRotaryVal){
 8002b96:	4b50      	ldr	r3, [pc, #320]	; (8002cd8 <main+0x1148>)
 8002b98:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002b9c:	4b4f      	ldr	r3, [pc, #316]	; (8002cdc <main+0x114c>)
 8002b9e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	dd0e      	ble.n	8002bc4 <main+0x1034>
						field_select == FIXED_STATE_NUM ? field_select = 0 : field_select ++;
 8002ba6:	4b43      	ldr	r3, [pc, #268]	; (8002cb4 <main+0x1124>)
 8002ba8:	781b      	ldrb	r3, [r3, #0]
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d103      	bne.n	8002bb6 <main+0x1026>
 8002bae:	4b41      	ldr	r3, [pc, #260]	; (8002cb4 <main+0x1124>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	701a      	strb	r2, [r3, #0]
 8002bb4:	e014      	b.n	8002be0 <main+0x1050>
 8002bb6:	4b3f      	ldr	r3, [pc, #252]	; (8002cb4 <main+0x1124>)
 8002bb8:	781b      	ldrb	r3, [r3, #0]
 8002bba:	3301      	adds	r3, #1
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4b3d      	ldr	r3, [pc, #244]	; (8002cb4 <main+0x1124>)
 8002bc0:	701a      	strb	r2, [r3, #0]
 8002bc2:	e00d      	b.n	8002be0 <main+0x1050>
					}
					//Move up
					else {
						(field_select == 0)? field_select = FIXED_STATE_NUM : field_select --;
 8002bc4:	4b3b      	ldr	r3, [pc, #236]	; (8002cb4 <main+0x1124>)
 8002bc6:	781b      	ldrb	r3, [r3, #0]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d103      	bne.n	8002bd4 <main+0x1044>
 8002bcc:	4b39      	ldr	r3, [pc, #228]	; (8002cb4 <main+0x1124>)
 8002bce:	2202      	movs	r2, #2
 8002bd0:	701a      	strb	r2, [r3, #0]
 8002bd2:	e005      	b.n	8002be0 <main+0x1050>
 8002bd4:	4b37      	ldr	r3, [pc, #220]	; (8002cb4 <main+0x1124>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b2da      	uxtb	r2, r3
 8002bdc:	4b35      	ldr	r3, [pc, #212]	; (8002cb4 <main+0x1124>)
 8002bde:	701a      	strb	r2, [r3, #0]
					}

					LCDPrintAtPos(&lcd, ">", 0, field_select);
 8002be0:	4b34      	ldr	r3, [pc, #208]	; (8002cb4 <main+0x1124>)
 8002be2:	781b      	ldrb	r3, [r3, #0]
 8002be4:	2200      	movs	r2, #0
 8002be6:	493f      	ldr	r1, [pc, #252]	; (8002ce4 <main+0x1154>)
 8002be8:	4831      	ldr	r0, [pc, #196]	; (8002cb0 <main+0x1120>)
 8002bea:	f7fe fbd3 	bl	8001394 <LCDPrintAtPos>
					setCursor(&lcd, 0, field_select);
 8002bee:	4b31      	ldr	r3, [pc, #196]	; (8002cb4 <main+0x1124>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2100      	movs	r1, #0
 8002bf6:	482e      	ldr	r0, [pc, #184]	; (8002cb0 <main+0x1120>)
 8002bf8:	f7fe fb1c 	bl	8001234 <setCursor>

					prevRotaryVal =  rotaryVal;
 8002bfc:	4b36      	ldr	r3, [pc, #216]	; (8002cd8 <main+0x1148>)
 8002bfe:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002c02:	4b36      	ldr	r3, [pc, #216]	; (8002cdc <main+0x114c>)
 8002c04:	801a      	strh	r2, [r3, #0]
				}


				if (buttonPushed) {
 8002c06:	4b38      	ldr	r3, [pc, #224]	; (8002ce8 <main+0x1158>)
 8002c08:	781b      	ldrb	r3, [r3, #0]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d072      	beq.n	8002cf4 <main+0x1164>
					buttonPushed = false;
 8002c0e:	4b36      	ldr	r3, [pc, #216]	; (8002ce8 <main+0x1158>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	701a      	strb	r2, [r3, #0]

					switch (field_select) {
 8002c14:	4b27      	ldr	r3, [pc, #156]	; (8002cb4 <main+0x1124>)
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b02      	cmp	r3, #2
 8002c1a:	d021      	beq.n	8002c60 <main+0x10d0>
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	dc38      	bgt.n	8002c92 <main+0x1102>
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d002      	beq.n	8002c2a <main+0x109a>
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d004      	beq.n	8002c32 <main+0x10a2>
						}
						state = MODE_SELECT;
						break;

					default:
						break;
 8002c28:	e033      	b.n	8002c92 <main+0x1102>
						submode = F_FREQUENCY;
 8002c2a:	4b29      	ldr	r3, [pc, #164]	; (8002cd0 <main+0x1140>)
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	701a      	strb	r2, [r3, #0]
						break;
 8002c30:	e030      	b.n	8002c94 <main+0x1104>
						printed = false;
 8002c32:	4b1d      	ldr	r3, [pc, #116]	; (8002ca8 <main+0x1118>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	701a      	strb	r2, [r3, #0]
						clearDisplay(&lcd);
 8002c38:	481d      	ldr	r0, [pc, #116]	; (8002cb0 <main+0x1120>)
 8002c3a:	f7fe fbe2 	bl	8001402 <clearDisplay>
						if (isPlaying) {
 8002c3e:	4b2b      	ldr	r3, [pc, #172]	; (8002cec <main+0x115c>)
 8002c40:	781b      	ldrb	r3, [r3, #0]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <main+0x10ba>
							turnOffAllCoils();
 8002c46:	f7fe ff45 	bl	8001ad4 <turnOffAllCoils>
						isPlaying = !isPlaying;
 8002c4a:	4b28      	ldr	r3, [pc, #160]	; (8002cec <main+0x115c>)
 8002c4c:	781b      	ldrb	r3, [r3, #0]
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	bf0c      	ite	eq
 8002c52:	2301      	moveq	r3, #1
 8002c54:	2300      	movne	r3, #0
 8002c56:	b2db      	uxtb	r3, r3
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <main+0x115c>)
 8002c5c:	701a      	strb	r2, [r3, #0]
						break;
 8002c5e:	e019      	b.n	8002c94 <main+0x1104>
						submode = -1;
 8002c60:	4b1b      	ldr	r3, [pc, #108]	; (8002cd0 <main+0x1140>)
 8002c62:	22ff      	movs	r2, #255	; 0xff
 8002c64:	701a      	strb	r2, [r3, #0]
						printed = false;
 8002c66:	4b10      	ldr	r3, [pc, #64]	; (8002ca8 <main+0x1118>)
 8002c68:	2200      	movs	r2, #0
 8002c6a:	701a      	strb	r2, [r3, #0]
						clearDisplay(&lcd);
 8002c6c:	4810      	ldr	r0, [pc, #64]	; (8002cb0 <main+0x1120>)
 8002c6e:	f7fe fbc8 	bl	8001402 <clearDisplay>
						field_select = 0;
 8002c72:	4b10      	ldr	r3, [pc, #64]	; (8002cb4 <main+0x1124>)
 8002c74:	2200      	movs	r2, #0
 8002c76:	701a      	strb	r2, [r3, #0]
						if (isPlaying) {
 8002c78:	4b1c      	ldr	r3, [pc, #112]	; (8002cec <main+0x115c>)
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d004      	beq.n	8002c8a <main+0x10fa>
							turnOffAllCoils();
 8002c80:	f7fe ff28 	bl	8001ad4 <turnOffAllCoils>
							isPlaying = false;
 8002c84:	4b19      	ldr	r3, [pc, #100]	; (8002cec <main+0x115c>)
 8002c86:	2200      	movs	r2, #0
 8002c88:	701a      	strb	r2, [r3, #0]
						state = MODE_SELECT;
 8002c8a:	4b19      	ldr	r3, [pc, #100]	; (8002cf0 <main+0x1160>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]
						break;
 8002c90:	e000      	b.n	8002c94 <main+0x1104>
						break;
 8002c92:	bf00      	nop

					}
				}
			}

			break;
 8002c94:	e02e      	b.n	8002cf4 <main+0x1164>

		default:
			break;
 8002c96:	bf00      	nop
 8002c98:	e02d      	b.n	8002cf6 <main+0x1166>
			break;
 8002c9a:	bf00      	nop
 8002c9c:	e02b      	b.n	8002cf6 <main+0x1166>
			break;
 8002c9e:	bf00      	nop
 8002ca0:	e029      	b.n	8002cf6 <main+0x1166>
			break;
 8002ca2:	bf00      	nop
 8002ca4:	e027      	b.n	8002cf6 <main+0x1166>
 8002ca6:	bf00      	nop
 8002ca8:	20000c2c 	.word	0x20000c2c
 8002cac:	080124a8 	.word	0x080124a8
 8002cb0:	200005e8 	.word	0x200005e8
 8002cb4:	20000c31 	.word	0x20000c31
 8002cb8:	20000e9f 	.word	0x20000e9f
 8002cbc:	2000007a 	.word	0x2000007a
 8002cc0:	2000064e 	.word	0x2000064e
 8002cc4:	200003dc 	.word	0x200003dc
 8002cc8:	2000007c 	.word	0x2000007c
 8002ccc:	2000064f 	.word	0x2000064f
 8002cd0:	20000082 	.word	0x20000082
 8002cd4:	20000c32 	.word	0x20000c32
 8002cd8:	20000648 	.word	0x20000648
 8002cdc:	2000064a 	.word	0x2000064a
 8002ce0:	08012448 	.word	0x08012448
 8002ce4:	08012428 	.word	0x08012428
 8002ce8:	20000650 	.word	0x20000650
 8002cec:	20000c2b 	.word	0x20000c2b
 8002cf0:	20000c28 	.word	0x20000c28
			break;
 8002cf4:	bf00      	nop
		}

		if((time - adcTime) > 50){
 8002cf6:	4b1a      	ldr	r3, [pc, #104]	; (8002d60 <main+0x11d0>)
 8002cf8:	681a      	ldr	r2, [r3, #0]
 8002cfa:	4b1a      	ldr	r3, [pc, #104]	; (8002d64 <main+0x11d4>)
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b32      	cmp	r3, #50	; 0x32
 8002d02:	f67f a80e 	bls.w	8001d22 <main+0x192>
			HAL_ADC_Start_IT(&hadc);
 8002d06:	4818      	ldr	r0, [pc, #96]	; (8002d68 <main+0x11d8>)
 8002d08:	f001 fe2c 	bl	8004964 <HAL_ADC_Start_IT>
			adcVal = HAL_ADC_GetValue(&hadc);
 8002d0c:	4816      	ldr	r0, [pc, #88]	; (8002d68 <main+0x11d8>)
 8002d0e:	f001 fe93 	bl	8004a38 <HAL_ADC_GetValue>
 8002d12:	4603      	mov	r3, r0
 8002d14:	b29a      	uxth	r2, r3
 8002d16:	4b15      	ldr	r3, [pc, #84]	; (8002d6c <main+0x11dc>)
 8002d18:	801a      	strh	r2, [r3, #0]
			onTime = (uint8_t)((((float)adcVal) / 255)*MAX_PULSE_WIDTH);
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <main+0x11dc>)
 8002d1c:	881b      	ldrh	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fee2 	bl	8000ae8 <__aeabi_ui2f>
 8002d24:	4603      	mov	r3, r0
 8002d26:	4912      	ldr	r1, [pc, #72]	; (8002d70 <main+0x11e0>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f7fd ffe9 	bl	8000d00 <__aeabi_fdiv>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	4910      	ldr	r1, [pc, #64]	; (8002d74 <main+0x11e4>)
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd ff30 	bl	8000b98 <__aeabi_fmul>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fe f87c 	bl	8000e38 <__aeabi_f2uiz>
 8002d40:	4603      	mov	r3, r0
 8002d42:	b2da      	uxtb	r2, r3
 8002d44:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <main+0x11e8>)
 8002d46:	701a      	strb	r2, [r3, #0]
			adcTime = time;
 8002d48:	4b05      	ldr	r3, [pc, #20]	; (8002d60 <main+0x11d0>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a05      	ldr	r2, [pc, #20]	; (8002d64 <main+0x11d4>)
 8002d4e:	6013      	str	r3, [r2, #0]
			writeStatusLED(adcVal);
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <main+0x11dc>)
 8002d52:	881b      	ldrh	r3, [r3, #0]
 8002d54:	b2db      	uxtb	r3, r3
 8002d56:	4618      	mov	r0, r3
 8002d58:	f000 ff4a 	bl	8003bf0 <writeStatusLED>
		time = HAL_GetTick();
 8002d5c:	f7fe bfe1 	b.w	8001d22 <main+0x192>
 8002d60:	20000c08 	.word	0x20000c08
 8002d64:	20000c10 	.word	0x20000c10
 8002d68:	20000284 	.word	0x20000284
 8002d6c:	2000064c 	.word	0x2000064c
 8002d70:	437f0000 	.word	0x437f0000
 8002d74:	42fa0000 	.word	0x42fa0000
 8002d78:	2000064e 	.word	0x2000064e

08002d7c <changeNumber>:

/**
 * Allows the user to change number (3 digits) by scrolling
 * Options are: frequency, t_on, t_off
 */
void changeNumber(uint16_t* number, uint16_t max, uint8_t printPosition) {
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b084      	sub	sp, #16
 8002d80:	af02      	add	r7, sp, #8
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	460b      	mov	r3, r1
 8002d86:	807b      	strh	r3, [r7, #2]
 8002d88:	4613      	mov	r3, r2
 8002d8a:	707b      	strb	r3, [r7, #1]
	switch (digit_mode) {
 8002d8c:	4b8e      	ldr	r3, [pc, #568]	; (8002fc8 <changeNumber+0x24c>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	f000 8179 	beq.w	8003088 <changeNumber+0x30c>
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	f300 8201 	bgt.w	800319e <changeNumber+0x422>
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d003      	beq.n	8002da8 <changeNumber+0x2c>
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	f000 80c1 	beq.w	8002f28 <changeNumber+0x1ac>
		}

		break;

	default:
		break;
 8002da6:	e1fa      	b.n	800319e <changeNumber+0x422>
		digit = *number / 100;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	881b      	ldrh	r3, [r3, #0]
 8002dac:	4a87      	ldr	r2, [pc, #540]	; (8002fcc <changeNumber+0x250>)
 8002dae:	fba2 2303 	umull	r2, r3, r2, r3
 8002db2:	095b      	lsrs	r3, r3, #5
 8002db4:	b29b      	uxth	r3, r3
 8002db6:	b2da      	uxtb	r2, r3
 8002db8:	4b85      	ldr	r3, [pc, #532]	; (8002fd0 <changeNumber+0x254>)
 8002dba:	701a      	strb	r2, [r3, #0]
		setCursor(&lcd, printPosition, submode);
 8002dbc:	4b85      	ldr	r3, [pc, #532]	; (8002fd4 <changeNumber+0x258>)
 8002dbe:	781a      	ldrb	r2, [r3, #0]
 8002dc0:	787b      	ldrb	r3, [r7, #1]
 8002dc2:	4619      	mov	r1, r3
 8002dc4:	4884      	ldr	r0, [pc, #528]	; (8002fd8 <changeNumber+0x25c>)
 8002dc6:	f7fe fa35 	bl	8001234 <setCursor>
		if(rotaryVal != prevRotaryVal)
 8002dca:	4b84      	ldr	r3, [pc, #528]	; (8002fdc <changeNumber+0x260>)
 8002dcc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002dd0:	4b83      	ldr	r3, [pc, #524]	; (8002fe0 <changeNumber+0x264>)
 8002dd2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002dd6:	429a      	cmp	r2, r3
 8002dd8:	f000 808e 	beq.w	8002ef8 <changeNumber+0x17c>
			if (rotaryVal > prevRotaryVal){
 8002ddc:	4b7f      	ldr	r3, [pc, #508]	; (8002fdc <changeNumber+0x260>)
 8002dde:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002de2:	4b7f      	ldr	r3, [pc, #508]	; (8002fe0 <changeNumber+0x264>)
 8002de4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002de8:	429a      	cmp	r2, r3
 8002dea:	dd15      	ble.n	8002e18 <changeNumber+0x9c>
				(digit == max / 100) ? digit = 0 : digit ++;
 8002dec:	4b78      	ldr	r3, [pc, #480]	; (8002fd0 <changeNumber+0x254>)
 8002dee:	781b      	ldrb	r3, [r3, #0]
 8002df0:	b29a      	uxth	r2, r3
 8002df2:	887b      	ldrh	r3, [r7, #2]
 8002df4:	4975      	ldr	r1, [pc, #468]	; (8002fcc <changeNumber+0x250>)
 8002df6:	fba1 1303 	umull	r1, r3, r1, r3
 8002dfa:	095b      	lsrs	r3, r3, #5
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	429a      	cmp	r2, r3
 8002e00:	d103      	bne.n	8002e0a <changeNumber+0x8e>
 8002e02:	4b73      	ldr	r3, [pc, #460]	; (8002fd0 <changeNumber+0x254>)
 8002e04:	2200      	movs	r2, #0
 8002e06:	701a      	strb	r2, [r3, #0]
 8002e08:	e01a      	b.n	8002e40 <changeNumber+0xc4>
 8002e0a:	4b71      	ldr	r3, [pc, #452]	; (8002fd0 <changeNumber+0x254>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	4b6f      	ldr	r3, [pc, #444]	; (8002fd0 <changeNumber+0x254>)
 8002e14:	701a      	strb	r2, [r3, #0]
 8002e16:	e013      	b.n	8002e40 <changeNumber+0xc4>
				(digit == 0)? digit = max / 100 : digit --;
 8002e18:	4b6d      	ldr	r3, [pc, #436]	; (8002fd0 <changeNumber+0x254>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d109      	bne.n	8002e34 <changeNumber+0xb8>
 8002e20:	887b      	ldrh	r3, [r7, #2]
 8002e22:	4a6a      	ldr	r2, [pc, #424]	; (8002fcc <changeNumber+0x250>)
 8002e24:	fba2 2303 	umull	r2, r3, r2, r3
 8002e28:	095b      	lsrs	r3, r3, #5
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	4b68      	ldr	r3, [pc, #416]	; (8002fd0 <changeNumber+0x254>)
 8002e30:	701a      	strb	r2, [r3, #0]
 8002e32:	e005      	b.n	8002e40 <changeNumber+0xc4>
 8002e34:	4b66      	ldr	r3, [pc, #408]	; (8002fd0 <changeNumber+0x254>)
 8002e36:	781b      	ldrb	r3, [r3, #0]
 8002e38:	3b01      	subs	r3, #1
 8002e3a:	b2da      	uxtb	r2, r3
 8002e3c:	4b64      	ldr	r3, [pc, #400]	; (8002fd0 <changeNumber+0x254>)
 8002e3e:	701a      	strb	r2, [r3, #0]
			*number = (*number % 100) + digit * 100;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	881b      	ldrh	r3, [r3, #0]
 8002e44:	4a61      	ldr	r2, [pc, #388]	; (8002fcc <changeNumber+0x250>)
 8002e46:	fba2 1203 	umull	r1, r2, r2, r3
 8002e4a:	0952      	lsrs	r2, r2, #5
 8002e4c:	2164      	movs	r1, #100	; 0x64
 8002e4e:	fb01 f202 	mul.w	r2, r1, r2
 8002e52:	1a9b      	subs	r3, r3, r2
 8002e54:	b29a      	uxth	r2, r3
 8002e56:	4b5e      	ldr	r3, [pc, #376]	; (8002fd0 <changeNumber+0x254>)
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4619      	mov	r1, r3
 8002e5e:	0089      	lsls	r1, r1, #2
 8002e60:	440b      	add	r3, r1
 8002e62:	4619      	mov	r1, r3
 8002e64:	0088      	lsls	r0, r1, #2
 8002e66:	4619      	mov	r1, r3
 8002e68:	4603      	mov	r3, r0
 8002e6a:	440b      	add	r3, r1
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	4413      	add	r3, r2
 8002e72:	b29a      	uxth	r2, r3
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	801a      	strh	r2, [r3, #0]
			if (*number > max) {
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	881b      	ldrh	r3, [r3, #0]
 8002e7c:	887a      	ldrh	r2, [r7, #2]
 8002e7e:	429a      	cmp	r2, r3
 8002e80:	d218      	bcs.n	8002eb4 <changeNumber+0x138>
				*number = max;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	887a      	ldrh	r2, [r7, #2]
 8002e86:	801a      	strh	r2, [r3, #0]
				LCDPrintNumber(&lcd, 0, printPosition+1, submode, 1);
 8002e88:	787b      	ldrb	r3, [r7, #1]
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	4b51      	ldr	r3, [pc, #324]	; (8002fd4 <changeNumber+0x258>)
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	2101      	movs	r1, #1
 8002e94:	9100      	str	r1, [sp, #0]
 8002e96:	2100      	movs	r1, #0
 8002e98:	484f      	ldr	r0, [pc, #316]	; (8002fd8 <changeNumber+0x25c>)
 8002e9a:	f7fe fa33 	bl	8001304 <LCDPrintNumber>
				LCDPrintNumber(&lcd, 0, printPosition+2, submode, 1);
 8002e9e:	787b      	ldrb	r3, [r7, #1]
 8002ea0:	3302      	adds	r3, #2
 8002ea2:	b2da      	uxtb	r2, r3
 8002ea4:	4b4b      	ldr	r3, [pc, #300]	; (8002fd4 <changeNumber+0x258>)
 8002ea6:	781b      	ldrb	r3, [r3, #0]
 8002ea8:	2101      	movs	r1, #1
 8002eaa:	9100      	str	r1, [sp, #0]
 8002eac:	2100      	movs	r1, #0
 8002eae:	484a      	ldr	r0, [pc, #296]	; (8002fd8 <changeNumber+0x25c>)
 8002eb0:	f7fe fa28 	bl	8001304 <LCDPrintNumber>
			if (*number == 0) {
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	881b      	ldrh	r3, [r3, #0]
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d10d      	bne.n	8002ed8 <changeNumber+0x15c>
				*number = 1;
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	801a      	strh	r2, [r3, #0]
				LCDPrintNumber(&lcd, 1, printPosition+2, submode, 1);
 8002ec2:	787b      	ldrb	r3, [r7, #1]
 8002ec4:	3302      	adds	r3, #2
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <changeNumber+0x258>)
 8002eca:	781b      	ldrb	r3, [r3, #0]
 8002ecc:	2101      	movs	r1, #1
 8002ece:	9100      	str	r1, [sp, #0]
 8002ed0:	2101      	movs	r1, #1
 8002ed2:	4841      	ldr	r0, [pc, #260]	; (8002fd8 <changeNumber+0x25c>)
 8002ed4:	f7fe fa16 	bl	8001304 <LCDPrintNumber>
			LCDPrintNumber(&lcd, digit, printPosition, submode, 1);
 8002ed8:	4b3d      	ldr	r3, [pc, #244]	; (8002fd0 <changeNumber+0x254>)
 8002eda:	781b      	ldrb	r3, [r3, #0]
 8002edc:	b299      	uxth	r1, r3
 8002ede:	4b3d      	ldr	r3, [pc, #244]	; (8002fd4 <changeNumber+0x258>)
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	787a      	ldrb	r2, [r7, #1]
 8002ee4:	2001      	movs	r0, #1
 8002ee6:	9000      	str	r0, [sp, #0]
 8002ee8:	483b      	ldr	r0, [pc, #236]	; (8002fd8 <changeNumber+0x25c>)
 8002eea:	f7fe fa0b 	bl	8001304 <LCDPrintNumber>
			prevRotaryVal =  rotaryVal;
 8002eee:	4b3b      	ldr	r3, [pc, #236]	; (8002fdc <changeNumber+0x260>)
 8002ef0:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002ef4:	4b3a      	ldr	r3, [pc, #232]	; (8002fe0 <changeNumber+0x264>)
 8002ef6:	801a      	strh	r2, [r3, #0]
		if (buttonPushed) {
 8002ef8:	4b3a      	ldr	r3, [pc, #232]	; (8002fe4 <changeNumber+0x268>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	f000 8150 	beq.w	80031a2 <changeNumber+0x426>
			buttonPushed = false;
 8002f02:	4b38      	ldr	r3, [pc, #224]	; (8002fe4 <changeNumber+0x268>)
 8002f04:	2200      	movs	r2, #0
 8002f06:	701a      	strb	r2, [r3, #0]
			if (*number == max) {
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	881b      	ldrh	r3, [r3, #0]
 8002f0c:	887a      	ldrh	r2, [r7, #2]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d106      	bne.n	8002f20 <changeNumber+0x1a4>
				submode = -1;
 8002f12:	4b30      	ldr	r3, [pc, #192]	; (8002fd4 <changeNumber+0x258>)
 8002f14:	22ff      	movs	r2, #255	; 0xff
 8002f16:	701a      	strb	r2, [r3, #0]
				inSubmode = false;
 8002f18:	4b33      	ldr	r3, [pc, #204]	; (8002fe8 <changeNumber+0x26c>)
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	701a      	strb	r2, [r3, #0]
		break;
 8002f1e:	e140      	b.n	80031a2 <changeNumber+0x426>
			else digit_mode = TEN_DIGIT;
 8002f20:	4b29      	ldr	r3, [pc, #164]	; (8002fc8 <changeNumber+0x24c>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
		break;
 8002f26:	e13c      	b.n	80031a2 <changeNumber+0x426>
		digit = (*number % 100) / 10;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	881b      	ldrh	r3, [r3, #0]
 8002f2c:	4a27      	ldr	r2, [pc, #156]	; (8002fcc <changeNumber+0x250>)
 8002f2e:	fba2 1203 	umull	r1, r2, r2, r3
 8002f32:	0952      	lsrs	r2, r2, #5
 8002f34:	2164      	movs	r1, #100	; 0x64
 8002f36:	fb01 f202 	mul.w	r2, r1, r2
 8002f3a:	1a9b      	subs	r3, r3, r2
 8002f3c:	b29b      	uxth	r3, r3
 8002f3e:	4a2b      	ldr	r2, [pc, #172]	; (8002fec <changeNumber+0x270>)
 8002f40:	fba2 2303 	umull	r2, r3, r2, r3
 8002f44:	08db      	lsrs	r3, r3, #3
 8002f46:	b29b      	uxth	r3, r3
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	4b21      	ldr	r3, [pc, #132]	; (8002fd0 <changeNumber+0x254>)
 8002f4c:	701a      	strb	r2, [r3, #0]
		setCursor(&lcd, printPosition+1, submode);
 8002f4e:	787b      	ldrb	r3, [r7, #1]
 8002f50:	3301      	adds	r3, #1
 8002f52:	b2db      	uxtb	r3, r3
 8002f54:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <changeNumber+0x258>)
 8002f56:	7812      	ldrb	r2, [r2, #0]
 8002f58:	4619      	mov	r1, r3
 8002f5a:	481f      	ldr	r0, [pc, #124]	; (8002fd8 <changeNumber+0x25c>)
 8002f5c:	f7fe f96a 	bl	8001234 <setCursor>
		if(rotaryVal != prevRotaryVal)
 8002f60:	4b1e      	ldr	r3, [pc, #120]	; (8002fdc <changeNumber+0x260>)
 8002f62:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f66:	4b1e      	ldr	r3, [pc, #120]	; (8002fe0 <changeNumber+0x264>)
 8002f68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	d07f      	beq.n	8003070 <changeNumber+0x2f4>
			if (rotaryVal > prevRotaryVal){
 8002f70:	4b1a      	ldr	r3, [pc, #104]	; (8002fdc <changeNumber+0x260>)
 8002f72:	f9b3 2000 	ldrsh.w	r2, [r3]
 8002f76:	4b1a      	ldr	r3, [pc, #104]	; (8002fe0 <changeNumber+0x264>)
 8002f78:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	dd14      	ble.n	8002faa <changeNumber+0x22e>
				if (digit == 9) {
 8002f80:	4b13      	ldr	r3, [pc, #76]	; (8002fd0 <changeNumber+0x254>)
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b09      	cmp	r3, #9
 8002f86:	d109      	bne.n	8002f9c <changeNumber+0x220>
					digit = 0;
 8002f88:	4b11      	ldr	r3, [pc, #68]	; (8002fd0 <changeNumber+0x254>)
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	701a      	strb	r2, [r3, #0]
					*number += 10;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	881b      	ldrh	r3, [r3, #0]
 8002f92:	330a      	adds	r3, #10
 8002f94:	b29a      	uxth	r2, r3
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	801a      	strh	r2, [r3, #0]
 8002f9a:	e02f      	b.n	8002ffc <changeNumber+0x280>
				else digit ++;
 8002f9c:	4b0c      	ldr	r3, [pc, #48]	; (8002fd0 <changeNumber+0x254>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	4b0a      	ldr	r3, [pc, #40]	; (8002fd0 <changeNumber+0x254>)
 8002fa6:	701a      	strb	r2, [r3, #0]
 8002fa8:	e028      	b.n	8002ffc <changeNumber+0x280>
				if (digit == 0) {
 8002faa:	4b09      	ldr	r3, [pc, #36]	; (8002fd0 <changeNumber+0x254>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d11e      	bne.n	8002ff0 <changeNumber+0x274>
					digit = 9;
 8002fb2:	4b07      	ldr	r3, [pc, #28]	; (8002fd0 <changeNumber+0x254>)
 8002fb4:	2209      	movs	r2, #9
 8002fb6:	701a      	strb	r2, [r3, #0]
					*number -= 10;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	881b      	ldrh	r3, [r3, #0]
 8002fbc:	3b0a      	subs	r3, #10
 8002fbe:	b29a      	uxth	r2, r3
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	801a      	strh	r2, [r3, #0]
 8002fc4:	e01a      	b.n	8002ffc <changeNumber+0x280>
 8002fc6:	bf00      	nop
 8002fc8:	20000c2f 	.word	0x20000c2f
 8002fcc:	51eb851f 	.word	0x51eb851f
 8002fd0:	20000c30 	.word	0x20000c30
 8002fd4:	20000082 	.word	0x20000082
 8002fd8:	200005e8 	.word	0x200005e8
 8002fdc:	20000648 	.word	0x20000648
 8002fe0:	2000064a 	.word	0x2000064a
 8002fe4:	20000650 	.word	0x20000650
 8002fe8:	20000c32 	.word	0x20000c32
 8002fec:	cccccccd 	.word	0xcccccccd
				else digit --;
 8002ff0:	4b70      	ldr	r3, [pc, #448]	; (80031b4 <changeNumber+0x438>)
 8002ff2:	781b      	ldrb	r3, [r3, #0]
 8002ff4:	3b01      	subs	r3, #1
 8002ff6:	b2da      	uxtb	r2, r3
 8002ff8:	4b6e      	ldr	r3, [pc, #440]	; (80031b4 <changeNumber+0x438>)
 8002ffa:	701a      	strb	r2, [r3, #0]
			*number = (*number % 10) + digit * 10 + (int)(*number / 100) * 100;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	881a      	ldrh	r2, [r3, #0]
 8003000:	4b6d      	ldr	r3, [pc, #436]	; (80031b8 <changeNumber+0x43c>)
 8003002:	fba3 1302 	umull	r1, r3, r3, r2
 8003006:	08d9      	lsrs	r1, r3, #3
 8003008:	460b      	mov	r3, r1
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	b29a      	uxth	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	881b      	ldrh	r3, [r3, #0]
 8003018:	4968      	ldr	r1, [pc, #416]	; (80031bc <changeNumber+0x440>)
 800301a:	fba1 1303 	umull	r1, r3, r1, r3
 800301e:	095b      	lsrs	r3, r3, #5
 8003020:	b29b      	uxth	r3, r3
 8003022:	4619      	mov	r1, r3
 8003024:	0089      	lsls	r1, r1, #2
 8003026:	440b      	add	r3, r1
 8003028:	4619      	mov	r1, r3
 800302a:	0088      	lsls	r0, r1, #2
 800302c:	4619      	mov	r1, r3
 800302e:	4603      	mov	r3, r0
 8003030:	440b      	add	r3, r1
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	b299      	uxth	r1, r3
 8003036:	4b5f      	ldr	r3, [pc, #380]	; (80031b4 <changeNumber+0x438>)
 8003038:	781b      	ldrb	r3, [r3, #0]
 800303a:	b29b      	uxth	r3, r3
 800303c:	4618      	mov	r0, r3
 800303e:	0080      	lsls	r0, r0, #2
 8003040:	4403      	add	r3, r0
 8003042:	005b      	lsls	r3, r3, #1
 8003044:	b29b      	uxth	r3, r3
 8003046:	440b      	add	r3, r1
 8003048:	b29b      	uxth	r3, r3
 800304a:	4413      	add	r3, r2
 800304c:	b29a      	uxth	r2, r3
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	801a      	strh	r2, [r3, #0]
			LCDPrintNumber(&lcd, *number, printPosition, submode, 3);
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	8819      	ldrh	r1, [r3, #0]
 8003056:	4b5a      	ldr	r3, [pc, #360]	; (80031c0 <changeNumber+0x444>)
 8003058:	781b      	ldrb	r3, [r3, #0]
 800305a:	787a      	ldrb	r2, [r7, #1]
 800305c:	2003      	movs	r0, #3
 800305e:	9000      	str	r0, [sp, #0]
 8003060:	4858      	ldr	r0, [pc, #352]	; (80031c4 <changeNumber+0x448>)
 8003062:	f7fe f94f 	bl	8001304 <LCDPrintNumber>
			prevRotaryVal =  rotaryVal;
 8003066:	4b58      	ldr	r3, [pc, #352]	; (80031c8 <changeNumber+0x44c>)
 8003068:	f9b3 2000 	ldrsh.w	r2, [r3]
 800306c:	4b57      	ldr	r3, [pc, #348]	; (80031cc <changeNumber+0x450>)
 800306e:	801a      	strh	r2, [r3, #0]
		if (buttonPushed) {
 8003070:	4b57      	ldr	r3, [pc, #348]	; (80031d0 <changeNumber+0x454>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	2b00      	cmp	r3, #0
 8003076:	f000 8096 	beq.w	80031a6 <changeNumber+0x42a>
			buttonPushed = false;
 800307a:	4b55      	ldr	r3, [pc, #340]	; (80031d0 <changeNumber+0x454>)
 800307c:	2200      	movs	r2, #0
 800307e:	701a      	strb	r2, [r3, #0]
			digit_mode = SINGLE_DIGIT;
 8003080:	4b54      	ldr	r3, [pc, #336]	; (80031d4 <changeNumber+0x458>)
 8003082:	2202      	movs	r2, #2
 8003084:	701a      	strb	r2, [r3, #0]
		break;
 8003086:	e08e      	b.n	80031a6 <changeNumber+0x42a>
		digit = *number % 10;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	881a      	ldrh	r2, [r3, #0]
 800308c:	4b4a      	ldr	r3, [pc, #296]	; (80031b8 <changeNumber+0x43c>)
 800308e:	fba3 1302 	umull	r1, r3, r3, r2
 8003092:	08d9      	lsrs	r1, r3, #3
 8003094:	460b      	mov	r3, r1
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	440b      	add	r3, r1
 800309a:	005b      	lsls	r3, r3, #1
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	b29b      	uxth	r3, r3
 80030a0:	b2da      	uxtb	r2, r3
 80030a2:	4b44      	ldr	r3, [pc, #272]	; (80031b4 <changeNumber+0x438>)
 80030a4:	701a      	strb	r2, [r3, #0]
		setCursor(&lcd, printPosition+2, submode);
 80030a6:	787b      	ldrb	r3, [r7, #1]
 80030a8:	3302      	adds	r3, #2
 80030aa:	b2db      	uxtb	r3, r3
 80030ac:	4a44      	ldr	r2, [pc, #272]	; (80031c0 <changeNumber+0x444>)
 80030ae:	7812      	ldrb	r2, [r2, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	4844      	ldr	r0, [pc, #272]	; (80031c4 <changeNumber+0x448>)
 80030b4:	f7fe f8be 	bl	8001234 <setCursor>
		if(rotaryVal != prevRotaryVal)
 80030b8:	4b43      	ldr	r3, [pc, #268]	; (80031c8 <changeNumber+0x44c>)
 80030ba:	f9b3 2000 	ldrsh.w	r2, [r3]
 80030be:	4b43      	ldr	r3, [pc, #268]	; (80031cc <changeNumber+0x450>)
 80030c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d052      	beq.n	800316e <changeNumber+0x3f2>
			if (rotaryVal > prevRotaryVal){
 80030c8:	4b3f      	ldr	r3, [pc, #252]	; (80031c8 <changeNumber+0x44c>)
 80030ca:	f9b3 2000 	ldrsh.w	r2, [r3]
 80030ce:	4b3f      	ldr	r3, [pc, #252]	; (80031cc <changeNumber+0x450>)
 80030d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	dd14      	ble.n	8003102 <changeNumber+0x386>
				if (digit == 9) {
 80030d8:	4b36      	ldr	r3, [pc, #216]	; (80031b4 <changeNumber+0x438>)
 80030da:	781b      	ldrb	r3, [r3, #0]
 80030dc:	2b09      	cmp	r3, #9
 80030de:	d109      	bne.n	80030f4 <changeNumber+0x378>
					digit = 0;
 80030e0:	4b34      	ldr	r3, [pc, #208]	; (80031b4 <changeNumber+0x438>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
					*number = *number + 1;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	881b      	ldrh	r3, [r3, #0]
 80030ea:	3301      	adds	r3, #1
 80030ec:	b29a      	uxth	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	801a      	strh	r2, [r3, #0]
 80030f2:	e01a      	b.n	800312a <changeNumber+0x3ae>
				else digit ++;
 80030f4:	4b2f      	ldr	r3, [pc, #188]	; (80031b4 <changeNumber+0x438>)
 80030f6:	781b      	ldrb	r3, [r3, #0]
 80030f8:	3301      	adds	r3, #1
 80030fa:	b2da      	uxtb	r2, r3
 80030fc:	4b2d      	ldr	r3, [pc, #180]	; (80031b4 <changeNumber+0x438>)
 80030fe:	701a      	strb	r2, [r3, #0]
 8003100:	e013      	b.n	800312a <changeNumber+0x3ae>
				if (digit == 0) {
 8003102:	4b2c      	ldr	r3, [pc, #176]	; (80031b4 <changeNumber+0x438>)
 8003104:	781b      	ldrb	r3, [r3, #0]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d109      	bne.n	800311e <changeNumber+0x3a2>
					digit = 9;
 800310a:	4b2a      	ldr	r3, [pc, #168]	; (80031b4 <changeNumber+0x438>)
 800310c:	2209      	movs	r2, #9
 800310e:	701a      	strb	r2, [r3, #0]
					*number = *number - 1;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	881b      	ldrh	r3, [r3, #0]
 8003114:	3b01      	subs	r3, #1
 8003116:	b29a      	uxth	r2, r3
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	801a      	strh	r2, [r3, #0]
 800311c:	e005      	b.n	800312a <changeNumber+0x3ae>
				else digit --;
 800311e:	4b25      	ldr	r3, [pc, #148]	; (80031b4 <changeNumber+0x438>)
 8003120:	781b      	ldrb	r3, [r3, #0]
 8003122:	3b01      	subs	r3, #1
 8003124:	b2da      	uxtb	r2, r3
 8003126:	4b23      	ldr	r3, [pc, #140]	; (80031b4 <changeNumber+0x438>)
 8003128:	701a      	strb	r2, [r3, #0]
			*number = (int)(*number / 10) * 10 + digit;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	881b      	ldrh	r3, [r3, #0]
 800312e:	4a22      	ldr	r2, [pc, #136]	; (80031b8 <changeNumber+0x43c>)
 8003130:	fba2 2303 	umull	r2, r3, r2, r3
 8003134:	08db      	lsrs	r3, r3, #3
 8003136:	b29b      	uxth	r3, r3
 8003138:	461a      	mov	r2, r3
 800313a:	0092      	lsls	r2, r2, #2
 800313c:	4413      	add	r3, r2
 800313e:	005b      	lsls	r3, r3, #1
 8003140:	b29a      	uxth	r2, r3
 8003142:	4b1c      	ldr	r3, [pc, #112]	; (80031b4 <changeNumber+0x438>)
 8003144:	781b      	ldrb	r3, [r3, #0]
 8003146:	b29b      	uxth	r3, r3
 8003148:	4413      	add	r3, r2
 800314a:	b29a      	uxth	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	801a      	strh	r2, [r3, #0]
			LCDPrintNumber(&lcd, *number, printPosition, submode, 3);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	8819      	ldrh	r1, [r3, #0]
 8003154:	4b1a      	ldr	r3, [pc, #104]	; (80031c0 <changeNumber+0x444>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	787a      	ldrb	r2, [r7, #1]
 800315a:	2003      	movs	r0, #3
 800315c:	9000      	str	r0, [sp, #0]
 800315e:	4819      	ldr	r0, [pc, #100]	; (80031c4 <changeNumber+0x448>)
 8003160:	f7fe f8d0 	bl	8001304 <LCDPrintNumber>
			prevRotaryVal =  rotaryVal;
 8003164:	4b18      	ldr	r3, [pc, #96]	; (80031c8 <changeNumber+0x44c>)
 8003166:	f9b3 2000 	ldrsh.w	r2, [r3]
 800316a:	4b18      	ldr	r3, [pc, #96]	; (80031cc <changeNumber+0x450>)
 800316c:	801a      	strh	r2, [r3, #0]
		if (buttonPushed) {
 800316e:	4b18      	ldr	r3, [pc, #96]	; (80031d0 <changeNumber+0x454>)
 8003170:	781b      	ldrb	r3, [r3, #0]
 8003172:	2b00      	cmp	r3, #0
 8003174:	d019      	beq.n	80031aa <changeNumber+0x42e>
			digit_mode = HUNDRED_DIGIT;
 8003176:	4b17      	ldr	r3, [pc, #92]	; (80031d4 <changeNumber+0x458>)
 8003178:	2200      	movs	r2, #0
 800317a:	701a      	strb	r2, [r3, #0]
			setCursor(&lcd, 0, submode);
 800317c:	4b10      	ldr	r3, [pc, #64]	; (80031c0 <changeNumber+0x444>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	461a      	mov	r2, r3
 8003182:	2100      	movs	r1, #0
 8003184:	480f      	ldr	r0, [pc, #60]	; (80031c4 <changeNumber+0x448>)
 8003186:	f7fe f855 	bl	8001234 <setCursor>
			buttonPushed = false;
 800318a:	4b11      	ldr	r3, [pc, #68]	; (80031d0 <changeNumber+0x454>)
 800318c:	2200      	movs	r2, #0
 800318e:	701a      	strb	r2, [r3, #0]
			submode = -1;
 8003190:	4b0b      	ldr	r3, [pc, #44]	; (80031c0 <changeNumber+0x444>)
 8003192:	22ff      	movs	r2, #255	; 0xff
 8003194:	701a      	strb	r2, [r3, #0]
			inSubmode = false;
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <changeNumber+0x45c>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
		break;
 800319c:	e005      	b.n	80031aa <changeNumber+0x42e>
		break;
 800319e:	bf00      	nop
 80031a0:	e004      	b.n	80031ac <changeNumber+0x430>
		break;
 80031a2:	bf00      	nop
 80031a4:	e002      	b.n	80031ac <changeNumber+0x430>
		break;
 80031a6:	bf00      	nop
 80031a8:	e000      	b.n	80031ac <changeNumber+0x430>
		break;
 80031aa:	bf00      	nop
	}
}
 80031ac:	bf00      	nop
 80031ae:	3708      	adds	r7, #8
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	20000c30 	.word	0x20000c30
 80031b8:	cccccccd 	.word	0xcccccccd
 80031bc:	51eb851f 	.word	0x51eb851f
 80031c0:	20000082 	.word	0x20000082
 80031c4:	200005e8 	.word	0x200005e8
 80031c8:	20000648 	.word	0x20000648
 80031cc:	2000064a 	.word	0x2000064a
 80031d0:	20000650 	.word	0x20000650
 80031d4:	20000c2f 	.word	0x20000c2f
 80031d8:	20000c32 	.word	0x20000c32

080031dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80031dc:	b580      	push	{r7, lr}
 80031de:	b092      	sub	sp, #72	; 0x48
 80031e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80031e2:	f107 0314 	add.w	r3, r7, #20
 80031e6:	2234      	movs	r2, #52	; 0x34
 80031e8:	2100      	movs	r1, #0
 80031ea:	4618      	mov	r0, r3
 80031ec:	f00e fc4c 	bl	8011a88 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80031f0:	463b      	mov	r3, r7
 80031f2:	2200      	movs	r2, #0
 80031f4:	601a      	str	r2, [r3, #0]
 80031f6:	605a      	str	r2, [r3, #4]
 80031f8:	609a      	str	r2, [r3, #8]
 80031fa:	60da      	str	r2, [r3, #12]
 80031fc:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031fe:	4b1e      	ldr	r3, [pc, #120]	; (8003278 <SystemClock_Config+0x9c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8003206:	4a1c      	ldr	r2, [pc, #112]	; (8003278 <SystemClock_Config+0x9c>)
 8003208:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800320c:	6013      	str	r3, [r2, #0]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI
 800320e:	2303      	movs	r3, #3
 8003210:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_HSE;
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003212:	2301      	movs	r3, #1
 8003214:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003216:	2301      	movs	r3, #1
 8003218:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800321a:	2310      	movs	r3, #16
 800321c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800321e:	2302      	movs	r3, #2
 8003220:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003226:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8003228:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800322c:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800322e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8003232:	647b      	str	r3, [r7, #68]	; 0x44
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	4618      	mov	r0, r3
 800323a:	f004 f919 	bl	8007470 <HAL_RCC_OscConfig>
 800323e:	4603      	mov	r3, r0
 8003240:	2b00      	cmp	r3, #0
 8003242:	d001      	beq.n	8003248 <SystemClock_Config+0x6c>
		Error_Handler();
 8003244:	f000 fdc8 	bl	8003dd8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003248:	230f      	movs	r3, #15
 800324a:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800324c:	2303      	movs	r3, #3
 800324e:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003250:	2300      	movs	r3, #0
 8003252:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003254:	2300      	movs	r3, #0
 8003256:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003258:	2300      	movs	r3, #0
 800325a:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800325c:	463b      	mov	r3, r7
 800325e:	2101      	movs	r1, #1
 8003260:	4618      	mov	r0, r3
 8003262:	f004 fc35 	bl	8007ad0 <HAL_RCC_ClockConfig>
 8003266:	4603      	mov	r3, r0
 8003268:	2b00      	cmp	r3, #0
 800326a:	d001      	beq.n	8003270 <SystemClock_Config+0x94>
		Error_Handler();
 800326c:	f000 fdb4 	bl	8003dd8 <Error_Handler>
	}
}
 8003270:	bf00      	nop
 8003272:	3748      	adds	r7, #72	; 0x48
 8003274:	46bd      	mov	sp, r7
 8003276:	bd80      	pop	{r7, pc}
 8003278:	40007000 	.word	0x40007000

0800327c <MX_ADC_Init>:
/**
 * @brief ADC Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC_Init(void) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b084      	sub	sp, #16
 8003280:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC_Init 0 */

	/* USER CODE END ADC_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	2200      	movs	r2, #0
 8003286:	601a      	str	r2, [r3, #0]
 8003288:	605a      	str	r2, [r3, #4]
 800328a:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC_Init 1 */

	/** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
	 */
	hadc.Instance = ADC1;
 800328c:	4b26      	ldr	r3, [pc, #152]	; (8003328 <MX_ADC_Init+0xac>)
 800328e:	4a27      	ldr	r2, [pc, #156]	; (800332c <MX_ADC_Init+0xb0>)
 8003290:	601a      	str	r2, [r3, #0]
	hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003292:	4b25      	ldr	r3, [pc, #148]	; (8003328 <MX_ADC_Init+0xac>)
 8003294:	2200      	movs	r2, #0
 8003296:	605a      	str	r2, [r3, #4]
	hadc.Init.Resolution = ADC_RESOLUTION_8B;
 8003298:	4b23      	ldr	r3, [pc, #140]	; (8003328 <MX_ADC_Init+0xac>)
 800329a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800329e:	609a      	str	r2, [r3, #8]
	hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80032a0:	4b21      	ldr	r3, [pc, #132]	; (8003328 <MX_ADC_Init+0xac>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	60da      	str	r2, [r3, #12]
	hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80032a6:	4b20      	ldr	r3, [pc, #128]	; (8003328 <MX_ADC_Init+0xac>)
 80032a8:	2200      	movs	r2, #0
 80032aa:	611a      	str	r2, [r3, #16]
	hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80032ac:	4b1e      	ldr	r3, [pc, #120]	; (8003328 <MX_ADC_Init+0xac>)
 80032ae:	2200      	movs	r2, #0
 80032b0:	615a      	str	r2, [r3, #20]
	hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80032b2:	4b1d      	ldr	r3, [pc, #116]	; (8003328 <MX_ADC_Init+0xac>)
 80032b4:	2200      	movs	r2, #0
 80032b6:	619a      	str	r2, [r3, #24]
	hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80032b8:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <MX_ADC_Init+0xac>)
 80032ba:	2200      	movs	r2, #0
 80032bc:	61da      	str	r2, [r3, #28]
	hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80032be:	4b1a      	ldr	r3, [pc, #104]	; (8003328 <MX_ADC_Init+0xac>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	621a      	str	r2, [r3, #32]
	hadc.Init.ContinuousConvMode = DISABLE;
 80032c4:	4b18      	ldr	r3, [pc, #96]	; (8003328 <MX_ADC_Init+0xac>)
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	hadc.Init.NbrOfConversion = 1;
 80032cc:	4b16      	ldr	r3, [pc, #88]	; (8003328 <MX_ADC_Init+0xac>)
 80032ce:	2201      	movs	r2, #1
 80032d0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc.Init.DiscontinuousConvMode = DISABLE;
 80032d2:	4b15      	ldr	r3, [pc, #84]	; (8003328 <MX_ADC_Init+0xac>)
 80032d4:	2200      	movs	r2, #0
 80032d6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
	hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80032da:	4b13      	ldr	r3, [pc, #76]	; (8003328 <MX_ADC_Init+0xac>)
 80032dc:	2210      	movs	r2, #16
 80032de:	635a      	str	r2, [r3, #52]	; 0x34
	hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80032e0:	4b11      	ldr	r3, [pc, #68]	; (8003328 <MX_ADC_Init+0xac>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	639a      	str	r2, [r3, #56]	; 0x38
	hadc.Init.DMAContinuousRequests = DISABLE;
 80032e6:	4b10      	ldr	r3, [pc, #64]	; (8003328 <MX_ADC_Init+0xac>)
 80032e8:	2200      	movs	r2, #0
 80032ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	if (HAL_ADC_Init(&hadc) != HAL_OK) {
 80032ee:	480e      	ldr	r0, [pc, #56]	; (8003328 <MX_ADC_Init+0xac>)
 80032f0:	f001 f992 	bl	8004618 <HAL_ADC_Init>
 80032f4:	4603      	mov	r3, r0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d001      	beq.n	80032fe <MX_ADC_Init+0x82>
		Error_Handler();
 80032fa:	f000 fd6d 	bl	8003dd8 <Error_Handler>
	}

	/** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80032fe:	2300      	movs	r3, #0
 8003300:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003302:	2301      	movs	r3, #1
 8003304:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8003306:	2300      	movs	r3, #0
 8003308:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
 800330a:	1d3b      	adds	r3, r7, #4
 800330c:	4619      	mov	r1, r3
 800330e:	4806      	ldr	r0, [pc, #24]	; (8003328 <MX_ADC_Init+0xac>)
 8003310:	f001 fb9e 	bl	8004a50 <HAL_ADC_ConfigChannel>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d001      	beq.n	800331e <MX_ADC_Init+0xa2>
		Error_Handler();
 800331a:	f000 fd5d 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN ADC_Init 2 */

	/* USER CODE END ADC_Init 2 */

}
 800331e:	bf00      	nop
 8003320:	3710      	adds	r7, #16
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	20000284 	.word	0x20000284
 800332c:	40012400 	.word	0x40012400

08003330 <MX_I2C2_Init>:
/**
 * @brief I2C2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C2_Init(void) {
 8003330:	b580      	push	{r7, lr}
 8003332:	af00      	add	r7, sp, #0
	/* USER CODE END I2C2_Init 0 */

	/* USER CODE BEGIN I2C2_Init 1 */

	/* USER CODE END I2C2_Init 1 */
	hi2c2.Instance = I2C2;
 8003334:	4b12      	ldr	r3, [pc, #72]	; (8003380 <MX_I2C2_Init+0x50>)
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <MX_I2C2_Init+0x54>)
 8003338:	601a      	str	r2, [r3, #0]
	hi2c2.Init.ClockSpeed = 100000;
 800333a:	4b11      	ldr	r3, [pc, #68]	; (8003380 <MX_I2C2_Init+0x50>)
 800333c:	4a12      	ldr	r2, [pc, #72]	; (8003388 <MX_I2C2_Init+0x58>)
 800333e:	605a      	str	r2, [r3, #4]
	hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8003340:	4b0f      	ldr	r3, [pc, #60]	; (8003380 <MX_I2C2_Init+0x50>)
 8003342:	2200      	movs	r2, #0
 8003344:	609a      	str	r2, [r3, #8]
	hi2c2.Init.OwnAddress1 = 0;
 8003346:	4b0e      	ldr	r3, [pc, #56]	; (8003380 <MX_I2C2_Init+0x50>)
 8003348:	2200      	movs	r2, #0
 800334a:	60da      	str	r2, [r3, #12]
	hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800334c:	4b0c      	ldr	r3, [pc, #48]	; (8003380 <MX_I2C2_Init+0x50>)
 800334e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003352:	611a      	str	r2, [r3, #16]
	hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003354:	4b0a      	ldr	r3, [pc, #40]	; (8003380 <MX_I2C2_Init+0x50>)
 8003356:	2200      	movs	r2, #0
 8003358:	615a      	str	r2, [r3, #20]
	hi2c2.Init.OwnAddress2 = 0;
 800335a:	4b09      	ldr	r3, [pc, #36]	; (8003380 <MX_I2C2_Init+0x50>)
 800335c:	2200      	movs	r2, #0
 800335e:	619a      	str	r2, [r3, #24]
	hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003360:	4b07      	ldr	r3, [pc, #28]	; (8003380 <MX_I2C2_Init+0x50>)
 8003362:	2200      	movs	r2, #0
 8003364:	61da      	str	r2, [r3, #28]
	hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003366:	4b06      	ldr	r3, [pc, #24]	; (8003380 <MX_I2C2_Init+0x50>)
 8003368:	2200      	movs	r2, #0
 800336a:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c2) != HAL_OK) {
 800336c:	4804      	ldr	r0, [pc, #16]	; (8003380 <MX_I2C2_Init+0x50>)
 800336e:	f002 f809 	bl	8005384 <HAL_I2C_Init>
 8003372:	4603      	mov	r3, r0
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <MX_I2C2_Init+0x4c>
		Error_Handler();
 8003378:	f000 fd2e 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN I2C2_Init 2 */

	/* USER CODE END I2C2_Init 2 */

}
 800337c:	bf00      	nop
 800337e:	bd80      	pop	{r7, pc}
 8003380:	200002d8 	.word	0x200002d8
 8003384:	40005800 	.word	0x40005800
 8003388:	000186a0 	.word	0x000186a0

0800338c <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 800338c:	b580      	push	{r7, lr}
 800338e:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8003390:	4b16      	ldr	r3, [pc, #88]	; (80033ec <MX_SPI1_Init+0x60>)
 8003392:	4a17      	ldr	r2, [pc, #92]	; (80033f0 <MX_SPI1_Init+0x64>)
 8003394:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8003396:	4b15      	ldr	r3, [pc, #84]	; (80033ec <MX_SPI1_Init+0x60>)
 8003398:	f44f 7282 	mov.w	r2, #260	; 0x104
 800339c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800339e:	4b13      	ldr	r3, [pc, #76]	; (80033ec <MX_SPI1_Init+0x60>)
 80033a0:	2200      	movs	r2, #0
 80033a2:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80033a4:	4b11      	ldr	r3, [pc, #68]	; (80033ec <MX_SPI1_Init+0x60>)
 80033a6:	2200      	movs	r2, #0
 80033a8:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80033aa:	4b10      	ldr	r3, [pc, #64]	; (80033ec <MX_SPI1_Init+0x60>)
 80033ac:	2200      	movs	r2, #0
 80033ae:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80033b0:	4b0e      	ldr	r3, [pc, #56]	; (80033ec <MX_SPI1_Init+0x60>)
 80033b2:	2200      	movs	r2, #0
 80033b4:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 80033b6:	4b0d      	ldr	r3, [pc, #52]	; (80033ec <MX_SPI1_Init+0x60>)
 80033b8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033bc:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80033be:	4b0b      	ldr	r3, [pc, #44]	; (80033ec <MX_SPI1_Init+0x60>)
 80033c0:	2230      	movs	r2, #48	; 0x30
 80033c2:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80033c4:	4b09      	ldr	r3, [pc, #36]	; (80033ec <MX_SPI1_Init+0x60>)
 80033c6:	2200      	movs	r2, #0
 80033c8:	621a      	str	r2, [r3, #32]
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80033ca:	4b08      	ldr	r3, [pc, #32]	; (80033ec <MX_SPI1_Init+0x60>)
 80033cc:	2200      	movs	r2, #0
 80033ce:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 80033d0:	4b06      	ldr	r3, [pc, #24]	; (80033ec <MX_SPI1_Init+0x60>)
 80033d2:	220a      	movs	r2, #10
 80033d4:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 80033d6:	4805      	ldr	r0, [pc, #20]	; (80033ec <MX_SPI1_Init+0x60>)
 80033d8:	f004 fdea 	bl	8007fb0 <HAL_SPI_Init>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d001      	beq.n	80033e6 <MX_SPI1_Init+0x5a>
		Error_Handler();
 80033e2:	f000 fcf9 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 80033e6:	bf00      	nop
 80033e8:	bd80      	pop	{r7, pc}
 80033ea:	bf00      	nop
 80033ec:	2000032c 	.word	0x2000032c
 80033f0:	40013000 	.word	0x40013000

080033f4 <MX_SPI2_Init>:
/**
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void) {
 80033f4:	b580      	push	{r7, lr}
 80033f6:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI2_Init 1 */

	/* USER CODE END SPI2_Init 1 */
	/* SPI2 parameter configuration*/
	hspi2.Instance = SPI2;
 80033f8:	4b16      	ldr	r3, [pc, #88]	; (8003454 <MX_SPI2_Init+0x60>)
 80033fa:	4a17      	ldr	r2, [pc, #92]	; (8003458 <MX_SPI2_Init+0x64>)
 80033fc:	601a      	str	r2, [r3, #0]
	hspi2.Init.Mode = SPI_MODE_MASTER;
 80033fe:	4b15      	ldr	r3, [pc, #84]	; (8003454 <MX_SPI2_Init+0x60>)
 8003400:	f44f 7282 	mov.w	r2, #260	; 0x104
 8003404:	605a      	str	r2, [r3, #4]
	hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8003406:	4b13      	ldr	r3, [pc, #76]	; (8003454 <MX_SPI2_Init+0x60>)
 8003408:	2200      	movs	r2, #0
 800340a:	609a      	str	r2, [r3, #8]
	hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800340c:	4b11      	ldr	r3, [pc, #68]	; (8003454 <MX_SPI2_Init+0x60>)
 800340e:	2200      	movs	r2, #0
 8003410:	60da      	str	r2, [r3, #12]
	hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003412:	4b10      	ldr	r3, [pc, #64]	; (8003454 <MX_SPI2_Init+0x60>)
 8003414:	2200      	movs	r2, #0
 8003416:	611a      	str	r2, [r3, #16]
	hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8003418:	4b0e      	ldr	r3, [pc, #56]	; (8003454 <MX_SPI2_Init+0x60>)
 800341a:	2200      	movs	r2, #0
 800341c:	615a      	str	r2, [r3, #20]
	hspi2.Init.NSS = SPI_NSS_SOFT;
 800341e:	4b0d      	ldr	r3, [pc, #52]	; (8003454 <MX_SPI2_Init+0x60>)
 8003420:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003424:	619a      	str	r2, [r3, #24]
	hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003426:	4b0b      	ldr	r3, [pc, #44]	; (8003454 <MX_SPI2_Init+0x60>)
 8003428:	2208      	movs	r2, #8
 800342a:	61da      	str	r2, [r3, #28]
	hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800342c:	4b09      	ldr	r3, [pc, #36]	; (8003454 <MX_SPI2_Init+0x60>)
 800342e:	2200      	movs	r2, #0
 8003430:	621a      	str	r2, [r3, #32]
	hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003432:	4b08      	ldr	r3, [pc, #32]	; (8003454 <MX_SPI2_Init+0x60>)
 8003434:	2200      	movs	r2, #0
 8003436:	629a      	str	r2, [r3, #40]	; 0x28
	hspi2.Init.CRCPolynomial = 10;
 8003438:	4b06      	ldr	r3, [pc, #24]	; (8003454 <MX_SPI2_Init+0x60>)
 800343a:	220a      	movs	r2, #10
 800343c:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi2) != HAL_OK) {
 800343e:	4805      	ldr	r0, [pc, #20]	; (8003454 <MX_SPI2_Init+0x60>)
 8003440:	f004 fdb6 	bl	8007fb0 <HAL_SPI_Init>
 8003444:	4603      	mov	r3, r0
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <MX_SPI2_Init+0x5a>
		Error_Handler();
 800344a:	f000 fcc5 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN SPI2_Init 2 */

	/* USER CODE END SPI2_Init 2 */

}
 800344e:	bf00      	nop
 8003450:	bd80      	pop	{r7, pc}
 8003452:	bf00      	nop
 8003454:	20000384 	.word	0x20000384
 8003458:	40003800 	.word	0x40003800

0800345c <MX_TIM2_Init>:
/**
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void) {
 800345c:	b580      	push	{r7, lr}
 800345e:	b08a      	sub	sp, #40	; 0x28
 8003460:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003462:	f107 0318 	add.w	r3, r7, #24
 8003466:	2200      	movs	r2, #0
 8003468:	601a      	str	r2, [r3, #0]
 800346a:	605a      	str	r2, [r3, #4]
 800346c:	609a      	str	r2, [r3, #8]
 800346e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003470:	f107 0310 	add.w	r3, r7, #16
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800347a:	463b      	mov	r3, r7
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]
 8003480:	605a      	str	r2, [r3, #4]
 8003482:	609a      	str	r2, [r3, #8]
 8003484:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8003486:	4b38      	ldr	r3, [pc, #224]	; (8003568 <MX_TIM2_Init+0x10c>)
 8003488:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800348c:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 70 - 1;
 800348e:	4b36      	ldr	r3, [pc, #216]	; (8003568 <MX_TIM2_Init+0x10c>)
 8003490:	2245      	movs	r2, #69	; 0x45
 8003492:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003494:	4b34      	ldr	r3, [pc, #208]	; (8003568 <MX_TIM2_Init+0x10c>)
 8003496:	2200      	movs	r2, #0
 8003498:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 800349a:	4b33      	ldr	r3, [pc, #204]	; (8003568 <MX_TIM2_Init+0x10c>)
 800349c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80034a0:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80034a2:	4b31      	ldr	r3, [pc, #196]	; (8003568 <MX_TIM2_Init+0x10c>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80034a8:	4b2f      	ldr	r3, [pc, #188]	; (8003568 <MX_TIM2_Init+0x10c>)
 80034aa:	2200      	movs	r2, #0
 80034ac:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK) {
 80034ae:	482e      	ldr	r0, [pc, #184]	; (8003568 <MX_TIM2_Init+0x10c>)
 80034b0:	f005 f866 	bl	8008580 <HAL_TIM_Base_Init>
 80034b4:	4603      	mov	r3, r0
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d001      	beq.n	80034be <MX_TIM2_Init+0x62>
		Error_Handler();
 80034ba:	f000 fc8d 	bl	8003dd8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034c2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK) {
 80034c4:	f107 0318 	add.w	r3, r7, #24
 80034c8:	4619      	mov	r1, r3
 80034ca:	4827      	ldr	r0, [pc, #156]	; (8003568 <MX_TIM2_Init+0x10c>)
 80034cc:	f005 fbfa 	bl	8008cc4 <HAL_TIM_ConfigClockSource>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_TIM2_Init+0x7e>
		Error_Handler();
 80034d6:	f000 fc7f 	bl	8003dd8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK) {
 80034da:	4823      	ldr	r0, [pc, #140]	; (8003568 <MX_TIM2_Init+0x10c>)
 80034dc:	f005 f92a 	bl	8008734 <HAL_TIM_PWM_Init>
 80034e0:	4603      	mov	r3, r0
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d001      	beq.n	80034ea <MX_TIM2_Init+0x8e>
		Error_Handler();
 80034e6:	f000 fc77 	bl	8003dd8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim2) != HAL_OK) {
 80034ea:	481f      	ldr	r0, [pc, #124]	; (8003568 <MX_TIM2_Init+0x10c>)
 80034ec:	f005 f8da 	bl	80086a4 <HAL_TIM_OC_Init>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d001      	beq.n	80034fa <MX_TIM2_Init+0x9e>
		Error_Handler();
 80034f6:	f000 fc6f 	bl	8003dd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034fa:	2300      	movs	r3, #0
 80034fc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034fe:	2300      	movs	r3, #0
 8003500:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig)
 8003502:	f107 0310 	add.w	r3, r7, #16
 8003506:	4619      	mov	r1, r3
 8003508:	4817      	ldr	r0, [pc, #92]	; (8003568 <MX_TIM2_Init+0x10c>)
 800350a:	f005 fed5 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d001      	beq.n	8003518 <MX_TIM2_Init+0xbc>
			!= HAL_OK) {
		Error_Handler();
 8003514:	f000 fc60 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003518:	2360      	movs	r3, #96	; 0x60
 800351a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800351c:	2300      	movs	r3, #0
 800351e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003520:	2300      	movs	r3, #0
 8003522:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003524:	2300      	movs	r3, #0
 8003526:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1)
 8003528:	463b      	mov	r3, r7
 800352a:	2200      	movs	r2, #0
 800352c:	4619      	mov	r1, r3
 800352e:	480e      	ldr	r0, [pc, #56]	; (8003568 <MX_TIM2_Init+0x10c>)
 8003530:	f005 fb0a 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 8003534:	4603      	mov	r3, r0
 8003536:	2b00      	cmp	r3, #0
 8003538:	d001      	beq.n	800353e <MX_TIM2_Init+0xe2>
			!= HAL_OK) {
		Error_Handler();
 800353a:	f000 fc4d 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800353e:	2300      	movs	r3, #0
 8003540:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003542:	463b      	mov	r3, r7
 8003544:	2204      	movs	r2, #4
 8003546:	4619      	mov	r1, r3
 8003548:	4807      	ldr	r0, [pc, #28]	; (8003568 <MX_TIM2_Init+0x10c>)
 800354a:	f005 faa5 	bl	8008a98 <HAL_TIM_OC_ConfigChannel>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	d001      	beq.n	8003558 <MX_TIM2_Init+0xfc>
		Error_Handler();
 8003554:	f000 fc40 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8003558:	4803      	ldr	r0, [pc, #12]	; (8003568 <MX_TIM2_Init+0x10c>)
 800355a:	f000 fe2b 	bl	80041b4 <HAL_TIM_MspPostInit>

}
 800355e:	bf00      	nop
 8003560:	3728      	adds	r7, #40	; 0x28
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	200003dc 	.word	0x200003dc

0800356c <MX_TIM3_Init>:
/**
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void) {
 800356c:	b580      	push	{r7, lr}
 800356e:	b08a      	sub	sp, #40	; 0x28
 8003570:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003572:	f107 0318 	add.w	r3, r7, #24
 8003576:	2200      	movs	r2, #0
 8003578:	601a      	str	r2, [r3, #0]
 800357a:	605a      	str	r2, [r3, #4]
 800357c:	609a      	str	r2, [r3, #8]
 800357e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003580:	f107 0310 	add.w	r3, r7, #16
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 800358a:	463b      	mov	r3, r7
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8003596:	4b2d      	ldr	r3, [pc, #180]	; (800364c <MX_TIM3_Init+0xe0>)
 8003598:	4a2d      	ldr	r2, [pc, #180]	; (8003650 <MX_TIM3_Init+0xe4>)
 800359a:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 3200 - 1;
 800359c:	4b2b      	ldr	r3, [pc, #172]	; (800364c <MX_TIM3_Init+0xe0>)
 800359e:	f640 427f 	movw	r2, #3199	; 0xc7f
 80035a2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80035a4:	4b29      	ldr	r3, [pc, #164]	; (800364c <MX_TIM3_Init+0xe0>)
 80035a6:	2200      	movs	r2, #0
 80035a8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 1000 - 1;
 80035aa:	4b28      	ldr	r3, [pc, #160]	; (800364c <MX_TIM3_Init+0xe0>)
 80035ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80035b0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80035b2:	4b26      	ldr	r3, [pc, #152]	; (800364c <MX_TIM3_Init+0xe0>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80035b8:	4b24      	ldr	r3, [pc, #144]	; (800364c <MX_TIM3_Init+0xe0>)
 80035ba:	2280      	movs	r2, #128	; 0x80
 80035bc:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK) {
 80035be:	4823      	ldr	r0, [pc, #140]	; (800364c <MX_TIM3_Init+0xe0>)
 80035c0:	f004 ffde 	bl	8008580 <HAL_TIM_Base_Init>
 80035c4:	4603      	mov	r3, r0
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d001      	beq.n	80035ce <MX_TIM3_Init+0x62>
		Error_Handler();
 80035ca:	f000 fc05 	bl	8003dd8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80035ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80035d2:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK) {
 80035d4:	f107 0318 	add.w	r3, r7, #24
 80035d8:	4619      	mov	r1, r3
 80035da:	481c      	ldr	r0, [pc, #112]	; (800364c <MX_TIM3_Init+0xe0>)
 80035dc:	f005 fb72 	bl	8008cc4 <HAL_TIM_ConfigClockSource>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d001      	beq.n	80035ea <MX_TIM3_Init+0x7e>
		Error_Handler();
 80035e6:	f000 fbf7 	bl	8003dd8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK) {
 80035ea:	4818      	ldr	r0, [pc, #96]	; (800364c <MX_TIM3_Init+0xe0>)
 80035ec:	f005 f8a2 	bl	8008734 <HAL_TIM_PWM_Init>
 80035f0:	4603      	mov	r3, r0
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d001      	beq.n	80035fa <MX_TIM3_Init+0x8e>
		Error_Handler();
 80035f6:	f000 fbef 	bl	8003dd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80035fa:	2300      	movs	r3, #0
 80035fc:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80035fe:	2300      	movs	r3, #0
 8003600:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig)
 8003602:	f107 0310 	add.w	r3, r7, #16
 8003606:	4619      	mov	r1, r3
 8003608:	4810      	ldr	r0, [pc, #64]	; (800364c <MX_TIM3_Init+0xe0>)
 800360a:	f005 fe55 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 800360e:	4603      	mov	r3, r0
 8003610:	2b00      	cmp	r3, #0
 8003612:	d001      	beq.n	8003618 <MX_TIM3_Init+0xac>
			!= HAL_OK) {
		Error_Handler();
 8003614:	f000 fbe0 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003618:	2360      	movs	r3, #96	; 0x60
 800361a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 800361c:	2300      	movs	r3, #0
 800361e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003620:	2300      	movs	r3, #0
 8003622:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003624:	2300      	movs	r3, #0
 8003626:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1)
 8003628:	463b      	mov	r3, r7
 800362a:	2200      	movs	r2, #0
 800362c:	4619      	mov	r1, r3
 800362e:	4807      	ldr	r0, [pc, #28]	; (800364c <MX_TIM3_Init+0xe0>)
 8003630:	f005 fa8a 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 8003634:	4603      	mov	r3, r0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d001      	beq.n	800363e <MX_TIM3_Init+0xd2>
			!= HAL_OK) {
		Error_Handler();
 800363a:	f000 fbcd 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800363e:	4803      	ldr	r0, [pc, #12]	; (800364c <MX_TIM3_Init+0xe0>)
 8003640:	f000 fdb8 	bl	80041b4 <HAL_TIM_MspPostInit>

}
 8003644:	bf00      	nop
 8003646:	3728      	adds	r7, #40	; 0x28
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}
 800364c:	2000041c 	.word	0x2000041c
 8003650:	40000400 	.word	0x40000400

08003654 <MX_TIM4_Init>:
/**
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void) {
 8003654:	b580      	push	{r7, lr}
 8003656:	b08a      	sub	sp, #40	; 0x28
 8003658:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM4_Init 0 */

	/* USER CODE END TIM4_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800365a:	f107 0318 	add.w	r3, r7, #24
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	605a      	str	r2, [r3, #4]
 8003664:	609a      	str	r2, [r3, #8]
 8003666:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003668:	f107 0310 	add.w	r3, r7, #16
 800366c:	2200      	movs	r2, #0
 800366e:	601a      	str	r2, [r3, #0]
 8003670:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003672:	463b      	mov	r3, r7
 8003674:	2200      	movs	r2, #0
 8003676:	601a      	str	r2, [r3, #0]
 8003678:	605a      	str	r2, [r3, #4]
 800367a:	609a      	str	r2, [r3, #8]
 800367c:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM4_Init 1 */

	/* USER CODE END TIM4_Init 1 */
	htim4.Instance = TIM4;
 800367e:	4b37      	ldr	r3, [pc, #220]	; (800375c <MX_TIM4_Init+0x108>)
 8003680:	4a37      	ldr	r2, [pc, #220]	; (8003760 <MX_TIM4_Init+0x10c>)
 8003682:	601a      	str	r2, [r3, #0]
	htim4.Init.Prescaler = 0;
 8003684:	4b35      	ldr	r3, [pc, #212]	; (800375c <MX_TIM4_Init+0x108>)
 8003686:	2200      	movs	r2, #0
 8003688:	605a      	str	r2, [r3, #4]
	htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800368a:	4b34      	ldr	r3, [pc, #208]	; (800375c <MX_TIM4_Init+0x108>)
 800368c:	2200      	movs	r2, #0
 800368e:	609a      	str	r2, [r3, #8]
	htim4.Init.Period = 65535;
 8003690:	4b32      	ldr	r3, [pc, #200]	; (800375c <MX_TIM4_Init+0x108>)
 8003692:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003696:	60da      	str	r2, [r3, #12]
	htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003698:	4b30      	ldr	r3, [pc, #192]	; (800375c <MX_TIM4_Init+0x108>)
 800369a:	2200      	movs	r2, #0
 800369c:	611a      	str	r2, [r3, #16]
	htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800369e:	4b2f      	ldr	r3, [pc, #188]	; (800375c <MX_TIM4_Init+0x108>)
 80036a0:	2200      	movs	r2, #0
 80036a2:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim4) != HAL_OK) {
 80036a4:	482d      	ldr	r0, [pc, #180]	; (800375c <MX_TIM4_Init+0x108>)
 80036a6:	f004 ff6b 	bl	8008580 <HAL_TIM_Base_Init>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <MX_TIM4_Init+0x60>
		Error_Handler();
 80036b0:	f000 fb92 	bl	8003dd8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80036b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80036b8:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK) {
 80036ba:	f107 0318 	add.w	r3, r7, #24
 80036be:	4619      	mov	r1, r3
 80036c0:	4826      	ldr	r0, [pc, #152]	; (800375c <MX_TIM4_Init+0x108>)
 80036c2:	f005 faff 	bl	8008cc4 <HAL_TIM_ConfigClockSource>
 80036c6:	4603      	mov	r3, r0
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d001      	beq.n	80036d0 <MX_TIM4_Init+0x7c>
		Error_Handler();
 80036cc:	f000 fb84 	bl	8003dd8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim4) != HAL_OK) {
 80036d0:	4822      	ldr	r0, [pc, #136]	; (800375c <MX_TIM4_Init+0x108>)
 80036d2:	f005 f82f 	bl	8008734 <HAL_TIM_PWM_Init>
 80036d6:	4603      	mov	r3, r0
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d001      	beq.n	80036e0 <MX_TIM4_Init+0x8c>
		Error_Handler();
 80036dc:	f000 fb7c 	bl	8003dd8 <Error_Handler>
	}
	if (HAL_TIM_OC_Init(&htim4) != HAL_OK) {
 80036e0:	481e      	ldr	r0, [pc, #120]	; (800375c <MX_TIM4_Init+0x108>)
 80036e2:	f004 ffdf 	bl	80086a4 <HAL_TIM_OC_Init>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <MX_TIM4_Init+0x9c>
		Error_Handler();
 80036ec:	f000 fb74 	bl	8003dd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036f0:	2300      	movs	r3, #0
 80036f2:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036f4:	2300      	movs	r3, #0
 80036f6:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig)
 80036f8:	f107 0310 	add.w	r3, r7, #16
 80036fc:	4619      	mov	r1, r3
 80036fe:	4817      	ldr	r0, [pc, #92]	; (800375c <MX_TIM4_Init+0x108>)
 8003700:	f005 fdda 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 8003704:	4603      	mov	r3, r0
 8003706:	2b00      	cmp	r3, #0
 8003708:	d001      	beq.n	800370e <MX_TIM4_Init+0xba>
			!= HAL_OK) {
		Error_Handler();
 800370a:	f000 fb65 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800370e:	2360      	movs	r3, #96	; 0x60
 8003710:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003712:	2300      	movs	r3, #0
 8003714:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003716:	2300      	movs	r3, #0
 8003718:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1)
 800371e:	463b      	mov	r3, r7
 8003720:	2200      	movs	r2, #0
 8003722:	4619      	mov	r1, r3
 8003724:	480d      	ldr	r0, [pc, #52]	; (800375c <MX_TIM4_Init+0x108>)
 8003726:	f005 fa0f 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	d001      	beq.n	8003734 <MX_TIM4_Init+0xe0>
			!= HAL_OK) {
		Error_Handler();
 8003730:	f000 fb52 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8003734:	2300      	movs	r3, #0
 8003736:	603b      	str	r3, [r7, #0]
	if (HAL_TIM_OC_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK) {
 8003738:	463b      	mov	r3, r7
 800373a:	2204      	movs	r2, #4
 800373c:	4619      	mov	r1, r3
 800373e:	4807      	ldr	r0, [pc, #28]	; (800375c <MX_TIM4_Init+0x108>)
 8003740:	f005 f9aa 	bl	8008a98 <HAL_TIM_OC_ConfigChannel>
 8003744:	4603      	mov	r3, r0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d001      	beq.n	800374e <MX_TIM4_Init+0xfa>
		Error_Handler();
 800374a:	f000 fb45 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM4_Init 2 */

	/* USER CODE END TIM4_Init 2 */
	HAL_TIM_MspPostInit(&htim4);
 800374e:	4803      	ldr	r0, [pc, #12]	; (800375c <MX_TIM4_Init+0x108>)
 8003750:	f000 fd30 	bl	80041b4 <HAL_TIM_MspPostInit>

}
 8003754:	bf00      	nop
 8003756:	3728      	adds	r7, #40	; 0x28
 8003758:	46bd      	mov	sp, r7
 800375a:	bd80      	pop	{r7, pc}
 800375c:	2000045c 	.word	0x2000045c
 8003760:	40000800 	.word	0x40000800

08003764 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8003764:	b580      	push	{r7, lr}
 8003766:	b082      	sub	sp, #8
 8003768:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800376a:	463b      	mov	r3, r7
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8003772:	4b14      	ldr	r3, [pc, #80]	; (80037c4 <MX_TIM6_Init+0x60>)
 8003774:	4a14      	ldr	r2, [pc, #80]	; (80037c8 <MX_TIM6_Init+0x64>)
 8003776:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8003778:	4b12      	ldr	r3, [pc, #72]	; (80037c4 <MX_TIM6_Init+0x60>)
 800377a:	2200      	movs	r2, #0
 800377c:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800377e:	4b11      	ldr	r3, [pc, #68]	; (80037c4 <MX_TIM6_Init+0x60>)
 8003780:	2200      	movs	r2, #0
 8003782:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 160 - 1;
 8003784:	4b0f      	ldr	r3, [pc, #60]	; (80037c4 <MX_TIM6_Init+0x60>)
 8003786:	229f      	movs	r2, #159	; 0x9f
 8003788:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800378a:	4b0e      	ldr	r3, [pc, #56]	; (80037c4 <MX_TIM6_Init+0x60>)
 800378c:	2200      	movs	r2, #0
 800378e:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8003790:	480c      	ldr	r0, [pc, #48]	; (80037c4 <MX_TIM6_Init+0x60>)
 8003792:	f004 fef5 	bl	8008580 <HAL_TIM_Base_Init>
 8003796:	4603      	mov	r3, r0
 8003798:	2b00      	cmp	r3, #0
 800379a:	d001      	beq.n	80037a0 <MX_TIM6_Init+0x3c>
		Error_Handler();
 800379c:	f000 fb1c 	bl	8003dd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037a0:	2300      	movs	r3, #0
 80037a2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037a4:	2300      	movs	r3, #0
 80037a6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 80037a8:	463b      	mov	r3, r7
 80037aa:	4619      	mov	r1, r3
 80037ac:	4805      	ldr	r0, [pc, #20]	; (80037c4 <MX_TIM6_Init+0x60>)
 80037ae:	f005 fd83 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM6_Init+0x58>
			!= HAL_OK) {
		Error_Handler();
 80037b8:	f000 fb0e 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 80037bc:	bf00      	nop
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	2000049c 	.word	0x2000049c
 80037c8:	40001000 	.word	0x40001000

080037cc <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b082      	sub	sp, #8
 80037d0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80037d2:	463b      	mov	r3, r7
 80037d4:	2200      	movs	r2, #0
 80037d6:	601a      	str	r2, [r3, #0]
 80037d8:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 80037da:	4b15      	ldr	r3, [pc, #84]	; (8003830 <MX_TIM7_Init+0x64>)
 80037dc:	4a15      	ldr	r2, [pc, #84]	; (8003834 <MX_TIM7_Init+0x68>)
 80037de:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 3200 - 1;
 80037e0:	4b13      	ldr	r3, [pc, #76]	; (8003830 <MX_TIM7_Init+0x64>)
 80037e2:	f640 427f 	movw	r2, #3199	; 0xc7f
 80037e6:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037e8:	4b11      	ldr	r3, [pc, #68]	; (8003830 <MX_TIM7_Init+0x64>)
 80037ea:	2200      	movs	r2, #0
 80037ec:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 10000 - 1;
 80037ee:	4b10      	ldr	r3, [pc, #64]	; (8003830 <MX_TIM7_Init+0x64>)
 80037f0:	f242 720f 	movw	r2, #9999	; 0x270f
 80037f4:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <MX_TIM7_Init+0x64>)
 80037f8:	2200      	movs	r2, #0
 80037fa:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 80037fc:	480c      	ldr	r0, [pc, #48]	; (8003830 <MX_TIM7_Init+0x64>)
 80037fe:	f004 febf 	bl	8008580 <HAL_TIM_Base_Init>
 8003802:	4603      	mov	r3, r0
 8003804:	2b00      	cmp	r3, #0
 8003806:	d001      	beq.n	800380c <MX_TIM7_Init+0x40>
		Error_Handler();
 8003808:	f000 fae6 	bl	8003dd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800380c:	2300      	movs	r3, #0
 800380e:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003810:	2300      	movs	r3, #0
 8003812:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8003814:	463b      	mov	r3, r7
 8003816:	4619      	mov	r1, r3
 8003818:	4805      	ldr	r0, [pc, #20]	; (8003830 <MX_TIM7_Init+0x64>)
 800381a:	f005 fd4d 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d001      	beq.n	8003828 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003824:	f000 fad8 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003828:	bf00      	nop
 800382a:	3708      	adds	r7, #8
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	200004dc 	.word	0x200004dc
 8003834:	40001400 	.word	0x40001400

08003838 <MX_TIM9_Init>:
/**
 * @brief TIM9 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM9_Init(void) {
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM9_Init 0 */

	/* USER CODE END TIM9_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 800383e:	f107 0318 	add.w	r3, r7, #24
 8003842:	2200      	movs	r2, #0
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	605a      	str	r2, [r3, #4]
 8003848:	609a      	str	r2, [r3, #8]
 800384a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 800384c:	f107 0310 	add.w	r3, r7, #16
 8003850:	2200      	movs	r2, #0
 8003852:	601a      	str	r2, [r3, #0]
 8003854:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003856:	463b      	mov	r3, r7
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM9_Init 1 */

	/* USER CODE END TIM9_Init 1 */
	htim9.Instance = TIM9;
 8003862:	4b2d      	ldr	r3, [pc, #180]	; (8003918 <MX_TIM9_Init+0xe0>)
 8003864:	4a2d      	ldr	r2, [pc, #180]	; (800391c <MX_TIM9_Init+0xe4>)
 8003866:	601a      	str	r2, [r3, #0]
	htim9.Init.Prescaler = 0;
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <MX_TIM9_Init+0xe0>)
 800386a:	2200      	movs	r2, #0
 800386c:	605a      	str	r2, [r3, #4]
	htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800386e:	4b2a      	ldr	r3, [pc, #168]	; (8003918 <MX_TIM9_Init+0xe0>)
 8003870:	2200      	movs	r2, #0
 8003872:	609a      	str	r2, [r3, #8]
	htim9.Init.Period = 65535;
 8003874:	4b28      	ldr	r3, [pc, #160]	; (8003918 <MX_TIM9_Init+0xe0>)
 8003876:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800387a:	60da      	str	r2, [r3, #12]
	htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800387c:	4b26      	ldr	r3, [pc, #152]	; (8003918 <MX_TIM9_Init+0xe0>)
 800387e:	2200      	movs	r2, #0
 8003880:	611a      	str	r2, [r3, #16]
	htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003882:	4b25      	ldr	r3, [pc, #148]	; (8003918 <MX_TIM9_Init+0xe0>)
 8003884:	2200      	movs	r2, #0
 8003886:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim9) != HAL_OK) {
 8003888:	4823      	ldr	r0, [pc, #140]	; (8003918 <MX_TIM9_Init+0xe0>)
 800388a:	f004 fe79 	bl	8008580 <HAL_TIM_Base_Init>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d001      	beq.n	8003898 <MX_TIM9_Init+0x60>
		Error_Handler();
 8003894:	f000 faa0 	bl	8003dd8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800389c:	61bb      	str	r3, [r7, #24]
	if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK) {
 800389e:	f107 0318 	add.w	r3, r7, #24
 80038a2:	4619      	mov	r1, r3
 80038a4:	481c      	ldr	r0, [pc, #112]	; (8003918 <MX_TIM9_Init+0xe0>)
 80038a6:	f005 fa0d 	bl	8008cc4 <HAL_TIM_ConfigClockSource>
 80038aa:	4603      	mov	r3, r0
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d001      	beq.n	80038b4 <MX_TIM9_Init+0x7c>
		Error_Handler();
 80038b0:	f000 fa92 	bl	8003dd8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim9) != HAL_OK) {
 80038b4:	4818      	ldr	r0, [pc, #96]	; (8003918 <MX_TIM9_Init+0xe0>)
 80038b6:	f004 ff3d 	bl	8008734 <HAL_TIM_PWM_Init>
 80038ba:	4603      	mov	r3, r0
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d001      	beq.n	80038c4 <MX_TIM9_Init+0x8c>
		Error_Handler();
 80038c0:	f000 fa8a 	bl	8003dd8 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038c4:	2300      	movs	r3, #0
 80038c6:	613b      	str	r3, [r7, #16]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038c8:	2300      	movs	r3, #0
 80038ca:	617b      	str	r3, [r7, #20]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim9, &sMasterConfig)
 80038cc:	f107 0310 	add.w	r3, r7, #16
 80038d0:	4619      	mov	r1, r3
 80038d2:	4811      	ldr	r0, [pc, #68]	; (8003918 <MX_TIM9_Init+0xe0>)
 80038d4:	f005 fcf0 	bl	80092b8 <HAL_TIMEx_MasterConfigSynchronization>
 80038d8:	4603      	mov	r3, r0
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d001      	beq.n	80038e2 <MX_TIM9_Init+0xaa>
			!= HAL_OK) {
		Error_Handler();
 80038de:	f000 fa7b 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80038e2:	2360      	movs	r3, #96	; 0x60
 80038e4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80038e6:	2300      	movs	r3, #0
 80038e8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80038ea:	2300      	movs	r3, #0
 80038ec:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2)
 80038f2:	463b      	mov	r3, r7
 80038f4:	2204      	movs	r2, #4
 80038f6:	4619      	mov	r1, r3
 80038f8:	4807      	ldr	r0, [pc, #28]	; (8003918 <MX_TIM9_Init+0xe0>)
 80038fa:	f005 f925 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM9_Init+0xd0>
			!= HAL_OK) {
		Error_Handler();
 8003904:	f000 fa68 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM9_Init 2 */

	/* USER CODE END TIM9_Init 2 */
	HAL_TIM_MspPostInit(&htim9);
 8003908:	4803      	ldr	r0, [pc, #12]	; (8003918 <MX_TIM9_Init+0xe0>)
 800390a:	f000 fc53 	bl	80041b4 <HAL_TIM_MspPostInit>

}
 800390e:	bf00      	nop
 8003910:	3728      	adds	r7, #40	; 0x28
 8003912:	46bd      	mov	sp, r7
 8003914:	bd80      	pop	{r7, pc}
 8003916:	bf00      	nop
 8003918:	2000051c 	.word	0x2000051c
 800391c:	40010800 	.word	0x40010800

08003920 <MX_TIM10_Init>:
/**
 * @brief TIM10 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM10_Init(void) {
 8003920:	b580      	push	{r7, lr}
 8003922:	b088      	sub	sp, #32
 8003924:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM10_Init 0 */

	/* USER CODE END TIM10_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003926:	f107 0310 	add.w	r3, r7, #16
 800392a:	2200      	movs	r2, #0
 800392c:	601a      	str	r2, [r3, #0]
 800392e:	605a      	str	r2, [r3, #4]
 8003930:	609a      	str	r2, [r3, #8]
 8003932:	60da      	str	r2, [r3, #12]
	TIM_OC_InitTypeDef sConfigOC = { 0 };
 8003934:	463b      	mov	r3, r7
 8003936:	2200      	movs	r2, #0
 8003938:	601a      	str	r2, [r3, #0]
 800393a:	605a      	str	r2, [r3, #4]
 800393c:	609a      	str	r2, [r3, #8]
 800393e:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM10_Init 1 */

	/* USER CODE END TIM10_Init 1 */
	htim10.Instance = TIM10;
 8003940:	4b25      	ldr	r3, [pc, #148]	; (80039d8 <MX_TIM10_Init+0xb8>)
 8003942:	4a26      	ldr	r2, [pc, #152]	; (80039dc <MX_TIM10_Init+0xbc>)
 8003944:	601a      	str	r2, [r3, #0]
	htim10.Init.Prescaler = 0;
 8003946:	4b24      	ldr	r3, [pc, #144]	; (80039d8 <MX_TIM10_Init+0xb8>)
 8003948:	2200      	movs	r2, #0
 800394a:	605a      	str	r2, [r3, #4]
	htim10.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394c:	4b22      	ldr	r3, [pc, #136]	; (80039d8 <MX_TIM10_Init+0xb8>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
	htim10.Init.Period = 65535;
 8003952:	4b21      	ldr	r3, [pc, #132]	; (80039d8 <MX_TIM10_Init+0xb8>)
 8003954:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003958:	60da      	str	r2, [r3, #12]
	htim10.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800395a:	4b1f      	ldr	r3, [pc, #124]	; (80039d8 <MX_TIM10_Init+0xb8>)
 800395c:	2200      	movs	r2, #0
 800395e:	611a      	str	r2, [r3, #16]
	htim10.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003960:	4b1d      	ldr	r3, [pc, #116]	; (80039d8 <MX_TIM10_Init+0xb8>)
 8003962:	2200      	movs	r2, #0
 8003964:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_Base_Init(&htim10) != HAL_OK) {
 8003966:	481c      	ldr	r0, [pc, #112]	; (80039d8 <MX_TIM10_Init+0xb8>)
 8003968:	f004 fe0a 	bl	8008580 <HAL_TIM_Base_Init>
 800396c:	4603      	mov	r3, r0
 800396e:	2b00      	cmp	r3, #0
 8003970:	d001      	beq.n	8003976 <MX_TIM10_Init+0x56>
		Error_Handler();
 8003972:	f000 fa31 	bl	8003dd8 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003976:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800397a:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim10, &sClockSourceConfig) != HAL_OK) {
 800397c:	f107 0310 	add.w	r3, r7, #16
 8003980:	4619      	mov	r1, r3
 8003982:	4815      	ldr	r0, [pc, #84]	; (80039d8 <MX_TIM10_Init+0xb8>)
 8003984:	f005 f99e 	bl	8008cc4 <HAL_TIM_ConfigClockSource>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <MX_TIM10_Init+0x72>
		Error_Handler();
 800398e:	f000 fa23 	bl	8003dd8 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim10) != HAL_OK) {
 8003992:	4811      	ldr	r0, [pc, #68]	; (80039d8 <MX_TIM10_Init+0xb8>)
 8003994:	f004 fece 	bl	8008734 <HAL_TIM_PWM_Init>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <MX_TIM10_Init+0x82>
		Error_Handler();
 800399e:	f000 fa1b 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80039a2:	2360      	movs	r3, #96	; 0x60
 80039a4:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 80039a6:	2300      	movs	r3, #0
 80039a8:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80039aa:	2300      	movs	r3, #0
 80039ac:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim10, &sConfigOC, TIM_CHANNEL_1)
 80039b2:	463b      	mov	r3, r7
 80039b4:	2200      	movs	r2, #0
 80039b6:	4619      	mov	r1, r3
 80039b8:	4807      	ldr	r0, [pc, #28]	; (80039d8 <MX_TIM10_Init+0xb8>)
 80039ba:	f005 f8c5 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 80039be:	4603      	mov	r3, r0
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d001      	beq.n	80039c8 <MX_TIM10_Init+0xa8>
			!= HAL_OK) {
		Error_Handler();
 80039c4:	f000 fa08 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM10_Init 2 */

	/* USER CODE END TIM10_Init 2 */
	HAL_TIM_MspPostInit(&htim10);
 80039c8:	4803      	ldr	r0, [pc, #12]	; (80039d8 <MX_TIM10_Init+0xb8>)
 80039ca:	f000 fbf3 	bl	80041b4 <HAL_TIM_MspPostInit>

}
 80039ce:	bf00      	nop
 80039d0:	3720      	adds	r7, #32
 80039d2:	46bd      	mov	sp, r7
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	2000055c 	.word	0x2000055c
 80039dc:	40010c00 	.word	0x40010c00

080039e0 <MX_TIM11_Init>:
/**
 * @brief TIM11 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM11_Init(void) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM11_Init 0 */

	/* USER CODE END TIM11_Init 0 */

	TIM_OC_InitTypeDef sConfigOC = { 0 };
 80039e6:	463b      	mov	r3, r7
 80039e8:	2200      	movs	r2, #0
 80039ea:	601a      	str	r2, [r3, #0]
 80039ec:	605a      	str	r2, [r3, #4]
 80039ee:	609a      	str	r2, [r3, #8]
 80039f0:	60da      	str	r2, [r3, #12]

	/* USER CODE BEGIN TIM11_Init 1 */

	/* USER CODE END TIM11_Init 1 */
	htim11.Instance = TIM11;
 80039f2:	4b1a      	ldr	r3, [pc, #104]	; (8003a5c <MX_TIM11_Init+0x7c>)
 80039f4:	4a1a      	ldr	r2, [pc, #104]	; (8003a60 <MX_TIM11_Init+0x80>)
 80039f6:	601a      	str	r2, [r3, #0]
	htim11.Init.Prescaler = 0;
 80039f8:	4b18      	ldr	r3, [pc, #96]	; (8003a5c <MX_TIM11_Init+0x7c>)
 80039fa:	2200      	movs	r2, #0
 80039fc:	605a      	str	r2, [r3, #4]
	htim11.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039fe:	4b17      	ldr	r3, [pc, #92]	; (8003a5c <MX_TIM11_Init+0x7c>)
 8003a00:	2200      	movs	r2, #0
 8003a02:	609a      	str	r2, [r3, #8]
	htim11.Init.Period = 65535;
 8003a04:	4b15      	ldr	r3, [pc, #84]	; (8003a5c <MX_TIM11_Init+0x7c>)
 8003a06:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003a0a:	60da      	str	r2, [r3, #12]
	htim11.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a0c:	4b13      	ldr	r3, [pc, #76]	; (8003a5c <MX_TIM11_Init+0x7c>)
 8003a0e:	2200      	movs	r2, #0
 8003a10:	611a      	str	r2, [r3, #16]
	htim11.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a12:	4b12      	ldr	r3, [pc, #72]	; (8003a5c <MX_TIM11_Init+0x7c>)
 8003a14:	2200      	movs	r2, #0
 8003a16:	615a      	str	r2, [r3, #20]
	if (HAL_TIM_PWM_Init(&htim11) != HAL_OK) {
 8003a18:	4810      	ldr	r0, [pc, #64]	; (8003a5c <MX_TIM11_Init+0x7c>)
 8003a1a:	f004 fe8b 	bl	8008734 <HAL_TIM_PWM_Init>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <MX_TIM11_Init+0x48>
		Error_Handler();
 8003a24:	f000 f9d8 	bl	8003dd8 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003a28:	2360      	movs	r3, #96	; 0x60
 8003a2a:	603b      	str	r3, [r7, #0]
	sConfigOC.Pulse = 0;
 8003a2c:	2300      	movs	r3, #0
 8003a2e:	607b      	str	r3, [r7, #4]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003a30:	2300      	movs	r3, #0
 8003a32:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	60fb      	str	r3, [r7, #12]
	if (HAL_TIM_PWM_ConfigChannel(&htim11, &sConfigOC, TIM_CHANNEL_1)
 8003a38:	463b      	mov	r3, r7
 8003a3a:	2200      	movs	r2, #0
 8003a3c:	4619      	mov	r1, r3
 8003a3e:	4807      	ldr	r0, [pc, #28]	; (8003a5c <MX_TIM11_Init+0x7c>)
 8003a40:	f005 f882 	bl	8008b48 <HAL_TIM_PWM_ConfigChannel>
 8003a44:	4603      	mov	r3, r0
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d001      	beq.n	8003a4e <MX_TIM11_Init+0x6e>
			!= HAL_OK) {
		Error_Handler();
 8003a4a:	f000 f9c5 	bl	8003dd8 <Error_Handler>
	}
	/* USER CODE BEGIN TIM11_Init 2 */

	/* USER CODE END TIM11_Init 2 */
	HAL_TIM_MspPostInit(&htim11);
 8003a4e:	4803      	ldr	r0, [pc, #12]	; (8003a5c <MX_TIM11_Init+0x7c>)
 8003a50:	f000 fbb0 	bl	80041b4 <HAL_TIM_MspPostInit>

}
 8003a54:	bf00      	nop
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	2000059c 	.word	0x2000059c
 8003a60:	40011000 	.word	0x40011000

08003a64 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b08a      	sub	sp, #40	; 0x28
 8003a68:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003a6a:	f107 0314 	add.w	r3, r7, #20
 8003a6e:	2200      	movs	r2, #0
 8003a70:	601a      	str	r2, [r3, #0]
 8003a72:	605a      	str	r2, [r3, #4]
 8003a74:	609a      	str	r2, [r3, #8]
 8003a76:	60da      	str	r2, [r3, #12]
 8003a78:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003a7a:	4b59      	ldr	r3, [pc, #356]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003a7c:	69db      	ldr	r3, [r3, #28]
 8003a7e:	4a58      	ldr	r2, [pc, #352]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003a80:	f043 0304 	orr.w	r3, r3, #4
 8003a84:	61d3      	str	r3, [r2, #28]
 8003a86:	4b56      	ldr	r3, [pc, #344]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003a88:	69db      	ldr	r3, [r3, #28]
 8003a8a:	f003 0304 	and.w	r3, r3, #4
 8003a8e:	613b      	str	r3, [r7, #16]
 8003a90:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8003a92:	4b53      	ldr	r3, [pc, #332]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003a94:	69db      	ldr	r3, [r3, #28]
 8003a96:	4a52      	ldr	r2, [pc, #328]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003a98:	f043 0320 	orr.w	r3, r3, #32
 8003a9c:	61d3      	str	r3, [r2, #28]
 8003a9e:	4b50      	ldr	r3, [pc, #320]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003aa0:	69db      	ldr	r3, [r3, #28]
 8003aa2:	f003 0320 	and.w	r3, r3, #32
 8003aa6:	60fb      	str	r3, [r7, #12]
 8003aa8:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003aaa:	4b4d      	ldr	r3, [pc, #308]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4a4c      	ldr	r2, [pc, #304]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	61d3      	str	r3, [r2, #28]
 8003ab6:	4b4a      	ldr	r3, [pc, #296]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003ab8:	69db      	ldr	r3, [r3, #28]
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	60bb      	str	r3, [r7, #8]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003ac2:	4b47      	ldr	r3, [pc, #284]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003ac4:	69db      	ldr	r3, [r3, #28]
 8003ac6:	4a46      	ldr	r2, [pc, #280]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003ac8:	f043 0302 	orr.w	r3, r3, #2
 8003acc:	61d3      	str	r3, [r2, #28]
 8003ace:	4b44      	ldr	r3, [pc, #272]	; (8003be0 <MX_GPIO_Init+0x17c>)
 8003ad0:	69db      	ldr	r3, [r3, #28]
 8003ad2:	f003 0302 	and.w	r3, r3, #2
 8003ad6:	607b      	str	r3, [r7, #4]
 8003ad8:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin, GPIO_PIN_RESET);
 8003ada:	2200      	movs	r2, #0
 8003adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003ae0:	4840      	ldr	r0, [pc, #256]	; (8003be4 <MX_GPIO_Init+0x180>)
 8003ae2:	f001 fc06 	bl	80052f2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, stat595_SCK_Pin | SD_CS_Pin, GPIO_PIN_RESET);
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	f248 0110 	movw	r1, #32784	; 0x8010
 8003aec:	483e      	ldr	r0, [pc, #248]	; (8003be8 <MX_GPIO_Init+0x184>)
 8003aee:	f001 fc00 	bl	80052f2 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003af2:	2200      	movs	r2, #0
 8003af4:	f241 0107 	movw	r1, #4103	; 0x1007
 8003af8:	483c      	ldr	r0, [pc, #240]	; (8003bec <MX_GPIO_Init+0x188>)
 8003afa:	f001 fbfa 	bl	80052f2 <HAL_GPIO_WritePin>
			LED_Heartbeat_Pin | Flash__wp_Pin | Flash__Hold_Pin | SPI2_SS_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pin : stat595_SER_Pin */
	GPIO_InitStruct.Pin = stat595_SER_Pin;
 8003afe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003b02:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b04:	2301      	movs	r3, #1
 8003b06:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(stat595_SER_GPIO_Port, &GPIO_InitStruct);
 8003b10:	f107 0314 	add.w	r3, r7, #20
 8003b14:	4619      	mov	r1, r3
 8003b16:	4833      	ldr	r0, [pc, #204]	; (8003be4 <MX_GPIO_Init+0x180>)
 8003b18:	f001 fa54 	bl	8004fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : stat595_SCK_Pin */
	GPIO_InitStruct.Pin = stat595_SCK_Pin;
 8003b1c:	2310      	movs	r3, #16
 8003b1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b20:	2301      	movs	r3, #1
 8003b22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b24:	2300      	movs	r3, #0
 8003b26:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(stat595_SCK_GPIO_Port, &GPIO_InitStruct);
 8003b2c:	f107 0314 	add.w	r3, r7, #20
 8003b30:	4619      	mov	r1, r3
 8003b32:	482d      	ldr	r0, [pc, #180]	; (8003be8 <MX_GPIO_Init+0x184>)
 8003b34:	f001 fa46 	bl	8004fc4 <HAL_GPIO_Init>

	/*Configure GPIO pins : LED_Heartbeat_Pin Flash__wp_Pin Flash__Hold_Pin SPI2_SS_Pin */
	GPIO_InitStruct.Pin = LED_Heartbeat_Pin | Flash__wp_Pin | Flash__Hold_Pin
 8003b38:	f241 0307 	movw	r3, #4103	; 0x1007
 8003b3c:	617b      	str	r3, [r7, #20]
			| SPI2_SS_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b3e:	2301      	movs	r3, #1
 8003b40:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b42:	2300      	movs	r3, #0
 8003b44:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b46:	2300      	movs	r3, #0
 8003b48:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b4a:	f107 0314 	add.w	r3, r7, #20
 8003b4e:	4619      	mov	r1, r3
 8003b50:	4826      	ldr	r0, [pc, #152]	; (8003bec <MX_GPIO_Init+0x188>)
 8003b52:	f001 fa37 	bl	8004fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ROT_BUT_Pin */
	GPIO_InitStruct.Pin = ROT_BUT_Pin;
 8003b56:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003b5a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003b5c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8003b60:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b62:	2300      	movs	r3, #0
 8003b64:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ROT_BUT_GPIO_Port, &GPIO_InitStruct);
 8003b66:	f107 0314 	add.w	r3, r7, #20
 8003b6a:	4619      	mov	r1, r3
 8003b6c:	481e      	ldr	r0, [pc, #120]	; (8003be8 <MX_GPIO_Init+0x184>)
 8003b6e:	f001 fa29 	bl	8004fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ROT_CLK_Pin */
	GPIO_InitStruct.Pin = ROT_CLK_Pin;
 8003b72:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003b76:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003b78:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8003b7c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ROT_CLK_GPIO_Port, &GPIO_InitStruct);
 8003b82:	f107 0314 	add.w	r3, r7, #20
 8003b86:	4619      	mov	r1, r3
 8003b88:	4817      	ldr	r0, [pc, #92]	; (8003be8 <MX_GPIO_Init+0x184>)
 8003b8a:	f001 fa1b 	bl	8004fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : ROT_DAT_Pin */
	GPIO_InitStruct.Pin = ROT_DAT_Pin;
 8003b8e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003b92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003b94:	2300      	movs	r3, #0
 8003b96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(ROT_DAT_GPIO_Port, &GPIO_InitStruct);
 8003b9c:	f107 0314 	add.w	r3, r7, #20
 8003ba0:	4619      	mov	r1, r3
 8003ba2:	4811      	ldr	r0, [pc, #68]	; (8003be8 <MX_GPIO_Init+0x184>)
 8003ba4:	f001 fa0e 	bl	8004fc4 <HAL_GPIO_Init>

	/*Configure GPIO pin : SD_CS_Pin */
	GPIO_InitStruct.Pin = SD_CS_Pin;
 8003ba8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bac:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bb2:	2301      	movs	r3, #1
 8003bb4:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(SD_CS_GPIO_Port, &GPIO_InitStruct);
 8003bba:	f107 0314 	add.w	r3, r7, #20
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	4809      	ldr	r0, [pc, #36]	; (8003be8 <MX_GPIO_Init+0x184>)
 8003bc2:	f001 f9ff 	bl	8004fc4 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	2100      	movs	r1, #0
 8003bca:	2017      	movs	r0, #23
 8003bcc:	f001 f9c3 	bl	8004f56 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003bd0:	2017      	movs	r0, #23
 8003bd2:	f001 f9dc 	bl	8004f8e <HAL_NVIC_EnableIRQ>

}
 8003bd6:	bf00      	nop
 8003bd8:	3728      	adds	r7, #40	; 0x28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	40023800 	.word	0x40023800
 8003be4:	40020800 	.word	0x40020800
 8003be8:	40020000 	.word	0x40020000
 8003bec:	40020400 	.word	0x40020400

08003bf0 <writeStatusLED>:
	if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK) {
		Error_Handler();
	}
}

void writeStatusLED(uint8_t status) {
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	b084      	sub	sp, #16
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	4603      	mov	r3, r0
 8003bf8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin, GPIO_PIN_RESET);
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c00:	481c      	ldr	r0, [pc, #112]	; (8003c74 <writeStatusLED+0x84>)
 8003c02:	f001 fb76 	bl	80052f2 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_RESET);
 8003c06:	2200      	movs	r2, #0
 8003c08:	2110      	movs	r1, #16
 8003c0a:	481b      	ldr	r0, [pc, #108]	; (8003c78 <writeStatusLED+0x88>)
 8003c0c:	f001 fb71 	bl	80052f2 <HAL_GPIO_WritePin>
	//	delayMicroseconds(5);

	for (int i = 0; i < 8; i++) {
 8003c10:	2300      	movs	r3, #0
 8003c12:	60fb      	str	r3, [r7, #12]
 8003c14:	e01c      	b.n	8003c50 <writeStatusLED+0x60>
		HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin,
				(status & (1 << i)) >> i);
 8003c16:	79fa      	ldrb	r2, [r7, #7]
 8003c18:	2101      	movs	r1, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c20:	401a      	ands	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	fa42 f303 	asr.w	r3, r2, r3
		HAL_GPIO_WritePin(stat595_SER_GPIO_Port, stat595_SER_Pin,
 8003c28:	b2db      	uxtb	r3, r3
 8003c2a:	461a      	mov	r2, r3
 8003c2c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c30:	4810      	ldr	r0, [pc, #64]	; (8003c74 <writeStatusLED+0x84>)
 8003c32:	f001 fb5e 	bl	80052f2 <HAL_GPIO_WritePin>
		//delayMicroseconds(5);
		HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_SET);
 8003c36:	2201      	movs	r2, #1
 8003c38:	2110      	movs	r1, #16
 8003c3a:	480f      	ldr	r0, [pc, #60]	; (8003c78 <writeStatusLED+0x88>)
 8003c3c:	f001 fb59 	bl	80052f2 <HAL_GPIO_WritePin>
		//delayMicroseconds(5);
		HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin,
 8003c40:	2200      	movs	r2, #0
 8003c42:	2110      	movs	r1, #16
 8003c44:	480c      	ldr	r0, [pc, #48]	; (8003c78 <writeStatusLED+0x88>)
 8003c46:	f001 fb54 	bl	80052f2 <HAL_GPIO_WritePin>
	for (int i = 0; i < 8; i++) {
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	60fb      	str	r3, [r7, #12]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	2b07      	cmp	r3, #7
 8003c54:	dddf      	ble.n	8003c16 <writeStatusLED+0x26>
				GPIO_PIN_RESET);
	}
	//delayMicroseconds(5);
	HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_SET);
 8003c56:	2201      	movs	r2, #1
 8003c58:	2110      	movs	r1, #16
 8003c5a:	4807      	ldr	r0, [pc, #28]	; (8003c78 <writeStatusLED+0x88>)
 8003c5c:	f001 fb49 	bl	80052f2 <HAL_GPIO_WritePin>
	//delayMicroseconds(5);
	HAL_GPIO_WritePin(stat595_SCK_GPIO_Port, stat595_SCK_Pin, GPIO_PIN_RESET);
 8003c60:	2200      	movs	r2, #0
 8003c62:	2110      	movs	r1, #16
 8003c64:	4804      	ldr	r0, [pc, #16]	; (8003c78 <writeStatusLED+0x88>)
 8003c66:	f001 fb44 	bl	80052f2 <HAL_GPIO_WritePin>
}
 8003c6a:	bf00      	nop
 8003c6c:	3710      	adds	r7, #16
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40020800 	.word	0x40020800
 8003c78:	40020000 	.word	0x40020000

08003c7c <HAL_GPIO_EXTI_Callback>:
/**
 * @brief  EXTI line detection callbacks.
 * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
 * @retval None
 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8003c7c:	b580      	push	{r7, lr}
 8003c7e:	b082      	sub	sp, #8
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	4603      	mov	r3, r0
 8003c84:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == ROT_BUT_Pin) {
 8003c86:	88fb      	ldrh	r3, [r7, #6]
 8003c88:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c8c:	d103      	bne.n	8003c96 <HAL_GPIO_EXTI_Callback+0x1a>
		buttonPushed = true;
 8003c8e:	4b13      	ldr	r3, [pc, #76]	; (8003cdc <HAL_GPIO_EXTI_Callback+0x60>)
 8003c90:	2201      	movs	r2, #1
 8003c92:	701a      	strb	r2, [r3, #0]
		if (HAL_GPIO_ReadPin(ROT_DAT_GPIO_Port, ROT_DAT_Pin) == 1) {
			rotaryVal--;
		} else
			rotaryVal++;
	}
}
 8003c94:	e01e      	b.n	8003cd4 <HAL_GPIO_EXTI_Callback+0x58>
	} else if (GPIO_Pin == ROT_CLK_Pin) {
 8003c96:	88fb      	ldrh	r3, [r7, #6]
 8003c98:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c9c:	d11a      	bne.n	8003cd4 <HAL_GPIO_EXTI_Callback+0x58>
		if (HAL_GPIO_ReadPin(ROT_DAT_GPIO_Port, ROT_DAT_Pin) == 1) {
 8003c9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003ca2:	480f      	ldr	r0, [pc, #60]	; (8003ce0 <HAL_GPIO_EXTI_Callback+0x64>)
 8003ca4:	f001 fb0e 	bl	80052c4 <HAL_GPIO_ReadPin>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b01      	cmp	r3, #1
 8003cac:	d109      	bne.n	8003cc2 <HAL_GPIO_EXTI_Callback+0x46>
			rotaryVal--;
 8003cae:	4b0d      	ldr	r3, [pc, #52]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x68>)
 8003cb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cb4:	b29b      	uxth	r3, r3
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	b29b      	uxth	r3, r3
 8003cba:	b21a      	sxth	r2, r3
 8003cbc:	4b09      	ldr	r3, [pc, #36]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x68>)
 8003cbe:	801a      	strh	r2, [r3, #0]
}
 8003cc0:	e008      	b.n	8003cd4 <HAL_GPIO_EXTI_Callback+0x58>
			rotaryVal++;
 8003cc2:	4b08      	ldr	r3, [pc, #32]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x68>)
 8003cc4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	3301      	adds	r3, #1
 8003ccc:	b29b      	uxth	r3, r3
 8003cce:	b21a      	sxth	r2, r3
 8003cd0:	4b04      	ldr	r3, [pc, #16]	; (8003ce4 <HAL_GPIO_EXTI_Callback+0x68>)
 8003cd2:	801a      	strh	r2, [r3, #0]
}
 8003cd4:	bf00      	nop
 8003cd6:	3708      	adds	r7, #8
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bd80      	pop	{r7, pc}
 8003cdc:	20000650 	.word	0x20000650
 8003ce0:	40020000 	.word	0x40020000
 8003ce4:	20000648 	.word	0x20000648

08003ce8 <printToUSB>:
}

/**
 * @brief	print a string to the USB COM port
 */
void printToUSB(char *s) {
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b084      	sub	sp, #16
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
	int len = strlen(s);
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7fc fa45 	bl	8000180 <strlen>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	60fb      	str	r3, [r7, #12]
	CDC_Transmit_FS((uint8_t*)s, len);
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	4619      	mov	r1, r3
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f00d faaf 	bl	8011264 <CDC_Transmit_FS>
}
 8003d06:	bf00      	nop
 8003d08:	3710      	adds	r7, #16
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
	...

08003d10 <USBDataReceived_IT>:
void USBDataReceived_IT(uint8_t *Buf, uint32_t *len) {
 8003d10:	b580      	push	{r7, lr}
 8003d12:	b086      	sub	sp, #24
 8003d14:	af00      	add	r7, sp, #0
 8003d16:	6078      	str	r0, [r7, #4]
 8003d18:	6039      	str	r1, [r7, #0]
	//		midiData[eventPointer][5] = *(Buf+5);
	//		eventPointer++;
	//	}
	//	writeStatusLED((uint8_t)*len);

	for (int i = 0; i < (*len) / 3; i++) {
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	617b      	str	r3, [r7, #20]
 8003d1e:	e021      	b.n	8003d64 <USBDataReceived_IT+0x54>
		uint8_t track = *Buf;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	781b      	ldrb	r3, [r3, #0]
 8003d24:	74fb      	strb	r3, [r7, #19]
		Buf++;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	607b      	str	r3, [r7, #4]
		uint16_t freq = noteFreq[*Buf - 24];
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	781b      	ldrb	r3, [r3, #0]
 8003d30:	3b18      	subs	r3, #24
 8003d32:	4a13      	ldr	r2, [pc, #76]	; (8003d80 <USBDataReceived_IT+0x70>)
 8003d34:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003d38:	823b      	strh	r3, [r7, #16]
		Buf++;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	3301      	adds	r3, #1
 8003d3e:	607b      	str	r3, [r7, #4]
		uint16_t velocity = *Buf;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	81fb      	strh	r3, [r7, #14]
		Buf++;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	3301      	adds	r3, #1
 8003d4a:	607b      	str	r3, [r7, #4]
		if (track == 1)
 8003d4c:	7cfb      	ldrb	r3, [r7, #19]
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d105      	bne.n	8003d5e <USBDataReceived_IT+0x4e>
			setTimerFrequencyPulseWidth(&htim3, freq, velocity, TIM_CHANNEL_1);
 8003d52:	89fa      	ldrh	r2, [r7, #14]
 8003d54:	8a39      	ldrh	r1, [r7, #16]
 8003d56:	2300      	movs	r3, #0
 8003d58:	480a      	ldr	r0, [pc, #40]	; (8003d84 <USBDataReceived_IT+0x74>)
 8003d5a:	f7fd fc59 	bl	8001610 <setTimerFrequencyPulseWidth>
	for (int i = 0; i < (*len) / 3; i++) {
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	3301      	adds	r3, #1
 8003d62:	617b      	str	r3, [r7, #20]
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a07      	ldr	r2, [pc, #28]	; (8003d88 <USBDataReceived_IT+0x78>)
 8003d6a:	fba2 2303 	umull	r2, r3, r2, r3
 8003d6e:	085a      	lsrs	r2, r3, #1
 8003d70:	697b      	ldr	r3, [r7, #20]
 8003d72:	429a      	cmp	r2, r3
 8003d74:	d8d4      	bhi.n	8003d20 <USBDataReceived_IT+0x10>
	//	//then copy contents
	//	memcpy(USB_Rx_Buf, Buf, (uint8_t)*len);
	//writeStatusLED(*Buf);
	//writeStatusLED((uint8_t)(*len));

}
 8003d76:	bf00      	nop
 8003d78:	bf00      	nop
 8003d7a:	3718      	adds	r7, #24
 8003d7c:	46bd      	mov	sp, r7
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	20000000 	.word	0x20000000
 8003d84:	2000041c 	.word	0x2000041c
 8003d88:	aaaaaaab 	.word	0xaaaaaaab

08003d8c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003d8c:	b5b0      	push	{r4, r5, r7, lr}
 8003d8e:	b082      	sub	sp, #8
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	6078      	str	r0, [r7, #4]

	if (htim == &htim6) {
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a0c      	ldr	r2, [pc, #48]	; (8003dc8 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d109      	bne.n	8003db0 <HAL_TIM_PeriodElapsedCallback+0x24>
		//auto reload every 160 cycles (5uS)
		micros += 5;
 8003d9c:	4b0b      	ldr	r3, [pc, #44]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da2:	1d54      	adds	r4, r2, #5
 8003da4:	f143 0500 	adc.w	r5, r3, #0
 8003da8:	4b08      	ldr	r3, [pc, #32]	; (8003dcc <HAL_TIM_PeriodElapsedCallback+0x40>)
 8003daa:	e9c3 4500 	strd	r4, r5, [r3]
	} else if (htim == &htim7) {
		//HAL_ADC_Start_IT(&hadc);
		HAL_GPIO_TogglePin(LED_Heartbeat_GPIO_Port, LED_Heartbeat_Pin);
	}
}
 8003dae:	e007      	b.n	8003dc0 <HAL_TIM_PeriodElapsedCallback+0x34>
	} else if (htim == &htim7) {
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	4a07      	ldr	r2, [pc, #28]	; (8003dd0 <HAL_TIM_PeriodElapsedCallback+0x44>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d103      	bne.n	8003dc0 <HAL_TIM_PeriodElapsedCallback+0x34>
		HAL_GPIO_TogglePin(LED_Heartbeat_GPIO_Port, LED_Heartbeat_Pin);
 8003db8:	2101      	movs	r1, #1
 8003dba:	4806      	ldr	r0, [pc, #24]	; (8003dd4 <HAL_TIM_PeriodElapsedCallback+0x48>)
 8003dbc:	f001 fab1 	bl	8005322 <HAL_GPIO_TogglePin>
}
 8003dc0:	bf00      	nop
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bdb0      	pop	{r4, r5, r7, pc}
 8003dc8:	2000049c 	.word	0x2000049c
 8003dcc:	20000640 	.word	0x20000640
 8003dd0:	200004dc 	.word	0x200004dc
 8003dd4:	40020400 	.word	0x40020400

08003dd8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8003ddc:	b672      	cpsid	i
}
 8003dde:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003de0:	e7fe      	b.n	8003de0 <Error_Handler+0x8>
	...

08003de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8003dea:	4b14      	ldr	r3, [pc, #80]	; (8003e3c <HAL_MspInit+0x58>)
 8003dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dee:	4a13      	ldr	r2, [pc, #76]	; (8003e3c <HAL_MspInit+0x58>)
 8003df0:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003df4:	6253      	str	r3, [r2, #36]	; 0x24
 8003df6:	4b11      	ldr	r3, [pc, #68]	; (8003e3c <HAL_MspInit+0x58>)
 8003df8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dfa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dfe:	60fb      	str	r3, [r7, #12]
 8003e00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e02:	4b0e      	ldr	r3, [pc, #56]	; (8003e3c <HAL_MspInit+0x58>)
 8003e04:	6a1b      	ldr	r3, [r3, #32]
 8003e06:	4a0d      	ldr	r2, [pc, #52]	; (8003e3c <HAL_MspInit+0x58>)
 8003e08:	f043 0301 	orr.w	r3, r3, #1
 8003e0c:	6213      	str	r3, [r2, #32]
 8003e0e:	4b0b      	ldr	r3, [pc, #44]	; (8003e3c <HAL_MspInit+0x58>)
 8003e10:	6a1b      	ldr	r3, [r3, #32]
 8003e12:	f003 0301 	and.w	r3, r3, #1
 8003e16:	60bb      	str	r3, [r7, #8]
 8003e18:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003e1a:	4b08      	ldr	r3, [pc, #32]	; (8003e3c <HAL_MspInit+0x58>)
 8003e1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e1e:	4a07      	ldr	r2, [pc, #28]	; (8003e3c <HAL_MspInit+0x58>)
 8003e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e24:	6253      	str	r3, [r2, #36]	; 0x24
 8003e26:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <HAL_MspInit+0x58>)
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e2e:	607b      	str	r3, [r7, #4]
 8003e30:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003e32:	bf00      	nop
 8003e34:	3714      	adds	r7, #20
 8003e36:	46bd      	mov	sp, r7
 8003e38:	bc80      	pop	{r7}
 8003e3a:	4770      	bx	lr
 8003e3c:	40023800 	.word	0x40023800

08003e40 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b08a      	sub	sp, #40	; 0x28
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e48:	f107 0314 	add.w	r3, r7, #20
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]
 8003e50:	605a      	str	r2, [r3, #4]
 8003e52:	609a      	str	r2, [r3, #8]
 8003e54:	60da      	str	r2, [r3, #12]
 8003e56:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	4a15      	ldr	r2, [pc, #84]	; (8003eb4 <HAL_ADC_MspInit+0x74>)
 8003e5e:	4293      	cmp	r3, r2
 8003e60:	d123      	bne.n	8003eaa <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003e62:	4b15      	ldr	r3, [pc, #84]	; (8003eb8 <HAL_ADC_MspInit+0x78>)
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	4a14      	ldr	r2, [pc, #80]	; (8003eb8 <HAL_ADC_MspInit+0x78>)
 8003e68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003e6c:	6213      	str	r3, [r2, #32]
 8003e6e:	4b12      	ldr	r3, [pc, #72]	; (8003eb8 <HAL_ADC_MspInit+0x78>)
 8003e70:	6a1b      	ldr	r3, [r3, #32]
 8003e72:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e76:	613b      	str	r3, [r7, #16]
 8003e78:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e7a:	4b0f      	ldr	r3, [pc, #60]	; (8003eb8 <HAL_ADC_MspInit+0x78>)
 8003e7c:	69db      	ldr	r3, [r3, #28]
 8003e7e:	4a0e      	ldr	r2, [pc, #56]	; (8003eb8 <HAL_ADC_MspInit+0x78>)
 8003e80:	f043 0301 	orr.w	r3, r3, #1
 8003e84:	61d3      	str	r3, [r2, #28]
 8003e86:	4b0c      	ldr	r3, [pc, #48]	; (8003eb8 <HAL_ADC_MspInit+0x78>)
 8003e88:	69db      	ldr	r3, [r3, #28]
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	60fb      	str	r3, [r7, #12]
 8003e90:	68fb      	ldr	r3, [r7, #12]
    /**ADC GPIO Configuration
    PA0-WKUP1     ------> ADC_IN0
    PA2     ------> ADC_IN2
    */
    GPIO_InitStruct.Pin = Pot1_Pin|Pot2_Pin;
 8003e92:	2305      	movs	r3, #5
 8003e94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003e96:	2303      	movs	r3, #3
 8003e98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e9a:	2300      	movs	r3, #0
 8003e9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e9e:	f107 0314 	add.w	r3, r7, #20
 8003ea2:	4619      	mov	r1, r3
 8003ea4:	4805      	ldr	r0, [pc, #20]	; (8003ebc <HAL_ADC_MspInit+0x7c>)
 8003ea6:	f001 f88d 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003eaa:	bf00      	nop
 8003eac:	3728      	adds	r7, #40	; 0x28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	40012400 	.word	0x40012400
 8003eb8:	40023800 	.word	0x40023800
 8003ebc:	40020000 	.word	0x40020000

08003ec0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b08a      	sub	sp, #40	; 0x28
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ec8:	f107 0314 	add.w	r3, r7, #20
 8003ecc:	2200      	movs	r2, #0
 8003ece:	601a      	str	r2, [r3, #0]
 8003ed0:	605a      	str	r2, [r3, #4]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	60da      	str	r2, [r3, #12]
 8003ed6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a17      	ldr	r2, [pc, #92]	; (8003f3c <HAL_I2C_MspInit+0x7c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d128      	bne.n	8003f34 <HAL_I2C_MspInit+0x74>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ee2:	4b17      	ldr	r3, [pc, #92]	; (8003f40 <HAL_I2C_MspInit+0x80>)
 8003ee4:	69db      	ldr	r3, [r3, #28]
 8003ee6:	4a16      	ldr	r2, [pc, #88]	; (8003f40 <HAL_I2C_MspInit+0x80>)
 8003ee8:	f043 0302 	orr.w	r3, r3, #2
 8003eec:	61d3      	str	r3, [r2, #28]
 8003eee:	4b14      	ldr	r3, [pc, #80]	; (8003f40 <HAL_I2C_MspInit+0x80>)
 8003ef0:	69db      	ldr	r3, [r3, #28]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	613b      	str	r3, [r7, #16]
 8003ef8:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003efa:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003efe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f00:	2312      	movs	r3, #18
 8003f02:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f04:	2300      	movs	r3, #0
 8003f06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003f08:	2303      	movs	r3, #3
 8003f0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003f0c:	2304      	movs	r3, #4
 8003f0e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003f10:	f107 0314 	add.w	r3, r7, #20
 8003f14:	4619      	mov	r1, r3
 8003f16:	480b      	ldr	r0, [pc, #44]	; (8003f44 <HAL_I2C_MspInit+0x84>)
 8003f18:	f001 f854 	bl	8004fc4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8003f1c:	4b08      	ldr	r3, [pc, #32]	; (8003f40 <HAL_I2C_MspInit+0x80>)
 8003f1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f20:	4a07      	ldr	r2, [pc, #28]	; (8003f40 <HAL_I2C_MspInit+0x80>)
 8003f22:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003f26:	6253      	str	r3, [r2, #36]	; 0x24
 8003f28:	4b05      	ldr	r3, [pc, #20]	; (8003f40 <HAL_I2C_MspInit+0x80>)
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f30:	60fb      	str	r3, [r7, #12]
 8003f32:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8003f34:	bf00      	nop
 8003f36:	3728      	adds	r7, #40	; 0x28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}
 8003f3c:	40005800 	.word	0x40005800
 8003f40:	40023800 	.word	0x40023800
 8003f44:	40020400 	.word	0x40020400

08003f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b08c      	sub	sp, #48	; 0x30
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f50:	f107 031c 	add.w	r3, r7, #28
 8003f54:	2200      	movs	r2, #0
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	605a      	str	r2, [r3, #4]
 8003f5a:	609a      	str	r2, [r3, #8]
 8003f5c:	60da      	str	r2, [r3, #12]
 8003f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a2e      	ldr	r2, [pc, #184]	; (8004020 <HAL_SPI_MspInit+0xd8>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d128      	bne.n	8003fbc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003f6c:	6a1b      	ldr	r3, [r3, #32]
 8003f6e:	4a2d      	ldr	r2, [pc, #180]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003f74:	6213      	str	r3, [r2, #32]
 8003f76:	4b2b      	ldr	r3, [pc, #172]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003f78:	6a1b      	ldr	r3, [r3, #32]
 8003f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003f7e:	61bb      	str	r3, [r7, #24]
 8003f80:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f82:	4b28      	ldr	r3, [pc, #160]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003f84:	69db      	ldr	r3, [r3, #28]
 8003f86:	4a27      	ldr	r2, [pc, #156]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003f88:	f043 0302 	orr.w	r3, r3, #2
 8003f8c:	61d3      	str	r3, [r2, #28]
 8003f8e:	4b25      	ldr	r3, [pc, #148]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003f90:	69db      	ldr	r3, [r3, #28]
 8003f92:	f003 0302 	and.w	r3, r3, #2
 8003f96:	617b      	str	r3, [r7, #20]
 8003f98:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8003f9a:	2338      	movs	r3, #56	; 0x38
 8003f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fa2:	2301      	movs	r3, #1
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa6:	2303      	movs	r3, #3
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003faa:	2305      	movs	r3, #5
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003fae:	f107 031c 	add.w	r3, r7, #28
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	481c      	ldr	r0, [pc, #112]	; (8004028 <HAL_SPI_MspInit+0xe0>)
 8003fb6:	f001 f805 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003fba:	e02d      	b.n	8004018 <HAL_SPI_MspInit+0xd0>
  else if(hspi->Instance==SPI2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	4a1a      	ldr	r2, [pc, #104]	; (800402c <HAL_SPI_MspInit+0xe4>)
 8003fc2:	4293      	cmp	r3, r2
 8003fc4:	d128      	bne.n	8004018 <HAL_SPI_MspInit+0xd0>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003fc6:	4b17      	ldr	r3, [pc, #92]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	4a16      	ldr	r2, [pc, #88]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003fd0:	6253      	str	r3, [r2, #36]	; 0x24
 8003fd2:	4b14      	ldr	r3, [pc, #80]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fda:	613b      	str	r3, [r7, #16]
 8003fdc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003fde:	4b11      	ldr	r3, [pc, #68]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	4a10      	ldr	r2, [pc, #64]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003fe4:	f043 0302 	orr.w	r3, r3, #2
 8003fe8:	61d3      	str	r3, [r2, #28]
 8003fea:	4b0e      	ldr	r3, [pc, #56]	; (8004024 <HAL_SPI_MspInit+0xdc>)
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f003 0302 	and.w	r3, r3, #2
 8003ff2:	60fb      	str	r3, [r7, #12]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003ff6:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8003ffa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ffc:	2302      	movs	r3, #2
 8003ffe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004000:	2300      	movs	r3, #0
 8004002:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004004:	2303      	movs	r3, #3
 8004006:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8004008:	2305      	movs	r3, #5
 800400a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800400c:	f107 031c 	add.w	r3, r7, #28
 8004010:	4619      	mov	r1, r3
 8004012:	4805      	ldr	r0, [pc, #20]	; (8004028 <HAL_SPI_MspInit+0xe0>)
 8004014:	f000 ffd6 	bl	8004fc4 <HAL_GPIO_Init>
}
 8004018:	bf00      	nop
 800401a:	3730      	adds	r7, #48	; 0x30
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40013000 	.word	0x40013000
 8004024:	40023800 	.word	0x40023800
 8004028:	40020400 	.word	0x40020400
 800402c:	40003800 	.word	0x40003800

08004030 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004030:	b580      	push	{r7, lr}
 8004032:	b08a      	sub	sp, #40	; 0x28
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004040:	d10c      	bne.n	800405c <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8004042:	4b46      	ldr	r3, [pc, #280]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004044:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004046:	4a45      	ldr	r2, [pc, #276]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6253      	str	r3, [r2, #36]	; 0x24
 800404e:	4b43      	ldr	r3, [pc, #268]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004050:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004052:	f003 0301 	and.w	r3, r3, #1
 8004056:	627b      	str	r3, [r7, #36]	; 0x24
 8004058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
  /* USER CODE BEGIN TIM10_MspInit 1 */

  /* USER CODE END TIM10_MspInit 1 */
  }

}
 800405a:	e07a      	b.n	8004152 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM3)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a3f      	ldr	r2, [pc, #252]	; (8004160 <HAL_TIM_Base_MspInit+0x130>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d10c      	bne.n	8004080 <HAL_TIM_Base_MspInit+0x50>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8004066:	4b3d      	ldr	r3, [pc, #244]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406a:	4a3c      	ldr	r2, [pc, #240]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 800406c:	f043 0302 	orr.w	r3, r3, #2
 8004070:	6253      	str	r3, [r2, #36]	; 0x24
 8004072:	4b3a      	ldr	r3, [pc, #232]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	623b      	str	r3, [r7, #32]
 800407c:	6a3b      	ldr	r3, [r7, #32]
}
 800407e:	e068      	b.n	8004152 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM4)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4a37      	ldr	r2, [pc, #220]	; (8004164 <HAL_TIM_Base_MspInit+0x134>)
 8004086:	4293      	cmp	r3, r2
 8004088:	d10c      	bne.n	80040a4 <HAL_TIM_Base_MspInit+0x74>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800408a:	4b34      	ldr	r3, [pc, #208]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 800408c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408e:	4a33      	ldr	r2, [pc, #204]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004090:	f043 0304 	orr.w	r3, r3, #4
 8004094:	6253      	str	r3, [r2, #36]	; 0x24
 8004096:	4b31      	ldr	r3, [pc, #196]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409a:	f003 0304 	and.w	r3, r3, #4
 800409e:	61fb      	str	r3, [r7, #28]
 80040a0:	69fb      	ldr	r3, [r7, #28]
}
 80040a2:	e056      	b.n	8004152 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM6)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a2f      	ldr	r2, [pc, #188]	; (8004168 <HAL_TIM_Base_MspInit+0x138>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d114      	bne.n	80040d8 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80040ae:	4b2b      	ldr	r3, [pc, #172]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 80040b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b2:	4a2a      	ldr	r2, [pc, #168]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 80040b4:	f043 0310 	orr.w	r3, r3, #16
 80040b8:	6253      	str	r3, [r2, #36]	; 0x24
 80040ba:	4b28      	ldr	r3, [pc, #160]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 80040bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040be:	f003 0310 	and.w	r3, r3, #16
 80040c2:	61bb      	str	r3, [r7, #24]
 80040c4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(TIM6_IRQn, 0, 0);
 80040c6:	2200      	movs	r2, #0
 80040c8:	2100      	movs	r1, #0
 80040ca:	202b      	movs	r0, #43	; 0x2b
 80040cc:	f000 ff43 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80040d0:	202b      	movs	r0, #43	; 0x2b
 80040d2:	f000 ff5c 	bl	8004f8e <HAL_NVIC_EnableIRQ>
}
 80040d6:	e03c      	b.n	8004152 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM7)
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	4a23      	ldr	r2, [pc, #140]	; (800416c <HAL_TIM_Base_MspInit+0x13c>)
 80040de:	4293      	cmp	r3, r2
 80040e0:	d114      	bne.n	800410c <HAL_TIM_Base_MspInit+0xdc>
    __HAL_RCC_TIM7_CLK_ENABLE();
 80040e2:	4b1e      	ldr	r3, [pc, #120]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 80040e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e6:	4a1d      	ldr	r2, [pc, #116]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 80040e8:	f043 0320 	orr.w	r3, r3, #32
 80040ec:	6253      	str	r3, [r2, #36]	; 0x24
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 80040f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	617b      	str	r3, [r7, #20]
 80040f8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80040fa:	2200      	movs	r2, #0
 80040fc:	2100      	movs	r1, #0
 80040fe:	202c      	movs	r0, #44	; 0x2c
 8004100:	f000 ff29 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8004104:	202c      	movs	r0, #44	; 0x2c
 8004106:	f000 ff42 	bl	8004f8e <HAL_NVIC_EnableIRQ>
}
 800410a:	e022      	b.n	8004152 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM9)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4a17      	ldr	r2, [pc, #92]	; (8004170 <HAL_TIM_Base_MspInit+0x140>)
 8004112:	4293      	cmp	r3, r2
 8004114:	d10c      	bne.n	8004130 <HAL_TIM_Base_MspInit+0x100>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8004116:	4b11      	ldr	r3, [pc, #68]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004118:	6a1b      	ldr	r3, [r3, #32]
 800411a:	4a10      	ldr	r2, [pc, #64]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 800411c:	f043 0304 	orr.w	r3, r3, #4
 8004120:	6213      	str	r3, [r2, #32]
 8004122:	4b0e      	ldr	r3, [pc, #56]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004124:	6a1b      	ldr	r3, [r3, #32]
 8004126:	f003 0304 	and.w	r3, r3, #4
 800412a:	613b      	str	r3, [r7, #16]
 800412c:	693b      	ldr	r3, [r7, #16]
}
 800412e:	e010      	b.n	8004152 <HAL_TIM_Base_MspInit+0x122>
  else if(htim_base->Instance==TIM10)
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	4a0f      	ldr	r2, [pc, #60]	; (8004174 <HAL_TIM_Base_MspInit+0x144>)
 8004136:	4293      	cmp	r3, r2
 8004138:	d10b      	bne.n	8004152 <HAL_TIM_Base_MspInit+0x122>
    __HAL_RCC_TIM10_CLK_ENABLE();
 800413a:	4b08      	ldr	r3, [pc, #32]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 800413c:	6a1b      	ldr	r3, [r3, #32]
 800413e:	4a07      	ldr	r2, [pc, #28]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004140:	f043 0308 	orr.w	r3, r3, #8
 8004144:	6213      	str	r3, [r2, #32]
 8004146:	4b05      	ldr	r3, [pc, #20]	; (800415c <HAL_TIM_Base_MspInit+0x12c>)
 8004148:	6a1b      	ldr	r3, [r3, #32]
 800414a:	f003 0308 	and.w	r3, r3, #8
 800414e:	60fb      	str	r3, [r7, #12]
 8004150:	68fb      	ldr	r3, [r7, #12]
}
 8004152:	bf00      	nop
 8004154:	3728      	adds	r7, #40	; 0x28
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
 800415a:	bf00      	nop
 800415c:	40023800 	.word	0x40023800
 8004160:	40000400 	.word	0x40000400
 8004164:	40000800 	.word	0x40000800
 8004168:	40001000 	.word	0x40001000
 800416c:	40001400 	.word	0x40001400
 8004170:	40010800 	.word	0x40010800
 8004174:	40010c00 	.word	0x40010c00

08004178 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM11)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a09      	ldr	r2, [pc, #36]	; (80041ac <HAL_TIM_PWM_MspInit+0x34>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d10b      	bne.n	80041a2 <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM11_MspInit 0 */

  /* USER CODE END TIM11_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM11_CLK_ENABLE();
 800418a:	4b09      	ldr	r3, [pc, #36]	; (80041b0 <HAL_TIM_PWM_MspInit+0x38>)
 800418c:	6a1b      	ldr	r3, [r3, #32]
 800418e:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <HAL_TIM_PWM_MspInit+0x38>)
 8004190:	f043 0310 	orr.w	r3, r3, #16
 8004194:	6213      	str	r3, [r2, #32]
 8004196:	4b06      	ldr	r3, [pc, #24]	; (80041b0 <HAL_TIM_PWM_MspInit+0x38>)
 8004198:	6a1b      	ldr	r3, [r3, #32]
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	60fb      	str	r3, [r7, #12]
 80041a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM11_MspInit 1 */

  /* USER CODE END TIM11_MspInit 1 */
  }

}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bc80      	pop	{r7}
 80041aa:	4770      	bx	lr
 80041ac:	40011000 	.word	0x40011000
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08e      	sub	sp, #56	; 0x38
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80041bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80041c0:	2200      	movs	r2, #0
 80041c2:	601a      	str	r2, [r3, #0]
 80041c4:	605a      	str	r2, [r3, #4]
 80041c6:	609a      	str	r2, [r3, #8]
 80041c8:	60da      	str	r2, [r3, #12]
 80041ca:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80041d4:	d11c      	bne.n	8004210 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80041d6:	4b66      	ldr	r3, [pc, #408]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80041d8:	69db      	ldr	r3, [r3, #28]
 80041da:	4a65      	ldr	r2, [pc, #404]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80041dc:	f043 0301 	orr.w	r3, r3, #1
 80041e0:	61d3      	str	r3, [r2, #28]
 80041e2:	4b63      	ldr	r3, [pc, #396]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f003 0301 	and.w	r3, r3, #1
 80041ea:	623b      	str	r3, [r7, #32]
 80041ec:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_5;
 80041ee:	2322      	movs	r3, #34	; 0x22
 80041f0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80041f2:	2302      	movs	r3, #2
 80041f4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80041f6:	2300      	movs	r3, #0
 80041f8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80041fa:	2300      	movs	r3, #0
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80041fe:	2301      	movs	r3, #1
 8004200:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004202:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004206:	4619      	mov	r1, r3
 8004208:	485a      	ldr	r0, [pc, #360]	; (8004374 <HAL_TIM_MspPostInit+0x1c0>)
 800420a:	f000 fedb 	bl	8004fc4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM11_MspPostInit 1 */

  /* USER CODE END TIM11_MspPostInit 1 */
  }

}
 800420e:	e0aa      	b.n	8004366 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM3)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	4a58      	ldr	r2, [pc, #352]	; (8004378 <HAL_TIM_MspPostInit+0x1c4>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d11c      	bne.n	8004254 <HAL_TIM_MspPostInit+0xa0>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800421a:	4b55      	ldr	r3, [pc, #340]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	4a54      	ldr	r2, [pc, #336]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 8004220:	f043 0301 	orr.w	r3, r3, #1
 8004224:	61d3      	str	r3, [r2, #28]
 8004226:	4b52      	ldr	r3, [pc, #328]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 8004228:	69db      	ldr	r3, [r3, #28]
 800422a:	f003 0301 	and.w	r3, r3, #1
 800422e:	61fb      	str	r3, [r7, #28]
 8004230:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8004232:	2340      	movs	r3, #64	; 0x40
 8004234:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004236:	2302      	movs	r3, #2
 8004238:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800423a:	2300      	movs	r3, #0
 800423c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800423e:	2300      	movs	r3, #0
 8004240:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8004242:	2302      	movs	r3, #2
 8004244:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004246:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800424a:	4619      	mov	r1, r3
 800424c:	4849      	ldr	r0, [pc, #292]	; (8004374 <HAL_TIM_MspPostInit+0x1c0>)
 800424e:	f000 feb9 	bl	8004fc4 <HAL_GPIO_Init>
}
 8004252:	e088      	b.n	8004366 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM4)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	4a48      	ldr	r2, [pc, #288]	; (800437c <HAL_TIM_MspPostInit+0x1c8>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d11c      	bne.n	8004298 <HAL_TIM_MspPostInit+0xe4>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800425e:	4b44      	ldr	r3, [pc, #272]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 8004260:	69db      	ldr	r3, [r3, #28]
 8004262:	4a43      	ldr	r2, [pc, #268]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 8004264:	f043 0302 	orr.w	r3, r3, #2
 8004268:	61d3      	str	r3, [r2, #28]
 800426a:	4b41      	ldr	r3, [pc, #260]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 800426c:	69db      	ldr	r3, [r3, #28]
 800426e:	f003 0302 	and.w	r3, r3, #2
 8004272:	61bb      	str	r3, [r7, #24]
 8004274:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004276:	23c0      	movs	r3, #192	; 0xc0
 8004278:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800427a:	2302      	movs	r3, #2
 800427c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800427e:	2300      	movs	r3, #0
 8004280:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004282:	2300      	movs	r3, #0
 8004284:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8004286:	2302      	movs	r3, #2
 8004288:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800428a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800428e:	4619      	mov	r1, r3
 8004290:	483b      	ldr	r0, [pc, #236]	; (8004380 <HAL_TIM_MspPostInit+0x1cc>)
 8004292:	f000 fe97 	bl	8004fc4 <HAL_GPIO_Init>
}
 8004296:	e066      	b.n	8004366 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM9)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	4a39      	ldr	r2, [pc, #228]	; (8004384 <HAL_TIM_MspPostInit+0x1d0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d11c      	bne.n	80042dc <HAL_TIM_MspPostInit+0x128>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80042a2:	4b33      	ldr	r3, [pc, #204]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	4a32      	ldr	r2, [pc, #200]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80042a8:	f043 0301 	orr.w	r3, r3, #1
 80042ac:	61d3      	str	r3, [r2, #28]
 80042ae:	4b30      	ldr	r3, [pc, #192]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	617b      	str	r3, [r7, #20]
 80042b8:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80042ba:	2308      	movs	r3, #8
 80042bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80042be:	2302      	movs	r3, #2
 80042c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80042c2:	2300      	movs	r3, #0
 80042c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80042c6:	2300      	movs	r3, #0
 80042c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80042ca:	2303      	movs	r3, #3
 80042cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80042ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80042d2:	4619      	mov	r1, r3
 80042d4:	4827      	ldr	r0, [pc, #156]	; (8004374 <HAL_TIM_MspPostInit+0x1c0>)
 80042d6:	f000 fe75 	bl	8004fc4 <HAL_GPIO_Init>
}
 80042da:	e044      	b.n	8004366 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM10)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a29      	ldr	r2, [pc, #164]	; (8004388 <HAL_TIM_MspPostInit+0x1d4>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d11d      	bne.n	8004322 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80042e6:	4b22      	ldr	r3, [pc, #136]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	4a21      	ldr	r2, [pc, #132]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80042ec:	f043 0302 	orr.w	r3, r3, #2
 80042f0:	61d3      	str	r3, [r2, #28]
 80042f2:	4b1f      	ldr	r3, [pc, #124]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 80042f4:	69db      	ldr	r3, [r3, #28]
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	613b      	str	r3, [r7, #16]
 80042fc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80042fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004304:	2302      	movs	r3, #2
 8004306:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004308:	2300      	movs	r3, #0
 800430a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800430c:	2300      	movs	r3, #0
 800430e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8004310:	2303      	movs	r3, #3
 8004312:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004318:	4619      	mov	r1, r3
 800431a:	4819      	ldr	r0, [pc, #100]	; (8004380 <HAL_TIM_MspPostInit+0x1cc>)
 800431c:	f000 fe52 	bl	8004fc4 <HAL_GPIO_Init>
}
 8004320:	e021      	b.n	8004366 <HAL_TIM_MspPostInit+0x1b2>
  else if(htim->Instance==TIM11)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	4a19      	ldr	r2, [pc, #100]	; (800438c <HAL_TIM_MspPostInit+0x1d8>)
 8004328:	4293      	cmp	r3, r2
 800432a:	d11c      	bne.n	8004366 <HAL_TIM_MspPostInit+0x1b2>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800432c:	4b10      	ldr	r3, [pc, #64]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 800432e:	69db      	ldr	r3, [r3, #28]
 8004330:	4a0f      	ldr	r2, [pc, #60]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 8004332:	f043 0302 	orr.w	r3, r3, #2
 8004336:	61d3      	str	r3, [r2, #28]
 8004338:	4b0d      	ldr	r3, [pc, #52]	; (8004370 <HAL_TIM_MspPostInit+0x1bc>)
 800433a:	69db      	ldr	r3, [r3, #28]
 800433c:	f003 0302 	and.w	r3, r3, #2
 8004340:	60fb      	str	r3, [r7, #12]
 8004342:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8004344:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004348:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800434a:	2302      	movs	r3, #2
 800434c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800434e:	2300      	movs	r3, #0
 8004350:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004352:	2300      	movs	r3, #0
 8004354:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8004356:	2303      	movs	r3, #3
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800435a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800435e:	4619      	mov	r1, r3
 8004360:	4807      	ldr	r0, [pc, #28]	; (8004380 <HAL_TIM_MspPostInit+0x1cc>)
 8004362:	f000 fe2f 	bl	8004fc4 <HAL_GPIO_Init>
}
 8004366:	bf00      	nop
 8004368:	3738      	adds	r7, #56	; 0x38
 800436a:	46bd      	mov	sp, r7
 800436c:	bd80      	pop	{r7, pc}
 800436e:	bf00      	nop
 8004370:	40023800 	.word	0x40023800
 8004374:	40020000 	.word	0x40020000
 8004378:	40000400 	.word	0x40000400
 800437c:	40000800 	.word	0x40000800
 8004380:	40020400 	.word	0x40020400
 8004384:	40010800 	.word	0x40010800
 8004388:	40010c00 	.word	0x40010c00
 800438c:	40011000 	.word	0x40011000

08004390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004390:	b480      	push	{r7}
 8004392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004394:	e7fe      	b.n	8004394 <NMI_Handler+0x4>

08004396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004396:	b480      	push	{r7}
 8004398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800439a:	e7fe      	b.n	800439a <HardFault_Handler+0x4>

0800439c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80043a0:	e7fe      	b.n	80043a0 <MemManage_Handler+0x4>

080043a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80043a2:	b480      	push	{r7}
 80043a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80043a6:	e7fe      	b.n	80043a6 <BusFault_Handler+0x4>

080043a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80043a8:	b480      	push	{r7}
 80043aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80043ac:	e7fe      	b.n	80043ac <UsageFault_Handler+0x4>

080043ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80043ae:	b480      	push	{r7}
 80043b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80043b2:	bf00      	nop
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bc80      	pop	{r7}
 80043b8:	4770      	bx	lr

080043ba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80043ba:	b480      	push	{r7}
 80043bc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80043be:	bf00      	nop
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bc80      	pop	{r7}
 80043c4:	4770      	bx	lr

080043c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80043c6:	b480      	push	{r7}
 80043c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80043ca:	bf00      	nop
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bc80      	pop	{r7}
 80043d0:	4770      	bx	lr

080043d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80043d6:	f000 f8e1 	bl	800459c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80043da:	bf00      	nop
 80043dc:	bd80      	pop	{r7, pc}
	...

080043e0 <USB_LP_IRQHandler>:

/**
  * @brief This function handles USB low priority interrupt.
  */
void USB_LP_IRQHandler(void)
{
 80043e0:	b580      	push	{r7, lr}
 80043e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_LP_IRQn 0 */

  /* USER CODE END USB_LP_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 80043e4:	4802      	ldr	r0, [pc, #8]	; (80043f0 <USB_LP_IRQHandler+0x10>)
 80043e6:	f001 fd1b 	bl	8005e20 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_LP_IRQn 1 */

  /* USER CODE END USB_LP_IRQn 1 */
}
 80043ea:	bf00      	nop
 80043ec:	bd80      	pop	{r7, pc}
 80043ee:	bf00      	nop
 80043f0:	20001d70 	.word	0x20001d70

080043f4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ROT_BUT_Pin);
 80043f8:	f44f 7080 	mov.w	r0, #256	; 0x100
 80043fc:	f000 ffaa 	bl	8005354 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(ROT_CLK_Pin);
 8004400:	f44f 7000 	mov.w	r0, #512	; 0x200
 8004404:	f000 ffa6 	bl	8005354 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8004408:	bf00      	nop
 800440a:	bd80      	pop	{r7, pc}

0800440c <TIM6_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt.
  */
void TIM6_IRQHandler(void)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8004410:	4802      	ldr	r0, [pc, #8]	; (800441c <TIM6_IRQHandler+0x10>)
 8004412:	f004 fa65 	bl	80088e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_IRQn 1 */

  /* USER CODE END TIM6_IRQn 1 */
}
 8004416:	bf00      	nop
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	2000049c 	.word	0x2000049c

08004420 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8004424:	4802      	ldr	r0, [pc, #8]	; (8004430 <TIM7_IRQHandler+0x10>)
 8004426:	f004 fa5b 	bl	80088e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800442a:	bf00      	nop
 800442c:	bd80      	pop	{r7, pc}
 800442e:	bf00      	nop
 8004430:	200004dc 	.word	0x200004dc

08004434 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004434:	b580      	push	{r7, lr}
 8004436:	b086      	sub	sp, #24
 8004438:	af00      	add	r7, sp, #0
 800443a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800443c:	4a14      	ldr	r2, [pc, #80]	; (8004490 <_sbrk+0x5c>)
 800443e:	4b15      	ldr	r3, [pc, #84]	; (8004494 <_sbrk+0x60>)
 8004440:	1ad3      	subs	r3, r2, r3
 8004442:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004444:	697b      	ldr	r3, [r7, #20]
 8004446:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004448:	4b13      	ldr	r3, [pc, #76]	; (8004498 <_sbrk+0x64>)
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	2b00      	cmp	r3, #0
 800444e:	d102      	bne.n	8004456 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004450:	4b11      	ldr	r3, [pc, #68]	; (8004498 <_sbrk+0x64>)
 8004452:	4a12      	ldr	r2, [pc, #72]	; (800449c <_sbrk+0x68>)
 8004454:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004456:	4b10      	ldr	r3, [pc, #64]	; (8004498 <_sbrk+0x64>)
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	4413      	add	r3, r2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	429a      	cmp	r2, r3
 8004462:	d207      	bcs.n	8004474 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004464:	f00d fb2c 	bl	8011ac0 <__errno>
 8004468:	4603      	mov	r3, r0
 800446a:	220c      	movs	r2, #12
 800446c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800446e:	f04f 33ff 	mov.w	r3, #4294967295
 8004472:	e009      	b.n	8004488 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004474:	4b08      	ldr	r3, [pc, #32]	; (8004498 <_sbrk+0x64>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800447a:	4b07      	ldr	r3, [pc, #28]	; (8004498 <_sbrk+0x64>)
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4413      	add	r3, r2
 8004482:	4a05      	ldr	r2, [pc, #20]	; (8004498 <_sbrk+0x64>)
 8004484:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004486:	68fb      	ldr	r3, [r7, #12]
}
 8004488:	4618      	mov	r0, r3
 800448a:	3718      	adds	r7, #24
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20004000 	.word	0x20004000
 8004494:	00000400 	.word	0x00000400
 8004498:	20000eb0 	.word	0x20000eb0
 800449c:	200023c8 	.word	0x200023c8

080044a0 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80044a0:	b480      	push	{r7}
 80044a2:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044a4:	bf00      	nop
 80044a6:	46bd      	mov	sp, r7
 80044a8:	bc80      	pop	{r7}
 80044aa:	4770      	bx	lr

080044ac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80044ac:	480c      	ldr	r0, [pc, #48]	; (80044e0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80044ae:	490d      	ldr	r1, [pc, #52]	; (80044e4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80044b0:	4a0d      	ldr	r2, [pc, #52]	; (80044e8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80044b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80044b4:	e002      	b.n	80044bc <LoopCopyDataInit>

080044b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80044b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80044b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80044ba:	3304      	adds	r3, #4

080044bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80044bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80044be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80044c0:	d3f9      	bcc.n	80044b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80044c2:	4a0a      	ldr	r2, [pc, #40]	; (80044ec <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80044c4:	4c0a      	ldr	r4, [pc, #40]	; (80044f0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80044c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80044c8:	e001      	b.n	80044ce <LoopFillZerobss>

080044ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80044ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80044cc:	3204      	adds	r2, #4

080044ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80044ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80044d0:	d3fb      	bcc.n	80044ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80044d2:	f7ff ffe5 	bl	80044a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80044d6:	f00d faf9 	bl	8011acc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80044da:	f7fd fb59 	bl	8001b90 <main>
  bx lr
 80044de:	4770      	bx	lr
  ldr r0, =_sdata
 80044e0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80044e4:	20000268 	.word	0x20000268
  ldr r2, =_sidata
 80044e8:	080129fc 	.word	0x080129fc
  ldr r2, =_sbss
 80044ec:	20000268 	.word	0x20000268
  ldr r4, =_ebss
 80044f0:	200023c4 	.word	0x200023c4

080044f4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80044f4:	e7fe      	b.n	80044f4 <ADC1_IRQHandler>

080044f6 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80044f6:	b580      	push	{r7, lr}
 80044f8:	b082      	sub	sp, #8
 80044fa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80044fc:	2300      	movs	r3, #0
 80044fe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004500:	2003      	movs	r0, #3
 8004502:	f000 fd1d 	bl	8004f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004506:	200f      	movs	r0, #15
 8004508:	f000 f80e 	bl	8004528 <HAL_InitTick>
 800450c:	4603      	mov	r3, r0
 800450e:	2b00      	cmp	r3, #0
 8004510:	d002      	beq.n	8004518 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	71fb      	strb	r3, [r7, #7]
 8004516:	e001      	b.n	800451c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8004518:	f7ff fc64 	bl	8003de4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800451c:	79fb      	ldrb	r3, [r7, #7]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3708      	adds	r7, #8
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8004530:	2300      	movs	r3, #0
 8004532:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <HAL_InitTick+0x68>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d022      	beq.n	8004582 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800453c:	4b15      	ldr	r3, [pc, #84]	; (8004594 <HAL_InitTick+0x6c>)
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	4b13      	ldr	r3, [pc, #76]	; (8004590 <HAL_InitTick+0x68>)
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004548:	fbb1 f3f3 	udiv	r3, r1, r3
 800454c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004550:	4618      	mov	r0, r3
 8004552:	f000 fd2a 	bl	8004faa <HAL_SYSTICK_Config>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d10f      	bne.n	800457c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2b0f      	cmp	r3, #15
 8004560:	d809      	bhi.n	8004576 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004562:	2200      	movs	r2, #0
 8004564:	6879      	ldr	r1, [r7, #4]
 8004566:	f04f 30ff 	mov.w	r0, #4294967295
 800456a:	f000 fcf4 	bl	8004f56 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800456e:	4a0a      	ldr	r2, [pc, #40]	; (8004598 <HAL_InitTick+0x70>)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6013      	str	r3, [r2, #0]
 8004574:	e007      	b.n	8004586 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	73fb      	strb	r3, [r7, #15]
 800457a:	e004      	b.n	8004586 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e001      	b.n	8004586 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8004582:	2301      	movs	r3, #1
 8004584:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8004586:	7bfb      	ldrb	r3, [r7, #15]
}
 8004588:	4618      	mov	r0, r3
 800458a:	3710      	adds	r7, #16
 800458c:	46bd      	mov	sp, r7
 800458e:	bd80      	pop	{r7, pc}
 8004590:	2000008c 	.word	0x2000008c
 8004594:	20000084 	.word	0x20000084
 8004598:	20000088 	.word	0x20000088

0800459c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800459c:	b480      	push	{r7}
 800459e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80045a0:	4b05      	ldr	r3, [pc, #20]	; (80045b8 <HAL_IncTick+0x1c>)
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	4b05      	ldr	r3, [pc, #20]	; (80045bc <HAL_IncTick+0x20>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4413      	add	r3, r2
 80045aa:	4a03      	ldr	r2, [pc, #12]	; (80045b8 <HAL_IncTick+0x1c>)
 80045ac:	6013      	str	r3, [r2, #0]
}
 80045ae:	bf00      	nop
 80045b0:	46bd      	mov	sp, r7
 80045b2:	bc80      	pop	{r7}
 80045b4:	4770      	bx	lr
 80045b6:	bf00      	nop
 80045b8:	20000eb4 	.word	0x20000eb4
 80045bc:	2000008c 	.word	0x2000008c

080045c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80045c0:	b480      	push	{r7}
 80045c2:	af00      	add	r7, sp, #0
  return uwTick;
 80045c4:	4b02      	ldr	r3, [pc, #8]	; (80045d0 <HAL_GetTick+0x10>)
 80045c6:	681b      	ldr	r3, [r3, #0]
}
 80045c8:	4618      	mov	r0, r3
 80045ca:	46bd      	mov	sp, r7
 80045cc:	bc80      	pop	{r7}
 80045ce:	4770      	bx	lr
 80045d0:	20000eb4 	.word	0x20000eb4

080045d4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80045dc:	f7ff fff0 	bl	80045c0 <HAL_GetTick>
 80045e0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045ec:	d004      	beq.n	80045f8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80045ee:	4b09      	ldr	r3, [pc, #36]	; (8004614 <HAL_Delay+0x40>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	4413      	add	r3, r2
 80045f6:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80045f8:	bf00      	nop
 80045fa:	f7ff ffe1 	bl	80045c0 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	68bb      	ldr	r3, [r7, #8]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68fa      	ldr	r2, [r7, #12]
 8004606:	429a      	cmp	r2, r3
 8004608:	d8f7      	bhi.n	80045fa <HAL_Delay+0x26>
  {
  }
}
 800460a:	bf00      	nop
 800460c:	bf00      	nop
 800460e:	3710      	adds	r7, #16
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}
 8004614:	2000008c 	.word	0x2000008c

08004618 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004618:	b580      	push	{r7, lr}
 800461a:	b08e      	sub	sp, #56	; 0x38
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004620:	2300      	movs	r3, #0
 8004622:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 8004626:	2300      	movs	r3, #0
 8004628:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 800462a:	2300      	movs	r3, #0
 800462c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d101      	bne.n	8004638 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8004634:	2301      	movs	r3, #1
 8004636:	e127      	b.n	8004888 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	691b      	ldr	r3, [r3, #16]
 800463c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004642:	2b00      	cmp	r3, #0
 8004644:	d115      	bne.n	8004672 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004654:	4b8e      	ldr	r3, [pc, #568]	; (8004890 <HAL_ADC_Init+0x278>)
 8004656:	6a1b      	ldr	r3, [r3, #32]
 8004658:	4a8d      	ldr	r2, [pc, #564]	; (8004890 <HAL_ADC_Init+0x278>)
 800465a:	f043 0301 	orr.w	r3, r3, #1
 800465e:	6213      	str	r3, [r2, #32]
 8004660:	4b8b      	ldr	r3, [pc, #556]	; (8004890 <HAL_ADC_Init+0x278>)
 8004662:	6a1b      	ldr	r3, [r3, #32]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	60bb      	str	r3, [r7, #8]
 800466a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800466c:	6878      	ldr	r0, [r7, #4]
 800466e:	f7ff fbe7 	bl	8003e40 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004676:	f003 0310 	and.w	r3, r3, #16
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 80ff 	bne.w	800487e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004684:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8004688:	f023 0302 	bic.w	r3, r3, #2
 800468c:	f043 0202 	orr.w	r2, r3, #2
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8004694:	4b7f      	ldr	r3, [pc, #508]	; (8004894 <HAL_ADC_Init+0x27c>)
 8004696:	685b      	ldr	r3, [r3, #4]
 8004698:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	497c      	ldr	r1, [pc, #496]	; (8004894 <HAL_ADC_Init+0x27c>)
 80046a2:	4313      	orrs	r3, r2
 80046a4:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80046ae:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80046b6:	4619      	mov	r1, r3
 80046b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80046bc:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046be:	6a3b      	ldr	r3, [r7, #32]
 80046c0:	fa93 f3a3 	rbit	r3, r3
 80046c4:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046c6:	69fb      	ldr	r3, [r7, #28]
 80046c8:	fab3 f383 	clz	r3, r3
 80046cc:	b2db      	uxtb	r3, r3
 80046ce:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80046d2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80046d8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80046e0:	4619      	mov	r1, r3
 80046e2:	2302      	movs	r3, #2
 80046e4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046e8:	fa93 f3a3 	rbit	r3, r3
 80046ec:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80046ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046f0:	fab3 f383 	clz	r3, r3
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80046fa:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80046fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80046fe:	4313      	orrs	r3, r2
 8004700:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004706:	2b10      	cmp	r3, #16
 8004708:	d007      	beq.n	800471a <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8004712:	4313      	orrs	r3, r2
 8004714:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004716:	4313      	orrs	r3, r2
 8004718:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004724:	2b40      	cmp	r3, #64	; 0x40
 8004726:	d04f      	beq.n	80047c8 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	699b      	ldr	r3, [r3, #24]
 800472c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800472e:	4313      	orrs	r3, r2
 8004730:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800473a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800473c:	687a      	ldr	r2, [r7, #4]
 800473e:	6912      	ldr	r2, [r2, #16]
 8004740:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8004744:	d003      	beq.n	800474e <HAL_ADC_Init+0x136>
 8004746:	687a      	ldr	r2, [r7, #4]
 8004748:	6912      	ldr	r2, [r2, #16]
 800474a:	2a01      	cmp	r2, #1
 800474c:	d102      	bne.n	8004754 <HAL_ADC_Init+0x13c>
 800474e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004752:	e000      	b.n	8004756 <HAL_ADC_Init+0x13e>
 8004754:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8004756:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8004758:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800475a:	4313      	orrs	r3, r2
 800475c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8004764:	2b01      	cmp	r3, #1
 8004766:	d125      	bne.n	80047b4 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800476e:	2b00      	cmp	r3, #0
 8004770:	d114      	bne.n	800479c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004776:	3b01      	subs	r3, #1
 8004778:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800477c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800477e:	69ba      	ldr	r2, [r7, #24]
 8004780:	fa92 f2a2 	rbit	r2, r2
 8004784:	617a      	str	r2, [r7, #20]
  return result;
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	fab2 f282 	clz	r2, r2
 800478c:	b2d2      	uxtb	r2, r2
 800478e:	4093      	lsls	r3, r2
 8004790:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004794:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004796:	4313      	orrs	r3, r2
 8004798:	633b      	str	r3, [r7, #48]	; 0x30
 800479a:	e00b      	b.n	80047b4 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047a0:	f043 0220 	orr.w	r2, r3, #32
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047ac:	f043 0201 	orr.w	r2, r3, #1
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	4b37      	ldr	r3, [pc, #220]	; (8004898 <HAL_ADC_Init+0x280>)
 80047bc:	4013      	ands	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6812      	ldr	r2, [r2, #0]
 80047c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80047c4:	430b      	orrs	r3, r1
 80047c6:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	689a      	ldr	r2, [r3, #8]
 80047ce:	4b33      	ldr	r3, [pc, #204]	; (800489c <HAL_ADC_Init+0x284>)
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6812      	ldr	r2, [r2, #0]
 80047d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80047d8:	430b      	orrs	r3, r1
 80047da:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	691b      	ldr	r3, [r3, #16]
 80047e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80047e4:	d003      	beq.n	80047ee <HAL_ADC_Init+0x1d6>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	691b      	ldr	r3, [r3, #16]
 80047ea:	2b01      	cmp	r3, #1
 80047ec:	d119      	bne.n	8004822 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047f4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047fc:	3b01      	subs	r3, #1
 80047fe:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8004802:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	fa92 f2a2 	rbit	r2, r2
 800480a:	60fa      	str	r2, [r7, #12]
  return result;
 800480c:	68fa      	ldr	r2, [r7, #12]
 800480e:	fab2 f282 	clz	r2, r2
 8004812:	b2d2      	uxtb	r2, r2
 8004814:	fa03 f202 	lsl.w	r2, r3, r2
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	631a      	str	r2, [r3, #48]	; 0x30
 8004820:	e007      	b.n	8004832 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8004830:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	4b19      	ldr	r3, [pc, #100]	; (80048a0 <HAL_ADC_Init+0x288>)
 800483a:	4013      	ands	r3, r2
 800483c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800483e:	429a      	cmp	r2, r3
 8004840:	d10b      	bne.n	800485a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800484c:	f023 0303 	bic.w	r3, r3, #3
 8004850:	f043 0201 	orr.w	r2, r3, #1
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	64da      	str	r2, [r3, #76]	; 0x4c
 8004858:	e014      	b.n	8004884 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485e:	f023 0312 	bic.w	r3, r3, #18
 8004862:	f043 0210 	orr.w	r2, r3, #16
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800486e:	f043 0201 	orr.w	r2, r3, #1
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800487c:	e002      	b.n	8004884 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800487e:	2301      	movs	r3, #1
 8004880:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004884:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8004888:	4618      	mov	r0, r3
 800488a:	3738      	adds	r7, #56	; 0x38
 800488c:	46bd      	mov	sp, r7
 800488e:	bd80      	pop	{r7, pc}
 8004890:	40023800 	.word	0x40023800
 8004894:	40012700 	.word	0x40012700
 8004898:	fcfc16ff 	.word	0xfcfc16ff
 800489c:	c0fff18d 	.word	0xc0fff18d
 80048a0:	bf80fffe 	.word	0xbf80fffe

080048a4 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b084      	sub	sp, #16
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80048ac:	2300      	movs	r3, #0
 80048ae:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 80048b6:	2b01      	cmp	r3, #1
 80048b8:	d101      	bne.n	80048be <HAL_ADC_Start+0x1a>
 80048ba:	2302      	movs	r3, #2
 80048bc:	e04e      	b.n	800495c <HAL_ADC_Start+0xb8>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2201      	movs	r2, #1
 80048c2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f000 fa12 	bl	8004cf0 <ADC_Enable>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80048d0:	7bfb      	ldrb	r3, [r7, #15]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d141      	bne.n	800495a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048da:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80048de:	f023 0301 	bic.w	r3, r3, #1
 80048e2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	685b      	ldr	r3, [r3, #4]
 80048f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d007      	beq.n	8004908 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80048fc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8004900:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800490c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004914:	d106      	bne.n	8004924 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800491a:	f023 0206 	bic.w	r2, r3, #6
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	651a      	str	r2, [r3, #80]	; 0x50
 8004922:	e002      	b.n	800492a <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2200      	movs	r2, #0
 8004928:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800493a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	689b      	ldr	r3, [r3, #8]
 8004942:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d107      	bne.n	800495a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689a      	ldr	r2, [r3, #8]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004958:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800495a:	7bfb      	ldrb	r3, [r7, #15]
}
 800495c:	4618      	mov	r0, r3
 800495e:	3710      	adds	r7, #16
 8004960:	46bd      	mov	sp, r7
 8004962:	bd80      	pop	{r7, pc}

08004964 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b084      	sub	sp, #16
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800496c:	2300      	movs	r3, #0
 800496e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004976:	2b01      	cmp	r3, #1
 8004978:	d101      	bne.n	800497e <HAL_ADC_Start_IT+0x1a>
 800497a:	2302      	movs	r3, #2
 800497c:	e058      	b.n	8004a30 <HAL_ADC_Start_IT+0xcc>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2201      	movs	r2, #1
 8004982:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f9b2 	bl	8004cf0 <ADC_Enable>
 800498c:	4603      	mov	r3, r0
 800498e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8004990:	7bfb      	ldrb	r3, [r7, #15]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d14b      	bne.n	8004a2e <HAL_ADC_Start_IT+0xca>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800499a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800499e:	f023 0301 	bic.w	r3, r3, #1
 80049a2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d007      	beq.n	80049c8 <HAL_ADC_Start_IT+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049bc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80049c0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80049cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049d4:	d106      	bne.n	80049e4 <HAL_ADC_Start_IT+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049da:	f023 0206 	bic.w	r2, r3, #6
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	651a      	str	r2, [r3, #80]	; 0x50
 80049e2:	e002      	b.n	80049ea <HAL_ADC_Start_IT+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2200      	movs	r2, #0
 80049e8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80049fa:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	687a      	ldr	r2, [r7, #4]
 8004a04:	6812      	ldr	r2, [r2, #0]
 8004a06:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004a0a:	f043 0320 	orr.w	r3, r3, #32
 8004a0e:	6053      	str	r3, [r2, #4]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d107      	bne.n	8004a2e <HAL_ADC_Start_IT+0xca>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	689a      	ldr	r2, [r3, #8]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8004a2c:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 8004a2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3710      	adds	r7, #16
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}

08004a38 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8004a38:	b480      	push	{r7}
 8004a3a:	b083      	sub	sp, #12
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004a46:	4618      	mov	r0, r3
 8004a48:	370c      	adds	r7, #12
 8004a4a:	46bd      	mov	sp, r7
 8004a4c:	bc80      	pop	{r7}
 8004a4e:	4770      	bx	lr

08004a50 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b085      	sub	sp, #20
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	6078      	str	r0, [r7, #4]
 8004a58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 8004a5e:	2300      	movs	r3, #0
 8004a60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8004a68:	2b01      	cmp	r3, #1
 8004a6a:	d101      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x20>
 8004a6c:	2302      	movs	r3, #2
 8004a6e:	e134      	b.n	8004cda <HAL_ADC_ConfigChannel+0x28a>
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	2201      	movs	r2, #1
 8004a74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	2b06      	cmp	r3, #6
 8004a7e:	d81c      	bhi.n	8004aba <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	685a      	ldr	r2, [r3, #4]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	009b      	lsls	r3, r3, #2
 8004a8e:	4413      	add	r3, r2
 8004a90:	3b05      	subs	r3, #5
 8004a92:	221f      	movs	r2, #31
 8004a94:	fa02 f303 	lsl.w	r3, r2, r3
 8004a98:	43db      	mvns	r3, r3
 8004a9a:	4019      	ands	r1, r3
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	6818      	ldr	r0, [r3, #0]
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	685a      	ldr	r2, [r3, #4]
 8004aa4:	4613      	mov	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4413      	add	r3, r2
 8004aaa:	3b05      	subs	r3, #5
 8004aac:	fa00 f203 	lsl.w	r2, r0, r3
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	430a      	orrs	r2, r1
 8004ab6:	641a      	str	r2, [r3, #64]	; 0x40
 8004ab8:	e07e      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	2b0c      	cmp	r3, #12
 8004ac0:	d81c      	bhi.n	8004afc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8004ac8:	683b      	ldr	r3, [r7, #0]
 8004aca:	685a      	ldr	r2, [r3, #4]
 8004acc:	4613      	mov	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4413      	add	r3, r2
 8004ad2:	3b23      	subs	r3, #35	; 0x23
 8004ad4:	221f      	movs	r2, #31
 8004ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8004ada:	43db      	mvns	r3, r3
 8004adc:	4019      	ands	r1, r3
 8004ade:	683b      	ldr	r3, [r7, #0]
 8004ae0:	6818      	ldr	r0, [r3, #0]
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	4613      	mov	r3, r2
 8004ae8:	009b      	lsls	r3, r3, #2
 8004aea:	4413      	add	r3, r2
 8004aec:	3b23      	subs	r3, #35	; 0x23
 8004aee:	fa00 f203 	lsl.w	r2, r0, r3
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	430a      	orrs	r2, r1
 8004af8:	63da      	str	r2, [r3, #60]	; 0x3c
 8004afa:	e05d      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	685b      	ldr	r3, [r3, #4]
 8004b00:	2b12      	cmp	r3, #18
 8004b02:	d81c      	bhi.n	8004b3e <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685a      	ldr	r2, [r3, #4]
 8004b0e:	4613      	mov	r3, r2
 8004b10:	009b      	lsls	r3, r3, #2
 8004b12:	4413      	add	r3, r2
 8004b14:	3b41      	subs	r3, #65	; 0x41
 8004b16:	221f      	movs	r2, #31
 8004b18:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1c:	43db      	mvns	r3, r3
 8004b1e:	4019      	ands	r1, r3
 8004b20:	683b      	ldr	r3, [r7, #0]
 8004b22:	6818      	ldr	r0, [r3, #0]
 8004b24:	683b      	ldr	r3, [r7, #0]
 8004b26:	685a      	ldr	r2, [r3, #4]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	009b      	lsls	r3, r3, #2
 8004b2c:	4413      	add	r3, r2
 8004b2e:	3b41      	subs	r3, #65	; 0x41
 8004b30:	fa00 f203 	lsl.w	r2, r0, r3
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	430a      	orrs	r2, r1
 8004b3a:	639a      	str	r2, [r3, #56]	; 0x38
 8004b3c:	e03c      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b18      	cmp	r3, #24
 8004b44:	d81c      	bhi.n	8004b80 <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	685a      	ldr	r2, [r3, #4]
 8004b50:	4613      	mov	r3, r2
 8004b52:	009b      	lsls	r3, r3, #2
 8004b54:	4413      	add	r3, r2
 8004b56:	3b5f      	subs	r3, #95	; 0x5f
 8004b58:	221f      	movs	r2, #31
 8004b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b5e:	43db      	mvns	r3, r3
 8004b60:	4019      	ands	r1, r3
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	6818      	ldr	r0, [r3, #0]
 8004b66:	683b      	ldr	r3, [r7, #0]
 8004b68:	685a      	ldr	r2, [r3, #4]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	009b      	lsls	r3, r3, #2
 8004b6e:	4413      	add	r3, r2
 8004b70:	3b5f      	subs	r3, #95	; 0x5f
 8004b72:	fa00 f203 	lsl.w	r2, r0, r3
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	430a      	orrs	r2, r1
 8004b7c:	635a      	str	r2, [r3, #52]	; 0x34
 8004b7e:	e01b      	b.n	8004bb8 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	685a      	ldr	r2, [r3, #4]
 8004b8a:	4613      	mov	r3, r2
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	4413      	add	r3, r2
 8004b90:	3b7d      	subs	r3, #125	; 0x7d
 8004b92:	221f      	movs	r2, #31
 8004b94:	fa02 f303 	lsl.w	r3, r2, r3
 8004b98:	43db      	mvns	r3, r3
 8004b9a:	4019      	ands	r1, r3
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	6818      	ldr	r0, [r3, #0]
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	685a      	ldr	r2, [r3, #4]
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	3b7d      	subs	r3, #125	; 0x7d
 8004bac:	fa00 f203 	lsl.w	r2, r0, r3
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8004bb8:	683b      	ldr	r3, [r7, #0]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	2b09      	cmp	r3, #9
 8004bbe:	d81a      	bhi.n	8004bf6 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	6959      	ldr	r1, [r3, #20]
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	4613      	mov	r3, r2
 8004bcc:	005b      	lsls	r3, r3, #1
 8004bce:	4413      	add	r3, r2
 8004bd0:	2207      	movs	r2, #7
 8004bd2:	fa02 f303 	lsl.w	r3, r2, r3
 8004bd6:	43db      	mvns	r3, r3
 8004bd8:	4019      	ands	r1, r3
 8004bda:	683b      	ldr	r3, [r7, #0]
 8004bdc:	6898      	ldr	r0, [r3, #8]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681a      	ldr	r2, [r3, #0]
 8004be2:	4613      	mov	r3, r2
 8004be4:	005b      	lsls	r3, r3, #1
 8004be6:	4413      	add	r3, r2
 8004be8:	fa00 f203 	lsl.w	r2, r0, r3
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	430a      	orrs	r2, r1
 8004bf2:	615a      	str	r2, [r3, #20]
 8004bf4:	e042      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	2b13      	cmp	r3, #19
 8004bfc:	d81c      	bhi.n	8004c38 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	6919      	ldr	r1, [r3, #16]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4613      	mov	r3, r2
 8004c0a:	005b      	lsls	r3, r3, #1
 8004c0c:	4413      	add	r3, r2
 8004c0e:	3b1e      	subs	r3, #30
 8004c10:	2207      	movs	r2, #7
 8004c12:	fa02 f303 	lsl.w	r3, r2, r3
 8004c16:	43db      	mvns	r3, r3
 8004c18:	4019      	ands	r1, r3
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	6898      	ldr	r0, [r3, #8]
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	4613      	mov	r3, r2
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	4413      	add	r3, r2
 8004c28:	3b1e      	subs	r3, #30
 8004c2a:	fa00 f203 	lsl.w	r2, r0, r3
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	430a      	orrs	r2, r1
 8004c34:	611a      	str	r2, [r3, #16]
 8004c36:	e021      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	2b1a      	cmp	r3, #26
 8004c3e:	d81c      	bhi.n	8004c7a <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	68d9      	ldr	r1, [r3, #12]
 8004c46:	683b      	ldr	r3, [r7, #0]
 8004c48:	681a      	ldr	r2, [r3, #0]
 8004c4a:	4613      	mov	r3, r2
 8004c4c:	005b      	lsls	r3, r3, #1
 8004c4e:	4413      	add	r3, r2
 8004c50:	3b3c      	subs	r3, #60	; 0x3c
 8004c52:	2207      	movs	r2, #7
 8004c54:	fa02 f303 	lsl.w	r3, r2, r3
 8004c58:	43db      	mvns	r3, r3
 8004c5a:	4019      	ands	r1, r3
 8004c5c:	683b      	ldr	r3, [r7, #0]
 8004c5e:	6898      	ldr	r0, [r3, #8]
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	4613      	mov	r3, r2
 8004c66:	005b      	lsls	r3, r3, #1
 8004c68:	4413      	add	r3, r2
 8004c6a:	3b3c      	subs	r3, #60	; 0x3c
 8004c6c:	fa00 f203 	lsl.w	r2, r0, r3
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	430a      	orrs	r2, r1
 8004c76:	60da      	str	r2, [r3, #12]
 8004c78:	e000      	b.n	8004c7c <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8004c7a:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c7c:	683b      	ldr	r3, [r7, #0]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b10      	cmp	r3, #16
 8004c82:	d003      	beq.n	8004c8c <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8004c84:	683b      	ldr	r3, [r7, #0]
 8004c86:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8004c88:	2b11      	cmp	r3, #17
 8004c8a:	d121      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8004c8c:	4b15      	ldr	r3, [pc, #84]	; (8004ce4 <HAL_ADC_ConfigChannel+0x294>)
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d11b      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8004c98:	4b12      	ldr	r3, [pc, #72]	; (8004ce4 <HAL_ADC_ConfigChannel+0x294>)
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	4a11      	ldr	r2, [pc, #68]	; (8004ce4 <HAL_ADC_ConfigChannel+0x294>)
 8004c9e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004ca2:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004ca4:	683b      	ldr	r3, [r7, #0]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b10      	cmp	r3, #16
 8004caa:	d111      	bne.n	8004cd0 <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8004cac:	4b0e      	ldr	r3, [pc, #56]	; (8004ce8 <HAL_ADC_ConfigChannel+0x298>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4a0e      	ldr	r2, [pc, #56]	; (8004cec <HAL_ADC_ConfigChannel+0x29c>)
 8004cb2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cb6:	0c9a      	lsrs	r2, r3, #18
 8004cb8:	4613      	mov	r3, r2
 8004cba:	009b      	lsls	r3, r3, #2
 8004cbc:	4413      	add	r3, r2
 8004cbe:	005b      	lsls	r3, r3, #1
 8004cc0:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8004cc2:	e002      	b.n	8004cca <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f9      	bne.n	8004cc4 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8004cd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cda:	4618      	mov	r0, r3
 8004cdc:	3714      	adds	r7, #20
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bc80      	pop	{r7}
 8004ce2:	4770      	bx	lr
 8004ce4:	40012700 	.word	0x40012700
 8004ce8:	20000084 	.word	0x20000084
 8004cec:	431bde83 	.word	0x431bde83

08004cf0 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b084      	sub	sp, #16
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004cf8:	2300      	movs	r3, #0
 8004cfa:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8004cfc:	2300      	movs	r3, #0
 8004cfe:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d0a:	2b40      	cmp	r3, #64	; 0x40
 8004d0c:	d043      	beq.n	8004d96 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	689a      	ldr	r2, [r3, #8]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f042 0201 	orr.w	r2, r2, #1
 8004d1c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8004d1e:	4b20      	ldr	r3, [pc, #128]	; (8004da0 <ADC_Enable+0xb0>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a20      	ldr	r2, [pc, #128]	; (8004da4 <ADC_Enable+0xb4>)
 8004d24:	fba2 2303 	umull	r2, r3, r2, r3
 8004d28:	0c9a      	lsrs	r2, r3, #18
 8004d2a:	4613      	mov	r3, r2
 8004d2c:	005b      	lsls	r3, r3, #1
 8004d2e:	4413      	add	r3, r2
 8004d30:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8004d32:	e002      	b.n	8004d3a <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	3b01      	subs	r3, #1
 8004d38:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d1f9      	bne.n	8004d34 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8004d40:	f7ff fc3e 	bl	80045c0 <HAL_GetTick>
 8004d44:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d46:	e01f      	b.n	8004d88 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8004d48:	f7ff fc3a 	bl	80045c0 <HAL_GetTick>
 8004d4c:	4602      	mov	r2, r0
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	1ad3      	subs	r3, r2, r3
 8004d52:	2b02      	cmp	r3, #2
 8004d54:	d918      	bls.n	8004d88 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	d011      	beq.n	8004d88 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d68:	f043 0210 	orr.w	r2, r3, #16
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d74:	f043 0201 	orr.w	r2, r3, #1
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8004d84:	2301      	movs	r3, #1
 8004d86:	e007      	b.n	8004d98 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d1d8      	bne.n	8004d48 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8004d96:	2300      	movs	r3, #0
}
 8004d98:	4618      	mov	r0, r3
 8004d9a:	3710      	adds	r7, #16
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	bd80      	pop	{r7, pc}
 8004da0:	20000084 	.word	0x20000084
 8004da4:	431bde83 	.word	0x431bde83

08004da8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b085      	sub	sp, #20
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	f003 0307 	and.w	r3, r3, #7
 8004db6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004db8:	4b0c      	ldr	r3, [pc, #48]	; (8004dec <__NVIC_SetPriorityGrouping+0x44>)
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004dc4:	4013      	ands	r3, r2
 8004dc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004dd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004dd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004dd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004dda:	4a04      	ldr	r2, [pc, #16]	; (8004dec <__NVIC_SetPriorityGrouping+0x44>)
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	60d3      	str	r3, [r2, #12]
}
 8004de0:	bf00      	nop
 8004de2:	3714      	adds	r7, #20
 8004de4:	46bd      	mov	sp, r7
 8004de6:	bc80      	pop	{r7}
 8004de8:	4770      	bx	lr
 8004dea:	bf00      	nop
 8004dec:	e000ed00 	.word	0xe000ed00

08004df0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004df0:	b480      	push	{r7}
 8004df2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004df4:	4b04      	ldr	r3, [pc, #16]	; (8004e08 <__NVIC_GetPriorityGrouping+0x18>)
 8004df6:	68db      	ldr	r3, [r3, #12]
 8004df8:	0a1b      	lsrs	r3, r3, #8
 8004dfa:	f003 0307 	and.w	r3, r3, #7
}
 8004dfe:	4618      	mov	r0, r3
 8004e00:	46bd      	mov	sp, r7
 8004e02:	bc80      	pop	{r7}
 8004e04:	4770      	bx	lr
 8004e06:	bf00      	nop
 8004e08:	e000ed00 	.word	0xe000ed00

08004e0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004e0c:	b480      	push	{r7}
 8004e0e:	b083      	sub	sp, #12
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	4603      	mov	r3, r0
 8004e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	db0b      	blt.n	8004e36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004e1e:	79fb      	ldrb	r3, [r7, #7]
 8004e20:	f003 021f 	and.w	r2, r3, #31
 8004e24:	4906      	ldr	r1, [pc, #24]	; (8004e40 <__NVIC_EnableIRQ+0x34>)
 8004e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e2a:	095b      	lsrs	r3, r3, #5
 8004e2c:	2001      	movs	r0, #1
 8004e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8004e32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004e36:	bf00      	nop
 8004e38:	370c      	adds	r7, #12
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	bc80      	pop	{r7}
 8004e3e:	4770      	bx	lr
 8004e40:	e000e100 	.word	0xe000e100

08004e44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004e44:	b480      	push	{r7}
 8004e46:	b083      	sub	sp, #12
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	4603      	mov	r3, r0
 8004e4c:	6039      	str	r1, [r7, #0]
 8004e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	db0a      	blt.n	8004e6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e58:	683b      	ldr	r3, [r7, #0]
 8004e5a:	b2da      	uxtb	r2, r3
 8004e5c:	490c      	ldr	r1, [pc, #48]	; (8004e90 <__NVIC_SetPriority+0x4c>)
 8004e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e62:	0112      	lsls	r2, r2, #4
 8004e64:	b2d2      	uxtb	r2, r2
 8004e66:	440b      	add	r3, r1
 8004e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004e6c:	e00a      	b.n	8004e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	b2da      	uxtb	r2, r3
 8004e72:	4908      	ldr	r1, [pc, #32]	; (8004e94 <__NVIC_SetPriority+0x50>)
 8004e74:	79fb      	ldrb	r3, [r7, #7]
 8004e76:	f003 030f 	and.w	r3, r3, #15
 8004e7a:	3b04      	subs	r3, #4
 8004e7c:	0112      	lsls	r2, r2, #4
 8004e7e:	b2d2      	uxtb	r2, r2
 8004e80:	440b      	add	r3, r1
 8004e82:	761a      	strb	r2, [r3, #24]
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	bc80      	pop	{r7}
 8004e8c:	4770      	bx	lr
 8004e8e:	bf00      	nop
 8004e90:	e000e100 	.word	0xe000e100
 8004e94:	e000ed00 	.word	0xe000ed00

08004e98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b089      	sub	sp, #36	; 0x24
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	60f8      	str	r0, [r7, #12]
 8004ea0:	60b9      	str	r1, [r7, #8]
 8004ea2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	f003 0307 	and.w	r3, r3, #7
 8004eaa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	f1c3 0307 	rsb	r3, r3, #7
 8004eb2:	2b04      	cmp	r3, #4
 8004eb4:	bf28      	it	cs
 8004eb6:	2304      	movcs	r3, #4
 8004eb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	3304      	adds	r3, #4
 8004ebe:	2b06      	cmp	r3, #6
 8004ec0:	d902      	bls.n	8004ec8 <NVIC_EncodePriority+0x30>
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	3b03      	subs	r3, #3
 8004ec6:	e000      	b.n	8004eca <NVIC_EncodePriority+0x32>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ecc:	f04f 32ff 	mov.w	r2, #4294967295
 8004ed0:	69bb      	ldr	r3, [r7, #24]
 8004ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed6:	43da      	mvns	r2, r3
 8004ed8:	68bb      	ldr	r3, [r7, #8]
 8004eda:	401a      	ands	r2, r3
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004ee0:	f04f 31ff 	mov.w	r1, #4294967295
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eea:	43d9      	mvns	r1, r3
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004ef0:	4313      	orrs	r3, r2
         );
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3724      	adds	r7, #36	; 0x24
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bc80      	pop	{r7}
 8004efa:	4770      	bx	lr

08004efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004efc:	b580      	push	{r7, lr}
 8004efe:	b082      	sub	sp, #8
 8004f00:	af00      	add	r7, sp, #0
 8004f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3b01      	subs	r3, #1
 8004f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004f0c:	d301      	bcc.n	8004f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e00f      	b.n	8004f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004f12:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <SysTick_Config+0x40>)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	3b01      	subs	r3, #1
 8004f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004f1a:	210f      	movs	r1, #15
 8004f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8004f20:	f7ff ff90 	bl	8004e44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004f24:	4b05      	ldr	r3, [pc, #20]	; (8004f3c <SysTick_Config+0x40>)
 8004f26:	2200      	movs	r2, #0
 8004f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004f2a:	4b04      	ldr	r3, [pc, #16]	; (8004f3c <SysTick_Config+0x40>)
 8004f2c:	2207      	movs	r2, #7
 8004f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004f30:	2300      	movs	r3, #0
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3708      	adds	r7, #8
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
 8004f3a:	bf00      	nop
 8004f3c:	e000e010 	.word	0xe000e010

08004f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b082      	sub	sp, #8
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004f48:	6878      	ldr	r0, [r7, #4]
 8004f4a:	f7ff ff2d 	bl	8004da8 <__NVIC_SetPriorityGrouping>
}
 8004f4e:	bf00      	nop
 8004f50:	3708      	adds	r7, #8
 8004f52:	46bd      	mov	sp, r7
 8004f54:	bd80      	pop	{r7, pc}

08004f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004f56:	b580      	push	{r7, lr}
 8004f58:	b086      	sub	sp, #24
 8004f5a:	af00      	add	r7, sp, #0
 8004f5c:	4603      	mov	r3, r0
 8004f5e:	60b9      	str	r1, [r7, #8]
 8004f60:	607a      	str	r2, [r7, #4]
 8004f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004f64:	2300      	movs	r3, #0
 8004f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004f68:	f7ff ff42 	bl	8004df0 <__NVIC_GetPriorityGrouping>
 8004f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004f6e:	687a      	ldr	r2, [r7, #4]
 8004f70:	68b9      	ldr	r1, [r7, #8]
 8004f72:	6978      	ldr	r0, [r7, #20]
 8004f74:	f7ff ff90 	bl	8004e98 <NVIC_EncodePriority>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004f7e:	4611      	mov	r1, r2
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7ff ff5f 	bl	8004e44 <__NVIC_SetPriority>
}
 8004f86:	bf00      	nop
 8004f88:	3718      	adds	r7, #24
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}

08004f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004f8e:	b580      	push	{r7, lr}
 8004f90:	b082      	sub	sp, #8
 8004f92:	af00      	add	r7, sp, #0
 8004f94:	4603      	mov	r3, r0
 8004f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004f9c:	4618      	mov	r0, r3
 8004f9e:	f7ff ff35 	bl	8004e0c <__NVIC_EnableIRQ>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}

08004faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004faa:	b580      	push	{r7, lr}
 8004fac:	b082      	sub	sp, #8
 8004fae:	af00      	add	r7, sp, #0
 8004fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004fb2:	6878      	ldr	r0, [r7, #4]
 8004fb4:	f7ff ffa2 	bl	8004efc <SysTick_Config>
 8004fb8:	4603      	mov	r3, r0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3708      	adds	r7, #8
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}
	...

08004fc4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b087      	sub	sp, #28
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8004fce:	2300      	movs	r3, #0
 8004fd0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8004fda:	e154      	b.n	8005286 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	681a      	ldr	r2, [r3, #0]
 8004fe0:	2101      	movs	r1, #1
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	4013      	ands	r3, r2
 8004fea:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	f000 8146 	beq.w	8005280 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 0303 	and.w	r3, r3, #3
 8004ffc:	2b01      	cmp	r3, #1
 8004ffe:	d005      	beq.n	800500c <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8005008:	2b02      	cmp	r3, #2
 800500a:	d130      	bne.n	800506e <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	005b      	lsls	r3, r3, #1
 8005016:	2203      	movs	r2, #3
 8005018:	fa02 f303 	lsl.w	r3, r2, r3
 800501c:	43db      	mvns	r3, r3
 800501e:	693a      	ldr	r2, [r7, #16]
 8005020:	4013      	ands	r3, r2
 8005022:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	68da      	ldr	r2, [r3, #12]
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	005b      	lsls	r3, r3, #1
 800502c:	fa02 f303 	lsl.w	r3, r2, r3
 8005030:	693a      	ldr	r2, [r7, #16]
 8005032:	4313      	orrs	r3, r2
 8005034:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	693a      	ldr	r2, [r7, #16]
 800503a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8005042:	2201      	movs	r2, #1
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	fa02 f303 	lsl.w	r3, r2, r3
 800504a:	43db      	mvns	r3, r3
 800504c:	693a      	ldr	r2, [r7, #16]
 800504e:	4013      	ands	r3, r2
 8005050:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005052:	683b      	ldr	r3, [r7, #0]
 8005054:	685b      	ldr	r3, [r3, #4]
 8005056:	091b      	lsrs	r3, r3, #4
 8005058:	f003 0201 	and.w	r2, r3, #1
 800505c:	697b      	ldr	r3, [r7, #20]
 800505e:	fa02 f303 	lsl.w	r3, r2, r3
 8005062:	693a      	ldr	r2, [r7, #16]
 8005064:	4313      	orrs	r3, r2
 8005066:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	693a      	ldr	r2, [r7, #16]
 800506c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800506e:	683b      	ldr	r3, [r7, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f003 0303 	and.w	r3, r3, #3
 8005076:	2b03      	cmp	r3, #3
 8005078:	d017      	beq.n	80050aa <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	68db      	ldr	r3, [r3, #12]
 800507e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8005080:	697b      	ldr	r3, [r7, #20]
 8005082:	005b      	lsls	r3, r3, #1
 8005084:	2203      	movs	r2, #3
 8005086:	fa02 f303 	lsl.w	r3, r2, r3
 800508a:	43db      	mvns	r3, r3
 800508c:	693a      	ldr	r2, [r7, #16]
 800508e:	4013      	ands	r3, r2
 8005090:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	689a      	ldr	r2, [r3, #8]
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	005b      	lsls	r3, r3, #1
 800509a:	fa02 f303 	lsl.w	r3, r2, r3
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	4313      	orrs	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	693a      	ldr	r2, [r7, #16]
 80050a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050aa:	683b      	ldr	r3, [r7, #0]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	f003 0303 	and.w	r3, r3, #3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d123      	bne.n	80050fe <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	08da      	lsrs	r2, r3, #3
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	3208      	adds	r2, #8
 80050be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	f003 0307 	and.w	r3, r3, #7
 80050ca:	009b      	lsls	r3, r3, #2
 80050cc:	220f      	movs	r2, #15
 80050ce:	fa02 f303 	lsl.w	r3, r2, r3
 80050d2:	43db      	mvns	r3, r3
 80050d4:	693a      	ldr	r2, [r7, #16]
 80050d6:	4013      	ands	r3, r2
 80050d8:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	691a      	ldr	r2, [r3, #16]
 80050de:	697b      	ldr	r3, [r7, #20]
 80050e0:	f003 0307 	and.w	r3, r3, #7
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	fa02 f303 	lsl.w	r3, r2, r3
 80050ea:	693a      	ldr	r2, [r7, #16]
 80050ec:	4313      	orrs	r3, r2
 80050ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	08da      	lsrs	r2, r3, #3
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	3208      	adds	r2, #8
 80050f8:	6939      	ldr	r1, [r7, #16]
 80050fa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8005104:	697b      	ldr	r3, [r7, #20]
 8005106:	005b      	lsls	r3, r3, #1
 8005108:	2203      	movs	r2, #3
 800510a:	fa02 f303 	lsl.w	r3, r2, r3
 800510e:	43db      	mvns	r3, r3
 8005110:	693a      	ldr	r2, [r7, #16]
 8005112:	4013      	ands	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8005116:	683b      	ldr	r3, [r7, #0]
 8005118:	685b      	ldr	r3, [r3, #4]
 800511a:	f003 0203 	and.w	r2, r3, #3
 800511e:	697b      	ldr	r3, [r7, #20]
 8005120:	005b      	lsls	r3, r3, #1
 8005122:	fa02 f303 	lsl.w	r3, r2, r3
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	4313      	orrs	r3, r2
 800512a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	693a      	ldr	r2, [r7, #16]
 8005130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	685b      	ldr	r3, [r3, #4]
 8005136:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800513a:	2b00      	cmp	r3, #0
 800513c:	f000 80a0 	beq.w	8005280 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005140:	4b58      	ldr	r3, [pc, #352]	; (80052a4 <HAL_GPIO_Init+0x2e0>)
 8005142:	6a1b      	ldr	r3, [r3, #32]
 8005144:	4a57      	ldr	r2, [pc, #348]	; (80052a4 <HAL_GPIO_Init+0x2e0>)
 8005146:	f043 0301 	orr.w	r3, r3, #1
 800514a:	6213      	str	r3, [r2, #32]
 800514c:	4b55      	ldr	r3, [pc, #340]	; (80052a4 <HAL_GPIO_Init+0x2e0>)
 800514e:	6a1b      	ldr	r3, [r3, #32]
 8005150:	f003 0301 	and.w	r3, r3, #1
 8005154:	60bb      	str	r3, [r7, #8]
 8005156:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8005158:	4a53      	ldr	r2, [pc, #332]	; (80052a8 <HAL_GPIO_Init+0x2e4>)
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	089b      	lsrs	r3, r3, #2
 800515e:	3302      	adds	r3, #2
 8005160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005164:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	f003 0303 	and.w	r3, r3, #3
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	220f      	movs	r2, #15
 8005170:	fa02 f303 	lsl.w	r3, r2, r3
 8005174:	43db      	mvns	r3, r3
 8005176:	693a      	ldr	r2, [r7, #16]
 8005178:	4013      	ands	r3, r2
 800517a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	4a4b      	ldr	r2, [pc, #300]	; (80052ac <HAL_GPIO_Init+0x2e8>)
 8005180:	4293      	cmp	r3, r2
 8005182:	d019      	beq.n	80051b8 <HAL_GPIO_Init+0x1f4>
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	4a4a      	ldr	r2, [pc, #296]	; (80052b0 <HAL_GPIO_Init+0x2ec>)
 8005188:	4293      	cmp	r3, r2
 800518a:	d013      	beq.n	80051b4 <HAL_GPIO_Init+0x1f0>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	4a49      	ldr	r2, [pc, #292]	; (80052b4 <HAL_GPIO_Init+0x2f0>)
 8005190:	4293      	cmp	r3, r2
 8005192:	d00d      	beq.n	80051b0 <HAL_GPIO_Init+0x1ec>
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	4a48      	ldr	r2, [pc, #288]	; (80052b8 <HAL_GPIO_Init+0x2f4>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d007      	beq.n	80051ac <HAL_GPIO_Init+0x1e8>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	4a47      	ldr	r2, [pc, #284]	; (80052bc <HAL_GPIO_Init+0x2f8>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d101      	bne.n	80051a8 <HAL_GPIO_Init+0x1e4>
 80051a4:	2304      	movs	r3, #4
 80051a6:	e008      	b.n	80051ba <HAL_GPIO_Init+0x1f6>
 80051a8:	2305      	movs	r3, #5
 80051aa:	e006      	b.n	80051ba <HAL_GPIO_Init+0x1f6>
 80051ac:	2303      	movs	r3, #3
 80051ae:	e004      	b.n	80051ba <HAL_GPIO_Init+0x1f6>
 80051b0:	2302      	movs	r3, #2
 80051b2:	e002      	b.n	80051ba <HAL_GPIO_Init+0x1f6>
 80051b4:	2301      	movs	r3, #1
 80051b6:	e000      	b.n	80051ba <HAL_GPIO_Init+0x1f6>
 80051b8:	2300      	movs	r3, #0
 80051ba:	697a      	ldr	r2, [r7, #20]
 80051bc:	f002 0203 	and.w	r2, r2, #3
 80051c0:	0092      	lsls	r2, r2, #2
 80051c2:	4093      	lsls	r3, r2
 80051c4:	693a      	ldr	r2, [r7, #16]
 80051c6:	4313      	orrs	r3, r2
 80051c8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80051ca:	4937      	ldr	r1, [pc, #220]	; (80052a8 <HAL_GPIO_Init+0x2e4>)
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	089b      	lsrs	r3, r3, #2
 80051d0:	3302      	adds	r3, #2
 80051d2:	693a      	ldr	r2, [r7, #16]
 80051d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80051d8:	4b39      	ldr	r3, [pc, #228]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	43db      	mvns	r3, r3
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	4013      	ands	r3, r2
 80051e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	685b      	ldr	r3, [r3, #4]
 80051ec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d003      	beq.n	80051fc <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 80051f4:	693a      	ldr	r2, [r7, #16]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	4313      	orrs	r3, r2
 80051fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80051fc:	4a30      	ldr	r2, [pc, #192]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8005202:	4b2f      	ldr	r3, [pc, #188]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	43db      	mvns	r3, r3
 800520c:	693a      	ldr	r2, [r7, #16]
 800520e:	4013      	ands	r3, r2
 8005210:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005212:	683b      	ldr	r3, [r7, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800521a:	2b00      	cmp	r3, #0
 800521c:	d003      	beq.n	8005226 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 800521e:	693a      	ldr	r2, [r7, #16]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8005226:	4a26      	ldr	r2, [pc, #152]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800522c:	4b24      	ldr	r3, [pc, #144]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 800522e:	689b      	ldr	r3, [r3, #8]
 8005230:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	43db      	mvns	r3, r3
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4013      	ands	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800523c:	683b      	ldr	r3, [r7, #0]
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005244:	2b00      	cmp	r3, #0
 8005246:	d003      	beq.n	8005250 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4313      	orrs	r3, r2
 800524e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8005250:	4a1b      	ldr	r2, [pc, #108]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 8005252:	693b      	ldr	r3, [r7, #16]
 8005254:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8005256:	4b1a      	ldr	r3, [pc, #104]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 8005258:	68db      	ldr	r3, [r3, #12]
 800525a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	43db      	mvns	r3, r3
 8005260:	693a      	ldr	r2, [r7, #16]
 8005262:	4013      	ands	r3, r2
 8005264:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	685b      	ldr	r3, [r3, #4]
 800526a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800526e:	2b00      	cmp	r3, #0
 8005270:	d003      	beq.n	800527a <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8005272:	693a      	ldr	r2, [r7, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4313      	orrs	r3, r2
 8005278:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800527a:	4a11      	ldr	r2, [pc, #68]	; (80052c0 <HAL_GPIO_Init+0x2fc>)
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	3301      	adds	r3, #1
 8005284:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	681a      	ldr	r2, [r3, #0]
 800528a:	697b      	ldr	r3, [r7, #20]
 800528c:	fa22 f303 	lsr.w	r3, r2, r3
 8005290:	2b00      	cmp	r3, #0
 8005292:	f47f aea3 	bne.w	8004fdc <HAL_GPIO_Init+0x18>
  }
}
 8005296:	bf00      	nop
 8005298:	bf00      	nop
 800529a:	371c      	adds	r7, #28
 800529c:	46bd      	mov	sp, r7
 800529e:	bc80      	pop	{r7}
 80052a0:	4770      	bx	lr
 80052a2:	bf00      	nop
 80052a4:	40023800 	.word	0x40023800
 80052a8:	40010000 	.word	0x40010000
 80052ac:	40020000 	.word	0x40020000
 80052b0:	40020400 	.word	0x40020400
 80052b4:	40020800 	.word	0x40020800
 80052b8:	40020c00 	.word	0x40020c00
 80052bc:	40021000 	.word	0x40021000
 80052c0:	40010400 	.word	0x40010400

080052c4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
 80052cc:	460b      	mov	r3, r1
 80052ce:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	887b      	ldrh	r3, [r7, #2]
 80052d6:	4013      	ands	r3, r2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d002      	beq.n	80052e2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052dc:	2301      	movs	r3, #1
 80052de:	73fb      	strb	r3, [r7, #15]
 80052e0:	e001      	b.n	80052e6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052e2:	2300      	movs	r3, #0
 80052e4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3714      	adds	r7, #20
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bc80      	pop	{r7}
 80052f0:	4770      	bx	lr

080052f2 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80052f2:	b480      	push	{r7}
 80052f4:	b083      	sub	sp, #12
 80052f6:	af00      	add	r7, sp, #0
 80052f8:	6078      	str	r0, [r7, #4]
 80052fa:	460b      	mov	r3, r1
 80052fc:	807b      	strh	r3, [r7, #2]
 80052fe:	4613      	mov	r3, r2
 8005300:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005302:	787b      	ldrb	r3, [r7, #1]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d003      	beq.n	8005310 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005308:	887a      	ldrh	r2, [r7, #2]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 800530e:	e003      	b.n	8005318 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8005310:	887b      	ldrh	r3, [r7, #2]
 8005312:	041a      	lsls	r2, r3, #16
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	619a      	str	r2, [r3, #24]
}
 8005318:	bf00      	nop
 800531a:	370c      	adds	r7, #12
 800531c:	46bd      	mov	sp, r7
 800531e:	bc80      	pop	{r7}
 8005320:	4770      	bx	lr

08005322 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..G depending on device used) to select the GPIO peripheral for STM32L1XX family devices
  * @param  GPIO_Pin specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005322:	b480      	push	{r7}
 8005324:	b085      	sub	sp, #20
 8005326:	af00      	add	r7, sp, #0
 8005328:	6078      	str	r0, [r7, #4]
 800532a:	460b      	mov	r3, r1
 800532c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	695b      	ldr	r3, [r3, #20]
 8005332:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005334:	887a      	ldrh	r2, [r7, #2]
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	4013      	ands	r3, r2
 800533a:	041a      	lsls	r2, r3, #16
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	43d9      	mvns	r1, r3
 8005340:	887b      	ldrh	r3, [r7, #2]
 8005342:	400b      	ands	r3, r1
 8005344:	431a      	orrs	r2, r3
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	619a      	str	r2, [r3, #24]
}
 800534a:	bf00      	nop
 800534c:	3714      	adds	r7, #20
 800534e:	46bd      	mov	sp, r7
 8005350:	bc80      	pop	{r7}
 8005352:	4770      	bx	lr

08005354 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b082      	sub	sp, #8
 8005358:	af00      	add	r7, sp, #0
 800535a:	4603      	mov	r3, r0
 800535c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800535e:	4b08      	ldr	r3, [pc, #32]	; (8005380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	88fb      	ldrh	r3, [r7, #6]
 8005364:	4013      	ands	r3, r2
 8005366:	2b00      	cmp	r3, #0
 8005368:	d006      	beq.n	8005378 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800536a:	4a05      	ldr	r2, [pc, #20]	; (8005380 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800536c:	88fb      	ldrh	r3, [r7, #6]
 800536e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005370:	88fb      	ldrh	r3, [r7, #6]
 8005372:	4618      	mov	r0, r3
 8005374:	f7fe fc82 	bl	8003c7c <HAL_GPIO_EXTI_Callback>
  }
}
 8005378:	bf00      	nop
 800537a:	3708      	adds	r7, #8
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}
 8005380:	40010400 	.word	0x40010400

08005384 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d101      	bne.n	8005396 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005392:	2301      	movs	r3, #1
 8005394:	e12b      	b.n	80055ee <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800539c:	b2db      	uxtb	r3, r3
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d106      	bne.n	80053b0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2200      	movs	r2, #0
 80053a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f7fe fd88 	bl	8003ec0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2224      	movs	r2, #36	; 0x24
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	681a      	ldr	r2, [r3, #0]
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f022 0201 	bic.w	r2, r2, #1
 80053c6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80053d6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80053e6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80053e8:	f002 fd6e 	bl	8007ec8 <HAL_RCC_GetPCLK1Freq>
 80053ec:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	685b      	ldr	r3, [r3, #4]
 80053f2:	4a81      	ldr	r2, [pc, #516]	; (80055f8 <HAL_I2C_Init+0x274>)
 80053f4:	4293      	cmp	r3, r2
 80053f6:	d807      	bhi.n	8005408 <HAL_I2C_Init+0x84>
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4a80      	ldr	r2, [pc, #512]	; (80055fc <HAL_I2C_Init+0x278>)
 80053fc:	4293      	cmp	r3, r2
 80053fe:	bf94      	ite	ls
 8005400:	2301      	movls	r3, #1
 8005402:	2300      	movhi	r3, #0
 8005404:	b2db      	uxtb	r3, r3
 8005406:	e006      	b.n	8005416 <HAL_I2C_Init+0x92>
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	4a7d      	ldr	r2, [pc, #500]	; (8005600 <HAL_I2C_Init+0x27c>)
 800540c:	4293      	cmp	r3, r2
 800540e:	bf94      	ite	ls
 8005410:	2301      	movls	r3, #1
 8005412:	2300      	movhi	r3, #0
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b00      	cmp	r3, #0
 8005418:	d001      	beq.n	800541e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800541a:	2301      	movs	r3, #1
 800541c:	e0e7      	b.n	80055ee <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	4a78      	ldr	r2, [pc, #480]	; (8005604 <HAL_I2C_Init+0x280>)
 8005422:	fba2 2303 	umull	r2, r3, r2, r3
 8005426:	0c9b      	lsrs	r3, r3, #18
 8005428:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	685b      	ldr	r3, [r3, #4]
 8005430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68ba      	ldr	r2, [r7, #8]
 800543a:	430a      	orrs	r2, r1
 800543c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	6a1b      	ldr	r3, [r3, #32]
 8005444:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	685b      	ldr	r3, [r3, #4]
 800544c:	4a6a      	ldr	r2, [pc, #424]	; (80055f8 <HAL_I2C_Init+0x274>)
 800544e:	4293      	cmp	r3, r2
 8005450:	d802      	bhi.n	8005458 <HAL_I2C_Init+0xd4>
 8005452:	68bb      	ldr	r3, [r7, #8]
 8005454:	3301      	adds	r3, #1
 8005456:	e009      	b.n	800546c <HAL_I2C_Init+0xe8>
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800545e:	fb02 f303 	mul.w	r3, r2, r3
 8005462:	4a69      	ldr	r2, [pc, #420]	; (8005608 <HAL_I2C_Init+0x284>)
 8005464:	fba2 2303 	umull	r2, r3, r2, r3
 8005468:	099b      	lsrs	r3, r3, #6
 800546a:	3301      	adds	r3, #1
 800546c:	687a      	ldr	r2, [r7, #4]
 800546e:	6812      	ldr	r2, [r2, #0]
 8005470:	430b      	orrs	r3, r1
 8005472:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	69db      	ldr	r3, [r3, #28]
 800547a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800547e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	495c      	ldr	r1, [pc, #368]	; (80055f8 <HAL_I2C_Init+0x274>)
 8005488:	428b      	cmp	r3, r1
 800548a:	d819      	bhi.n	80054c0 <HAL_I2C_Init+0x13c>
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	1e59      	subs	r1, r3, #1
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	005b      	lsls	r3, r3, #1
 8005496:	fbb1 f3f3 	udiv	r3, r1, r3
 800549a:	1c59      	adds	r1, r3, #1
 800549c:	f640 73fc 	movw	r3, #4092	; 0xffc
 80054a0:	400b      	ands	r3, r1
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d00a      	beq.n	80054bc <HAL_I2C_Init+0x138>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	1e59      	subs	r1, r3, #1
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	005b      	lsls	r3, r3, #1
 80054b0:	fbb1 f3f3 	udiv	r3, r1, r3
 80054b4:	3301      	adds	r3, #1
 80054b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054ba:	e051      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 80054bc:	2304      	movs	r3, #4
 80054be:	e04f      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	689b      	ldr	r3, [r3, #8]
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d111      	bne.n	80054ec <HAL_I2C_Init+0x168>
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	1e58      	subs	r0, r3, #1
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	6859      	ldr	r1, [r3, #4]
 80054d0:	460b      	mov	r3, r1
 80054d2:	005b      	lsls	r3, r3, #1
 80054d4:	440b      	add	r3, r1
 80054d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80054da:	3301      	adds	r3, #1
 80054dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	bf0c      	ite	eq
 80054e4:	2301      	moveq	r3, #1
 80054e6:	2300      	movne	r3, #0
 80054e8:	b2db      	uxtb	r3, r3
 80054ea:	e012      	b.n	8005512 <HAL_I2C_Init+0x18e>
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	1e58      	subs	r0, r3, #1
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6859      	ldr	r1, [r3, #4]
 80054f4:	460b      	mov	r3, r1
 80054f6:	009b      	lsls	r3, r3, #2
 80054f8:	440b      	add	r3, r1
 80054fa:	0099      	lsls	r1, r3, #2
 80054fc:	440b      	add	r3, r1
 80054fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8005502:	3301      	adds	r3, #1
 8005504:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005508:	2b00      	cmp	r3, #0
 800550a:	bf0c      	ite	eq
 800550c:	2301      	moveq	r3, #1
 800550e:	2300      	movne	r3, #0
 8005510:	b2db      	uxtb	r3, r3
 8005512:	2b00      	cmp	r3, #0
 8005514:	d001      	beq.n	800551a <HAL_I2C_Init+0x196>
 8005516:	2301      	movs	r3, #1
 8005518:	e022      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	689b      	ldr	r3, [r3, #8]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d10e      	bne.n	8005540 <HAL_I2C_Init+0x1bc>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	1e58      	subs	r0, r3, #1
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6859      	ldr	r1, [r3, #4]
 800552a:	460b      	mov	r3, r1
 800552c:	005b      	lsls	r3, r3, #1
 800552e:	440b      	add	r3, r1
 8005530:	fbb0 f3f3 	udiv	r3, r0, r3
 8005534:	3301      	adds	r3, #1
 8005536:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800553a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800553e:	e00f      	b.n	8005560 <HAL_I2C_Init+0x1dc>
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	1e58      	subs	r0, r3, #1
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6859      	ldr	r1, [r3, #4]
 8005548:	460b      	mov	r3, r1
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	440b      	add	r3, r1
 800554e:	0099      	lsls	r1, r3, #2
 8005550:	440b      	add	r3, r1
 8005552:	fbb0 f3f3 	udiv	r3, r0, r3
 8005556:	3301      	adds	r3, #1
 8005558:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800555c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	6809      	ldr	r1, [r1, #0]
 8005564:	4313      	orrs	r3, r2
 8005566:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	69da      	ldr	r2, [r3, #28]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6a1b      	ldr	r3, [r3, #32]
 800557a:	431a      	orrs	r2, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	430a      	orrs	r2, r1
 8005582:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800558e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	6911      	ldr	r1, [r2, #16]
 8005596:	687a      	ldr	r2, [r7, #4]
 8005598:	68d2      	ldr	r2, [r2, #12]
 800559a:	4311      	orrs	r1, r2
 800559c:	687a      	ldr	r2, [r7, #4]
 800559e:	6812      	ldr	r2, [r2, #0]
 80055a0:	430b      	orrs	r3, r1
 80055a2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	695a      	ldr	r2, [r3, #20]
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	431a      	orrs	r2, r3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	430a      	orrs	r2, r1
 80055be:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	681a      	ldr	r2, [r3, #0]
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	f042 0201 	orr.w	r2, r2, #1
 80055ce:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	2200      	movs	r2, #0
 80055d4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2220      	movs	r2, #32
 80055da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	2200      	movs	r2, #0
 80055e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80055ec:	2300      	movs	r3, #0
}
 80055ee:	4618      	mov	r0, r3
 80055f0:	3710      	adds	r7, #16
 80055f2:	46bd      	mov	sp, r7
 80055f4:	bd80      	pop	{r7, pc}
 80055f6:	bf00      	nop
 80055f8:	000186a0 	.word	0x000186a0
 80055fc:	001e847f 	.word	0x001e847f
 8005600:	003d08ff 	.word	0x003d08ff
 8005604:	431bde83 	.word	0x431bde83
 8005608:	10624dd3 	.word	0x10624dd3

0800560c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b088      	sub	sp, #32
 8005610:	af02      	add	r7, sp, #8
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	607a      	str	r2, [r7, #4]
 8005616:	461a      	mov	r2, r3
 8005618:	460b      	mov	r3, r1
 800561a:	817b      	strh	r3, [r7, #10]
 800561c:	4613      	mov	r3, r2
 800561e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005620:	f7fe ffce 	bl	80045c0 <HAL_GetTick>
 8005624:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800562c:	b2db      	uxtb	r3, r3
 800562e:	2b20      	cmp	r3, #32
 8005630:	f040 80e0 	bne.w	80057f4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005634:	697b      	ldr	r3, [r7, #20]
 8005636:	9300      	str	r3, [sp, #0]
 8005638:	2319      	movs	r3, #25
 800563a:	2201      	movs	r2, #1
 800563c:	4970      	ldr	r1, [pc, #448]	; (8005800 <HAL_I2C_Master_Transmit+0x1f4>)
 800563e:	68f8      	ldr	r0, [r7, #12]
 8005640:	f000 f964 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800564a:	2302      	movs	r3, #2
 800564c:	e0d3      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005654:	2b01      	cmp	r3, #1
 8005656:	d101      	bne.n	800565c <HAL_I2C_Master_Transmit+0x50>
 8005658:	2302      	movs	r3, #2
 800565a:	e0cc      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2201      	movs	r2, #1
 8005660:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f003 0301 	and.w	r3, r3, #1
 800566e:	2b01      	cmp	r3, #1
 8005670:	d007      	beq.n	8005682 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	681a      	ldr	r2, [r3, #0]
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f042 0201 	orr.w	r2, r2, #1
 8005680:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005690:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	2221      	movs	r2, #33	; 0x21
 8005696:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2210      	movs	r2, #16
 800569e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	2200      	movs	r2, #0
 80056a6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	893a      	ldrh	r2, [r7, #8]
 80056b2:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056b8:	b29a      	uxth	r2, r3
 80056ba:	68fb      	ldr	r3, [r7, #12]
 80056bc:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	4a50      	ldr	r2, [pc, #320]	; (8005804 <HAL_I2C_Master_Transmit+0x1f8>)
 80056c2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80056c4:	8979      	ldrh	r1, [r7, #10]
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	6a3a      	ldr	r2, [r7, #32]
 80056ca:	68f8      	ldr	r0, [r7, #12]
 80056cc:	f000 f89c 	bl	8005808 <I2C_MasterRequestWrite>
 80056d0:	4603      	mov	r3, r0
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d001      	beq.n	80056da <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80056d6:	2301      	movs	r3, #1
 80056d8:	e08d      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80056da:	2300      	movs	r3, #0
 80056dc:	613b      	str	r3, [r7, #16]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	695b      	ldr	r3, [r3, #20]
 80056e4:	613b      	str	r3, [r7, #16]
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	699b      	ldr	r3, [r3, #24]
 80056ec:	613b      	str	r3, [r7, #16]
 80056ee:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80056f0:	e066      	b.n	80057c0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	6a39      	ldr	r1, [r7, #32]
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	f000 f9de 	bl	8005ab8 <I2C_WaitOnTXEFlagUntilTimeout>
 80056fc:	4603      	mov	r3, r0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d00d      	beq.n	800571e <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005706:	2b04      	cmp	r3, #4
 8005708:	d107      	bne.n	800571a <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	681a      	ldr	r2, [r3, #0]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005718:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800571a:	2301      	movs	r3, #1
 800571c:	e06b      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005722:	781a      	ldrb	r2, [r3, #0]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800572e:	1c5a      	adds	r2, r3, #1
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005738:	b29b      	uxth	r3, r3
 800573a:	3b01      	subs	r3, #1
 800573c:	b29a      	uxth	r2, r3
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005746:	3b01      	subs	r3, #1
 8005748:	b29a      	uxth	r2, r3
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	695b      	ldr	r3, [r3, #20]
 8005754:	f003 0304 	and.w	r3, r3, #4
 8005758:	2b04      	cmp	r3, #4
 800575a:	d11b      	bne.n	8005794 <HAL_I2C_Master_Transmit+0x188>
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005760:	2b00      	cmp	r3, #0
 8005762:	d017      	beq.n	8005794 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	781a      	ldrb	r2, [r3, #0]
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005774:	1c5a      	adds	r2, r3, #1
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800577e:	b29b      	uxth	r3, r3
 8005780:	3b01      	subs	r3, #1
 8005782:	b29a      	uxth	r2, r3
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800578c:	3b01      	subs	r3, #1
 800578e:	b29a      	uxth	r2, r3
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005794:	697a      	ldr	r2, [r7, #20]
 8005796:	6a39      	ldr	r1, [r7, #32]
 8005798:	68f8      	ldr	r0, [r7, #12]
 800579a:	f000 f9ce 	bl	8005b3a <I2C_WaitOnBTFFlagUntilTimeout>
 800579e:	4603      	mov	r3, r0
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d00d      	beq.n	80057c0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d107      	bne.n	80057bc <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	681a      	ldr	r2, [r3, #0]
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057ba:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057bc:	2301      	movs	r3, #1
 80057be:	e01a      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d194      	bne.n	80056f2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2220      	movs	r2, #32
 80057dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2200      	movs	r2, #0
 80057e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80057f0:	2300      	movs	r3, #0
 80057f2:	e000      	b.n	80057f6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80057f4:	2302      	movs	r3, #2
  }
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	3718      	adds	r7, #24
 80057fa:	46bd      	mov	sp, r7
 80057fc:	bd80      	pop	{r7, pc}
 80057fe:	bf00      	nop
 8005800:	00100002 	.word	0x00100002
 8005804:	ffff0000 	.word	0xffff0000

08005808 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005808:	b580      	push	{r7, lr}
 800580a:	b088      	sub	sp, #32
 800580c:	af02      	add	r7, sp, #8
 800580e:	60f8      	str	r0, [r7, #12]
 8005810:	607a      	str	r2, [r7, #4]
 8005812:	603b      	str	r3, [r7, #0]
 8005814:	460b      	mov	r3, r1
 8005816:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800581c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	2b08      	cmp	r3, #8
 8005822:	d006      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b01      	cmp	r3, #1
 8005828:	d003      	beq.n	8005832 <I2C_MasterRequestWrite+0x2a>
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005830:	d108      	bne.n	8005844 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005840:	601a      	str	r2, [r3, #0]
 8005842:	e00b      	b.n	800585c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005848:	2b12      	cmp	r3, #18
 800584a:	d107      	bne.n	800585c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	681a      	ldr	r2, [r3, #0]
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800585a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	9300      	str	r3, [sp, #0]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005868:	68f8      	ldr	r0, [r7, #12]
 800586a:	f000 f84f 	bl	800590c <I2C_WaitOnFlagUntilTimeout>
 800586e:	4603      	mov	r3, r0
 8005870:	2b00      	cmp	r3, #0
 8005872:	d00d      	beq.n	8005890 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800587e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005882:	d103      	bne.n	800588c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f44f 7200 	mov.w	r2, #512	; 0x200
 800588a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	e035      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	691b      	ldr	r3, [r3, #16]
 8005894:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005898:	d108      	bne.n	80058ac <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800589a:	897b      	ldrh	r3, [r7, #10]
 800589c:	b2db      	uxtb	r3, r3
 800589e:	461a      	mov	r2, r3
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058a8:	611a      	str	r2, [r3, #16]
 80058aa:	e01b      	b.n	80058e4 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80058ac:	897b      	ldrh	r3, [r7, #10]
 80058ae:	11db      	asrs	r3, r3, #7
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	f003 0306 	and.w	r3, r3, #6
 80058b6:	b2db      	uxtb	r3, r3
 80058b8:	f063 030f 	orn	r3, r3, #15
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	687a      	ldr	r2, [r7, #4]
 80058c8:	490e      	ldr	r1, [pc, #56]	; (8005904 <I2C_MasterRequestWrite+0xfc>)
 80058ca:	68f8      	ldr	r0, [r7, #12]
 80058cc:	f000 f875 	bl	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058d0:	4603      	mov	r3, r0
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d001      	beq.n	80058da <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80058d6:	2301      	movs	r3, #1
 80058d8:	e010      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80058da:	897b      	ldrh	r3, [r7, #10]
 80058dc:	b2da      	uxtb	r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e4:	683b      	ldr	r3, [r7, #0]
 80058e6:	687a      	ldr	r2, [r7, #4]
 80058e8:	4907      	ldr	r1, [pc, #28]	; (8005908 <I2C_MasterRequestWrite+0x100>)
 80058ea:	68f8      	ldr	r0, [r7, #12]
 80058ec:	f000 f865 	bl	80059ba <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80058f0:	4603      	mov	r3, r0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d001      	beq.n	80058fa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80058f6:	2301      	movs	r3, #1
 80058f8:	e000      	b.n	80058fc <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80058fa:	2300      	movs	r3, #0
}
 80058fc:	4618      	mov	r0, r3
 80058fe:	3718      	adds	r7, #24
 8005900:	46bd      	mov	sp, r7
 8005902:	bd80      	pop	{r7, pc}
 8005904:	00010008 	.word	0x00010008
 8005908:	00010002 	.word	0x00010002

0800590c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b084      	sub	sp, #16
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	603b      	str	r3, [r7, #0]
 8005918:	4613      	mov	r3, r2
 800591a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800591c:	e025      	b.n	800596a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005924:	d021      	beq.n	800596a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005926:	f7fe fe4b 	bl	80045c0 <HAL_GetTick>
 800592a:	4602      	mov	r2, r0
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	1ad3      	subs	r3, r2, r3
 8005930:	683a      	ldr	r2, [r7, #0]
 8005932:	429a      	cmp	r2, r3
 8005934:	d302      	bcc.n	800593c <I2C_WaitOnFlagUntilTimeout+0x30>
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d116      	bne.n	800596a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2220      	movs	r2, #32
 8005946:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	2200      	movs	r2, #0
 800594e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005956:	f043 0220 	orr.w	r2, r3, #32
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005966:	2301      	movs	r3, #1
 8005968:	e023      	b.n	80059b2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	0c1b      	lsrs	r3, r3, #16
 800596e:	b2db      	uxtb	r3, r3
 8005970:	2b01      	cmp	r3, #1
 8005972:	d10d      	bne.n	8005990 <I2C_WaitOnFlagUntilTimeout+0x84>
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	43da      	mvns	r2, r3
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	4013      	ands	r3, r2
 8005980:	b29b      	uxth	r3, r3
 8005982:	2b00      	cmp	r3, #0
 8005984:	bf0c      	ite	eq
 8005986:	2301      	moveq	r3, #1
 8005988:	2300      	movne	r3, #0
 800598a:	b2db      	uxtb	r3, r3
 800598c:	461a      	mov	r2, r3
 800598e:	e00c      	b.n	80059aa <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	699b      	ldr	r3, [r3, #24]
 8005996:	43da      	mvns	r2, r3
 8005998:	68bb      	ldr	r3, [r7, #8]
 800599a:	4013      	ands	r3, r2
 800599c:	b29b      	uxth	r3, r3
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bf0c      	ite	eq
 80059a2:	2301      	moveq	r3, #1
 80059a4:	2300      	movne	r3, #0
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	461a      	mov	r2, r3
 80059aa:	79fb      	ldrb	r3, [r7, #7]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d0b6      	beq.n	800591e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80059b0:	2300      	movs	r3, #0
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3710      	adds	r7, #16
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}

080059ba <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80059ba:	b580      	push	{r7, lr}
 80059bc:	b084      	sub	sp, #16
 80059be:	af00      	add	r7, sp, #0
 80059c0:	60f8      	str	r0, [r7, #12]
 80059c2:	60b9      	str	r1, [r7, #8]
 80059c4:	607a      	str	r2, [r7, #4]
 80059c6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80059c8:	e051      	b.n	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	695b      	ldr	r3, [r3, #20]
 80059d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059d8:	d123      	bne.n	8005a22 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059e8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059f2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	2200      	movs	r2, #0
 80059f8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	2220      	movs	r2, #32
 80059fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	2200      	movs	r2, #0
 8005a06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	f043 0204 	orr.w	r2, r3, #4
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	2200      	movs	r2, #0
 8005a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	e046      	b.n	8005ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a28:	d021      	beq.n	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a2a:	f7fe fdc9 	bl	80045c0 <HAL_GetTick>
 8005a2e:	4602      	mov	r2, r0
 8005a30:	683b      	ldr	r3, [r7, #0]
 8005a32:	1ad3      	subs	r3, r2, r3
 8005a34:	687a      	ldr	r2, [r7, #4]
 8005a36:	429a      	cmp	r2, r3
 8005a38:	d302      	bcc.n	8005a40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d116      	bne.n	8005a6e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2220      	movs	r2, #32
 8005a4a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5a:	f043 0220 	orr.w	r2, r3, #32
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005a6a:	2301      	movs	r3, #1
 8005a6c:	e020      	b.n	8005ab0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	0c1b      	lsrs	r3, r3, #16
 8005a72:	b2db      	uxtb	r3, r3
 8005a74:	2b01      	cmp	r3, #1
 8005a76:	d10c      	bne.n	8005a92 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	695b      	ldr	r3, [r3, #20]
 8005a7e:	43da      	mvns	r2, r3
 8005a80:	68bb      	ldr	r3, [r7, #8]
 8005a82:	4013      	ands	r3, r2
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	bf14      	ite	ne
 8005a8a:	2301      	movne	r3, #1
 8005a8c:	2300      	moveq	r3, #0
 8005a8e:	b2db      	uxtb	r3, r3
 8005a90:	e00b      	b.n	8005aaa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8005a92:	68fb      	ldr	r3, [r7, #12]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	43da      	mvns	r2, r3
 8005a9a:	68bb      	ldr	r3, [r7, #8]
 8005a9c:	4013      	ands	r3, r2
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bf14      	ite	ne
 8005aa4:	2301      	movne	r3, #1
 8005aa6:	2300      	moveq	r3, #0
 8005aa8:	b2db      	uxtb	r3, r3
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d18d      	bne.n	80059ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005aae:	2300      	movs	r3, #0
}
 8005ab0:	4618      	mov	r0, r3
 8005ab2:	3710      	adds	r7, #16
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	bd80      	pop	{r7, pc}

08005ab8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005ab8:	b580      	push	{r7, lr}
 8005aba:	b084      	sub	sp, #16
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	60f8      	str	r0, [r7, #12]
 8005ac0:	60b9      	str	r1, [r7, #8]
 8005ac2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005ac4:	e02d      	b.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005ac6:	68f8      	ldr	r0, [r7, #12]
 8005ac8:	f000 f878 	bl	8005bbc <I2C_IsAcknowledgeFailed>
 8005acc:	4603      	mov	r3, r0
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d001      	beq.n	8005ad6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	e02d      	b.n	8005b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ad6:	68bb      	ldr	r3, [r7, #8]
 8005ad8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005adc:	d021      	beq.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ade:	f7fe fd6f 	bl	80045c0 <HAL_GetTick>
 8005ae2:	4602      	mov	r2, r0
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	1ad3      	subs	r3, r2, r3
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d302      	bcc.n	8005af4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005aee:	68bb      	ldr	r3, [r7, #8]
 8005af0:	2b00      	cmp	r3, #0
 8005af2:	d116      	bne.n	8005b22 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	2200      	movs	r2, #0
 8005af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2220      	movs	r2, #32
 8005afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	2200      	movs	r2, #0
 8005b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b0e:	f043 0220 	orr.w	r2, r3, #32
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	2200      	movs	r2, #0
 8005b1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e007      	b.n	8005b32 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	695b      	ldr	r3, [r3, #20]
 8005b28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b2c:	2b80      	cmp	r3, #128	; 0x80
 8005b2e:	d1ca      	bne.n	8005ac6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005b30:	2300      	movs	r3, #0
}
 8005b32:	4618      	mov	r0, r3
 8005b34:	3710      	adds	r7, #16
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}

08005b3a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005b3a:	b580      	push	{r7, lr}
 8005b3c:	b084      	sub	sp, #16
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	60f8      	str	r0, [r7, #12]
 8005b42:	60b9      	str	r1, [r7, #8]
 8005b44:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005b46:	e02d      	b.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f000 f837 	bl	8005bbc <I2C_IsAcknowledgeFailed>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d001      	beq.n	8005b58 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8005b54:	2301      	movs	r3, #1
 8005b56:	e02d      	b.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b5e:	d021      	beq.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005b60:	f7fe fd2e 	bl	80045c0 <HAL_GetTick>
 8005b64:	4602      	mov	r2, r0
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	1ad3      	subs	r3, r2, r3
 8005b6a:	68ba      	ldr	r2, [r7, #8]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d302      	bcc.n	8005b76 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005b70:	68bb      	ldr	r3, [r7, #8]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d116      	bne.n	8005ba4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2200      	movs	r2, #0
 8005b7a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2220      	movs	r2, #32
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2200      	movs	r2, #0
 8005b88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b90:	f043 0220 	orr.w	r2, r3, #32
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e007      	b.n	8005bb4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	695b      	ldr	r3, [r3, #20]
 8005baa:	f003 0304 	and.w	r3, r3, #4
 8005bae:	2b04      	cmp	r3, #4
 8005bb0:	d1ca      	bne.n	8005b48 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005bb2:	2300      	movs	r3, #0
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b083      	sub	sp, #12
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005bd2:	d11b      	bne.n	8005c0c <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005bdc:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	2220      	movs	r2, #32
 8005be8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2200      	movs	r2, #0
 8005bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bf8:	f043 0204 	orr.w	r2, r3, #4
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e000      	b.n	8005c0e <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005c0c:	2300      	movs	r3, #0
}
 8005c0e:	4618      	mov	r0, r3
 8005c10:	370c      	adds	r7, #12
 8005c12:	46bd      	mov	sp, r7
 8005c14:	bc80      	pop	{r7}
 8005c16:	4770      	bx	lr

08005c18 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8005c18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c1a:	b08b      	sub	sp, #44	; 0x2c
 8005c1c:	af06      	add	r7, sp, #24
 8005c1e:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d101      	bne.n	8005c2a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8005c26:	2301      	movs	r3, #1
 8005c28:	e0d0      	b.n	8005dcc <HAL_PCD_Init+0x1b4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f893 32a9 	ldrb.w	r3, [r3, #681]	; 0x2a9
 8005c30:	b2db      	uxtb	r3, r3
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d106      	bne.n	8005c44 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8005c3e:	6878      	ldr	r0, [r7, #4]
 8005c40:	f00b fc62 	bl	8011508 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2203      	movs	r2, #3
 8005c48:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	4618      	mov	r0, r3
 8005c52:	f003 fba5 	bl	80093a0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
 8005c5a:	e04c      	b.n	8005cf6 <HAL_PCD_Init+0xde>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8005c5c:	7bfb      	ldrb	r3, [r7, #15]
 8005c5e:	6879      	ldr	r1, [r7, #4]
 8005c60:	1c5a      	adds	r2, r3, #1
 8005c62:	4613      	mov	r3, r2
 8005c64:	009b      	lsls	r3, r3, #2
 8005c66:	4413      	add	r3, r2
 8005c68:	00db      	lsls	r3, r3, #3
 8005c6a:	440b      	add	r3, r1
 8005c6c:	3301      	adds	r3, #1
 8005c6e:	2201      	movs	r2, #1
 8005c70:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8005c72:	7bfb      	ldrb	r3, [r7, #15]
 8005c74:	6879      	ldr	r1, [r7, #4]
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	4613      	mov	r3, r2
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	00db      	lsls	r3, r3, #3
 8005c80:	440b      	add	r3, r1
 8005c82:	7bfa      	ldrb	r2, [r7, #15]
 8005c84:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8005c86:	7bfa      	ldrb	r2, [r7, #15]
 8005c88:	7bfb      	ldrb	r3, [r7, #15]
 8005c8a:	b298      	uxth	r0, r3
 8005c8c:	6879      	ldr	r1, [r7, #4]
 8005c8e:	4613      	mov	r3, r2
 8005c90:	009b      	lsls	r3, r3, #2
 8005c92:	4413      	add	r3, r2
 8005c94:	00db      	lsls	r3, r3, #3
 8005c96:	440b      	add	r3, r1
 8005c98:	3336      	adds	r3, #54	; 0x36
 8005c9a:	4602      	mov	r2, r0
 8005c9c:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8005c9e:	7bfb      	ldrb	r3, [r7, #15]
 8005ca0:	6879      	ldr	r1, [r7, #4]
 8005ca2:	1c5a      	adds	r2, r3, #1
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	00db      	lsls	r3, r3, #3
 8005cac:	440b      	add	r3, r1
 8005cae:	3303      	adds	r3, #3
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8005cb4:	7bfa      	ldrb	r2, [r7, #15]
 8005cb6:	6879      	ldr	r1, [r7, #4]
 8005cb8:	4613      	mov	r3, r2
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	00db      	lsls	r3, r3, #3
 8005cc0:	440b      	add	r3, r1
 8005cc2:	3338      	adds	r3, #56	; 0x38
 8005cc4:	2200      	movs	r2, #0
 8005cc6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8005cc8:	7bfa      	ldrb	r2, [r7, #15]
 8005cca:	6879      	ldr	r1, [r7, #4]
 8005ccc:	4613      	mov	r3, r2
 8005cce:	009b      	lsls	r3, r3, #2
 8005cd0:	4413      	add	r3, r2
 8005cd2:	00db      	lsls	r3, r3, #3
 8005cd4:	440b      	add	r3, r1
 8005cd6:	333c      	adds	r3, #60	; 0x3c
 8005cd8:	2200      	movs	r2, #0
 8005cda:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8005cdc:	7bfa      	ldrb	r2, [r7, #15]
 8005cde:	6879      	ldr	r1, [r7, #4]
 8005ce0:	4613      	mov	r3, r2
 8005ce2:	009b      	lsls	r3, r3, #2
 8005ce4:	4413      	add	r3, r2
 8005ce6:	00db      	lsls	r3, r3, #3
 8005ce8:	440b      	add	r3, r1
 8005cea:	3340      	adds	r3, #64	; 0x40
 8005cec:	2200      	movs	r2, #0
 8005cee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005cf0:	7bfb      	ldrb	r3, [r7, #15]
 8005cf2:	3301      	adds	r3, #1
 8005cf4:	73fb      	strb	r3, [r7, #15]
 8005cf6:	7bfa      	ldrb	r2, [r7, #15]
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d3ad      	bcc.n	8005c5c <HAL_PCD_Init+0x44>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d00:	2300      	movs	r3, #0
 8005d02:	73fb      	strb	r3, [r7, #15]
 8005d04:	e044      	b.n	8005d90 <HAL_PCD_Init+0x178>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8005d06:	7bfa      	ldrb	r2, [r7, #15]
 8005d08:	6879      	ldr	r1, [r7, #4]
 8005d0a:	4613      	mov	r3, r2
 8005d0c:	009b      	lsls	r3, r3, #2
 8005d0e:	4413      	add	r3, r2
 8005d10:	00db      	lsls	r3, r3, #3
 8005d12:	440b      	add	r3, r1
 8005d14:	f203 1369 	addw	r3, r3, #361	; 0x169
 8005d18:	2200      	movs	r2, #0
 8005d1a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8005d1c:	7bfa      	ldrb	r2, [r7, #15]
 8005d1e:	6879      	ldr	r1, [r7, #4]
 8005d20:	4613      	mov	r3, r2
 8005d22:	009b      	lsls	r3, r3, #2
 8005d24:	4413      	add	r3, r2
 8005d26:	00db      	lsls	r3, r3, #3
 8005d28:	440b      	add	r3, r1
 8005d2a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8005d2e:	7bfa      	ldrb	r2, [r7, #15]
 8005d30:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8005d32:	7bfa      	ldrb	r2, [r7, #15]
 8005d34:	6879      	ldr	r1, [r7, #4]
 8005d36:	4613      	mov	r3, r2
 8005d38:	009b      	lsls	r3, r3, #2
 8005d3a:	4413      	add	r3, r2
 8005d3c:	00db      	lsls	r3, r3, #3
 8005d3e:	440b      	add	r3, r1
 8005d40:	f203 136b 	addw	r3, r3, #363	; 0x16b
 8005d44:	2200      	movs	r2, #0
 8005d46:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8005d48:	7bfa      	ldrb	r2, [r7, #15]
 8005d4a:	6879      	ldr	r1, [r7, #4]
 8005d4c:	4613      	mov	r3, r2
 8005d4e:	009b      	lsls	r3, r3, #2
 8005d50:	4413      	add	r3, r2
 8005d52:	00db      	lsls	r3, r3, #3
 8005d54:	440b      	add	r3, r1
 8005d56:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8005d5e:	7bfa      	ldrb	r2, [r7, #15]
 8005d60:	6879      	ldr	r1, [r7, #4]
 8005d62:	4613      	mov	r3, r2
 8005d64:	009b      	lsls	r3, r3, #2
 8005d66:	4413      	add	r3, r2
 8005d68:	00db      	lsls	r3, r3, #3
 8005d6a:	440b      	add	r3, r1
 8005d6c:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 8005d70:	2200      	movs	r2, #0
 8005d72:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8005d74:	7bfa      	ldrb	r2, [r7, #15]
 8005d76:	6879      	ldr	r1, [r7, #4]
 8005d78:	4613      	mov	r3, r2
 8005d7a:	009b      	lsls	r3, r3, #2
 8005d7c:	4413      	add	r3, r2
 8005d7e:	00db      	lsls	r3, r3, #3
 8005d80:	440b      	add	r3, r1
 8005d82:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8005d86:	2200      	movs	r2, #0
 8005d88:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8005d8a:	7bfb      	ldrb	r3, [r7, #15]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	73fb      	strb	r3, [r7, #15]
 8005d90:	7bfa      	ldrb	r2, [r7, #15]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d3b5      	bcc.n	8005d06 <HAL_PCD_Init+0xee>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	603b      	str	r3, [r7, #0]
 8005da0:	687e      	ldr	r6, [r7, #4]
 8005da2:	466d      	mov	r5, sp
 8005da4:	f106 0410 	add.w	r4, r6, #16
 8005da8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8005daa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8005dac:	6823      	ldr	r3, [r4, #0]
 8005dae:	602b      	str	r3, [r5, #0]
 8005db0:	1d33      	adds	r3, r6, #4
 8005db2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8005db4:	6838      	ldr	r0, [r7, #0]
 8005db6:	f003 fb0d 	bl	80093d4 <USB_DevInit>

  hpcd->USB_Address = 0U;
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	2200      	movs	r2, #0
 8005dbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hpcd->State = HAL_PCD_STATE_READY;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	f883 22a9 	strb.w	r2, [r3, #681]	; 0x2a9
  return HAL_OK;
 8005dca:	2300      	movs	r3, #0
}
 8005dcc:	4618      	mov	r0, r3
 8005dce:	3714      	adds	r7, #20
 8005dd0:	46bd      	mov	sp, r7
 8005dd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005dd4 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b082      	sub	sp, #8
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8005de2:	2b01      	cmp	r3, #1
 8005de4:	d101      	bne.n	8005dea <HAL_PCD_Start+0x16>
 8005de6:	2302      	movs	r3, #2
 8005de8:	e016      	b.n	8005e18 <HAL_PCD_Start+0x44>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2201      	movs	r2, #1
 8005dee:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  __HAL_PCD_ENABLE(hpcd);
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4618      	mov	r0, r3
 8005df8:	f003 fabc 	bl	8009374 <USB_EnableGlobalInt>

  HAL_PCDEx_SetConnectionState(hpcd, 1U);
 8005dfc:	2101      	movs	r1, #1
 8005dfe:	6878      	ldr	r0, [r7, #4]
 8005e00:	f00b fb64 	bl	80114cc <HAL_PCDEx_SetConnectionState>

  (void)USB_DevConnect(hpcd->Instance);
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	4618      	mov	r0, r3
 8005e0a:	f005 ffa1 	bl	800bd50 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2200      	movs	r2, #0
 8005e12:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8005e16:	2300      	movs	r3, #0
}
 8005e18:	4618      	mov	r0, r3
 8005e1a:	3708      	adds	r7, #8
 8005e1c:	46bd      	mov	sp, r7
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8005e20:	b580      	push	{r7, lr}
 8005e22:	b082      	sub	sp, #8
 8005e24:	af00      	add	r7, sp, #0
 8005e26:	6078      	str	r0, [r7, #4]
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	4618      	mov	r0, r3
 8005e2e:	f005 ff99 	bl	800bd64 <USB_ReadInterrupts>
 8005e32:	4603      	mov	r3, r0
 8005e34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e38:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e3c:	d102      	bne.n	8005e44 <HAL_PCD_IRQHandler+0x24>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 8005e3e:	6878      	ldr	r0, [r7, #4]
 8005e40:	f000 faf5 	bl	800642e <PCD_EP_ISR_Handler>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f005 ff8b 	bl	800bd64 <USB_ReadInterrupts>
 8005e4e:	4603      	mov	r3, r0
 8005e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005e54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e58:	d112      	bne.n	8005e80 <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e62:	b29a      	uxth	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	681b      	ldr	r3, [r3, #0]
 8005e68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e6c:	b292      	uxth	r2, r2
 8005e6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 8005e72:	6878      	ldr	r0, [r7, #4]
 8005e74:	f00b fbc3 	bl	80115fe <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8005e78:	2100      	movs	r1, #0
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f000 f8c7 	bl	800600e <HAL_PCD_SetAddress>
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	4618      	mov	r0, r3
 8005e86:	f005 ff6d 	bl	800bd64 <USB_ReadInterrupts>
 8005e8a:	4603      	mov	r3, r0
 8005e8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005e90:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005e94:	d10b      	bne.n	8005eae <HAL_PCD_IRQHandler+0x8e>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005e9e:	b29a      	uxth	r2, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ea8:	b292      	uxth	r2, r2
 8005eaa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f005 ff56 	bl	800bd64 <USB_ReadInterrupts>
 8005eb8:	4603      	mov	r3, r0
 8005eba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ebe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ec2:	d10b      	bne.n	8005edc <HAL_PCD_IRQHandler+0xbc>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ecc:	b29a      	uxth	r2, r3
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005ed6:	b292      	uxth	r2, r2
 8005ed8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4618      	mov	r0, r3
 8005ee2:	f005 ff3f 	bl	800bd64 <USB_ReadInterrupts>
 8005ee6:	4603      	mov	r3, r0
 8005ee8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005eec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005ef0:	d126      	bne.n	8005f40 <HAL_PCD_IRQHandler+0x120>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005efa:	b29a      	uxth	r2, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f022 0204 	bic.w	r2, r2, #4
 8005f04:	b292      	uxth	r2, r2
 8005f06:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f12:	b29a      	uxth	r2, r3
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0208 	bic.w	r2, r2, #8
 8005f1c:	b292      	uxth	r2, r2
 8005f1e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f00b fba4 	bl	8011670 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f30:	b29a      	uxth	r2, r3
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005f3a:	b292      	uxth	r2, r2
 8005f3c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	4618      	mov	r0, r3
 8005f46:	f005 ff0d 	bl	800bd64 <USB_ReadInterrupts>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f54:	d126      	bne.n	8005fa4 <HAL_PCD_IRQHandler+0x184>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f042 0208 	orr.w	r2, r2, #8
 8005f68:	b292      	uxth	r2, r2
 8005f6a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005f76:	b29a      	uxth	r2, r3
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005f80:	b292      	uxth	r2, r2
 8005f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8005f8e:	b29a      	uxth	r2, r3
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f042 0204 	orr.w	r2, r2, #4
 8005f98:	b292      	uxth	r2, r2
 8005f9a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 8005f9e:	6878      	ldr	r0, [r7, #4]
 8005fa0:	f00b fb4c 	bl	801163c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4618      	mov	r0, r3
 8005faa:	f005 fedb 	bl	800bd64 <USB_ReadInterrupts>
 8005fae:	4603      	mov	r3, r0
 8005fb0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005fb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005fb8:	d10e      	bne.n	8005fd8 <HAL_PCD_IRQHandler+0x1b8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005fc2:	b29a      	uxth	r2, r3
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005fcc:	b292      	uxth	r2, r2
 8005fce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f00b fb05 	bl	80115e2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  }

  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	4618      	mov	r0, r3
 8005fde:	f005 fec1 	bl	800bd64 <USB_ReadInterrupts>
 8005fe2:	4603      	mov	r3, r0
 8005fe4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fec:	d10b      	bne.n	8006006 <HAL_PCD_IRQHandler+0x1e6>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8005ff6:	b29a      	uxth	r2, r3
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006000:	b292      	uxth	r2, r2
 8006002:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  }
}
 8006006:	bf00      	nop
 8006008:	3708      	adds	r7, #8
 800600a:	46bd      	mov	sp, r7
 800600c:	bd80      	pop	{r7, pc}

0800600e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800600e:	b580      	push	{r7, lr}
 8006010:	b082      	sub	sp, #8
 8006012:	af00      	add	r7, sp, #0
 8006014:	6078      	str	r0, [r7, #4]
 8006016:	460b      	mov	r3, r1
 8006018:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006020:	2b01      	cmp	r3, #1
 8006022:	d101      	bne.n	8006028 <HAL_PCD_SetAddress+0x1a>
 8006024:	2302      	movs	r3, #2
 8006026:	e013      	b.n	8006050 <HAL_PCD_SetAddress+0x42>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  hpcd->USB_Address = address;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	78fa      	ldrb	r2, [r7, #3]
 8006034:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	78fa      	ldrb	r2, [r7, #3]
 800603e:	4611      	mov	r1, r2
 8006040:	4618      	mov	r0, r3
 8006042:	f005 fe72 	bl	800bd2a <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800604e:	2300      	movs	r3, #0
}
 8006050:	4618      	mov	r0, r3
 8006052:	3708      	adds	r7, #8
 8006054:	46bd      	mov	sp, r7
 8006056:	bd80      	pop	{r7, pc}

08006058 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	4608      	mov	r0, r1
 8006062:	4611      	mov	r1, r2
 8006064:	461a      	mov	r2, r3
 8006066:	4603      	mov	r3, r0
 8006068:	70fb      	strb	r3, [r7, #3]
 800606a:	460b      	mov	r3, r1
 800606c:	803b      	strh	r3, [r7, #0]
 800606e:	4613      	mov	r3, r2
 8006070:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8006072:	2300      	movs	r3, #0
 8006074:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006076:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800607a:	2b00      	cmp	r3, #0
 800607c:	da0e      	bge.n	800609c <HAL_PCD_EP_Open+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800607e:	78fb      	ldrb	r3, [r7, #3]
 8006080:	f003 0307 	and.w	r3, r3, #7
 8006084:	1c5a      	adds	r2, r3, #1
 8006086:	4613      	mov	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4413      	add	r3, r2
 800608c:	00db      	lsls	r3, r3, #3
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	4413      	add	r3, r2
 8006092:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	2201      	movs	r2, #1
 8006098:	705a      	strb	r2, [r3, #1]
 800609a:	e00e      	b.n	80060ba <HAL_PCD_EP_Open+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800609c:	78fb      	ldrb	r3, [r7, #3]
 800609e:	f003 0207 	and.w	r2, r3, #7
 80060a2:	4613      	mov	r3, r2
 80060a4:	009b      	lsls	r3, r3, #2
 80060a6:	4413      	add	r3, r2
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80060ae:	687a      	ldr	r2, [r7, #4]
 80060b0:	4413      	add	r3, r2
 80060b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	2200      	movs	r2, #0
 80060b8:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80060ba:	78fb      	ldrb	r3, [r7, #3]
 80060bc:	f003 0307 	and.w	r3, r3, #7
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80060c6:	883a      	ldrh	r2, [r7, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 80060cc:	68fb      	ldr	r3, [r7, #12]
 80060ce:	78ba      	ldrb	r2, [r7, #2]
 80060d0:	70da      	strb	r2, [r3, #3]

  if (ep->is_in != 0U)
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	785b      	ldrb	r3, [r3, #1]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d004      	beq.n	80060e4 <HAL_PCD_EP_Open+0x8c>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	781b      	ldrb	r3, [r3, #0]
 80060de:	b29a      	uxth	r2, r3
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	81da      	strh	r2, [r3, #14]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80060e4:	78bb      	ldrb	r3, [r7, #2]
 80060e6:	2b02      	cmp	r3, #2
 80060e8:	d102      	bne.n	80060f0 <HAL_PCD_EP_Open+0x98>
  {
    ep->data_pid_start = 0U;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	2200      	movs	r2, #0
 80060ee:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 80060f6:	2b01      	cmp	r3, #1
 80060f8:	d101      	bne.n	80060fe <HAL_PCD_EP_Open+0xa6>
 80060fa:	2302      	movs	r3, #2
 80060fc:	e00e      	b.n	800611c <HAL_PCD_EP_Open+0xc4>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2201      	movs	r2, #1
 8006102:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68f9      	ldr	r1, [r7, #12]
 800610c:	4618      	mov	r0, r3
 800610e:	f003 f981 	bl	8009414 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2200      	movs	r2, #0
 8006116:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return ret;
 800611a:	7afb      	ldrb	r3, [r7, #11]
}
 800611c:	4618      	mov	r0, r3
 800611e:	3710      	adds	r7, #16
 8006120:	46bd      	mov	sp, r7
 8006122:	bd80      	pop	{r7, pc}

08006124 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006124:	b580      	push	{r7, lr}
 8006126:	b084      	sub	sp, #16
 8006128:	af00      	add	r7, sp, #0
 800612a:	6078      	str	r0, [r7, #4]
 800612c:	460b      	mov	r3, r1
 800612e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8006130:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006134:	2b00      	cmp	r3, #0
 8006136:	da0e      	bge.n	8006156 <HAL_PCD_EP_Close+0x32>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006138:	78fb      	ldrb	r3, [r7, #3]
 800613a:	f003 0307 	and.w	r3, r3, #7
 800613e:	1c5a      	adds	r2, r3, #1
 8006140:	4613      	mov	r3, r2
 8006142:	009b      	lsls	r3, r3, #2
 8006144:	4413      	add	r3, r2
 8006146:	00db      	lsls	r3, r3, #3
 8006148:	687a      	ldr	r2, [r7, #4]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	2201      	movs	r2, #1
 8006152:	705a      	strb	r2, [r3, #1]
 8006154:	e00e      	b.n	8006174 <HAL_PCD_EP_Close+0x50>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8006156:	78fb      	ldrb	r3, [r7, #3]
 8006158:	f003 0207 	and.w	r2, r3, #7
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	00db      	lsls	r3, r3, #3
 8006164:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4413      	add	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	2200      	movs	r2, #0
 8006172:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8006174:	78fb      	ldrb	r3, [r7, #3]
 8006176:	f003 0307 	and.w	r3, r3, #7
 800617a:	b2da      	uxtb	r2, r3
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006186:	2b01      	cmp	r3, #1
 8006188:	d101      	bne.n	800618e <HAL_PCD_EP_Close+0x6a>
 800618a:	2302      	movs	r3, #2
 800618c:	e00e      	b.n	80061ac <HAL_PCD_EP_Close+0x88>
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2201      	movs	r2, #1
 8006192:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	68f9      	ldr	r1, [r7, #12]
 800619c:	4618      	mov	r0, r3
 800619e:	f003 fca3 	bl	8009ae8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	2200      	movs	r2, #0
 80061a6:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  return HAL_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80061b4:	b580      	push	{r7, lr}
 80061b6:	b086      	sub	sp, #24
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	60f8      	str	r0, [r7, #12]
 80061bc:	607a      	str	r2, [r7, #4]
 80061be:	603b      	str	r3, [r7, #0]
 80061c0:	460b      	mov	r3, r1
 80061c2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80061c4:	7afb      	ldrb	r3, [r7, #11]
 80061c6:	f003 0207 	and.w	r2, r3, #7
 80061ca:	4613      	mov	r3, r2
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	4413      	add	r3, r2
 80061d0:	00db      	lsls	r3, r3, #3
 80061d2:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80061d6:	68fa      	ldr	r2, [r7, #12]
 80061d8:	4413      	add	r3, r2
 80061da:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80061dc:	697b      	ldr	r3, [r7, #20]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 80061e2:	697b      	ldr	r3, [r7, #20]
 80061e4:	683a      	ldr	r2, [r7, #0]
 80061e6:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	2200      	movs	r2, #0
 80061ec:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 80061ee:	697b      	ldr	r3, [r7, #20]
 80061f0:	2200      	movs	r2, #0
 80061f2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80061f4:	7afb      	ldrb	r3, [r7, #11]
 80061f6:	f003 0307 	and.w	r3, r3, #7
 80061fa:	b2da      	uxtb	r2, r3
 80061fc:	697b      	ldr	r3, [r7, #20]
 80061fe:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8006200:	7afb      	ldrb	r3, [r7, #11]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b00      	cmp	r3, #0
 8006208:	d106      	bne.n	8006218 <HAL_PCD_EP_Receive+0x64>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	6979      	ldr	r1, [r7, #20]
 8006210:	4618      	mov	r0, r3
 8006212:	f003 fe55 	bl	8009ec0 <USB_EPStartXfer>
 8006216:	e005      	b.n	8006224 <HAL_PCD_EP_Receive+0x70>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	6979      	ldr	r1, [r7, #20]
 800621e:	4618      	mov	r0, r3
 8006220:	f003 fe4e 	bl	8009ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 8006224:	2300      	movs	r3, #0
}
 8006226:	4618      	mov	r0, r3
 8006228:	3718      	adds	r7, #24
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}

0800622e <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800622e:	b480      	push	{r7}
 8006230:	b083      	sub	sp, #12
 8006232:	af00      	add	r7, sp, #0
 8006234:	6078      	str	r0, [r7, #4]
 8006236:	460b      	mov	r3, r1
 8006238:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800623a:	78fb      	ldrb	r3, [r7, #3]
 800623c:	f003 0207 	and.w	r2, r3, #7
 8006240:	6879      	ldr	r1, [r7, #4]
 8006242:	4613      	mov	r3, r2
 8006244:	009b      	lsls	r3, r3, #2
 8006246:	4413      	add	r3, r2
 8006248:	00db      	lsls	r3, r3, #3
 800624a:	440b      	add	r3, r1
 800624c:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 8006250:	681b      	ldr	r3, [r3, #0]
}
 8006252:	4618      	mov	r0, r3
 8006254:	370c      	adds	r7, #12
 8006256:	46bd      	mov	sp, r7
 8006258:	bc80      	pop	{r7}
 800625a:	4770      	bx	lr

0800625c <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b086      	sub	sp, #24
 8006260:	af00      	add	r7, sp, #0
 8006262:	60f8      	str	r0, [r7, #12]
 8006264:	607a      	str	r2, [r7, #4]
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	460b      	mov	r3, r1
 800626a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800626c:	7afb      	ldrb	r3, [r7, #11]
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	1c5a      	adds	r2, r3, #1
 8006274:	4613      	mov	r3, r2
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4413      	add	r3, r2
 800627a:	00db      	lsls	r3, r3, #3
 800627c:	68fa      	ldr	r2, [r7, #12]
 800627e:	4413      	add	r3, r2
 8006280:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8006282:	697b      	ldr	r3, [r7, #20]
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8006288:	697b      	ldr	r3, [r7, #20]
 800628a:	683a      	ldr	r2, [r7, #0]
 800628c:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 800628e:	697b      	ldr	r3, [r7, #20]
 8006290:	2201      	movs	r2, #1
 8006292:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  ep->xfer_len_db = len;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	683a      	ldr	r2, [r7, #0]
 800629a:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 800629c:	697b      	ldr	r3, [r7, #20]
 800629e:	2200      	movs	r2, #0
 80062a0:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2201      	movs	r2, #1
 80062a6:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	f003 0307 	and.w	r3, r3, #7
 80062ae:	b2da      	uxtb	r2, r3
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	701a      	strb	r2, [r3, #0]

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	f003 0307 	and.w	r3, r3, #7
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d106      	bne.n	80062cc <HAL_PCD_EP_Transmit+0x70>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep);
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	6979      	ldr	r1, [r7, #20]
 80062c4:	4618      	mov	r0, r3
 80062c6:	f003 fdfb 	bl	8009ec0 <USB_EPStartXfer>
 80062ca:	e005      	b.n	80062d8 <HAL_PCD_EP_Transmit+0x7c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80062cc:	68fb      	ldr	r3, [r7, #12]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	6979      	ldr	r1, [r7, #20]
 80062d2:	4618      	mov	r0, r3
 80062d4:	f003 fdf4 	bl	8009ec0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80062d8:	2300      	movs	r3, #0
}
 80062da:	4618      	mov	r0, r3
 80062dc:	3718      	adds	r7, #24
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}

080062e2 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b084      	sub	sp, #16
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80062ee:	78fb      	ldrb	r3, [r7, #3]
 80062f0:	f003 0207 	and.w	r2, r3, #7
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	685b      	ldr	r3, [r3, #4]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d901      	bls.n	8006300 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80062fc:	2301      	movs	r3, #1
 80062fe:	e03e      	b.n	800637e <HAL_PCD_EP_SetStall+0x9c>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8006300:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006304:	2b00      	cmp	r3, #0
 8006306:	da0e      	bge.n	8006326 <HAL_PCD_EP_SetStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8006308:	78fb      	ldrb	r3, [r7, #3]
 800630a:	f003 0307 	and.w	r3, r3, #7
 800630e:	1c5a      	adds	r2, r3, #1
 8006310:	4613      	mov	r3, r2
 8006312:	009b      	lsls	r3, r3, #2
 8006314:	4413      	add	r3, r2
 8006316:	00db      	lsls	r3, r3, #3
 8006318:	687a      	ldr	r2, [r7, #4]
 800631a:	4413      	add	r3, r2
 800631c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	2201      	movs	r2, #1
 8006322:	705a      	strb	r2, [r3, #1]
 8006324:	e00c      	b.n	8006340 <HAL_PCD_EP_SetStall+0x5e>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8006326:	78fa      	ldrb	r2, [r7, #3]
 8006328:	4613      	mov	r3, r2
 800632a:	009b      	lsls	r3, r3, #2
 800632c:	4413      	add	r3, r2
 800632e:	00db      	lsls	r3, r3, #3
 8006330:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006334:	687a      	ldr	r2, [r7, #4]
 8006336:	4413      	add	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	2200      	movs	r2, #0
 800633e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	2201      	movs	r2, #1
 8006344:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8006346:	78fb      	ldrb	r3, [r7, #3]
 8006348:	f003 0307 	and.w	r3, r3, #7
 800634c:	b2da      	uxtb	r2, r3
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006358:	2b01      	cmp	r3, #1
 800635a:	d101      	bne.n	8006360 <HAL_PCD_EP_SetStall+0x7e>
 800635c:	2302      	movs	r3, #2
 800635e:	e00e      	b.n	800637e <HAL_PCD_EP_SetStall+0x9c>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2201      	movs	r2, #1
 8006364:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68f9      	ldr	r1, [r7, #12]
 800636e:	4618      	mov	r0, r3
 8006370:	f005 fbde 	bl	800bb30 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3710      	adds	r7, #16
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b084      	sub	sp, #16
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	460b      	mov	r3, r1
 8006390:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8006392:	78fb      	ldrb	r3, [r7, #3]
 8006394:	f003 020f 	and.w	r2, r3, #15
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	685b      	ldr	r3, [r3, #4]
 800639c:	429a      	cmp	r2, r3
 800639e:	d901      	bls.n	80063a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80063a0:	2301      	movs	r3, #1
 80063a2:	e040      	b.n	8006426 <HAL_PCD_EP_ClrStall+0xa0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80063a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	da0e      	bge.n	80063ca <HAL_PCD_EP_ClrStall+0x44>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80063ac:	78fb      	ldrb	r3, [r7, #3]
 80063ae:	f003 0307 	and.w	r3, r3, #7
 80063b2:	1c5a      	adds	r2, r3, #1
 80063b4:	4613      	mov	r3, r2
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	4413      	add	r3, r2
 80063ba:	00db      	lsls	r3, r3, #3
 80063bc:	687a      	ldr	r2, [r7, #4]
 80063be:	4413      	add	r3, r2
 80063c0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	2201      	movs	r2, #1
 80063c6:	705a      	strb	r2, [r3, #1]
 80063c8:	e00e      	b.n	80063e8 <HAL_PCD_EP_ClrStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80063ca:	78fb      	ldrb	r3, [r7, #3]
 80063cc:	f003 0207 	and.w	r2, r3, #7
 80063d0:	4613      	mov	r3, r2
 80063d2:	009b      	lsls	r3, r3, #2
 80063d4:	4413      	add	r3, r2
 80063d6:	00db      	lsls	r3, r3, #3
 80063d8:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 80063dc:	687a      	ldr	r2, [r7, #4]
 80063de:	4413      	add	r3, r2
 80063e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2200      	movs	r2, #0
 80063ec:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80063ee:	78fb      	ldrb	r3, [r7, #3]
 80063f0:	f003 0307 	and.w	r3, r3, #7
 80063f4:	b2da      	uxtb	r2, r3
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 32a8 	ldrb.w	r3, [r3, #680]	; 0x2a8
 8006400:	2b01      	cmp	r3, #1
 8006402:	d101      	bne.n	8006408 <HAL_PCD_EP_ClrStall+0x82>
 8006404:	2302      	movs	r3, #2
 8006406:	e00e      	b.n	8006426 <HAL_PCD_EP_ClrStall+0xa0>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2201      	movs	r2, #1
 800640c:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	68f9      	ldr	r1, [r7, #12]
 8006416:	4618      	mov	r0, r3
 8006418:	f005 fbda 	bl	800bbd0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	f883 22a8 	strb.w	r2, [r3, #680]	; 0x2a8

  return HAL_OK;
 8006424:	2300      	movs	r3, #0
}
 8006426:	4618      	mov	r0, r3
 8006428:	3710      	adds	r7, #16
 800642a:	46bd      	mov	sp, r7
 800642c:	bd80      	pop	{r7, pc}

0800642e <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 800642e:	b580      	push	{r7, lr}
 8006430:	b08e      	sub	sp, #56	; 0x38
 8006432:	af00      	add	r7, sp, #0
 8006434:	6078      	str	r0, [r7, #4]
  PCD_EPTypeDef *ep;
  uint16_t count, wIstr, wEPVal, TxByteNbre;
  uint8_t epindex;

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006436:	e2ec      	b.n	8006a12 <PCD_EP_ISR_Handler+0x5e4>
  {
    wIstr = hpcd->Instance->ISTR;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006440:	85fb      	strh	r3, [r7, #46]	; 0x2e

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8006442:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8006444:	b2db      	uxtb	r3, r3
 8006446:	f003 030f 	and.w	r3, r3, #15
 800644a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d

    if (epindex == 0U)
 800644e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006452:	2b00      	cmp	r3, #0
 8006454:	f040 8161 	bne.w	800671a <PCD_EP_ISR_Handler+0x2ec>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8006458:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800645a:	f003 0310 	and.w	r3, r3, #16
 800645e:	2b00      	cmp	r3, #0
 8006460:	d152      	bne.n	8006508 <PCD_EP_ISR_Handler+0xda>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	881b      	ldrh	r3, [r3, #0]
 8006468:	b29b      	uxth	r3, r3
 800646a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800646e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006472:	81fb      	strh	r3, [r7, #14]
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681a      	ldr	r2, [r3, #0]
 8006478:	89fb      	ldrh	r3, [r7, #14]
 800647a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800647e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006482:	b29b      	uxth	r3, r3
 8006484:	8013      	strh	r3, [r2, #0]
        ep = &hpcd->IN_ep[0];
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	3328      	adds	r3, #40	; 0x28
 800648a:	627b      	str	r3, [r7, #36]	; 0x24

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006494:	b29b      	uxth	r3, r3
 8006496:	461a      	mov	r2, r3
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	781b      	ldrb	r3, [r3, #0]
 800649c:	00db      	lsls	r3, r3, #3
 800649e:	4413      	add	r3, r2
 80064a0:	3302      	adds	r3, #2
 80064a2:	005b      	lsls	r3, r3, #1
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	6812      	ldr	r2, [r2, #0]
 80064a8:	4413      	add	r3, r2
 80064aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80064ae:	881b      	ldrh	r3, [r3, #0]
 80064b0:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80064b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064b6:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	695a      	ldr	r2, [r3, #20]
 80064bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064be:	69db      	ldr	r3, [r3, #28]
 80064c0:	441a      	add	r2, r3
 80064c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064c4:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 80064c6:	2100      	movs	r1, #0
 80064c8:	6878      	ldr	r0, [r7, #4]
 80064ca:	f00b f870 	bl	80115ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064d4:	b2db      	uxtb	r3, r3
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	f000 829b 	beq.w	8006a12 <PCD_EP_ISR_Handler+0x5e4>
 80064dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064de:	699b      	ldr	r3, [r3, #24]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	f040 8296 	bne.w	8006a12 <PCD_EP_ISR_Handler+0x5e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80064ec:	b2db      	uxtb	r3, r3
 80064ee:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80064f2:	b2da      	uxtb	r2, r3
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	b292      	uxth	r2, r2
 80064fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
          hpcd->USB_Address = 0U;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	2200      	movs	r2, #0
 8006502:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006506:	e284      	b.n	8006a12 <PCD_EP_ISR_Handler+0x5e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 800650e:	627b      	str	r3, [r7, #36]	; 0x24
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	881b      	ldrh	r3, [r3, #0]
 8006516:	857b      	strh	r3, [r7, #42]	; 0x2a

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8006518:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800651a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800651e:	2b00      	cmp	r3, #0
 8006520:	d034      	beq.n	800658c <PCD_EP_ISR_Handler+0x15e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800652a:	b29b      	uxth	r3, r3
 800652c:	461a      	mov	r2, r3
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	781b      	ldrb	r3, [r3, #0]
 8006532:	00db      	lsls	r3, r3, #3
 8006534:	4413      	add	r3, r2
 8006536:	3306      	adds	r3, #6
 8006538:	005b      	lsls	r3, r3, #1
 800653a:	687a      	ldr	r2, [r7, #4]
 800653c:	6812      	ldr	r2, [r2, #0]
 800653e:	4413      	add	r3, r2
 8006540:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006544:	881b      	ldrh	r3, [r3, #0]
 8006546:	f3c3 0209 	ubfx	r2, r3, #0, #10
 800654a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800654c:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6818      	ldr	r0, [r3, #0]
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	f503 712c 	add.w	r1, r3, #688	; 0x2b0
 8006558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 800655c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800655e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8006560:	b29b      	uxth	r3, r3
 8006562:	f005 fc53 	bl	800be0c <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	881b      	ldrh	r3, [r3, #0]
 800656c:	b29a      	uxth	r2, r3
 800656e:	f640 738f 	movw	r3, #3983	; 0xf8f
 8006572:	4013      	ands	r3, r2
 8006574:	823b      	strh	r3, [r7, #16]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	8a3a      	ldrh	r2, [r7, #16]
 800657c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006580:	b292      	uxth	r2, r2
 8006582:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8006584:	6878      	ldr	r0, [r7, #4]
 8006586:	f00a ffe5 	bl	8011554 <HAL_PCD_SetupStageCallback>
 800658a:	e242      	b.n	8006a12 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800658c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006590:	2b00      	cmp	r3, #0
 8006592:	f280 823e 	bge.w	8006a12 <PCD_EP_ISR_Handler+0x5e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	881b      	ldrh	r3, [r3, #0]
 800659c:	b29a      	uxth	r2, r3
 800659e:	f640 738f 	movw	r3, #3983	; 0xf8f
 80065a2:	4013      	ands	r3, r2
 80065a4:	83bb      	strh	r3, [r7, #28]
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	8bba      	ldrh	r2, [r7, #28]
 80065ac:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80065b0:	b292      	uxth	r2, r2
 80065b2:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80065bc:	b29b      	uxth	r3, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	00db      	lsls	r3, r3, #3
 80065c6:	4413      	add	r3, r2
 80065c8:	3306      	adds	r3, #6
 80065ca:	005b      	lsls	r3, r3, #1
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	6812      	ldr	r2, [r2, #0]
 80065d0:	4413      	add	r3, r2
 80065d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80065d6:	881b      	ldrh	r3, [r3, #0]
 80065d8:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80065dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065de:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80065e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065e2:	69db      	ldr	r3, [r3, #28]
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d019      	beq.n	800661c <PCD_EP_ISR_Handler+0x1ee>
 80065e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065ea:	695b      	ldr	r3, [r3, #20]
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d015      	beq.n	800661c <PCD_EP_ISR_Handler+0x1ee>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6818      	ldr	r0, [r3, #0]
 80065f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065f6:	6959      	ldr	r1, [r3, #20]
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80065fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fe:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8006600:	b29b      	uxth	r3, r3
 8006602:	f005 fc03 	bl	800be0c <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 8006606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006608:	695a      	ldr	r2, [r3, #20]
 800660a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800660c:	69db      	ldr	r3, [r3, #28]
 800660e:	441a      	add	r2, r3
 8006610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006612:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8006614:	2100      	movs	r1, #0
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f00a ffae 	bl	8011578 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	881b      	ldrh	r3, [r3, #0]
 8006622:	b29b      	uxth	r3, r3
 8006624:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006628:	2b00      	cmp	r3, #0
 800662a:	f040 81f2 	bne.w	8006a12 <PCD_EP_ISR_Handler+0x5e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	61bb      	str	r3, [r7, #24]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800663c:	b29b      	uxth	r3, r3
 800663e:	461a      	mov	r2, r3
 8006640:	69bb      	ldr	r3, [r7, #24]
 8006642:	4413      	add	r3, r2
 8006644:	61bb      	str	r3, [r7, #24]
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800664c:	617b      	str	r3, [r7, #20]
 800664e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d112      	bne.n	800667c <PCD_EP_ISR_Handler+0x24e>
 8006656:	697b      	ldr	r3, [r7, #20]
 8006658:	881b      	ldrh	r3, [r3, #0]
 800665a:	b29b      	uxth	r3, r3
 800665c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006660:	b29a      	uxth	r2, r3
 8006662:	697b      	ldr	r3, [r7, #20]
 8006664:	801a      	strh	r2, [r3, #0]
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	881b      	ldrh	r3, [r3, #0]
 800666a:	b29b      	uxth	r3, r3
 800666c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006670:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006674:	b29a      	uxth	r2, r3
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	801a      	strh	r2, [r3, #0]
 800667a:	e02f      	b.n	80066dc <PCD_EP_ISR_Handler+0x2ae>
 800667c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800667e:	691b      	ldr	r3, [r3, #16]
 8006680:	2b3e      	cmp	r3, #62	; 0x3e
 8006682:	d813      	bhi.n	80066ac <PCD_EP_ISR_Handler+0x27e>
 8006684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	085b      	lsrs	r3, r3, #1
 800668a:	633b      	str	r3, [r7, #48]	; 0x30
 800668c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800668e:	691b      	ldr	r3, [r3, #16]
 8006690:	f003 0301 	and.w	r3, r3, #1
 8006694:	2b00      	cmp	r3, #0
 8006696:	d002      	beq.n	800669e <PCD_EP_ISR_Handler+0x270>
 8006698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669a:	3301      	adds	r3, #1
 800669c:	633b      	str	r3, [r7, #48]	; 0x30
 800669e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a0:	b29b      	uxth	r3, r3
 80066a2:	029b      	lsls	r3, r3, #10
 80066a4:	b29a      	uxth	r2, r3
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	801a      	strh	r2, [r3, #0]
 80066aa:	e017      	b.n	80066dc <PCD_EP_ISR_Handler+0x2ae>
 80066ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066ae:	691b      	ldr	r3, [r3, #16]
 80066b0:	095b      	lsrs	r3, r3, #5
 80066b2:	633b      	str	r3, [r7, #48]	; 0x30
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	f003 031f 	and.w	r3, r3, #31
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d102      	bne.n	80066c6 <PCD_EP_ISR_Handler+0x298>
 80066c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c2:	3b01      	subs	r3, #1
 80066c4:	633b      	str	r3, [r7, #48]	; 0x30
 80066c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	029b      	lsls	r3, r3, #10
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80066d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80066d6:	b29a      	uxth	r2, r3
 80066d8:	697b      	ldr	r3, [r7, #20]
 80066da:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	881b      	ldrh	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ec:	827b      	strh	r3, [r7, #18]
 80066ee:	8a7b      	ldrh	r3, [r7, #18]
 80066f0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 80066f4:	827b      	strh	r3, [r7, #18]
 80066f6:	8a7b      	ldrh	r3, [r7, #18]
 80066f8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80066fc:	827b      	strh	r3, [r7, #18]
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	681a      	ldr	r2, [r3, #0]
 8006702:	8a7b      	ldrh	r3, [r7, #18]
 8006704:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006708:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800670c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006710:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006714:	b29b      	uxth	r3, r3
 8006716:	8013      	strh	r3, [r2, #0]
 8006718:	e17b      	b.n	8006a12 <PCD_EP_ISR_Handler+0x5e4>
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	461a      	mov	r2, r3
 8006720:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	881b      	ldrh	r3, [r3, #0]
 800672a:	857b      	strh	r3, [r7, #42]	; 0x2a

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 800672c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	; 0x2a
 8006730:	2b00      	cmp	r3, #0
 8006732:	f280 80ea 	bge.w	800690a <PCD_EP_ISR_Handler+0x4dc>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	461a      	mov	r2, r3
 800673c:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4413      	add	r3, r2
 8006744:	881b      	ldrh	r3, [r3, #0]
 8006746:	b29a      	uxth	r2, r3
 8006748:	f640 738f 	movw	r3, #3983	; 0xf8f
 800674c:	4013      	ands	r3, r2
 800674e:	853b      	strh	r3, [r7, #40]	; 0x28
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	461a      	mov	r2, r3
 8006756:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800675a:	009b      	lsls	r3, r3, #2
 800675c:	4413      	add	r3, r2
 800675e:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8006760:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006764:	b292      	uxth	r2, r2
 8006766:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8006768:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 800676c:	4613      	mov	r3, r2
 800676e:	009b      	lsls	r3, r3, #2
 8006770:	4413      	add	r3, r2
 8006772:	00db      	lsls	r3, r3, #3
 8006774:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	4413      	add	r3, r2
 800677c:	627b      	str	r3, [r7, #36]	; 0x24

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 800677e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006780:	7b1b      	ldrb	r3, [r3, #12]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d122      	bne.n	80067cc <PCD_EP_ISR_Handler+0x39e>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800678e:	b29b      	uxth	r3, r3
 8006790:	461a      	mov	r2, r3
 8006792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006794:	781b      	ldrb	r3, [r3, #0]
 8006796:	00db      	lsls	r3, r3, #3
 8006798:	4413      	add	r3, r2
 800679a:	3306      	adds	r3, #6
 800679c:	005b      	lsls	r3, r3, #1
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6812      	ldr	r2, [r2, #0]
 80067a2:	4413      	add	r3, r2
 80067a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80067a8:	881b      	ldrh	r3, [r3, #0]
 80067aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80067ae:	86fb      	strh	r3, [r7, #54]	; 0x36

          if (count != 0U)
 80067b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8087 	beq.w	80068c6 <PCD_EP_ISR_Handler+0x498>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	6818      	ldr	r0, [r3, #0]
 80067bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067be:	6959      	ldr	r1, [r3, #20]
 80067c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c2:	88da      	ldrh	r2, [r3, #6]
 80067c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80067c6:	f005 fb21 	bl	800be0c <USB_ReadPMA>
 80067ca:	e07c      	b.n	80068c6 <PCD_EP_ISR_Handler+0x498>
          }
        }
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80067cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ce:	78db      	ldrb	r3, [r3, #3]
 80067d0:	2b02      	cmp	r3, #2
 80067d2:	d108      	bne.n	80067e6 <PCD_EP_ISR_Handler+0x3b8>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80067d4:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80067d6:	461a      	mov	r2, r3
 80067d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80067da:	6878      	ldr	r0, [r7, #4]
 80067dc:	f000 f927 	bl	8006a2e <HAL_PCD_EP_DB_Receive>
 80067e0:	4603      	mov	r3, r0
 80067e2:	86fb      	strh	r3, [r7, #54]	; 0x36
 80067e4:	e06f      	b.n	80068c6 <PCD_EP_ISR_Handler+0x498>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	461a      	mov	r2, r3
 80067ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	009b      	lsls	r3, r3, #2
 80067f2:	4413      	add	r3, r2
 80067f4:	881b      	ldrh	r3, [r3, #0]
 80067f6:	b29b      	uxth	r3, r3
 80067f8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006800:	847b      	strh	r3, [r7, #34]	; 0x22
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	461a      	mov	r2, r3
 8006808:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680a:	781b      	ldrb	r3, [r3, #0]
 800680c:	009b      	lsls	r3, r3, #2
 800680e:	441a      	add	r2, r3
 8006810:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006812:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006816:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800681a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800681e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006822:	b29b      	uxth	r3, r3
 8006824:	8013      	strh	r3, [r2, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	009b      	lsls	r3, r3, #2
 8006832:	4413      	add	r3, r2
 8006834:	881b      	ldrh	r3, [r3, #0]
 8006836:	b29b      	uxth	r3, r3
 8006838:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800683c:	2b00      	cmp	r3, #0
 800683e:	d021      	beq.n	8006884 <PCD_EP_ISR_Handler+0x456>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006848:	b29b      	uxth	r3, r3
 800684a:	461a      	mov	r2, r3
 800684c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800684e:	781b      	ldrb	r3, [r3, #0]
 8006850:	00db      	lsls	r3, r3, #3
 8006852:	4413      	add	r3, r2
 8006854:	3302      	adds	r3, #2
 8006856:	005b      	lsls	r3, r3, #1
 8006858:	687a      	ldr	r2, [r7, #4]
 800685a:	6812      	ldr	r2, [r2, #0]
 800685c:	4413      	add	r3, r2
 800685e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006862:	881b      	ldrh	r3, [r3, #0]
 8006864:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006868:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 800686a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800686c:	2b00      	cmp	r3, #0
 800686e:	d02a      	beq.n	80068c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6818      	ldr	r0, [r3, #0]
 8006874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006876:	6959      	ldr	r1, [r3, #20]
 8006878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800687a:	891a      	ldrh	r2, [r3, #8]
 800687c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800687e:	f005 fac5 	bl	800be0c <USB_ReadPMA>
 8006882:	e020      	b.n	80068c6 <PCD_EP_ISR_Handler+0x498>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800688c:	b29b      	uxth	r3, r3
 800688e:	461a      	mov	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006892:	781b      	ldrb	r3, [r3, #0]
 8006894:	00db      	lsls	r3, r3, #3
 8006896:	4413      	add	r3, r2
 8006898:	3306      	adds	r3, #6
 800689a:	005b      	lsls	r3, r3, #1
 800689c:	687a      	ldr	r2, [r7, #4]
 800689e:	6812      	ldr	r2, [r2, #0]
 80068a0:	4413      	add	r3, r2
 80068a2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80068a6:	881b      	ldrh	r3, [r3, #0]
 80068a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80068ac:	86fb      	strh	r3, [r7, #54]	; 0x36

              if (count != 0U)
 80068ae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d008      	beq.n	80068c6 <PCD_EP_ISR_Handler+0x498>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	6959      	ldr	r1, [r3, #20]
 80068bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068be:	895a      	ldrh	r2, [r3, #10]
 80068c0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068c2:	f005 faa3 	bl	800be0c <USB_ReadPMA>
              }
            }
          }
        }
        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80068c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c8:	69da      	ldr	r2, [r3, #28]
 80068ca:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068cc:	441a      	add	r2, r3
 80068ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d0:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80068d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d4:	695a      	ldr	r2, [r3, #20]
 80068d6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80068d8:	441a      	add	r2, r3
 80068da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068dc:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d004      	beq.n	80068f0 <PCD_EP_ISR_Handler+0x4c2>
 80068e6:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80068e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	d206      	bcs.n	80068fe <PCD_EP_ISR_Handler+0x4d0>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	781b      	ldrb	r3, [r3, #0]
 80068f4:	4619      	mov	r1, r3
 80068f6:	6878      	ldr	r0, [r7, #4]
 80068f8:	f00a fe3e 	bl	8011578 <HAL_PCD_DataOutStageCallback>
 80068fc:	e005      	b.n	800690a <PCD_EP_ISR_Handler+0x4dc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006904:	4618      	mov	r0, r3
 8006906:	f003 fadb 	bl	8009ec0 <USB_EPStartXfer>
        }

      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 800690a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800690c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006910:	2b00      	cmp	r3, #0
 8006912:	d07e      	beq.n	8006a12 <PCD_EP_ISR_Handler+0x5e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8006914:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006918:	1c5a      	adds	r2, r3, #1
 800691a:	4613      	mov	r3, r2
 800691c:	009b      	lsls	r3, r3, #2
 800691e:	4413      	add	r3, r2
 8006920:	00db      	lsls	r3, r3, #3
 8006922:	687a      	ldr	r2, [r7, #4]
 8006924:	4413      	add	r3, r2
 8006926:	627b      	str	r3, [r7, #36]	; 0x24

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	461a      	mov	r2, r3
 800692e:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8006932:	009b      	lsls	r3, r3, #2
 8006934:	4413      	add	r3, r2
 8006936:	881b      	ldrh	r3, [r3, #0]
 8006938:	b29b      	uxth	r3, r3
 800693a:	f423 43e1 	bic.w	r3, r3, #28800	; 0x7080
 800693e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006942:	843b      	strh	r3, [r7, #32]
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	461a      	mov	r2, r3
 800694a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 800694e:	009b      	lsls	r3, r3, #2
 8006950:	441a      	add	r2, r3
 8006952:	8c3b      	ldrh	r3, [r7, #32]
 8006954:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006958:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800695c:	b29b      	uxth	r3, r3
 800695e:	8013      	strh	r3, [r2, #0]

        /* Manage all non bulk/isoc transaction Bulk Single Buffer Transaction */
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006960:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006962:	78db      	ldrb	r3, [r3, #3]
 8006964:	2b03      	cmp	r3, #3
 8006966:	d00c      	beq.n	8006982 <PCD_EP_ISR_Handler+0x554>
 8006968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800696a:	78db      	ldrb	r3, [r3, #3]
 800696c:	2b00      	cmp	r3, #0
 800696e:	d008      	beq.n	8006982 <PCD_EP_ISR_Handler+0x554>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006972:	78db      	ldrb	r3, [r3, #3]
        if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_CTRL) ||
 8006974:	2b02      	cmp	r3, #2
 8006976:	d146      	bne.n	8006a06 <PCD_EP_ISR_Handler+0x5d8>
           ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U)))
 8006978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 800697a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800697e:	2b00      	cmp	r3, #0
 8006980:	d141      	bne.n	8006a06 <PCD_EP_ISR_Handler+0x5d8>
        {
          /* multi-packet on the NON control IN endpoint */
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800698a:	b29b      	uxth	r3, r3
 800698c:	461a      	mov	r2, r3
 800698e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006990:	781b      	ldrb	r3, [r3, #0]
 8006992:	00db      	lsls	r3, r3, #3
 8006994:	4413      	add	r3, r2
 8006996:	3302      	adds	r3, #2
 8006998:	005b      	lsls	r3, r3, #1
 800699a:	687a      	ldr	r2, [r7, #4]
 800699c:	6812      	ldr	r2, [r2, #0]
 800699e:	4413      	add	r3, r2
 80069a0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80069aa:	83fb      	strh	r3, [r7, #30]

          if (ep->xfer_len > TxByteNbre)
 80069ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ae:	699a      	ldr	r2, [r3, #24]
 80069b0:	8bfb      	ldrh	r3, [r7, #30]
 80069b2:	429a      	cmp	r2, r3
 80069b4:	d906      	bls.n	80069c4 <PCD_EP_ISR_Handler+0x596>
          {
            ep->xfer_len -= TxByteNbre;
 80069b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	8bfb      	ldrh	r3, [r7, #30]
 80069bc:	1ad2      	subs	r2, r2, r3
 80069be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c0:	619a      	str	r2, [r3, #24]
 80069c2:	e002      	b.n	80069ca <PCD_EP_ISR_Handler+0x59c>
          }
          else
          {
            ep->xfer_len = 0U;
 80069c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069c6:	2200      	movs	r2, #0
 80069c8:	619a      	str	r2, [r3, #24]
          }

          /* Zero Length Packet? */
          if (ep->xfer_len == 0U)
 80069ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069cc:	699b      	ldr	r3, [r3, #24]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <PCD_EP_ISR_Handler+0x5b2>
          {
            /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, ep->num);
#else
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80069d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	4619      	mov	r1, r3
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	f00a fde8 	bl	80115ae <HAL_PCD_DataInStageCallback>
 80069de:	e018      	b.n	8006a12 <PCD_EP_ISR_Handler+0x5e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          else
          {
            /* Transfer is not yet Done */
            ep->xfer_buff += TxByteNbre;
 80069e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069e2:	695a      	ldr	r2, [r3, #20]
 80069e4:	8bfb      	ldrh	r3, [r7, #30]
 80069e6:	441a      	add	r2, r3
 80069e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ea:	615a      	str	r2, [r3, #20]
            ep->xfer_count += TxByteNbre;
 80069ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ee:	69da      	ldr	r2, [r3, #28]
 80069f0:	8bfb      	ldrh	r3, [r7, #30]
 80069f2:	441a      	add	r2, r3
 80069f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069f6:	61da      	str	r2, [r3, #28]
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80069fe:	4618      	mov	r0, r3
 8006a00:	f003 fa5e 	bl	8009ec0 <USB_EPStartXfer>
          if (ep->xfer_len == 0U)
 8006a04:	e005      	b.n	8006a12 <PCD_EP_ISR_Handler+0x5e4>
          }
        }
        /* Double Buffer Iso/bulk IN (bulk transfer Len > Ep_Mps) */
        else
        {
          (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8006a06:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8006a08:	461a      	mov	r2, r3
 8006a0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8006a0c:	6878      	ldr	r0, [r7, #4]
 8006a0e:	f000 f91b 	bl	8006c48 <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8006a1a:	b29b      	uxth	r3, r3
 8006a1c:	b21b      	sxth	r3, r3
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	f6ff ad0a 	blt.w	8006438 <PCD_EP_ISR_Handler+0xa>
        }
      }
    }
  }

  return HAL_OK;
 8006a24:	2300      	movs	r3, #0
}
 8006a26:	4618      	mov	r0, r3
 8006a28:	3738      	adds	r7, #56	; 0x38
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}

08006a2e <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006a2e:	b580      	push	{r7, lr}
 8006a30:	b088      	sub	sp, #32
 8006a32:	af00      	add	r7, sp, #0
 8006a34:	60f8      	str	r0, [r7, #12]
 8006a36:	60b9      	str	r1, [r7, #8]
 8006a38:	4613      	mov	r3, r2
 8006a3a:	80fb      	strh	r3, [r7, #6]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006a3c:	88fb      	ldrh	r3, [r7, #6]
 8006a3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d07e      	beq.n	8006b44 <HAL_PCD_EP_DB_Receive+0x116>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006a4e:	b29b      	uxth	r3, r3
 8006a50:	461a      	mov	r2, r3
 8006a52:	68bb      	ldr	r3, [r7, #8]
 8006a54:	781b      	ldrb	r3, [r3, #0]
 8006a56:	00db      	lsls	r3, r3, #3
 8006a58:	4413      	add	r3, r2
 8006a5a:	3302      	adds	r3, #2
 8006a5c:	005b      	lsls	r3, r3, #1
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	6812      	ldr	r2, [r2, #0]
 8006a62:	4413      	add	r3, r2
 8006a64:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006a68:	881b      	ldrh	r3, [r3, #0]
 8006a6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006a6e:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006a70:	68bb      	ldr	r3, [r7, #8]
 8006a72:	699a      	ldr	r2, [r3, #24]
 8006a74:	8b7b      	ldrh	r3, [r7, #26]
 8006a76:	429a      	cmp	r2, r3
 8006a78:	d306      	bcc.n	8006a88 <HAL_PCD_EP_DB_Receive+0x5a>
    {
      ep->xfer_len -= count;
 8006a7a:	68bb      	ldr	r3, [r7, #8]
 8006a7c:	699a      	ldr	r2, [r3, #24]
 8006a7e:	8b7b      	ldrh	r3, [r7, #26]
 8006a80:	1ad2      	subs	r2, r2, r3
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	619a      	str	r2, [r3, #24]
 8006a86:	e002      	b.n	8006a8e <HAL_PCD_EP_DB_Receive+0x60>
    }
    else
    {
      ep->xfer_len = 0U;
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006a8e:	68bb      	ldr	r3, [r7, #8]
 8006a90:	699b      	ldr	r3, [r3, #24]
 8006a92:	2b00      	cmp	r3, #0
 8006a94:	d123      	bne.n	8006ade <HAL_PCD_EP_DB_Receive+0xb0>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	461a      	mov	r2, r3
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	781b      	ldrb	r3, [r3, #0]
 8006aa0:	009b      	lsls	r3, r3, #2
 8006aa2:	4413      	add	r3, r2
 8006aa4:	881b      	ldrh	r3, [r3, #0]
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006aac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ab0:	833b      	strh	r3, [r7, #24]
 8006ab2:	8b3b      	ldrh	r3, [r7, #24]
 8006ab4:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006ab8:	833b      	strh	r3, [r7, #24]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	461a      	mov	r2, r3
 8006ac0:	68bb      	ldr	r3, [r7, #8]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	009b      	lsls	r3, r3, #2
 8006ac6:	441a      	add	r2, r3
 8006ac8:	8b3b      	ldrh	r3, [r7, #24]
 8006aca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006ace:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006ad2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006ad6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ada:	b29b      	uxth	r3, r3
 8006adc:	8013      	strh	r3, [r2, #0]
    }

    /* Check if Buffer1 is in blocked sate which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006ade:	88fb      	ldrh	r3, [r7, #6]
 8006ae0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d01f      	beq.n	8006b28 <HAL_PCD_EP_DB_Receive+0xfa>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	461a      	mov	r2, r3
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	781b      	ldrb	r3, [r3, #0]
 8006af2:	009b      	lsls	r3, r3, #2
 8006af4:	4413      	add	r3, r2
 8006af6:	881b      	ldrh	r3, [r3, #0]
 8006af8:	b29b      	uxth	r3, r3
 8006afa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006afe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b02:	82fb      	strh	r3, [r7, #22]
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	461a      	mov	r2, r3
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	781b      	ldrb	r3, [r3, #0]
 8006b0e:	009b      	lsls	r3, r3, #2
 8006b10:	441a      	add	r2, r3
 8006b12:	8afb      	ldrh	r3, [r7, #22]
 8006b14:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006b18:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006b1c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006b20:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006b24:	b29b      	uxth	r3, r3
 8006b26:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006b28:	8b7b      	ldrh	r3, [r7, #26]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 8087 	beq.w	8006c3e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	6818      	ldr	r0, [r3, #0]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	6959      	ldr	r1, [r3, #20]
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	891a      	ldrh	r2, [r3, #8]
 8006b3c:	8b7b      	ldrh	r3, [r7, #26]
 8006b3e:	f005 f965 	bl	800be0c <USB_ReadPMA>
 8006b42:	e07c      	b.n	8006c3e <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006b4c:	b29b      	uxth	r3, r3
 8006b4e:	461a      	mov	r2, r3
 8006b50:	68bb      	ldr	r3, [r7, #8]
 8006b52:	781b      	ldrb	r3, [r3, #0]
 8006b54:	00db      	lsls	r3, r3, #3
 8006b56:	4413      	add	r3, r2
 8006b58:	3306      	adds	r3, #6
 8006b5a:	005b      	lsls	r3, r3, #1
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	6812      	ldr	r2, [r2, #0]
 8006b60:	4413      	add	r3, r2
 8006b62:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006b66:	881b      	ldrh	r3, [r3, #0]
 8006b68:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b6c:	837b      	strh	r3, [r7, #26]

    if (ep->xfer_len >= count)
 8006b6e:	68bb      	ldr	r3, [r7, #8]
 8006b70:	699a      	ldr	r2, [r3, #24]
 8006b72:	8b7b      	ldrh	r3, [r7, #26]
 8006b74:	429a      	cmp	r2, r3
 8006b76:	d306      	bcc.n	8006b86 <HAL_PCD_EP_DB_Receive+0x158>
    {
      ep->xfer_len -= count;
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	699a      	ldr	r2, [r3, #24]
 8006b7c:	8b7b      	ldrh	r3, [r7, #26]
 8006b7e:	1ad2      	subs	r2, r2, r3
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	619a      	str	r2, [r3, #24]
 8006b84:	e002      	b.n	8006b8c <HAL_PCD_EP_DB_Receive+0x15e>
    }
    else
    {
      ep->xfer_len = 0U;
 8006b86:	68bb      	ldr	r3, [r7, #8]
 8006b88:	2200      	movs	r2, #0
 8006b8a:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8006b8c:	68bb      	ldr	r3, [r7, #8]
 8006b8e:	699b      	ldr	r3, [r3, #24]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d123      	bne.n	8006bdc <HAL_PCD_EP_DB_Receive+0x1ae>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	461a      	mov	r2, r3
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	781b      	ldrb	r3, [r3, #0]
 8006b9e:	009b      	lsls	r3, r3, #2
 8006ba0:	4413      	add	r3, r2
 8006ba2:	881b      	ldrh	r3, [r3, #0]
 8006ba4:	b29b      	uxth	r3, r3
 8006ba6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006baa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bae:	83fb      	strh	r3, [r7, #30]
 8006bb0:	8bfb      	ldrh	r3, [r7, #30]
 8006bb2:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8006bb6:	83fb      	strh	r3, [r7, #30]
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	461a      	mov	r2, r3
 8006bbe:	68bb      	ldr	r3, [r7, #8]
 8006bc0:	781b      	ldrb	r3, [r3, #0]
 8006bc2:	009b      	lsls	r3, r3, #2
 8006bc4:	441a      	add	r2, r3
 8006bc6:	8bfb      	ldrh	r3, [r7, #30]
 8006bc8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006bcc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006bd0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006bd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	8013      	strh	r3, [r2, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8006bdc:	88fb      	ldrh	r3, [r7, #6]
 8006bde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006be2:	2b00      	cmp	r3, #0
 8006be4:	d11f      	bne.n	8006c26 <HAL_PCD_EP_DB_Receive+0x1f8>
    {
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	461a      	mov	r2, r3
 8006bec:	68bb      	ldr	r3, [r7, #8]
 8006bee:	781b      	ldrb	r3, [r3, #0]
 8006bf0:	009b      	lsls	r3, r3, #2
 8006bf2:	4413      	add	r3, r2
 8006bf4:	881b      	ldrh	r3, [r3, #0]
 8006bf6:	b29b      	uxth	r3, r3
 8006bf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006bfc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c00:	83bb      	strh	r3, [r7, #28]
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	461a      	mov	r2, r3
 8006c08:	68bb      	ldr	r3, [r7, #8]
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	009b      	lsls	r3, r3, #2
 8006c0e:	441a      	add	r2, r3
 8006c10:	8bbb      	ldrh	r3, [r7, #28]
 8006c12:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006c16:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006c1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006c1e:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	8013      	strh	r3, [r2, #0]
    }

    if (count != 0U)
 8006c26:	8b7b      	ldrh	r3, [r7, #26]
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	d008      	beq.n	8006c3e <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	6818      	ldr	r0, [r3, #0]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	6959      	ldr	r1, [r3, #20]
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	895a      	ldrh	r2, [r3, #10]
 8006c38:	8b7b      	ldrh	r3, [r7, #26]
 8006c3a:	f005 f8e7 	bl	800be0c <USB_ReadPMA>
    }
  }

  return count;
 8006c3e:	8b7b      	ldrh	r3, [r7, #26]
}
 8006c40:	4618      	mov	r0, r3
 8006c42:	3720      	adds	r7, #32
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b0a2      	sub	sp, #136	; 0x88
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	60f8      	str	r0, [r7, #12]
 8006c50:	60b9      	str	r1, [r7, #8]
 8006c52:	4613      	mov	r3, r2
 8006c54:	80fb      	strh	r3, [r7, #6]
  uint32_t len;
  uint16_t TxByteNbre;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8006c56:	88fb      	ldrh	r3, [r7, #6]
 8006c58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	f000 81c7 	beq.w	8006ff0 <HAL_PCD_EP_DB_Transmit+0x3a8>
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006c6a:	b29b      	uxth	r3, r3
 8006c6c:	461a      	mov	r2, r3
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	781b      	ldrb	r3, [r3, #0]
 8006c72:	00db      	lsls	r3, r3, #3
 8006c74:	4413      	add	r3, r2
 8006c76:	3302      	adds	r3, #2
 8006c78:	005b      	lsls	r3, r3, #1
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	6812      	ldr	r2, [r2, #0]
 8006c7e:	4413      	add	r3, r2
 8006c80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c84:	881b      	ldrh	r3, [r3, #0]
 8006c86:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c8a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len > TxByteNbre)
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	699a      	ldr	r2, [r3, #24]
 8006c92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006c96:	429a      	cmp	r2, r3
 8006c98:	d907      	bls.n	8006caa <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxByteNbre;
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	699a      	ldr	r2, [r3, #24]
 8006c9e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ca2:	1ad2      	subs	r2, r2, r3
 8006ca4:	68bb      	ldr	r3, [r7, #8]
 8006ca6:	619a      	str	r2, [r3, #24]
 8006ca8:	e002      	b.n	8006cb0 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8006caa:	68bb      	ldr	r3, [r7, #8]
 8006cac:	2200      	movs	r2, #0
 8006cae:	619a      	str	r2, [r3, #24]
    }
    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8006cb0:	68bb      	ldr	r3, [r7, #8]
 8006cb2:	699b      	ldr	r3, [r3, #24]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	f040 80b9 	bne.w	8006e2c <HAL_PCD_EP_DB_Transmit+0x1e4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	785b      	ldrb	r3, [r3, #1]
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d126      	bne.n	8006d10 <HAL_PCD_EP_DB_Transmit+0xc8>
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd6:	4413      	add	r3, r2
 8006cd8:	62bb      	str	r3, [r7, #40]	; 0x28
 8006cda:	68bb      	ldr	r3, [r7, #8]
 8006cdc:	781b      	ldrb	r3, [r3, #0]
 8006cde:	011a      	lsls	r2, r3, #4
 8006ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce2:	4413      	add	r3, r2
 8006ce4:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006ce8:	627b      	str	r3, [r7, #36]	; 0x24
 8006cea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cec:	881b      	ldrh	r3, [r3, #0]
 8006cee:	b29b      	uxth	r3, r3
 8006cf0:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006cf4:	b29a      	uxth	r2, r3
 8006cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cf8:	801a      	strh	r2, [r3, #0]
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	881b      	ldrh	r3, [r3, #0]
 8006cfe:	b29b      	uxth	r3, r3
 8006d00:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d04:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d08:	b29a      	uxth	r2, r3
 8006d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0c:	801a      	strh	r2, [r3, #0]
 8006d0e:	e01a      	b.n	8006d46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	785b      	ldrb	r3, [r3, #1]
 8006d14:	2b01      	cmp	r3, #1
 8006d16:	d116      	bne.n	8006d46 <HAL_PCD_EP_DB_Transmit+0xfe>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	633b      	str	r3, [r7, #48]	; 0x30
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d26:	b29b      	uxth	r3, r3
 8006d28:	461a      	mov	r2, r3
 8006d2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d2c:	4413      	add	r3, r2
 8006d2e:	633b      	str	r3, [r7, #48]	; 0x30
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	781b      	ldrb	r3, [r3, #0]
 8006d34:	011a      	lsls	r2, r3, #4
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	4413      	add	r3, r2
 8006d3a:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d42:	2200      	movs	r2, #0
 8006d44:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8006d46:	68fb      	ldr	r3, [r7, #12]
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	623b      	str	r3, [r7, #32]
 8006d4c:	68bb      	ldr	r3, [r7, #8]
 8006d4e:	785b      	ldrb	r3, [r3, #1]
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d126      	bne.n	8006da2 <HAL_PCD_EP_DB_Transmit+0x15a>
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	61bb      	str	r3, [r7, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006d62:	b29b      	uxth	r3, r3
 8006d64:	461a      	mov	r2, r3
 8006d66:	69bb      	ldr	r3, [r7, #24]
 8006d68:	4413      	add	r3, r2
 8006d6a:	61bb      	str	r3, [r7, #24]
 8006d6c:	68bb      	ldr	r3, [r7, #8]
 8006d6e:	781b      	ldrb	r3, [r3, #0]
 8006d70:	011a      	lsls	r2, r3, #4
 8006d72:	69bb      	ldr	r3, [r7, #24]
 8006d74:	4413      	add	r3, r2
 8006d76:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006d7a:	617b      	str	r3, [r7, #20]
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	881b      	ldrh	r3, [r3, #0]
 8006d80:	b29b      	uxth	r3, r3
 8006d82:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006d86:	b29a      	uxth	r2, r3
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	801a      	strh	r2, [r3, #0]
 8006d8c:	697b      	ldr	r3, [r7, #20]
 8006d8e:	881b      	ldrh	r3, [r3, #0]
 8006d90:	b29b      	uxth	r3, r3
 8006d92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006d96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006d9a:	b29a      	uxth	r2, r3
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	801a      	strh	r2, [r3, #0]
 8006da0:	e017      	b.n	8006dd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006da2:	68bb      	ldr	r3, [r7, #8]
 8006da4:	785b      	ldrb	r3, [r3, #1]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d113      	bne.n	8006dd2 <HAL_PCD_EP_DB_Transmit+0x18a>
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006db2:	b29b      	uxth	r3, r3
 8006db4:	461a      	mov	r2, r3
 8006db6:	6a3b      	ldr	r3, [r7, #32]
 8006db8:	4413      	add	r3, r2
 8006dba:	623b      	str	r3, [r7, #32]
 8006dbc:	68bb      	ldr	r3, [r7, #8]
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	011a      	lsls	r2, r3, #4
 8006dc2:	6a3b      	ldr	r3, [r7, #32]
 8006dc4:	4413      	add	r3, r2
 8006dc6:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8006dca:	61fb      	str	r3, [r7, #28]
 8006dcc:	69fb      	ldr	r3, [r7, #28]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8006dd2:	68bb      	ldr	r3, [r7, #8]
 8006dd4:	781b      	ldrb	r3, [r3, #0]
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	68f8      	ldr	r0, [r7, #12]
 8006dda:	f00a fbe8 	bl	80115ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006dde:	88fb      	ldrh	r3, [r7, #6]
 8006de0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	f000 82d4 	beq.w	8007392 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	461a      	mov	r2, r3
 8006df0:	68bb      	ldr	r3, [r7, #8]
 8006df2:	781b      	ldrb	r3, [r3, #0]
 8006df4:	009b      	lsls	r3, r3, #2
 8006df6:	4413      	add	r3, r2
 8006df8:	881b      	ldrh	r3, [r3, #0]
 8006dfa:	b29b      	uxth	r3, r3
 8006dfc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e00:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e04:	827b      	strh	r3, [r7, #18]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	68bb      	ldr	r3, [r7, #8]
 8006e0e:	781b      	ldrb	r3, [r3, #0]
 8006e10:	009b      	lsls	r3, r3, #2
 8006e12:	441a      	add	r2, r3
 8006e14:	8a7b      	ldrh	r3, [r7, #18]
 8006e16:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e1a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e1e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e26:	b29b      	uxth	r3, r3
 8006e28:	8013      	strh	r3, [r2, #0]
 8006e2a:	e2b2      	b.n	8007392 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8006e2c:	88fb      	ldrh	r3, [r7, #6]
 8006e2e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d021      	beq.n	8006e7a <HAL_PCD_EP_DB_Transmit+0x232>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	461a      	mov	r2, r3
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	781b      	ldrb	r3, [r3, #0]
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4413      	add	r3, r2
 8006e44:	881b      	ldrh	r3, [r3, #0]
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e50:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	461a      	mov	r2, r3
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	781b      	ldrb	r3, [r3, #0]
 8006e5e:	009b      	lsls	r3, r3, #2
 8006e60:	441a      	add	r2, r3
 8006e62:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8006e66:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8006e6a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8006e6e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006e72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e76:	b29b      	uxth	r3, r3
 8006e78:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8006e7a:	68bb      	ldr	r3, [r7, #8]
 8006e7c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8006e80:	2b01      	cmp	r3, #1
 8006e82:	f040 8286 	bne.w	8007392 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	695a      	ldr	r2, [r3, #20]
 8006e8a:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e8e:	441a      	add	r2, r3
 8006e90:	68bb      	ldr	r3, [r7, #8]
 8006e92:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	69da      	ldr	r2, [r3, #28]
 8006e98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006e9c:	441a      	add	r2, r3
 8006e9e:	68bb      	ldr	r3, [r7, #8]
 8006ea0:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6a1a      	ldr	r2, [r3, #32]
 8006ea6:	68bb      	ldr	r3, [r7, #8]
 8006ea8:	691b      	ldr	r3, [r3, #16]
 8006eaa:	429a      	cmp	r2, r3
 8006eac:	d309      	bcc.n	8006ec2 <HAL_PCD_EP_DB_Transmit+0x27a>
        {
          len = ep->maxpacket;
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8006eb4:	68bb      	ldr	r3, [r7, #8]
 8006eb6:	6a1a      	ldr	r2, [r3, #32]
 8006eb8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eba:	1ad2      	subs	r2, r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	621a      	str	r2, [r3, #32]
 8006ec0:	e015      	b.n	8006eee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8006ec2:	68bb      	ldr	r3, [r7, #8]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d107      	bne.n	8006eda <HAL_PCD_EP_DB_Transmit+0x292>
        {
          len = TxByteNbre;
 8006eca:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8006ece:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8006ed0:	68bb      	ldr	r3, [r7, #8]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 8006ed8:	e009      	b.n	8006eee <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          len = ep->xfer_len_db;
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	6a1b      	ldr	r3, [r3, #32]
 8006ee6:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	2200      	movs	r2, #0
 8006eec:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8006eee:	68bb      	ldr	r3, [r7, #8]
 8006ef0:	785b      	ldrb	r3, [r3, #1]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d155      	bne.n	8006fa2 <HAL_PCD_EP_DB_Transmit+0x35a>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	63bb      	str	r3, [r7, #56]	; 0x38
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006f04:	b29b      	uxth	r3, r3
 8006f06:	461a      	mov	r2, r3
 8006f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f0a:	4413      	add	r3, r2
 8006f0c:	63bb      	str	r3, [r7, #56]	; 0x38
 8006f0e:	68bb      	ldr	r3, [r7, #8]
 8006f10:	781b      	ldrb	r3, [r3, #0]
 8006f12:	011a      	lsls	r2, r3, #4
 8006f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006f16:	4413      	add	r3, r2
 8006f18:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006f1c:	637b      	str	r3, [r7, #52]	; 0x34
 8006f1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d112      	bne.n	8006f4a <HAL_PCD_EP_DB_Transmit+0x302>
 8006f24:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f26:	881b      	ldrh	r3, [r3, #0]
 8006f28:	b29b      	uxth	r3, r3
 8006f2a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8006f2e:	b29a      	uxth	r2, r3
 8006f30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f32:	801a      	strh	r2, [r3, #0]
 8006f34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f36:	881b      	ldrh	r3, [r3, #0]
 8006f38:	b29b      	uxth	r3, r3
 8006f3a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f3e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f42:	b29a      	uxth	r2, r3
 8006f44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f46:	801a      	strh	r2, [r3, #0]
 8006f48:	e047      	b.n	8006fda <HAL_PCD_EP_DB_Transmit+0x392>
 8006f4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f4c:	2b3e      	cmp	r3, #62	; 0x3e
 8006f4e:	d811      	bhi.n	8006f74 <HAL_PCD_EP_DB_Transmit+0x32c>
 8006f50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f52:	085b      	lsrs	r3, r3, #1
 8006f54:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f58:	f003 0301 	and.w	r3, r3, #1
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d002      	beq.n	8006f66 <HAL_PCD_EP_DB_Transmit+0x31e>
 8006f60:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f62:	3301      	adds	r3, #1
 8006f64:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f66:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	029b      	lsls	r3, r3, #10
 8006f6c:	b29a      	uxth	r2, r3
 8006f6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f70:	801a      	strh	r2, [r3, #0]
 8006f72:	e032      	b.n	8006fda <HAL_PCD_EP_DB_Transmit+0x392>
 8006f74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f76:	095b      	lsrs	r3, r3, #5
 8006f78:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f7a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f7c:	f003 031f 	and.w	r3, r3, #31
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d102      	bne.n	8006f8a <HAL_PCD_EP_DB_Transmit+0x342>
 8006f84:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f86:	3b01      	subs	r3, #1
 8006f88:	64bb      	str	r3, [r7, #72]	; 0x48
 8006f8a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006f8c:	b29b      	uxth	r3, r3
 8006f8e:	029b      	lsls	r3, r3, #10
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8006f96:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8006f9a:	b29a      	uxth	r2, r3
 8006f9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f9e:	801a      	strh	r2, [r3, #0]
 8006fa0:	e01b      	b.n	8006fda <HAL_PCD_EP_DB_Transmit+0x392>
 8006fa2:	68bb      	ldr	r3, [r7, #8]
 8006fa4:	785b      	ldrb	r3, [r3, #1]
 8006fa6:	2b01      	cmp	r3, #1
 8006fa8:	d117      	bne.n	8006fda <HAL_PCD_EP_DB_Transmit+0x392>
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	643b      	str	r3, [r7, #64]	; 0x40
 8006fb0:	68fb      	ldr	r3, [r7, #12]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006fb8:	b29b      	uxth	r3, r3
 8006fba:	461a      	mov	r2, r3
 8006fbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fbe:	4413      	add	r3, r2
 8006fc0:	643b      	str	r3, [r7, #64]	; 0x40
 8006fc2:	68bb      	ldr	r3, [r7, #8]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	011a      	lsls	r2, r3, #4
 8006fc8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fca:	4413      	add	r3, r2
 8006fcc:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8006fd0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006fd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fd4:	b29a      	uxth	r2, r3
 8006fd6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fd8:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6818      	ldr	r0, [r3, #0]
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	6959      	ldr	r1, [r3, #20]
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	891a      	ldrh	r2, [r3, #8]
 8006fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	f004 feca 	bl	800bd82 <USB_WritePMA>
 8006fee:	e1d0      	b.n	8007392 <HAL_PCD_EP_DB_Transmit+0x74a>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8006ff8:	b29b      	uxth	r3, r3
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	00db      	lsls	r3, r3, #3
 8007002:	4413      	add	r3, r2
 8007004:	3306      	adds	r3, #6
 8007006:	005b      	lsls	r3, r3, #1
 8007008:	68fa      	ldr	r2, [r7, #12]
 800700a:	6812      	ldr	r2, [r2, #0]
 800700c:	4413      	add	r3, r2
 800700e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007012:	881b      	ldrh	r3, [r3, #0]
 8007014:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007018:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

    if (ep->xfer_len >= TxByteNbre)
 800701c:	68bb      	ldr	r3, [r7, #8]
 800701e:	699a      	ldr	r2, [r3, #24]
 8007020:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007024:	429a      	cmp	r2, r3
 8007026:	d307      	bcc.n	8007038 <HAL_PCD_EP_DB_Transmit+0x3f0>
    {
      ep->xfer_len -= TxByteNbre;
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	699a      	ldr	r2, [r3, #24]
 800702c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007030:	1ad2      	subs	r2, r2, r3
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	619a      	str	r2, [r3, #24]
 8007036:	e002      	b.n	800703e <HAL_PCD_EP_DB_Transmit+0x3f6>
    }
    else
    {
      ep->xfer_len = 0U;
 8007038:	68bb      	ldr	r3, [r7, #8]
 800703a:	2200      	movs	r2, #0
 800703c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	699b      	ldr	r3, [r3, #24]
 8007042:	2b00      	cmp	r3, #0
 8007044:	f040 80c4 	bne.w	80071d0 <HAL_PCD_EP_DB_Transmit+0x588>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	785b      	ldrb	r3, [r3, #1]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d126      	bne.n	800709e <HAL_PCD_EP_DB_Transmit+0x456>
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800705e:	b29b      	uxth	r3, r3
 8007060:	461a      	mov	r2, r3
 8007062:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007064:	4413      	add	r3, r2
 8007066:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007068:	68bb      	ldr	r3, [r7, #8]
 800706a:	781b      	ldrb	r3, [r3, #0]
 800706c:	011a      	lsls	r2, r3, #4
 800706e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007070:	4413      	add	r3, r2
 8007072:	f203 4304 	addw	r3, r3, #1028	; 0x404
 8007076:	66bb      	str	r3, [r7, #104]	; 0x68
 8007078:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800707a:	881b      	ldrh	r3, [r3, #0]
 800707c:	b29b      	uxth	r3, r3
 800707e:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007082:	b29a      	uxth	r2, r3
 8007084:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007086:	801a      	strh	r2, [r3, #0]
 8007088:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800708a:	881b      	ldrh	r3, [r3, #0]
 800708c:	b29b      	uxth	r3, r3
 800708e:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007092:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007096:	b29a      	uxth	r2, r3
 8007098:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800709a:	801a      	strh	r2, [r3, #0]
 800709c:	e01a      	b.n	80070d4 <HAL_PCD_EP_DB_Transmit+0x48c>
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	785b      	ldrb	r3, [r3, #1]
 80070a2:	2b01      	cmp	r3, #1
 80070a4:	d116      	bne.n	80070d4 <HAL_PCD_EP_DB_Transmit+0x48c>
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	677b      	str	r3, [r7, #116]	; 0x74
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	461a      	mov	r2, r3
 80070b8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070ba:	4413      	add	r3, r2
 80070bc:	677b      	str	r3, [r7, #116]	; 0x74
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	011a      	lsls	r2, r3, #4
 80070c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80070c6:	4413      	add	r3, r2
 80070c8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 80070cc:	673b      	str	r3, [r7, #112]	; 0x70
 80070ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80070d0:	2200      	movs	r2, #0
 80070d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80070da:	68bb      	ldr	r3, [r7, #8]
 80070dc:	785b      	ldrb	r3, [r3, #1]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d12f      	bne.n	8007142 <HAL_PCD_EP_DB_Transmit+0x4fa>
 80070e2:	68fb      	ldr	r3, [r7, #12]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80070f2:	b29b      	uxth	r3, r3
 80070f4:	461a      	mov	r2, r3
 80070f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80070fa:	4413      	add	r3, r2
 80070fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007100:	68bb      	ldr	r3, [r7, #8]
 8007102:	781b      	ldrb	r3, [r3, #0]
 8007104:	011a      	lsls	r2, r3, #4
 8007106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800710a:	4413      	add	r3, r2
 800710c:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007118:	881b      	ldrh	r3, [r3, #0]
 800711a:	b29b      	uxth	r3, r3
 800711c:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007120:	b29a      	uxth	r2, r3
 8007122:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007126:	801a      	strh	r2, [r3, #0]
 8007128:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800712c:	881b      	ldrh	r3, [r3, #0]
 800712e:	b29b      	uxth	r3, r3
 8007130:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007134:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007138:	b29a      	uxth	r2, r3
 800713a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800713e:	801a      	strh	r2, [r3, #0]
 8007140:	e017      	b.n	8007172 <HAL_PCD_EP_DB_Transmit+0x52a>
 8007142:	68bb      	ldr	r3, [r7, #8]
 8007144:	785b      	ldrb	r3, [r3, #1]
 8007146:	2b01      	cmp	r3, #1
 8007148:	d113      	bne.n	8007172 <HAL_PCD_EP_DB_Transmit+0x52a>
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8007152:	b29b      	uxth	r3, r3
 8007154:	461a      	mov	r2, r3
 8007156:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007158:	4413      	add	r3, r2
 800715a:	67bb      	str	r3, [r7, #120]	; 0x78
 800715c:	68bb      	ldr	r3, [r7, #8]
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	011a      	lsls	r2, r3, #4
 8007162:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007164:	4413      	add	r3, r2
 8007166:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800716a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800716c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800716e:	2200      	movs	r2, #0
 8007170:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8007172:	68bb      	ldr	r3, [r7, #8]
 8007174:	781b      	ldrb	r3, [r3, #0]
 8007176:	4619      	mov	r1, r3
 8007178:	68f8      	ldr	r0, [r7, #12]
 800717a:	f00a fa18 	bl	80115ae <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 800717e:	88fb      	ldrh	r3, [r7, #6]
 8007180:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007184:	2b00      	cmp	r3, #0
 8007186:	f040 8104 	bne.w	8007392 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	461a      	mov	r2, r3
 8007190:	68bb      	ldr	r3, [r7, #8]
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	009b      	lsls	r3, r3, #2
 8007196:	4413      	add	r3, r2
 8007198:	881b      	ldrh	r3, [r3, #0]
 800719a:	b29b      	uxth	r3, r3
 800719c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a4:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	68bb      	ldr	r3, [r7, #8]
 80071b0:	781b      	ldrb	r3, [r3, #0]
 80071b2:	009b      	lsls	r3, r3, #2
 80071b4:	441a      	add	r2, r3
 80071b6:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80071ba:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80071be:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80071c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80071c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071ca:	b29b      	uxth	r3, r3
 80071cc:	8013      	strh	r3, [r2, #0]
 80071ce:	e0e0      	b.n	8007392 <HAL_PCD_EP_DB_Transmit+0x74a>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80071d0:	88fb      	ldrh	r3, [r7, #6]
 80071d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d121      	bne.n	800721e <HAL_PCD_EP_DB_Transmit+0x5d6>
      {
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	461a      	mov	r2, r3
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	781b      	ldrb	r3, [r3, #0]
 80071e4:	009b      	lsls	r3, r3, #2
 80071e6:	4413      	add	r3, r2
 80071e8:	881b      	ldrh	r3, [r3, #0]
 80071ea:	b29b      	uxth	r3, r3
 80071ec:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80071f0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071f4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	461a      	mov	r2, r3
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	781b      	ldrb	r3, [r3, #0]
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	441a      	add	r2, r3
 8007206:	f8b7 304c 	ldrh.w	r3, [r7, #76]	; 0x4c
 800720a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800720e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8007212:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8007216:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800721a:	b29b      	uxth	r3, r3
 800721c:	8013      	strh	r3, [r2, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 800721e:	68bb      	ldr	r3, [r7, #8]
 8007220:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007224:	2b01      	cmp	r3, #1
 8007226:	f040 80b4 	bne.w	8007392 <HAL_PCD_EP_DB_Transmit+0x74a>
      {
        ep->xfer_buff += TxByteNbre;
 800722a:	68bb      	ldr	r3, [r7, #8]
 800722c:	695a      	ldr	r2, [r3, #20]
 800722e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007232:	441a      	add	r2, r3
 8007234:	68bb      	ldr	r3, [r7, #8]
 8007236:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxByteNbre;
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	69da      	ldr	r2, [r3, #28]
 800723c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007240:	441a      	add	r2, r3
 8007242:	68bb      	ldr	r3, [r7, #8]
 8007244:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8007246:	68bb      	ldr	r3, [r7, #8]
 8007248:	6a1a      	ldr	r2, [r3, #32]
 800724a:	68bb      	ldr	r3, [r7, #8]
 800724c:	691b      	ldr	r3, [r3, #16]
 800724e:	429a      	cmp	r2, r3
 8007250:	d309      	bcc.n	8007266 <HAL_PCD_EP_DB_Transmit+0x61e>
        {
          len = ep->maxpacket;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	691b      	ldr	r3, [r3, #16]
 8007256:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db -= len;
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	6a1a      	ldr	r2, [r3, #32]
 800725c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800725e:	1ad2      	subs	r2, r2, r3
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	621a      	str	r2, [r3, #32]
 8007264:	e015      	b.n	8007292 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else if (ep->xfer_len_db == 0U)
 8007266:	68bb      	ldr	r3, [r7, #8]
 8007268:	6a1b      	ldr	r3, [r3, #32]
 800726a:	2b00      	cmp	r3, #0
 800726c:	d107      	bne.n	800727e <HAL_PCD_EP_DB_Transmit+0x636>
        {
          len = TxByteNbre;
 800726e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8007272:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_fill_db = 0U;
 8007274:	68bb      	ldr	r3, [r7, #8]
 8007276:	2200      	movs	r2, #0
 8007278:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
 800727c:	e009      	b.n	8007292 <HAL_PCD_EP_DB_Transmit+0x64a>
        }
        else
        {
          len = ep->xfer_len_db;
 800727e:	68bb      	ldr	r3, [r7, #8]
 8007280:	6a1b      	ldr	r3, [r3, #32]
 8007282:	653b      	str	r3, [r7, #80]	; 0x50
          ep->xfer_len_db = 0U;
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2200      	movs	r2, #0
 8007288:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 800728a:	68bb      	ldr	r3, [r7, #8]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	667b      	str	r3, [r7, #100]	; 0x64
 8007298:	68bb      	ldr	r3, [r7, #8]
 800729a:	785b      	ldrb	r3, [r3, #1]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d155      	bne.n	800734c <HAL_PCD_EP_DB_Transmit+0x704>
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	461a      	mov	r2, r3
 80072b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072b4:	4413      	add	r3, r2
 80072b6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072b8:	68bb      	ldr	r3, [r7, #8]
 80072ba:	781b      	ldrb	r3, [r3, #0]
 80072bc:	011a      	lsls	r2, r3, #4
 80072be:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80072c0:	4413      	add	r3, r2
 80072c2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 80072c6:	65bb      	str	r3, [r7, #88]	; 0x58
 80072c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d112      	bne.n	80072f4 <HAL_PCD_EP_DB_Transmit+0x6ac>
 80072ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072d0:	881b      	ldrh	r3, [r3, #0]
 80072d2:	b29b      	uxth	r3, r3
 80072d4:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 80072d8:	b29a      	uxth	r2, r3
 80072da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072dc:	801a      	strh	r2, [r3, #0]
 80072de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072e0:	881b      	ldrh	r3, [r3, #0]
 80072e2:	b29b      	uxth	r3, r3
 80072e4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80072e8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80072ec:	b29a      	uxth	r2, r3
 80072ee:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80072f0:	801a      	strh	r2, [r3, #0]
 80072f2:	e044      	b.n	800737e <HAL_PCD_EP_DB_Transmit+0x736>
 80072f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072f6:	2b3e      	cmp	r3, #62	; 0x3e
 80072f8:	d811      	bhi.n	800731e <HAL_PCD_EP_DB_Transmit+0x6d6>
 80072fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80072fc:	085b      	lsrs	r3, r3, #1
 80072fe:	657b      	str	r3, [r7, #84]	; 0x54
 8007300:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007302:	f003 0301 	and.w	r3, r3, #1
 8007306:	2b00      	cmp	r3, #0
 8007308:	d002      	beq.n	8007310 <HAL_PCD_EP_DB_Transmit+0x6c8>
 800730a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800730c:	3301      	adds	r3, #1
 800730e:	657b      	str	r3, [r7, #84]	; 0x54
 8007310:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007312:	b29b      	uxth	r3, r3
 8007314:	029b      	lsls	r3, r3, #10
 8007316:	b29a      	uxth	r2, r3
 8007318:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800731a:	801a      	strh	r2, [r3, #0]
 800731c:	e02f      	b.n	800737e <HAL_PCD_EP_DB_Transmit+0x736>
 800731e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007320:	095b      	lsrs	r3, r3, #5
 8007322:	657b      	str	r3, [r7, #84]	; 0x54
 8007324:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007326:	f003 031f 	and.w	r3, r3, #31
 800732a:	2b00      	cmp	r3, #0
 800732c:	d102      	bne.n	8007334 <HAL_PCD_EP_DB_Transmit+0x6ec>
 800732e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007330:	3b01      	subs	r3, #1
 8007332:	657b      	str	r3, [r7, #84]	; 0x54
 8007334:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007336:	b29b      	uxth	r3, r3
 8007338:	029b      	lsls	r3, r3, #10
 800733a:	b29b      	uxth	r3, r3
 800733c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8007340:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8007344:	b29a      	uxth	r2, r3
 8007346:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007348:	801a      	strh	r2, [r3, #0]
 800734a:	e018      	b.n	800737e <HAL_PCD_EP_DB_Transmit+0x736>
 800734c:	68bb      	ldr	r3, [r7, #8]
 800734e:	785b      	ldrb	r3, [r3, #1]
 8007350:	2b01      	cmp	r3, #1
 8007352:	d114      	bne.n	800737e <HAL_PCD_EP_DB_Transmit+0x736>
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800735c:	b29b      	uxth	r3, r3
 800735e:	461a      	mov	r2, r3
 8007360:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007362:	4413      	add	r3, r2
 8007364:	667b      	str	r3, [r7, #100]	; 0x64
 8007366:	68bb      	ldr	r3, [r7, #8]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	011a      	lsls	r2, r3, #4
 800736c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800736e:	4413      	add	r3, r2
 8007370:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 8007374:	663b      	str	r3, [r7, #96]	; 0x60
 8007376:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007378:	b29a      	uxth	r2, r3
 800737a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800737c:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6818      	ldr	r0, [r3, #0]
 8007382:	68bb      	ldr	r3, [r7, #8]
 8007384:	6959      	ldr	r1, [r3, #20]
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	895a      	ldrh	r2, [r3, #10]
 800738a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800738c:	b29b      	uxth	r3, r3
 800738e:	f004 fcf8 	bl	800bd82 <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	461a      	mov	r2, r3
 8007398:	68bb      	ldr	r3, [r7, #8]
 800739a:	781b      	ldrb	r3, [r3, #0]
 800739c:	009b      	lsls	r3, r3, #2
 800739e:	4413      	add	r3, r2
 80073a0:	881b      	ldrh	r3, [r3, #0]
 80073a2:	b29b      	uxth	r3, r3
 80073a4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80073a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073ac:	823b      	strh	r3, [r7, #16]
 80073ae:	8a3b      	ldrh	r3, [r7, #16]
 80073b0:	f083 0310 	eor.w	r3, r3, #16
 80073b4:	823b      	strh	r3, [r7, #16]
 80073b6:	8a3b      	ldrh	r3, [r7, #16]
 80073b8:	f083 0320 	eor.w	r3, r3, #32
 80073bc:	823b      	strh	r3, [r7, #16]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	461a      	mov	r2, r3
 80073c4:	68bb      	ldr	r3, [r7, #8]
 80073c6:	781b      	ldrb	r3, [r3, #0]
 80073c8:	009b      	lsls	r3, r3, #2
 80073ca:	441a      	add	r2, r3
 80073cc:	8a3b      	ldrh	r3, [r7, #16]
 80073ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80073d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80073d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073de:	b29b      	uxth	r3, r3
 80073e0:	8013      	strh	r3, [r2, #0]

  return HAL_OK;
 80073e2:	2300      	movs	r3, #0
}
 80073e4:	4618      	mov	r0, r3
 80073e6:	3788      	adds	r7, #136	; 0x88
 80073e8:	46bd      	mov	sp, r7
 80073ea:	bd80      	pop	{r7, pc}

080073ec <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80073ec:	b480      	push	{r7}
 80073ee:	b087      	sub	sp, #28
 80073f0:	af00      	add	r7, sp, #0
 80073f2:	60f8      	str	r0, [r7, #12]
 80073f4:	607b      	str	r3, [r7, #4]
 80073f6:	460b      	mov	r3, r1
 80073f8:	817b      	strh	r3, [r7, #10]
 80073fa:	4613      	mov	r3, r2
 80073fc:	813b      	strh	r3, [r7, #8]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80073fe:	897b      	ldrh	r3, [r7, #10]
 8007400:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007404:	b29b      	uxth	r3, r3
 8007406:	2b00      	cmp	r3, #0
 8007408:	d00b      	beq.n	8007422 <HAL_PCDEx_PMAConfig+0x36>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800740a:	897b      	ldrh	r3, [r7, #10]
 800740c:	f003 0307 	and.w	r3, r3, #7
 8007410:	1c5a      	adds	r2, r3, #1
 8007412:	4613      	mov	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	4413      	add	r3, r2
 8007418:	00db      	lsls	r3, r3, #3
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	4413      	add	r3, r2
 800741e:	617b      	str	r3, [r7, #20]
 8007420:	e009      	b.n	8007436 <HAL_PCDEx_PMAConfig+0x4a>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8007422:	897a      	ldrh	r2, [r7, #10]
 8007424:	4613      	mov	r3, r2
 8007426:	009b      	lsls	r3, r3, #2
 8007428:	4413      	add	r3, r2
 800742a:	00db      	lsls	r3, r3, #3
 800742c:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8007430:	68fa      	ldr	r2, [r7, #12]
 8007432:	4413      	add	r3, r2
 8007434:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8007436:	893b      	ldrh	r3, [r7, #8]
 8007438:	2b00      	cmp	r3, #0
 800743a:	d107      	bne.n	800744c <HAL_PCDEx_PMAConfig+0x60>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 800743c:	697b      	ldr	r3, [r7, #20]
 800743e:	2200      	movs	r2, #0
 8007440:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	b29a      	uxth	r2, r3
 8007446:	697b      	ldr	r3, [r7, #20]
 8007448:	80da      	strh	r2, [r3, #6]
 800744a:	e00b      	b.n	8007464 <HAL_PCDEx_PMAConfig+0x78>
  }
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 800744c:	697b      	ldr	r3, [r7, #20]
 800744e:	2201      	movs	r2, #1
 8007450:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	b29a      	uxth	r2, r3
 8007456:	697b      	ldr	r3, [r7, #20]
 8007458:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	0c1b      	lsrs	r3, r3, #16
 800745e:	b29a      	uxth	r2, r3
 8007460:	697b      	ldr	r3, [r7, #20]
 8007462:	815a      	strh	r2, [r3, #10]
  }

  return HAL_OK;
 8007464:	2300      	movs	r3, #0
}
 8007466:	4618      	mov	r0, r3
 8007468:	371c      	adds	r7, #28
 800746a:	46bd      	mov	sp, r7
 800746c:	bc80      	pop	{r7}
 800746e:	4770      	bx	lr

08007470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b088      	sub	sp, #32
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d101      	bne.n	8007482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800747e:	2301      	movs	r3, #1
 8007480:	e31d      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007482:	4b94      	ldr	r3, [pc, #592]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007484:	689b      	ldr	r3, [r3, #8]
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800748c:	4b91      	ldr	r3, [pc, #580]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007494:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0301 	and.w	r3, r3, #1
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d07b      	beq.n	800759a <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 80074a2:	69bb      	ldr	r3, [r7, #24]
 80074a4:	2b08      	cmp	r3, #8
 80074a6:	d006      	beq.n	80074b6 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 80074a8:	69bb      	ldr	r3, [r7, #24]
 80074aa:	2b0c      	cmp	r3, #12
 80074ac:	d10f      	bne.n	80074ce <HAL_RCC_OscConfig+0x5e>
 80074ae:	697b      	ldr	r3, [r7, #20]
 80074b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80074b4:	d10b      	bne.n	80074ce <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074b6:	4b87      	ldr	r3, [pc, #540]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d06a      	beq.n	8007598 <HAL_RCC_OscConfig+0x128>
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	685b      	ldr	r3, [r3, #4]
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d166      	bne.n	8007598 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 80074ca:	2301      	movs	r3, #1
 80074cc:	e2f7      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2b01      	cmp	r3, #1
 80074d4:	d106      	bne.n	80074e4 <HAL_RCC_OscConfig+0x74>
 80074d6:	4b7f      	ldr	r3, [pc, #508]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	4a7e      	ldr	r2, [pc, #504]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80074dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80074e0:	6013      	str	r3, [r2, #0]
 80074e2:	e02d      	b.n	8007540 <HAL_RCC_OscConfig+0xd0>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	685b      	ldr	r3, [r3, #4]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d10c      	bne.n	8007506 <HAL_RCC_OscConfig+0x96>
 80074ec:	4b79      	ldr	r3, [pc, #484]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4a78      	ldr	r2, [pc, #480]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80074f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80074f6:	6013      	str	r3, [r2, #0]
 80074f8:	4b76      	ldr	r3, [pc, #472]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	4a75      	ldr	r2, [pc, #468]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80074fe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007502:	6013      	str	r3, [r2, #0]
 8007504:	e01c      	b.n	8007540 <HAL_RCC_OscConfig+0xd0>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	685b      	ldr	r3, [r3, #4]
 800750a:	2b05      	cmp	r3, #5
 800750c:	d10c      	bne.n	8007528 <HAL_RCC_OscConfig+0xb8>
 800750e:	4b71      	ldr	r3, [pc, #452]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a70      	ldr	r2, [pc, #448]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007514:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007518:	6013      	str	r3, [r2, #0]
 800751a:	4b6e      	ldr	r3, [pc, #440]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	4a6d      	ldr	r2, [pc, #436]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007520:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007524:	6013      	str	r3, [r2, #0]
 8007526:	e00b      	b.n	8007540 <HAL_RCC_OscConfig+0xd0>
 8007528:	4b6a      	ldr	r3, [pc, #424]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	4a69      	ldr	r2, [pc, #420]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800752e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007532:	6013      	str	r3, [r2, #0]
 8007534:	4b67      	ldr	r3, [pc, #412]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	4a66      	ldr	r2, [pc, #408]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800753a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800753e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	685b      	ldr	r3, [r3, #4]
 8007544:	2b00      	cmp	r3, #0
 8007546:	d013      	beq.n	8007570 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007548:	f7fd f83a 	bl	80045c0 <HAL_GetTick>
 800754c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800754e:	e008      	b.n	8007562 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007550:	f7fd f836 	bl	80045c0 <HAL_GetTick>
 8007554:	4602      	mov	r2, r0
 8007556:	693b      	ldr	r3, [r7, #16]
 8007558:	1ad3      	subs	r3, r2, r3
 800755a:	2b64      	cmp	r3, #100	; 0x64
 800755c:	d901      	bls.n	8007562 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 800755e:	2303      	movs	r3, #3
 8007560:	e2ad      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007562:	4b5c      	ldr	r3, [pc, #368]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	2b00      	cmp	r3, #0
 800756c:	d0f0      	beq.n	8007550 <HAL_RCC_OscConfig+0xe0>
 800756e:	e014      	b.n	800759a <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007570:	f7fd f826 	bl	80045c0 <HAL_GetTick>
 8007574:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8007576:	e008      	b.n	800758a <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007578:	f7fd f822 	bl	80045c0 <HAL_GetTick>
 800757c:	4602      	mov	r2, r0
 800757e:	693b      	ldr	r3, [r7, #16]
 8007580:	1ad3      	subs	r3, r2, r3
 8007582:	2b64      	cmp	r3, #100	; 0x64
 8007584:	d901      	bls.n	800758a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8007586:	2303      	movs	r3, #3
 8007588:	e299      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800758a:	4b52      	ldr	r3, [pc, #328]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007592:	2b00      	cmp	r3, #0
 8007594:	d1f0      	bne.n	8007578 <HAL_RCC_OscConfig+0x108>
 8007596:	e000      	b.n	800759a <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007598:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f003 0302 	and.w	r3, r3, #2
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d05a      	beq.n	800765c <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80075a6:	69bb      	ldr	r3, [r7, #24]
 80075a8:	2b04      	cmp	r3, #4
 80075aa:	d005      	beq.n	80075b8 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80075ac:	69bb      	ldr	r3, [r7, #24]
 80075ae:	2b0c      	cmp	r3, #12
 80075b0:	d119      	bne.n	80075e6 <HAL_RCC_OscConfig+0x176>
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	2b00      	cmp	r3, #0
 80075b6:	d116      	bne.n	80075e6 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075b8:	4b46      	ldr	r3, [pc, #280]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	f003 0302 	and.w	r3, r3, #2
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d005      	beq.n	80075d0 <HAL_RCC_OscConfig+0x160>
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	2b01      	cmp	r3, #1
 80075ca:	d001      	beq.n	80075d0 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 80075cc:	2301      	movs	r3, #1
 80075ce:	e276      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80075d0:	4b40      	ldr	r3, [pc, #256]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	021b      	lsls	r3, r3, #8
 80075de:	493d      	ldr	r1, [pc, #244]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80075e0:	4313      	orrs	r3, r2
 80075e2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80075e4:	e03a      	b.n	800765c <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	68db      	ldr	r3, [r3, #12]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d020      	beq.n	8007630 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80075ee:	4b3a      	ldr	r3, [pc, #232]	; (80076d8 <HAL_RCC_OscConfig+0x268>)
 80075f0:	2201      	movs	r2, #1
 80075f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80075f4:	f7fc ffe4 	bl	80045c0 <HAL_GetTick>
 80075f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80075fa:	e008      	b.n	800760e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075fc:	f7fc ffe0 	bl	80045c0 <HAL_GetTick>
 8007600:	4602      	mov	r2, r0
 8007602:	693b      	ldr	r3, [r7, #16]
 8007604:	1ad3      	subs	r3, r2, r3
 8007606:	2b02      	cmp	r3, #2
 8007608:	d901      	bls.n	800760e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800760a:	2303      	movs	r3, #3
 800760c:	e257      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800760e:	4b31      	ldr	r3, [pc, #196]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0302 	and.w	r3, r3, #2
 8007616:	2b00      	cmp	r3, #0
 8007618:	d0f0      	beq.n	80075fc <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800761a:	4b2e      	ldr	r3, [pc, #184]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	691b      	ldr	r3, [r3, #16]
 8007626:	021b      	lsls	r3, r3, #8
 8007628:	492a      	ldr	r1, [pc, #168]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800762a:	4313      	orrs	r3, r2
 800762c:	604b      	str	r3, [r1, #4]
 800762e:	e015      	b.n	800765c <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007630:	4b29      	ldr	r3, [pc, #164]	; (80076d8 <HAL_RCC_OscConfig+0x268>)
 8007632:	2200      	movs	r2, #0
 8007634:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007636:	f7fc ffc3 	bl	80045c0 <HAL_GetTick>
 800763a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800763c:	e008      	b.n	8007650 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800763e:	f7fc ffbf 	bl	80045c0 <HAL_GetTick>
 8007642:	4602      	mov	r2, r0
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	1ad3      	subs	r3, r2, r3
 8007648:	2b02      	cmp	r3, #2
 800764a:	d901      	bls.n	8007650 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800764c:	2303      	movs	r3, #3
 800764e:	e236      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8007650:	4b20      	ldr	r3, [pc, #128]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b00      	cmp	r3, #0
 800765a:	d1f0      	bne.n	800763e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f003 0310 	and.w	r3, r3, #16
 8007664:	2b00      	cmp	r3, #0
 8007666:	f000 80b8 	beq.w	80077da <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800766a:	69bb      	ldr	r3, [r7, #24]
 800766c:	2b00      	cmp	r3, #0
 800766e:	d170      	bne.n	8007752 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007670:	4b18      	ldr	r3, [pc, #96]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007678:	2b00      	cmp	r3, #0
 800767a:	d005      	beq.n	8007688 <HAL_RCC_OscConfig+0x218>
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	699b      	ldr	r3, [r3, #24]
 8007680:	2b00      	cmp	r3, #0
 8007682:	d101      	bne.n	8007688 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 8007684:	2301      	movs	r3, #1
 8007686:	e21a      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	6a1a      	ldr	r2, [r3, #32]
 800768c:	4b11      	ldr	r3, [pc, #68]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 800768e:	685b      	ldr	r3, [r3, #4]
 8007690:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8007694:	429a      	cmp	r2, r3
 8007696:	d921      	bls.n	80076dc <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	6a1b      	ldr	r3, [r3, #32]
 800769c:	4618      	mov	r0, r3
 800769e:	f000 fc27 	bl	8007ef0 <RCC_SetFlashLatencyFromMSIRange>
 80076a2:	4603      	mov	r3, r0
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d001      	beq.n	80076ac <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80076a8:	2301      	movs	r3, #1
 80076aa:	e208      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076ac:	4b09      	ldr	r3, [pc, #36]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	6a1b      	ldr	r3, [r3, #32]
 80076b8:	4906      	ldr	r1, [pc, #24]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80076ba:	4313      	orrs	r3, r2
 80076bc:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076be:	4b05      	ldr	r3, [pc, #20]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80076c6:	687b      	ldr	r3, [r7, #4]
 80076c8:	69db      	ldr	r3, [r3, #28]
 80076ca:	061b      	lsls	r3, r3, #24
 80076cc:	4901      	ldr	r1, [pc, #4]	; (80076d4 <HAL_RCC_OscConfig+0x264>)
 80076ce:	4313      	orrs	r3, r2
 80076d0:	604b      	str	r3, [r1, #4]
 80076d2:	e020      	b.n	8007716 <HAL_RCC_OscConfig+0x2a6>
 80076d4:	40023800 	.word	0x40023800
 80076d8:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80076dc:	4b99      	ldr	r3, [pc, #612]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	6a1b      	ldr	r3, [r3, #32]
 80076e8:	4996      	ldr	r1, [pc, #600]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80076ea:	4313      	orrs	r3, r2
 80076ec:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80076ee:	4b95      	ldr	r3, [pc, #596]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	69db      	ldr	r3, [r3, #28]
 80076fa:	061b      	lsls	r3, r3, #24
 80076fc:	4991      	ldr	r1, [pc, #580]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80076fe:	4313      	orrs	r3, r2
 8007700:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a1b      	ldr	r3, [r3, #32]
 8007706:	4618      	mov	r0, r3
 8007708:	f000 fbf2 	bl	8007ef0 <RCC_SetFlashLatencyFromMSIRange>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d001      	beq.n	8007716 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8007712:	2301      	movs	r3, #1
 8007714:	e1d3      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	6a1b      	ldr	r3, [r3, #32]
 800771a:	0b5b      	lsrs	r3, r3, #13
 800771c:	3301      	adds	r3, #1
 800771e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8007726:	4a87      	ldr	r2, [pc, #540]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007728:	6892      	ldr	r2, [r2, #8]
 800772a:	0912      	lsrs	r2, r2, #4
 800772c:	f002 020f 	and.w	r2, r2, #15
 8007730:	4985      	ldr	r1, [pc, #532]	; (8007948 <HAL_RCC_OscConfig+0x4d8>)
 8007732:	5c8a      	ldrb	r2, [r1, r2]
 8007734:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8007736:	4a85      	ldr	r2, [pc, #532]	; (800794c <HAL_RCC_OscConfig+0x4dc>)
 8007738:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800773a:	4b85      	ldr	r3, [pc, #532]	; (8007950 <HAL_RCC_OscConfig+0x4e0>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7fc fef2 	bl	8004528 <HAL_InitTick>
 8007744:	4603      	mov	r3, r0
 8007746:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8007748:	7bfb      	ldrb	r3, [r7, #15]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d045      	beq.n	80077da <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800774e:	7bfb      	ldrb	r3, [r7, #15]
 8007750:	e1b5      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	699b      	ldr	r3, [r3, #24]
 8007756:	2b00      	cmp	r3, #0
 8007758:	d029      	beq.n	80077ae <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800775a:	4b7e      	ldr	r3, [pc, #504]	; (8007954 <HAL_RCC_OscConfig+0x4e4>)
 800775c:	2201      	movs	r2, #1
 800775e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007760:	f7fc ff2e 	bl	80045c0 <HAL_GetTick>
 8007764:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007766:	e008      	b.n	800777a <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007768:	f7fc ff2a 	bl	80045c0 <HAL_GetTick>
 800776c:	4602      	mov	r2, r0
 800776e:	693b      	ldr	r3, [r7, #16]
 8007770:	1ad3      	subs	r3, r2, r3
 8007772:	2b02      	cmp	r3, #2
 8007774:	d901      	bls.n	800777a <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 8007776:	2303      	movs	r3, #3
 8007778:	e1a1      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800777a:	4b72      	ldr	r3, [pc, #456]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007782:	2b00      	cmp	r3, #0
 8007784:	d0f0      	beq.n	8007768 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007786:	4b6f      	ldr	r3, [pc, #444]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007788:	685b      	ldr	r3, [r3, #4]
 800778a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a1b      	ldr	r3, [r3, #32]
 8007792:	496c      	ldr	r1, [pc, #432]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007794:	4313      	orrs	r3, r2
 8007796:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007798:	4b6a      	ldr	r3, [pc, #424]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	69db      	ldr	r3, [r3, #28]
 80077a4:	061b      	lsls	r3, r3, #24
 80077a6:	4967      	ldr	r1, [pc, #412]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80077a8:	4313      	orrs	r3, r2
 80077aa:	604b      	str	r3, [r1, #4]
 80077ac:	e015      	b.n	80077da <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80077ae:	4b69      	ldr	r3, [pc, #420]	; (8007954 <HAL_RCC_OscConfig+0x4e4>)
 80077b0:	2200      	movs	r2, #0
 80077b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077b4:	f7fc ff04 	bl	80045c0 <HAL_GetTick>
 80077b8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80077ba:	e008      	b.n	80077ce <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80077bc:	f7fc ff00 	bl	80045c0 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	693b      	ldr	r3, [r7, #16]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	2b02      	cmp	r3, #2
 80077c8:	d901      	bls.n	80077ce <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 80077ca:	2303      	movs	r3, #3
 80077cc:	e177      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80077ce:	4b5d      	ldr	r3, [pc, #372]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d1f0      	bne.n	80077bc <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	f003 0308 	and.w	r3, r3, #8
 80077e2:	2b00      	cmp	r3, #0
 80077e4:	d030      	beq.n	8007848 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	695b      	ldr	r3, [r3, #20]
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d016      	beq.n	800781c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80077ee:	4b5a      	ldr	r3, [pc, #360]	; (8007958 <HAL_RCC_OscConfig+0x4e8>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80077f4:	f7fc fee4 	bl	80045c0 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80077fc:	f7fc fee0 	bl	80045c0 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e157      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800780e:	4b4d      	ldr	r3, [pc, #308]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007810:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007812:	f003 0302 	and.w	r3, r3, #2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f0      	beq.n	80077fc <HAL_RCC_OscConfig+0x38c>
 800781a:	e015      	b.n	8007848 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800781c:	4b4e      	ldr	r3, [pc, #312]	; (8007958 <HAL_RCC_OscConfig+0x4e8>)
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007822:	f7fc fecd 	bl	80045c0 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800782a:	f7fc fec9 	bl	80045c0 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e140      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800783c:	4b41      	ldr	r3, [pc, #260]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800783e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007840:	f003 0302 	and.w	r3, r3, #2
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f0      	bne.n	800782a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f003 0304 	and.w	r3, r3, #4
 8007850:	2b00      	cmp	r3, #0
 8007852:	f000 80b5 	beq.w	80079c0 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007856:	2300      	movs	r3, #0
 8007858:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800785a:	4b3a      	ldr	r3, [pc, #232]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007862:	2b00      	cmp	r3, #0
 8007864:	d10d      	bne.n	8007882 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007866:	4b37      	ldr	r3, [pc, #220]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007868:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800786a:	4a36      	ldr	r2, [pc, #216]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800786c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007870:	6253      	str	r3, [r2, #36]	; 0x24
 8007872:	4b34      	ldr	r3, [pc, #208]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800787a:	60bb      	str	r3, [r7, #8]
 800787c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800787e:	2301      	movs	r3, #1
 8007880:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007882:	4b36      	ldr	r3, [pc, #216]	; (800795c <HAL_RCC_OscConfig+0x4ec>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800788a:	2b00      	cmp	r3, #0
 800788c:	d118      	bne.n	80078c0 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800788e:	4b33      	ldr	r3, [pc, #204]	; (800795c <HAL_RCC_OscConfig+0x4ec>)
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	4a32      	ldr	r2, [pc, #200]	; (800795c <HAL_RCC_OscConfig+0x4ec>)
 8007894:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800789a:	f7fc fe91 	bl	80045c0 <HAL_GetTick>
 800789e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078a0:	e008      	b.n	80078b4 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078a2:	f7fc fe8d 	bl	80045c0 <HAL_GetTick>
 80078a6:	4602      	mov	r2, r0
 80078a8:	693b      	ldr	r3, [r7, #16]
 80078aa:	1ad3      	subs	r3, r2, r3
 80078ac:	2b64      	cmp	r3, #100	; 0x64
 80078ae:	d901      	bls.n	80078b4 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 80078b0:	2303      	movs	r3, #3
 80078b2:	e104      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80078b4:	4b29      	ldr	r3, [pc, #164]	; (800795c <HAL_RCC_OscConfig+0x4ec>)
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d0f0      	beq.n	80078a2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	2b01      	cmp	r3, #1
 80078c6:	d106      	bne.n	80078d6 <HAL_RCC_OscConfig+0x466>
 80078c8:	4b1e      	ldr	r3, [pc, #120]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80078ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078cc:	4a1d      	ldr	r2, [pc, #116]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80078ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078d2:	6353      	str	r3, [r2, #52]	; 0x34
 80078d4:	e02d      	b.n	8007932 <HAL_RCC_OscConfig+0x4c2>
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	689b      	ldr	r3, [r3, #8]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10c      	bne.n	80078f8 <HAL_RCC_OscConfig+0x488>
 80078de:	4b19      	ldr	r3, [pc, #100]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80078e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078e2:	4a18      	ldr	r2, [pc, #96]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80078e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80078e8:	6353      	str	r3, [r2, #52]	; 0x34
 80078ea:	4b16      	ldr	r3, [pc, #88]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80078ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80078ee:	4a15      	ldr	r2, [pc, #84]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 80078f0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80078f4:	6353      	str	r3, [r2, #52]	; 0x34
 80078f6:	e01c      	b.n	8007932 <HAL_RCC_OscConfig+0x4c2>
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	689b      	ldr	r3, [r3, #8]
 80078fc:	2b05      	cmp	r3, #5
 80078fe:	d10c      	bne.n	800791a <HAL_RCC_OscConfig+0x4aa>
 8007900:	4b10      	ldr	r3, [pc, #64]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007904:	4a0f      	ldr	r2, [pc, #60]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007906:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800790a:	6353      	str	r3, [r2, #52]	; 0x34
 800790c:	4b0d      	ldr	r3, [pc, #52]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800790e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007910:	4a0c      	ldr	r2, [pc, #48]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007912:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007916:	6353      	str	r3, [r2, #52]	; 0x34
 8007918:	e00b      	b.n	8007932 <HAL_RCC_OscConfig+0x4c2>
 800791a:	4b0a      	ldr	r3, [pc, #40]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800791c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800791e:	4a09      	ldr	r2, [pc, #36]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007920:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007924:	6353      	str	r3, [r2, #52]	; 0x34
 8007926:	4b07      	ldr	r3, [pc, #28]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 8007928:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792a:	4a06      	ldr	r2, [pc, #24]	; (8007944 <HAL_RCC_OscConfig+0x4d4>)
 800792c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007930:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	689b      	ldr	r3, [r3, #8]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d024      	beq.n	8007984 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800793a:	f7fc fe41 	bl	80045c0 <HAL_GetTick>
 800793e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007940:	e019      	b.n	8007976 <HAL_RCC_OscConfig+0x506>
 8007942:	bf00      	nop
 8007944:	40023800 	.word	0x40023800
 8007948:	08012560 	.word	0x08012560
 800794c:	20000084 	.word	0x20000084
 8007950:	20000088 	.word	0x20000088
 8007954:	42470020 	.word	0x42470020
 8007958:	42470680 	.word	0x42470680
 800795c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007960:	f7fc fe2e 	bl	80045c0 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	693b      	ldr	r3, [r7, #16]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	f241 3288 	movw	r2, #5000	; 0x1388
 800796e:	4293      	cmp	r3, r2
 8007970:	d901      	bls.n	8007976 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 8007972:	2303      	movs	r3, #3
 8007974:	e0a3      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8007976:	4b54      	ldr	r3, [pc, #336]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 8007978:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800797a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0ee      	beq.n	8007960 <HAL_RCC_OscConfig+0x4f0>
 8007982:	e014      	b.n	80079ae <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007984:	f7fc fe1c 	bl	80045c0 <HAL_GetTick>
 8007988:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800798a:	e00a      	b.n	80079a2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800798c:	f7fc fe18 	bl	80045c0 <HAL_GetTick>
 8007990:	4602      	mov	r2, r0
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	1ad3      	subs	r3, r2, r3
 8007996:	f241 3288 	movw	r2, #5000	; 0x1388
 800799a:	4293      	cmp	r3, r2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e08d      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80079a2:	4b49      	ldr	r3, [pc, #292]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 80079a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079a6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1ee      	bne.n	800798c <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80079ae:	7ffb      	ldrb	r3, [r7, #31]
 80079b0:	2b01      	cmp	r3, #1
 80079b2:	d105      	bne.n	80079c0 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079b4:	4b44      	ldr	r3, [pc, #272]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 80079b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079b8:	4a43      	ldr	r2, [pc, #268]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 80079ba:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079be:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079c4:	2b00      	cmp	r3, #0
 80079c6:	d079      	beq.n	8007abc <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80079c8:	69bb      	ldr	r3, [r7, #24]
 80079ca:	2b0c      	cmp	r3, #12
 80079cc:	d056      	beq.n	8007a7c <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079d2:	2b02      	cmp	r3, #2
 80079d4:	d13b      	bne.n	8007a4e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80079d6:	4b3d      	ldr	r3, [pc, #244]	; (8007acc <HAL_RCC_OscConfig+0x65c>)
 80079d8:	2200      	movs	r2, #0
 80079da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80079dc:	f7fc fdf0 	bl	80045c0 <HAL_GetTick>
 80079e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079e2:	e008      	b.n	80079f6 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80079e4:	f7fc fdec 	bl	80045c0 <HAL_GetTick>
 80079e8:	4602      	mov	r2, r0
 80079ea:	693b      	ldr	r3, [r7, #16]
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	2b02      	cmp	r3, #2
 80079f0:	d901      	bls.n	80079f6 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80079f2:	2303      	movs	r3, #3
 80079f4:	e063      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80079f6:	4b34      	ldr	r3, [pc, #208]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1f0      	bne.n	80079e4 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007a02:	4b31      	ldr	r3, [pc, #196]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 8007a04:	689b      	ldr	r3, [r3, #8]
 8007a06:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a12:	4319      	orrs	r1, r3
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a18:	430b      	orrs	r3, r1
 8007a1a:	492b      	ldr	r1, [pc, #172]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 8007a1c:	4313      	orrs	r3, r2
 8007a1e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007a20:	4b2a      	ldr	r3, [pc, #168]	; (8007acc <HAL_RCC_OscConfig+0x65c>)
 8007a22:	2201      	movs	r2, #1
 8007a24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a26:	f7fc fdcb 	bl	80045c0 <HAL_GetTick>
 8007a2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a2c:	e008      	b.n	8007a40 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a2e:	f7fc fdc7 	bl	80045c0 <HAL_GetTick>
 8007a32:	4602      	mov	r2, r0
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	1ad3      	subs	r3, r2, r3
 8007a38:	2b02      	cmp	r3, #2
 8007a3a:	d901      	bls.n	8007a40 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8007a3c:	2303      	movs	r3, #3
 8007a3e:	e03e      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007a40:	4b21      	ldr	r3, [pc, #132]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a48:	2b00      	cmp	r3, #0
 8007a4a:	d0f0      	beq.n	8007a2e <HAL_RCC_OscConfig+0x5be>
 8007a4c:	e036      	b.n	8007abc <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007a4e:	4b1f      	ldr	r3, [pc, #124]	; (8007acc <HAL_RCC_OscConfig+0x65c>)
 8007a50:	2200      	movs	r2, #0
 8007a52:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a54:	f7fc fdb4 	bl	80045c0 <HAL_GetTick>
 8007a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a5a:	e008      	b.n	8007a6e <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007a5c:	f7fc fdb0 	bl	80045c0 <HAL_GetTick>
 8007a60:	4602      	mov	r2, r0
 8007a62:	693b      	ldr	r3, [r7, #16]
 8007a64:	1ad3      	subs	r3, r2, r3
 8007a66:	2b02      	cmp	r3, #2
 8007a68:	d901      	bls.n	8007a6e <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8007a6a:	2303      	movs	r3, #3
 8007a6c:	e027      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8007a6e:	4b16      	ldr	r3, [pc, #88]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d1f0      	bne.n	8007a5c <HAL_RCC_OscConfig+0x5ec>
 8007a7a:	e01f      	b.n	8007abc <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	d101      	bne.n	8007a88 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e01a      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8007a88:	4b0f      	ldr	r3, [pc, #60]	; (8007ac8 <HAL_RCC_OscConfig+0x658>)
 8007a8a:	689b      	ldr	r3, [r3, #8]
 8007a8c:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007a8e:	697b      	ldr	r3, [r7, #20]
 8007a90:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a98:	429a      	cmp	r2, r3
 8007a9a:	d10d      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007a9c:	697b      	ldr	r3, [r7, #20]
 8007a9e:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007aa6:	429a      	cmp	r2, r3
 8007aa8:	d106      	bne.n	8007ab8 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8007aaa:	697b      	ldr	r3, [r7, #20]
 8007aac:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	d001      	beq.n	8007abc <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8007ab8:	2301      	movs	r3, #1
 8007aba:	e000      	b.n	8007abe <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8007abc:	2300      	movs	r3, #0
}
 8007abe:	4618      	mov	r0, r3
 8007ac0:	3720      	adds	r7, #32
 8007ac2:	46bd      	mov	sp, r7
 8007ac4:	bd80      	pop	{r7, pc}
 8007ac6:	bf00      	nop
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	42470060 	.word	0x42470060

08007ad0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d101      	bne.n	8007ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007ae0:	2301      	movs	r3, #1
 8007ae2:	e11a      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007ae4:	4b8f      	ldr	r3, [pc, #572]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	f003 0301 	and.w	r3, r3, #1
 8007aec:	683a      	ldr	r2, [r7, #0]
 8007aee:	429a      	cmp	r2, r3
 8007af0:	d919      	bls.n	8007b26 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d105      	bne.n	8007b04 <HAL_RCC_ClockConfig+0x34>
 8007af8:	4b8a      	ldr	r3, [pc, #552]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a89      	ldr	r2, [pc, #548]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007afe:	f043 0304 	orr.w	r3, r3, #4
 8007b02:	6013      	str	r3, [r2, #0]
 8007b04:	4b87      	ldr	r3, [pc, #540]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	f023 0201 	bic.w	r2, r3, #1
 8007b0c:	4985      	ldr	r1, [pc, #532]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007b0e:	683b      	ldr	r3, [r7, #0]
 8007b10:	4313      	orrs	r3, r2
 8007b12:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007b14:	4b83      	ldr	r3, [pc, #524]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	f003 0301 	and.w	r3, r3, #1
 8007b1c:	683a      	ldr	r2, [r7, #0]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d001      	beq.n	8007b26 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8007b22:	2301      	movs	r3, #1
 8007b24:	e0f9      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d008      	beq.n	8007b44 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007b32:	4b7d      	ldr	r3, [pc, #500]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007b34:	689b      	ldr	r3, [r3, #8]
 8007b36:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	497a      	ldr	r1, [pc, #488]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f003 0301 	and.w	r3, r3, #1
 8007b4c:	2b00      	cmp	r3, #0
 8007b4e:	f000 808e 	beq.w	8007c6e <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	685b      	ldr	r3, [r3, #4]
 8007b56:	2b02      	cmp	r3, #2
 8007b58:	d107      	bne.n	8007b6a <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8007b5a:	4b73      	ldr	r3, [pc, #460]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d121      	bne.n	8007baa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007b66:	2301      	movs	r3, #1
 8007b68:	e0d7      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	685b      	ldr	r3, [r3, #4]
 8007b6e:	2b03      	cmp	r3, #3
 8007b70:	d107      	bne.n	8007b82 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8007b72:	4b6d      	ldr	r3, [pc, #436]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b7a:	2b00      	cmp	r3, #0
 8007b7c:	d115      	bne.n	8007baa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007b7e:	2301      	movs	r3, #1
 8007b80:	e0cb      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	685b      	ldr	r3, [r3, #4]
 8007b86:	2b01      	cmp	r3, #1
 8007b88:	d107      	bne.n	8007b9a <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8007b8a:	4b67      	ldr	r3, [pc, #412]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	f003 0302 	and.w	r3, r3, #2
 8007b92:	2b00      	cmp	r3, #0
 8007b94:	d109      	bne.n	8007baa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007b96:	2301      	movs	r3, #1
 8007b98:	e0bf      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8007b9a:	4b63      	ldr	r3, [pc, #396]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d101      	bne.n	8007baa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8007ba6:	2301      	movs	r3, #1
 8007ba8:	e0b7      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007baa:	4b5f      	ldr	r3, [pc, #380]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f023 0203 	bic.w	r2, r3, #3
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	685b      	ldr	r3, [r3, #4]
 8007bb6:	495c      	ldr	r1, [pc, #368]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007bb8:	4313      	orrs	r3, r2
 8007bba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007bbc:	f7fc fd00 	bl	80045c0 <HAL_GetTick>
 8007bc0:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	685b      	ldr	r3, [r3, #4]
 8007bc6:	2b02      	cmp	r3, #2
 8007bc8:	d112      	bne.n	8007bf0 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007bca:	e00a      	b.n	8007be2 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bcc:	f7fc fcf8 	bl	80045c0 <HAL_GetTick>
 8007bd0:	4602      	mov	r2, r0
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	1ad3      	subs	r3, r2, r3
 8007bd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d901      	bls.n	8007be2 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 8007bde:	2303      	movs	r3, #3
 8007be0:	e09b      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8007be2:	4b51      	ldr	r3, [pc, #324]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007be4:	689b      	ldr	r3, [r3, #8]
 8007be6:	f003 030c 	and.w	r3, r3, #12
 8007bea:	2b08      	cmp	r3, #8
 8007bec:	d1ee      	bne.n	8007bcc <HAL_RCC_ClockConfig+0xfc>
 8007bee:	e03e      	b.n	8007c6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	685b      	ldr	r3, [r3, #4]
 8007bf4:	2b03      	cmp	r3, #3
 8007bf6:	d112      	bne.n	8007c1e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007bf8:	e00a      	b.n	8007c10 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007bfa:	f7fc fce1 	bl	80045c0 <HAL_GetTick>
 8007bfe:	4602      	mov	r2, r0
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	1ad3      	subs	r3, r2, r3
 8007c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c08:	4293      	cmp	r3, r2
 8007c0a:	d901      	bls.n	8007c10 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 8007c0c:	2303      	movs	r3, #3
 8007c0e:	e084      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8007c10:	4b45      	ldr	r3, [pc, #276]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007c12:	689b      	ldr	r3, [r3, #8]
 8007c14:	f003 030c 	and.w	r3, r3, #12
 8007c18:	2b0c      	cmp	r3, #12
 8007c1a:	d1ee      	bne.n	8007bfa <HAL_RCC_ClockConfig+0x12a>
 8007c1c:	e027      	b.n	8007c6e <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	2b01      	cmp	r3, #1
 8007c24:	d11d      	bne.n	8007c62 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c26:	e00a      	b.n	8007c3e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c28:	f7fc fcca 	bl	80045c0 <HAL_GetTick>
 8007c2c:	4602      	mov	r2, r0
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	1ad3      	subs	r3, r2, r3
 8007c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d901      	bls.n	8007c3e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8007c3a:	2303      	movs	r3, #3
 8007c3c:	e06d      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8007c3e:	4b3a      	ldr	r3, [pc, #232]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007c40:	689b      	ldr	r3, [r3, #8]
 8007c42:	f003 030c 	and.w	r3, r3, #12
 8007c46:	2b04      	cmp	r3, #4
 8007c48:	d1ee      	bne.n	8007c28 <HAL_RCC_ClockConfig+0x158>
 8007c4a:	e010      	b.n	8007c6e <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007c4c:	f7fc fcb8 	bl	80045c0 <HAL_GetTick>
 8007c50:	4602      	mov	r2, r0
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	1ad3      	subs	r3, r2, r3
 8007c56:	f241 3288 	movw	r2, #5000	; 0x1388
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d901      	bls.n	8007c62 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8007c5e:	2303      	movs	r3, #3
 8007c60:	e05b      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8007c62:	4b31      	ldr	r3, [pc, #196]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007c64:	689b      	ldr	r3, [r3, #8]
 8007c66:	f003 030c 	and.w	r3, r3, #12
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d1ee      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007c6e:	4b2d      	ldr	r3, [pc, #180]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007c70:	681b      	ldr	r3, [r3, #0]
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	683a      	ldr	r2, [r7, #0]
 8007c78:	429a      	cmp	r2, r3
 8007c7a:	d219      	bcs.n	8007cb0 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c7c:	683b      	ldr	r3, [r7, #0]
 8007c7e:	2b01      	cmp	r3, #1
 8007c80:	d105      	bne.n	8007c8e <HAL_RCC_ClockConfig+0x1be>
 8007c82:	4b28      	ldr	r3, [pc, #160]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	4a27      	ldr	r2, [pc, #156]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007c88:	f043 0304 	orr.w	r3, r3, #4
 8007c8c:	6013      	str	r3, [r2, #0]
 8007c8e:	4b25      	ldr	r3, [pc, #148]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f023 0201 	bic.w	r2, r3, #1
 8007c96:	4923      	ldr	r1, [pc, #140]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007c98:	683b      	ldr	r3, [r7, #0]
 8007c9a:	4313      	orrs	r3, r2
 8007c9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c9e:	4b21      	ldr	r3, [pc, #132]	; (8007d24 <HAL_RCC_ClockConfig+0x254>)
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	683a      	ldr	r2, [r7, #0]
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d001      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e034      	b.n	8007d1a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0304 	and.w	r3, r3, #4
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d008      	beq.n	8007cce <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007cbc:	4b1a      	ldr	r3, [pc, #104]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	68db      	ldr	r3, [r3, #12]
 8007cc8:	4917      	ldr	r1, [pc, #92]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007cca:	4313      	orrs	r3, r2
 8007ccc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681b      	ldr	r3, [r3, #0]
 8007cd2:	f003 0308 	and.w	r3, r3, #8
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d009      	beq.n	8007cee <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007cda:	4b13      	ldr	r3, [pc, #76]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007cdc:	689b      	ldr	r3, [r3, #8]
 8007cde:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	691b      	ldr	r3, [r3, #16]
 8007ce6:	00db      	lsls	r3, r3, #3
 8007ce8:	490f      	ldr	r1, [pc, #60]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007cea:	4313      	orrs	r3, r2
 8007cec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007cee:	f000 f823 	bl	8007d38 <HAL_RCC_GetSysClockFreq>
 8007cf2:	4602      	mov	r2, r0
 8007cf4:	4b0c      	ldr	r3, [pc, #48]	; (8007d28 <HAL_RCC_ClockConfig+0x258>)
 8007cf6:	689b      	ldr	r3, [r3, #8]
 8007cf8:	091b      	lsrs	r3, r3, #4
 8007cfa:	f003 030f 	and.w	r3, r3, #15
 8007cfe:	490b      	ldr	r1, [pc, #44]	; (8007d2c <HAL_RCC_ClockConfig+0x25c>)
 8007d00:	5ccb      	ldrb	r3, [r1, r3]
 8007d02:	fa22 f303 	lsr.w	r3, r2, r3
 8007d06:	4a0a      	ldr	r2, [pc, #40]	; (8007d30 <HAL_RCC_ClockConfig+0x260>)
 8007d08:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007d0a:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <HAL_RCC_ClockConfig+0x264>)
 8007d0c:	681b      	ldr	r3, [r3, #0]
 8007d0e:	4618      	mov	r0, r3
 8007d10:	f7fc fc0a 	bl	8004528 <HAL_InitTick>
 8007d14:	4603      	mov	r3, r0
 8007d16:	72fb      	strb	r3, [r7, #11]

  return status;
 8007d18:	7afb      	ldrb	r3, [r7, #11]
}
 8007d1a:	4618      	mov	r0, r3
 8007d1c:	3710      	adds	r7, #16
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	bd80      	pop	{r7, pc}
 8007d22:	bf00      	nop
 8007d24:	40023c00 	.word	0x40023c00
 8007d28:	40023800 	.word	0x40023800
 8007d2c:	08012560 	.word	0x08012560
 8007d30:	20000084 	.word	0x20000084
 8007d34:	20000088 	.word	0x20000088

08007d38 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007d38:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007d3c:	b08e      	sub	sp, #56	; 0x38
 8007d3e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8007d40:	4b58      	ldr	r3, [pc, #352]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8007d46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d48:	f003 030c 	and.w	r3, r3, #12
 8007d4c:	2b0c      	cmp	r3, #12
 8007d4e:	d00d      	beq.n	8007d6c <HAL_RCC_GetSysClockFreq+0x34>
 8007d50:	2b0c      	cmp	r3, #12
 8007d52:	f200 8092 	bhi.w	8007e7a <HAL_RCC_GetSysClockFreq+0x142>
 8007d56:	2b04      	cmp	r3, #4
 8007d58:	d002      	beq.n	8007d60 <HAL_RCC_GetSysClockFreq+0x28>
 8007d5a:	2b08      	cmp	r3, #8
 8007d5c:	d003      	beq.n	8007d66 <HAL_RCC_GetSysClockFreq+0x2e>
 8007d5e:	e08c      	b.n	8007e7a <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007d60:	4b51      	ldr	r3, [pc, #324]	; (8007ea8 <HAL_RCC_GetSysClockFreq+0x170>)
 8007d62:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007d64:	e097      	b.n	8007e96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8007d66:	4b51      	ldr	r3, [pc, #324]	; (8007eac <HAL_RCC_GetSysClockFreq+0x174>)
 8007d68:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007d6a:	e094      	b.n	8007e96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8007d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d6e:	0c9b      	lsrs	r3, r3, #18
 8007d70:	f003 020f 	and.w	r2, r3, #15
 8007d74:	4b4e      	ldr	r3, [pc, #312]	; (8007eb0 <HAL_RCC_GetSysClockFreq+0x178>)
 8007d76:	5c9b      	ldrb	r3, [r3, r2]
 8007d78:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8007d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007d7c:	0d9b      	lsrs	r3, r3, #22
 8007d7e:	f003 0303 	and.w	r3, r3, #3
 8007d82:	3301      	adds	r3, #1
 8007d84:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007d86:	4b47      	ldr	r3, [pc, #284]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007d88:	689b      	ldr	r3, [r3, #8]
 8007d8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d021      	beq.n	8007dd6 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d94:	2200      	movs	r2, #0
 8007d96:	61bb      	str	r3, [r7, #24]
 8007d98:	61fa      	str	r2, [r7, #28]
 8007d9a:	4b44      	ldr	r3, [pc, #272]	; (8007eac <HAL_RCC_GetSysClockFreq+0x174>)
 8007d9c:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8007da0:	464a      	mov	r2, r9
 8007da2:	fb03 f202 	mul.w	r2, r3, r2
 8007da6:	2300      	movs	r3, #0
 8007da8:	4644      	mov	r4, r8
 8007daa:	fb04 f303 	mul.w	r3, r4, r3
 8007dae:	4413      	add	r3, r2
 8007db0:	4a3e      	ldr	r2, [pc, #248]	; (8007eac <HAL_RCC_GetSysClockFreq+0x174>)
 8007db2:	4644      	mov	r4, r8
 8007db4:	fba4 0102 	umull	r0, r1, r4, r2
 8007db8:	440b      	add	r3, r1
 8007dba:	4619      	mov	r1, r3
 8007dbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007dbe:	2200      	movs	r2, #0
 8007dc0:	613b      	str	r3, [r7, #16]
 8007dc2:	617a      	str	r2, [r7, #20]
 8007dc4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007dc8:	f7f9 f856 	bl	8000e78 <__aeabi_uldivmod>
 8007dcc:	4602      	mov	r2, r0
 8007dce:	460b      	mov	r3, r1
 8007dd0:	4613      	mov	r3, r2
 8007dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8007dd4:	e04e      	b.n	8007e74 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8007dd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd8:	2200      	movs	r2, #0
 8007dda:	469a      	mov	sl, r3
 8007ddc:	4693      	mov	fp, r2
 8007dde:	4652      	mov	r2, sl
 8007de0:	465b      	mov	r3, fp
 8007de2:	f04f 0000 	mov.w	r0, #0
 8007de6:	f04f 0100 	mov.w	r1, #0
 8007dea:	0159      	lsls	r1, r3, #5
 8007dec:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007df0:	0150      	lsls	r0, r2, #5
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	ebb2 080a 	subs.w	r8, r2, sl
 8007dfa:	eb63 090b 	sbc.w	r9, r3, fp
 8007dfe:	f04f 0200 	mov.w	r2, #0
 8007e02:	f04f 0300 	mov.w	r3, #0
 8007e06:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007e0a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007e0e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007e12:	ebb2 0408 	subs.w	r4, r2, r8
 8007e16:	eb63 0509 	sbc.w	r5, r3, r9
 8007e1a:	f04f 0200 	mov.w	r2, #0
 8007e1e:	f04f 0300 	mov.w	r3, #0
 8007e22:	00eb      	lsls	r3, r5, #3
 8007e24:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e28:	00e2      	lsls	r2, r4, #3
 8007e2a:	4614      	mov	r4, r2
 8007e2c:	461d      	mov	r5, r3
 8007e2e:	eb14 030a 	adds.w	r3, r4, sl
 8007e32:	603b      	str	r3, [r7, #0]
 8007e34:	eb45 030b 	adc.w	r3, r5, fp
 8007e38:	607b      	str	r3, [r7, #4]
 8007e3a:	f04f 0200 	mov.w	r2, #0
 8007e3e:	f04f 0300 	mov.w	r3, #0
 8007e42:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007e46:	4629      	mov	r1, r5
 8007e48:	028b      	lsls	r3, r1, #10
 8007e4a:	4620      	mov	r0, r4
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4604      	mov	r4, r0
 8007e50:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 8007e54:	4601      	mov	r1, r0
 8007e56:	028a      	lsls	r2, r1, #10
 8007e58:	4610      	mov	r0, r2
 8007e5a:	4619      	mov	r1, r3
 8007e5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e5e:	2200      	movs	r2, #0
 8007e60:	60bb      	str	r3, [r7, #8]
 8007e62:	60fa      	str	r2, [r7, #12]
 8007e64:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007e68:	f7f9 f806 	bl	8000e78 <__aeabi_uldivmod>
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	4613      	mov	r3, r2
 8007e72:	637b      	str	r3, [r7, #52]	; 0x34
      }
      sysclockfreq = pllvco;
 8007e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e76:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007e78:	e00d      	b.n	8007e96 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8007e7a:	4b0a      	ldr	r3, [pc, #40]	; (8007ea4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8007e7c:	685b      	ldr	r3, [r3, #4]
 8007e7e:	0b5b      	lsrs	r3, r3, #13
 8007e80:	f003 0307 	and.w	r3, r3, #7
 8007e84:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8007e86:	6a3b      	ldr	r3, [r7, #32]
 8007e88:	3301      	adds	r3, #1
 8007e8a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8007e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e92:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8007e94:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8007e98:	4618      	mov	r0, r3
 8007e9a:	3738      	adds	r7, #56	; 0x38
 8007e9c:	46bd      	mov	sp, r7
 8007e9e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ea2:	bf00      	nop
 8007ea4:	40023800 	.word	0x40023800
 8007ea8:	00f42400 	.word	0x00f42400
 8007eac:	016e3600 	.word	0x016e3600
 8007eb0:	08012554 	.word	0x08012554

08007eb4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007eb4:	b480      	push	{r7}
 8007eb6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007eb8:	4b02      	ldr	r3, [pc, #8]	; (8007ec4 <HAL_RCC_GetHCLKFreq+0x10>)
 8007eba:	681b      	ldr	r3, [r3, #0]
}
 8007ebc:	4618      	mov	r0, r3
 8007ebe:	46bd      	mov	sp, r7
 8007ec0:	bc80      	pop	{r7}
 8007ec2:	4770      	bx	lr
 8007ec4:	20000084 	.word	0x20000084

08007ec8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ec8:	b580      	push	{r7, lr}
 8007eca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8007ecc:	f7ff fff2 	bl	8007eb4 <HAL_RCC_GetHCLKFreq>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	4b05      	ldr	r3, [pc, #20]	; (8007ee8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ed4:	689b      	ldr	r3, [r3, #8]
 8007ed6:	0a1b      	lsrs	r3, r3, #8
 8007ed8:	f003 0307 	and.w	r3, r3, #7
 8007edc:	4903      	ldr	r1, [pc, #12]	; (8007eec <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ede:	5ccb      	ldrb	r3, [r1, r3]
 8007ee0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ee4:	4618      	mov	r0, r3
 8007ee6:	bd80      	pop	{r7, pc}
 8007ee8:	40023800 	.word	0x40023800
 8007eec:	08012570 	.word	0x08012570

08007ef0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	b087      	sub	sp, #28
 8007ef4:	af00      	add	r7, sp, #0
 8007ef6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007ef8:	2300      	movs	r3, #0
 8007efa:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8007efc:	4b29      	ldr	r3, [pc, #164]	; (8007fa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007efe:	689b      	ldr	r3, [r3, #8]
 8007f00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d12c      	bne.n	8007f62 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007f08:	4b26      	ldr	r3, [pc, #152]	; (8007fa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d005      	beq.n	8007f20 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007f14:	4b24      	ldr	r3, [pc, #144]	; (8007fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007f1c:	617b      	str	r3, [r7, #20]
 8007f1e:	e016      	b.n	8007f4e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007f20:	4b20      	ldr	r3, [pc, #128]	; (8007fa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007f22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f24:	4a1f      	ldr	r2, [pc, #124]	; (8007fa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007f2a:	6253      	str	r3, [r2, #36]	; 0x24
 8007f2c:	4b1d      	ldr	r3, [pc, #116]	; (8007fa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f34:	60fb      	str	r3, [r7, #12]
 8007f36:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8007f38:	4b1b      	ldr	r3, [pc, #108]	; (8007fa8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8007f40:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8007f42:	4b18      	ldr	r3, [pc, #96]	; (8007fa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f46:	4a17      	ldr	r2, [pc, #92]	; (8007fa4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8007f48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007f4c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8007f4e:	697b      	ldr	r3, [r7, #20]
 8007f50:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8007f54:	d105      	bne.n	8007f62 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007f5c:	d101      	bne.n	8007f62 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8007f5e:	2301      	movs	r3, #1
 8007f60:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	2b01      	cmp	r3, #1
 8007f66:	d105      	bne.n	8007f74 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8007f68:	4b10      	ldr	r3, [pc, #64]	; (8007fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	4a0f      	ldr	r2, [pc, #60]	; (8007fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f6e:	f043 0304 	orr.w	r3, r3, #4
 8007f72:	6013      	str	r3, [r2, #0]
 8007f74:	4b0d      	ldr	r3, [pc, #52]	; (8007fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	f023 0201 	bic.w	r2, r3, #1
 8007f7c:	490b      	ldr	r1, [pc, #44]	; (8007fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	4313      	orrs	r3, r2
 8007f82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8007f84:	4b09      	ldr	r3, [pc, #36]	; (8007fac <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	f003 0301 	and.w	r3, r3, #1
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	429a      	cmp	r2, r3
 8007f90:	d001      	beq.n	8007f96 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8007f92:	2301      	movs	r3, #1
 8007f94:	e000      	b.n	8007f98 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8007f96:	2300      	movs	r3, #0
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	bc80      	pop	{r7}
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	40023800 	.word	0x40023800
 8007fa8:	40007000 	.word	0x40007000
 8007fac:	40023c00 	.word	0x40023c00

08007fb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b082      	sub	sp, #8
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8007fbe:	2301      	movs	r3, #1
 8007fc0:	e06e      	b.n	80080a0 <HAL_SPI_Init+0xf0>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	d108      	bne.n	8007fdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	685b      	ldr	r3, [r3, #4]
 8007fce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007fd2:	d009      	beq.n	8007fe8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2200      	movs	r2, #0
 8007fd8:	61da      	str	r2, [r3, #28]
 8007fda:	e005      	b.n	8007fe8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2200      	movs	r2, #0
 8007fe0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2200      	movs	r2, #0
 8007fe6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	2200      	movs	r2, #0
 8007fec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8007ff4:	b2db      	uxtb	r3, r3
 8007ff6:	2b00      	cmp	r3, #0
 8007ff8:	d106      	bne.n	8008008 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8008002:	6878      	ldr	r0, [r7, #4]
 8008004:	f7fb ffa0 	bl	8003f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	2202      	movs	r2, #2
 800800c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	681a      	ldr	r2, [r3, #0]
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800801e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	685b      	ldr	r3, [r3, #4]
 8008024:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8008030:	431a      	orrs	r2, r3
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800803a:	431a      	orrs	r2, r3
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	691b      	ldr	r3, [r3, #16]
 8008040:	f003 0302 	and.w	r3, r3, #2
 8008044:	431a      	orrs	r2, r3
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	f003 0301 	and.w	r3, r3, #1
 800804e:	431a      	orrs	r2, r3
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	699b      	ldr	r3, [r3, #24]
 8008054:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008058:	431a      	orrs	r2, r3
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	69db      	ldr	r3, [r3, #28]
 800805e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8008062:	431a      	orrs	r2, r3
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	6a1b      	ldr	r3, [r3, #32]
 8008068:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800806c:	ea42 0103 	orr.w	r1, r2, r3
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008074:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	430a      	orrs	r2, r1
 800807e:	601a      	str	r2, [r3, #0]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	699b      	ldr	r3, [r3, #24]
 8008084:	0c1a      	lsrs	r2, r3, #16
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f002 0204 	and.w	r2, r2, #4
 800808e:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	2200      	movs	r2, #0
 8008094:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	2201      	movs	r2, #1
 800809a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3708      	adds	r7, #8
 80080a4:	46bd      	mov	sp, r7
 80080a6:	bd80      	pop	{r7, pc}

080080a8 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80080a8:	b580      	push	{r7, lr}
 80080aa:	b08c      	sub	sp, #48	; 0x30
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80080b6:	2301      	movs	r3, #1
 80080b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80080ba:	2300      	movs	r3, #0
 80080bc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80080c6:	2b01      	cmp	r3, #1
 80080c8:	d101      	bne.n	80080ce <HAL_SPI_TransmitReceive+0x26>
 80080ca:	2302      	movs	r3, #2
 80080cc:	e18a      	b.n	80083e4 <HAL_SPI_TransmitReceive+0x33c>
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	2201      	movs	r2, #1
 80080d2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80080d6:	f7fc fa73 	bl	80045c0 <HAL_GetTick>
 80080da:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80080e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	685b      	ldr	r3, [r3, #4]
 80080ea:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80080ec:	887b      	ldrh	r3, [r7, #2]
 80080ee:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80080f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80080f4:	2b01      	cmp	r3, #1
 80080f6:	d00f      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x70>
 80080f8:	69fb      	ldr	r3, [r7, #28]
 80080fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80080fe:	d107      	bne.n	8008110 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	689b      	ldr	r3, [r3, #8]
 8008104:	2b00      	cmp	r3, #0
 8008106:	d103      	bne.n	8008110 <HAL_SPI_TransmitReceive+0x68>
 8008108:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800810c:	2b04      	cmp	r3, #4
 800810e:	d003      	beq.n	8008118 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8008110:	2302      	movs	r3, #2
 8008112:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008116:	e15b      	b.n	80083d0 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8008118:	68bb      	ldr	r3, [r7, #8]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d005      	beq.n	800812a <HAL_SPI_TransmitReceive+0x82>
 800811e:	687b      	ldr	r3, [r7, #4]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d002      	beq.n	800812a <HAL_SPI_TransmitReceive+0x82>
 8008124:	887b      	ldrh	r3, [r7, #2]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d103      	bne.n	8008132 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800812a:	2301      	movs	r3, #1
 800812c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8008130:	e14e      	b.n	80083d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8008138:	b2db      	uxtb	r3, r3
 800813a:	2b04      	cmp	r3, #4
 800813c:	d003      	beq.n	8008146 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	2205      	movs	r2, #5
 8008142:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	2200      	movs	r2, #0
 800814a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	687a      	ldr	r2, [r7, #4]
 8008150:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	887a      	ldrh	r2, [r7, #2]
 8008156:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	887a      	ldrh	r2, [r7, #2]
 800815c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	68ba      	ldr	r2, [r7, #8]
 8008162:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8008164:	68fb      	ldr	r3, [r7, #12]
 8008166:	887a      	ldrh	r2, [r7, #2]
 8008168:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	887a      	ldrh	r2, [r7, #2]
 800816e:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	2200      	movs	r2, #0
 8008174:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	2200      	movs	r2, #0
 800817a:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800817c:	68fb      	ldr	r3, [r7, #12]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008186:	2b40      	cmp	r3, #64	; 0x40
 8008188:	d007      	beq.n	800819a <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008198:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	68db      	ldr	r3, [r3, #12]
 800819e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80081a2:	d178      	bne.n	8008296 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	685b      	ldr	r3, [r3, #4]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d002      	beq.n	80081b2 <HAL_SPI_TransmitReceive+0x10a>
 80081ac:	8b7b      	ldrh	r3, [r7, #26]
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	d166      	bne.n	8008280 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081b6:	881a      	ldrh	r2, [r3, #0]
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081c2:	1c9a      	adds	r2, r3, #2
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	3b01      	subs	r3, #1
 80081d0:	b29a      	uxth	r2, r3
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80081d6:	e053      	b.n	8008280 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f003 0302 	and.w	r3, r3, #2
 80081e2:	2b02      	cmp	r3, #2
 80081e4:	d11b      	bne.n	800821e <HAL_SPI_TransmitReceive+0x176>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80081ea:	b29b      	uxth	r3, r3
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d016      	beq.n	800821e <HAL_SPI_TransmitReceive+0x176>
 80081f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081f2:	2b01      	cmp	r3, #1
 80081f4:	d113      	bne.n	800821e <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081fa:	881a      	ldrh	r2, [r3, #0]
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8008202:	68fb      	ldr	r3, [r7, #12]
 8008204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008206:	1c9a      	adds	r2, r3, #2
 8008208:	68fb      	ldr	r3, [r7, #12]
 800820a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008210:	b29b      	uxth	r3, r3
 8008212:	3b01      	subs	r3, #1
 8008214:	b29a      	uxth	r2, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800821a:	2300      	movs	r3, #0
 800821c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800821e:	68fb      	ldr	r3, [r7, #12]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	689b      	ldr	r3, [r3, #8]
 8008224:	f003 0301 	and.w	r3, r3, #1
 8008228:	2b01      	cmp	r3, #1
 800822a:	d119      	bne.n	8008260 <HAL_SPI_TransmitReceive+0x1b8>
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008230:	b29b      	uxth	r3, r3
 8008232:	2b00      	cmp	r3, #0
 8008234:	d014      	beq.n	8008260 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	68da      	ldr	r2, [r3, #12]
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008240:	b292      	uxth	r2, r2
 8008242:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008248:	1c9a      	adds	r2, r3, #2
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008252:	b29b      	uxth	r3, r3
 8008254:	3b01      	subs	r3, #1
 8008256:	b29a      	uxth	r2, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800825c:	2301      	movs	r3, #1
 800825e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8008260:	f7fc f9ae 	bl	80045c0 <HAL_GetTick>
 8008264:	4602      	mov	r2, r0
 8008266:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008268:	1ad3      	subs	r3, r2, r3
 800826a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800826c:	429a      	cmp	r2, r3
 800826e:	d807      	bhi.n	8008280 <HAL_SPI_TransmitReceive+0x1d8>
 8008270:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008272:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008276:	d003      	beq.n	8008280 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8008278:	2303      	movs	r3, #3
 800827a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800827e:	e0a7      	b.n	80083d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008284:	b29b      	uxth	r3, r3
 8008286:	2b00      	cmp	r3, #0
 8008288:	d1a6      	bne.n	80081d8 <HAL_SPI_TransmitReceive+0x130>
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800828e:	b29b      	uxth	r3, r3
 8008290:	2b00      	cmp	r3, #0
 8008292:	d1a1      	bne.n	80081d8 <HAL_SPI_TransmitReceive+0x130>
 8008294:	e07c      	b.n	8008390 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	685b      	ldr	r3, [r3, #4]
 800829a:	2b00      	cmp	r3, #0
 800829c:	d002      	beq.n	80082a4 <HAL_SPI_TransmitReceive+0x1fc>
 800829e:	8b7b      	ldrh	r3, [r7, #26]
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d16b      	bne.n	800837c <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082a8:	68fb      	ldr	r3, [r7, #12]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	330c      	adds	r3, #12
 80082ae:	7812      	ldrb	r2, [r2, #0]
 80082b0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80082b2:	68fb      	ldr	r3, [r7, #12]
 80082b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082b6:	1c5a      	adds	r2, r3, #1
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	3b01      	subs	r3, #1
 80082c4:	b29a      	uxth	r2, r3
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80082ca:	e057      	b.n	800837c <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	689b      	ldr	r3, [r3, #8]
 80082d2:	f003 0302 	and.w	r3, r3, #2
 80082d6:	2b02      	cmp	r3, #2
 80082d8:	d11c      	bne.n	8008314 <HAL_SPI_TransmitReceive+0x26c>
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80082de:	b29b      	uxth	r3, r3
 80082e0:	2b00      	cmp	r3, #0
 80082e2:	d017      	beq.n	8008314 <HAL_SPI_TransmitReceive+0x26c>
 80082e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082e6:	2b01      	cmp	r3, #1
 80082e8:	d114      	bne.n	8008314 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	330c      	adds	r3, #12
 80082f4:	7812      	ldrb	r2, [r2, #0]
 80082f6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082fc:	1c5a      	adds	r2, r3, #1
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008306:	b29b      	uxth	r3, r3
 8008308:	3b01      	subs	r3, #1
 800830a:	b29a      	uxth	r2, r3
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8008310:	2300      	movs	r3, #0
 8008312:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	689b      	ldr	r3, [r3, #8]
 800831a:	f003 0301 	and.w	r3, r3, #1
 800831e:	2b01      	cmp	r3, #1
 8008320:	d119      	bne.n	8008356 <HAL_SPI_TransmitReceive+0x2ae>
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008326:	b29b      	uxth	r3, r3
 8008328:	2b00      	cmp	r3, #0
 800832a:	d014      	beq.n	8008356 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	68da      	ldr	r2, [r3, #12]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008336:	b2d2      	uxtb	r2, r2
 8008338:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800833e:	1c5a      	adds	r2, r3, #1
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8008348:	b29b      	uxth	r3, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	b29a      	uxth	r2, r3
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8008352:	2301      	movs	r3, #1
 8008354:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8008356:	f7fc f933 	bl	80045c0 <HAL_GetTick>
 800835a:	4602      	mov	r2, r0
 800835c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800835e:	1ad3      	subs	r3, r2, r3
 8008360:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008362:	429a      	cmp	r2, r3
 8008364:	d803      	bhi.n	800836e <HAL_SPI_TransmitReceive+0x2c6>
 8008366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800836c:	d102      	bne.n	8008374 <HAL_SPI_TransmitReceive+0x2cc>
 800836e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008370:	2b00      	cmp	r3, #0
 8008372:	d103      	bne.n	800837c <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8008374:	2303      	movs	r3, #3
 8008376:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800837a:	e029      	b.n	80083d0 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8008380:	b29b      	uxth	r3, r3
 8008382:	2b00      	cmp	r3, #0
 8008384:	d1a2      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x224>
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	d19d      	bne.n	80082cc <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8008390:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008392:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8008394:	68f8      	ldr	r0, [r7, #12]
 8008396:	f000 f8b1 	bl	80084fc <SPI_EndRxTxTransaction>
 800839a:	4603      	mov	r3, r0
 800839c:	2b00      	cmp	r3, #0
 800839e:	d006      	beq.n	80083ae <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 80083a0:	2301      	movs	r3, #1
 80083a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	2220      	movs	r2, #32
 80083aa:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80083ac:	e010      	b.n	80083d0 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80083ae:	68fb      	ldr	r3, [r7, #12]
 80083b0:	689b      	ldr	r3, [r3, #8]
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d10b      	bne.n	80083ce <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80083b6:	2300      	movs	r3, #0
 80083b8:	617b      	str	r3, [r7, #20]
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	681b      	ldr	r3, [r3, #0]
 80083be:	68db      	ldr	r3, [r3, #12]
 80083c0:	617b      	str	r3, [r7, #20]
 80083c2:	68fb      	ldr	r3, [r7, #12]
 80083c4:	681b      	ldr	r3, [r3, #0]
 80083c6:	689b      	ldr	r3, [r3, #8]
 80083c8:	617b      	str	r3, [r7, #20]
 80083ca:	697b      	ldr	r3, [r7, #20]
 80083cc:	e000      	b.n	80083d0 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 80083ce:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	2201      	movs	r2, #1
 80083d4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	2200      	movs	r2, #0
 80083dc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80083e0:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 80083e4:	4618      	mov	r0, r3
 80083e6:	3730      	adds	r7, #48	; 0x30
 80083e8:	46bd      	mov	sp, r7
 80083ea:	bd80      	pop	{r7, pc}

080083ec <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80083ec:	b580      	push	{r7, lr}
 80083ee:	b088      	sub	sp, #32
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	60f8      	str	r0, [r7, #12]
 80083f4:	60b9      	str	r1, [r7, #8]
 80083f6:	603b      	str	r3, [r7, #0]
 80083f8:	4613      	mov	r3, r2
 80083fa:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80083fc:	f7fc f8e0 	bl	80045c0 <HAL_GetTick>
 8008400:	4602      	mov	r2, r0
 8008402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008404:	1a9b      	subs	r3, r3, r2
 8008406:	683a      	ldr	r2, [r7, #0]
 8008408:	4413      	add	r3, r2
 800840a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800840c:	f7fc f8d8 	bl	80045c0 <HAL_GetTick>
 8008410:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8008412:	4b39      	ldr	r3, [pc, #228]	; (80084f8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8008414:	681b      	ldr	r3, [r3, #0]
 8008416:	015b      	lsls	r3, r3, #5
 8008418:	0d1b      	lsrs	r3, r3, #20
 800841a:	69fa      	ldr	r2, [r7, #28]
 800841c:	fb02 f303 	mul.w	r3, r2, r3
 8008420:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8008422:	e054      	b.n	80084ce <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	f1b3 3fff 	cmp.w	r3, #4294967295
 800842a:	d050      	beq.n	80084ce <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800842c:	f7fc f8c8 	bl	80045c0 <HAL_GetTick>
 8008430:	4602      	mov	r2, r0
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	1ad3      	subs	r3, r2, r3
 8008436:	69fa      	ldr	r2, [r7, #28]
 8008438:	429a      	cmp	r2, r3
 800843a:	d902      	bls.n	8008442 <SPI_WaitFlagStateUntilTimeout+0x56>
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d13d      	bne.n	80084be <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	685a      	ldr	r2, [r3, #4]
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	681b      	ldr	r3, [r3, #0]
 800844c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8008450:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	685b      	ldr	r3, [r3, #4]
 8008456:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800845a:	d111      	bne.n	8008480 <SPI_WaitFlagStateUntilTimeout+0x94>
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	689b      	ldr	r3, [r3, #8]
 8008460:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008464:	d004      	beq.n	8008470 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	689b      	ldr	r3, [r3, #8]
 800846a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800846e:	d107      	bne.n	8008480 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8008470:	68fb      	ldr	r3, [r7, #12]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	68fb      	ldr	r3, [r7, #12]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800847e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008488:	d10f      	bne.n	80084aa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	681a      	ldr	r2, [r3, #0]
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008498:	601a      	str	r2, [r3, #0]
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084a8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	2201      	movs	r2, #1
 80084ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	2200      	movs	r2, #0
 80084b6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80084ba:	2303      	movs	r3, #3
 80084bc:	e017      	b.n	80084ee <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d101      	bne.n	80084c8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80084c4:	2300      	movs	r3, #0
 80084c6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80084c8:	697b      	ldr	r3, [r7, #20]
 80084ca:	3b01      	subs	r3, #1
 80084cc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80084ce:	68fb      	ldr	r3, [r7, #12]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	68bb      	ldr	r3, [r7, #8]
 80084d6:	4013      	ands	r3, r2
 80084d8:	68ba      	ldr	r2, [r7, #8]
 80084da:	429a      	cmp	r2, r3
 80084dc:	bf0c      	ite	eq
 80084de:	2301      	moveq	r3, #1
 80084e0:	2300      	movne	r3, #0
 80084e2:	b2db      	uxtb	r3, r3
 80084e4:	461a      	mov	r2, r3
 80084e6:	79fb      	ldrb	r3, [r7, #7]
 80084e8:	429a      	cmp	r2, r3
 80084ea:	d19b      	bne.n	8008424 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80084ec:	2300      	movs	r3, #0
}
 80084ee:	4618      	mov	r0, r3
 80084f0:	3720      	adds	r7, #32
 80084f2:	46bd      	mov	sp, r7
 80084f4:	bd80      	pop	{r7, pc}
 80084f6:	bf00      	nop
 80084f8:	20000084 	.word	0x20000084

080084fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80084fc:	b580      	push	{r7, lr}
 80084fe:	b088      	sub	sp, #32
 8008500:	af02      	add	r7, sp, #8
 8008502:	60f8      	str	r0, [r7, #12]
 8008504:	60b9      	str	r1, [r7, #8]
 8008506:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8008508:	4b1b      	ldr	r3, [pc, #108]	; (8008578 <SPI_EndRxTxTransaction+0x7c>)
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	4a1b      	ldr	r2, [pc, #108]	; (800857c <SPI_EndRxTxTransaction+0x80>)
 800850e:	fba2 2303 	umull	r2, r3, r2, r3
 8008512:	0d5b      	lsrs	r3, r3, #21
 8008514:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8008518:	fb02 f303 	mul.w	r3, r2, r3
 800851c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8008526:	d112      	bne.n	800854e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	9300      	str	r3, [sp, #0]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	2200      	movs	r2, #0
 8008530:	2180      	movs	r1, #128	; 0x80
 8008532:	68f8      	ldr	r0, [r7, #12]
 8008534:	f7ff ff5a 	bl	80083ec <SPI_WaitFlagStateUntilTimeout>
 8008538:	4603      	mov	r3, r0
 800853a:	2b00      	cmp	r3, #0
 800853c:	d016      	beq.n	800856c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008542:	f043 0220 	orr.w	r2, r3, #32
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800854a:	2303      	movs	r3, #3
 800854c:	e00f      	b.n	800856e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800854e:	697b      	ldr	r3, [r7, #20]
 8008550:	2b00      	cmp	r3, #0
 8008552:	d00a      	beq.n	800856a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8008554:	697b      	ldr	r3, [r7, #20]
 8008556:	3b01      	subs	r3, #1
 8008558:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800855a:	68fb      	ldr	r3, [r7, #12]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008564:	2b80      	cmp	r3, #128	; 0x80
 8008566:	d0f2      	beq.n	800854e <SPI_EndRxTxTransaction+0x52>
 8008568:	e000      	b.n	800856c <SPI_EndRxTxTransaction+0x70>
        break;
 800856a:	bf00      	nop
  }

  return HAL_OK;
 800856c:	2300      	movs	r3, #0
}
 800856e:	4618      	mov	r0, r3
 8008570:	3718      	adds	r7, #24
 8008572:	46bd      	mov	sp, r7
 8008574:	bd80      	pop	{r7, pc}
 8008576:	bf00      	nop
 8008578:	20000084 	.word	0x20000084
 800857c:	165e9f81 	.word	0x165e9f81

08008580 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b082      	sub	sp, #8
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d101      	bne.n	8008592 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800858e:	2301      	movs	r3, #1
 8008590:	e031      	b.n	80085f6 <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8008598:	b2db      	uxtb	r3, r3
 800859a:	2b00      	cmp	r3, #0
 800859c:	d106      	bne.n	80085ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f7fb fd42 	bl	8004030 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	2202      	movs	r2, #2
 80085b0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	681a      	ldr	r2, [r3, #0]
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	3304      	adds	r3, #4
 80085bc:	4619      	mov	r1, r3
 80085be:	4610      	mov	r0, r2
 80085c0:	f000 fc68 	bl	8008e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2201      	movs	r2, #1
 80085c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	2201      	movs	r2, #1
 80085d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2201      	movs	r2, #1
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	2201      	movs	r2, #1
 80085e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80085f4:	2300      	movs	r3, #0
}
 80085f6:	4618      	mov	r0, r3
 80085f8:	3708      	adds	r7, #8
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bd80      	pop	{r7, pc}
	...

08008600 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008600:	b480      	push	{r7}
 8008602:	b085      	sub	sp, #20
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800860e:	b2db      	uxtb	r3, r3
 8008610:	2b01      	cmp	r3, #1
 8008612:	d001      	beq.n	8008618 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008614:	2301      	movs	r3, #1
 8008616:	e03a      	b.n	800868e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	2202      	movs	r2, #2
 800861c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68da      	ldr	r2, [r3, #12]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f042 0201 	orr.w	r2, r2, #1
 800862e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008638:	d00e      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x58>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	4a16      	ldr	r2, [pc, #88]	; (8008698 <HAL_TIM_Base_Start_IT+0x98>)
 8008640:	4293      	cmp	r3, r2
 8008642:	d009      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x58>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a14      	ldr	r2, [pc, #80]	; (800869c <HAL_TIM_Base_Start_IT+0x9c>)
 800864a:	4293      	cmp	r3, r2
 800864c:	d004      	beq.n	8008658 <HAL_TIM_Base_Start_IT+0x58>
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	4a13      	ldr	r2, [pc, #76]	; (80086a0 <HAL_TIM_Base_Start_IT+0xa0>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d111      	bne.n	800867c <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	689b      	ldr	r3, [r3, #8]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008664:	68fb      	ldr	r3, [r7, #12]
 8008666:	2b06      	cmp	r3, #6
 8008668:	d010      	beq.n	800868c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	681a      	ldr	r2, [r3, #0]
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	f042 0201 	orr.w	r2, r2, #1
 8008678:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800867a:	e007      	b.n	800868c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f042 0201 	orr.w	r2, r2, #1
 800868a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800868c:	2300      	movs	r3, #0
}
 800868e:	4618      	mov	r0, r3
 8008690:	3714      	adds	r7, #20
 8008692:	46bd      	mov	sp, r7
 8008694:	bc80      	pop	{r7}
 8008696:	4770      	bx	lr
 8008698:	40000400 	.word	0x40000400
 800869c:	40000800 	.word	0x40000800
 80086a0:	40010800 	.word	0x40010800

080086a4 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 80086a4:	b580      	push	{r7, lr}
 80086a6:	b082      	sub	sp, #8
 80086a8:	af00      	add	r7, sp, #0
 80086aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d101      	bne.n	80086b6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80086b2:	2301      	movs	r3, #1
 80086b4:	e031      	b.n	800871a <HAL_TIM_OC_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80086bc:	b2db      	uxtb	r3, r3
 80086be:	2b00      	cmp	r3, #0
 80086c0:	d106      	bne.n	80086d0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	2200      	movs	r2, #0
 80086c6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80086ca:	6878      	ldr	r0, [r7, #4]
 80086cc:	f000 f829 	bl	8008722 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	2202      	movs	r2, #2
 80086d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681a      	ldr	r2, [r3, #0]
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	3304      	adds	r3, #4
 80086e0:	4619      	mov	r1, r3
 80086e2:	4610      	mov	r0, r2
 80086e4:	f000 fbd6 	bl	8008e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	2201      	movs	r2, #1
 80086ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	2201      	movs	r2, #1
 80086f4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	2201      	movs	r2, #1
 80086fc:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2201      	movs	r2, #1
 8008704:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008708:	687b      	ldr	r3, [r7, #4]
 800870a:	2201      	movs	r2, #1
 800870c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 8008718:	2300      	movs	r3, #0
}
 800871a:	4618      	mov	r0, r3
 800871c:	3708      	adds	r7, #8
 800871e:	46bd      	mov	sp, r7
 8008720:	bd80      	pop	{r7, pc}

08008722 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8008722:	b480      	push	{r7}
 8008724:	b083      	sub	sp, #12
 8008726:	af00      	add	r7, sp, #0
 8008728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800872a:	bf00      	nop
 800872c:	370c      	adds	r7, #12
 800872e:	46bd      	mov	sp, r7
 8008730:	bc80      	pop	{r7}
 8008732:	4770      	bx	lr

08008734 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d101      	bne.n	8008746 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e031      	b.n	80087aa <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800874c:	b2db      	uxtb	r3, r3
 800874e:	2b00      	cmp	r3, #0
 8008750:	d106      	bne.n	8008760 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	2200      	movs	r2, #0
 8008756:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800875a:	6878      	ldr	r0, [r7, #4]
 800875c:	f7fb fd0c 	bl	8004178 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2202      	movs	r2, #2
 8008764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681a      	ldr	r2, [r3, #0]
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	3304      	adds	r3, #4
 8008770:	4619      	mov	r1, r3
 8008772:	4610      	mov	r0, r2
 8008774:	f000 fb8e 	bl	8008e94 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2201      	movs	r2, #1
 800877c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2201      	movs	r2, #1
 8008784:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2201      	movs	r2, #1
 8008794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	2201      	movs	r2, #1
 800879c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	2201      	movs	r2, #1
 80087a4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80087a8:	2300      	movs	r3, #0
}
 80087aa:	4618      	mov	r0, r3
 80087ac:	3708      	adds	r7, #8
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80087b4:	b580      	push	{r7, lr}
 80087b6:	b084      	sub	sp, #16
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
 80087bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80087be:	683b      	ldr	r3, [r7, #0]
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d109      	bne.n	80087d8 <HAL_TIM_PWM_Start+0x24>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 80087ca:	b2db      	uxtb	r3, r3
 80087cc:	2b01      	cmp	r3, #1
 80087ce:	bf14      	ite	ne
 80087d0:	2301      	movne	r3, #1
 80087d2:	2300      	moveq	r3, #0
 80087d4:	b2db      	uxtb	r3, r3
 80087d6:	e022      	b.n	800881e <HAL_TIM_PWM_Start+0x6a>
 80087d8:	683b      	ldr	r3, [r7, #0]
 80087da:	2b04      	cmp	r3, #4
 80087dc:	d109      	bne.n	80087f2 <HAL_TIM_PWM_Start+0x3e>
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	f893 303b 	ldrb.w	r3, [r3, #59]	; 0x3b
 80087e4:	b2db      	uxtb	r3, r3
 80087e6:	2b01      	cmp	r3, #1
 80087e8:	bf14      	ite	ne
 80087ea:	2301      	movne	r3, #1
 80087ec:	2300      	moveq	r3, #0
 80087ee:	b2db      	uxtb	r3, r3
 80087f0:	e015      	b.n	800881e <HAL_TIM_PWM_Start+0x6a>
 80087f2:	683b      	ldr	r3, [r7, #0]
 80087f4:	2b08      	cmp	r3, #8
 80087f6:	d109      	bne.n	800880c <HAL_TIM_PWM_Start+0x58>
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087fe:	b2db      	uxtb	r3, r3
 8008800:	2b01      	cmp	r3, #1
 8008802:	bf14      	ite	ne
 8008804:	2301      	movne	r3, #1
 8008806:	2300      	moveq	r3, #0
 8008808:	b2db      	uxtb	r3, r3
 800880a:	e008      	b.n	800881e <HAL_TIM_PWM_Start+0x6a>
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b01      	cmp	r3, #1
 8008816:	bf14      	ite	ne
 8008818:	2301      	movne	r3, #1
 800881a:	2300      	moveq	r3, #0
 800881c:	b2db      	uxtb	r3, r3
 800881e:	2b00      	cmp	r3, #0
 8008820:	d001      	beq.n	8008826 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8008822:	2301      	movs	r3, #1
 8008824:	e051      	b.n	80088ca <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d104      	bne.n	8008836 <HAL_TIM_PWM_Start+0x82>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2202      	movs	r2, #2
 8008830:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 8008834:	e013      	b.n	800885e <HAL_TIM_PWM_Start+0xaa>
 8008836:	683b      	ldr	r3, [r7, #0]
 8008838:	2b04      	cmp	r3, #4
 800883a:	d104      	bne.n	8008846 <HAL_TIM_PWM_Start+0x92>
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	2202      	movs	r2, #2
 8008840:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 8008844:	e00b      	b.n	800885e <HAL_TIM_PWM_Start+0xaa>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b08      	cmp	r3, #8
 800884a:	d104      	bne.n	8008856 <HAL_TIM_PWM_Start+0xa2>
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	2202      	movs	r2, #2
 8008850:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8008854:	e003      	b.n	800885e <HAL_TIM_PWM_Start+0xaa>
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	2202      	movs	r2, #2
 800885a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	2201      	movs	r2, #1
 8008864:	6839      	ldr	r1, [r7, #0]
 8008866:	4618      	mov	r0, r3
 8008868:	f000 fd01 	bl	800926e <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008874:	d00e      	beq.n	8008894 <HAL_TIM_PWM_Start+0xe0>
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	4a16      	ldr	r2, [pc, #88]	; (80088d4 <HAL_TIM_PWM_Start+0x120>)
 800887c:	4293      	cmp	r3, r2
 800887e:	d009      	beq.n	8008894 <HAL_TIM_PWM_Start+0xe0>
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	4a14      	ldr	r2, [pc, #80]	; (80088d8 <HAL_TIM_PWM_Start+0x124>)
 8008886:	4293      	cmp	r3, r2
 8008888:	d004      	beq.n	8008894 <HAL_TIM_PWM_Start+0xe0>
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	681b      	ldr	r3, [r3, #0]
 800888e:	4a13      	ldr	r2, [pc, #76]	; (80088dc <HAL_TIM_PWM_Start+0x128>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d111      	bne.n	80088b8 <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	f003 0307 	and.w	r3, r3, #7
 800889e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2b06      	cmp	r3, #6
 80088a4:	d010      	beq.n	80088c8 <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	681a      	ldr	r2, [r3, #0]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	f042 0201 	orr.w	r2, r2, #1
 80088b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80088b6:	e007      	b.n	80088c8 <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	681a      	ldr	r2, [r3, #0]
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	f042 0201 	orr.w	r2, r2, #1
 80088c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80088c8:	2300      	movs	r3, #0
}
 80088ca:	4618      	mov	r0, r3
 80088cc:	3710      	adds	r7, #16
 80088ce:	46bd      	mov	sp, r7
 80088d0:	bd80      	pop	{r7, pc}
 80088d2:	bf00      	nop
 80088d4:	40000400 	.word	0x40000400
 80088d8:	40000800 	.word	0x40000800
 80088dc:	40010800 	.word	0x40010800

080088e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80088e0:	b580      	push	{r7, lr}
 80088e2:	b082      	sub	sp, #8
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80088e8:	687b      	ldr	r3, [r7, #4]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	691b      	ldr	r3, [r3, #16]
 80088ee:	f003 0302 	and.w	r3, r3, #2
 80088f2:	2b02      	cmp	r3, #2
 80088f4:	d122      	bne.n	800893c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	68db      	ldr	r3, [r3, #12]
 80088fc:	f003 0302 	and.w	r3, r3, #2
 8008900:	2b02      	cmp	r3, #2
 8008902:	d11b      	bne.n	800893c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f06f 0202 	mvn.w	r2, #2
 800890c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2201      	movs	r2, #1
 8008912:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	699b      	ldr	r3, [r3, #24]
 800891a:	f003 0303 	and.w	r3, r3, #3
 800891e:	2b00      	cmp	r3, #0
 8008920:	d003      	beq.n	800892a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008922:	6878      	ldr	r0, [r7, #4]
 8008924:	f000 fa9b 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 8008928:	e005      	b.n	8008936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800892a:	6878      	ldr	r0, [r7, #4]
 800892c:	f000 fa8e 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	f000 fa9d 	bl	8008e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	2200      	movs	r2, #0
 800893a:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	681b      	ldr	r3, [r3, #0]
 8008940:	691b      	ldr	r3, [r3, #16]
 8008942:	f003 0304 	and.w	r3, r3, #4
 8008946:	2b04      	cmp	r3, #4
 8008948:	d122      	bne.n	8008990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	681b      	ldr	r3, [r3, #0]
 800894e:	68db      	ldr	r3, [r3, #12]
 8008950:	f003 0304 	and.w	r3, r3, #4
 8008954:	2b04      	cmp	r3, #4
 8008956:	d11b      	bne.n	8008990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008958:	687b      	ldr	r3, [r7, #4]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	f06f 0204 	mvn.w	r2, #4
 8008960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	2202      	movs	r2, #2
 8008966:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	699b      	ldr	r3, [r3, #24]
 800896e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fa71 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 800897c:	e005      	b.n	800898a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800897e:	6878      	ldr	r0, [r7, #4]
 8008980:	f000 fa64 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008984:	6878      	ldr	r0, [r7, #4]
 8008986:	f000 fa73 	bl	8008e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2200      	movs	r2, #0
 800898e:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008990:	687b      	ldr	r3, [r7, #4]
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	691b      	ldr	r3, [r3, #16]
 8008996:	f003 0308 	and.w	r3, r3, #8
 800899a:	2b08      	cmp	r3, #8
 800899c:	d122      	bne.n	80089e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	68db      	ldr	r3, [r3, #12]
 80089a4:	f003 0308 	and.w	r3, r3, #8
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d11b      	bne.n	80089e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f06f 0208 	mvn.w	r2, #8
 80089b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	2204      	movs	r2, #4
 80089ba:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	69db      	ldr	r3, [r3, #28]
 80089c2:	f003 0303 	and.w	r3, r3, #3
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80089ca:	6878      	ldr	r0, [r7, #4]
 80089cc:	f000 fa47 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 80089d0:	e005      	b.n	80089de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa3a 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80089d8:	6878      	ldr	r0, [r7, #4]
 80089da:	f000 fa49 	bl	8008e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	2200      	movs	r2, #0
 80089e2:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	691b      	ldr	r3, [r3, #16]
 80089ea:	f003 0310 	and.w	r3, r3, #16
 80089ee:	2b10      	cmp	r3, #16
 80089f0:	d122      	bne.n	8008a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	68db      	ldr	r3, [r3, #12]
 80089f8:	f003 0310 	and.w	r3, r3, #16
 80089fc:	2b10      	cmp	r3, #16
 80089fe:	d11b      	bne.n	8008a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f06f 0210 	mvn.w	r2, #16
 8008a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2208      	movs	r2, #8
 8008a0e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008a10:	687b      	ldr	r3, [r7, #4]
 8008a12:	681b      	ldr	r3, [r3, #0]
 8008a14:	69db      	ldr	r3, [r3, #28]
 8008a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d003      	beq.n	8008a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 fa1d 	bl	8008e5e <HAL_TIM_IC_CaptureCallback>
 8008a24:	e005      	b.n	8008a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008a26:	6878      	ldr	r0, [r7, #4]
 8008a28:	f000 fa10 	bl	8008e4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008a2c:	6878      	ldr	r0, [r7, #4]
 8008a2e:	f000 fa1f 	bl	8008e70 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	2200      	movs	r2, #0
 8008a36:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008a38:	687b      	ldr	r3, [r7, #4]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	691b      	ldr	r3, [r3, #16]
 8008a3e:	f003 0301 	and.w	r3, r3, #1
 8008a42:	2b01      	cmp	r3, #1
 8008a44:	d10e      	bne.n	8008a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008a46:	687b      	ldr	r3, [r7, #4]
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	68db      	ldr	r3, [r3, #12]
 8008a4c:	f003 0301 	and.w	r3, r3, #1
 8008a50:	2b01      	cmp	r3, #1
 8008a52:	d107      	bne.n	8008a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008a54:	687b      	ldr	r3, [r7, #4]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	f06f 0201 	mvn.w	r2, #1
 8008a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008a5e:	6878      	ldr	r0, [r7, #4]
 8008a60:	f7fb f994 	bl	8003d8c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	681b      	ldr	r3, [r3, #0]
 8008a68:	691b      	ldr	r3, [r3, #16]
 8008a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a6e:	2b40      	cmp	r3, #64	; 0x40
 8008a70:	d10e      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	681b      	ldr	r3, [r3, #0]
 8008a76:	68db      	ldr	r3, [r3, #12]
 8008a78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a7c:	2b40      	cmp	r3, #64	; 0x40
 8008a7e:	d107      	bne.n	8008a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008a8a:	6878      	ldr	r0, [r7, #4]
 8008a8c:	f000 f9f9 	bl	8008e82 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008a90:	bf00      	nop
 8008a92:	3708      	adds	r7, #8
 8008a94:	46bd      	mov	sp, r7
 8008a96:	bd80      	pop	{r7, pc}

08008a98 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8008a98:	b580      	push	{r7, lr}
 8008a9a:	b084      	sub	sp, #16
 8008a9c:	af00      	add	r7, sp, #0
 8008a9e:	60f8      	str	r0, [r7, #12]
 8008aa0:	60b9      	str	r1, [r7, #8]
 8008aa2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008aaa:	2b01      	cmp	r3, #1
 8008aac:	d101      	bne.n	8008ab2 <HAL_TIM_OC_ConfigChannel+0x1a>
 8008aae:	2302      	movs	r3, #2
 8008ab0:	e046      	b.n	8008b40 <HAL_TIM_OC_ConfigChannel+0xa8>
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2201      	movs	r2, #1
 8008ab6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	2b0c      	cmp	r3, #12
 8008abe:	d839      	bhi.n	8008b34 <HAL_TIM_OC_ConfigChannel+0x9c>
 8008ac0:	a201      	add	r2, pc, #4	; (adr r2, 8008ac8 <HAL_TIM_OC_ConfigChannel+0x30>)
 8008ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ac6:	bf00      	nop
 8008ac8:	08008afd 	.word	0x08008afd
 8008acc:	08008b35 	.word	0x08008b35
 8008ad0:	08008b35 	.word	0x08008b35
 8008ad4:	08008b35 	.word	0x08008b35
 8008ad8:	08008b0b 	.word	0x08008b0b
 8008adc:	08008b35 	.word	0x08008b35
 8008ae0:	08008b35 	.word	0x08008b35
 8008ae4:	08008b35 	.word	0x08008b35
 8008ae8:	08008b19 	.word	0x08008b19
 8008aec:	08008b35 	.word	0x08008b35
 8008af0:	08008b35 	.word	0x08008b35
 8008af4:	08008b35 	.word	0x08008b35
 8008af8:	08008b27 	.word	0x08008b27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	68b9      	ldr	r1, [r7, #8]
 8008b02:	4618      	mov	r0, r3
 8008b04:	f000 fa28 	bl	8008f58 <TIM_OC1_SetConfig>
      break;
 8008b08:	e015      	b.n	8008b36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008b0a:	68fb      	ldr	r3, [r7, #12]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	68b9      	ldr	r1, [r7, #8]
 8008b10:	4618      	mov	r0, r3
 8008b12:	f000 fa5d 	bl	8008fd0 <TIM_OC2_SetConfig>
      break;
 8008b16:	e00e      	b.n	8008b36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	68b9      	ldr	r1, [r7, #8]
 8008b1e:	4618      	mov	r0, r3
 8008b20:	f000 fa94 	bl	800904c <TIM_OC3_SetConfig>
      break;
 8008b24:	e007      	b.n	8008b36 <HAL_TIM_OC_ConfigChannel+0x9e>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	68b9      	ldr	r1, [r7, #8]
 8008b2c:	4618      	mov	r0, r3
 8008b2e:	f000 faca 	bl	80090c6 <TIM_OC4_SetConfig>
      break;
 8008b32:	e000      	b.n	8008b36 <HAL_TIM_OC_ConfigChannel+0x9e>
    }

    default:
      break;
 8008b34:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2200      	movs	r2, #0
 8008b3a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008b3e:	2300      	movs	r3, #0
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3710      	adds	r7, #16
 8008b44:	46bd      	mov	sp, r7
 8008b46:	bd80      	pop	{r7, pc}

08008b48 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8008b48:	b580      	push	{r7, lr}
 8008b4a:	b084      	sub	sp, #16
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	60f8      	str	r0, [r7, #12]
 8008b50:	60b9      	str	r1, [r7, #8]
 8008b52:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008b5a:	2b01      	cmp	r3, #1
 8008b5c:	d101      	bne.n	8008b62 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8008b5e:	2302      	movs	r3, #2
 8008b60:	e0ac      	b.n	8008cbc <HAL_TIM_PWM_ConfigChannel+0x174>
 8008b62:	68fb      	ldr	r3, [r7, #12]
 8008b64:	2201      	movs	r2, #1
 8008b66:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  switch (Channel)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2b0c      	cmp	r3, #12
 8008b6e:	f200 809f 	bhi.w	8008cb0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8008b72:	a201      	add	r2, pc, #4	; (adr r2, 8008b78 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8008b74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b78:	08008bad 	.word	0x08008bad
 8008b7c:	08008cb1 	.word	0x08008cb1
 8008b80:	08008cb1 	.word	0x08008cb1
 8008b84:	08008cb1 	.word	0x08008cb1
 8008b88:	08008bed 	.word	0x08008bed
 8008b8c:	08008cb1 	.word	0x08008cb1
 8008b90:	08008cb1 	.word	0x08008cb1
 8008b94:	08008cb1 	.word	0x08008cb1
 8008b98:	08008c2f 	.word	0x08008c2f
 8008b9c:	08008cb1 	.word	0x08008cb1
 8008ba0:	08008cb1 	.word	0x08008cb1
 8008ba4:	08008cb1 	.word	0x08008cb1
 8008ba8:	08008c6f 	.word	0x08008c6f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8008bac:	68fb      	ldr	r3, [r7, #12]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	68b9      	ldr	r1, [r7, #8]
 8008bb2:	4618      	mov	r0, r3
 8008bb4:	f000 f9d0 	bl	8008f58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	699a      	ldr	r2, [r3, #24]
 8008bbe:	68fb      	ldr	r3, [r7, #12]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	f042 0208 	orr.w	r2, r2, #8
 8008bc6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	681b      	ldr	r3, [r3, #0]
 8008bcc:	699a      	ldr	r2, [r3, #24]
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	f022 0204 	bic.w	r2, r2, #4
 8008bd6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8008bd8:	68fb      	ldr	r3, [r7, #12]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	6999      	ldr	r1, [r3, #24]
 8008bde:	68bb      	ldr	r3, [r7, #8]
 8008be0:	68da      	ldr	r2, [r3, #12]
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	681b      	ldr	r3, [r3, #0]
 8008be6:	430a      	orrs	r2, r1
 8008be8:	619a      	str	r2, [r3, #24]
      break;
 8008bea:	e062      	b.n	8008cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	68b9      	ldr	r1, [r7, #8]
 8008bf2:	4618      	mov	r0, r3
 8008bf4:	f000 f9ec 	bl	8008fd0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	681b      	ldr	r3, [r3, #0]
 8008bfc:	699a      	ldr	r2, [r3, #24]
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c06:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	699a      	ldr	r2, [r3, #24]
 8008c0e:	68fb      	ldr	r3, [r7, #12]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c16:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8008c18:	68fb      	ldr	r3, [r7, #12]
 8008c1a:	681b      	ldr	r3, [r3, #0]
 8008c1c:	6999      	ldr	r1, [r3, #24]
 8008c1e:	68bb      	ldr	r3, [r7, #8]
 8008c20:	68db      	ldr	r3, [r3, #12]
 8008c22:	021a      	lsls	r2, r3, #8
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	430a      	orrs	r2, r1
 8008c2a:	619a      	str	r2, [r3, #24]
      break;
 8008c2c:	e041      	b.n	8008cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	68b9      	ldr	r1, [r7, #8]
 8008c34:	4618      	mov	r0, r3
 8008c36:	f000 fa09 	bl	800904c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	69da      	ldr	r2, [r3, #28]
 8008c40:	68fb      	ldr	r3, [r7, #12]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	f042 0208 	orr.w	r2, r2, #8
 8008c48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	69da      	ldr	r2, [r3, #28]
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	681b      	ldr	r3, [r3, #0]
 8008c54:	f022 0204 	bic.w	r2, r2, #4
 8008c58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008c5a:	68fb      	ldr	r3, [r7, #12]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	69d9      	ldr	r1, [r3, #28]
 8008c60:	68bb      	ldr	r3, [r7, #8]
 8008c62:	68da      	ldr	r2, [r3, #12]
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	61da      	str	r2, [r3, #28]
      break;
 8008c6c:	e021      	b.n	8008cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	68b9      	ldr	r1, [r7, #8]
 8008c74:	4618      	mov	r0, r3
 8008c76:	f000 fa26 	bl	80090c6 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	69da      	ldr	r2, [r3, #28]
 8008c80:	68fb      	ldr	r3, [r7, #12]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008c88:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	69da      	ldr	r2, [r3, #28]
 8008c90:	68fb      	ldr	r3, [r7, #12]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008c98:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	69d9      	ldr	r1, [r3, #28]
 8008ca0:	68bb      	ldr	r3, [r7, #8]
 8008ca2:	68db      	ldr	r3, [r3, #12]
 8008ca4:	021a      	lsls	r2, r3, #8
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	681b      	ldr	r3, [r3, #0]
 8008caa:	430a      	orrs	r2, r1
 8008cac:	61da      	str	r2, [r3, #28]
      break;
 8008cae:	e000      	b.n	8008cb2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8008cb0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008cba:	2300      	movs	r3, #0
}
 8008cbc:	4618      	mov	r0, r3
 8008cbe:	3710      	adds	r7, #16
 8008cc0:	46bd      	mov	sp, r7
 8008cc2:	bd80      	pop	{r7, pc}

08008cc4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008cc4:	b580      	push	{r7, lr}
 8008cc6:	b084      	sub	sp, #16
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d101      	bne.n	8008cdc <HAL_TIM_ConfigClockSource+0x18>
 8008cd8:	2302      	movs	r3, #2
 8008cda:	e0b3      	b.n	8008e44 <HAL_TIM_ConfigClockSource+0x180>
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2202      	movs	r2, #2
 8008ce8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	689b      	ldr	r3, [r3, #8]
 8008cf2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008cfa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008d02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	681b      	ldr	r3, [r3, #0]
 8008d08:	68fa      	ldr	r2, [r7, #12]
 8008d0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d14:	d03e      	beq.n	8008d94 <HAL_TIM_ConfigClockSource+0xd0>
 8008d16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008d1a:	f200 8087 	bhi.w	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d22:	f000 8085 	beq.w	8008e30 <HAL_TIM_ConfigClockSource+0x16c>
 8008d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d2a:	d87f      	bhi.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d2c:	2b70      	cmp	r3, #112	; 0x70
 8008d2e:	d01a      	beq.n	8008d66 <HAL_TIM_ConfigClockSource+0xa2>
 8008d30:	2b70      	cmp	r3, #112	; 0x70
 8008d32:	d87b      	bhi.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d34:	2b60      	cmp	r3, #96	; 0x60
 8008d36:	d050      	beq.n	8008dda <HAL_TIM_ConfigClockSource+0x116>
 8008d38:	2b60      	cmp	r3, #96	; 0x60
 8008d3a:	d877      	bhi.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d3c:	2b50      	cmp	r3, #80	; 0x50
 8008d3e:	d03c      	beq.n	8008dba <HAL_TIM_ConfigClockSource+0xf6>
 8008d40:	2b50      	cmp	r3, #80	; 0x50
 8008d42:	d873      	bhi.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d44:	2b40      	cmp	r3, #64	; 0x40
 8008d46:	d058      	beq.n	8008dfa <HAL_TIM_ConfigClockSource+0x136>
 8008d48:	2b40      	cmp	r3, #64	; 0x40
 8008d4a:	d86f      	bhi.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d4c:	2b30      	cmp	r3, #48	; 0x30
 8008d4e:	d064      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0x156>
 8008d50:	2b30      	cmp	r3, #48	; 0x30
 8008d52:	d86b      	bhi.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d54:	2b20      	cmp	r3, #32
 8008d56:	d060      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0x156>
 8008d58:	2b20      	cmp	r3, #32
 8008d5a:	d867      	bhi.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d05c      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0x156>
 8008d60:	2b10      	cmp	r3, #16
 8008d62:	d05a      	beq.n	8008e1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8008d64:	e062      	b.n	8008e2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6818      	ldr	r0, [r3, #0]
 8008d6a:	683b      	ldr	r3, [r7, #0]
 8008d6c:	6899      	ldr	r1, [r3, #8]
 8008d6e:	683b      	ldr	r3, [r7, #0]
 8008d70:	685a      	ldr	r2, [r3, #4]
 8008d72:	683b      	ldr	r3, [r7, #0]
 8008d74:	68db      	ldr	r3, [r3, #12]
 8008d76:	f000 fa5b 	bl	8009230 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	689b      	ldr	r3, [r3, #8]
 8008d80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008d88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	68fa      	ldr	r2, [r7, #12]
 8008d90:	609a      	str	r2, [r3, #8]
      break;
 8008d92:	e04e      	b.n	8008e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	6818      	ldr	r0, [r3, #0]
 8008d98:	683b      	ldr	r3, [r7, #0]
 8008d9a:	6899      	ldr	r1, [r3, #8]
 8008d9c:	683b      	ldr	r3, [r7, #0]
 8008d9e:	685a      	ldr	r2, [r3, #4]
 8008da0:	683b      	ldr	r3, [r7, #0]
 8008da2:	68db      	ldr	r3, [r3, #12]
 8008da4:	f000 fa44 	bl	8009230 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	689a      	ldr	r2, [r3, #8]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008db6:	609a      	str	r2, [r3, #8]
      break;
 8008db8:	e03b      	b.n	8008e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	6818      	ldr	r0, [r3, #0]
 8008dbe:	683b      	ldr	r3, [r7, #0]
 8008dc0:	6859      	ldr	r1, [r3, #4]
 8008dc2:	683b      	ldr	r3, [r7, #0]
 8008dc4:	68db      	ldr	r3, [r3, #12]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f000 f9bb 	bl	8009142 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	2150      	movs	r1, #80	; 0x50
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	f000 fa12 	bl	80091fc <TIM_ITRx_SetConfig>
      break;
 8008dd8:	e02b      	b.n	8008e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	6818      	ldr	r0, [r3, #0]
 8008dde:	683b      	ldr	r3, [r7, #0]
 8008de0:	6859      	ldr	r1, [r3, #4]
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	68db      	ldr	r3, [r3, #12]
 8008de6:	461a      	mov	r2, r3
 8008de8:	f000 f9d9 	bl	800919e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008dec:	687b      	ldr	r3, [r7, #4]
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	2160      	movs	r1, #96	; 0x60
 8008df2:	4618      	mov	r0, r3
 8008df4:	f000 fa02 	bl	80091fc <TIM_ITRx_SetConfig>
      break;
 8008df8:	e01b      	b.n	8008e32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6818      	ldr	r0, [r3, #0]
 8008dfe:	683b      	ldr	r3, [r7, #0]
 8008e00:	6859      	ldr	r1, [r3, #4]
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	68db      	ldr	r3, [r3, #12]
 8008e06:	461a      	mov	r2, r3
 8008e08:	f000 f99b 	bl	8009142 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	681b      	ldr	r3, [r3, #0]
 8008e10:	2140      	movs	r1, #64	; 0x40
 8008e12:	4618      	mov	r0, r3
 8008e14:	f000 f9f2 	bl	80091fc <TIM_ITRx_SetConfig>
      break;
 8008e18:	e00b      	b.n	8008e32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681a      	ldr	r2, [r3, #0]
 8008e1e:	683b      	ldr	r3, [r7, #0]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4619      	mov	r1, r3
 8008e24:	4610      	mov	r0, r2
 8008e26:	f000 f9e9 	bl	80091fc <TIM_ITRx_SetConfig>
        break;
 8008e2a:	e002      	b.n	8008e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008e2c:	bf00      	nop
 8008e2e:	e000      	b.n	8008e32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8008e30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	2201      	movs	r2, #1
 8008e36:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	2200      	movs	r2, #0
 8008e3e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8008e42:	2300      	movs	r3, #0
}
 8008e44:	4618      	mov	r0, r3
 8008e46:	3710      	adds	r7, #16
 8008e48:	46bd      	mov	sp, r7
 8008e4a:	bd80      	pop	{r7, pc}

08008e4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b083      	sub	sp, #12
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008e54:	bf00      	nop
 8008e56:	370c      	adds	r7, #12
 8008e58:	46bd      	mov	sp, r7
 8008e5a:	bc80      	pop	{r7}
 8008e5c:	4770      	bx	lr

08008e5e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008e5e:	b480      	push	{r7}
 8008e60:	b083      	sub	sp, #12
 8008e62:	af00      	add	r7, sp, #0
 8008e64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008e66:	bf00      	nop
 8008e68:	370c      	adds	r7, #12
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	bc80      	pop	{r7}
 8008e6e:	4770      	bx	lr

08008e70 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b083      	sub	sp, #12
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008e78:	bf00      	nop
 8008e7a:	370c      	adds	r7, #12
 8008e7c:	46bd      	mov	sp, r7
 8008e7e:	bc80      	pop	{r7}
 8008e80:	4770      	bx	lr

08008e82 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008e82:	b480      	push	{r7}
 8008e84:	b083      	sub	sp, #12
 8008e86:	af00      	add	r7, sp, #0
 8008e88:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008e8a:	bf00      	nop
 8008e8c:	370c      	adds	r7, #12
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bc80      	pop	{r7}
 8008e92:	4770      	bx	lr

08008e94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008e9e:	687b      	ldr	r3, [r7, #4]
 8008ea0:	681b      	ldr	r3, [r3, #0]
 8008ea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eaa:	d007      	beq.n	8008ebc <TIM_Base_SetConfig+0x28>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	4a25      	ldr	r2, [pc, #148]	; (8008f44 <TIM_Base_SetConfig+0xb0>)
 8008eb0:	4293      	cmp	r3, r2
 8008eb2:	d003      	beq.n	8008ebc <TIM_Base_SetConfig+0x28>
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	4a24      	ldr	r2, [pc, #144]	; (8008f48 <TIM_Base_SetConfig+0xb4>)
 8008eb8:	4293      	cmp	r3, r2
 8008eba:	d108      	bne.n	8008ece <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ec2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008ec4:	683b      	ldr	r3, [r7, #0]
 8008ec6:	685b      	ldr	r3, [r3, #4]
 8008ec8:	68fa      	ldr	r2, [r7, #12]
 8008eca:	4313      	orrs	r3, r2
 8008ecc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed4:	d013      	beq.n	8008efe <TIM_Base_SetConfig+0x6a>
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	4a1a      	ldr	r2, [pc, #104]	; (8008f44 <TIM_Base_SetConfig+0xb0>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d00f      	beq.n	8008efe <TIM_Base_SetConfig+0x6a>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	4a19      	ldr	r2, [pc, #100]	; (8008f48 <TIM_Base_SetConfig+0xb4>)
 8008ee2:	4293      	cmp	r3, r2
 8008ee4:	d00b      	beq.n	8008efe <TIM_Base_SetConfig+0x6a>
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	4a18      	ldr	r2, [pc, #96]	; (8008f4c <TIM_Base_SetConfig+0xb8>)
 8008eea:	4293      	cmp	r3, r2
 8008eec:	d007      	beq.n	8008efe <TIM_Base_SetConfig+0x6a>
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	4a17      	ldr	r2, [pc, #92]	; (8008f50 <TIM_Base_SetConfig+0xbc>)
 8008ef2:	4293      	cmp	r3, r2
 8008ef4:	d003      	beq.n	8008efe <TIM_Base_SetConfig+0x6a>
 8008ef6:	687b      	ldr	r3, [r7, #4]
 8008ef8:	4a16      	ldr	r2, [pc, #88]	; (8008f54 <TIM_Base_SetConfig+0xc0>)
 8008efa:	4293      	cmp	r3, r2
 8008efc:	d108      	bne.n	8008f10 <TIM_Base_SetConfig+0x7c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008f04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008f06:	683b      	ldr	r3, [r7, #0]
 8008f08:	68db      	ldr	r3, [r3, #12]
 8008f0a:	68fa      	ldr	r2, [r7, #12]
 8008f0c:	4313      	orrs	r3, r2
 8008f0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008f16:	683b      	ldr	r3, [r7, #0]
 8008f18:	691b      	ldr	r3, [r3, #16]
 8008f1a:	4313      	orrs	r3, r2
 8008f1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	68fa      	ldr	r2, [r7, #12]
 8008f22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	689a      	ldr	r2, [r3, #8]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008f2c:	683b      	ldr	r3, [r7, #0]
 8008f2e:	681a      	ldr	r2, [r3, #0]
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	2201      	movs	r2, #1
 8008f38:	615a      	str	r2, [r3, #20]
}
 8008f3a:	bf00      	nop
 8008f3c:	3714      	adds	r7, #20
 8008f3e:	46bd      	mov	sp, r7
 8008f40:	bc80      	pop	{r7}
 8008f42:	4770      	bx	lr
 8008f44:	40000400 	.word	0x40000400
 8008f48:	40000800 	.word	0x40000800
 8008f4c:	40010800 	.word	0x40010800
 8008f50:	40010c00 	.word	0x40010c00
 8008f54:	40011000 	.word	0x40011000

08008f58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008f58:	b480      	push	{r7}
 8008f5a:	b087      	sub	sp, #28
 8008f5c:	af00      	add	r7, sp, #0
 8008f5e:	6078      	str	r0, [r7, #4]
 8008f60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	6a1b      	ldr	r3, [r3, #32]
 8008f66:	f023 0201 	bic.w	r2, r3, #1
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	6a1b      	ldr	r3, [r3, #32]
 8008f72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	685b      	ldr	r3, [r3, #4]
 8008f78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	699b      	ldr	r3, [r3, #24]
 8008f7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008f86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0303 	bic.w	r3, r3, #3
 8008f8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008f90:	683b      	ldr	r3, [r7, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	68fa      	ldr	r2, [r7, #12]
 8008f96:	4313      	orrs	r3, r2
 8008f98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8008f9a:	697b      	ldr	r3, [r7, #20]
 8008f9c:	f023 0302 	bic.w	r3, r3, #2
 8008fa0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	689b      	ldr	r3, [r3, #8]
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	4313      	orrs	r3, r2
 8008faa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	693a      	ldr	r2, [r7, #16]
 8008fb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	68fa      	ldr	r2, [r7, #12]
 8008fb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008fb8:	683b      	ldr	r3, [r7, #0]
 8008fba:	685a      	ldr	r2, [r3, #4]
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	697a      	ldr	r2, [r7, #20]
 8008fc4:	621a      	str	r2, [r3, #32]
}
 8008fc6:	bf00      	nop
 8008fc8:	371c      	adds	r7, #28
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bc80      	pop	{r7}
 8008fce:	4770      	bx	lr

08008fd0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008fd0:	b480      	push	{r7}
 8008fd2:	b087      	sub	sp, #28
 8008fd4:	af00      	add	r7, sp, #0
 8008fd6:	6078      	str	r0, [r7, #4]
 8008fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6a1b      	ldr	r3, [r3, #32]
 8008fde:	f023 0210 	bic.w	r2, r3, #16
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	6a1b      	ldr	r3, [r3, #32]
 8008fea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	685b      	ldr	r3, [r3, #4]
 8008ff0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	699b      	ldr	r3, [r3, #24]
 8008ff6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008ffe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8009000:	68fb      	ldr	r3, [r7, #12]
 8009002:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009006:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	021b      	lsls	r3, r3, #8
 800900e:	68fa      	ldr	r2, [r7, #12]
 8009010:	4313      	orrs	r3, r2
 8009012:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8009014:	697b      	ldr	r3, [r7, #20]
 8009016:	f023 0320 	bic.w	r3, r3, #32
 800901a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	011b      	lsls	r3, r3, #4
 8009022:	697a      	ldr	r2, [r7, #20]
 8009024:	4313      	orrs	r3, r2
 8009026:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	693a      	ldr	r2, [r7, #16]
 800902c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	68fa      	ldr	r2, [r7, #12]
 8009032:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8009034:	683b      	ldr	r3, [r7, #0]
 8009036:	685a      	ldr	r2, [r3, #4]
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	697a      	ldr	r2, [r7, #20]
 8009040:	621a      	str	r2, [r3, #32]
}
 8009042:	bf00      	nop
 8009044:	371c      	adds	r7, #28
 8009046:	46bd      	mov	sp, r7
 8009048:	bc80      	pop	{r7}
 800904a:	4770      	bx	lr

0800904c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800904c:	b480      	push	{r7}
 800904e:	b087      	sub	sp, #28
 8009050:	af00      	add	r7, sp, #0
 8009052:	6078      	str	r0, [r7, #4]
 8009054:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	6a1b      	ldr	r3, [r3, #32]
 800905a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6a1b      	ldr	r3, [r3, #32]
 8009066:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	685b      	ldr	r3, [r3, #4]
 800906c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	69db      	ldr	r3, [r3, #28]
 8009072:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800907a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800907c:	68fb      	ldr	r3, [r7, #12]
 800907e:	f023 0303 	bic.w	r3, r3, #3
 8009082:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8009084:	683b      	ldr	r3, [r7, #0]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	68fa      	ldr	r2, [r7, #12]
 800908a:	4313      	orrs	r3, r2
 800908c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800908e:	697b      	ldr	r3, [r7, #20]
 8009090:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8009094:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8009096:	683b      	ldr	r3, [r7, #0]
 8009098:	689b      	ldr	r3, [r3, #8]
 800909a:	021b      	lsls	r3, r3, #8
 800909c:	697a      	ldr	r2, [r7, #20]
 800909e:	4313      	orrs	r3, r2
 80090a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	693a      	ldr	r2, [r7, #16]
 80090a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	68fa      	ldr	r2, [r7, #12]
 80090ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80090ae:	683b      	ldr	r3, [r7, #0]
 80090b0:	685a      	ldr	r2, [r3, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	697a      	ldr	r2, [r7, #20]
 80090ba:	621a      	str	r2, [r3, #32]
}
 80090bc:	bf00      	nop
 80090be:	371c      	adds	r7, #28
 80090c0:	46bd      	mov	sp, r7
 80090c2:	bc80      	pop	{r7}
 80090c4:	4770      	bx	lr

080090c6 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80090c6:	b480      	push	{r7}
 80090c8:	b087      	sub	sp, #28
 80090ca:	af00      	add	r7, sp, #0
 80090cc:	6078      	str	r0, [r7, #4]
 80090ce:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6a1b      	ldr	r3, [r3, #32]
 80090d4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6a1b      	ldr	r3, [r3, #32]
 80090e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	69db      	ldr	r3, [r3, #28]
 80090ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80090f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80090fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80090fe:	683b      	ldr	r3, [r7, #0]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	021b      	lsls	r3, r3, #8
 8009104:	68fa      	ldr	r2, [r7, #12]
 8009106:	4313      	orrs	r3, r2
 8009108:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800910a:	697b      	ldr	r3, [r7, #20]
 800910c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8009110:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8009112:	683b      	ldr	r3, [r7, #0]
 8009114:	689b      	ldr	r3, [r3, #8]
 8009116:	031b      	lsls	r3, r3, #12
 8009118:	697a      	ldr	r2, [r7, #20]
 800911a:	4313      	orrs	r3, r2
 800911c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	693a      	ldr	r2, [r7, #16]
 8009122:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	68fa      	ldr	r2, [r7, #12]
 8009128:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800912a:	683b      	ldr	r3, [r7, #0]
 800912c:	685a      	ldr	r2, [r3, #4]
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	697a      	ldr	r2, [r7, #20]
 8009136:	621a      	str	r2, [r3, #32]
}
 8009138:	bf00      	nop
 800913a:	371c      	adds	r7, #28
 800913c:	46bd      	mov	sp, r7
 800913e:	bc80      	pop	{r7}
 8009140:	4770      	bx	lr

08009142 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009142:	b480      	push	{r7}
 8009144:	b087      	sub	sp, #28
 8009146:	af00      	add	r7, sp, #0
 8009148:	60f8      	str	r0, [r7, #12]
 800914a:	60b9      	str	r1, [r7, #8]
 800914c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6a1b      	ldr	r3, [r3, #32]
 8009152:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	6a1b      	ldr	r3, [r3, #32]
 8009158:	f023 0201 	bic.w	r2, r3, #1
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	699b      	ldr	r3, [r3, #24]
 8009164:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009166:	693b      	ldr	r3, [r7, #16]
 8009168:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800916c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	011b      	lsls	r3, r3, #4
 8009172:	693a      	ldr	r2, [r7, #16]
 8009174:	4313      	orrs	r3, r2
 8009176:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009178:	697b      	ldr	r3, [r7, #20]
 800917a:	f023 030a 	bic.w	r3, r3, #10
 800917e:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009180:	697a      	ldr	r2, [r7, #20]
 8009182:	68bb      	ldr	r3, [r7, #8]
 8009184:	4313      	orrs	r3, r2
 8009186:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	693a      	ldr	r2, [r7, #16]
 800918c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800918e:	68fb      	ldr	r3, [r7, #12]
 8009190:	697a      	ldr	r2, [r7, #20]
 8009192:	621a      	str	r2, [r3, #32]
}
 8009194:	bf00      	nop
 8009196:	371c      	adds	r7, #28
 8009198:	46bd      	mov	sp, r7
 800919a:	bc80      	pop	{r7}
 800919c:	4770      	bx	lr

0800919e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800919e:	b480      	push	{r7}
 80091a0:	b087      	sub	sp, #28
 80091a2:	af00      	add	r7, sp, #0
 80091a4:	60f8      	str	r0, [r7, #12]
 80091a6:	60b9      	str	r1, [r7, #8]
 80091a8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80091aa:	68fb      	ldr	r3, [r7, #12]
 80091ac:	6a1b      	ldr	r3, [r3, #32]
 80091ae:	f023 0210 	bic.w	r2, r3, #16
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80091b6:	68fb      	ldr	r3, [r7, #12]
 80091b8:	699b      	ldr	r3, [r3, #24]
 80091ba:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	6a1b      	ldr	r3, [r3, #32]
 80091c0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80091c8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	031b      	lsls	r3, r3, #12
 80091ce:	697a      	ldr	r2, [r7, #20]
 80091d0:	4313      	orrs	r3, r2
 80091d2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80091d4:	693b      	ldr	r3, [r7, #16]
 80091d6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80091da:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80091dc:	68bb      	ldr	r3, [r7, #8]
 80091de:	011b      	lsls	r3, r3, #4
 80091e0:	693a      	ldr	r2, [r7, #16]
 80091e2:	4313      	orrs	r3, r2
 80091e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	697a      	ldr	r2, [r7, #20]
 80091ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	693a      	ldr	r2, [r7, #16]
 80091f0:	621a      	str	r2, [r3, #32]
}
 80091f2:	bf00      	nop
 80091f4:	371c      	adds	r7, #28
 80091f6:	46bd      	mov	sp, r7
 80091f8:	bc80      	pop	{r7}
 80091fa:	4770      	bx	lr

080091fc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800920c:	68fb      	ldr	r3, [r7, #12]
 800920e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009212:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009214:	683a      	ldr	r2, [r7, #0]
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	4313      	orrs	r3, r2
 800921a:	f043 0307 	orr.w	r3, r3, #7
 800921e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	68fa      	ldr	r2, [r7, #12]
 8009224:	609a      	str	r2, [r3, #8]
}
 8009226:	bf00      	nop
 8009228:	3714      	adds	r7, #20
 800922a:	46bd      	mov	sp, r7
 800922c:	bc80      	pop	{r7}
 800922e:	4770      	bx	lr

08009230 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009230:	b480      	push	{r7}
 8009232:	b087      	sub	sp, #28
 8009234:	af00      	add	r7, sp, #0
 8009236:	60f8      	str	r0, [r7, #12]
 8009238:	60b9      	str	r1, [r7, #8]
 800923a:	607a      	str	r2, [r7, #4]
 800923c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800923e:	68fb      	ldr	r3, [r7, #12]
 8009240:	689b      	ldr	r3, [r3, #8]
 8009242:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009244:	697b      	ldr	r3, [r7, #20]
 8009246:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800924a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800924c:	683b      	ldr	r3, [r7, #0]
 800924e:	021a      	lsls	r2, r3, #8
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	431a      	orrs	r2, r3
 8009254:	68bb      	ldr	r3, [r7, #8]
 8009256:	4313      	orrs	r3, r2
 8009258:	697a      	ldr	r2, [r7, #20]
 800925a:	4313      	orrs	r3, r2
 800925c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	697a      	ldr	r2, [r7, #20]
 8009262:	609a      	str	r2, [r3, #8]
}
 8009264:	bf00      	nop
 8009266:	371c      	adds	r7, #28
 8009268:	46bd      	mov	sp, r7
 800926a:	bc80      	pop	{r7}
 800926c:	4770      	bx	lr

0800926e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800926e:	b480      	push	{r7}
 8009270:	b087      	sub	sp, #28
 8009272:	af00      	add	r7, sp, #0
 8009274:	60f8      	str	r0, [r7, #12]
 8009276:	60b9      	str	r1, [r7, #8]
 8009278:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800927a:	68bb      	ldr	r3, [r7, #8]
 800927c:	f003 031f 	and.w	r3, r3, #31
 8009280:	2201      	movs	r2, #1
 8009282:	fa02 f303 	lsl.w	r3, r2, r3
 8009286:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	6a1a      	ldr	r2, [r3, #32]
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	43db      	mvns	r3, r3
 8009290:	401a      	ands	r2, r3
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	6a1a      	ldr	r2, [r3, #32]
 800929a:	68bb      	ldr	r3, [r7, #8]
 800929c:	f003 031f 	and.w	r3, r3, #31
 80092a0:	6879      	ldr	r1, [r7, #4]
 80092a2:	fa01 f303 	lsl.w	r3, r1, r3
 80092a6:	431a      	orrs	r2, r3
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	621a      	str	r2, [r3, #32]
}
 80092ac:	bf00      	nop
 80092ae:	371c      	adds	r7, #28
 80092b0:	46bd      	mov	sp, r7
 80092b2:	bc80      	pop	{r7}
 80092b4:	4770      	bx	lr
	...

080092b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80092b8:	b480      	push	{r7}
 80092ba:	b085      	sub	sp, #20
 80092bc:	af00      	add	r7, sp, #0
 80092be:	6078      	str	r0, [r7, #4]
 80092c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80092c8:	2b01      	cmp	r3, #1
 80092ca:	d101      	bne.n	80092d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80092cc:	2302      	movs	r3, #2
 80092ce:	e046      	b.n	800935e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2201      	movs	r2, #1
 80092d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	2202      	movs	r2, #2
 80092dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80092e0:	687b      	ldr	r3, [r7, #4]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	685b      	ldr	r3, [r3, #4]
 80092e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	689b      	ldr	r3, [r3, #8]
 80092ee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80092f0:	68fb      	ldr	r3, [r7, #12]
 80092f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80092f6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80092f8:	683b      	ldr	r3, [r7, #0]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	68fa      	ldr	r2, [r7, #12]
 80092fe:	4313      	orrs	r3, r2
 8009300:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	68fa      	ldr	r2, [r7, #12]
 8009308:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009312:	d00e      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	4a13      	ldr	r2, [pc, #76]	; (8009368 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800931a:	4293      	cmp	r3, r2
 800931c:	d009      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	4a12      	ldr	r2, [pc, #72]	; (800936c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8009324:	4293      	cmp	r3, r2
 8009326:	d004      	beq.n	8009332 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	681b      	ldr	r3, [r3, #0]
 800932c:	4a10      	ldr	r2, [pc, #64]	; (8009370 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800932e:	4293      	cmp	r3, r2
 8009330:	d10c      	bne.n	800934c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009332:	68bb      	ldr	r3, [r7, #8]
 8009334:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009338:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	685b      	ldr	r3, [r3, #4]
 800933e:	68ba      	ldr	r2, [r7, #8]
 8009340:	4313      	orrs	r3, r2
 8009342:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	68ba      	ldr	r2, [r7, #8]
 800934a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	2201      	movs	r2, #1
 8009350:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8009354:	687b      	ldr	r3, [r7, #4]
 8009356:	2200      	movs	r2, #0
 8009358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 800935c:	2300      	movs	r3, #0
}
 800935e:	4618      	mov	r0, r3
 8009360:	3714      	adds	r7, #20
 8009362:	46bd      	mov	sp, r7
 8009364:	bc80      	pop	{r7}
 8009366:	4770      	bx	lr
 8009368:	40000400 	.word	0x40000400
 800936c:	40000800 	.word	0x40000800
 8009370:	40010800 	.word	0x40010800

08009374 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 8009374:	b480      	push	{r7}
 8009376:	b085      	sub	sp, #20
 8009378:	af00      	add	r7, sp, #0
 800937a:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	2200      	movs	r2, #0
 8009380:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 8009384:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 8009388:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 800938a:	68fb      	ldr	r3, [r7, #12]
 800938c:	b29a      	uxth	r2, r3
 800938e:	687b      	ldr	r3, [r7, #4]
 8009390:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8009394:	2300      	movs	r3, #0
}
 8009396:	4618      	mov	r0, r3
 8009398:	3714      	adds	r7, #20
 800939a:	46bd      	mov	sp, r7
 800939c:	bc80      	pop	{r7}
 800939e:	4770      	bx	lr

080093a0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80093a0:	b480      	push	{r7}
 80093a2:	b085      	sub	sp, #20
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80093a8:	f44f 433f 	mov.w	r3, #48896	; 0xbf00
 80093ac:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80093b4:	b29a      	uxth	r2, r3
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	b29b      	uxth	r3, r3
 80093ba:	43db      	mvns	r3, r3
 80093bc:	b29b      	uxth	r3, r3
 80093be:	4013      	ands	r3, r2
 80093c0:	b29a      	uxth	r2, r3
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80093c8:	2300      	movs	r3, #0
}
 80093ca:	4618      	mov	r0, r3
 80093cc:	3714      	adds	r7, #20
 80093ce:	46bd      	mov	sp, r7
 80093d0:	bc80      	pop	{r7}
 80093d2:	4770      	bx	lr

080093d4 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80093d4:	b084      	sub	sp, #16
 80093d6:	b480      	push	{r7}
 80093d8:	b083      	sub	sp, #12
 80093da:	af00      	add	r7, sp, #0
 80093dc:	6078      	str	r0, [r7, #4]
 80093de:	f107 0014 	add.w	r0, r7, #20
 80093e2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	2201      	movs	r2, #1
 80093ea:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2200      	movs	r2, #0
 80093f2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	2200      	movs	r2, #0
 80093fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	2200      	movs	r2, #0
 8009402:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50

  return HAL_OK;
 8009406:	2300      	movs	r3, #0
}
 8009408:	4618      	mov	r0, r3
 800940a:	370c      	adds	r7, #12
 800940c:	46bd      	mov	sp, r7
 800940e:	bc80      	pop	{r7}
 8009410:	b004      	add	sp, #16
 8009412:	4770      	bx	lr

08009414 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009414:	b480      	push	{r7}
 8009416:	b09b      	sub	sp, #108	; 0x6c
 8009418:	af00      	add	r7, sp, #0
 800941a:	6078      	str	r0, [r7, #4]
 800941c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800941e:	2300      	movs	r3, #0
 8009420:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	683b      	ldr	r3, [r7, #0]
 8009428:	781b      	ldrb	r3, [r3, #0]
 800942a:	009b      	lsls	r3, r3, #2
 800942c:	4413      	add	r3, r2
 800942e:	881b      	ldrh	r3, [r3, #0]
 8009430:	b29b      	uxth	r3, r3
 8009432:	f423 43ec 	bic.w	r3, r3, #30208	; 0x7600
 8009436:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800943a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64

  /* initialize Endpoint */
  switch (ep->type)
 800943e:	683b      	ldr	r3, [r7, #0]
 8009440:	78db      	ldrb	r3, [r3, #3]
 8009442:	2b03      	cmp	r3, #3
 8009444:	d81f      	bhi.n	8009486 <USB_ActivateEndpoint+0x72>
 8009446:	a201      	add	r2, pc, #4	; (adr r2, 800944c <USB_ActivateEndpoint+0x38>)
 8009448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800944c:	0800945d 	.word	0x0800945d
 8009450:	08009479 	.word	0x08009479
 8009454:	0800948f 	.word	0x0800948f
 8009458:	0800946b 	.word	0x0800946b
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800945c:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 8009460:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009464:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009468:	e012      	b.n	8009490 <USB_ActivateEndpoint+0x7c>
    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
      break;

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 800946a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800946e:	f443 63c0 	orr.w	r3, r3, #1536	; 0x600
 8009472:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009476:	e00b      	b.n	8009490 <USB_ActivateEndpoint+0x7c>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8009478:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800947c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009480:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
      break;
 8009484:	e004      	b.n	8009490 <USB_ActivateEndpoint+0x7c>

    default:
      ret = HAL_ERROR;
 8009486:	2301      	movs	r3, #1
 8009488:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
      break;
 800948c:	e000      	b.n	8009490 <USB_ActivateEndpoint+0x7c>
      break;
 800948e:	bf00      	nop
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8009490:	687a      	ldr	r2, [r7, #4]
 8009492:	683b      	ldr	r3, [r7, #0]
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	009b      	lsls	r3, r3, #2
 8009498:	441a      	add	r2, r3
 800949a:	f8b7 3064 	ldrh.w	r3, [r7, #100]	; 0x64
 800949e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094a2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094a6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094ae:	b29b      	uxth	r3, r3
 80094b0:	8013      	strh	r3, [r2, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 80094b2:	687a      	ldr	r2, [r7, #4]
 80094b4:	683b      	ldr	r3, [r7, #0]
 80094b6:	781b      	ldrb	r3, [r3, #0]
 80094b8:	009b      	lsls	r3, r3, #2
 80094ba:	4413      	add	r3, r2
 80094bc:	881b      	ldrh	r3, [r3, #0]
 80094be:	b29b      	uxth	r3, r3
 80094c0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80094c4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80094c8:	b29a      	uxth	r2, r3
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	781b      	ldrb	r3, [r3, #0]
 80094ce:	b29b      	uxth	r3, r3
 80094d0:	4313      	orrs	r3, r2
 80094d2:	f8a7 305e 	strh.w	r3, [r7, #94]	; 0x5e
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	683b      	ldr	r3, [r7, #0]
 80094da:	781b      	ldrb	r3, [r3, #0]
 80094dc:	009b      	lsls	r3, r3, #2
 80094de:	441a      	add	r2, r3
 80094e0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
 80094e4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80094e8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80094ec:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80094f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094f4:	b29b      	uxth	r3, r3
 80094f6:	8013      	strh	r3, [r2, #0]

  if (ep->doublebuffer == 0U)
 80094f8:	683b      	ldr	r3, [r7, #0]
 80094fa:	7b1b      	ldrb	r3, [r3, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	f040 8149 	bne.w	8009794 <USB_ActivateEndpoint+0x380>
  {
    if (ep->is_in != 0U)
 8009502:	683b      	ldr	r3, [r7, #0]
 8009504:	785b      	ldrb	r3, [r3, #1]
 8009506:	2b00      	cmp	r3, #0
 8009508:	f000 8084 	beq.w	8009614 <USB_ActivateEndpoint+0x200>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	617b      	str	r3, [r7, #20]
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009516:	b29b      	uxth	r3, r3
 8009518:	461a      	mov	r2, r3
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	4413      	add	r3, r2
 800951e:	617b      	str	r3, [r7, #20]
 8009520:	683b      	ldr	r3, [r7, #0]
 8009522:	781b      	ldrb	r3, [r3, #0]
 8009524:	011a      	lsls	r2, r3, #4
 8009526:	697b      	ldr	r3, [r7, #20]
 8009528:	4413      	add	r3, r2
 800952a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800952e:	613b      	str	r3, [r7, #16]
 8009530:	683b      	ldr	r3, [r7, #0]
 8009532:	88db      	ldrh	r3, [r3, #6]
 8009534:	085b      	lsrs	r3, r3, #1
 8009536:	b29b      	uxth	r3, r3
 8009538:	005b      	lsls	r3, r3, #1
 800953a:	b29a      	uxth	r2, r3
 800953c:	693b      	ldr	r3, [r7, #16]
 800953e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009540:	687a      	ldr	r2, [r7, #4]
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	781b      	ldrb	r3, [r3, #0]
 8009546:	009b      	lsls	r3, r3, #2
 8009548:	4413      	add	r3, r2
 800954a:	881b      	ldrh	r3, [r3, #0]
 800954c:	81fb      	strh	r3, [r7, #14]
 800954e:	89fb      	ldrh	r3, [r7, #14]
 8009550:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009554:	2b00      	cmp	r3, #0
 8009556:	d01b      	beq.n	8009590 <USB_ActivateEndpoint+0x17c>
 8009558:	687a      	ldr	r2, [r7, #4]
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	781b      	ldrb	r3, [r3, #0]
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	881b      	ldrh	r3, [r3, #0]
 8009564:	b29b      	uxth	r3, r3
 8009566:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800956a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800956e:	81bb      	strh	r3, [r7, #12]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	683b      	ldr	r3, [r7, #0]
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	009b      	lsls	r3, r3, #2
 8009578:	441a      	add	r2, r3
 800957a:	89bb      	ldrh	r3, [r7, #12]
 800957c:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009580:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009584:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009588:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800958c:	b29b      	uxth	r3, r3
 800958e:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009590:	683b      	ldr	r3, [r7, #0]
 8009592:	78db      	ldrb	r3, [r3, #3]
 8009594:	2b01      	cmp	r3, #1
 8009596:	d020      	beq.n	80095da <USB_ActivateEndpoint+0x1c6>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009598:	687a      	ldr	r2, [r7, #4]
 800959a:	683b      	ldr	r3, [r7, #0]
 800959c:	781b      	ldrb	r3, [r3, #0]
 800959e:	009b      	lsls	r3, r3, #2
 80095a0:	4413      	add	r3, r2
 80095a2:	881b      	ldrh	r3, [r3, #0]
 80095a4:	b29b      	uxth	r3, r3
 80095a6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095ae:	813b      	strh	r3, [r7, #8]
 80095b0:	893b      	ldrh	r3, [r7, #8]
 80095b2:	f083 0320 	eor.w	r3, r3, #32
 80095b6:	813b      	strh	r3, [r7, #8]
 80095b8:	687a      	ldr	r2, [r7, #4]
 80095ba:	683b      	ldr	r3, [r7, #0]
 80095bc:	781b      	ldrb	r3, [r3, #0]
 80095be:	009b      	lsls	r3, r3, #2
 80095c0:	441a      	add	r2, r3
 80095c2:	893b      	ldrh	r3, [r7, #8]
 80095c4:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80095c8:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80095cc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80095d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80095d4:	b29b      	uxth	r3, r3
 80095d6:	8013      	strh	r3, [r2, #0]
 80095d8:	e27f      	b.n	8009ada <USB_ActivateEndpoint+0x6c6>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80095da:	687a      	ldr	r2, [r7, #4]
 80095dc:	683b      	ldr	r3, [r7, #0]
 80095de:	781b      	ldrb	r3, [r3, #0]
 80095e0:	009b      	lsls	r3, r3, #2
 80095e2:	4413      	add	r3, r2
 80095e4:	881b      	ldrh	r3, [r3, #0]
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80095ec:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80095f0:	817b      	strh	r3, [r7, #10]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	683b      	ldr	r3, [r7, #0]
 80095f6:	781b      	ldrb	r3, [r3, #0]
 80095f8:	009b      	lsls	r3, r3, #2
 80095fa:	441a      	add	r2, r3
 80095fc:	897b      	ldrh	r3, [r7, #10]
 80095fe:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009602:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009606:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800960a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800960e:	b29b      	uxth	r3, r3
 8009610:	8013      	strh	r3, [r2, #0]
 8009612:	e262      	b.n	8009ada <USB_ActivateEndpoint+0x6c6>
      }
    }
    else
    {
      /*Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800961e:	b29b      	uxth	r3, r3
 8009620:	461a      	mov	r2, r3
 8009622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009624:	4413      	add	r3, r2
 8009626:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009628:	683b      	ldr	r3, [r7, #0]
 800962a:	781b      	ldrb	r3, [r3, #0]
 800962c:	011a      	lsls	r2, r3, #4
 800962e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009630:	4413      	add	r3, r2
 8009632:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009636:	62bb      	str	r3, [r7, #40]	; 0x28
 8009638:	683b      	ldr	r3, [r7, #0]
 800963a:	88db      	ldrh	r3, [r3, #6]
 800963c:	085b      	lsrs	r3, r3, #1
 800963e:	b29b      	uxth	r3, r3
 8009640:	005b      	lsls	r3, r3, #1
 8009642:	b29a      	uxth	r2, r3
 8009644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009646:	801a      	strh	r2, [r3, #0]

      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	627b      	str	r3, [r7, #36]	; 0x24
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009652:	b29b      	uxth	r3, r3
 8009654:	461a      	mov	r2, r3
 8009656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009658:	4413      	add	r3, r2
 800965a:	627b      	str	r3, [r7, #36]	; 0x24
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	781b      	ldrb	r3, [r3, #0]
 8009660:	011a      	lsls	r2, r3, #4
 8009662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009664:	4413      	add	r3, r2
 8009666:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800966a:	623b      	str	r3, [r7, #32]
 800966c:	683b      	ldr	r3, [r7, #0]
 800966e:	691b      	ldr	r3, [r3, #16]
 8009670:	2b00      	cmp	r3, #0
 8009672:	d112      	bne.n	800969a <USB_ActivateEndpoint+0x286>
 8009674:	6a3b      	ldr	r3, [r7, #32]
 8009676:	881b      	ldrh	r3, [r3, #0]
 8009678:	b29b      	uxth	r3, r3
 800967a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800967e:	b29a      	uxth	r2, r3
 8009680:	6a3b      	ldr	r3, [r7, #32]
 8009682:	801a      	strh	r2, [r3, #0]
 8009684:	6a3b      	ldr	r3, [r7, #32]
 8009686:	881b      	ldrh	r3, [r3, #0]
 8009688:	b29b      	uxth	r3, r3
 800968a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800968e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8009692:	b29a      	uxth	r2, r3
 8009694:	6a3b      	ldr	r3, [r7, #32]
 8009696:	801a      	strh	r2, [r3, #0]
 8009698:	e02f      	b.n	80096fa <USB_ActivateEndpoint+0x2e6>
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	691b      	ldr	r3, [r3, #16]
 800969e:	2b3e      	cmp	r3, #62	; 0x3e
 80096a0:	d813      	bhi.n	80096ca <USB_ActivateEndpoint+0x2b6>
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	691b      	ldr	r3, [r3, #16]
 80096a6:	085b      	lsrs	r3, r3, #1
 80096a8:	663b      	str	r3, [r7, #96]	; 0x60
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	691b      	ldr	r3, [r3, #16]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d002      	beq.n	80096bc <USB_ActivateEndpoint+0x2a8>
 80096b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096b8:	3301      	adds	r3, #1
 80096ba:	663b      	str	r3, [r7, #96]	; 0x60
 80096bc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096be:	b29b      	uxth	r3, r3
 80096c0:	029b      	lsls	r3, r3, #10
 80096c2:	b29a      	uxth	r2, r3
 80096c4:	6a3b      	ldr	r3, [r7, #32]
 80096c6:	801a      	strh	r2, [r3, #0]
 80096c8:	e017      	b.n	80096fa <USB_ActivateEndpoint+0x2e6>
 80096ca:	683b      	ldr	r3, [r7, #0]
 80096cc:	691b      	ldr	r3, [r3, #16]
 80096ce:	095b      	lsrs	r3, r3, #5
 80096d0:	663b      	str	r3, [r7, #96]	; 0x60
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	691b      	ldr	r3, [r3, #16]
 80096d6:	f003 031f 	and.w	r3, r3, #31
 80096da:	2b00      	cmp	r3, #0
 80096dc:	d102      	bne.n	80096e4 <USB_ActivateEndpoint+0x2d0>
 80096de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096e0:	3b01      	subs	r3, #1
 80096e2:	663b      	str	r3, [r7, #96]	; 0x60
 80096e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096e6:	b29b      	uxth	r3, r3
 80096e8:	029b      	lsls	r3, r3, #10
 80096ea:	b29b      	uxth	r3, r3
 80096ec:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80096f0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80096f4:	b29a      	uxth	r2, r3
 80096f6:	6a3b      	ldr	r3, [r7, #32]
 80096f8:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80096fa:	687a      	ldr	r2, [r7, #4]
 80096fc:	683b      	ldr	r3, [r7, #0]
 80096fe:	781b      	ldrb	r3, [r3, #0]
 8009700:	009b      	lsls	r3, r3, #2
 8009702:	4413      	add	r3, r2
 8009704:	881b      	ldrh	r3, [r3, #0]
 8009706:	83fb      	strh	r3, [r7, #30]
 8009708:	8bfb      	ldrh	r3, [r7, #30]
 800970a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800970e:	2b00      	cmp	r3, #0
 8009710:	d01b      	beq.n	800974a <USB_ActivateEndpoint+0x336>
 8009712:	687a      	ldr	r2, [r7, #4]
 8009714:	683b      	ldr	r3, [r7, #0]
 8009716:	781b      	ldrb	r3, [r3, #0]
 8009718:	009b      	lsls	r3, r3, #2
 800971a:	4413      	add	r3, r2
 800971c:	881b      	ldrh	r3, [r3, #0]
 800971e:	b29b      	uxth	r3, r3
 8009720:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009724:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009728:	83bb      	strh	r3, [r7, #28]
 800972a:	687a      	ldr	r2, [r7, #4]
 800972c:	683b      	ldr	r3, [r7, #0]
 800972e:	781b      	ldrb	r3, [r3, #0]
 8009730:	009b      	lsls	r3, r3, #2
 8009732:	441a      	add	r2, r3
 8009734:	8bbb      	ldrh	r3, [r7, #28]
 8009736:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800973a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800973e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009742:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009746:	b29b      	uxth	r3, r3
 8009748:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800974a:	687a      	ldr	r2, [r7, #4]
 800974c:	683b      	ldr	r3, [r7, #0]
 800974e:	781b      	ldrb	r3, [r3, #0]
 8009750:	009b      	lsls	r3, r3, #2
 8009752:	4413      	add	r3, r2
 8009754:	881b      	ldrh	r3, [r3, #0]
 8009756:	b29b      	uxth	r3, r3
 8009758:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800975c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009760:	837b      	strh	r3, [r7, #26]
 8009762:	8b7b      	ldrh	r3, [r7, #26]
 8009764:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009768:	837b      	strh	r3, [r7, #26]
 800976a:	8b7b      	ldrh	r3, [r7, #26]
 800976c:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009770:	837b      	strh	r3, [r7, #26]
 8009772:	687a      	ldr	r2, [r7, #4]
 8009774:	683b      	ldr	r3, [r7, #0]
 8009776:	781b      	ldrb	r3, [r3, #0]
 8009778:	009b      	lsls	r3, r3, #2
 800977a:	441a      	add	r2, r3
 800977c:	8b7b      	ldrh	r3, [r7, #26]
 800977e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009782:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009786:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800978a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800978e:	b29b      	uxth	r3, r3
 8009790:	8013      	strh	r3, [r2, #0]
 8009792:	e1a2      	b.n	8009ada <USB_ActivateEndpoint+0x6c6>
  }
  /*Double Buffer*/
  else
  {
    /* Set the endpoint as double buffered */
    PCD_SET_EP_DBUF(USBx, ep->num);
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	683b      	ldr	r3, [r7, #0]
 8009798:	781b      	ldrb	r3, [r3, #0]
 800979a:	009b      	lsls	r3, r3, #2
 800979c:	4413      	add	r3, r2
 800979e:	881b      	ldrh	r3, [r3, #0]
 80097a0:	b29b      	uxth	r3, r3
 80097a2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80097a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80097aa:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
 80097ae:	687a      	ldr	r2, [r7, #4]
 80097b0:	683b      	ldr	r3, [r7, #0]
 80097b2:	781b      	ldrb	r3, [r3, #0]
 80097b4:	009b      	lsls	r3, r3, #2
 80097b6:	441a      	add	r2, r3
 80097b8:	f8b7 305c 	ldrh.w	r3, [r7, #92]	; 0x5c
 80097bc:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80097c0:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80097c4:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 80097c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80097cc:	b29b      	uxth	r3, r3
 80097ce:	8013      	strh	r3, [r2, #0]

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	65bb      	str	r3, [r7, #88]	; 0x58
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80097da:	b29b      	uxth	r3, r3
 80097dc:	461a      	mov	r2, r3
 80097de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097e0:	4413      	add	r3, r2
 80097e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80097e4:	683b      	ldr	r3, [r7, #0]
 80097e6:	781b      	ldrb	r3, [r3, #0]
 80097e8:	011a      	lsls	r2, r3, #4
 80097ea:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097ec:	4413      	add	r3, r2
 80097ee:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80097f2:	657b      	str	r3, [r7, #84]	; 0x54
 80097f4:	683b      	ldr	r3, [r7, #0]
 80097f6:	891b      	ldrh	r3, [r3, #8]
 80097f8:	085b      	lsrs	r3, r3, #1
 80097fa:	b29b      	uxth	r3, r3
 80097fc:	005b      	lsls	r3, r3, #1
 80097fe:	b29a      	uxth	r2, r3
 8009800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009802:	801a      	strh	r2, [r3, #0]
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	653b      	str	r3, [r7, #80]	; 0x50
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800980e:	b29b      	uxth	r3, r3
 8009810:	461a      	mov	r2, r3
 8009812:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009814:	4413      	add	r3, r2
 8009816:	653b      	str	r3, [r7, #80]	; 0x50
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	781b      	ldrb	r3, [r3, #0]
 800981c:	011a      	lsls	r2, r3, #4
 800981e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009820:	4413      	add	r3, r2
 8009822:	f503 6381 	add.w	r3, r3, #1032	; 0x408
 8009826:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	895b      	ldrh	r3, [r3, #10]
 800982c:	085b      	lsrs	r3, r3, #1
 800982e:	b29b      	uxth	r3, r3
 8009830:	005b      	lsls	r3, r3, #1
 8009832:	b29a      	uxth	r2, r3
 8009834:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009836:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	785b      	ldrb	r3, [r3, #1]
 800983c:	2b00      	cmp	r3, #0
 800983e:	f040 8091 	bne.w	8009964 <USB_ActivateEndpoint+0x550>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	009b      	lsls	r3, r3, #2
 800984a:	4413      	add	r3, r2
 800984c:	881b      	ldrh	r3, [r3, #0]
 800984e:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8009850:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8009852:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009856:	2b00      	cmp	r3, #0
 8009858:	d01b      	beq.n	8009892 <USB_ActivateEndpoint+0x47e>
 800985a:	687a      	ldr	r2, [r7, #4]
 800985c:	683b      	ldr	r3, [r7, #0]
 800985e:	781b      	ldrb	r3, [r3, #0]
 8009860:	009b      	lsls	r3, r3, #2
 8009862:	4413      	add	r3, r2
 8009864:	881b      	ldrh	r3, [r3, #0]
 8009866:	b29b      	uxth	r3, r3
 8009868:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800986c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009870:	877b      	strh	r3, [r7, #58]	; 0x3a
 8009872:	687a      	ldr	r2, [r7, #4]
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	781b      	ldrb	r3, [r3, #0]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	441a      	add	r2, r3
 800987c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 800987e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009882:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009886:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800988a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800988e:	b29b      	uxth	r3, r3
 8009890:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009892:	687a      	ldr	r2, [r7, #4]
 8009894:	683b      	ldr	r3, [r7, #0]
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	009b      	lsls	r3, r3, #2
 800989a:	4413      	add	r3, r2
 800989c:	881b      	ldrh	r3, [r3, #0]
 800989e:	873b      	strh	r3, [r7, #56]	; 0x38
 80098a0:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80098a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80098a6:	2b00      	cmp	r3, #0
 80098a8:	d01b      	beq.n	80098e2 <USB_ActivateEndpoint+0x4ce>
 80098aa:	687a      	ldr	r2, [r7, #4]
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	781b      	ldrb	r3, [r3, #0]
 80098b0:	009b      	lsls	r3, r3, #2
 80098b2:	4413      	add	r3, r2
 80098b4:	881b      	ldrh	r3, [r3, #0]
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80098bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098c0:	86fb      	strh	r3, [r7, #54]	; 0x36
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	683b      	ldr	r3, [r7, #0]
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	009b      	lsls	r3, r3, #2
 80098ca:	441a      	add	r2, r3
 80098cc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80098ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80098d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80098d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80098da:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80098de:	b29b      	uxth	r3, r3
 80098e0:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80098e2:	687a      	ldr	r2, [r7, #4]
 80098e4:	683b      	ldr	r3, [r7, #0]
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	009b      	lsls	r3, r3, #2
 80098ea:	4413      	add	r3, r2
 80098ec:	881b      	ldrh	r3, [r3, #0]
 80098ee:	b29b      	uxth	r3, r3
 80098f0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80098f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80098f8:	86bb      	strh	r3, [r7, #52]	; 0x34
 80098fa:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80098fc:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8009900:	86bb      	strh	r3, [r7, #52]	; 0x34
 8009902:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009904:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 8009908:	86bb      	strh	r3, [r7, #52]	; 0x34
 800990a:	687a      	ldr	r2, [r7, #4]
 800990c:	683b      	ldr	r3, [r7, #0]
 800990e:	781b      	ldrb	r3, [r3, #0]
 8009910:	009b      	lsls	r3, r3, #2
 8009912:	441a      	add	r2, r3
 8009914:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8009916:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800991a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800991e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009926:	b29b      	uxth	r3, r3
 8009928:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800992a:	687a      	ldr	r2, [r7, #4]
 800992c:	683b      	ldr	r3, [r7, #0]
 800992e:	781b      	ldrb	r3, [r3, #0]
 8009930:	009b      	lsls	r3, r3, #2
 8009932:	4413      	add	r3, r2
 8009934:	881b      	ldrh	r3, [r3, #0]
 8009936:	b29b      	uxth	r3, r3
 8009938:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800993c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009940:	867b      	strh	r3, [r7, #50]	; 0x32
 8009942:	687a      	ldr	r2, [r7, #4]
 8009944:	683b      	ldr	r3, [r7, #0]
 8009946:	781b      	ldrb	r3, [r3, #0]
 8009948:	009b      	lsls	r3, r3, #2
 800994a:	441a      	add	r2, r3
 800994c:	8e7b      	ldrh	r3, [r7, #50]	; 0x32
 800994e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009952:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009956:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800995a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800995e:	b29b      	uxth	r3, r3
 8009960:	8013      	strh	r3, [r2, #0]
 8009962:	e0ba      	b.n	8009ada <USB_ActivateEndpoint+0x6c6>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009964:	687a      	ldr	r2, [r7, #4]
 8009966:	683b      	ldr	r3, [r7, #0]
 8009968:	781b      	ldrb	r3, [r3, #0]
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	881b      	ldrh	r3, [r3, #0]
 8009970:	f8a7 304a 	strh.w	r3, [r7, #74]	; 0x4a
 8009974:	f8b7 304a 	ldrh.w	r3, [r7, #74]	; 0x4a
 8009978:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800997c:	2b00      	cmp	r3, #0
 800997e:	d01d      	beq.n	80099bc <USB_ActivateEndpoint+0x5a8>
 8009980:	687a      	ldr	r2, [r7, #4]
 8009982:	683b      	ldr	r3, [r7, #0]
 8009984:	781b      	ldrb	r3, [r3, #0]
 8009986:	009b      	lsls	r3, r3, #2
 8009988:	4413      	add	r3, r2
 800998a:	881b      	ldrh	r3, [r3, #0]
 800998c:	b29b      	uxth	r3, r3
 800998e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009992:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009996:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
 800999a:	687a      	ldr	r2, [r7, #4]
 800999c:	683b      	ldr	r3, [r7, #0]
 800999e:	781b      	ldrb	r3, [r3, #0]
 80099a0:	009b      	lsls	r3, r3, #2
 80099a2:	441a      	add	r2, r3
 80099a4:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80099a8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 80099ac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 80099b0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80099b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80099b8:	b29b      	uxth	r3, r3
 80099ba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	683b      	ldr	r3, [r7, #0]
 80099c0:	781b      	ldrb	r3, [r3, #0]
 80099c2:	009b      	lsls	r3, r3, #2
 80099c4:	4413      	add	r3, r2
 80099c6:	881b      	ldrh	r3, [r3, #0]
 80099c8:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
 80099cc:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80099d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d01d      	beq.n	8009a14 <USB_ActivateEndpoint+0x600>
 80099d8:	687a      	ldr	r2, [r7, #4]
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	781b      	ldrb	r3, [r3, #0]
 80099de:	009b      	lsls	r3, r3, #2
 80099e0:	4413      	add	r3, r2
 80099e2:	881b      	ldrh	r3, [r3, #0]
 80099e4:	b29b      	uxth	r3, r3
 80099e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80099ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099ee:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
 80099f2:	687a      	ldr	r2, [r7, #4]
 80099f4:	683b      	ldr	r3, [r7, #0]
 80099f6:	781b      	ldrb	r3, [r3, #0]
 80099f8:	009b      	lsls	r3, r3, #2
 80099fa:	441a      	add	r2, r3
 80099fc:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8009a00:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a04:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a08:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a0c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009a10:	b29b      	uxth	r3, r3
 8009a12:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8009a14:	683b      	ldr	r3, [r7, #0]
 8009a16:	78db      	ldrb	r3, [r3, #3]
 8009a18:	2b01      	cmp	r3, #1
 8009a1a:	d024      	beq.n	8009a66 <USB_ActivateEndpoint+0x652>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8009a1c:	687a      	ldr	r2, [r7, #4]
 8009a1e:	683b      	ldr	r3, [r7, #0]
 8009a20:	781b      	ldrb	r3, [r3, #0]
 8009a22:	009b      	lsls	r3, r3, #2
 8009a24:	4413      	add	r3, r2
 8009a26:	881b      	ldrh	r3, [r3, #0]
 8009a28:	b29b      	uxth	r3, r3
 8009a2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a32:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009a36:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a3a:	f083 0320 	eor.w	r3, r3, #32
 8009a3e:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	683b      	ldr	r3, [r7, #0]
 8009a46:	781b      	ldrb	r3, [r3, #0]
 8009a48:	009b      	lsls	r3, r3, #2
 8009a4a:	441a      	add	r2, r3
 8009a4c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8009a50:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a54:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a5c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a60:	b29b      	uxth	r3, r3
 8009a62:	8013      	strh	r3, [r2, #0]
 8009a64:	e01d      	b.n	8009aa2 <USB_ActivateEndpoint+0x68e>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009a66:	687a      	ldr	r2, [r7, #4]
 8009a68:	683b      	ldr	r3, [r7, #0]
 8009a6a:	781b      	ldrb	r3, [r3, #0]
 8009a6c:	009b      	lsls	r3, r3, #2
 8009a6e:	4413      	add	r3, r2
 8009a70:	881b      	ldrh	r3, [r3, #0]
 8009a72:	b29b      	uxth	r3, r3
 8009a74:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009a78:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009a7c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 8009a80:	687a      	ldr	r2, [r7, #4]
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	781b      	ldrb	r3, [r3, #0]
 8009a86:	009b      	lsls	r3, r3, #2
 8009a88:	441a      	add	r2, r3
 8009a8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8009a8e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009a92:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009a96:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009a9a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009a9e:	b29b      	uxth	r3, r3
 8009aa0:	8013      	strh	r3, [r2, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009aa2:	687a      	ldr	r2, [r7, #4]
 8009aa4:	683b      	ldr	r3, [r7, #0]
 8009aa6:	781b      	ldrb	r3, [r3, #0]
 8009aa8:	009b      	lsls	r3, r3, #2
 8009aaa:	4413      	add	r3, r2
 8009aac:	881b      	ldrh	r3, [r3, #0]
 8009aae:	b29b      	uxth	r3, r3
 8009ab0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ab8:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	683b      	ldr	r3, [r7, #0]
 8009abe:	781b      	ldrb	r3, [r3, #0]
 8009ac0:	009b      	lsls	r3, r3, #2
 8009ac2:	441a      	add	r2, r3
 8009ac4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8009ac6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009aca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ace:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009ad2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009ad6:	b29b      	uxth	r3, r3
 8009ad8:	8013      	strh	r3, [r2, #0]
    }
  }

  return ret;
 8009ada:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8009ade:	4618      	mov	r0, r3
 8009ae0:	376c      	adds	r7, #108	; 0x6c
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	bc80      	pop	{r7}
 8009ae6:	4770      	bx	lr

08009ae8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ae8:	b480      	push	{r7}
 8009aea:	b08d      	sub	sp, #52	; 0x34
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
 8009af0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	7b1b      	ldrb	r3, [r3, #12]
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	f040 808e 	bne.w	8009c18 <USB_DeactivateEndpoint+0x130>
  {
    if (ep->is_in != 0U)
 8009afc:	683b      	ldr	r3, [r7, #0]
 8009afe:	785b      	ldrb	r3, [r3, #1]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d044      	beq.n	8009b8e <USB_DeactivateEndpoint+0xa6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009b04:	687a      	ldr	r2, [r7, #4]
 8009b06:	683b      	ldr	r3, [r7, #0]
 8009b08:	781b      	ldrb	r3, [r3, #0]
 8009b0a:	009b      	lsls	r3, r3, #2
 8009b0c:	4413      	add	r3, r2
 8009b0e:	881b      	ldrh	r3, [r3, #0]
 8009b10:	81bb      	strh	r3, [r7, #12]
 8009b12:	89bb      	ldrh	r3, [r7, #12]
 8009b14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d01b      	beq.n	8009b54 <USB_DeactivateEndpoint+0x6c>
 8009b1c:	687a      	ldr	r2, [r7, #4]
 8009b1e:	683b      	ldr	r3, [r7, #0]
 8009b20:	781b      	ldrb	r3, [r3, #0]
 8009b22:	009b      	lsls	r3, r3, #2
 8009b24:	4413      	add	r3, r2
 8009b26:	881b      	ldrh	r3, [r3, #0]
 8009b28:	b29b      	uxth	r3, r3
 8009b2a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009b32:	817b      	strh	r3, [r7, #10]
 8009b34:	687a      	ldr	r2, [r7, #4]
 8009b36:	683b      	ldr	r3, [r7, #0]
 8009b38:	781b      	ldrb	r3, [r3, #0]
 8009b3a:	009b      	lsls	r3, r3, #2
 8009b3c:	441a      	add	r2, r3
 8009b3e:	897b      	ldrh	r3, [r7, #10]
 8009b40:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b44:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b4c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009b50:	b29b      	uxth	r3, r3
 8009b52:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009b54:	687a      	ldr	r2, [r7, #4]
 8009b56:	683b      	ldr	r3, [r7, #0]
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	009b      	lsls	r3, r3, #2
 8009b5c:	4413      	add	r3, r2
 8009b5e:	881b      	ldrh	r3, [r3, #0]
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009b6a:	813b      	strh	r3, [r7, #8]
 8009b6c:	687a      	ldr	r2, [r7, #4]
 8009b6e:	683b      	ldr	r3, [r7, #0]
 8009b70:	781b      	ldrb	r3, [r3, #0]
 8009b72:	009b      	lsls	r3, r3, #2
 8009b74:	441a      	add	r2, r3
 8009b76:	893b      	ldrh	r3, [r7, #8]
 8009b78:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009b7c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009b80:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009b84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	8013      	strh	r3, [r2, #0]
 8009b8c:	e192      	b.n	8009eb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009b8e:	687a      	ldr	r2, [r7, #4]
 8009b90:	683b      	ldr	r3, [r7, #0]
 8009b92:	781b      	ldrb	r3, [r3, #0]
 8009b94:	009b      	lsls	r3, r3, #2
 8009b96:	4413      	add	r3, r2
 8009b98:	881b      	ldrh	r3, [r3, #0]
 8009b9a:	827b      	strh	r3, [r7, #18]
 8009b9c:	8a7b      	ldrh	r3, [r7, #18]
 8009b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d01b      	beq.n	8009bde <USB_DeactivateEndpoint+0xf6>
 8009ba6:	687a      	ldr	r2, [r7, #4]
 8009ba8:	683b      	ldr	r3, [r7, #0]
 8009baa:	781b      	ldrb	r3, [r3, #0]
 8009bac:	009b      	lsls	r3, r3, #2
 8009bae:	4413      	add	r3, r2
 8009bb0:	881b      	ldrh	r3, [r3, #0]
 8009bb2:	b29b      	uxth	r3, r3
 8009bb4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009bb8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bbc:	823b      	strh	r3, [r7, #16]
 8009bbe:	687a      	ldr	r2, [r7, #4]
 8009bc0:	683b      	ldr	r3, [r7, #0]
 8009bc2:	781b      	ldrb	r3, [r3, #0]
 8009bc4:	009b      	lsls	r3, r3, #2
 8009bc6:	441a      	add	r2, r3
 8009bc8:	8a3b      	ldrh	r3, [r7, #16]
 8009bca:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009bce:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009bd2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009bd6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009bda:	b29b      	uxth	r3, r3
 8009bdc:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009bde:	687a      	ldr	r2, [r7, #4]
 8009be0:	683b      	ldr	r3, [r7, #0]
 8009be2:	781b      	ldrb	r3, [r3, #0]
 8009be4:	009b      	lsls	r3, r3, #2
 8009be6:	4413      	add	r3, r2
 8009be8:	881b      	ldrh	r3, [r3, #0]
 8009bea:	b29b      	uxth	r3, r3
 8009bec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009bf0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009bf4:	81fb      	strh	r3, [r7, #14]
 8009bf6:	687a      	ldr	r2, [r7, #4]
 8009bf8:	683b      	ldr	r3, [r7, #0]
 8009bfa:	781b      	ldrb	r3, [r3, #0]
 8009bfc:	009b      	lsls	r3, r3, #2
 8009bfe:	441a      	add	r2, r3
 8009c00:	89fb      	ldrh	r3, [r7, #14]
 8009c02:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c06:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c0a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009c0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c12:	b29b      	uxth	r3, r3
 8009c14:	8013      	strh	r3, [r2, #0]
 8009c16:	e14d      	b.n	8009eb4 <USB_DeactivateEndpoint+0x3cc>
    }
  }
  /*Double Buffer*/
  else
  {
    if (ep->is_in == 0U)
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	785b      	ldrb	r3, [r3, #1]
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	f040 80a5 	bne.w	8009d6c <USB_DeactivateEndpoint+0x284>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009c22:	687a      	ldr	r2, [r7, #4]
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	781b      	ldrb	r3, [r3, #0]
 8009c28:	009b      	lsls	r3, r3, #2
 8009c2a:	4413      	add	r3, r2
 8009c2c:	881b      	ldrh	r3, [r3, #0]
 8009c2e:	843b      	strh	r3, [r7, #32]
 8009c30:	8c3b      	ldrh	r3, [r7, #32]
 8009c32:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009c36:	2b00      	cmp	r3, #0
 8009c38:	d01b      	beq.n	8009c72 <USB_DeactivateEndpoint+0x18a>
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	683b      	ldr	r3, [r7, #0]
 8009c3e:	781b      	ldrb	r3, [r3, #0]
 8009c40:	009b      	lsls	r3, r3, #2
 8009c42:	4413      	add	r3, r2
 8009c44:	881b      	ldrh	r3, [r3, #0]
 8009c46:	b29b      	uxth	r3, r3
 8009c48:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009c50:	83fb      	strh	r3, [r7, #30]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	781b      	ldrb	r3, [r3, #0]
 8009c58:	009b      	lsls	r3, r3, #2
 8009c5a:	441a      	add	r2, r3
 8009c5c:	8bfb      	ldrh	r3, [r7, #30]
 8009c5e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009c62:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009c66:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009c6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009c6e:	b29b      	uxth	r3, r3
 8009c70:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009c72:	687a      	ldr	r2, [r7, #4]
 8009c74:	683b      	ldr	r3, [r7, #0]
 8009c76:	781b      	ldrb	r3, [r3, #0]
 8009c78:	009b      	lsls	r3, r3, #2
 8009c7a:	4413      	add	r3, r2
 8009c7c:	881b      	ldrh	r3, [r3, #0]
 8009c7e:	83bb      	strh	r3, [r7, #28]
 8009c80:	8bbb      	ldrh	r3, [r7, #28]
 8009c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d01b      	beq.n	8009cc2 <USB_DeactivateEndpoint+0x1da>
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	683b      	ldr	r3, [r7, #0]
 8009c8e:	781b      	ldrb	r3, [r3, #0]
 8009c90:	009b      	lsls	r3, r3, #2
 8009c92:	4413      	add	r3, r2
 8009c94:	881b      	ldrh	r3, [r3, #0]
 8009c96:	b29b      	uxth	r3, r3
 8009c98:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009ca0:	837b      	strh	r3, [r7, #26]
 8009ca2:	687a      	ldr	r2, [r7, #4]
 8009ca4:	683b      	ldr	r3, [r7, #0]
 8009ca6:	781b      	ldrb	r3, [r3, #0]
 8009ca8:	009b      	lsls	r3, r3, #2
 8009caa:	441a      	add	r2, r3
 8009cac:	8b7b      	ldrh	r3, [r7, #26]
 8009cae:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cb2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cb6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cba:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cbe:	b29b      	uxth	r3, r3
 8009cc0:	8013      	strh	r3, [r2, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8009cc2:	687a      	ldr	r2, [r7, #4]
 8009cc4:	683b      	ldr	r3, [r7, #0]
 8009cc6:	781b      	ldrb	r3, [r3, #0]
 8009cc8:	009b      	lsls	r3, r3, #2
 8009cca:	4413      	add	r3, r2
 8009ccc:	881b      	ldrh	r3, [r3, #0]
 8009cce:	b29b      	uxth	r3, r3
 8009cd0:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009cd4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009cd8:	833b      	strh	r3, [r7, #24]
 8009cda:	687a      	ldr	r2, [r7, #4]
 8009cdc:	683b      	ldr	r3, [r7, #0]
 8009cde:	781b      	ldrb	r3, [r3, #0]
 8009ce0:	009b      	lsls	r3, r3, #2
 8009ce2:	441a      	add	r2, r3
 8009ce4:	8b3b      	ldrh	r3, [r7, #24]
 8009ce6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009cea:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009cee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009cf2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009cf6:	b29b      	uxth	r3, r3
 8009cf8:	8013      	strh	r3, [r2, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009cfa:	687a      	ldr	r2, [r7, #4]
 8009cfc:	683b      	ldr	r3, [r7, #0]
 8009cfe:	781b      	ldrb	r3, [r3, #0]
 8009d00:	009b      	lsls	r3, r3, #2
 8009d02:	4413      	add	r3, r2
 8009d04:	881b      	ldrh	r3, [r3, #0]
 8009d06:	b29b      	uxth	r3, r3
 8009d08:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009d0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d10:	82fb      	strh	r3, [r7, #22]
 8009d12:	687a      	ldr	r2, [r7, #4]
 8009d14:	683b      	ldr	r3, [r7, #0]
 8009d16:	781b      	ldrb	r3, [r3, #0]
 8009d18:	009b      	lsls	r3, r3, #2
 8009d1a:	441a      	add	r2, r3
 8009d1c:	8afb      	ldrh	r3, [r7, #22]
 8009d1e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d22:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d26:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d2e:	b29b      	uxth	r3, r3
 8009d30:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009d32:	687a      	ldr	r2, [r7, #4]
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	781b      	ldrb	r3, [r3, #0]
 8009d38:	009b      	lsls	r3, r3, #2
 8009d3a:	4413      	add	r3, r2
 8009d3c:	881b      	ldrh	r3, [r3, #0]
 8009d3e:	b29b      	uxth	r3, r3
 8009d40:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009d48:	82bb      	strh	r3, [r7, #20]
 8009d4a:	687a      	ldr	r2, [r7, #4]
 8009d4c:	683b      	ldr	r3, [r7, #0]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	009b      	lsls	r3, r3, #2
 8009d52:	441a      	add	r2, r3
 8009d54:	8abb      	ldrh	r3, [r7, #20]
 8009d56:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009d5a:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009d5e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009d62:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009d66:	b29b      	uxth	r3, r3
 8009d68:	8013      	strh	r3, [r2, #0]
 8009d6a:	e0a3      	b.n	8009eb4 <USB_DeactivateEndpoint+0x3cc>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8009d6c:	687a      	ldr	r2, [r7, #4]
 8009d6e:	683b      	ldr	r3, [r7, #0]
 8009d70:	781b      	ldrb	r3, [r3, #0]
 8009d72:	009b      	lsls	r3, r3, #2
 8009d74:	4413      	add	r3, r2
 8009d76:	881b      	ldrh	r3, [r3, #0]
 8009d78:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8009d7a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8009d7c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01b      	beq.n	8009dbc <USB_DeactivateEndpoint+0x2d4>
 8009d84:	687a      	ldr	r2, [r7, #4]
 8009d86:	683b      	ldr	r3, [r7, #0]
 8009d88:	781b      	ldrb	r3, [r3, #0]
 8009d8a:	009b      	lsls	r3, r3, #2
 8009d8c:	4413      	add	r3, r2
 8009d8e:	881b      	ldrh	r3, [r3, #0]
 8009d90:	b29b      	uxth	r3, r3
 8009d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009d9a:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8009d9c:	687a      	ldr	r2, [r7, #4]
 8009d9e:	683b      	ldr	r3, [r7, #0]
 8009da0:	781b      	ldrb	r3, [r3, #0]
 8009da2:	009b      	lsls	r3, r3, #2
 8009da4:	441a      	add	r2, r3
 8009da6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8009da8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dac:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009db0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009db4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009db8:	b29b      	uxth	r3, r3
 8009dba:	8013      	strh	r3, [r2, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8009dbc:	687a      	ldr	r2, [r7, #4]
 8009dbe:	683b      	ldr	r3, [r7, #0]
 8009dc0:	781b      	ldrb	r3, [r3, #0]
 8009dc2:	009b      	lsls	r3, r3, #2
 8009dc4:	4413      	add	r3, r2
 8009dc6:	881b      	ldrh	r3, [r3, #0]
 8009dc8:	857b      	strh	r3, [r7, #42]	; 0x2a
 8009dca:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8009dcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009dd0:	2b00      	cmp	r3, #0
 8009dd2:	d01b      	beq.n	8009e0c <USB_DeactivateEndpoint+0x324>
 8009dd4:	687a      	ldr	r2, [r7, #4]
 8009dd6:	683b      	ldr	r3, [r7, #0]
 8009dd8:	781b      	ldrb	r3, [r3, #0]
 8009dda:	009b      	lsls	r3, r3, #2
 8009ddc:	4413      	add	r3, r2
 8009dde:	881b      	ldrh	r3, [r3, #0]
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009de6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009dea:	853b      	strh	r3, [r7, #40]	; 0x28
 8009dec:	687a      	ldr	r2, [r7, #4]
 8009dee:	683b      	ldr	r3, [r7, #0]
 8009df0:	781b      	ldrb	r3, [r3, #0]
 8009df2:	009b      	lsls	r3, r3, #2
 8009df4:	441a      	add	r2, r3
 8009df6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8009df8:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009dfc:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e00:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e04:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8009e08:	b29b      	uxth	r3, r3
 8009e0a:	8013      	strh	r3, [r2, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8009e0c:	687a      	ldr	r2, [r7, #4]
 8009e0e:	683b      	ldr	r3, [r7, #0]
 8009e10:	781b      	ldrb	r3, [r3, #0]
 8009e12:	009b      	lsls	r3, r3, #2
 8009e14:	4413      	add	r3, r2
 8009e16:	881b      	ldrh	r3, [r3, #0]
 8009e18:	b29b      	uxth	r3, r3
 8009e1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e22:	84fb      	strh	r3, [r7, #38]	; 0x26
 8009e24:	687a      	ldr	r2, [r7, #4]
 8009e26:	683b      	ldr	r3, [r7, #0]
 8009e28:	781b      	ldrb	r3, [r3, #0]
 8009e2a:	009b      	lsls	r3, r3, #2
 8009e2c:	441a      	add	r2, r3
 8009e2e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8009e30:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e34:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e38:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8009e3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e40:	b29b      	uxth	r3, r3
 8009e42:	8013      	strh	r3, [r2, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8009e44:	687a      	ldr	r2, [r7, #4]
 8009e46:	683b      	ldr	r3, [r7, #0]
 8009e48:	781b      	ldrb	r3, [r3, #0]
 8009e4a:	009b      	lsls	r3, r3, #2
 8009e4c:	4413      	add	r3, r2
 8009e4e:	881b      	ldrh	r3, [r3, #0]
 8009e50:	b29b      	uxth	r3, r3
 8009e52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8009e56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009e5a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8009e5c:	687a      	ldr	r2, [r7, #4]
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	781b      	ldrb	r3, [r3, #0]
 8009e62:	009b      	lsls	r3, r3, #2
 8009e64:	441a      	add	r2, r3
 8009e66:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8009e68:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009e6c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009e74:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009e78:	b29b      	uxth	r3, r3
 8009e7a:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8009e7c:	687a      	ldr	r2, [r7, #4]
 8009e7e:	683b      	ldr	r3, [r7, #0]
 8009e80:	781b      	ldrb	r3, [r3, #0]
 8009e82:	009b      	lsls	r3, r3, #2
 8009e84:	4413      	add	r3, r2
 8009e86:	881b      	ldrh	r3, [r3, #0]
 8009e88:	b29b      	uxth	r3, r3
 8009e8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8009e8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009e92:	847b      	strh	r3, [r7, #34]	; 0x22
 8009e94:	687a      	ldr	r2, [r7, #4]
 8009e96:	683b      	ldr	r3, [r7, #0]
 8009e98:	781b      	ldrb	r3, [r3, #0]
 8009e9a:	009b      	lsls	r3, r3, #2
 8009e9c:	441a      	add	r2, r3
 8009e9e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8009ea0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8009ea4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 8009ea8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8009eac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009eb0:	b29b      	uxth	r3, r3
 8009eb2:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 8009eb4:	2300      	movs	r3, #0
}
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	3734      	adds	r7, #52	; 0x34
 8009eba:	46bd      	mov	sp, r7
 8009ebc:	bc80      	pop	{r7}
 8009ebe:	4770      	bx	lr

08009ec0 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8009ec0:	b580      	push	{r7, lr}
 8009ec2:	b0cc      	sub	sp, #304	; 0x130
 8009ec4:	af00      	add	r7, sp, #0
 8009ec6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009eca:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009ece:	6018      	str	r0, [r3, #0]
 8009ed0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ed4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ed8:	6019      	str	r1, [r3, #0]
  uint32_t len;
  uint16_t pmabuffer;
  uint16_t wEPVal;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8009eda:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ede:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	785b      	ldrb	r3, [r3, #1]
 8009ee6:	2b01      	cmp	r3, #1
 8009ee8:	f041 817d 	bne.w	800b1e6 <USB_EPStartXfer+0x1326>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 8009eec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ef0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ef4:	681b      	ldr	r3, [r3, #0]
 8009ef6:	699a      	ldr	r2, [r3, #24]
 8009ef8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009efc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	691b      	ldr	r3, [r3, #16]
 8009f04:	429a      	cmp	r2, r3
 8009f06:	d908      	bls.n	8009f1a <USB_EPStartXfer+0x5a>
    {
      len = ep->maxpacket;
 8009f08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	691b      	ldr	r3, [r3, #16]
 8009f14:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 8009f18:	e007      	b.n	8009f2a <USB_EPStartXfer+0x6a>
    }
    else
    {
      len = ep->xfer_len;
 8009f1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f22:	681b      	ldr	r3, [r3, #0]
 8009f24:	699b      	ldr	r3, [r3, #24]
 8009f26:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8009f2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f2e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	7b1b      	ldrb	r3, [r3, #12]
 8009f36:	2b00      	cmp	r3, #0
 8009f38:	d152      	bne.n	8009fe0 <USB_EPStartXfer+0x120>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8009f3a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f3e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	6959      	ldr	r1, [r3, #20]
 8009f46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	88da      	ldrh	r2, [r3, #6]
 8009f52:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	f507 7098 	add.w	r0, r7, #304	; 0x130
 8009f5c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 8009f60:	6800      	ldr	r0, [r0, #0]
 8009f62:	f001 ff0e 	bl	800bd82 <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8009f66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f6a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009f6e:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f72:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 8009f76:	6812      	ldr	r2, [r2, #0]
 8009f78:	601a      	str	r2, [r3, #0]
 8009f7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f7e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8009f88:	b29b      	uxth	r3, r3
 8009f8a:	4619      	mov	r1, r3
 8009f8c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009f90:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009f94:	f507 7298 	add.w	r2, r7, #304	; 0x130
 8009f98:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 8009f9c:	6812      	ldr	r2, [r2, #0]
 8009f9e:	440a      	add	r2, r1
 8009fa0:	601a      	str	r2, [r3, #0]
 8009fa2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fa6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	781b      	ldrb	r3, [r3, #0]
 8009fae:	011a      	lsls	r2, r3, #4
 8009fb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fb4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8009fb8:	681b      	ldr	r3, [r3, #0]
 8009fba:	4413      	add	r3, r2
 8009fbc:	f203 4204 	addw	r2, r3, #1028	; 0x404
 8009fc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fc4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009fc8:	601a      	str	r2, [r3, #0]
 8009fca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8009fce:	b29a      	uxth	r2, r3
 8009fd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fd4:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	801a      	strh	r2, [r3, #0]
 8009fdc:	f001 b8b5 	b.w	800b14a <USB_EPStartXfer+0x128a>
    }
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 8009fe0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009fe4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	78db      	ldrb	r3, [r3, #3]
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	f040 84c6 	bne.w	800a97e <USB_EPStartXfer+0xabe>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 8009ff2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8009ff6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	6a1a      	ldr	r2, [r3, #32]
 8009ffe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a002:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	691b      	ldr	r3, [r3, #16]
 800a00a:	429a      	cmp	r2, r3
 800a00c:	f240 8443 	bls.w	800a896 <USB_EPStartXfer+0x9d6>
        {
          /* enable double buffer */
          PCD_SET_EP_DBUF(USBx, ep->num);
 800a010:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a014:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a018:	681a      	ldr	r2, [r3, #0]
 800a01a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a01e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	781b      	ldrb	r3, [r3, #0]
 800a026:	009b      	lsls	r3, r3, #2
 800a028:	4413      	add	r3, r2
 800a02a:	881b      	ldrh	r3, [r3, #0]
 800a02c:	b29b      	uxth	r3, r3
 800a02e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a032:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a036:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800a03a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a03e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a048:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	781b      	ldrb	r3, [r3, #0]
 800a050:	009b      	lsls	r3, r3, #2
 800a052:	441a      	add	r2, r3
 800a054:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800a058:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a05c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a060:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a068:	b29b      	uxth	r3, r3
 800a06a:	8013      	strh	r3, [r2, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 800a06c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a070:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	6a1a      	ldr	r2, [r3, #32]
 800a078:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a07c:	1ad2      	subs	r2, r2, r3
 800a07e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a082:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a08a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a08e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a092:	681a      	ldr	r2, [r3, #0]
 800a094:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a098:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a09c:	681b      	ldr	r3, [r3, #0]
 800a09e:	781b      	ldrb	r3, [r3, #0]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	4413      	add	r3, r2
 800a0a4:	881b      	ldrh	r3, [r3, #0]
 800a0a6:	b29b      	uxth	r3, r3
 800a0a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	f000 823e 	beq.w	800a52e <USB_EPStartXfer+0x66e>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a0b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0b6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a0ba:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0be:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a0c2:	6812      	ldr	r2, [r2, #0]
 800a0c4:	601a      	str	r2, [r3, #0]
 800a0c6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0ca:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	785b      	ldrb	r3, [r3, #1]
 800a0d2:	2b00      	cmp	r3, #0
 800a0d4:	f040 809a 	bne.w	800a20c <USB_EPStartXfer+0x34c>
 800a0d8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0dc:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a0e0:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a0e4:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a0e8:	6812      	ldr	r2, [r2, #0]
 800a0ea:	601a      	str	r2, [r3, #0]
 800a0ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a0f0:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a0fa:	b29b      	uxth	r3, r3
 800a0fc:	4619      	mov	r1, r3
 800a0fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a102:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a106:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a10a:	f5a2 7284 	sub.w	r2, r2, #264	; 0x108
 800a10e:	6812      	ldr	r2, [r2, #0]
 800a110:	440a      	add	r2, r1
 800a112:	601a      	str	r2, [r3, #0]
 800a114:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a118:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	781b      	ldrb	r3, [r3, #0]
 800a120:	011a      	lsls	r2, r3, #4
 800a122:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a126:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800a12a:	681b      	ldr	r3, [r3, #0]
 800a12c:	4413      	add	r3, r2
 800a12e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a132:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a136:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a13a:	601a      	str	r2, [r3, #0]
 800a13c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a140:	2b00      	cmp	r3, #0
 800a142:	d122      	bne.n	800a18a <USB_EPStartXfer+0x2ca>
 800a144:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a148:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	881b      	ldrh	r3, [r3, #0]
 800a150:	b29b      	uxth	r3, r3
 800a152:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a156:	b29a      	uxth	r2, r3
 800a158:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a15c:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	801a      	strh	r2, [r3, #0]
 800a164:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a168:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a16c:	681b      	ldr	r3, [r3, #0]
 800a16e:	881b      	ldrh	r3, [r3, #0]
 800a170:	b29b      	uxth	r3, r3
 800a172:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a176:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a180:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	801a      	strh	r2, [r3, #0]
 800a188:	e079      	b.n	800a27e <USB_EPStartXfer+0x3be>
 800a18a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a18e:	2b3e      	cmp	r3, #62	; 0x3e
 800a190:	d81b      	bhi.n	800a1ca <USB_EPStartXfer+0x30a>
 800a192:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a196:	085b      	lsrs	r3, r3, #1
 800a198:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a19c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1a0:	f003 0301 	and.w	r3, r3, #1
 800a1a4:	2b00      	cmp	r3, #0
 800a1a6:	d004      	beq.n	800a1b2 <USB_EPStartXfer+0x2f2>
 800a1a8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1ac:	3301      	adds	r3, #1
 800a1ae:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a1b2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1b6:	b29b      	uxth	r3, r3
 800a1b8:	029b      	lsls	r3, r3, #10
 800a1ba:	b29a      	uxth	r2, r3
 800a1bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a1c0:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	801a      	strh	r2, [r3, #0]
 800a1c8:	e059      	b.n	800a27e <USB_EPStartXfer+0x3be>
 800a1ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1ce:	095b      	lsrs	r3, r3, #5
 800a1d0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a1d4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a1d8:	f003 031f 	and.w	r3, r3, #31
 800a1dc:	2b00      	cmp	r3, #0
 800a1de:	d104      	bne.n	800a1ea <USB_EPStartXfer+0x32a>
 800a1e0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1e4:	3b01      	subs	r3, #1
 800a1e6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800a1ea:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800a1ee:	b29b      	uxth	r3, r3
 800a1f0:	029b      	lsls	r3, r3, #10
 800a1f2:	b29b      	uxth	r3, r3
 800a1f4:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a1f8:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a1fc:	b29a      	uxth	r2, r3
 800a1fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a202:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800a206:	681b      	ldr	r3, [r3, #0]
 800a208:	801a      	strh	r2, [r3, #0]
 800a20a:	e038      	b.n	800a27e <USB_EPStartXfer+0x3be>
 800a20c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a210:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a214:	681b      	ldr	r3, [r3, #0]
 800a216:	785b      	ldrb	r3, [r3, #1]
 800a218:	2b01      	cmp	r3, #1
 800a21a:	d130      	bne.n	800a27e <USB_EPStartXfer+0x3be>
 800a21c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a220:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a22a:	b29b      	uxth	r3, r3
 800a22c:	4619      	mov	r1, r3
 800a22e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a232:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a236:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a23a:	f5a2 7280 	sub.w	r2, r2, #256	; 0x100
 800a23e:	6812      	ldr	r2, [r2, #0]
 800a240:	440a      	add	r2, r1
 800a242:	601a      	str	r2, [r3, #0]
 800a244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	781b      	ldrb	r3, [r3, #0]
 800a250:	011a      	lsls	r2, r3, #4
 800a252:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a256:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800a25a:	681b      	ldr	r3, [r3, #0]
 800a25c:	4413      	add	r3, r2
 800a25e:	f203 420c 	addw	r2, r3, #1036	; 0x40c
 800a262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a266:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a26a:	601a      	str	r2, [r3, #0]
 800a26c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a270:	b29a      	uxth	r2, r3
 800a272:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a276:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a27e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a282:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	895b      	ldrh	r3, [r3, #10]
 800a28a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a28e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	6959      	ldr	r1, [r3, #20]
 800a29a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a29e:	b29b      	uxth	r3, r3
 800a2a0:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a2a4:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a2a8:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a2ac:	6800      	ldr	r0, [r0, #0]
 800a2ae:	f001 fd68 	bl	800bd82 <USB_WritePMA>
            ep->xfer_buff += len;
 800a2b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2ba:	681b      	ldr	r3, [r3, #0]
 800a2bc:	695a      	ldr	r2, [r3, #20]
 800a2be:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2c2:	441a      	add	r2, r3
 800a2c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a2d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2d4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	6a1a      	ldr	r2, [r3, #32]
 800a2dc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2e0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	691b      	ldr	r3, [r3, #16]
 800a2e8:	429a      	cmp	r2, r3
 800a2ea:	d90f      	bls.n	800a30c <USB_EPStartXfer+0x44c>
            {
              ep->xfer_len_db -= len;
 800a2ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a2f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	6a1a      	ldr	r2, [r3, #32]
 800a2f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a2fc:	1ad2      	subs	r2, r2, r3
 800a2fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a302:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	621a      	str	r2, [r3, #32]
 800a30a:	e00e      	b.n	800a32a <USB_EPStartXfer+0x46a>
            }
            else
            {
              len = ep->xfer_len_db;
 800a30c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a310:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a314:	681b      	ldr	r3, [r3, #0]
 800a316:	6a1b      	ldr	r3, [r3, #32]
 800a318:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a31c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a320:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	2200      	movs	r2, #0
 800a328:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a32a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a32e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a332:	681b      	ldr	r3, [r3, #0]
 800a334:	785b      	ldrb	r3, [r3, #1]
 800a336:	2b00      	cmp	r3, #0
 800a338:	f040 809a 	bne.w	800a470 <USB_EPStartXfer+0x5b0>
 800a33c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a340:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a344:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a348:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a34c:	6812      	ldr	r2, [r2, #0]
 800a34e:	601a      	str	r2, [r3, #0]
 800a350:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a354:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a35e:	b29b      	uxth	r3, r3
 800a360:	4619      	mov	r1, r3
 800a362:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a366:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a36a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a36e:	f5a2 728c 	sub.w	r2, r2, #280	; 0x118
 800a372:	6812      	ldr	r2, [r2, #0]
 800a374:	440a      	add	r2, r1
 800a376:	601a      	str	r2, [r3, #0]
 800a378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a37c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a380:	681b      	ldr	r3, [r3, #0]
 800a382:	781b      	ldrb	r3, [r3, #0]
 800a384:	011a      	lsls	r2, r3, #4
 800a386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a38a:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	4413      	add	r3, r2
 800a392:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a396:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a39a:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a39e:	601a      	str	r2, [r3, #0]
 800a3a0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d122      	bne.n	800a3ee <USB_EPStartXfer+0x52e>
 800a3a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3ac:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	881b      	ldrh	r3, [r3, #0]
 800a3b4:	b29b      	uxth	r3, r3
 800a3b6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a3ba:	b29a      	uxth	r2, r3
 800a3bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3c0:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	801a      	strh	r2, [r3, #0]
 800a3c8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3cc:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	881b      	ldrh	r3, [r3, #0]
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a3da:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a3de:	b29a      	uxth	r2, r3
 800a3e0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a3e4:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a3e8:	681b      	ldr	r3, [r3, #0]
 800a3ea:	801a      	strh	r2, [r3, #0]
 800a3ec:	e083      	b.n	800a4f6 <USB_EPStartXfer+0x636>
 800a3ee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3f2:	2b3e      	cmp	r3, #62	; 0x3e
 800a3f4:	d81b      	bhi.n	800a42e <USB_EPStartXfer+0x56e>
 800a3f6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a3fa:	085b      	lsrs	r3, r3, #1
 800a3fc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a400:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a404:	f003 0301 	and.w	r3, r3, #1
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d004      	beq.n	800a416 <USB_EPStartXfer+0x556>
 800a40c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a410:	3301      	adds	r3, #1
 800a412:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a416:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a41a:	b29b      	uxth	r3, r3
 800a41c:	029b      	lsls	r3, r3, #10
 800a41e:	b29a      	uxth	r2, r3
 800a420:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a424:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	801a      	strh	r2, [r3, #0]
 800a42c:	e063      	b.n	800a4f6 <USB_EPStartXfer+0x636>
 800a42e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a432:	095b      	lsrs	r3, r3, #5
 800a434:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a438:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a43c:	f003 031f 	and.w	r3, r3, #31
 800a440:	2b00      	cmp	r3, #0
 800a442:	d104      	bne.n	800a44e <USB_EPStartXfer+0x58e>
 800a444:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a448:	3b01      	subs	r3, #1
 800a44a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800a44e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800a452:	b29b      	uxth	r3, r3
 800a454:	029b      	lsls	r3, r3, #10
 800a456:	b29b      	uxth	r3, r3
 800a458:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a45c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a460:	b29a      	uxth	r2, r3
 800a462:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a466:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	801a      	strh	r2, [r3, #0]
 800a46e:	e042      	b.n	800a4f6 <USB_EPStartXfer+0x636>
 800a470:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a474:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	785b      	ldrb	r3, [r3, #1]
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d13a      	bne.n	800a4f6 <USB_EPStartXfer+0x636>
 800a480:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a484:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a488:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a48c:	f5a2 7296 	sub.w	r2, r2, #300	; 0x12c
 800a490:	6812      	ldr	r2, [r2, #0]
 800a492:	601a      	str	r2, [r3, #0]
 800a494:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a498:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a4a2:	b29b      	uxth	r3, r3
 800a4a4:	4619      	mov	r1, r3
 800a4a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4aa:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a4ae:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800a4b2:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 800a4b6:	6812      	ldr	r2, [r2, #0]
 800a4b8:	440a      	add	r2, r1
 800a4ba:	601a      	str	r2, [r3, #0]
 800a4bc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4c0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	781b      	ldrb	r3, [r3, #0]
 800a4c8:	011a      	lsls	r2, r3, #4
 800a4ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ce:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	4413      	add	r3, r2
 800a4d6:	f203 4204 	addw	r2, r3, #1028	; 0x404
 800a4da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4de:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a4e2:	601a      	str	r2, [r3, #0]
 800a4e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a4e8:	b29a      	uxth	r2, r3
 800a4ea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4ee:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800a4f2:	681b      	ldr	r3, [r3, #0]
 800a4f4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a4f6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a4fa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	891b      	ldrh	r3, [r3, #8]
 800a502:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a506:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a50a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	6959      	ldr	r1, [r3, #20]
 800a512:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a516:	b29b      	uxth	r3, r3
 800a518:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a51c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a520:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a524:	6800      	ldr	r0, [r0, #0]
 800a526:	f001 fc2c 	bl	800bd82 <USB_WritePMA>
 800a52a:	f000 be0e 	b.w	800b14a <USB_EPStartXfer+0x128a>
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800a52e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a532:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	785b      	ldrb	r3, [r3, #1]
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d16d      	bne.n	800a61a <USB_EPStartXfer+0x75a>
 800a53e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a542:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a546:	681b      	ldr	r3, [r3, #0]
 800a548:	64bb      	str	r3, [r7, #72]	; 0x48
 800a54a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a54e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a558:	b29b      	uxth	r3, r3
 800a55a:	461a      	mov	r2, r3
 800a55c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a55e:	4413      	add	r3, r2
 800a560:	64bb      	str	r3, [r7, #72]	; 0x48
 800a562:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a566:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	781b      	ldrb	r3, [r3, #0]
 800a56e:	011a      	lsls	r2, r3, #4
 800a570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a572:	4413      	add	r3, r2
 800a574:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a578:	647b      	str	r3, [r7, #68]	; 0x44
 800a57a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d112      	bne.n	800a5a8 <USB_EPStartXfer+0x6e8>
 800a582:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a584:	881b      	ldrh	r3, [r3, #0]
 800a586:	b29b      	uxth	r3, r3
 800a588:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a58c:	b29a      	uxth	r2, r3
 800a58e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a590:	801a      	strh	r2, [r3, #0]
 800a592:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a594:	881b      	ldrh	r3, [r3, #0]
 800a596:	b29b      	uxth	r3, r3
 800a598:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a59c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a5a0:	b29a      	uxth	r2, r3
 800a5a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5a4:	801a      	strh	r2, [r3, #0]
 800a5a6:	e063      	b.n	800a670 <USB_EPStartXfer+0x7b0>
 800a5a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5ac:	2b3e      	cmp	r3, #62	; 0x3e
 800a5ae:	d817      	bhi.n	800a5e0 <USB_EPStartXfer+0x720>
 800a5b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5b4:	085b      	lsrs	r3, r3, #1
 800a5b6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a5ba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5be:	f003 0301 	and.w	r3, r3, #1
 800a5c2:	2b00      	cmp	r3, #0
 800a5c4:	d004      	beq.n	800a5d0 <USB_EPStartXfer+0x710>
 800a5c6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a5ca:	3301      	adds	r3, #1
 800a5cc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a5d0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	029b      	lsls	r3, r3, #10
 800a5d8:	b29a      	uxth	r2, r3
 800a5da:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a5dc:	801a      	strh	r2, [r3, #0]
 800a5de:	e047      	b.n	800a670 <USB_EPStartXfer+0x7b0>
 800a5e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5e4:	095b      	lsrs	r3, r3, #5
 800a5e6:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a5ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a5ee:	f003 031f 	and.w	r3, r3, #31
 800a5f2:	2b00      	cmp	r3, #0
 800a5f4:	d104      	bne.n	800a600 <USB_EPStartXfer+0x740>
 800a5f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800a600:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800a604:	b29b      	uxth	r3, r3
 800a606:	029b      	lsls	r3, r3, #10
 800a608:	b29b      	uxth	r3, r3
 800a60a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a60e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a612:	b29a      	uxth	r2, r3
 800a614:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800a616:	801a      	strh	r2, [r3, #0]
 800a618:	e02a      	b.n	800a670 <USB_EPStartXfer+0x7b0>
 800a61a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a61e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	785b      	ldrb	r3, [r3, #1]
 800a626:	2b01      	cmp	r3, #1
 800a628:	d122      	bne.n	800a670 <USB_EPStartXfer+0x7b0>
 800a62a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a62e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a632:	681b      	ldr	r3, [r3, #0]
 800a634:	653b      	str	r3, [r7, #80]	; 0x50
 800a636:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a63a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a63e:	681b      	ldr	r3, [r3, #0]
 800a640:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a644:	b29b      	uxth	r3, r3
 800a646:	461a      	mov	r2, r3
 800a648:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a64a:	4413      	add	r3, r2
 800a64c:	653b      	str	r3, [r7, #80]	; 0x50
 800a64e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a652:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	781b      	ldrb	r3, [r3, #0]
 800a65a:	011a      	lsls	r2, r3, #4
 800a65c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a65e:	4413      	add	r3, r2
 800a660:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a664:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a666:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a66a:	b29a      	uxth	r2, r3
 800a66c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a66e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800a670:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a674:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	891b      	ldrh	r3, [r3, #8]
 800a67c:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a680:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a684:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	6959      	ldr	r1, [r3, #20]
 800a68c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a690:	b29b      	uxth	r3, r3
 800a692:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a696:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a69a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a69e:	6800      	ldr	r0, [r0, #0]
 800a6a0:	f001 fb6f 	bl	800bd82 <USB_WritePMA>
            ep->xfer_buff += len;
 800a6a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ac:	681b      	ldr	r3, [r3, #0]
 800a6ae:	695a      	ldr	r2, [r3, #20]
 800a6b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6b4:	441a      	add	r2, r3
 800a6b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 800a6c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	6a1a      	ldr	r2, [r3, #32]
 800a6ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6d2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	691b      	ldr	r3, [r3, #16]
 800a6da:	429a      	cmp	r2, r3
 800a6dc:	d90f      	bls.n	800a6fe <USB_EPStartXfer+0x83e>
            {
              ep->xfer_len_db -= len;
 800a6de:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6e2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	6a1a      	ldr	r2, [r3, #32]
 800a6ea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a6ee:	1ad2      	subs	r2, r2, r3
 800a6f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a6f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	621a      	str	r2, [r3, #32]
 800a6fc:	e00e      	b.n	800a71c <USB_EPStartXfer+0x85c>
            }
            else
            {
              len = ep->xfer_len_db;
 800a6fe:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a702:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	6a1b      	ldr	r3, [r3, #32]
 800a70a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
              ep->xfer_len_db = 0U;
 800a70e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a712:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a716:	681b      	ldr	r3, [r3, #0]
 800a718:	2200      	movs	r2, #0
 800a71a:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800a71c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a720:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a724:	681b      	ldr	r3, [r3, #0]
 800a726:	643b      	str	r3, [r7, #64]	; 0x40
 800a728:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a72c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	785b      	ldrb	r3, [r3, #1]
 800a734:	2b00      	cmp	r3, #0
 800a736:	d16d      	bne.n	800a814 <USB_EPStartXfer+0x954>
 800a738:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a73c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a740:	681b      	ldr	r3, [r3, #0]
 800a742:	63bb      	str	r3, [r7, #56]	; 0x38
 800a744:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a748:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a752:	b29b      	uxth	r3, r3
 800a754:	461a      	mov	r2, r3
 800a756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a758:	4413      	add	r3, r2
 800a75a:	63bb      	str	r3, [r7, #56]	; 0x38
 800a75c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a760:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	781b      	ldrb	r3, [r3, #0]
 800a768:	011a      	lsls	r2, r3, #4
 800a76a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a76c:	4413      	add	r3, r2
 800a76e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a772:	637b      	str	r3, [r7, #52]	; 0x34
 800a774:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a778:	2b00      	cmp	r3, #0
 800a77a:	d112      	bne.n	800a7a2 <USB_EPStartXfer+0x8e2>
 800a77c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a77e:	881b      	ldrh	r3, [r3, #0]
 800a780:	b29b      	uxth	r3, r3
 800a782:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800a786:	b29a      	uxth	r2, r3
 800a788:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78a:	801a      	strh	r2, [r3, #0]
 800a78c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a78e:	881b      	ldrh	r3, [r3, #0]
 800a790:	b29b      	uxth	r3, r3
 800a792:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a796:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a79a:	b29a      	uxth	r2, r3
 800a79c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a79e:	801a      	strh	r2, [r3, #0]
 800a7a0:	e05d      	b.n	800a85e <USB_EPStartXfer+0x99e>
 800a7a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7a6:	2b3e      	cmp	r3, #62	; 0x3e
 800a7a8:	d817      	bhi.n	800a7da <USB_EPStartXfer+0x91a>
 800a7aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7ae:	085b      	lsrs	r3, r3, #1
 800a7b0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a7b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7b8:	f003 0301 	and.w	r3, r3, #1
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d004      	beq.n	800a7ca <USB_EPStartXfer+0x90a>
 800a7c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7c4:	3301      	adds	r3, #1
 800a7c6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a7ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7ce:	b29b      	uxth	r3, r3
 800a7d0:	029b      	lsls	r3, r3, #10
 800a7d2:	b29a      	uxth	r2, r3
 800a7d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7d6:	801a      	strh	r2, [r3, #0]
 800a7d8:	e041      	b.n	800a85e <USB_EPStartXfer+0x99e>
 800a7da:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7de:	095b      	lsrs	r3, r3, #5
 800a7e0:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a7e4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a7e8:	f003 031f 	and.w	r3, r3, #31
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d104      	bne.n	800a7fa <USB_EPStartXfer+0x93a>
 800a7f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7f4:	3b01      	subs	r3, #1
 800a7f6:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800a7fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800a7fe:	b29b      	uxth	r3, r3
 800a800:	029b      	lsls	r3, r3, #10
 800a802:	b29b      	uxth	r3, r3
 800a804:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800a808:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a810:	801a      	strh	r2, [r3, #0]
 800a812:	e024      	b.n	800a85e <USB_EPStartXfer+0x99e>
 800a814:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a818:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	785b      	ldrb	r3, [r3, #1]
 800a820:	2b01      	cmp	r3, #1
 800a822:	d11c      	bne.n	800a85e <USB_EPStartXfer+0x99e>
 800a824:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a828:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a82c:	681b      	ldr	r3, [r3, #0]
 800a82e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a832:	b29b      	uxth	r3, r3
 800a834:	461a      	mov	r2, r3
 800a836:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a838:	4413      	add	r3, r2
 800a83a:	643b      	str	r3, [r7, #64]	; 0x40
 800a83c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a840:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	781b      	ldrb	r3, [r3, #0]
 800a848:	011a      	lsls	r2, r3, #4
 800a84a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800a84c:	4413      	add	r3, r2
 800a84e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800a852:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a854:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a858:	b29a      	uxth	r2, r3
 800a85a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a85c:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800a85e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a862:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a866:	681b      	ldr	r3, [r3, #0]
 800a868:	895b      	ldrh	r3, [r3, #10]
 800a86a:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a86e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a872:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	6959      	ldr	r1, [r3, #20]
 800a87a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a87e:	b29b      	uxth	r3, r3
 800a880:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a884:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a888:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a88c:	6800      	ldr	r0, [r0, #0]
 800a88e:	f001 fa78 	bl	800bd82 <USB_WritePMA>
 800a892:	f000 bc5a 	b.w	800b14a <USB_EPStartXfer+0x128a>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 800a896:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a89a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	6a1b      	ldr	r3, [r3, #32]
 800a8a2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

          /* disable double buffer mode */
          PCD_CLEAR_EP_DBUF(USBx, ep->num);
 800a8a6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8aa:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8ae:	681a      	ldr	r2, [r3, #0]
 800a8b0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8b4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8b8:	681b      	ldr	r3, [r3, #0]
 800a8ba:	781b      	ldrb	r3, [r3, #0]
 800a8bc:	009b      	lsls	r3, r3, #2
 800a8be:	4413      	add	r3, r2
 800a8c0:	881b      	ldrh	r3, [r3, #0]
 800a8c2:	b29b      	uxth	r3, r3
 800a8c4:	f423 43e2 	bic.w	r3, r3, #28928	; 0x7100
 800a8c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a8cc:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62
 800a8d0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8d4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a8d8:	681a      	ldr	r2, [r3, #0]
 800a8da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a8de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a8e2:	681b      	ldr	r3, [r3, #0]
 800a8e4:	781b      	ldrb	r3, [r3, #0]
 800a8e6:	009b      	lsls	r3, r3, #2
 800a8e8:	441a      	add	r2, r3
 800a8ea:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 800a8ee:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a8f2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a8f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a8fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a8fe:	b29b      	uxth	r3, r3
 800a900:	8013      	strh	r3, [r2, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800a902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a90e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a912:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a916:	681b      	ldr	r3, [r3, #0]
 800a918:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800a91c:	b29b      	uxth	r3, r3
 800a91e:	461a      	mov	r2, r3
 800a920:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a922:	4413      	add	r3, r2
 800a924:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a926:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a92a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a92e:	681b      	ldr	r3, [r3, #0]
 800a930:	781b      	ldrb	r3, [r3, #0]
 800a932:	011a      	lsls	r2, r3, #4
 800a934:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a936:	4413      	add	r3, r2
 800a938:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800a93c:	65bb      	str	r3, [r7, #88]	; 0x58
 800a93e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a942:	b29a      	uxth	r2, r3
 800a944:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800a946:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800a948:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a94c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	891b      	ldrh	r3, [r3, #8]
 800a954:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800a958:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a95c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6959      	ldr	r1, [r3, #20]
 800a964:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a968:	b29b      	uxth	r3, r3
 800a96a:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800a96e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800a972:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800a976:	6800      	ldr	r0, [r0, #0]
 800a978:	f001 fa03 	bl	800bd82 <USB_WritePMA>
 800a97c:	e3e5      	b.n	800b14a <USB_EPStartXfer+0x128a>

      /* manage isochronous double buffer IN mode */
      else
      {
        /* enable double buffer */
        PCD_SET_EP_DBUF(USBx, ep->num);
 800a97e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a982:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a986:	681a      	ldr	r2, [r3, #0]
 800a988:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a98c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a990:	681b      	ldr	r3, [r3, #0]
 800a992:	781b      	ldrb	r3, [r3, #0]
 800a994:	009b      	lsls	r3, r3, #2
 800a996:	4413      	add	r3, r2
 800a998:	881b      	ldrh	r3, [r3, #0]
 800a99a:	b29b      	uxth	r3, r3
 800a99c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a9a0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a9a4:	f8a7 30a8 	strh.w	r3, [r7, #168]	; 0xa8
 800a9a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800a9b0:	681a      	ldr	r2, [r3, #0]
 800a9b2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9b6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	781b      	ldrb	r3, [r3, #0]
 800a9be:	009b      	lsls	r3, r3, #2
 800a9c0:	441a      	add	r2, r3
 800a9c2:	f8b7 30a8 	ldrh.w	r3, [r7, #168]	; 0xa8
 800a9c6:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800a9ca:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800a9ce:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 800a9d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a9d6:	b29b      	uxth	r3, r3
 800a9d8:	8013      	strh	r3, [r2, #0]

        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 800a9da:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9de:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	6a1a      	ldr	r2, [r3, #32]
 800a9e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800a9ea:	1ad2      	subs	r2, r2, r3
 800a9ec:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9f0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 800a9f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800a9fc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa06:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa0a:	681b      	ldr	r3, [r3, #0]
 800aa0c:	781b      	ldrb	r3, [r3, #0]
 800aa0e:	009b      	lsls	r3, r3, #2
 800aa10:	4413      	add	r3, r2
 800aa12:	881b      	ldrh	r3, [r3, #0]
 800aa14:	b29b      	uxth	r3, r3
 800aa16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	f000 81bc 	beq.w	800ad98 <USB_EPStartXfer+0xed8>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800aa20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa24:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800aa2e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa32:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa36:	681b      	ldr	r3, [r3, #0]
 800aa38:	785b      	ldrb	r3, [r3, #1]
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d16d      	bne.n	800ab1a <USB_EPStartXfer+0xc5a>
 800aa3e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa42:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa4a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa4e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aa58:	b29b      	uxth	r3, r3
 800aa5a:	461a      	mov	r2, r3
 800aa5c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa5e:	4413      	add	r3, r2
 800aa60:	67bb      	str	r3, [r7, #120]	; 0x78
 800aa62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aa66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aa6a:	681b      	ldr	r3, [r3, #0]
 800aa6c:	781b      	ldrb	r3, [r3, #0]
 800aa6e:	011a      	lsls	r2, r3, #4
 800aa70:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800aa72:	4413      	add	r3, r2
 800aa74:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800aa78:	677b      	str	r3, [r7, #116]	; 0x74
 800aa7a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d112      	bne.n	800aaa8 <USB_EPStartXfer+0xbe8>
 800aa82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa84:	881b      	ldrh	r3, [r3, #0]
 800aa86:	b29b      	uxth	r3, r3
 800aa88:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800aa8c:	b29a      	uxth	r2, r3
 800aa8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa90:	801a      	strh	r2, [r3, #0]
 800aa92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aa94:	881b      	ldrh	r3, [r3, #0]
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800aa9c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800aaa0:	b29a      	uxth	r2, r3
 800aaa2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aaa4:	801a      	strh	r2, [r3, #0]
 800aaa6:	e060      	b.n	800ab6a <USB_EPStartXfer+0xcaa>
 800aaa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaac:	2b3e      	cmp	r3, #62	; 0x3e
 800aaae:	d817      	bhi.n	800aae0 <USB_EPStartXfer+0xc20>
 800aab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aab4:	085b      	lsrs	r3, r3, #1
 800aab6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aaba:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aabe:	f003 0301 	and.w	r3, r3, #1
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d004      	beq.n	800aad0 <USB_EPStartXfer+0xc10>
 800aac6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aaca:	3301      	adds	r3, #1
 800aacc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aad0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aad4:	b29b      	uxth	r3, r3
 800aad6:	029b      	lsls	r3, r3, #10
 800aad8:	b29a      	uxth	r2, r3
 800aada:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800aadc:	801a      	strh	r2, [r3, #0]
 800aade:	e044      	b.n	800ab6a <USB_EPStartXfer+0xcaa>
 800aae0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aae4:	095b      	lsrs	r3, r3, #5
 800aae6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800aaea:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aaee:	f003 031f 	and.w	r3, r3, #31
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d104      	bne.n	800ab00 <USB_EPStartXfer+0xc40>
 800aaf6:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800aafa:	3b01      	subs	r3, #1
 800aafc:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 800ab00:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800ab04:	b29b      	uxth	r3, r3
 800ab06:	029b      	lsls	r3, r3, #10
 800ab08:	b29b      	uxth	r3, r3
 800ab0a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ab0e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ab12:	b29a      	uxth	r2, r3
 800ab14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ab16:	801a      	strh	r2, [r3, #0]
 800ab18:	e027      	b.n	800ab6a <USB_EPStartXfer+0xcaa>
 800ab1a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab1e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	785b      	ldrb	r3, [r3, #1]
 800ab26:	2b01      	cmp	r3, #1
 800ab28:	d11f      	bne.n	800ab6a <USB_EPStartXfer+0xcaa>
 800ab2a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab2e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ab38:	b29b      	uxth	r3, r3
 800ab3a:	461a      	mov	r2, r3
 800ab3c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab40:	4413      	add	r3, r2
 800ab42:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab46:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab4a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	781b      	ldrb	r3, [r3, #0]
 800ab52:	011a      	lsls	r2, r3, #4
 800ab54:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ab58:	4413      	add	r3, r2
 800ab5a:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ab5e:	67fb      	str	r3, [r7, #124]	; 0x7c
 800ab60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab64:	b29a      	uxth	r2, r3
 800ab66:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ab68:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 800ab6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	895b      	ldrh	r3, [r3, #10]
 800ab76:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ab7a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ab7e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	6959      	ldr	r1, [r3, #20]
 800ab86:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ab8a:	b29b      	uxth	r3, r3
 800ab8c:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ab90:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ab94:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ab98:	6800      	ldr	r0, [r0, #0]
 800ab9a:	f001 f8f2 	bl	800bd82 <USB_WritePMA>
          ep->xfer_buff += len;
 800ab9e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aba2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	695a      	ldr	r2, [r3, #20]
 800abaa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abae:	441a      	add	r2, r3
 800abb0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abb4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abb8:	681b      	ldr	r3, [r3, #0]
 800abba:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800abbc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abc0:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	6a1a      	ldr	r2, [r3, #32]
 800abc8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abcc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abd0:	681b      	ldr	r3, [r3, #0]
 800abd2:	691b      	ldr	r3, [r3, #16]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d90f      	bls.n	800abf8 <USB_EPStartXfer+0xd38>
          {
            ep->xfer_len_db -= len;
 800abd8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abdc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	6a1a      	ldr	r2, [r3, #32]
 800abe4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800abe8:	1ad2      	subs	r2, r2, r3
 800abea:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abee:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	621a      	str	r2, [r3, #32]
 800abf6:	e00e      	b.n	800ac16 <USB_EPStartXfer+0xd56>
          }
          else
          {
            len = ep->xfer_len_db;
 800abf8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800abfc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac00:	681b      	ldr	r3, [r3, #0]
 800ac02:	6a1b      	ldr	r3, [r3, #32]
 800ac04:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800ac08:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac0c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac10:	681b      	ldr	r3, [r3, #0]
 800ac12:	2200      	movs	r2, #0
 800ac14:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800ac16:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	f000 8295 	beq.w	800b14a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ac20:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac24:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	785b      	ldrb	r3, [r3, #1]
 800ac2c:	2b00      	cmp	r3, #0
 800ac2e:	d16d      	bne.n	800ad0c <USB_EPStartXfer+0xe4c>
 800ac30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac34:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac38:	681b      	ldr	r3, [r3, #0]
 800ac3a:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac3c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac40:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ac44:	681b      	ldr	r3, [r3, #0]
 800ac46:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ac4a:	b29b      	uxth	r3, r3
 800ac4c:	461a      	mov	r2, r3
 800ac4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac50:	4413      	add	r3, r2
 800ac52:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac54:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ac58:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	781b      	ldrb	r3, [r3, #0]
 800ac60:	011a      	lsls	r2, r3, #4
 800ac62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800ac64:	4413      	add	r3, r2
 800ac66:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ac6a:	667b      	str	r3, [r7, #100]	; 0x64
 800ac6c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac70:	2b00      	cmp	r3, #0
 800ac72:	d112      	bne.n	800ac9a <USB_EPStartXfer+0xdda>
 800ac74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac76:	881b      	ldrh	r3, [r3, #0]
 800ac78:	b29b      	uxth	r3, r3
 800ac7a:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ac7e:	b29a      	uxth	r2, r3
 800ac80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac82:	801a      	strh	r2, [r3, #0]
 800ac84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac86:	881b      	ldrh	r3, [r3, #0]
 800ac88:	b29b      	uxth	r3, r3
 800ac8a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ac8e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ac92:	b29a      	uxth	r2, r3
 800ac94:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac96:	801a      	strh	r2, [r3, #0]
 800ac98:	e063      	b.n	800ad62 <USB_EPStartXfer+0xea2>
 800ac9a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ac9e:	2b3e      	cmp	r3, #62	; 0x3e
 800aca0:	d817      	bhi.n	800acd2 <USB_EPStartXfer+0xe12>
 800aca2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aca6:	085b      	lsrs	r3, r3, #1
 800aca8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800acac:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acb0:	f003 0301 	and.w	r3, r3, #1
 800acb4:	2b00      	cmp	r3, #0
 800acb6:	d004      	beq.n	800acc2 <USB_EPStartXfer+0xe02>
 800acb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acbc:	3301      	adds	r3, #1
 800acbe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800acc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acc6:	b29b      	uxth	r3, r3
 800acc8:	029b      	lsls	r3, r3, #10
 800acca:	b29a      	uxth	r2, r3
 800accc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800acce:	801a      	strh	r2, [r3, #0]
 800acd0:	e047      	b.n	800ad62 <USB_EPStartXfer+0xea2>
 800acd2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800acd6:	095b      	lsrs	r3, r3, #5
 800acd8:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800acdc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ace0:	f003 031f 	and.w	r3, r3, #31
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d104      	bne.n	800acf2 <USB_EPStartXfer+0xe32>
 800ace8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acec:	3b01      	subs	r3, #1
 800acee:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800acf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800acf6:	b29b      	uxth	r3, r3
 800acf8:	029b      	lsls	r3, r3, #10
 800acfa:	b29b      	uxth	r3, r3
 800acfc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ad00:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ad04:	b29a      	uxth	r2, r3
 800ad06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ad08:	801a      	strh	r2, [r3, #0]
 800ad0a:	e02a      	b.n	800ad62 <USB_EPStartXfer+0xea2>
 800ad0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	785b      	ldrb	r3, [r3, #1]
 800ad18:	2b01      	cmp	r3, #1
 800ad1a:	d122      	bne.n	800ad62 <USB_EPStartXfer+0xea2>
 800ad1c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad20:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad24:	681b      	ldr	r3, [r3, #0]
 800ad26:	673b      	str	r3, [r7, #112]	; 0x70
 800ad28:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad2c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ad36:	b29b      	uxth	r3, r3
 800ad38:	461a      	mov	r2, r3
 800ad3a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad3c:	4413      	add	r3, r2
 800ad3e:	673b      	str	r3, [r7, #112]	; 0x70
 800ad40:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad44:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	781b      	ldrb	r3, [r3, #0]
 800ad4c:	011a      	lsls	r2, r3, #4
 800ad4e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ad50:	4413      	add	r3, r2
 800ad52:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800ad56:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ad58:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad5c:	b29a      	uxth	r2, r3
 800ad5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ad60:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 800ad62:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad66:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad6a:	681b      	ldr	r3, [r3, #0]
 800ad6c:	891b      	ldrh	r3, [r3, #8]
 800ad6e:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800ad72:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad76:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	6959      	ldr	r1, [r3, #20]
 800ad7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ad82:	b29b      	uxth	r3, r3
 800ad84:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800ad88:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800ad8c:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800ad90:	6800      	ldr	r0, [r0, #0]
 800ad92:	f000 fff6 	bl	800bd82 <USB_WritePMA>
 800ad96:	e1d8      	b.n	800b14a <USB_EPStartXfer+0x128a>
          }
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800ad98:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ad9c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	785b      	ldrb	r3, [r3, #1]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d178      	bne.n	800ae9a <USB_EPStartXfer+0xfda>
 800ada8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800adb6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800adba:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800adbe:	681b      	ldr	r3, [r3, #0]
 800adc0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	461a      	mov	r2, r3
 800adc8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800adcc:	4413      	add	r3, r2
 800adce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800add2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800add6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	011a      	lsls	r2, r3, #4
 800ade0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800ade4:	4413      	add	r3, r2
 800ade6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800adea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800adee:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800adf2:	2b00      	cmp	r3, #0
 800adf4:	d116      	bne.n	800ae24 <USB_EPStartXfer+0xf64>
 800adf6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800adfa:	881b      	ldrh	r3, [r3, #0]
 800adfc:	b29b      	uxth	r3, r3
 800adfe:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800ae02:	b29a      	uxth	r2, r3
 800ae04:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae08:	801a      	strh	r2, [r3, #0]
 800ae0a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae0e:	881b      	ldrh	r3, [r3, #0]
 800ae10:	b29b      	uxth	r3, r3
 800ae12:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae16:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae1a:	b29a      	uxth	r2, r3
 800ae1c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae20:	801a      	strh	r2, [r3, #0]
 800ae22:	e06b      	b.n	800aefc <USB_EPStartXfer+0x103c>
 800ae24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae28:	2b3e      	cmp	r3, #62	; 0x3e
 800ae2a:	d818      	bhi.n	800ae5e <USB_EPStartXfer+0xf9e>
 800ae2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae30:	085b      	lsrs	r3, r3, #1
 800ae32:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ae36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae3a:	f003 0301 	and.w	r3, r3, #1
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d004      	beq.n	800ae4c <USB_EPStartXfer+0xf8c>
 800ae42:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae46:	3301      	adds	r3, #1
 800ae48:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ae4c:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae50:	b29b      	uxth	r3, r3
 800ae52:	029b      	lsls	r3, r3, #10
 800ae54:	b29a      	uxth	r2, r3
 800ae56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae5a:	801a      	strh	r2, [r3, #0]
 800ae5c:	e04e      	b.n	800aefc <USB_EPStartXfer+0x103c>
 800ae5e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae62:	095b      	lsrs	r3, r3, #5
 800ae64:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ae68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ae6c:	f003 031f 	and.w	r3, r3, #31
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d104      	bne.n	800ae7e <USB_EPStartXfer+0xfbe>
 800ae74:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae78:	3b01      	subs	r3, #1
 800ae7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 800ae7e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 800ae82:	b29b      	uxth	r3, r3
 800ae84:	029b      	lsls	r3, r3, #10
 800ae86:	b29b      	uxth	r3, r3
 800ae88:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ae8c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ae90:	b29a      	uxth	r2, r3
 800ae92:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800ae96:	801a      	strh	r2, [r3, #0]
 800ae98:	e030      	b.n	800aefc <USB_EPStartXfer+0x103c>
 800ae9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ae9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	785b      	ldrb	r3, [r3, #1]
 800aea6:	2b01      	cmp	r3, #1
 800aea8:	d128      	bne.n	800aefc <USB_EPStartXfer+0x103c>
 800aeaa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aeae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aeb8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aebc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800aec6:	b29b      	uxth	r3, r3
 800aec8:	461a      	mov	r2, r3
 800aeca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aece:	4413      	add	r3, r2
 800aed0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800aed4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800aed8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800aedc:	681b      	ldr	r3, [r3, #0]
 800aede:	781b      	ldrb	r3, [r3, #0]
 800aee0:	011a      	lsls	r2, r3, #4
 800aee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aee6:	4413      	add	r3, r2
 800aee8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800aeec:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aef0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800aef4:	b29a      	uxth	r2, r3
 800aef6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aefa:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 800aefc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	891b      	ldrh	r3, [r3, #8]
 800af08:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800af0c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af14:	681b      	ldr	r3, [r3, #0]
 800af16:	6959      	ldr	r1, [r3, #20]
 800af18:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af1c:	b29b      	uxth	r3, r3
 800af1e:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800af22:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800af26:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800af2a:	6800      	ldr	r0, [r0, #0]
 800af2c:	f000 ff29 	bl	800bd82 <USB_WritePMA>
          ep->xfer_buff += len;
 800af30:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af34:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	695a      	ldr	r2, [r3, #20]
 800af3c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af40:	441a      	add	r2, r3
 800af42:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af46:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af4a:	681b      	ldr	r3, [r3, #0]
 800af4c:	615a      	str	r2, [r3, #20]

          if (ep->xfer_len_db > ep->maxpacket)
 800af4e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af52:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6a1a      	ldr	r2, [r3, #32]
 800af5a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af5e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	691b      	ldr	r3, [r3, #16]
 800af66:	429a      	cmp	r2, r3
 800af68:	d90f      	bls.n	800af8a <USB_EPStartXfer+0x10ca>
          {
            ep->xfer_len_db -= len;
 800af6a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af6e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	6a1a      	ldr	r2, [r3, #32]
 800af76:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800af7a:	1ad2      	subs	r2, r2, r3
 800af7c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af80:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	621a      	str	r2, [r3, #32]
 800af88:	e00e      	b.n	800afa8 <USB_EPStartXfer+0x10e8>
          }
          else
          {
            len = ep->xfer_len_db;
 800af8a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af8e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	6a1b      	ldr	r3, [r3, #32]
 800af96:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
            ep->xfer_len_db = 0U;
 800af9a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800af9e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2200      	movs	r2, #0
 800afa6:	621a      	str	r2, [r3, #32]
          }

          if (len > 0U)
 800afa8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800afac:	2b00      	cmp	r3, #0
 800afae:	f000 80cc 	beq.w	800b14a <USB_EPStartXfer+0x128a>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800afb2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afb6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afba:	681b      	ldr	r3, [r3, #0]
 800afbc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800afc0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afc4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800afc8:	681b      	ldr	r3, [r3, #0]
 800afca:	785b      	ldrb	r3, [r3, #1]
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d178      	bne.n	800b0c2 <USB_EPStartXfer+0x1202>
 800afd0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afd4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800afde:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800afe2:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800afe6:	681b      	ldr	r3, [r3, #0]
 800afe8:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800afec:	b29b      	uxth	r3, r3
 800afee:	461a      	mov	r2, r3
 800aff0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aff4:	4413      	add	r3, r2
 800aff6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800affa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800affe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b002:	681b      	ldr	r3, [r3, #0]
 800b004:	781b      	ldrb	r3, [r3, #0]
 800b006:	011a      	lsls	r2, r3, #4
 800b008:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b00c:	4413      	add	r3, r2
 800b00e:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b012:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800b016:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d116      	bne.n	800b04c <USB_EPStartXfer+0x118c>
 800b01e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b022:	881b      	ldrh	r3, [r3, #0]
 800b024:	b29b      	uxth	r3, r3
 800b026:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b02a:	b29a      	uxth	r2, r3
 800b02c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b030:	801a      	strh	r2, [r3, #0]
 800b032:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b036:	881b      	ldrh	r3, [r3, #0]
 800b038:	b29b      	uxth	r3, r3
 800b03a:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b03e:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b042:	b29a      	uxth	r2, r3
 800b044:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b048:	801a      	strh	r2, [r3, #0]
 800b04a:	e064      	b.n	800b116 <USB_EPStartXfer+0x1256>
 800b04c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b050:	2b3e      	cmp	r3, #62	; 0x3e
 800b052:	d818      	bhi.n	800b086 <USB_EPStartXfer+0x11c6>
 800b054:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b058:	085b      	lsrs	r3, r3, #1
 800b05a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b05e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b062:	f003 0301 	and.w	r3, r3, #1
 800b066:	2b00      	cmp	r3, #0
 800b068:	d004      	beq.n	800b074 <USB_EPStartXfer+0x11b4>
 800b06a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b06e:	3301      	adds	r3, #1
 800b070:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b074:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b078:	b29b      	uxth	r3, r3
 800b07a:	029b      	lsls	r3, r3, #10
 800b07c:	b29a      	uxth	r2, r3
 800b07e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b082:	801a      	strh	r2, [r3, #0]
 800b084:	e047      	b.n	800b116 <USB_EPStartXfer+0x1256>
 800b086:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b08a:	095b      	lsrs	r3, r3, #5
 800b08c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b090:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b094:	f003 031f 	and.w	r3, r3, #31
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d104      	bne.n	800b0a6 <USB_EPStartXfer+0x11e6>
 800b09c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0a0:	3b01      	subs	r3, #1
 800b0a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 800b0a6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800b0aa:	b29b      	uxth	r3, r3
 800b0ac:	029b      	lsls	r3, r3, #10
 800b0ae:	b29b      	uxth	r3, r3
 800b0b0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b0b4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b0b8:	b29a      	uxth	r2, r3
 800b0ba:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800b0be:	801a      	strh	r2, [r3, #0]
 800b0c0:	e029      	b.n	800b116 <USB_EPStartXfer+0x1256>
 800b0c2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0ca:	681b      	ldr	r3, [r3, #0]
 800b0cc:	785b      	ldrb	r3, [r3, #1]
 800b0ce:	2b01      	cmp	r3, #1
 800b0d0:	d121      	bne.n	800b116 <USB_EPStartXfer+0x1256>
 800b0d2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0d6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b0e0:	b29b      	uxth	r3, r3
 800b0e2:	461a      	mov	r2, r3
 800b0e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b0e8:	4413      	add	r3, r2
 800b0ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800b0ee:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b0f2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	781b      	ldrb	r3, [r3, #0]
 800b0fa:	011a      	lsls	r2, r3, #4
 800b0fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800b100:	4413      	add	r3, r2
 800b102:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b106:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800b10a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b10e:	b29a      	uxth	r2, r3
 800b110:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b114:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 800b116:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b11a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	895b      	ldrh	r3, [r3, #10]
 800b122:	f8a7 3096 	strh.w	r3, [r7, #150]	; 0x96

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800b126:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b12a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	6959      	ldr	r1, [r3, #20]
 800b132:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b136:	b29b      	uxth	r3, r3
 800b138:	f8b7 2096 	ldrh.w	r2, [r7, #150]	; 0x96
 800b13c:	f507 7098 	add.w	r0, r7, #304	; 0x130
 800b140:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
 800b144:	6800      	ldr	r0, [r0, #0]
 800b146:	f000 fe1c 	bl	800bd82 <USB_WritePMA>
          }
        }
      }
    }

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 800b14a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b14e:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b152:	681a      	ldr	r2, [r3, #0]
 800b154:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b158:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b15c:	681b      	ldr	r3, [r3, #0]
 800b15e:	781b      	ldrb	r3, [r3, #0]
 800b160:	009b      	lsls	r3, r3, #2
 800b162:	4413      	add	r3, r2
 800b164:	881b      	ldrh	r3, [r3, #0]
 800b166:	b29b      	uxth	r3, r3
 800b168:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b16c:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b170:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b174:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800b178:	8013      	strh	r3, [r2, #0]
 800b17a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b17e:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b182:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b186:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b18a:	8812      	ldrh	r2, [r2, #0]
 800b18c:	f082 0210 	eor.w	r2, r2, #16
 800b190:	801a      	strh	r2, [r3, #0]
 800b192:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b196:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b19a:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800b19e:	f5a2 7293 	sub.w	r2, r2, #294	; 0x126
 800b1a2:	8812      	ldrh	r2, [r2, #0]
 800b1a4:	f082 0220 	eor.w	r2, r2, #32
 800b1a8:	801a      	strh	r2, [r3, #0]
 800b1aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b1b2:	681a      	ldr	r2, [r3, #0]
 800b1b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1b8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	781b      	ldrb	r3, [r3, #0]
 800b1c0:	009b      	lsls	r3, r3, #2
 800b1c2:	441a      	add	r2, r3
 800b1c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1c8:	f5a3 7393 	sub.w	r3, r3, #294	; 0x126
 800b1cc:	881b      	ldrh	r3, [r3, #0]
 800b1ce:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b1d2:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b1d6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b1da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	8013      	strh	r3, [r2, #0]
 800b1e2:	f000 bc9f 	b.w	800bb24 <USB_EPStartXfer+0x1c64>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 800b1e6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1ea:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	7b1b      	ldrb	r3, [r3, #12]
 800b1f2:	2b00      	cmp	r3, #0
 800b1f4:	f040 80ae 	bne.w	800b354 <USB_EPStartXfer+0x1494>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 800b1f8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b1fc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b200:	681b      	ldr	r3, [r3, #0]
 800b202:	699a      	ldr	r2, [r3, #24]
 800b204:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b208:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	691b      	ldr	r3, [r3, #16]
 800b210:	429a      	cmp	r2, r3
 800b212:	d917      	bls.n	800b244 <USB_EPStartXfer+0x1384>
      {
        len = ep->maxpacket;
 800b214:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b218:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b21c:	681b      	ldr	r3, [r3, #0]
 800b21e:	691b      	ldr	r3, [r3, #16]
 800b220:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len -= len;
 800b224:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b228:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	699a      	ldr	r2, [r3, #24]
 800b230:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b234:	1ad2      	subs	r2, r2, r3
 800b236:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b23a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b23e:	681b      	ldr	r3, [r3, #0]
 800b240:	619a      	str	r2, [r3, #24]
 800b242:	e00e      	b.n	800b262 <USB_EPStartXfer+0x13a2>
      }
      else
      {
        len = ep->xfer_len;
 800b244:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b248:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b24c:	681b      	ldr	r3, [r3, #0]
 800b24e:	699b      	ldr	r3, [r3, #24]
 800b250:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
        ep->xfer_len = 0U;
 800b254:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b258:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2200      	movs	r2, #0
 800b260:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800b262:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b266:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b270:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b274:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b27e:	b29b      	uxth	r3, r3
 800b280:	461a      	mov	r2, r3
 800b282:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b286:	4413      	add	r3, r2
 800b288:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800b28c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b290:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	781b      	ldrb	r3, [r3, #0]
 800b298:	011a      	lsls	r2, r3, #4
 800b29a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800b29e:	4413      	add	r3, r2
 800b2a0:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b2a4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800b2a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d116      	bne.n	800b2de <USB_EPStartXfer+0x141e>
 800b2b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2b4:	881b      	ldrh	r3, [r3, #0]
 800b2b6:	b29b      	uxth	r3, r3
 800b2b8:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2c2:	801a      	strh	r2, [r3, #0]
 800b2c4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2c8:	881b      	ldrh	r3, [r3, #0]
 800b2ca:	b29b      	uxth	r3, r3
 800b2cc:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b2d0:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b2d4:	b29a      	uxth	r2, r3
 800b2d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b2da:	801a      	strh	r2, [r3, #0]
 800b2dc:	e3e8      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
 800b2de:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2e2:	2b3e      	cmp	r3, #62	; 0x3e
 800b2e4:	d818      	bhi.n	800b318 <USB_EPStartXfer+0x1458>
 800b2e6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2ea:	085b      	lsrs	r3, r3, #1
 800b2ec:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b2f0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b2f4:	f003 0301 	and.w	r3, r3, #1
 800b2f8:	2b00      	cmp	r3, #0
 800b2fa:	d004      	beq.n	800b306 <USB_EPStartXfer+0x1446>
 800b2fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b300:	3301      	adds	r3, #1
 800b302:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b306:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b30a:	b29b      	uxth	r3, r3
 800b30c:	029b      	lsls	r3, r3, #10
 800b30e:	b29a      	uxth	r2, r3
 800b310:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b314:	801a      	strh	r2, [r3, #0]
 800b316:	e3cb      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
 800b318:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b31c:	095b      	lsrs	r3, r3, #5
 800b31e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b322:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b326:	f003 031f 	and.w	r3, r3, #31
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d104      	bne.n	800b338 <USB_EPStartXfer+0x1478>
 800b32e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b332:	3b01      	subs	r3, #1
 800b334:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800b338:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800b33c:	b29b      	uxth	r3, r3
 800b33e:	029b      	lsls	r3, r3, #10
 800b340:	b29b      	uxth	r3, r3
 800b342:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b346:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b34a:	b29a      	uxth	r2, r3
 800b34c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800b350:	801a      	strh	r2, [r3, #0]
 800b352:	e3ad      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
    }
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 800b354:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b358:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	78db      	ldrb	r3, [r3, #3]
 800b360:	2b02      	cmp	r3, #2
 800b362:	f040 8200 	bne.w	800b766 <USB_EPStartXfer+0x18a6>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800b366:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b36a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	785b      	ldrb	r3, [r3, #1]
 800b372:	2b00      	cmp	r3, #0
 800b374:	f040 8091 	bne.w	800b49a <USB_EPStartXfer+0x15da>
 800b378:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b37c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b386:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b38a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b38e:	681b      	ldr	r3, [r3, #0]
 800b390:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b394:	b29b      	uxth	r3, r3
 800b396:	461a      	mov	r2, r3
 800b398:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b39c:	4413      	add	r3, r2
 800b39e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800b3a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3aa:	681b      	ldr	r3, [r3, #0]
 800b3ac:	781b      	ldrb	r3, [r3, #0]
 800b3ae:	011a      	lsls	r2, r3, #4
 800b3b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b3b4:	4413      	add	r3, r2
 800b3b6:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b3ba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800b3be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b3c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b3c6:	681b      	ldr	r3, [r3, #0]
 800b3c8:	691b      	ldr	r3, [r3, #16]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d116      	bne.n	800b3fc <USB_EPStartXfer+0x153c>
 800b3ce:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3d2:	881b      	ldrh	r3, [r3, #0]
 800b3d4:	b29b      	uxth	r3, r3
 800b3d6:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b3da:	b29a      	uxth	r2, r3
 800b3dc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3e0:	801a      	strh	r2, [r3, #0]
 800b3e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3e6:	881b      	ldrh	r3, [r3, #0]
 800b3e8:	b29b      	uxth	r3, r3
 800b3ea:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b3ee:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b3f8:	801a      	strh	r2, [r3, #0]
 800b3fa:	e083      	b.n	800b504 <USB_EPStartXfer+0x1644>
 800b3fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b400:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b404:	681b      	ldr	r3, [r3, #0]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	2b3e      	cmp	r3, #62	; 0x3e
 800b40a:	d820      	bhi.n	800b44e <USB_EPStartXfer+0x158e>
 800b40c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b410:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	691b      	ldr	r3, [r3, #16]
 800b418:	085b      	lsrs	r3, r3, #1
 800b41a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b41e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b422:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	691b      	ldr	r3, [r3, #16]
 800b42a:	f003 0301 	and.w	r3, r3, #1
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d004      	beq.n	800b43c <USB_EPStartXfer+0x157c>
 800b432:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b436:	3301      	adds	r3, #1
 800b438:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b43c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b440:	b29b      	uxth	r3, r3
 800b442:	029b      	lsls	r3, r3, #10
 800b444:	b29a      	uxth	r2, r3
 800b446:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b44a:	801a      	strh	r2, [r3, #0]
 800b44c:	e05a      	b.n	800b504 <USB_EPStartXfer+0x1644>
 800b44e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b452:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b456:	681b      	ldr	r3, [r3, #0]
 800b458:	691b      	ldr	r3, [r3, #16]
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b460:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b464:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	f003 031f 	and.w	r3, r3, #31
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <USB_EPStartXfer+0x15be>
 800b474:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b478:	3b01      	subs	r3, #1
 800b47a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800b47e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800b482:	b29b      	uxth	r3, r3
 800b484:	029b      	lsls	r3, r3, #10
 800b486:	b29b      	uxth	r3, r3
 800b488:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b48c:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b490:	b29a      	uxth	r2, r3
 800b492:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b496:	801a      	strh	r2, [r3, #0]
 800b498:	e034      	b.n	800b504 <USB_EPStartXfer+0x1644>
 800b49a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b49e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	785b      	ldrb	r3, [r3, #1]
 800b4a6:	2b01      	cmp	r3, #1
 800b4a8:	d12c      	bne.n	800b504 <USB_EPStartXfer+0x1644>
 800b4aa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4ae:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4b2:	681b      	ldr	r3, [r3, #0]
 800b4b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b4b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4bc:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b4c6:	b29b      	uxth	r3, r3
 800b4c8:	461a      	mov	r2, r3
 800b4ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800b4d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	781b      	ldrb	r3, [r3, #0]
 800b4e0:	011a      	lsls	r2, r3, #4
 800b4e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b4e6:	4413      	add	r3, r2
 800b4e8:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b4ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800b4f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b4f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	691b      	ldr	r3, [r3, #16]
 800b4fc:	b29a      	uxth	r2, r3
 800b4fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b502:	801a      	strh	r2, [r3, #0]
 800b504:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b508:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b512:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b516:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	785b      	ldrb	r3, [r3, #1]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	f040 8091 	bne.w	800b646 <USB_EPStartXfer+0x1786>
 800b524:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b528:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b52c:	681b      	ldr	r3, [r3, #0]
 800b52e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b532:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b536:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b53a:	681b      	ldr	r3, [r3, #0]
 800b53c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b540:	b29b      	uxth	r3, r3
 800b542:	461a      	mov	r2, r3
 800b544:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b548:	4413      	add	r3, r2
 800b54a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 800b54e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b552:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b556:	681b      	ldr	r3, [r3, #0]
 800b558:	781b      	ldrb	r3, [r3, #0]
 800b55a:	011a      	lsls	r2, r3, #4
 800b55c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b560:	4413      	add	r3, r2
 800b562:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b566:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800b56a:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b56e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	691b      	ldr	r3, [r3, #16]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d116      	bne.n	800b5a8 <USB_EPStartXfer+0x16e8>
 800b57a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b57e:	881b      	ldrh	r3, [r3, #0]
 800b580:	b29b      	uxth	r3, r3
 800b582:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b586:	b29a      	uxth	r2, r3
 800b588:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b58c:	801a      	strh	r2, [r3, #0]
 800b58e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b592:	881b      	ldrh	r3, [r3, #0]
 800b594:	b29b      	uxth	r3, r3
 800b596:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b59a:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b59e:	b29a      	uxth	r2, r3
 800b5a0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5a4:	801a      	strh	r2, [r3, #0]
 800b5a6:	e07c      	b.n	800b6a2 <USB_EPStartXfer+0x17e2>
 800b5a8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ac:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	691b      	ldr	r3, [r3, #16]
 800b5b4:	2b3e      	cmp	r3, #62	; 0x3e
 800b5b6:	d820      	bhi.n	800b5fa <USB_EPStartXfer+0x173a>
 800b5b8:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5bc:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5c0:	681b      	ldr	r3, [r3, #0]
 800b5c2:	691b      	ldr	r3, [r3, #16]
 800b5c4:	085b      	lsrs	r3, r3, #1
 800b5c6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5ca:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5ce:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	691b      	ldr	r3, [r3, #16]
 800b5d6:	f003 0301 	and.w	r3, r3, #1
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d004      	beq.n	800b5e8 <USB_EPStartXfer+0x1728>
 800b5de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5e2:	3301      	adds	r3, #1
 800b5e4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b5e8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b5ec:	b29b      	uxth	r3, r3
 800b5ee:	029b      	lsls	r3, r3, #10
 800b5f0:	b29a      	uxth	r2, r3
 800b5f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b5f6:	801a      	strh	r2, [r3, #0]
 800b5f8:	e053      	b.n	800b6a2 <USB_EPStartXfer+0x17e2>
 800b5fa:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b5fe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b602:	681b      	ldr	r3, [r3, #0]
 800b604:	691b      	ldr	r3, [r3, #16]
 800b606:	095b      	lsrs	r3, r3, #5
 800b608:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b60c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b610:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	691b      	ldr	r3, [r3, #16]
 800b618:	f003 031f 	and.w	r3, r3, #31
 800b61c:	2b00      	cmp	r3, #0
 800b61e:	d104      	bne.n	800b62a <USB_EPStartXfer+0x176a>
 800b620:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b624:	3b01      	subs	r3, #1
 800b626:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800b62a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 800b62e:	b29b      	uxth	r3, r3
 800b630:	029b      	lsls	r3, r3, #10
 800b632:	b29b      	uxth	r3, r3
 800b634:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b638:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b63c:	b29a      	uxth	r2, r3
 800b63e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800b642:	801a      	strh	r2, [r3, #0]
 800b644:	e02d      	b.n	800b6a2 <USB_EPStartXfer+0x17e2>
 800b646:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b64a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	785b      	ldrb	r3, [r3, #1]
 800b652:	2b01      	cmp	r3, #1
 800b654:	d125      	bne.n	800b6a2 <USB_EPStartXfer+0x17e2>
 800b656:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b65a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b664:	b29b      	uxth	r3, r3
 800b666:	461a      	mov	r2, r3
 800b668:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b66c:	4413      	add	r3, r2
 800b66e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800b672:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b676:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	781b      	ldrb	r3, [r3, #0]
 800b67e:	011a      	lsls	r2, r3, #4
 800b680:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b684:	4413      	add	r3, r2
 800b686:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b68a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800b68e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b692:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	691b      	ldr	r3, [r3, #16]
 800b69a:	b29a      	uxth	r2, r3
 800b69c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b6a0:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 800b6a2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6a6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	2b00      	cmp	r3, #0
 800b6b0:	f000 81fe 	beq.w	800bab0 <USB_EPStartXfer+0x1bf0>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800b6b4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b6bc:	681a      	ldr	r2, [r3, #0]
 800b6be:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b6c2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b6c6:	681b      	ldr	r3, [r3, #0]
 800b6c8:	781b      	ldrb	r3, [r3, #0]
 800b6ca:	009b      	lsls	r3, r3, #2
 800b6cc:	4413      	add	r3, r2
 800b6ce:	881b      	ldrh	r3, [r3, #0]
 800b6d0:	f8a7 30b6 	strh.w	r3, [r7, #182]	; 0xb6

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b6d4:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b6d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	d005      	beq.n	800b6ec <USB_EPStartXfer+0x182c>
 800b6e0:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b6e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d10d      	bne.n	800b708 <USB_EPStartXfer+0x1848>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b6ec:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b6f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	f040 81db 	bne.w	800bab0 <USB_EPStartXfer+0x1bf0>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 800b6fa:	f8b7 30b6 	ldrh.w	r3, [r7, #182]	; 0xb6
 800b6fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b702:	2b00      	cmp	r3, #0
 800b704:	f040 81d4 	bne.w	800bab0 <USB_EPStartXfer+0x1bf0>
          {
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800b708:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b70c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b710:	681a      	ldr	r2, [r3, #0]
 800b712:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b716:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b71a:	681b      	ldr	r3, [r3, #0]
 800b71c:	781b      	ldrb	r3, [r3, #0]
 800b71e:	009b      	lsls	r3, r3, #2
 800b720:	4413      	add	r3, r2
 800b722:	881b      	ldrh	r3, [r3, #0]
 800b724:	b29b      	uxth	r3, r3
 800b726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800b72a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b72e:	f8a7 30b4 	strh.w	r3, [r7, #180]	; 0xb4
 800b732:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b736:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b73a:	681a      	ldr	r2, [r3, #0]
 800b73c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b740:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	781b      	ldrb	r3, [r3, #0]
 800b748:	009b      	lsls	r3, r3, #2
 800b74a:	441a      	add	r2, r3
 800b74c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	; 0xb4
 800b750:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800b754:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800b758:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800b75c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800b760:	b29b      	uxth	r3, r3
 800b762:	8013      	strh	r3, [r2, #0]
 800b764:	e1a4      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 800b766:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b76a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b76e:	681b      	ldr	r3, [r3, #0]
 800b770:	78db      	ldrb	r3, [r3, #3]
 800b772:	2b01      	cmp	r3, #1
 800b774:	f040 819a 	bne.w	800baac <USB_EPStartXfer+0x1bec>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 800b778:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b77c:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b780:	681b      	ldr	r3, [r3, #0]
 800b782:	699a      	ldr	r2, [r3, #24]
 800b784:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b788:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b78c:	681b      	ldr	r3, [r3, #0]
 800b78e:	691b      	ldr	r3, [r3, #16]
 800b790:	429a      	cmp	r2, r3
 800b792:	d917      	bls.n	800b7c4 <USB_EPStartXfer+0x1904>
        {
          len = ep->maxpacket;
 800b794:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b798:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b79c:	681b      	ldr	r3, [r3, #0]
 800b79e:	691b      	ldr	r3, [r3, #16]
 800b7a0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len -= len;
 800b7a4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7a8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	699a      	ldr	r2, [r3, #24]
 800b7b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b7b4:	1ad2      	subs	r2, r2, r3
 800b7b6:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7ba:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	619a      	str	r2, [r3, #24]
 800b7c2:	e00e      	b.n	800b7e2 <USB_EPStartXfer+0x1922>
        }
        else
        {
          len = ep->xfer_len;
 800b7c4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7c8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	699b      	ldr	r3, [r3, #24]
 800b7d0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
          ep->xfer_len = 0U;
 800b7d4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7d8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7dc:	681b      	ldr	r3, [r3, #0]
 800b7de:	2200      	movs	r2, #0
 800b7e0:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800b7e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b7ea:	681b      	ldr	r3, [r3, #0]
 800b7ec:	785b      	ldrb	r3, [r3, #1]
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d178      	bne.n	800b8e4 <USB_EPStartXfer+0x1a24>
 800b7f2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b7f6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b7fa:	681b      	ldr	r3, [r3, #0]
 800b7fc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b800:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b804:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b808:	681b      	ldr	r3, [r3, #0]
 800b80a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b80e:	b29b      	uxth	r3, r3
 800b810:	461a      	mov	r2, r3
 800b812:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b816:	4413      	add	r3, r2
 800b818:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800b81c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b820:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	781b      	ldrb	r3, [r3, #0]
 800b828:	011a      	lsls	r2, r3, #4
 800b82a:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800b82e:	4413      	add	r3, r2
 800b830:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b834:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b838:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d116      	bne.n	800b86e <USB_EPStartXfer+0x19ae>
 800b840:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b844:	881b      	ldrh	r3, [r3, #0]
 800b846:	b29b      	uxth	r3, r3
 800b848:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b84c:	b29a      	uxth	r2, r3
 800b84e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b852:	801a      	strh	r2, [r3, #0]
 800b854:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b858:	881b      	ldrh	r3, [r3, #0]
 800b85a:	b29b      	uxth	r3, r3
 800b85c:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b860:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b864:	b29a      	uxth	r2, r3
 800b866:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b86a:	801a      	strh	r2, [r3, #0]
 800b86c:	e06b      	b.n	800b946 <USB_EPStartXfer+0x1a86>
 800b86e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b872:	2b3e      	cmp	r3, #62	; 0x3e
 800b874:	d818      	bhi.n	800b8a8 <USB_EPStartXfer+0x19e8>
 800b876:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b87a:	085b      	lsrs	r3, r3, #1
 800b87c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b880:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b884:	f003 0301 	and.w	r3, r3, #1
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d004      	beq.n	800b896 <USB_EPStartXfer+0x19d6>
 800b88c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b890:	3301      	adds	r3, #1
 800b892:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b896:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b89a:	b29b      	uxth	r3, r3
 800b89c:	029b      	lsls	r3, r3, #10
 800b89e:	b29a      	uxth	r2, r3
 800b8a0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b8a4:	801a      	strh	r2, [r3, #0]
 800b8a6:	e04e      	b.n	800b946 <USB_EPStartXfer+0x1a86>
 800b8a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8ac:	095b      	lsrs	r3, r3, #5
 800b8ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8b2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b8b6:	f003 031f 	and.w	r3, r3, #31
 800b8ba:	2b00      	cmp	r3, #0
 800b8bc:	d104      	bne.n	800b8c8 <USB_EPStartXfer+0x1a08>
 800b8be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8c2:	3b01      	subs	r3, #1
 800b8c4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 800b8c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800b8cc:	b29b      	uxth	r3, r3
 800b8ce:	029b      	lsls	r3, r3, #10
 800b8d0:	b29b      	uxth	r3, r3
 800b8d2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b8d6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b8da:	b29a      	uxth	r2, r3
 800b8dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b8e0:	801a      	strh	r2, [r3, #0]
 800b8e2:	e030      	b.n	800b946 <USB_EPStartXfer+0x1a86>
 800b8e4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8e8:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	785b      	ldrb	r3, [r3, #1]
 800b8f0:	2b01      	cmp	r3, #1
 800b8f2:	d128      	bne.n	800b946 <USB_EPStartXfer+0x1a86>
 800b8f4:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b8f8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b902:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b906:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b90a:	681b      	ldr	r3, [r3, #0]
 800b90c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b910:	b29b      	uxth	r3, r3
 800b912:	461a      	mov	r2, r3
 800b914:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b918:	4413      	add	r3, r2
 800b91a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800b91e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b922:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	781b      	ldrb	r3, [r3, #0]
 800b92a:	011a      	lsls	r2, r3, #4
 800b92c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800b930:	4413      	add	r3, r2
 800b932:	f203 4304 	addw	r3, r3, #1028	; 0x404
 800b936:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800b93a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b93e:	b29a      	uxth	r2, r3
 800b940:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800b944:	801a      	strh	r2, [r3, #0]
 800b946:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b94a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800b954:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b958:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b95c:	681b      	ldr	r3, [r3, #0]
 800b95e:	785b      	ldrb	r3, [r3, #1]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d178      	bne.n	800ba56 <USB_EPStartXfer+0x1b96>
 800b964:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b968:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b972:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b976:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800b980:	b29b      	uxth	r3, r3
 800b982:	461a      	mov	r2, r3
 800b984:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b988:	4413      	add	r3, r2
 800b98a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800b98e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800b992:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	011a      	lsls	r2, r3, #4
 800b99c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800b9a0:	4413      	add	r3, r2
 800b9a2:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800b9a6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800b9aa:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d116      	bne.n	800b9e0 <USB_EPStartXfer+0x1b20>
 800b9b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9b6:	881b      	ldrh	r3, [r3, #0]
 800b9b8:	b29b      	uxth	r3, r3
 800b9ba:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 800b9be:	b29a      	uxth	r2, r3
 800b9c0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9c4:	801a      	strh	r2, [r3, #0]
 800b9c6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9ca:	881b      	ldrh	r3, [r3, #0]
 800b9cc:	b29b      	uxth	r3, r3
 800b9ce:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800b9d2:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800b9d6:	b29a      	uxth	r2, r3
 800b9d8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800b9dc:	801a      	strh	r2, [r3, #0]
 800b9de:	e067      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
 800b9e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9e4:	2b3e      	cmp	r3, #62	; 0x3e
 800b9e6:	d818      	bhi.n	800ba1a <USB_EPStartXfer+0x1b5a>
 800b9e8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9ec:	085b      	lsrs	r3, r3, #1
 800b9ee:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800b9f2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800b9f6:	f003 0301 	and.w	r3, r3, #1
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d004      	beq.n	800ba08 <USB_EPStartXfer+0x1b48>
 800b9fe:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba02:	3301      	adds	r3, #1
 800ba04:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba08:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba0c:	b29b      	uxth	r3, r3
 800ba0e:	029b      	lsls	r3, r3, #10
 800ba10:	b29a      	uxth	r2, r3
 800ba12:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba16:	801a      	strh	r2, [r3, #0]
 800ba18:	e04a      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
 800ba1a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba1e:	095b      	lsrs	r3, r3, #5
 800ba20:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba24:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba28:	f003 031f 	and.w	r3, r3, #31
 800ba2c:	2b00      	cmp	r3, #0
 800ba2e:	d104      	bne.n	800ba3a <USB_EPStartXfer+0x1b7a>
 800ba30:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba34:	3b01      	subs	r3, #1
 800ba36:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 800ba3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800ba3e:	b29b      	uxth	r3, r3
 800ba40:	029b      	lsls	r3, r3, #10
 800ba42:	b29b      	uxth	r3, r3
 800ba44:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 800ba48:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800ba4c:	b29a      	uxth	r2, r3
 800ba4e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba52:	801a      	strh	r2, [r3, #0]
 800ba54:	e02c      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
 800ba56:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba5a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	785b      	ldrb	r3, [r3, #1]
 800ba62:	2b01      	cmp	r3, #1
 800ba64:	d124      	bne.n	800bab0 <USB_EPStartXfer+0x1bf0>
 800ba66:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba6a:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800ba74:	b29b      	uxth	r3, r3
 800ba76:	461a      	mov	r2, r3
 800ba78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba7c:	4413      	add	r3, r2
 800ba7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800ba82:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800ba86:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	781b      	ldrb	r3, [r3, #0]
 800ba8e:	011a      	lsls	r2, r3, #4
 800ba90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba94:	4413      	add	r3, r2
 800ba96:	f203 430c 	addw	r3, r3, #1036	; 0x40c
 800ba9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800ba9e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800baa2:	b29a      	uxth	r2, r3
 800baa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800baa8:	801a      	strh	r2, [r3, #0]
 800baaa:	e001      	b.n	800bab0 <USB_EPStartXfer+0x1bf0>
      }
      else
      {
        return HAL_ERROR;
 800baac:	2301      	movs	r3, #1
 800baae:	e03a      	b.n	800bb26 <USB_EPStartXfer+0x1c66>
      }
    }

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bab0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bab4:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bab8:	681a      	ldr	r2, [r3, #0]
 800baba:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800babe:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bac2:	681b      	ldr	r3, [r3, #0]
 800bac4:	781b      	ldrb	r3, [r3, #0]
 800bac6:	009b      	lsls	r3, r3, #2
 800bac8:	4413      	add	r3, r2
 800baca:	881b      	ldrh	r3, [r3, #0]
 800bacc:	b29b      	uxth	r3, r3
 800bace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bad6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bada:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bade:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bae2:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800bae6:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800baea:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800baee:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
 800baf2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800baf6:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800bafa:	681a      	ldr	r2, [r3, #0]
 800bafc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 800bb00:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800bb04:	681b      	ldr	r3, [r3, #0]
 800bb06:	781b      	ldrb	r3, [r3, #0]
 800bb08:	009b      	lsls	r3, r3, #2
 800bb0a:	441a      	add	r2, r3
 800bb0c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 800bb10:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb14:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb18:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb1c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb20:	b29b      	uxth	r3, r3
 800bb22:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bb24:	2300      	movs	r3, #0
}
 800bb26:	4618      	mov	r0, r3
 800bb28:	f507 7798 	add.w	r7, r7, #304	; 0x130
 800bb2c:	46bd      	mov	sp, r7
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bb30:	b480      	push	{r7}
 800bb32:	b085      	sub	sp, #20
 800bb34:	af00      	add	r7, sp, #0
 800bb36:	6078      	str	r0, [r7, #4]
 800bb38:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 800bb3a:	683b      	ldr	r3, [r7, #0]
 800bb3c:	785b      	ldrb	r3, [r3, #1]
 800bb3e:	2b00      	cmp	r3, #0
 800bb40:	d020      	beq.n	800bb84 <USB_EPSetStall+0x54>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	683b      	ldr	r3, [r7, #0]
 800bb46:	781b      	ldrb	r3, [r3, #0]
 800bb48:	009b      	lsls	r3, r3, #2
 800bb4a:	4413      	add	r3, r2
 800bb4c:	881b      	ldrh	r3, [r3, #0]
 800bb4e:	b29b      	uxth	r3, r3
 800bb50:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bb54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bb58:	81bb      	strh	r3, [r7, #12]
 800bb5a:	89bb      	ldrh	r3, [r7, #12]
 800bb5c:	f083 0310 	eor.w	r3, r3, #16
 800bb60:	81bb      	strh	r3, [r7, #12]
 800bb62:	687a      	ldr	r2, [r7, #4]
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	781b      	ldrb	r3, [r3, #0]
 800bb68:	009b      	lsls	r3, r3, #2
 800bb6a:	441a      	add	r2, r3
 800bb6c:	89bb      	ldrh	r3, [r7, #12]
 800bb6e:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bb72:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bb76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bb7a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bb7e:	b29b      	uxth	r3, r3
 800bb80:	8013      	strh	r3, [r2, #0]
 800bb82:	e01f      	b.n	800bbc4 <USB_EPSetStall+0x94>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	683b      	ldr	r3, [r7, #0]
 800bb88:	781b      	ldrb	r3, [r3, #0]
 800bb8a:	009b      	lsls	r3, r3, #2
 800bb8c:	4413      	add	r3, r2
 800bb8e:	881b      	ldrh	r3, [r3, #0]
 800bb90:	b29b      	uxth	r3, r3
 800bb92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bb96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bb9a:	81fb      	strh	r3, [r7, #14]
 800bb9c:	89fb      	ldrh	r3, [r7, #14]
 800bb9e:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bba2:	81fb      	strh	r3, [r7, #14]
 800bba4:	687a      	ldr	r2, [r7, #4]
 800bba6:	683b      	ldr	r3, [r7, #0]
 800bba8:	781b      	ldrb	r3, [r3, #0]
 800bbaa:	009b      	lsls	r3, r3, #2
 800bbac:	441a      	add	r2, r3
 800bbae:	89fb      	ldrh	r3, [r7, #14]
 800bbb0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bbb4:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bbb8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bbbc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bbc0:	b29b      	uxth	r3, r3
 800bbc2:	8013      	strh	r3, [r2, #0]
  }

  return HAL_OK;
 800bbc4:	2300      	movs	r3, #0
}
 800bbc6:	4618      	mov	r0, r3
 800bbc8:	3714      	adds	r7, #20
 800bbca:	46bd      	mov	sp, r7
 800bbcc:	bc80      	pop	{r7}
 800bbce:	4770      	bx	lr

0800bbd0 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800bbd0:	b480      	push	{r7}
 800bbd2:	b087      	sub	sp, #28
 800bbd4:	af00      	add	r7, sp, #0
 800bbd6:	6078      	str	r0, [r7, #4]
 800bbd8:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 800bbda:	683b      	ldr	r3, [r7, #0]
 800bbdc:	7b1b      	ldrb	r3, [r3, #12]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	f040 809d 	bne.w	800bd1e <USB_EPClearStall+0x14e>
  {
    if (ep->is_in != 0U)
 800bbe4:	683b      	ldr	r3, [r7, #0]
 800bbe6:	785b      	ldrb	r3, [r3, #1]
 800bbe8:	2b00      	cmp	r3, #0
 800bbea:	d04c      	beq.n	800bc86 <USB_EPClearStall+0xb6>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 800bbec:	687a      	ldr	r2, [r7, #4]
 800bbee:	683b      	ldr	r3, [r7, #0]
 800bbf0:	781b      	ldrb	r3, [r3, #0]
 800bbf2:	009b      	lsls	r3, r3, #2
 800bbf4:	4413      	add	r3, r2
 800bbf6:	881b      	ldrh	r3, [r3, #0]
 800bbf8:	823b      	strh	r3, [r7, #16]
 800bbfa:	8a3b      	ldrh	r3, [r7, #16]
 800bbfc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d01b      	beq.n	800bc3c <USB_EPClearStall+0x6c>
 800bc04:	687a      	ldr	r2, [r7, #4]
 800bc06:	683b      	ldr	r3, [r7, #0]
 800bc08:	781b      	ldrb	r3, [r3, #0]
 800bc0a:	009b      	lsls	r3, r3, #2
 800bc0c:	4413      	add	r3, r2
 800bc0e:	881b      	ldrh	r3, [r3, #0]
 800bc10:	b29b      	uxth	r3, r3
 800bc12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bc1a:	81fb      	strh	r3, [r7, #14]
 800bc1c:	687a      	ldr	r2, [r7, #4]
 800bc1e:	683b      	ldr	r3, [r7, #0]
 800bc20:	781b      	ldrb	r3, [r3, #0]
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	441a      	add	r2, r3
 800bc26:	89fb      	ldrh	r3, [r7, #14]
 800bc28:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc2c:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc30:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc34:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 800bc38:	b29b      	uxth	r3, r3
 800bc3a:	8013      	strh	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	78db      	ldrb	r3, [r3, #3]
 800bc40:	2b01      	cmp	r3, #1
 800bc42:	d06c      	beq.n	800bd1e <USB_EPClearStall+0x14e>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	683b      	ldr	r3, [r7, #0]
 800bc48:	781b      	ldrb	r3, [r3, #0]
 800bc4a:	009b      	lsls	r3, r3, #2
 800bc4c:	4413      	add	r3, r2
 800bc4e:	881b      	ldrh	r3, [r3, #0]
 800bc50:	b29b      	uxth	r3, r3
 800bc52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bc56:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800bc5a:	81bb      	strh	r3, [r7, #12]
 800bc5c:	89bb      	ldrh	r3, [r7, #12]
 800bc5e:	f083 0320 	eor.w	r3, r3, #32
 800bc62:	81bb      	strh	r3, [r7, #12]
 800bc64:	687a      	ldr	r2, [r7, #4]
 800bc66:	683b      	ldr	r3, [r7, #0]
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	009b      	lsls	r3, r3, #2
 800bc6c:	441a      	add	r2, r3
 800bc6e:	89bb      	ldrh	r3, [r7, #12]
 800bc70:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bc74:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bc78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bc7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bc80:	b29b      	uxth	r3, r3
 800bc82:	8013      	strh	r3, [r2, #0]
 800bc84:	e04b      	b.n	800bd1e <USB_EPClearStall+0x14e>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800bc86:	687a      	ldr	r2, [r7, #4]
 800bc88:	683b      	ldr	r3, [r7, #0]
 800bc8a:	781b      	ldrb	r3, [r3, #0]
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	4413      	add	r3, r2
 800bc90:	881b      	ldrh	r3, [r3, #0]
 800bc92:	82fb      	strh	r3, [r7, #22]
 800bc94:	8afb      	ldrh	r3, [r7, #22]
 800bc96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800bc9a:	2b00      	cmp	r3, #0
 800bc9c:	d01b      	beq.n	800bcd6 <USB_EPClearStall+0x106>
 800bc9e:	687a      	ldr	r2, [r7, #4]
 800bca0:	683b      	ldr	r3, [r7, #0]
 800bca2:	781b      	ldrb	r3, [r3, #0]
 800bca4:	009b      	lsls	r3, r3, #2
 800bca6:	4413      	add	r3, r2
 800bca8:	881b      	ldrh	r3, [r3, #0]
 800bcaa:	b29b      	uxth	r3, r3
 800bcac:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800bcb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcb4:	82bb      	strh	r3, [r7, #20]
 800bcb6:	687a      	ldr	r2, [r7, #4]
 800bcb8:	683b      	ldr	r3, [r7, #0]
 800bcba:	781b      	ldrb	r3, [r3, #0]
 800bcbc:	009b      	lsls	r3, r3, #2
 800bcbe:	441a      	add	r2, r3
 800bcc0:	8abb      	ldrh	r3, [r7, #20]
 800bcc2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bcc6:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bcca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800bcce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bcd2:	b29b      	uxth	r3, r3
 800bcd4:	8013      	strh	r3, [r2, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800bcd6:	687a      	ldr	r2, [r7, #4]
 800bcd8:	683b      	ldr	r3, [r7, #0]
 800bcda:	781b      	ldrb	r3, [r3, #0]
 800bcdc:	009b      	lsls	r3, r3, #2
 800bcde:	4413      	add	r3, r2
 800bce0:	881b      	ldrh	r3, [r3, #0]
 800bce2:	b29b      	uxth	r3, r3
 800bce4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800bce8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bcec:	827b      	strh	r3, [r7, #18]
 800bcee:	8a7b      	ldrh	r3, [r7, #18]
 800bcf0:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800bcf4:	827b      	strh	r3, [r7, #18]
 800bcf6:	8a7b      	ldrh	r3, [r7, #18]
 800bcf8:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 800bcfc:	827b      	strh	r3, [r7, #18]
 800bcfe:	687a      	ldr	r2, [r7, #4]
 800bd00:	683b      	ldr	r3, [r7, #0]
 800bd02:	781b      	ldrb	r3, [r3, #0]
 800bd04:	009b      	lsls	r3, r3, #2
 800bd06:	441a      	add	r2, r3
 800bd08:	8a7b      	ldrh	r3, [r7, #18]
 800bd0a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 800bd0e:	f443 037f 	orr.w	r3, r3, #16711680	; 0xff0000
 800bd12:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800bd16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd1a:	b29b      	uxth	r3, r3
 800bd1c:	8013      	strh	r3, [r2, #0]
    }
  }

  return HAL_OK;
 800bd1e:	2300      	movs	r3, #0
}
 800bd20:	4618      	mov	r0, r3
 800bd22:	371c      	adds	r7, #28
 800bd24:	46bd      	mov	sp, r7
 800bd26:	bc80      	pop	{r7}
 800bd28:	4770      	bx	lr

0800bd2a <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 800bd2a:	b480      	push	{r7}
 800bd2c:	b083      	sub	sp, #12
 800bd2e:	af00      	add	r7, sp, #0
 800bd30:	6078      	str	r0, [r7, #4]
 800bd32:	460b      	mov	r3, r1
 800bd34:	70fb      	strb	r3, [r7, #3]
  if (address == 0U)
 800bd36:	78fb      	ldrb	r3, [r7, #3]
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d103      	bne.n	800bd44 <USB_SetDevAddress+0x1a>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 800bd3c:	687b      	ldr	r3, [r7, #4]
 800bd3e:	2280      	movs	r2, #128	; 0x80
 800bd40:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  }

  return HAL_OK;
 800bd44:	2300      	movs	r3, #0
}
 800bd46:	4618      	mov	r0, r3
 800bd48:	370c      	adds	r7, #12
 800bd4a:	46bd      	mov	sp, r7
 800bd4c:	bc80      	pop	{r7}
 800bd4e:	4770      	bx	lr

0800bd50 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 800bd50:	b480      	push	{r7}
 800bd52:	b083      	sub	sp, #12
 800bd54:	af00      	add	r7, sp, #0
 800bd56:	6078      	str	r0, [r7, #4]
  /* NOTE : - This function is not required by USB Device FS peripheral, it is used
              only by USB OTG FS peripheral.
            - This function is added to ensure compatibility across platforms.
   */

  return HAL_OK;
 800bd58:	2300      	movs	r3, #0
}
 800bd5a:	4618      	mov	r0, r3
 800bd5c:	370c      	adds	r7, #12
 800bd5e:	46bd      	mov	sp, r7
 800bd60:	bc80      	pop	{r7}
 800bd62:	4770      	bx	lr

0800bd64 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
 800bd64:	b480      	push	{r7}
 800bd66:	b085      	sub	sp, #20
 800bd68:	af00      	add	r7, sp, #0
 800bd6a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 800bd72:	b29b      	uxth	r3, r3
 800bd74:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 800bd76:	68fb      	ldr	r3, [r7, #12]
}
 800bd78:	4618      	mov	r0, r3
 800bd7a:	3714      	adds	r7, #20
 800bd7c:	46bd      	mov	sp, r7
 800bd7e:	bc80      	pop	{r7}
 800bd80:	4770      	bx	lr

0800bd82 <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800bd82:	b480      	push	{r7}
 800bd84:	b08d      	sub	sp, #52	; 0x34
 800bd86:	af00      	add	r7, sp, #0
 800bd88:	60f8      	str	r0, [r7, #12]
 800bd8a:	60b9      	str	r1, [r7, #8]
 800bd8c:	4611      	mov	r1, r2
 800bd8e:	461a      	mov	r2, r3
 800bd90:	460b      	mov	r3, r1
 800bd92:	80fb      	strh	r3, [r7, #6]
 800bd94:	4613      	mov	r3, r2
 800bd96:	80bb      	strh	r3, [r7, #4]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 800bd98:	88bb      	ldrh	r3, [r7, #4]
 800bd9a:	3301      	adds	r3, #1
 800bd9c:	085b      	lsrs	r3, r3, #1
 800bd9e:	623b      	str	r3, [r7, #32]
  uint32_t BaseAddr = (uint32_t)USBx;
 800bda0:	68fb      	ldr	r3, [r7, #12]
 800bda2:	61fb      	str	r3, [r7, #28]
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	627b      	str	r3, [r7, #36]	; 0x24

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800bda8:	88fb      	ldrh	r3, [r7, #6]
 800bdaa:	005a      	lsls	r2, r3, #1
 800bdac:	69fb      	ldr	r3, [r7, #28]
 800bdae:	4413      	add	r3, r2
 800bdb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800bdb4:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = n; i != 0U; i--)
 800bdb6:	6a3b      	ldr	r3, [r7, #32]
 800bdb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdba:	e01e      	b.n	800bdfa <USB_WritePMA+0x78>
  {
    temp1 = *pBuf;
 800bdbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdbe:	781b      	ldrb	r3, [r3, #0]
 800bdc0:	61bb      	str	r3, [r7, #24]
    pBuf++;
 800bdc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdc4:	3301      	adds	r3, #1
 800bdc6:	627b      	str	r3, [r7, #36]	; 0x24
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	781b      	ldrb	r3, [r3, #0]
 800bdcc:	b29b      	uxth	r3, r3
 800bdce:	021b      	lsls	r3, r3, #8
 800bdd0:	b29b      	uxth	r3, r3
 800bdd2:	461a      	mov	r2, r3
 800bdd4:	69bb      	ldr	r3, [r7, #24]
 800bdd6:	4313      	orrs	r3, r2
 800bdd8:	617b      	str	r3, [r7, #20]
    *pdwVal = (uint16_t)temp2;
 800bdda:	697b      	ldr	r3, [r7, #20]
 800bddc:	b29a      	uxth	r2, r3
 800bdde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde0:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 800bde2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bde4:	3302      	adds	r3, #2
 800bde6:	62bb      	str	r3, [r7, #40]	; 0x28

#if PMA_ACCESS > 1U
    pdwVal++;
 800bde8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bdea:	3302      	adds	r3, #2
 800bdec:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

    pBuf++;
 800bdee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdf0:	3301      	adds	r3, #1
 800bdf2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = n; i != 0U; i--)
 800bdf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf6:	3b01      	subs	r3, #1
 800bdf8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bdfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdfc:	2b00      	cmp	r3, #0
 800bdfe:	d1dd      	bne.n	800bdbc <USB_WritePMA+0x3a>
  }
}
 800be00:	bf00      	nop
 800be02:	bf00      	nop
 800be04:	3734      	adds	r7, #52	; 0x34
 800be06:	46bd      	mov	sp, r7
 800be08:	bc80      	pop	{r7}
 800be0a:	4770      	bx	lr

0800be0c <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 800be0c:	b480      	push	{r7}
 800be0e:	b08b      	sub	sp, #44	; 0x2c
 800be10:	af00      	add	r7, sp, #0
 800be12:	60f8      	str	r0, [r7, #12]
 800be14:	60b9      	str	r1, [r7, #8]
 800be16:	4611      	mov	r1, r2
 800be18:	461a      	mov	r2, r3
 800be1a:	460b      	mov	r3, r1
 800be1c:	80fb      	strh	r3, [r7, #6]
 800be1e:	4613      	mov	r3, r2
 800be20:	80bb      	strh	r3, [r7, #4]
  uint32_t n = (uint32_t)wNBytes >> 1;
 800be22:	88bb      	ldrh	r3, [r7, #4]
 800be24:	085b      	lsrs	r3, r3, #1
 800be26:	b29b      	uxth	r3, r3
 800be28:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 800be2a:	68fb      	ldr	r3, [r7, #12]
 800be2c:	617b      	str	r3, [r7, #20]
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 800be2e:	68bb      	ldr	r3, [r7, #8]
 800be30:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800be32:	88fb      	ldrh	r3, [r7, #6]
 800be34:	005a      	lsls	r2, r3, #1
 800be36:	697b      	ldr	r3, [r7, #20]
 800be38:	4413      	add	r3, r2
 800be3a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800be3e:	623b      	str	r3, [r7, #32]

  for (i = n; i != 0U; i--)
 800be40:	69bb      	ldr	r3, [r7, #24]
 800be42:	627b      	str	r3, [r7, #36]	; 0x24
 800be44:	e01b      	b.n	800be7e <USB_ReadPMA+0x72>
  {
    temp = *(__IO uint16_t *)pdwVal;
 800be46:	6a3b      	ldr	r3, [r7, #32]
 800be48:	881b      	ldrh	r3, [r3, #0]
 800be4a:	b29b      	uxth	r3, r3
 800be4c:	613b      	str	r3, [r7, #16]
    pdwVal++;
 800be4e:	6a3b      	ldr	r3, [r7, #32]
 800be50:	3302      	adds	r3, #2
 800be52:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800be54:	693b      	ldr	r3, [r7, #16]
 800be56:	b2da      	uxtb	r2, r3
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800be5c:	69fb      	ldr	r3, [r7, #28]
 800be5e:	3301      	adds	r3, #1
 800be60:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	0a1b      	lsrs	r3, r3, #8
 800be66:	b2da      	uxtb	r2, r3
 800be68:	69fb      	ldr	r3, [r7, #28]
 800be6a:	701a      	strb	r2, [r3, #0]
    pBuf++;
 800be6c:	69fb      	ldr	r3, [r7, #28]
 800be6e:	3301      	adds	r3, #1
 800be70:	61fb      	str	r3, [r7, #28]

#if PMA_ACCESS > 1U
    pdwVal++;
 800be72:	6a3b      	ldr	r3, [r7, #32]
 800be74:	3302      	adds	r3, #2
 800be76:	623b      	str	r3, [r7, #32]
  for (i = n; i != 0U; i--)
 800be78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be7a:	3b01      	subs	r3, #1
 800be7c:	627b      	str	r3, [r7, #36]	; 0x24
 800be7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800be80:	2b00      	cmp	r3, #0
 800be82:	d1e0      	bne.n	800be46 <USB_ReadPMA+0x3a>
#endif
  }

  if ((wNBytes % 2U) != 0U)
 800be84:	88bb      	ldrh	r3, [r7, #4]
 800be86:	f003 0301 	and.w	r3, r3, #1
 800be8a:	b29b      	uxth	r3, r3
 800be8c:	2b00      	cmp	r3, #0
 800be8e:	d007      	beq.n	800bea0 <USB_ReadPMA+0x94>
  {
    temp = *pdwVal;
 800be90:	6a3b      	ldr	r3, [r7, #32]
 800be92:	881b      	ldrh	r3, [r3, #0]
 800be94:	b29b      	uxth	r3, r3
 800be96:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800be98:	693b      	ldr	r3, [r7, #16]
 800be9a:	b2da      	uxtb	r2, r3
 800be9c:	69fb      	ldr	r3, [r7, #28]
 800be9e:	701a      	strb	r2, [r3, #0]
  }
}
 800bea0:	bf00      	nop
 800bea2:	372c      	adds	r7, #44	; 0x2c
 800bea4:	46bd      	mov	sp, r7
 800bea6:	bc80      	pop	{r7}
 800bea8:	4770      	bx	lr
	...

0800beac <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 800beac:	b580      	push	{r7, lr}
 800beae:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 800beb0:	4904      	ldr	r1, [pc, #16]	; (800bec4 <MX_FATFS_Init+0x18>)
 800beb2:	4805      	ldr	r0, [pc, #20]	; (800bec8 <MX_FATFS_Init+0x1c>)
 800beb4:	f005 f842 	bl	8010f3c <FATFS_LinkDriver>
 800beb8:	4603      	mov	r3, r0
 800beba:	461a      	mov	r2, r3
 800bebc:	4b03      	ldr	r3, [pc, #12]	; (800becc <MX_FATFS_Init+0x20>)
 800bebe:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 800bec0:	bf00      	nop
 800bec2:	bd80      	pop	{r7, pc}
 800bec4:	20000ebc 	.word	0x20000ebc
 800bec8:	20000090 	.word	0x20000090
 800becc:	20000eb8 	.word	0x20000eb8

0800bed0 <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800bed0:	b480      	push	{r7}
 800bed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 800bed4:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 800bed6:	4618      	mov	r0, r3
 800bed8:	46bd      	mov	sp, r7
 800beda:	bc80      	pop	{r7}
 800bedc:	4770      	bx	lr

0800bede <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 800bede:	b580      	push	{r7, lr}
 800bee0:	b082      	sub	sp, #8
 800bee2:	af00      	add	r7, sp, #0
 800bee4:	4603      	mov	r3, r0
 800bee6:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    //Stat = STA_NOINIT;
    //return Stat;
	return USER_SPI_initialize(pdrv);
 800bee8:	79fb      	ldrb	r3, [r7, #7]
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f9dc 	bl	800c2a8 <USER_SPI_initialize>
 800bef0:	4603      	mov	r3, r0
  /* USER CODE END INIT */
}
 800bef2:	4618      	mov	r0, r3
 800bef4:	3708      	adds	r7, #8
 800bef6:	46bd      	mov	sp, r7
 800bef8:	bd80      	pop	{r7, pc}

0800befa <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 800befa:	b580      	push	{r7, lr}
 800befc:	b082      	sub	sp, #8
 800befe:	af00      	add	r7, sp, #0
 800bf00:	4603      	mov	r3, r0
 800bf02:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
//    Stat = STA_NOINIT;
//    return Stat;
	return USER_SPI_status(pdrv);
 800bf04:	79fb      	ldrb	r3, [r7, #7]
 800bf06:	4618      	mov	r0, r3
 800bf08:	f000 faba 	bl	800c480 <USER_SPI_status>
 800bf0c:	4603      	mov	r3, r0
  /* USER CODE END STATUS */
}
 800bf0e:	4618      	mov	r0, r3
 800bf10:	3708      	adds	r7, #8
 800bf12:	46bd      	mov	sp, r7
 800bf14:	bd80      	pop	{r7, pc}

0800bf16 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 800bf16:	b580      	push	{r7, lr}
 800bf18:	b084      	sub	sp, #16
 800bf1a:	af00      	add	r7, sp, #0
 800bf1c:	60b9      	str	r1, [r7, #8]
 800bf1e:	607a      	str	r2, [r7, #4]
 800bf20:	603b      	str	r3, [r7, #0]
 800bf22:	4603      	mov	r3, r0
 800bf24:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
//    return RES_OK;
	return USER_SPI_read(pdrv, buff, sector, count);
 800bf26:	7bf8      	ldrb	r0, [r7, #15]
 800bf28:	683b      	ldr	r3, [r7, #0]
 800bf2a:	687a      	ldr	r2, [r7, #4]
 800bf2c:	68b9      	ldr	r1, [r7, #8]
 800bf2e:	f000 fabb 	bl	800c4a8 <USER_SPI_read>
 800bf32:	4603      	mov	r3, r0
  /* USER CODE END READ */
}
 800bf34:	4618      	mov	r0, r3
 800bf36:	3710      	adds	r7, #16
 800bf38:	46bd      	mov	sp, r7
 800bf3a:	bd80      	pop	{r7, pc}

0800bf3c <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	b084      	sub	sp, #16
 800bf40:	af00      	add	r7, sp, #0
 800bf42:	60b9      	str	r1, [r7, #8]
 800bf44:	607a      	str	r2, [r7, #4]
 800bf46:	603b      	str	r3, [r7, #0]
 800bf48:	4603      	mov	r3, r0
 800bf4a:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
//    return RES_OK;
	return USER_SPI_write(pdrv, buff, sector, count);
 800bf4c:	7bf8      	ldrb	r0, [r7, #15]
 800bf4e:	683b      	ldr	r3, [r7, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	68b9      	ldr	r1, [r7, #8]
 800bf54:	f000 fb0e 	bl	800c574 <USER_SPI_write>
 800bf58:	4603      	mov	r3, r0
  /* USER CODE END WRITE */
}
 800bf5a:	4618      	mov	r0, r3
 800bf5c:	3710      	adds	r7, #16
 800bf5e:	46bd      	mov	sp, r7
 800bf60:	bd80      	pop	{r7, pc}

0800bf62 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 800bf62:	b580      	push	{r7, lr}
 800bf64:	b082      	sub	sp, #8
 800bf66:	af00      	add	r7, sp, #0
 800bf68:	4603      	mov	r3, r0
 800bf6a:	603a      	str	r2, [r7, #0]
 800bf6c:	71fb      	strb	r3, [r7, #7]
 800bf6e:	460b      	mov	r3, r1
 800bf70:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
//    DRESULT res = RES_ERROR;
//    return res;
	return USER_SPI_ioctl(pdrv, cmd, buff);
 800bf72:	79b9      	ldrb	r1, [r7, #6]
 800bf74:	79fb      	ldrb	r3, [r7, #7]
 800bf76:	683a      	ldr	r2, [r7, #0]
 800bf78:	4618      	mov	r0, r3
 800bf7a:	f000 fb77 	bl	800c66c <USER_SPI_ioctl>
 800bf7e:	4603      	mov	r3, r0
  /* USER CODE END IOCTL */
}
 800bf80:	4618      	mov	r0, r3
 800bf82:	3708      	adds	r7, #8
 800bf84:	46bd      	mov	sp, r7
 800bf86:	bd80      	pop	{r7, pc}

0800bf88 <SPI_Timer_On>:
BYTE CardType;			/* Card type flags */

uint32_t spiTimerTickStart;
uint32_t spiTimerTickDelay;

void SPI_Timer_On(uint32_t waitTicks) {
 800bf88:	b580      	push	{r7, lr}
 800bf8a:	b082      	sub	sp, #8
 800bf8c:	af00      	add	r7, sp, #0
 800bf8e:	6078      	str	r0, [r7, #4]
    spiTimerTickStart = HAL_GetTick();
 800bf90:	f7f8 fb16 	bl	80045c0 <HAL_GetTick>
 800bf94:	4603      	mov	r3, r0
 800bf96:	4a04      	ldr	r2, [pc, #16]	; (800bfa8 <SPI_Timer_On+0x20>)
 800bf98:	6013      	str	r3, [r2, #0]
    spiTimerTickDelay = waitTicks;
 800bf9a:	4a04      	ldr	r2, [pc, #16]	; (800bfac <SPI_Timer_On+0x24>)
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	6013      	str	r3, [r2, #0]
}
 800bfa0:	bf00      	nop
 800bfa2:	3708      	adds	r7, #8
 800bfa4:	46bd      	mov	sp, r7
 800bfa6:	bd80      	pop	{r7, pc}
 800bfa8:	20000ec4 	.word	0x20000ec4
 800bfac:	20000ec8 	.word	0x20000ec8

0800bfb0 <SPI_Timer_Status>:

uint8_t SPI_Timer_Status() {
 800bfb0:	b580      	push	{r7, lr}
 800bfb2:	af00      	add	r7, sp, #0
    return ((HAL_GetTick() - spiTimerTickStart) < spiTimerTickDelay);
 800bfb4:	f7f8 fb04 	bl	80045c0 <HAL_GetTick>
 800bfb8:	4602      	mov	r2, r0
 800bfba:	4b06      	ldr	r3, [pc, #24]	; (800bfd4 <SPI_Timer_Status+0x24>)
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	1ad2      	subs	r2, r2, r3
 800bfc0:	4b05      	ldr	r3, [pc, #20]	; (800bfd8 <SPI_Timer_Status+0x28>)
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	429a      	cmp	r2, r3
 800bfc6:	bf34      	ite	cc
 800bfc8:	2301      	movcc	r3, #1
 800bfca:	2300      	movcs	r3, #0
 800bfcc:	b2db      	uxtb	r3, r3
}
 800bfce:	4618      	mov	r0, r3
 800bfd0:	bd80      	pop	{r7, pc}
 800bfd2:	bf00      	nop
 800bfd4:	20000ec4 	.word	0x20000ec4
 800bfd8:	20000ec8 	.word	0x20000ec8

0800bfdc <xchg_spi>:
/* Exchange a byte */
static
BYTE xchg_spi (
	BYTE dat	/* Data to send */
)
{
 800bfdc:	b580      	push	{r7, lr}
 800bfde:	b086      	sub	sp, #24
 800bfe0:	af02      	add	r7, sp, #8
 800bfe2:	4603      	mov	r3, r0
 800bfe4:	71fb      	strb	r3, [r7, #7]
	BYTE rxDat;
    HAL_SPI_TransmitReceive(&SD_SPI_HANDLE, &dat, &rxDat, 1, 50);
 800bfe6:	f107 020f 	add.w	r2, r7, #15
 800bfea:	1df9      	adds	r1, r7, #7
 800bfec:	2332      	movs	r3, #50	; 0x32
 800bfee:	9300      	str	r3, [sp, #0]
 800bff0:	2301      	movs	r3, #1
 800bff2:	4804      	ldr	r0, [pc, #16]	; (800c004 <xchg_spi+0x28>)
 800bff4:	f7fc f858 	bl	80080a8 <HAL_SPI_TransmitReceive>
    return rxDat;
 800bff8:	7bfb      	ldrb	r3, [r7, #15]
}
 800bffa:	4618      	mov	r0, r3
 800bffc:	3710      	adds	r7, #16
 800bffe:	46bd      	mov	sp, r7
 800c000:	bd80      	pop	{r7, pc}
 800c002:	bf00      	nop
 800c004:	2000032c 	.word	0x2000032c

0800c008 <rcvr_spi_multi>:
static
void rcvr_spi_multi (
	BYTE *buff,		/* Pointer to data buffer */
	UINT btr		/* Number of bytes to receive (even number) */
)
{
 800c008:	b590      	push	{r4, r7, lr}
 800c00a:	b085      	sub	sp, #20
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]
 800c010:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btr; i++) {
 800c012:	2300      	movs	r3, #0
 800c014:	60fb      	str	r3, [r7, #12]
 800c016:	e00a      	b.n	800c02e <rcvr_spi_multi+0x26>
		*(buff+i) = xchg_spi(0xFF);
 800c018:	687a      	ldr	r2, [r7, #4]
 800c01a:	68fb      	ldr	r3, [r7, #12]
 800c01c:	18d4      	adds	r4, r2, r3
 800c01e:	20ff      	movs	r0, #255	; 0xff
 800c020:	f7ff ffdc 	bl	800bfdc <xchg_spi>
 800c024:	4603      	mov	r3, r0
 800c026:	7023      	strb	r3, [r4, #0]
	for(UINT i=0; i<btr; i++) {
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	3301      	adds	r3, #1
 800c02c:	60fb      	str	r3, [r7, #12]
 800c02e:	68fa      	ldr	r2, [r7, #12]
 800c030:	683b      	ldr	r3, [r7, #0]
 800c032:	429a      	cmp	r2, r3
 800c034:	d3f0      	bcc.n	800c018 <rcvr_spi_multi+0x10>
	}
}
 800c036:	bf00      	nop
 800c038:	bf00      	nop
 800c03a:	3714      	adds	r7, #20
 800c03c:	46bd      	mov	sp, r7
 800c03e:	bd90      	pop	{r4, r7, pc}

0800c040 <xmit_spi_multi>:
static
void xmit_spi_multi (
	const BYTE *buff,	/* Pointer to the data */
	UINT btx			/* Number of bytes to send (even number) */
)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
 800c048:	6039      	str	r1, [r7, #0]
	for(UINT i=0; i<btx; i++) {
 800c04a:	2300      	movs	r3, #0
 800c04c:	60fb      	str	r3, [r7, #12]
 800c04e:	e009      	b.n	800c064 <xmit_spi_multi+0x24>
		xchg_spi(*(buff+i));
 800c050:	687a      	ldr	r2, [r7, #4]
 800c052:	68fb      	ldr	r3, [r7, #12]
 800c054:	4413      	add	r3, r2
 800c056:	781b      	ldrb	r3, [r3, #0]
 800c058:	4618      	mov	r0, r3
 800c05a:	f7ff ffbf 	bl	800bfdc <xchg_spi>
	for(UINT i=0; i<btx; i++) {
 800c05e:	68fb      	ldr	r3, [r7, #12]
 800c060:	3301      	adds	r3, #1
 800c062:	60fb      	str	r3, [r7, #12]
 800c064:	68fa      	ldr	r2, [r7, #12]
 800c066:	683b      	ldr	r3, [r7, #0]
 800c068:	429a      	cmp	r2, r3
 800c06a:	d3f1      	bcc.n	800c050 <xmit_spi_multi+0x10>
	}
}
 800c06c:	bf00      	nop
 800c06e:	bf00      	nop
 800c070:	3710      	adds	r7, #16
 800c072:	46bd      	mov	sp, r7
 800c074:	bd80      	pop	{r7, pc}

0800c076 <wait_ready>:

static
int wait_ready (	/* 1:Ready, 0:Timeout */
	UINT wt			/* Timeout [ms] */
)
{
 800c076:	b580      	push	{r7, lr}
 800c078:	b086      	sub	sp, #24
 800c07a:	af00      	add	r7, sp, #0
 800c07c:	6078      	str	r0, [r7, #4]
	//wait_ready needs its own timer, unfortunately, so it can't use the
	//spi_timer functions
	uint32_t waitSpiTimerTickStart;
	uint32_t waitSpiTimerTickDelay;

	waitSpiTimerTickStart = HAL_GetTick();
 800c07e:	f7f8 fa9f 	bl	80045c0 <HAL_GetTick>
 800c082:	6178      	str	r0, [r7, #20]
	waitSpiTimerTickDelay = (uint32_t)wt;
 800c084:	687b      	ldr	r3, [r7, #4]
 800c086:	613b      	str	r3, [r7, #16]
	do {
		d = xchg_spi(0xFF);
 800c088:	20ff      	movs	r0, #255	; 0xff
 800c08a:	f7ff ffa7 	bl	800bfdc <xchg_spi>
 800c08e:	4603      	mov	r3, r0
 800c090:	73fb      	strb	r3, [r7, #15]
		/* This loop takes a time. Insert rot_rdq() here for multitask envilonment. */
	} while (d != 0xFF && ((HAL_GetTick() - waitSpiTimerTickStart) < waitSpiTimerTickDelay));	/* Wait for card goes ready or timeout */
 800c092:	7bfb      	ldrb	r3, [r7, #15]
 800c094:	2bff      	cmp	r3, #255	; 0xff
 800c096:	d007      	beq.n	800c0a8 <wait_ready+0x32>
 800c098:	f7f8 fa92 	bl	80045c0 <HAL_GetTick>
 800c09c:	4602      	mov	r2, r0
 800c09e:	697b      	ldr	r3, [r7, #20]
 800c0a0:	1ad3      	subs	r3, r2, r3
 800c0a2:	693a      	ldr	r2, [r7, #16]
 800c0a4:	429a      	cmp	r2, r3
 800c0a6:	d8ef      	bhi.n	800c088 <wait_ready+0x12>

	return (d == 0xFF) ? 1 : 0;
 800c0a8:	7bfb      	ldrb	r3, [r7, #15]
 800c0aa:	2bff      	cmp	r3, #255	; 0xff
 800c0ac:	bf0c      	ite	eq
 800c0ae:	2301      	moveq	r3, #1
 800c0b0:	2300      	movne	r3, #0
 800c0b2:	b2db      	uxtb	r3, r3
}
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	3718      	adds	r7, #24
 800c0b8:	46bd      	mov	sp, r7
 800c0ba:	bd80      	pop	{r7, pc}

0800c0bc <despiselect>:
/* Despiselect card and release SPI                                         */
/*-----------------------------------------------------------------------*/

static
void despiselect (void)
{
 800c0bc:	b580      	push	{r7, lr}
 800c0be:	af00      	add	r7, sp, #0
	CS_HIGH();		/* Set CS# high */
 800c0c0:	2201      	movs	r2, #1
 800c0c2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0c6:	4804      	ldr	r0, [pc, #16]	; (800c0d8 <despiselect+0x1c>)
 800c0c8:	f7f9 f913 	bl	80052f2 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO hi-z for multiple slave SPI) */
 800c0cc:	20ff      	movs	r0, #255	; 0xff
 800c0ce:	f7ff ff85 	bl	800bfdc <xchg_spi>

}
 800c0d2:	bf00      	nop
 800c0d4:	bd80      	pop	{r7, pc}
 800c0d6:	bf00      	nop
 800c0d8:	40020000 	.word	0x40020000

0800c0dc <spiselect>:
/* Select card and wait for ready                                        */
/*-----------------------------------------------------------------------*/

static
int spiselect (void)	/* 1:OK, 0:Timeout */
{
 800c0dc:	b580      	push	{r7, lr}
 800c0de:	af00      	add	r7, sp, #0
	CS_LOW();		/* Set CS# low */
 800c0e0:	2200      	movs	r2, #0
 800c0e2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800c0e6:	480a      	ldr	r0, [pc, #40]	; (800c110 <spiselect+0x34>)
 800c0e8:	f7f9 f903 	bl	80052f2 <HAL_GPIO_WritePin>
	xchg_spi(0xFF);	/* Dummy clock (force DO enabled) */
 800c0ec:	20ff      	movs	r0, #255	; 0xff
 800c0ee:	f7ff ff75 	bl	800bfdc <xchg_spi>
	if (wait_ready(500)) return 1;	/* Wait for card ready */
 800c0f2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c0f6:	f7ff ffbe 	bl	800c076 <wait_ready>
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	2b00      	cmp	r3, #0
 800c0fe:	d001      	beq.n	800c104 <spiselect+0x28>
 800c100:	2301      	movs	r3, #1
 800c102:	e002      	b.n	800c10a <spiselect+0x2e>

	despiselect();
 800c104:	f7ff ffda 	bl	800c0bc <despiselect>
	return 0;	/* Timeout */
 800c108:	2300      	movs	r3, #0
}
 800c10a:	4618      	mov	r0, r3
 800c10c:	bd80      	pop	{r7, pc}
 800c10e:	bf00      	nop
 800c110:	40020000 	.word	0x40020000

0800c114 <rcvr_datablock>:
static
int rcvr_datablock (	/* 1:OK, 0:Error */
	BYTE *buff,			/* Data buffer */
	UINT btr			/* Data block length (byte) */
)
{
 800c114:	b580      	push	{r7, lr}
 800c116:	b084      	sub	sp, #16
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
	BYTE token;


	SPI_Timer_On(200);
 800c11e:	20c8      	movs	r0, #200	; 0xc8
 800c120:	f7ff ff32 	bl	800bf88 <SPI_Timer_On>
	do {							/* Wait for DataStart token in timeout of 200ms */
		token = xchg_spi(0xFF);
 800c124:	20ff      	movs	r0, #255	; 0xff
 800c126:	f7ff ff59 	bl	800bfdc <xchg_spi>
 800c12a:	4603      	mov	r3, r0
 800c12c:	73fb      	strb	r3, [r7, #15]
		/* This loop will take a time. Insert rot_rdq() here for multitask envilonment. */
	} while ((token == 0xFF) && SPI_Timer_Status());
 800c12e:	7bfb      	ldrb	r3, [r7, #15]
 800c130:	2bff      	cmp	r3, #255	; 0xff
 800c132:	d104      	bne.n	800c13e <rcvr_datablock+0x2a>
 800c134:	f7ff ff3c 	bl	800bfb0 <SPI_Timer_Status>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d1f2      	bne.n	800c124 <rcvr_datablock+0x10>
	if(token != 0xFE) return 0;		/* Function fails if invalid DataStart token or timeout */
 800c13e:	7bfb      	ldrb	r3, [r7, #15]
 800c140:	2bfe      	cmp	r3, #254	; 0xfe
 800c142:	d001      	beq.n	800c148 <rcvr_datablock+0x34>
 800c144:	2300      	movs	r3, #0
 800c146:	e00a      	b.n	800c15e <rcvr_datablock+0x4a>

	rcvr_spi_multi(buff, btr);		/* Store trailing data to the buffer */
 800c148:	6839      	ldr	r1, [r7, #0]
 800c14a:	6878      	ldr	r0, [r7, #4]
 800c14c:	f7ff ff5c 	bl	800c008 <rcvr_spi_multi>
	xchg_spi(0xFF); xchg_spi(0xFF);			/* Discard CRC */
 800c150:	20ff      	movs	r0, #255	; 0xff
 800c152:	f7ff ff43 	bl	800bfdc <xchg_spi>
 800c156:	20ff      	movs	r0, #255	; 0xff
 800c158:	f7ff ff40 	bl	800bfdc <xchg_spi>

	return 1;						/* Function succeeded */
 800c15c:	2301      	movs	r3, #1
}
 800c15e:	4618      	mov	r0, r3
 800c160:	3710      	adds	r7, #16
 800c162:	46bd      	mov	sp, r7
 800c164:	bd80      	pop	{r7, pc}

0800c166 <xmit_datablock>:
static
int xmit_datablock (	/* 1:OK, 0:Failed */
	const BYTE *buff,	/* Ponter to 512 byte data to be sent */
	BYTE token			/* Token */
)
{
 800c166:	b580      	push	{r7, lr}
 800c168:	b084      	sub	sp, #16
 800c16a:	af00      	add	r7, sp, #0
 800c16c:	6078      	str	r0, [r7, #4]
 800c16e:	460b      	mov	r3, r1
 800c170:	70fb      	strb	r3, [r7, #3]
	BYTE resp;


	if (!wait_ready(500)) return 0;		/* Wait for card ready */
 800c172:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800c176:	f7ff ff7e 	bl	800c076 <wait_ready>
 800c17a:	4603      	mov	r3, r0
 800c17c:	2b00      	cmp	r3, #0
 800c17e:	d101      	bne.n	800c184 <xmit_datablock+0x1e>
 800c180:	2300      	movs	r3, #0
 800c182:	e01e      	b.n	800c1c2 <xmit_datablock+0x5c>

	xchg_spi(token);					/* Send token */
 800c184:	78fb      	ldrb	r3, [r7, #3]
 800c186:	4618      	mov	r0, r3
 800c188:	f7ff ff28 	bl	800bfdc <xchg_spi>
	if (token != 0xFD) {				/* Send data if token is other than StopTran */
 800c18c:	78fb      	ldrb	r3, [r7, #3]
 800c18e:	2bfd      	cmp	r3, #253	; 0xfd
 800c190:	d016      	beq.n	800c1c0 <xmit_datablock+0x5a>
		xmit_spi_multi(buff, 512);		/* Data */
 800c192:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c196:	6878      	ldr	r0, [r7, #4]
 800c198:	f7ff ff52 	bl	800c040 <xmit_spi_multi>
		xchg_spi(0xFF); xchg_spi(0xFF);	/* Dummy CRC */
 800c19c:	20ff      	movs	r0, #255	; 0xff
 800c19e:	f7ff ff1d 	bl	800bfdc <xchg_spi>
 800c1a2:	20ff      	movs	r0, #255	; 0xff
 800c1a4:	f7ff ff1a 	bl	800bfdc <xchg_spi>

		resp = xchg_spi(0xFF);				/* Receive data resp */
 800c1a8:	20ff      	movs	r0, #255	; 0xff
 800c1aa:	f7ff ff17 	bl	800bfdc <xchg_spi>
 800c1ae:	4603      	mov	r3, r0
 800c1b0:	73fb      	strb	r3, [r7, #15]
		if ((resp & 0x1F) != 0x05) return 0;	/* Function fails if the data packet was not accepted */
 800c1b2:	7bfb      	ldrb	r3, [r7, #15]
 800c1b4:	f003 031f 	and.w	r3, r3, #31
 800c1b8:	2b05      	cmp	r3, #5
 800c1ba:	d001      	beq.n	800c1c0 <xmit_datablock+0x5a>
 800c1bc:	2300      	movs	r3, #0
 800c1be:	e000      	b.n	800c1c2 <xmit_datablock+0x5c>
	}
	return 1;
 800c1c0:	2301      	movs	r3, #1
}
 800c1c2:	4618      	mov	r0, r3
 800c1c4:	3710      	adds	r7, #16
 800c1c6:	46bd      	mov	sp, r7
 800c1c8:	bd80      	pop	{r7, pc}

0800c1ca <send_cmd>:
static
BYTE send_cmd (		/* Return value: R1 resp (bit7==1:Failed to send) */
	BYTE cmd,		/* Command index */
	DWORD arg		/* Argument */
)
{
 800c1ca:	b580      	push	{r7, lr}
 800c1cc:	b084      	sub	sp, #16
 800c1ce:	af00      	add	r7, sp, #0
 800c1d0:	4603      	mov	r3, r0
 800c1d2:	6039      	str	r1, [r7, #0]
 800c1d4:	71fb      	strb	r3, [r7, #7]
	BYTE n, res;


	if (cmd & 0x80) {	/* Send a CMD55 prior to ACMD<n> */
 800c1d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	da0e      	bge.n	800c1fc <send_cmd+0x32>
		cmd &= 0x7F;
 800c1de:	79fb      	ldrb	r3, [r7, #7]
 800c1e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800c1e4:	71fb      	strb	r3, [r7, #7]
		res = send_cmd(CMD55, 0);
 800c1e6:	2100      	movs	r1, #0
 800c1e8:	2037      	movs	r0, #55	; 0x37
 800c1ea:	f7ff ffee 	bl	800c1ca <send_cmd>
 800c1ee:	4603      	mov	r3, r0
 800c1f0:	73bb      	strb	r3, [r7, #14]
		if (res > 1) return res;
 800c1f2:	7bbb      	ldrb	r3, [r7, #14]
 800c1f4:	2b01      	cmp	r3, #1
 800c1f6:	d901      	bls.n	800c1fc <send_cmd+0x32>
 800c1f8:	7bbb      	ldrb	r3, [r7, #14]
 800c1fa:	e051      	b.n	800c2a0 <send_cmd+0xd6>
	}

	/* Select the card and wait for ready except to stop multiple block read */
	if (cmd != CMD12) {
 800c1fc:	79fb      	ldrb	r3, [r7, #7]
 800c1fe:	2b0c      	cmp	r3, #12
 800c200:	d008      	beq.n	800c214 <send_cmd+0x4a>
		despiselect();
 800c202:	f7ff ff5b 	bl	800c0bc <despiselect>
		if (!spiselect()) return 0xFF;
 800c206:	f7ff ff69 	bl	800c0dc <spiselect>
 800c20a:	4603      	mov	r3, r0
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d101      	bne.n	800c214 <send_cmd+0x4a>
 800c210:	23ff      	movs	r3, #255	; 0xff
 800c212:	e045      	b.n	800c2a0 <send_cmd+0xd6>
	}

	/* Send command packet */
	xchg_spi(0x40 | cmd);				/* Start + command index */
 800c214:	79fb      	ldrb	r3, [r7, #7]
 800c216:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c21a:	b2db      	uxtb	r3, r3
 800c21c:	4618      	mov	r0, r3
 800c21e:	f7ff fedd 	bl	800bfdc <xchg_spi>
	xchg_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
 800c222:	683b      	ldr	r3, [r7, #0]
 800c224:	0e1b      	lsrs	r3, r3, #24
 800c226:	b2db      	uxtb	r3, r3
 800c228:	4618      	mov	r0, r3
 800c22a:	f7ff fed7 	bl	800bfdc <xchg_spi>
	xchg_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
 800c22e:	683b      	ldr	r3, [r7, #0]
 800c230:	0c1b      	lsrs	r3, r3, #16
 800c232:	b2db      	uxtb	r3, r3
 800c234:	4618      	mov	r0, r3
 800c236:	f7ff fed1 	bl	800bfdc <xchg_spi>
	xchg_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
 800c23a:	683b      	ldr	r3, [r7, #0]
 800c23c:	0a1b      	lsrs	r3, r3, #8
 800c23e:	b2db      	uxtb	r3, r3
 800c240:	4618      	mov	r0, r3
 800c242:	f7ff fecb 	bl	800bfdc <xchg_spi>
	xchg_spi((BYTE)arg);				/* Argument[7..0] */
 800c246:	683b      	ldr	r3, [r7, #0]
 800c248:	b2db      	uxtb	r3, r3
 800c24a:	4618      	mov	r0, r3
 800c24c:	f7ff fec6 	bl	800bfdc <xchg_spi>
	n = 0x01;							/* Dummy CRC + Stop */
 800c250:	2301      	movs	r3, #1
 800c252:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
 800c254:	79fb      	ldrb	r3, [r7, #7]
 800c256:	2b00      	cmp	r3, #0
 800c258:	d101      	bne.n	800c25e <send_cmd+0x94>
 800c25a:	2395      	movs	r3, #149	; 0x95
 800c25c:	73fb      	strb	r3, [r7, #15]
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
 800c25e:	79fb      	ldrb	r3, [r7, #7]
 800c260:	2b08      	cmp	r3, #8
 800c262:	d101      	bne.n	800c268 <send_cmd+0x9e>
 800c264:	2387      	movs	r3, #135	; 0x87
 800c266:	73fb      	strb	r3, [r7, #15]
	xchg_spi(n);
 800c268:	7bfb      	ldrb	r3, [r7, #15]
 800c26a:	4618      	mov	r0, r3
 800c26c:	f7ff feb6 	bl	800bfdc <xchg_spi>

	/* Receive command resp */
	if (cmd == CMD12) xchg_spi(0xFF);	/* Diacard following one byte when CMD12 */
 800c270:	79fb      	ldrb	r3, [r7, #7]
 800c272:	2b0c      	cmp	r3, #12
 800c274:	d102      	bne.n	800c27c <send_cmd+0xb2>
 800c276:	20ff      	movs	r0, #255	; 0xff
 800c278:	f7ff feb0 	bl	800bfdc <xchg_spi>
	n = 10;								/* Wait for response (10 bytes max) */
 800c27c:	230a      	movs	r3, #10
 800c27e:	73fb      	strb	r3, [r7, #15]
	do {
		res = xchg_spi(0xFF);
 800c280:	20ff      	movs	r0, #255	; 0xff
 800c282:	f7ff feab 	bl	800bfdc <xchg_spi>
 800c286:	4603      	mov	r3, r0
 800c288:	73bb      	strb	r3, [r7, #14]
	} while ((res & 0x80) && --n);
 800c28a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c28e:	2b00      	cmp	r3, #0
 800c290:	da05      	bge.n	800c29e <send_cmd+0xd4>
 800c292:	7bfb      	ldrb	r3, [r7, #15]
 800c294:	3b01      	subs	r3, #1
 800c296:	73fb      	strb	r3, [r7, #15]
 800c298:	7bfb      	ldrb	r3, [r7, #15]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d1f0      	bne.n	800c280 <send_cmd+0xb6>

	return res;							/* Return received response */
 800c29e:	7bbb      	ldrb	r3, [r7, #14]
}
 800c2a0:	4618      	mov	r0, r3
 800c2a2:	3710      	adds	r7, #16
 800c2a4:	46bd      	mov	sp, r7
 800c2a6:	bd80      	pop	{r7, pc}

0800c2a8 <USER_SPI_initialize>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_initialize (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c2a8:	b590      	push	{r4, r7, lr}
 800c2aa:	b085      	sub	sp, #20
 800c2ac:	af00      	add	r7, sp, #0
 800c2ae:	4603      	mov	r3, r0
 800c2b0:	71fb      	strb	r3, [r7, #7]
	BYTE n, cmd, ty, ocr[4];

	if (drv != 0) return STA_NOINIT;		/* Supports only drive 0 */
 800c2b2:	79fb      	ldrb	r3, [r7, #7]
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d001      	beq.n	800c2bc <USER_SPI_initialize+0x14>
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	e0d6      	b.n	800c46a <USER_SPI_initialize+0x1c2>
	//assume SPI already init init_spi();	/* Initialize SPI */

	if (Stat & STA_NODISK) return Stat;	/* Is card existing in the soket? */
 800c2bc:	4b6d      	ldr	r3, [pc, #436]	; (800c474 <USER_SPI_initialize+0x1cc>)
 800c2be:	781b      	ldrb	r3, [r3, #0]
 800c2c0:	b2db      	uxtb	r3, r3
 800c2c2:	f003 0302 	and.w	r3, r3, #2
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d003      	beq.n	800c2d2 <USER_SPI_initialize+0x2a>
 800c2ca:	4b6a      	ldr	r3, [pc, #424]	; (800c474 <USER_SPI_initialize+0x1cc>)
 800c2cc:	781b      	ldrb	r3, [r3, #0]
 800c2ce:	b2db      	uxtb	r3, r3
 800c2d0:	e0cb      	b.n	800c46a <USER_SPI_initialize+0x1c2>

	FCLK_SLOW();
 800c2d2:	4b69      	ldr	r3, [pc, #420]	; (800c478 <USER_SPI_initialize+0x1d0>)
 800c2d4:	681b      	ldr	r3, [r3, #0]
 800c2d6:	681b      	ldr	r3, [r3, #0]
 800c2d8:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c2dc:	4b66      	ldr	r3, [pc, #408]	; (800c478 <USER_SPI_initialize+0x1d0>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	f042 0230 	orr.w	r2, r2, #48	; 0x30
 800c2e4:	601a      	str	r2, [r3, #0]
	for (n = 10; n; n--) xchg_spi(0xFF);	/* Send 80 dummy clocks */
 800c2e6:	230a      	movs	r3, #10
 800c2e8:	73fb      	strb	r3, [r7, #15]
 800c2ea:	e005      	b.n	800c2f8 <USER_SPI_initialize+0x50>
 800c2ec:	20ff      	movs	r0, #255	; 0xff
 800c2ee:	f7ff fe75 	bl	800bfdc <xchg_spi>
 800c2f2:	7bfb      	ldrb	r3, [r7, #15]
 800c2f4:	3b01      	subs	r3, #1
 800c2f6:	73fb      	strb	r3, [r7, #15]
 800c2f8:	7bfb      	ldrb	r3, [r7, #15]
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d1f6      	bne.n	800c2ec <USER_SPI_initialize+0x44>

	ty = 0;
 800c2fe:	2300      	movs	r3, #0
 800c300:	737b      	strb	r3, [r7, #13]
	if (send_cmd(CMD0, 0) == 1) {			/* Put the card SPI/Idle state */
 800c302:	2100      	movs	r1, #0
 800c304:	2000      	movs	r0, #0
 800c306:	f7ff ff60 	bl	800c1ca <send_cmd>
 800c30a:	4603      	mov	r3, r0
 800c30c:	2b01      	cmp	r3, #1
 800c30e:	f040 808b 	bne.w	800c428 <USER_SPI_initialize+0x180>
		SPI_Timer_On(1000);					/* Initialization timeout = 1 sec */
 800c312:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800c316:	f7ff fe37 	bl	800bf88 <SPI_Timer_On>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2? */
 800c31a:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800c31e:	2008      	movs	r0, #8
 800c320:	f7ff ff53 	bl	800c1ca <send_cmd>
 800c324:	4603      	mov	r3, r0
 800c326:	2b01      	cmp	r3, #1
 800c328:	d151      	bne.n	800c3ce <USER_SPI_initialize+0x126>
			for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);	/* Get 32 bit return value of R7 resp */
 800c32a:	2300      	movs	r3, #0
 800c32c:	73fb      	strb	r3, [r7, #15]
 800c32e:	e00d      	b.n	800c34c <USER_SPI_initialize+0xa4>
 800c330:	7bfc      	ldrb	r4, [r7, #15]
 800c332:	20ff      	movs	r0, #255	; 0xff
 800c334:	f7ff fe52 	bl	800bfdc <xchg_spi>
 800c338:	4603      	mov	r3, r0
 800c33a:	461a      	mov	r2, r3
 800c33c:	f104 0310 	add.w	r3, r4, #16
 800c340:	443b      	add	r3, r7
 800c342:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c346:	7bfb      	ldrb	r3, [r7, #15]
 800c348:	3301      	adds	r3, #1
 800c34a:	73fb      	strb	r3, [r7, #15]
 800c34c:	7bfb      	ldrb	r3, [r7, #15]
 800c34e:	2b03      	cmp	r3, #3
 800c350:	d9ee      	bls.n	800c330 <USER_SPI_initialize+0x88>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* Is the card supports vcc of 2.7-3.6V? */
 800c352:	7abb      	ldrb	r3, [r7, #10]
 800c354:	2b01      	cmp	r3, #1
 800c356:	d167      	bne.n	800c428 <USER_SPI_initialize+0x180>
 800c358:	7afb      	ldrb	r3, [r7, #11]
 800c35a:	2baa      	cmp	r3, #170	; 0xaa
 800c35c:	d164      	bne.n	800c428 <USER_SPI_initialize+0x180>
				while (SPI_Timer_Status() && send_cmd(ACMD41, 1UL << 30)) ;	/* Wait for end of initialization with ACMD41(HCS) */
 800c35e:	bf00      	nop
 800c360:	f7ff fe26 	bl	800bfb0 <SPI_Timer_Status>
 800c364:	4603      	mov	r3, r0
 800c366:	2b00      	cmp	r3, #0
 800c368:	d007      	beq.n	800c37a <USER_SPI_initialize+0xd2>
 800c36a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800c36e:	20a9      	movs	r0, #169	; 0xa9
 800c370:	f7ff ff2b 	bl	800c1ca <send_cmd>
 800c374:	4603      	mov	r3, r0
 800c376:	2b00      	cmp	r3, #0
 800c378:	d1f2      	bne.n	800c360 <USER_SPI_initialize+0xb8>
				if (SPI_Timer_Status() && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
 800c37a:	f7ff fe19 	bl	800bfb0 <SPI_Timer_Status>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d051      	beq.n	800c428 <USER_SPI_initialize+0x180>
 800c384:	2100      	movs	r1, #0
 800c386:	203a      	movs	r0, #58	; 0x3a
 800c388:	f7ff ff1f 	bl	800c1ca <send_cmd>
 800c38c:	4603      	mov	r3, r0
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d14a      	bne.n	800c428 <USER_SPI_initialize+0x180>
					for (n = 0; n < 4; n++) ocr[n] = xchg_spi(0xFF);
 800c392:	2300      	movs	r3, #0
 800c394:	73fb      	strb	r3, [r7, #15]
 800c396:	e00d      	b.n	800c3b4 <USER_SPI_initialize+0x10c>
 800c398:	7bfc      	ldrb	r4, [r7, #15]
 800c39a:	20ff      	movs	r0, #255	; 0xff
 800c39c:	f7ff fe1e 	bl	800bfdc <xchg_spi>
 800c3a0:	4603      	mov	r3, r0
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	f104 0310 	add.w	r3, r4, #16
 800c3a8:	443b      	add	r3, r7
 800c3aa:	f803 2c08 	strb.w	r2, [r3, #-8]
 800c3ae:	7bfb      	ldrb	r3, [r7, #15]
 800c3b0:	3301      	adds	r3, #1
 800c3b2:	73fb      	strb	r3, [r7, #15]
 800c3b4:	7bfb      	ldrb	r3, [r7, #15]
 800c3b6:	2b03      	cmp	r3, #3
 800c3b8:	d9ee      	bls.n	800c398 <USER_SPI_initialize+0xf0>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* Card id SDv2 */
 800c3ba:	7a3b      	ldrb	r3, [r7, #8]
 800c3bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d001      	beq.n	800c3c8 <USER_SPI_initialize+0x120>
 800c3c4:	230c      	movs	r3, #12
 800c3c6:	e000      	b.n	800c3ca <USER_SPI_initialize+0x122>
 800c3c8:	2304      	movs	r3, #4
 800c3ca:	737b      	strb	r3, [r7, #13]
 800c3cc:	e02c      	b.n	800c428 <USER_SPI_initialize+0x180>
				}
			}
		} else {	/* Not SDv2 card */
			if (send_cmd(ACMD41, 0) <= 1) 	{	/* SDv1 or MMC? */
 800c3ce:	2100      	movs	r1, #0
 800c3d0:	20a9      	movs	r0, #169	; 0xa9
 800c3d2:	f7ff fefa 	bl	800c1ca <send_cmd>
 800c3d6:	4603      	mov	r3, r0
 800c3d8:	2b01      	cmp	r3, #1
 800c3da:	d804      	bhi.n	800c3e6 <USER_SPI_initialize+0x13e>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 (ACMD41(0)) */
 800c3dc:	2302      	movs	r3, #2
 800c3de:	737b      	strb	r3, [r7, #13]
 800c3e0:	23a9      	movs	r3, #169	; 0xa9
 800c3e2:	73bb      	strb	r3, [r7, #14]
 800c3e4:	e003      	b.n	800c3ee <USER_SPI_initialize+0x146>
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 (CMD1(0)) */
 800c3e6:	2301      	movs	r3, #1
 800c3e8:	737b      	strb	r3, [r7, #13]
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	73bb      	strb	r3, [r7, #14]
			}
			while (SPI_Timer_Status() && send_cmd(cmd, 0)) ;		/* Wait for end of initialization */
 800c3ee:	bf00      	nop
 800c3f0:	f7ff fdde 	bl	800bfb0 <SPI_Timer_Status>
 800c3f4:	4603      	mov	r3, r0
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d007      	beq.n	800c40a <USER_SPI_initialize+0x162>
 800c3fa:	7bbb      	ldrb	r3, [r7, #14]
 800c3fc:	2100      	movs	r1, #0
 800c3fe:	4618      	mov	r0, r3
 800c400:	f7ff fee3 	bl	800c1ca <send_cmd>
 800c404:	4603      	mov	r3, r0
 800c406:	2b00      	cmp	r3, #0
 800c408:	d1f2      	bne.n	800c3f0 <USER_SPI_initialize+0x148>
			if (!SPI_Timer_Status() || send_cmd(CMD16, 512) != 0)	/* Set block length: 512 */
 800c40a:	f7ff fdd1 	bl	800bfb0 <SPI_Timer_Status>
 800c40e:	4603      	mov	r3, r0
 800c410:	2b00      	cmp	r3, #0
 800c412:	d007      	beq.n	800c424 <USER_SPI_initialize+0x17c>
 800c414:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c418:	2010      	movs	r0, #16
 800c41a:	f7ff fed6 	bl	800c1ca <send_cmd>
 800c41e:	4603      	mov	r3, r0
 800c420:	2b00      	cmp	r3, #0
 800c422:	d001      	beq.n	800c428 <USER_SPI_initialize+0x180>
				ty = 0;
 800c424:	2300      	movs	r3, #0
 800c426:	737b      	strb	r3, [r7, #13]
		}
	}
	CardType = ty;	/* Card type */
 800c428:	4a14      	ldr	r2, [pc, #80]	; (800c47c <USER_SPI_initialize+0x1d4>)
 800c42a:	7b7b      	ldrb	r3, [r7, #13]
 800c42c:	7013      	strb	r3, [r2, #0]
	despiselect();
 800c42e:	f7ff fe45 	bl	800c0bc <despiselect>

	if (ty) {			/* OK */
 800c432:	7b7b      	ldrb	r3, [r7, #13]
 800c434:	2b00      	cmp	r3, #0
 800c436:	d012      	beq.n	800c45e <USER_SPI_initialize+0x1b6>
		FCLK_FAST();			/* Set fast clock */
 800c438:	4b0f      	ldr	r3, [pc, #60]	; (800c478 <USER_SPI_initialize+0x1d0>)
 800c43a:	681b      	ldr	r3, [r3, #0]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800c442:	4b0d      	ldr	r3, [pc, #52]	; (800c478 <USER_SPI_initialize+0x1d0>)
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	f042 0210 	orr.w	r2, r2, #16
 800c44a:	601a      	str	r2, [r3, #0]
		Stat &= ~STA_NOINIT;	/* Clear STA_NOINIT flag */
 800c44c:	4b09      	ldr	r3, [pc, #36]	; (800c474 <USER_SPI_initialize+0x1cc>)
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	b2db      	uxtb	r3, r3
 800c452:	f023 0301 	bic.w	r3, r3, #1
 800c456:	b2da      	uxtb	r2, r3
 800c458:	4b06      	ldr	r3, [pc, #24]	; (800c474 <USER_SPI_initialize+0x1cc>)
 800c45a:	701a      	strb	r2, [r3, #0]
 800c45c:	e002      	b.n	800c464 <USER_SPI_initialize+0x1bc>
	} else {			/* Failed */
		Stat = STA_NOINIT;
 800c45e:	4b05      	ldr	r3, [pc, #20]	; (800c474 <USER_SPI_initialize+0x1cc>)
 800c460:	2201      	movs	r2, #1
 800c462:	701a      	strb	r2, [r3, #0]
	}

	return Stat;
 800c464:	4b03      	ldr	r3, [pc, #12]	; (800c474 <USER_SPI_initialize+0x1cc>)
 800c466:	781b      	ldrb	r3, [r3, #0]
 800c468:	b2db      	uxtb	r3, r3
}
 800c46a:	4618      	mov	r0, r3
 800c46c:	3714      	adds	r7, #20
 800c46e:	46bd      	mov	sp, r7
 800c470:	bd90      	pop	{r4, r7, pc}
 800c472:	bf00      	nop
 800c474:	200000a4 	.word	0x200000a4
 800c478:	2000032c 	.word	0x2000032c
 800c47c:	20000ec0 	.word	0x20000ec0

0800c480 <USER_SPI_status>:
/*-----------------------------------------------------------------------*/

inline DSTATUS USER_SPI_status (
	BYTE drv		/* Physical drive number (0) */
)
{
 800c480:	b480      	push	{r7}
 800c482:	b083      	sub	sp, #12
 800c484:	af00      	add	r7, sp, #0
 800c486:	4603      	mov	r3, r0
 800c488:	71fb      	strb	r3, [r7, #7]
	if (drv) return STA_NOINIT;		/* Supports only drive 0 */
 800c48a:	79fb      	ldrb	r3, [r7, #7]
 800c48c:	2b00      	cmp	r3, #0
 800c48e:	d001      	beq.n	800c494 <USER_SPI_status+0x14>
 800c490:	2301      	movs	r3, #1
 800c492:	e002      	b.n	800c49a <USER_SPI_status+0x1a>

	return Stat;	/* Return disk status */
 800c494:	4b03      	ldr	r3, [pc, #12]	; (800c4a4 <USER_SPI_status+0x24>)
 800c496:	781b      	ldrb	r3, [r3, #0]
 800c498:	b2db      	uxtb	r3, r3
}
 800c49a:	4618      	mov	r0, r3
 800c49c:	370c      	adds	r7, #12
 800c49e:	46bd      	mov	sp, r7
 800c4a0:	bc80      	pop	{r7}
 800c4a2:	4770      	bx	lr
 800c4a4:	200000a4 	.word	0x200000a4

0800c4a8 <USER_SPI_read>:
	BYTE drv,		/* Physical drive number (0) */
	BYTE *buff,		/* Pointer to the data buffer to store read data */
	DWORD sector,	/* Start sector number (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 800c4a8:	b580      	push	{r7, lr}
 800c4aa:	b084      	sub	sp, #16
 800c4ac:	af00      	add	r7, sp, #0
 800c4ae:	60b9      	str	r1, [r7, #8]
 800c4b0:	607a      	str	r2, [r7, #4]
 800c4b2:	603b      	str	r3, [r7, #0]
 800c4b4:	4603      	mov	r3, r0
 800c4b6:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c4b8:	7bfb      	ldrb	r3, [r7, #15]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d102      	bne.n	800c4c4 <USER_SPI_read+0x1c>
 800c4be:	683b      	ldr	r3, [r7, #0]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	d101      	bne.n	800c4c8 <USER_SPI_read+0x20>
 800c4c4:	2304      	movs	r3, #4
 800c4c6:	e04d      	b.n	800c564 <USER_SPI_read+0xbc>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c4c8:	4b28      	ldr	r3, [pc, #160]	; (800c56c <USER_SPI_read+0xc4>)
 800c4ca:	781b      	ldrb	r3, [r3, #0]
 800c4cc:	b2db      	uxtb	r3, r3
 800c4ce:	f003 0301 	and.w	r3, r3, #1
 800c4d2:	2b00      	cmp	r3, #0
 800c4d4:	d001      	beq.n	800c4da <USER_SPI_read+0x32>
 800c4d6:	2303      	movs	r3, #3
 800c4d8:	e044      	b.n	800c564 <USER_SPI_read+0xbc>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ot BA conversion (byte addressing cards) */
 800c4da:	4b25      	ldr	r3, [pc, #148]	; (800c570 <USER_SPI_read+0xc8>)
 800c4dc:	781b      	ldrb	r3, [r3, #0]
 800c4de:	f003 0308 	and.w	r3, r3, #8
 800c4e2:	2b00      	cmp	r3, #0
 800c4e4:	d102      	bne.n	800c4ec <USER_SPI_read+0x44>
 800c4e6:	687b      	ldr	r3, [r7, #4]
 800c4e8:	025b      	lsls	r3, r3, #9
 800c4ea:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector read */
 800c4ec:	683b      	ldr	r3, [r7, #0]
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d111      	bne.n	800c516 <USER_SPI_read+0x6e>
		if ((send_cmd(CMD17, sector) == 0)	/* READ_SINGLE_BLOCK */
 800c4f2:	6879      	ldr	r1, [r7, #4]
 800c4f4:	2011      	movs	r0, #17
 800c4f6:	f7ff fe68 	bl	800c1ca <send_cmd>
 800c4fa:	4603      	mov	r3, r0
 800c4fc:	2b00      	cmp	r3, #0
 800c4fe:	d129      	bne.n	800c554 <USER_SPI_read+0xac>
			&& rcvr_datablock(buff, 512)) {
 800c500:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c504:	68b8      	ldr	r0, [r7, #8]
 800c506:	f7ff fe05 	bl	800c114 <rcvr_datablock>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	d021      	beq.n	800c554 <USER_SPI_read+0xac>
			count = 0;
 800c510:	2300      	movs	r3, #0
 800c512:	603b      	str	r3, [r7, #0]
 800c514:	e01e      	b.n	800c554 <USER_SPI_read+0xac>
		}
	}
	else {				/* Multiple sector read */
		if (send_cmd(CMD18, sector) == 0) {	/* READ_MULTIPLE_BLOCK */
 800c516:	6879      	ldr	r1, [r7, #4]
 800c518:	2012      	movs	r0, #18
 800c51a:	f7ff fe56 	bl	800c1ca <send_cmd>
 800c51e:	4603      	mov	r3, r0
 800c520:	2b00      	cmp	r3, #0
 800c522:	d117      	bne.n	800c554 <USER_SPI_read+0xac>
			do {
				if (!rcvr_datablock(buff, 512)) break;
 800c524:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c528:	68b8      	ldr	r0, [r7, #8]
 800c52a:	f7ff fdf3 	bl	800c114 <rcvr_datablock>
 800c52e:	4603      	mov	r3, r0
 800c530:	2b00      	cmp	r3, #0
 800c532:	d00a      	beq.n	800c54a <USER_SPI_read+0xa2>
				buff += 512;
 800c534:	68bb      	ldr	r3, [r7, #8]
 800c536:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c53a:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c53c:	683b      	ldr	r3, [r7, #0]
 800c53e:	3b01      	subs	r3, #1
 800c540:	603b      	str	r3, [r7, #0]
 800c542:	683b      	ldr	r3, [r7, #0]
 800c544:	2b00      	cmp	r3, #0
 800c546:	d1ed      	bne.n	800c524 <USER_SPI_read+0x7c>
 800c548:	e000      	b.n	800c54c <USER_SPI_read+0xa4>
				if (!rcvr_datablock(buff, 512)) break;
 800c54a:	bf00      	nop
			send_cmd(CMD12, 0);				/* STOP_TRANSMISSION */
 800c54c:	2100      	movs	r1, #0
 800c54e:	200c      	movs	r0, #12
 800c550:	f7ff fe3b 	bl	800c1ca <send_cmd>
		}
	}
	despiselect();
 800c554:	f7ff fdb2 	bl	800c0bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c558:	683b      	ldr	r3, [r7, #0]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	bf14      	ite	ne
 800c55e:	2301      	movne	r3, #1
 800c560:	2300      	moveq	r3, #0
 800c562:	b2db      	uxtb	r3, r3
}
 800c564:	4618      	mov	r0, r3
 800c566:	3710      	adds	r7, #16
 800c568:	46bd      	mov	sp, r7
 800c56a:	bd80      	pop	{r7, pc}
 800c56c:	200000a4 	.word	0x200000a4
 800c570:	20000ec0 	.word	0x20000ec0

0800c574 <USER_SPI_write>:
	BYTE drv,			/* Physical drive number (0) */
	const BYTE *buff,	/* Ponter to the data to write */
	DWORD sector,		/* Start sector number (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	60b9      	str	r1, [r7, #8]
 800c57c:	607a      	str	r2, [r7, #4]
 800c57e:	603b      	str	r3, [r7, #0]
 800c580:	4603      	mov	r3, r0
 800c582:	73fb      	strb	r3, [r7, #15]
	if (drv || !count) return RES_PARERR;		/* Check parameter */
 800c584:	7bfb      	ldrb	r3, [r7, #15]
 800c586:	2b00      	cmp	r3, #0
 800c588:	d102      	bne.n	800c590 <USER_SPI_write+0x1c>
 800c58a:	683b      	ldr	r3, [r7, #0]
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	d101      	bne.n	800c594 <USER_SPI_write+0x20>
 800c590:	2304      	movs	r3, #4
 800c592:	e063      	b.n	800c65c <USER_SPI_write+0xe8>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check drive status */
 800c594:	4b33      	ldr	r3, [pc, #204]	; (800c664 <USER_SPI_write+0xf0>)
 800c596:	781b      	ldrb	r3, [r3, #0]
 800c598:	b2db      	uxtb	r3, r3
 800c59a:	f003 0301 	and.w	r3, r3, #1
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	d001      	beq.n	800c5a6 <USER_SPI_write+0x32>
 800c5a2:	2303      	movs	r3, #3
 800c5a4:	e05a      	b.n	800c65c <USER_SPI_write+0xe8>
	if (Stat & STA_PROTECT) return RES_WRPRT;	/* Check write protect */
 800c5a6:	4b2f      	ldr	r3, [pc, #188]	; (800c664 <USER_SPI_write+0xf0>)
 800c5a8:	781b      	ldrb	r3, [r3, #0]
 800c5aa:	b2db      	uxtb	r3, r3
 800c5ac:	f003 0304 	and.w	r3, r3, #4
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d001      	beq.n	800c5b8 <USER_SPI_write+0x44>
 800c5b4:	2302      	movs	r3, #2
 800c5b6:	e051      	b.n	800c65c <USER_SPI_write+0xe8>

	if (!(CardType & CT_BLOCK)) sector *= 512;	/* LBA ==> BA conversion (byte addressing cards) */
 800c5b8:	4b2b      	ldr	r3, [pc, #172]	; (800c668 <USER_SPI_write+0xf4>)
 800c5ba:	781b      	ldrb	r3, [r3, #0]
 800c5bc:	f003 0308 	and.w	r3, r3, #8
 800c5c0:	2b00      	cmp	r3, #0
 800c5c2:	d102      	bne.n	800c5ca <USER_SPI_write+0x56>
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	025b      	lsls	r3, r3, #9
 800c5c8:	607b      	str	r3, [r7, #4]

	if (count == 1) {	/* Single sector write */
 800c5ca:	683b      	ldr	r3, [r7, #0]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d110      	bne.n	800c5f2 <USER_SPI_write+0x7e>
		if ((send_cmd(CMD24, sector) == 0)	/* WRITE_BLOCK */
 800c5d0:	6879      	ldr	r1, [r7, #4]
 800c5d2:	2018      	movs	r0, #24
 800c5d4:	f7ff fdf9 	bl	800c1ca <send_cmd>
 800c5d8:	4603      	mov	r3, r0
 800c5da:	2b00      	cmp	r3, #0
 800c5dc:	d136      	bne.n	800c64c <USER_SPI_write+0xd8>
			&& xmit_datablock(buff, 0xFE)) {
 800c5de:	21fe      	movs	r1, #254	; 0xfe
 800c5e0:	68b8      	ldr	r0, [r7, #8]
 800c5e2:	f7ff fdc0 	bl	800c166 <xmit_datablock>
 800c5e6:	4603      	mov	r3, r0
 800c5e8:	2b00      	cmp	r3, #0
 800c5ea:	d02f      	beq.n	800c64c <USER_SPI_write+0xd8>
			count = 0;
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	603b      	str	r3, [r7, #0]
 800c5f0:	e02c      	b.n	800c64c <USER_SPI_write+0xd8>
		}
	}
	else {				/* Multiple sector write */
		if (CardType & CT_SDC) send_cmd(ACMD23, count);	/* Predefine number of sectors */
 800c5f2:	4b1d      	ldr	r3, [pc, #116]	; (800c668 <USER_SPI_write+0xf4>)
 800c5f4:	781b      	ldrb	r3, [r3, #0]
 800c5f6:	f003 0306 	and.w	r3, r3, #6
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d003      	beq.n	800c606 <USER_SPI_write+0x92>
 800c5fe:	6839      	ldr	r1, [r7, #0]
 800c600:	2097      	movs	r0, #151	; 0x97
 800c602:	f7ff fde2 	bl	800c1ca <send_cmd>
		if (send_cmd(CMD25, sector) == 0) {	/* WRITE_MULTIPLE_BLOCK */
 800c606:	6879      	ldr	r1, [r7, #4]
 800c608:	2019      	movs	r0, #25
 800c60a:	f7ff fdde 	bl	800c1ca <send_cmd>
 800c60e:	4603      	mov	r3, r0
 800c610:	2b00      	cmp	r3, #0
 800c612:	d11b      	bne.n	800c64c <USER_SPI_write+0xd8>
			do {
				if (!xmit_datablock(buff, 0xFC)) break;
 800c614:	21fc      	movs	r1, #252	; 0xfc
 800c616:	68b8      	ldr	r0, [r7, #8]
 800c618:	f7ff fda5 	bl	800c166 <xmit_datablock>
 800c61c:	4603      	mov	r3, r0
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d00a      	beq.n	800c638 <USER_SPI_write+0xc4>
				buff += 512;
 800c622:	68bb      	ldr	r3, [r7, #8]
 800c624:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800c628:	60bb      	str	r3, [r7, #8]
			} while (--count);
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	3b01      	subs	r3, #1
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	683b      	ldr	r3, [r7, #0]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d1ee      	bne.n	800c614 <USER_SPI_write+0xa0>
 800c636:	e000      	b.n	800c63a <USER_SPI_write+0xc6>
				if (!xmit_datablock(buff, 0xFC)) break;
 800c638:	bf00      	nop
			if (!xmit_datablock(0, 0xFD)) count = 1;	/* STOP_TRAN token */
 800c63a:	21fd      	movs	r1, #253	; 0xfd
 800c63c:	2000      	movs	r0, #0
 800c63e:	f7ff fd92 	bl	800c166 <xmit_datablock>
 800c642:	4603      	mov	r3, r0
 800c644:	2b00      	cmp	r3, #0
 800c646:	d101      	bne.n	800c64c <USER_SPI_write+0xd8>
 800c648:	2301      	movs	r3, #1
 800c64a:	603b      	str	r3, [r7, #0]
		}
	}
	despiselect();
 800c64c:	f7ff fd36 	bl	800c0bc <despiselect>

	return count ? RES_ERROR : RES_OK;	/* Return result */
 800c650:	683b      	ldr	r3, [r7, #0]
 800c652:	2b00      	cmp	r3, #0
 800c654:	bf14      	ite	ne
 800c656:	2301      	movne	r3, #1
 800c658:	2300      	moveq	r3, #0
 800c65a:	b2db      	uxtb	r3, r3
}
 800c65c:	4618      	mov	r0, r3
 800c65e:	3710      	adds	r7, #16
 800c660:	46bd      	mov	sp, r7
 800c662:	bd80      	pop	{r7, pc}
 800c664:	200000a4 	.word	0x200000a4
 800c668:	20000ec0 	.word	0x20000ec0

0800c66c <USER_SPI_ioctl>:
inline DRESULT USER_SPI_ioctl (
	BYTE drv,		/* Physical drive number (0) */
	BYTE cmd,		/* Control command code */
	void *buff		/* Pointer to the conrtol data */
)
{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08c      	sub	sp, #48	; 0x30
 800c670:	af00      	add	r7, sp, #0
 800c672:	4603      	mov	r3, r0
 800c674:	603a      	str	r2, [r7, #0]
 800c676:	71fb      	strb	r3, [r7, #7]
 800c678:	460b      	mov	r3, r1
 800c67a:	71bb      	strb	r3, [r7, #6]
	DRESULT res;
	BYTE n, csd[16];
	DWORD *dp, st, ed, csize;


	if (drv) return RES_PARERR;					/* Check parameter */
 800c67c:	79fb      	ldrb	r3, [r7, #7]
 800c67e:	2b00      	cmp	r3, #0
 800c680:	d001      	beq.n	800c686 <USER_SPI_ioctl+0x1a>
 800c682:	2304      	movs	r3, #4
 800c684:	e15a      	b.n	800c93c <USER_SPI_ioctl+0x2d0>
	if (Stat & STA_NOINIT) return RES_NOTRDY;	/* Check if drive is ready */
 800c686:	4baf      	ldr	r3, [pc, #700]	; (800c944 <USER_SPI_ioctl+0x2d8>)
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	b2db      	uxtb	r3, r3
 800c68c:	f003 0301 	and.w	r3, r3, #1
 800c690:	2b00      	cmp	r3, #0
 800c692:	d001      	beq.n	800c698 <USER_SPI_ioctl+0x2c>
 800c694:	2303      	movs	r3, #3
 800c696:	e151      	b.n	800c93c <USER_SPI_ioctl+0x2d0>

	res = RES_ERROR;
 800c698:	2301      	movs	r3, #1
 800c69a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

	switch (cmd) {
 800c69e:	79bb      	ldrb	r3, [r7, #6]
 800c6a0:	2b04      	cmp	r3, #4
 800c6a2:	f200 8136 	bhi.w	800c912 <USER_SPI_ioctl+0x2a6>
 800c6a6:	a201      	add	r2, pc, #4	; (adr r2, 800c6ac <USER_SPI_ioctl+0x40>)
 800c6a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c6ac:	0800c6c1 	.word	0x0800c6c1
 800c6b0:	0800c6d5 	.word	0x0800c6d5
 800c6b4:	0800c913 	.word	0x0800c913
 800c6b8:	0800c781 	.word	0x0800c781
 800c6bc:	0800c877 	.word	0x0800c877
	case CTRL_SYNC :		/* Wait for end of internal write process of the drive */
		if (spiselect()) res = RES_OK;
 800c6c0:	f7ff fd0c 	bl	800c0dc <spiselect>
 800c6c4:	4603      	mov	r3, r0
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	f000 8127 	beq.w	800c91a <USER_SPI_ioctl+0x2ae>
 800c6cc:	2300      	movs	r3, #0
 800c6ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c6d2:	e122      	b.n	800c91a <USER_SPI_ioctl+0x2ae>

	case GET_SECTOR_COUNT :	/* Get drive capacity in unit of sector (DWORD) */
		if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
 800c6d4:	2100      	movs	r1, #0
 800c6d6:	2009      	movs	r0, #9
 800c6d8:	f7ff fd77 	bl	800c1ca <send_cmd>
 800c6dc:	4603      	mov	r3, r0
 800c6de:	2b00      	cmp	r3, #0
 800c6e0:	f040 811d 	bne.w	800c91e <USER_SPI_ioctl+0x2b2>
 800c6e4:	f107 030c 	add.w	r3, r7, #12
 800c6e8:	2110      	movs	r1, #16
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7ff fd12 	bl	800c114 <rcvr_datablock>
 800c6f0:	4603      	mov	r3, r0
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	f000 8113 	beq.w	800c91e <USER_SPI_ioctl+0x2b2>
			if ((csd[0] >> 6) == 1) {	/* SDC ver 2.00 */
 800c6f8:	7b3b      	ldrb	r3, [r7, #12]
 800c6fa:	099b      	lsrs	r3, r3, #6
 800c6fc:	b2db      	uxtb	r3, r3
 800c6fe:	2b01      	cmp	r3, #1
 800c700:	d111      	bne.n	800c726 <USER_SPI_ioctl+0xba>
				csize = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
 800c702:	7d7b      	ldrb	r3, [r7, #21]
 800c704:	461a      	mov	r2, r3
 800c706:	7d3b      	ldrb	r3, [r7, #20]
 800c708:	021b      	lsls	r3, r3, #8
 800c70a:	4413      	add	r3, r2
 800c70c:	461a      	mov	r2, r3
 800c70e:	7cfb      	ldrb	r3, [r7, #19]
 800c710:	041b      	lsls	r3, r3, #16
 800c712:	f403 137c 	and.w	r3, r3, #4128768	; 0x3f0000
 800c716:	4413      	add	r3, r2
 800c718:	3301      	adds	r3, #1
 800c71a:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << 10;
 800c71c:	69fb      	ldr	r3, [r7, #28]
 800c71e:	029a      	lsls	r2, r3, #10
 800c720:	683b      	ldr	r3, [r7, #0]
 800c722:	601a      	str	r2, [r3, #0]
 800c724:	e028      	b.n	800c778 <USER_SPI_ioctl+0x10c>
			} else {					/* SDC ver 1.XX or MMC ver 3 */
				n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
 800c726:	7c7b      	ldrb	r3, [r7, #17]
 800c728:	f003 030f 	and.w	r3, r3, #15
 800c72c:	b2da      	uxtb	r2, r3
 800c72e:	7dbb      	ldrb	r3, [r7, #22]
 800c730:	09db      	lsrs	r3, r3, #7
 800c732:	b2db      	uxtb	r3, r3
 800c734:	4413      	add	r3, r2
 800c736:	b2da      	uxtb	r2, r3
 800c738:	7d7b      	ldrb	r3, [r7, #21]
 800c73a:	005b      	lsls	r3, r3, #1
 800c73c:	b2db      	uxtb	r3, r3
 800c73e:	f003 0306 	and.w	r3, r3, #6
 800c742:	b2db      	uxtb	r3, r3
 800c744:	4413      	add	r3, r2
 800c746:	b2db      	uxtb	r3, r3
 800c748:	3302      	adds	r3, #2
 800c74a:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				csize = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
 800c74e:	7d3b      	ldrb	r3, [r7, #20]
 800c750:	099b      	lsrs	r3, r3, #6
 800c752:	b2db      	uxtb	r3, r3
 800c754:	461a      	mov	r2, r3
 800c756:	7cfb      	ldrb	r3, [r7, #19]
 800c758:	009b      	lsls	r3, r3, #2
 800c75a:	441a      	add	r2, r3
 800c75c:	7cbb      	ldrb	r3, [r7, #18]
 800c75e:	029b      	lsls	r3, r3, #10
 800c760:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c764:	4413      	add	r3, r2
 800c766:	3301      	adds	r3, #1
 800c768:	61fb      	str	r3, [r7, #28]
				*(DWORD*)buff = csize << (n - 9);
 800c76a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c76e:	3b09      	subs	r3, #9
 800c770:	69fa      	ldr	r2, [r7, #28]
 800c772:	409a      	lsls	r2, r3
 800c774:	683b      	ldr	r3, [r7, #0]
 800c776:	601a      	str	r2, [r3, #0]
			}
			res = RES_OK;
 800c778:	2300      	movs	r3, #0
 800c77a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c77e:	e0ce      	b.n	800c91e <USER_SPI_ioctl+0x2b2>

	case GET_BLOCK_SIZE :	/* Get erase block size in unit of sector (DWORD) */
		if (CardType & CT_SD2) {	/* SDC ver 2.00 */
 800c780:	4b71      	ldr	r3, [pc, #452]	; (800c948 <USER_SPI_ioctl+0x2dc>)
 800c782:	781b      	ldrb	r3, [r3, #0]
 800c784:	f003 0304 	and.w	r3, r3, #4
 800c788:	2b00      	cmp	r3, #0
 800c78a:	d031      	beq.n	800c7f0 <USER_SPI_ioctl+0x184>
			if (send_cmd(ACMD13, 0) == 0) {	/* Read SD status */
 800c78c:	2100      	movs	r1, #0
 800c78e:	208d      	movs	r0, #141	; 0x8d
 800c790:	f7ff fd1b 	bl	800c1ca <send_cmd>
 800c794:	4603      	mov	r3, r0
 800c796:	2b00      	cmp	r3, #0
 800c798:	f040 80c3 	bne.w	800c922 <USER_SPI_ioctl+0x2b6>
				xchg_spi(0xFF);
 800c79c:	20ff      	movs	r0, #255	; 0xff
 800c79e:	f7ff fc1d 	bl	800bfdc <xchg_spi>
				if (rcvr_datablock(csd, 16)) {				/* Read partial block */
 800c7a2:	f107 030c 	add.w	r3, r7, #12
 800c7a6:	2110      	movs	r1, #16
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	f7ff fcb3 	bl	800c114 <rcvr_datablock>
 800c7ae:	4603      	mov	r3, r0
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f000 80b6 	beq.w	800c922 <USER_SPI_ioctl+0x2b6>
					for (n = 64 - 16; n; n--) xchg_spi(0xFF);	/* Purge trailing data */
 800c7b6:	2330      	movs	r3, #48	; 0x30
 800c7b8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c7bc:	e007      	b.n	800c7ce <USER_SPI_ioctl+0x162>
 800c7be:	20ff      	movs	r0, #255	; 0xff
 800c7c0:	f7ff fc0c 	bl	800bfdc <xchg_spi>
 800c7c4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c7c8:	3b01      	subs	r3, #1
 800c7ca:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800c7ce:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800c7d2:	2b00      	cmp	r3, #0
 800c7d4:	d1f3      	bne.n	800c7be <USER_SPI_ioctl+0x152>
					*(DWORD*)buff = 16UL << (csd[10] >> 4);
 800c7d6:	7dbb      	ldrb	r3, [r7, #22]
 800c7d8:	091b      	lsrs	r3, r3, #4
 800c7da:	b2db      	uxtb	r3, r3
 800c7dc:	461a      	mov	r2, r3
 800c7de:	2310      	movs	r3, #16
 800c7e0:	fa03 f202 	lsl.w	r2, r3, r2
 800c7e4:	683b      	ldr	r3, [r7, #0]
 800c7e6:	601a      	str	r2, [r3, #0]
					res = RES_OK;
 800c7e8:	2300      	movs	r3, #0
 800c7ea:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
				}
				res = RES_OK;
			}
		}
		break;
 800c7ee:	e098      	b.n	800c922 <USER_SPI_ioctl+0x2b6>
			if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {	/* Read CSD */
 800c7f0:	2100      	movs	r1, #0
 800c7f2:	2009      	movs	r0, #9
 800c7f4:	f7ff fce9 	bl	800c1ca <send_cmd>
 800c7f8:	4603      	mov	r3, r0
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	f040 8091 	bne.w	800c922 <USER_SPI_ioctl+0x2b6>
 800c800:	f107 030c 	add.w	r3, r7, #12
 800c804:	2110      	movs	r1, #16
 800c806:	4618      	mov	r0, r3
 800c808:	f7ff fc84 	bl	800c114 <rcvr_datablock>
 800c80c:	4603      	mov	r3, r0
 800c80e:	2b00      	cmp	r3, #0
 800c810:	f000 8087 	beq.w	800c922 <USER_SPI_ioctl+0x2b6>
				if (CardType & CT_SD1) {	/* SDC ver 1.XX */
 800c814:	4b4c      	ldr	r3, [pc, #304]	; (800c948 <USER_SPI_ioctl+0x2dc>)
 800c816:	781b      	ldrb	r3, [r3, #0]
 800c818:	f003 0302 	and.w	r3, r3, #2
 800c81c:	2b00      	cmp	r3, #0
 800c81e:	d012      	beq.n	800c846 <USER_SPI_ioctl+0x1da>
					*(DWORD*)buff = (((csd[10] & 63) << 1) + ((WORD)(csd[11] & 128) >> 7) + 1) << ((csd[13] >> 6) - 1);
 800c820:	7dbb      	ldrb	r3, [r7, #22]
 800c822:	005b      	lsls	r3, r3, #1
 800c824:	f003 037e 	and.w	r3, r3, #126	; 0x7e
 800c828:	7dfa      	ldrb	r2, [r7, #23]
 800c82a:	09d2      	lsrs	r2, r2, #7
 800c82c:	b2d2      	uxtb	r2, r2
 800c82e:	4413      	add	r3, r2
 800c830:	1c5a      	adds	r2, r3, #1
 800c832:	7e7b      	ldrb	r3, [r7, #25]
 800c834:	099b      	lsrs	r3, r3, #6
 800c836:	b2db      	uxtb	r3, r3
 800c838:	3b01      	subs	r3, #1
 800c83a:	fa02 f303 	lsl.w	r3, r2, r3
 800c83e:	461a      	mov	r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	601a      	str	r2, [r3, #0]
 800c844:	e013      	b.n	800c86e <USER_SPI_ioctl+0x202>
					*(DWORD*)buff = ((WORD)((csd[10] & 124) >> 2) + 1) * (((csd[11] & 3) << 3) + ((csd[11] & 224) >> 5) + 1);
 800c846:	7dbb      	ldrb	r3, [r7, #22]
 800c848:	109b      	asrs	r3, r3, #2
 800c84a:	b29b      	uxth	r3, r3
 800c84c:	f003 031f 	and.w	r3, r3, #31
 800c850:	3301      	adds	r3, #1
 800c852:	7dfa      	ldrb	r2, [r7, #23]
 800c854:	00d2      	lsls	r2, r2, #3
 800c856:	f002 0218 	and.w	r2, r2, #24
 800c85a:	7df9      	ldrb	r1, [r7, #23]
 800c85c:	0949      	lsrs	r1, r1, #5
 800c85e:	b2c9      	uxtb	r1, r1
 800c860:	440a      	add	r2, r1
 800c862:	3201      	adds	r2, #1
 800c864:	fb02 f303 	mul.w	r3, r2, r3
 800c868:	461a      	mov	r2, r3
 800c86a:	683b      	ldr	r3, [r7, #0]
 800c86c:	601a      	str	r2, [r3, #0]
				res = RES_OK;
 800c86e:	2300      	movs	r3, #0
 800c870:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		break;
 800c874:	e055      	b.n	800c922 <USER_SPI_ioctl+0x2b6>

	case CTRL_TRIM :	/* Erase a block of sectors (used when _USE_ERASE == 1) */
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c876:	4b34      	ldr	r3, [pc, #208]	; (800c948 <USER_SPI_ioctl+0x2dc>)
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	f003 0306 	and.w	r3, r3, #6
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d051      	beq.n	800c926 <USER_SPI_ioctl+0x2ba>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c882:	f107 020c 	add.w	r2, r7, #12
 800c886:	79fb      	ldrb	r3, [r7, #7]
 800c888:	210b      	movs	r1, #11
 800c88a:	4618      	mov	r0, r3
 800c88c:	f7ff feee 	bl	800c66c <USER_SPI_ioctl>
 800c890:	4603      	mov	r3, r0
 800c892:	2b00      	cmp	r3, #0
 800c894:	d149      	bne.n	800c92a <USER_SPI_ioctl+0x2be>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c896:	7b3b      	ldrb	r3, [r7, #12]
 800c898:	099b      	lsrs	r3, r3, #6
 800c89a:	b2db      	uxtb	r3, r3
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d104      	bne.n	800c8aa <USER_SPI_ioctl+0x23e>
 800c8a0:	7dbb      	ldrb	r3, [r7, #22]
 800c8a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c8a6:	2b00      	cmp	r3, #0
 800c8a8:	d041      	beq.n	800c92e <USER_SPI_ioctl+0x2c2>
		dp = buff; st = dp[0]; ed = dp[1];				/* Load sector block */
 800c8aa:	683b      	ldr	r3, [r7, #0]
 800c8ac:	623b      	str	r3, [r7, #32]
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	681b      	ldr	r3, [r3, #0]
 800c8b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	685b      	ldr	r3, [r3, #4]
 800c8b8:	627b      	str	r3, [r7, #36]	; 0x24
		if (!(CardType & CT_BLOCK)) {
 800c8ba:	4b23      	ldr	r3, [pc, #140]	; (800c948 <USER_SPI_ioctl+0x2dc>)
 800c8bc:	781b      	ldrb	r3, [r3, #0]
 800c8be:	f003 0308 	and.w	r3, r3, #8
 800c8c2:	2b00      	cmp	r3, #0
 800c8c4:	d105      	bne.n	800c8d2 <USER_SPI_ioctl+0x266>
			st *= 512; ed *= 512;
 800c8c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8c8:	025b      	lsls	r3, r3, #9
 800c8ca:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ce:	025b      	lsls	r3, r3, #9
 800c8d0:	627b      	str	r3, [r7, #36]	; 0x24
		}
		if (send_cmd(CMD32, st) == 0 && send_cmd(CMD33, ed) == 0 && send_cmd(CMD38, 0) == 0 && wait_ready(30000)) {	/* Erase sector block */
 800c8d2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800c8d4:	2020      	movs	r0, #32
 800c8d6:	f7ff fc78 	bl	800c1ca <send_cmd>
 800c8da:	4603      	mov	r3, r0
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d128      	bne.n	800c932 <USER_SPI_ioctl+0x2c6>
 800c8e0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c8e2:	2021      	movs	r0, #33	; 0x21
 800c8e4:	f7ff fc71 	bl	800c1ca <send_cmd>
 800c8e8:	4603      	mov	r3, r0
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d121      	bne.n	800c932 <USER_SPI_ioctl+0x2c6>
 800c8ee:	2100      	movs	r1, #0
 800c8f0:	2026      	movs	r0, #38	; 0x26
 800c8f2:	f7ff fc6a 	bl	800c1ca <send_cmd>
 800c8f6:	4603      	mov	r3, r0
 800c8f8:	2b00      	cmp	r3, #0
 800c8fa:	d11a      	bne.n	800c932 <USER_SPI_ioctl+0x2c6>
 800c8fc:	f247 5030 	movw	r0, #30000	; 0x7530
 800c900:	f7ff fbb9 	bl	800c076 <wait_ready>
 800c904:	4603      	mov	r3, r0
 800c906:	2b00      	cmp	r3, #0
 800c908:	d013      	beq.n	800c932 <USER_SPI_ioctl+0x2c6>
			res = RES_OK;	/* FatFs does not check result of this command */
 800c90a:	2300      	movs	r3, #0
 800c90c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		}
		break;
 800c910:	e00f      	b.n	800c932 <USER_SPI_ioctl+0x2c6>

	default:
		res = RES_PARERR;
 800c912:	2304      	movs	r3, #4
 800c914:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800c918:	e00c      	b.n	800c934 <USER_SPI_ioctl+0x2c8>
		break;
 800c91a:	bf00      	nop
 800c91c:	e00a      	b.n	800c934 <USER_SPI_ioctl+0x2c8>
		break;
 800c91e:	bf00      	nop
 800c920:	e008      	b.n	800c934 <USER_SPI_ioctl+0x2c8>
		break;
 800c922:	bf00      	nop
 800c924:	e006      	b.n	800c934 <USER_SPI_ioctl+0x2c8>
		if (!(CardType & CT_SDC)) break;				/* Check if the card is SDC */
 800c926:	bf00      	nop
 800c928:	e004      	b.n	800c934 <USER_SPI_ioctl+0x2c8>
		if (USER_SPI_ioctl(drv, MMC_GET_CSD, csd)) break;	/* Get CSD */
 800c92a:	bf00      	nop
 800c92c:	e002      	b.n	800c934 <USER_SPI_ioctl+0x2c8>
		if (!(csd[0] >> 6) && !(csd[10] & 0x40)) break;	/* Check if sector erase can be applied to the card */
 800c92e:	bf00      	nop
 800c930:	e000      	b.n	800c934 <USER_SPI_ioctl+0x2c8>
		break;
 800c932:	bf00      	nop
	}

	despiselect();
 800c934:	f7ff fbc2 	bl	800c0bc <despiselect>

	return res;
 800c938:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800c93c:	4618      	mov	r0, r3
 800c93e:	3730      	adds	r7, #48	; 0x30
 800c940:	46bd      	mov	sp, r7
 800c942:	bd80      	pop	{r7, pc}
 800c944:	200000a4 	.word	0x200000a4
 800c948:	20000ec0 	.word	0x20000ec0

0800c94c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800c94c:	b580      	push	{r7, lr}
 800c94e:	b084      	sub	sp, #16
 800c950:	af00      	add	r7, sp, #0
 800c952:	6078      	str	r0, [r7, #4]
 800c954:	460b      	mov	r3, r1
 800c956:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800c958:	2300      	movs	r3, #0
 800c95a:	73fb      	strb	r3, [r7, #15]
  USBD_CDC_HandleTypeDef   *hcdc;

  if(pdev->dev_speed == USBD_SPEED_HIGH)
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	7c1b      	ldrb	r3, [r3, #16]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d115      	bne.n	800c990 <USBD_CDC_Init+0x44>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c964:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c968:	2202      	movs	r2, #2
 800c96a:	2181      	movs	r1, #129	; 0x81
 800c96c:	6878      	ldr	r0, [r7, #4]
 800c96e:	f004 ff02 	bl	8011776 <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c972:	687b      	ldr	r3, [r7, #4]
 800c974:	2201      	movs	r2, #1
 800c976:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c978:	f44f 7300 	mov.w	r3, #512	; 0x200
 800c97c:	2202      	movs	r2, #2
 800c97e:	2101      	movs	r1, #1
 800c980:	6878      	ldr	r0, [r7, #4]
 800c982:	f004 fef8 	bl	8011776 <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c986:	687b      	ldr	r3, [r7, #4]
 800c988:	2201      	movs	r2, #1
 800c98a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
 800c98e:	e012      	b.n	800c9b6 <USBD_CDC_Init+0x6a>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800c990:	2340      	movs	r3, #64	; 0x40
 800c992:	2202      	movs	r2, #2
 800c994:	2181      	movs	r1, #129	; 0x81
 800c996:	6878      	ldr	r0, [r7, #4]
 800c998:	f004 feed 	bl	8011776 <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2201      	movs	r2, #1
 800c9a0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800c9a2:	2340      	movs	r3, #64	; 0x40
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	2101      	movs	r1, #1
 800c9a8:	6878      	ldr	r0, [r7, #4]
 800c9aa:	f004 fee4 	bl	8011776 <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2201      	movs	r2, #1
 800c9b2:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800c9b6:	2308      	movs	r3, #8
 800c9b8:	2203      	movs	r2, #3
 800c9ba:	2182      	movs	r1, #130	; 0x82
 800c9bc:	6878      	ldr	r0, [r7, #4]
 800c9be:	f004 feda 	bl	8011776 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2201      	movs	r2, #1
 800c9c6:	641a      	str	r2, [r3, #64]	; 0x40

  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 800c9c8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 800c9cc:	f004 fffa 	bl	80119c4 <USBD_static_malloc>
 800c9d0:	4602      	mov	r2, r0
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290

  if(pdev->pClassData == NULL)
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c9de:	2b00      	cmp	r3, #0
 800c9e0:	d102      	bne.n	800c9e8 <USBD_CDC_Init+0x9c>
  {
    ret = 1U;
 800c9e2:	2301      	movs	r3, #1
 800c9e4:	73fb      	strb	r3, [r7, #15]
 800c9e6:	e026      	b.n	800ca36 <USBD_CDC_Init+0xea>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800c9ee:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 800c9fa:	68bb      	ldr	r3, [r7, #8]
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hcdc->RxState = 0U;
 800ca02:	68bb      	ldr	r3, [r7, #8]
 800ca04:	2200      	movs	r2, #0
 800ca06:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	7c1b      	ldrb	r3, [r3, #16]
 800ca0e:	2b00      	cmp	r3, #0
 800ca10:	d109      	bne.n	800ca26 <USBD_CDC_Init+0xda>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ca12:	68bb      	ldr	r3, [r7, #8]
 800ca14:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca18:	f44f 7300 	mov.w	r3, #512	; 0x200
 800ca1c:	2101      	movs	r1, #1
 800ca1e:	6878      	ldr	r0, [r7, #4]
 800ca20:	f004 ff9a 	bl	8011958 <USBD_LL_PrepareReceive>
 800ca24:	e007      	b.n	800ca36 <USBD_CDC_Init+0xea>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800ca26:	68bb      	ldr	r3, [r7, #8]
 800ca28:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ca2c:	2340      	movs	r3, #64	; 0x40
 800ca2e:	2101      	movs	r1, #1
 800ca30:	6878      	ldr	r0, [r7, #4]
 800ca32:	f004 ff91 	bl	8011958 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 800ca36:	7bfb      	ldrb	r3, [r7, #15]
}
 800ca38:	4618      	mov	r0, r3
 800ca3a:	3710      	adds	r7, #16
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}

0800ca40 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit (USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800ca40:	b580      	push	{r7, lr}
 800ca42:	b084      	sub	sp, #16
 800ca44:	af00      	add	r7, sp, #0
 800ca46:	6078      	str	r0, [r7, #4]
 800ca48:	460b      	mov	r3, r1
 800ca4a:	70fb      	strb	r3, [r7, #3]
  uint8_t ret = 0U;
 800ca4c:	2300      	movs	r3, #0
 800ca4e:	73fb      	strb	r3, [r7, #15]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800ca50:	2181      	movs	r1, #129	; 0x81
 800ca52:	6878      	ldr	r0, [r7, #4]
 800ca54:	f004 feb5 	bl	80117c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	2200      	movs	r2, #0
 800ca5c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 800ca5e:	2101      	movs	r1, #1
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	f004 feae 	bl	80117c2 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	2200      	movs	r2, #0
 800ca6a:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 800ca6e:	2182      	movs	r1, #130	; 0x82
 800ca70:	6878      	ldr	r0, [r7, #4]
 800ca72:	f004 fea6 	bl	80117c2 <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	2200      	movs	r2, #0
 800ca7a:	641a      	str	r2, [r3, #64]	; 0x40

  /* DeInit  physical Interface components */
  if(pdev->pClassData != NULL)
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca82:	2b00      	cmp	r3, #0
 800ca84:	d00e      	beq.n	800caa4 <USBD_CDC_DeInit+0x64>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ca8c:	685b      	ldr	r3, [r3, #4]
 800ca8e:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ca96:	4618      	mov	r0, r3
 800ca98:	f004 ffa0 	bl	80119dc <USBD_static_free>
    pdev->pClassData = NULL;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	2200      	movs	r2, #0
 800caa0:	f8c3 2290 	str.w	r2, [r3, #656]	; 0x290
  }

  return ret;
 800caa4:	7bfb      	ldrb	r3, [r7, #15]
}
 800caa6:	4618      	mov	r0, r3
 800caa8:	3710      	adds	r7, #16
 800caaa:	46bd      	mov	sp, r7
 800caac:	bd80      	pop	{r7, pc}

0800caae <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup (USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800caae:	b580      	push	{r7, lr}
 800cab0:	b086      	sub	sp, #24
 800cab2:	af00      	add	r7, sp, #0
 800cab4:	6078      	str	r0, [r7, #4]
 800cab6:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cabe:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 800cac0:	2300      	movs	r3, #0
 800cac2:	73fb      	strb	r3, [r7, #15]
  uint16_t status_info = 0U;
 800cac4:	2300      	movs	r3, #0
 800cac6:	81bb      	strh	r3, [r7, #12]
  uint8_t ret = USBD_OK;
 800cac8:	2300      	movs	r3, #0
 800caca:	75fb      	strb	r3, [r7, #23]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800cacc:	683b      	ldr	r3, [r7, #0]
 800cace:	781b      	ldrb	r3, [r3, #0]
 800cad0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d039      	beq.n	800cb4c <USBD_CDC_Setup+0x9e>
 800cad8:	2b20      	cmp	r3, #32
 800cada:	d17f      	bne.n	800cbdc <USBD_CDC_Setup+0x12e>
  {
  case USB_REQ_TYPE_CLASS :
    if (req->wLength)
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	88db      	ldrh	r3, [r3, #6]
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d029      	beq.n	800cb38 <USBD_CDC_Setup+0x8a>
    {
      if (req->bmRequest & 0x80U)
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	781b      	ldrb	r3, [r3, #0]
 800cae8:	b25b      	sxtb	r3, r3
 800caea:	2b00      	cmp	r3, #0
 800caec:	da11      	bge.n	800cb12 <USBD_CDC_Setup+0x64>
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800caf4:	689b      	ldr	r3, [r3, #8]
 800caf6:	683a      	ldr	r2, [r7, #0]
 800caf8:	7850      	ldrb	r0, [r2, #1]
                                                          (uint8_t *)(void *)hcdc->data,
 800cafa:	6939      	ldr	r1, [r7, #16]
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cafc:	683a      	ldr	r2, [r7, #0]
 800cafe:	88d2      	ldrh	r2, [r2, #6]
 800cb00:	4798      	blx	r3
                                                          req->wLength);

          USBD_CtlSendData (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cb02:	6939      	ldr	r1, [r7, #16]
 800cb04:	683b      	ldr	r3, [r7, #0]
 800cb06:	88db      	ldrh	r3, [r3, #6]
 800cb08:	461a      	mov	r2, r3
 800cb0a:	6878      	ldr	r0, [r7, #4]
 800cb0c:	f001 f993 	bl	800de36 <USBD_CtlSendData>
    else
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                        (uint8_t *)(void *)req, 0U);
    }
    break;
 800cb10:	e06b      	b.n	800cbea <USBD_CDC_Setup+0x13c>
        hcdc->CmdOpCode = req->bRequest;
 800cb12:	683b      	ldr	r3, [r7, #0]
 800cb14:	785a      	ldrb	r2, [r3, #1]
 800cb16:	693b      	ldr	r3, [r7, #16]
 800cb18:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
        hcdc->CmdLength = (uint8_t)req->wLength;
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	88db      	ldrh	r3, [r3, #6]
 800cb20:	b2da      	uxtb	r2, r3
 800cb22:	693b      	ldr	r3, [r7, #16]
 800cb24:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800cb28:	6939      	ldr	r1, [r7, #16]
 800cb2a:	683b      	ldr	r3, [r7, #0]
 800cb2c:	88db      	ldrh	r3, [r3, #6]
 800cb2e:	461a      	mov	r2, r3
 800cb30:	6878      	ldr	r0, [r7, #4]
 800cb32:	f001 f9ae 	bl	800de92 <USBD_CtlPrepareRx>
    break;
 800cb36:	e058      	b.n	800cbea <USBD_CDC_Setup+0x13c>
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cb3e:	689b      	ldr	r3, [r3, #8]
 800cb40:	683a      	ldr	r2, [r7, #0]
 800cb42:	7850      	ldrb	r0, [r2, #1]
 800cb44:	2200      	movs	r2, #0
 800cb46:	6839      	ldr	r1, [r7, #0]
 800cb48:	4798      	blx	r3
    break;
 800cb4a:	e04e      	b.n	800cbea <USBD_CDC_Setup+0x13c>

  case USB_REQ_TYPE_STANDARD:
    switch (req->bRequest)
 800cb4c:	683b      	ldr	r3, [r7, #0]
 800cb4e:	785b      	ldrb	r3, [r3, #1]
 800cb50:	2b0b      	cmp	r3, #11
 800cb52:	d02e      	beq.n	800cbb2 <USBD_CDC_Setup+0x104>
 800cb54:	2b0b      	cmp	r3, #11
 800cb56:	dc38      	bgt.n	800cbca <USBD_CDC_Setup+0x11c>
 800cb58:	2b00      	cmp	r3, #0
 800cb5a:	d002      	beq.n	800cb62 <USBD_CDC_Setup+0xb4>
 800cb5c:	2b0a      	cmp	r3, #10
 800cb5e:	d014      	beq.n	800cb8a <USBD_CDC_Setup+0xdc>
 800cb60:	e033      	b.n	800cbca <USBD_CDC_Setup+0x11c>
    {
    case USB_REQ_GET_STATUS:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb62:	687b      	ldr	r3, [r7, #4]
 800cb64:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb68:	2b03      	cmp	r3, #3
 800cb6a:	d107      	bne.n	800cb7c <USBD_CDC_Setup+0xce>
      {
        USBD_CtlSendData (pdev, (uint8_t *)(void *)&status_info, 2U);
 800cb6c:	f107 030c 	add.w	r3, r7, #12
 800cb70:	2202      	movs	r2, #2
 800cb72:	4619      	mov	r1, r3
 800cb74:	6878      	ldr	r0, [r7, #4]
 800cb76:	f001 f95e 	bl	800de36 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800cb7a:	e02e      	b.n	800cbda <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800cb7c:	6839      	ldr	r1, [r7, #0]
 800cb7e:	6878      	ldr	r0, [r7, #4]
 800cb80:	f001 f8ef 	bl	800dd62 <USBD_CtlError>
			  ret = USBD_FAIL;
 800cb84:	2302      	movs	r3, #2
 800cb86:	75fb      	strb	r3, [r7, #23]
      break;
 800cb88:	e027      	b.n	800cbda <USBD_CDC_Setup+0x12c>

    case USB_REQ_GET_INTERFACE:
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800cb8a:	687b      	ldr	r3, [r7, #4]
 800cb8c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cb90:	2b03      	cmp	r3, #3
 800cb92:	d107      	bne.n	800cba4 <USBD_CDC_Setup+0xf6>
      {
        USBD_CtlSendData (pdev, &ifalt, 1U);
 800cb94:	f107 030f 	add.w	r3, r7, #15
 800cb98:	2201      	movs	r2, #1
 800cb9a:	4619      	mov	r1, r3
 800cb9c:	6878      	ldr	r0, [r7, #4]
 800cb9e:	f001 f94a 	bl	800de36 <USBD_CtlSendData>
      else
      {
        USBD_CtlError (pdev, req);
			  ret = USBD_FAIL;
      }
      break;
 800cba2:	e01a      	b.n	800cbda <USBD_CDC_Setup+0x12c>
        USBD_CtlError (pdev, req);
 800cba4:	6839      	ldr	r1, [r7, #0]
 800cba6:	6878      	ldr	r0, [r7, #4]
 800cba8:	f001 f8db 	bl	800dd62 <USBD_CtlError>
			  ret = USBD_FAIL;
 800cbac:	2302      	movs	r3, #2
 800cbae:	75fb      	strb	r3, [r7, #23]
      break;
 800cbb0:	e013      	b.n	800cbda <USBD_CDC_Setup+0x12c>

    case USB_REQ_SET_INTERFACE:
      if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800cbb8:	2b03      	cmp	r3, #3
 800cbba:	d00d      	beq.n	800cbd8 <USBD_CDC_Setup+0x12a>
      {
        USBD_CtlError (pdev, req);
 800cbbc:	6839      	ldr	r1, [r7, #0]
 800cbbe:	6878      	ldr	r0, [r7, #4]
 800cbc0:	f001 f8cf 	bl	800dd62 <USBD_CtlError>
			  ret = USBD_FAIL;
 800cbc4:	2302      	movs	r3, #2
 800cbc6:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800cbc8:	e006      	b.n	800cbd8 <USBD_CDC_Setup+0x12a>

    default:
      USBD_CtlError (pdev, req);
 800cbca:	6839      	ldr	r1, [r7, #0]
 800cbcc:	6878      	ldr	r0, [r7, #4]
 800cbce:	f001 f8c8 	bl	800dd62 <USBD_CtlError>
      ret = USBD_FAIL;
 800cbd2:	2302      	movs	r3, #2
 800cbd4:	75fb      	strb	r3, [r7, #23]
      break;
 800cbd6:	e000      	b.n	800cbda <USBD_CDC_Setup+0x12c>
      break;
 800cbd8:	bf00      	nop
    }
    break;
 800cbda:	e006      	b.n	800cbea <USBD_CDC_Setup+0x13c>

  default:
    USBD_CtlError (pdev, req);
 800cbdc:	6839      	ldr	r1, [r7, #0]
 800cbde:	6878      	ldr	r0, [r7, #4]
 800cbe0:	f001 f8bf 	bl	800dd62 <USBD_CtlError>
    ret = USBD_FAIL;
 800cbe4:	2302      	movs	r3, #2
 800cbe6:	75fb      	strb	r3, [r7, #23]
    break;
 800cbe8:	bf00      	nop
  }

  return ret;
 800cbea:	7dfb      	ldrb	r3, [r7, #23]
}
 800cbec:	4618      	mov	r0, r3
 800cbee:	3718      	adds	r7, #24
 800cbf0:	46bd      	mov	sp, r7
 800cbf2:	bd80      	pop	{r7, pc}

0800cbf4 <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	b084      	sub	sp, #16
 800cbf8:	af00      	add	r7, sp, #0
 800cbfa:	6078      	str	r0, [r7, #4]
 800cbfc:	460b      	mov	r3, r1
 800cbfe:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)pdev->pClassData;
 800cc00:	687b      	ldr	r3, [r7, #4]
 800cc02:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc06:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 800cc08:	687b      	ldr	r3, [r7, #4]
 800cc0a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 800cc0e:	60bb      	str	r3, [r7, #8]

  if(pdev->pClassData != NULL)
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800cc16:	2b00      	cmp	r3, #0
 800cc18:	d03a      	beq.n	800cc90 <USBD_CDC_DataIn+0x9c>
  {
    if((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800cc1a:	78fa      	ldrb	r2, [r7, #3]
 800cc1c:	6879      	ldr	r1, [r7, #4]
 800cc1e:	4613      	mov	r3, r2
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	4413      	add	r3, r2
 800cc24:	009b      	lsls	r3, r3, #2
 800cc26:	440b      	add	r3, r1
 800cc28:	331c      	adds	r3, #28
 800cc2a:	681b      	ldr	r3, [r3, #0]
 800cc2c:	2b00      	cmp	r3, #0
 800cc2e:	d029      	beq.n	800cc84 <USBD_CDC_DataIn+0x90>
 800cc30:	78fa      	ldrb	r2, [r7, #3]
 800cc32:	6879      	ldr	r1, [r7, #4]
 800cc34:	4613      	mov	r3, r2
 800cc36:	009b      	lsls	r3, r3, #2
 800cc38:	4413      	add	r3, r2
 800cc3a:	009b      	lsls	r3, r3, #2
 800cc3c:	440b      	add	r3, r1
 800cc3e:	331c      	adds	r3, #28
 800cc40:	681a      	ldr	r2, [r3, #0]
 800cc42:	78f9      	ldrb	r1, [r7, #3]
 800cc44:	68b8      	ldr	r0, [r7, #8]
 800cc46:	460b      	mov	r3, r1
 800cc48:	009b      	lsls	r3, r3, #2
 800cc4a:	440b      	add	r3, r1
 800cc4c:	00db      	lsls	r3, r3, #3
 800cc4e:	4403      	add	r3, r0
 800cc50:	3338      	adds	r3, #56	; 0x38
 800cc52:	681b      	ldr	r3, [r3, #0]
 800cc54:	fbb2 f1f3 	udiv	r1, r2, r3
 800cc58:	fb01 f303 	mul.w	r3, r1, r3
 800cc5c:	1ad3      	subs	r3, r2, r3
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d110      	bne.n	800cc84 <USBD_CDC_DataIn+0x90>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 800cc62:	78fa      	ldrb	r2, [r7, #3]
 800cc64:	6879      	ldr	r1, [r7, #4]
 800cc66:	4613      	mov	r3, r2
 800cc68:	009b      	lsls	r3, r3, #2
 800cc6a:	4413      	add	r3, r2
 800cc6c:	009b      	lsls	r3, r3, #2
 800cc6e:	440b      	add	r3, r1
 800cc70:	331c      	adds	r3, #28
 800cc72:	2200      	movs	r2, #0
 800cc74:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit (pdev, epnum, NULL, 0U);
 800cc76:	78f9      	ldrb	r1, [r7, #3]
 800cc78:	2300      	movs	r3, #0
 800cc7a:	2200      	movs	r2, #0
 800cc7c:	6878      	ldr	r0, [r7, #4]
 800cc7e:	f004 fe48 	bl	8011912 <USBD_LL_Transmit>
 800cc82:	e003      	b.n	800cc8c <USBD_CDC_DataIn+0x98>
    }
    else
    {
      hcdc->TxState = 0U;
 800cc84:	68fb      	ldr	r3, [r7, #12]
 800cc86:	2200      	movs	r2, #0
 800cc88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }
    return USBD_OK;
 800cc8c:	2300      	movs	r3, #0
 800cc8e:	e000      	b.n	800cc92 <USBD_CDC_DataIn+0x9e>
  }
  else
  {
    return USBD_FAIL;
 800cc90:	2302      	movs	r3, #2
  }
}
 800cc92:	4618      	mov	r0, r3
 800cc94:	3710      	adds	r7, #16
 800cc96:	46bd      	mov	sp, r7
 800cc98:	bd80      	pop	{r7, pc}

0800cc9a <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b084      	sub	sp, #16
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	6078      	str	r0, [r7, #4]
 800cca2:	460b      	mov	r3, r1
 800cca4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccac:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 800ccae:	78fb      	ldrb	r3, [r7, #3]
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	6878      	ldr	r0, [r7, #4]
 800ccb4:	f004 fe73 	bl	801199e <USBD_LL_GetRxDataSize>
 800ccb8:	4602      	mov	r2, r0
 800ccba:	68fb      	ldr	r3, [r7, #12]
 800ccbc:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if(pdev->pClassData != NULL)
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccc6:	2b00      	cmp	r3, #0
 800ccc8:	d00d      	beq.n	800cce6 <USBD_CDC_DataOut+0x4c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800ccca:	687b      	ldr	r3, [r7, #4]
 800cccc:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800ccd0:	68db      	ldr	r3, [r3, #12]
 800ccd2:	68fa      	ldr	r2, [r7, #12]
 800ccd4:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 800ccd8:	68fa      	ldr	r2, [r7, #12]
 800ccda:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 800ccde:	4611      	mov	r1, r2
 800cce0:	4798      	blx	r3

    return USBD_OK;
 800cce2:	2300      	movs	r3, #0
 800cce4:	e000      	b.n	800cce8 <USBD_CDC_DataOut+0x4e>
  }
  else
  {
    return USBD_FAIL;
 800cce6:	2302      	movs	r3, #2
  }
}
 800cce8:	4618      	mov	r0, r3
 800ccea:	3710      	adds	r7, #16
 800ccec:	46bd      	mov	sp, r7
 800ccee:	bd80      	pop	{r7, pc}

0800ccf0 <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{
 800ccf0:	b580      	push	{r7, lr}
 800ccf2:	b084      	sub	sp, #16
 800ccf4:	af00      	add	r7, sp, #0
 800ccf6:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ccf8:	687b      	ldr	r3, [r7, #4]
 800ccfa:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ccfe:	60fb      	str	r3, [r7, #12]

  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d015      	beq.n	800cd36 <USBD_CDC_EP0_RxReady+0x46>
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 800cd10:	2bff      	cmp	r3, #255	; 0xff
 800cd12:	d010      	beq.n	800cd36 <USBD_CDC_EP0_RxReady+0x46>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800cd1a:	689b      	ldr	r3, [r3, #8]
 800cd1c:	68fa      	ldr	r2, [r7, #12]
 800cd1e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                      (uint8_t *)(void *)hcdc->data,
 800cd22:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 800cd24:	68fa      	ldr	r2, [r7, #12]
 800cd26:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800cd2a:	b292      	uxth	r2, r2
 800cd2c:	4798      	blx	r3
      hcdc->CmdOpCode = 0xFFU;
 800cd2e:	68fb      	ldr	r3, [r7, #12]
 800cd30:	22ff      	movs	r2, #255	; 0xff
 800cd32:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200

  }
  return USBD_OK;
 800cd36:	2300      	movs	r3, #0
}
 800cd38:	4618      	mov	r0, r3
 800cd3a:	3710      	adds	r7, #16
 800cd3c:	46bd      	mov	sp, r7
 800cd3e:	bd80      	pop	{r7, pc}

0800cd40 <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgFSDesc);
 800cd48:	687b      	ldr	r3, [r7, #4]
 800cd4a:	2243      	movs	r2, #67	; 0x43
 800cd4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 800cd4e:	4b03      	ldr	r3, [pc, #12]	; (800cd5c <USBD_CDC_GetFSCfgDesc+0x1c>)
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	bc80      	pop	{r7}
 800cd58:	4770      	bx	lr
 800cd5a:	bf00      	nop
 800cd5c:	20000130 	.word	0x20000130

0800cd60 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
 800cd60:	b480      	push	{r7}
 800cd62:	b083      	sub	sp, #12
 800cd64:	af00      	add	r7, sp, #0
 800cd66:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_CfgHSDesc);
 800cd68:	687b      	ldr	r3, [r7, #4]
 800cd6a:	2243      	movs	r2, #67	; 0x43
 800cd6c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 800cd6e:	4b03      	ldr	r3, [pc, #12]	; (800cd7c <USBD_CDC_GetHSCfgDesc+0x1c>)
}
 800cd70:	4618      	mov	r0, r3
 800cd72:	370c      	adds	r7, #12
 800cd74:	46bd      	mov	sp, r7
 800cd76:	bc80      	pop	{r7}
 800cd78:	4770      	bx	lr
 800cd7a:	bf00      	nop
 800cd7c:	200000ec 	.word	0x200000ec

0800cd80 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
 800cd80:	b480      	push	{r7}
 800cd82:	b083      	sub	sp, #12
 800cd84:	af00      	add	r7, sp, #0
 800cd86:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 800cd88:	687b      	ldr	r3, [r7, #4]
 800cd8a:	2243      	movs	r2, #67	; 0x43
 800cd8c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 800cd8e:	4b03      	ldr	r3, [pc, #12]	; (800cd9c <USBD_CDC_GetOtherSpeedCfgDesc+0x1c>)
}
 800cd90:	4618      	mov	r0, r3
 800cd92:	370c      	adds	r7, #12
 800cd94:	46bd      	mov	sp, r7
 800cd96:	bc80      	pop	{r7}
 800cd98:	4770      	bx	lr
 800cd9a:	bf00      	nop
 800cd9c:	20000174 	.word	0x20000174

0800cda0 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
 800cda0:	b480      	push	{r7}
 800cda2:	b083      	sub	sp, #12
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	6078      	str	r0, [r7, #4]
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	220a      	movs	r2, #10
 800cdac:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 800cdae:	4b03      	ldr	r3, [pc, #12]	; (800cdbc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 800cdb0:	4618      	mov	r0, r3
 800cdb2:	370c      	adds	r7, #12
 800cdb4:	46bd      	mov	sp, r7
 800cdb6:	bc80      	pop	{r7}
 800cdb8:	4770      	bx	lr
 800cdba:	bf00      	nop
 800cdbc:	200000a8 	.word	0x200000a8

0800cdc0 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev,
                                      USBD_CDC_ItfTypeDef *fops)
{
 800cdc0:	b480      	push	{r7}
 800cdc2:	b085      	sub	sp, #20
 800cdc4:	af00      	add	r7, sp, #0
 800cdc6:	6078      	str	r0, [r7, #4]
 800cdc8:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 800cdca:	2302      	movs	r3, #2
 800cdcc:	73fb      	strb	r3, [r7, #15]

  if(fops != NULL)
 800cdce:	683b      	ldr	r3, [r7, #0]
 800cdd0:	2b00      	cmp	r3, #0
 800cdd2:	d005      	beq.n	800cde0 <USBD_CDC_RegisterInterface+0x20>
  {
    pdev->pUserData= fops;
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	683a      	ldr	r2, [r7, #0]
 800cdd8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
    ret = USBD_OK;
 800cddc:	2300      	movs	r3, #0
 800cdde:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 800cde0:	7bfb      	ldrb	r3, [r7, #15]
}
 800cde2:	4618      	mov	r0, r3
 800cde4:	3714      	adds	r7, #20
 800cde6:	46bd      	mov	sp, r7
 800cde8:	bc80      	pop	{r7}
 800cdea:	4770      	bx	lr

0800cdec <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
 800cdec:	b480      	push	{r7}
 800cdee:	b087      	sub	sp, #28
 800cdf0:	af00      	add	r7, sp, #0
 800cdf2:	60f8      	str	r0, [r7, #12]
 800cdf4:	60b9      	str	r1, [r7, #8]
 800cdf6:	4613      	mov	r3, r2
 800cdf8:	80fb      	strh	r3, [r7, #6]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce00:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 800ce02:	697b      	ldr	r3, [r7, #20]
 800ce04:	68ba      	ldr	r2, [r7, #8]
 800ce06:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 800ce0a:	88fa      	ldrh	r2, [r7, #6]
 800ce0c:	697b      	ldr	r3, [r7, #20]
 800ce0e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return USBD_OK;
 800ce12:	2300      	movs	r3, #0
}
 800ce14:	4618      	mov	r0, r3
 800ce16:	371c      	adds	r7, #28
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bc80      	pop	{r7}
 800ce1c:	4770      	bx	lr

0800ce1e <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
 800ce1e:	b480      	push	{r7}
 800ce20:	b085      	sub	sp, #20
 800ce22:	af00      	add	r7, sp, #0
 800ce24:	6078      	str	r0, [r7, #4]
 800ce26:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ce28:	687b      	ldr	r3, [r7, #4]
 800ce2a:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce2e:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 800ce30:	68fb      	ldr	r3, [r7, #12]
 800ce32:	683a      	ldr	r2, [r7, #0]
 800ce34:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return USBD_OK;
 800ce38:	2300      	movs	r3, #0
}
 800ce3a:	4618      	mov	r0, r3
 800ce3c:	3714      	adds	r7, #20
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	bc80      	pop	{r7}
 800ce42:	4770      	bx	lr

0800ce44 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 800ce44:	b580      	push	{r7, lr}
 800ce46:	b084      	sub	sp, #16
 800ce48:	af00      	add	r7, sp, #0
 800ce4a:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce52:	60fb      	str	r3, [r7, #12]

  if(pdev->pClassData != NULL)
 800ce54:	687b      	ldr	r3, [r7, #4]
 800ce56:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	d01c      	beq.n	800ce98 <USBD_CDC_TransmitPacket+0x54>
  {
    if(hcdc->TxState == 0U)
 800ce5e:	68fb      	ldr	r3, [r7, #12]
 800ce60:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 800ce64:	2b00      	cmp	r3, #0
 800ce66:	d115      	bne.n	800ce94 <USBD_CDC_TransmitPacket+0x50>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 800ce68:	68fb      	ldr	r3, [r7, #12]
 800ce6a:	2201      	movs	r2, #1
 800ce6c:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800ce70:	68fb      	ldr	r3, [r7, #12]
 800ce72:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 800ce76:	687b      	ldr	r3, [r7, #4]
 800ce78:	631a      	str	r2, [r3, #48]	; 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ce7a:	68fb      	ldr	r3, [r7, #12]
 800ce7c:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
                       (uint16_t)hcdc->TxLength);
 800ce80:	68fb      	ldr	r3, [r7, #12]
 800ce82:	f8d3 3210 	ldr.w	r3, [r3, #528]	; 0x210
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800ce86:	b29b      	uxth	r3, r3
 800ce88:	2181      	movs	r1, #129	; 0x81
 800ce8a:	6878      	ldr	r0, [r7, #4]
 800ce8c:	f004 fd41 	bl	8011912 <USBD_LL_Transmit>

      return USBD_OK;
 800ce90:	2300      	movs	r3, #0
 800ce92:	e002      	b.n	800ce9a <USBD_CDC_TransmitPacket+0x56>
    }
    else
    {
      return USBD_BUSY;
 800ce94:	2301      	movs	r3, #1
 800ce96:	e000      	b.n	800ce9a <USBD_CDC_TransmitPacket+0x56>
    }
  }
  else
  {
    return USBD_FAIL;
 800ce98:	2302      	movs	r3, #2
  }
}
 800ce9a:	4618      	mov	r0, r3
 800ce9c:	3710      	adds	r7, #16
 800ce9e:	46bd      	mov	sp, r7
 800cea0:	bd80      	pop	{r7, pc}

0800cea2 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 800cea2:	b580      	push	{r7, lr}
 800cea4:	b084      	sub	sp, #16
 800cea6:	af00      	add	r7, sp, #0
 800cea8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800ceaa:	687b      	ldr	r3, [r7, #4]
 800ceac:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ceb0:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800ceb8:	2b00      	cmp	r3, #0
 800ceba:	d017      	beq.n	800ceec <USBD_CDC_ReceivePacket+0x4a>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	7c1b      	ldrb	r3, [r3, #16]
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d109      	bne.n	800ced8 <USBD_CDC_ReceivePacket+0x36>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800ceca:	f44f 7300 	mov.w	r3, #512	; 0x200
 800cece:	2101      	movs	r1, #1
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f004 fd41 	bl	8011958 <USBD_LL_PrepareReceive>
 800ced6:	e007      	b.n	800cee8 <USBD_CDC_ReceivePacket+0x46>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 800ced8:	68fb      	ldr	r3, [r7, #12]
 800ceda:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800cede:	2340      	movs	r3, #64	; 0x40
 800cee0:	2101      	movs	r1, #1
 800cee2:	6878      	ldr	r0, [r7, #4]
 800cee4:	f004 fd38 	bl	8011958 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 800cee8:	2300      	movs	r3, #0
 800ceea:	e000      	b.n	800ceee <USBD_CDC_ReceivePacket+0x4c>
  }
  else
  {
    return USBD_FAIL;
 800ceec:	2302      	movs	r3, #2
  }
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}

0800cef6 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 800cef6:	b580      	push	{r7, lr}
 800cef8:	b084      	sub	sp, #16
 800cefa:	af00      	add	r7, sp, #0
 800cefc:	60f8      	str	r0, [r7, #12]
 800cefe:	60b9      	str	r1, [r7, #8]
 800cf00:	4613      	mov	r3, r2
 800cf02:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	2b00      	cmp	r3, #0
 800cf08:	d101      	bne.n	800cf0e <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	e01a      	b.n	800cf44 <USBD_Init+0x4e>
  }

  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 800cf0e:	68fb      	ldr	r3, [r7, #12]
 800cf10:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d003      	beq.n	800cf20 <USBD_Init+0x2a>
  {
    pdev->pClass = NULL;
 800cf18:	68fb      	ldr	r3, [r7, #12]
 800cf1a:	2200      	movs	r2, #0
 800cf1c:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
  }

  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 800cf20:	68bb      	ldr	r3, [r7, #8]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d003      	beq.n	800cf2e <USBD_Init+0x38>
  {
    pdev->pDesc = pdesc;
 800cf26:	68fb      	ldr	r3, [r7, #12]
 800cf28:	68ba      	ldr	r2, [r7, #8]
 800cf2a:	f8c3 2288 	str.w	r2, [r3, #648]	; 0x288
  }

  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 800cf2e:	68fb      	ldr	r3, [r7, #12]
 800cf30:	2201      	movs	r2, #1
 800cf32:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->id = id;
 800cf36:	68fb      	ldr	r3, [r7, #12]
 800cf38:	79fa      	ldrb	r2, [r7, #7]
 800cf3a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800cf3c:	68f8      	ldr	r0, [r7, #12]
 800cf3e:	f004 fba5 	bl	801168c <USBD_LL_Init>

  return USBD_OK;
 800cf42:	2300      	movs	r3, #0
}
 800cf44:	4618      	mov	r0, r3
 800cf46:	3710      	adds	r7, #16
 800cf48:	46bd      	mov	sp, r7
 800cf4a:	bd80      	pop	{r7, pc}

0800cf4c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800cf4c:	b480      	push	{r7}
 800cf4e:	b085      	sub	sp, #20
 800cf50:	af00      	add	r7, sp, #0
 800cf52:	6078      	str	r0, [r7, #4]
 800cf54:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef   status = USBD_OK;
 800cf56:	2300      	movs	r3, #0
 800cf58:	73fb      	strb	r3, [r7, #15]
  if(pclass != 0)
 800cf5a:	683b      	ldr	r3, [r7, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d006      	beq.n	800cf6e <USBD_RegisterClass+0x22>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	683a      	ldr	r2, [r7, #0]
 800cf64:	f8c3 228c 	str.w	r2, [r3, #652]	; 0x28c
    status = USBD_OK;
 800cf68:	2300      	movs	r3, #0
 800cf6a:	73fb      	strb	r3, [r7, #15]
 800cf6c:	e001      	b.n	800cf72 <USBD_RegisterClass+0x26>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 800cf6e:	2302      	movs	r3, #2
 800cf70:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800cf72:	7bfb      	ldrb	r3, [r7, #15]
}
 800cf74:	4618      	mov	r0, r3
 800cf76:	3714      	adds	r7, #20
 800cf78:	46bd      	mov	sp, r7
 800cf7a:	bc80      	pop	{r7}
 800cf7c:	4770      	bx	lr

0800cf7e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800cf7e:	b580      	push	{r7, lr}
 800cf80:	b082      	sub	sp, #8
 800cf82:	af00      	add	r7, sp, #0
 800cf84:	6078      	str	r0, [r7, #4]

  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 800cf86:	6878      	ldr	r0, [r7, #4]
 800cf88:	f004 fbda 	bl	8011740 <USBD_LL_Start>

  return USBD_OK;
 800cf8c:	2300      	movs	r3, #0
}
 800cf8e:	4618      	mov	r0, r3
 800cf90:	3708      	adds	r7, #8
 800cf92:	46bd      	mov	sp, r7
 800cf94:	bd80      	pop	{r7, pc}

0800cf96 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode (USBD_HandleTypeDef  *pdev)
{
 800cf96:	b480      	push	{r7}
 800cf98:	b083      	sub	sp, #12
 800cf9a:	af00      	add	r7, sp, #0
 800cf9c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800cf9e:	2300      	movs	r3, #0
}
 800cfa0:	4618      	mov	r0, r3
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	bc80      	pop	{r7}
 800cfa8:	4770      	bx	lr

0800cfaa <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cfaa:	b580      	push	{r7, lr}
 800cfac:	b084      	sub	sp, #16
 800cfae:	af00      	add	r7, sp, #0
 800cfb0:	6078      	str	r0, [r7, #4]
 800cfb2:	460b      	mov	r3, r1
 800cfb4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800cfb6:	2302      	movs	r3, #2
 800cfb8:	73fb      	strb	r3, [r7, #15]

  if(pdev->pClass != NULL)
 800cfba:	687b      	ldr	r3, [r7, #4]
 800cfbc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	d00c      	beq.n	800cfde <USBD_SetClassConfig+0x34>
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0U)
 800cfc4:	687b      	ldr	r3, [r7, #4]
 800cfc6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cfca:	681b      	ldr	r3, [r3, #0]
 800cfcc:	78fa      	ldrb	r2, [r7, #3]
 800cfce:	4611      	mov	r1, r2
 800cfd0:	6878      	ldr	r0, [r7, #4]
 800cfd2:	4798      	blx	r3
 800cfd4:	4603      	mov	r3, r0
 800cfd6:	2b00      	cmp	r3, #0
 800cfd8:	d101      	bne.n	800cfde <USBD_SetClassConfig+0x34>
    {
      ret = USBD_OK;
 800cfda:	2300      	movs	r3, #0
 800cfdc:	73fb      	strb	r3, [r7, #15]
    }
  }

  return ret;
 800cfde:	7bfb      	ldrb	r3, [r7, #15]
}
 800cfe0:	4618      	mov	r0, r3
 800cfe2:	3710      	adds	r7, #16
 800cfe4:	46bd      	mov	sp, r7
 800cfe6:	bd80      	pop	{r7, pc}

0800cfe8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800cfe8:	b580      	push	{r7, lr}
 800cfea:	b082      	sub	sp, #8
 800cfec:	af00      	add	r7, sp, #0
 800cfee:	6078      	str	r0, [r7, #4]
 800cff0:	460b      	mov	r3, r1
 800cff2:	70fb      	strb	r3, [r7, #3]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800cffa:	685b      	ldr	r3, [r3, #4]
 800cffc:	78fa      	ldrb	r2, [r7, #3]
 800cffe:	4611      	mov	r1, r2
 800d000:	6878      	ldr	r0, [r7, #4]
 800d002:	4798      	blx	r3
  return USBD_OK;
 800d004:	2300      	movs	r3, #0
}
 800d006:	4618      	mov	r0, r3
 800d008:	3708      	adds	r7, #8
 800d00a:	46bd      	mov	sp, r7
 800d00c:	bd80      	pop	{r7, pc}

0800d00e <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800d00e:	b580      	push	{r7, lr}
 800d010:	b082      	sub	sp, #8
 800d012:	af00      	add	r7, sp, #0
 800d014:	6078      	str	r0, [r7, #4]
 800d016:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800d018:	687b      	ldr	r3, [r7, #4]
 800d01a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d01e:	6839      	ldr	r1, [r7, #0]
 800d020:	4618      	mov	r0, r3
 800d022:	f000 fe62 	bl	800dcea <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	2201      	movs	r2, #1
 800d02a:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  pdev->ep0_data_len = pdev->request.wLength;
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	f8b3 3286 	ldrh.w	r3, [r3, #646]	; 0x286
 800d034:	461a      	mov	r2, r3
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

  switch (pdev->request.bmRequest & 0x1FU)
 800d03c:	687b      	ldr	r3, [r7, #4]
 800d03e:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d042:	f003 031f 	and.w	r3, r3, #31
 800d046:	2b02      	cmp	r3, #2
 800d048:	d016      	beq.n	800d078 <USBD_LL_SetupStage+0x6a>
 800d04a:	2b02      	cmp	r3, #2
 800d04c:	d81c      	bhi.n	800d088 <USBD_LL_SetupStage+0x7a>
 800d04e:	2b00      	cmp	r3, #0
 800d050:	d002      	beq.n	800d058 <USBD_LL_SetupStage+0x4a>
 800d052:	2b01      	cmp	r3, #1
 800d054:	d008      	beq.n	800d068 <USBD_LL_SetupStage+0x5a>
 800d056:	e017      	b.n	800d088 <USBD_LL_SetupStage+0x7a>
  {
  case USB_REQ_RECIPIENT_DEVICE:
    USBD_StdDevReq (pdev, &pdev->request);
 800d058:	687b      	ldr	r3, [r7, #4]
 800d05a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d05e:	4619      	mov	r1, r3
 800d060:	6878      	ldr	r0, [r7, #4]
 800d062:	f000 f9c5 	bl	800d3f0 <USBD_StdDevReq>
    break;
 800d066:	e01a      	b.n	800d09e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_INTERFACE:
    USBD_StdItfReq(pdev, &pdev->request);
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d06e:	4619      	mov	r1, r3
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	f000 fa27 	bl	800d4c4 <USBD_StdItfReq>
    break;
 800d076:	e012      	b.n	800d09e <USBD_LL_SetupStage+0x90>

  case USB_REQ_RECIPIENT_ENDPOINT:
    USBD_StdEPReq(pdev, &pdev->request);
 800d078:	687b      	ldr	r3, [r7, #4]
 800d07a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800d07e:	4619      	mov	r1, r3
 800d080:	6878      	ldr	r0, [r7, #4]
 800d082:	f000 fa67 	bl	800d554 <USBD_StdEPReq>
    break;
 800d086:	e00a      	b.n	800d09e <USBD_LL_SetupStage+0x90>

  default:
    USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	f893 3280 	ldrb.w	r3, [r3, #640]	; 0x280
 800d08e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d092:	b2db      	uxtb	r3, r3
 800d094:	4619      	mov	r1, r3
 800d096:	6878      	ldr	r0, [r7, #4]
 800d098:	f004 fbb2 	bl	8011800 <USBD_LL_StallEP>
    break;
 800d09c:	bf00      	nop
  }

  return USBD_OK;
 800d09e:	2300      	movs	r3, #0
}
 800d0a0:	4618      	mov	r0, r3
 800d0a2:	3708      	adds	r7, #8
 800d0a4:	46bd      	mov	sp, r7
 800d0a6:	bd80      	pop	{r7, pc}

0800d0a8 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 800d0a8:	b580      	push	{r7, lr}
 800d0aa:	b086      	sub	sp, #24
 800d0ac:	af00      	add	r7, sp, #0
 800d0ae:	60f8      	str	r0, [r7, #12]
 800d0b0:	460b      	mov	r3, r1
 800d0b2:	607a      	str	r2, [r7, #4]
 800d0b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef    *pep;

  if(epnum == 0U)
 800d0b6:	7afb      	ldrb	r3, [r7, #11]
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	d14b      	bne.n	800d154 <USBD_LL_DataOutStage+0xac>
  {
    pep = &pdev->ep_out[0];
 800d0bc:	68fb      	ldr	r3, [r7, #12]
 800d0be:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d0c2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800d0c4:	68fb      	ldr	r3, [r7, #12]
 800d0c6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d0ca:	2b03      	cmp	r3, #3
 800d0cc:	d134      	bne.n	800d138 <USBD_LL_DataOutStage+0x90>
    {
      if(pep->rem_length > pep->maxpacket)
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	68da      	ldr	r2, [r3, #12]
 800d0d2:	697b      	ldr	r3, [r7, #20]
 800d0d4:	691b      	ldr	r3, [r3, #16]
 800d0d6:	429a      	cmp	r2, r3
 800d0d8:	d919      	bls.n	800d10e <USBD_LL_DataOutStage+0x66>
      {
        pep->rem_length -=  pep->maxpacket;
 800d0da:	697b      	ldr	r3, [r7, #20]
 800d0dc:	68da      	ldr	r2, [r3, #12]
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	691b      	ldr	r3, [r3, #16]
 800d0e2:	1ad2      	subs	r2, r2, r3
 800d0e4:	697b      	ldr	r3, [r7, #20]
 800d0e6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx (pdev,
                            pdata,
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d0e8:	697b      	ldr	r3, [r7, #20]
 800d0ea:	68da      	ldr	r2, [r3, #12]
 800d0ec:	697b      	ldr	r3, [r7, #20]
 800d0ee:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d0f0:	429a      	cmp	r2, r3
 800d0f2:	d203      	bcs.n	800d0fc <USBD_LL_DataOutStage+0x54>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx (pdev,
 800d0f8:	b29b      	uxth	r3, r3
 800d0fa:	e002      	b.n	800d102 <USBD_LL_DataOutStage+0x5a>
                            (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 800d0fc:	697b      	ldr	r3, [r7, #20]
 800d0fe:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx (pdev,
 800d100:	b29b      	uxth	r3, r3
 800d102:	461a      	mov	r2, r3
 800d104:	6879      	ldr	r1, [r7, #4]
 800d106:	68f8      	ldr	r0, [r7, #12]
 800d108:	f000 fee1 	bl	800dece <USBD_CtlContinueRx>
 800d10c:	e038      	b.n	800d180 <USBD_LL_DataOutStage+0xd8>
      }
      else
      {
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d10e:	68fb      	ldr	r3, [r7, #12]
 800d110:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d114:	691b      	ldr	r3, [r3, #16]
 800d116:	2b00      	cmp	r3, #0
 800d118:	d00a      	beq.n	800d130 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d11a:	68fb      	ldr	r3, [r7, #12]
 800d11c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
        if((pdev->pClass->EP0_RxReady != NULL)&&
 800d120:	2b03      	cmp	r3, #3
 800d122:	d105      	bne.n	800d130 <USBD_LL_DataOutStage+0x88>
        {
          pdev->pClass->EP0_RxReady(pdev);
 800d124:	68fb      	ldr	r3, [r7, #12]
 800d126:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d12a:	691b      	ldr	r3, [r3, #16]
 800d12c:	68f8      	ldr	r0, [r7, #12]
 800d12e:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 800d130:	68f8      	ldr	r0, [r7, #12]
 800d132:	f000 fede 	bl	800def2 <USBD_CtlSendStatus>
 800d136:	e023      	b.n	800d180 <USBD_LL_DataOutStage+0xd8>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800d138:	68fb      	ldr	r3, [r7, #12]
 800d13a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d13e:	2b05      	cmp	r3, #5
 800d140:	d11e      	bne.n	800d180 <USBD_LL_DataOutStage+0xd8>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 800d142:	68fb      	ldr	r3, [r7, #12]
 800d144:	2200      	movs	r2, #0
 800d146:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
        USBD_LL_StallEP(pdev, 0U);
 800d14a:	2100      	movs	r1, #0
 800d14c:	68f8      	ldr	r0, [r7, #12]
 800d14e:	f004 fb57 	bl	8011800 <USBD_LL_StallEP>
 800d152:	e015      	b.n	800d180 <USBD_LL_DataOutStage+0xd8>
      }
    }
  }
  else if((pdev->pClass->DataOut != NULL) &&
 800d154:	68fb      	ldr	r3, [r7, #12]
 800d156:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d15a:	699b      	ldr	r3, [r3, #24]
 800d15c:	2b00      	cmp	r3, #0
 800d15e:	d00d      	beq.n	800d17c <USBD_LL_DataOutStage+0xd4>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d160:	68fb      	ldr	r3, [r7, #12]
 800d162:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataOut != NULL) &&
 800d166:	2b03      	cmp	r3, #3
 800d168:	d108      	bne.n	800d17c <USBD_LL_DataOutStage+0xd4>
  {
    pdev->pClass->DataOut(pdev, epnum);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d170:	699b      	ldr	r3, [r3, #24]
 800d172:	7afa      	ldrb	r2, [r7, #11]
 800d174:	4611      	mov	r1, r2
 800d176:	68f8      	ldr	r0, [r7, #12]
 800d178:	4798      	blx	r3
 800d17a:	e001      	b.n	800d180 <USBD_LL_DataOutStage+0xd8>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d17c:	2302      	movs	r3, #2
 800d17e:	e000      	b.n	800d182 <USBD_LL_DataOutStage+0xda>
  }

  return USBD_OK;
 800d180:	2300      	movs	r3, #0
}
 800d182:	4618      	mov	r0, r3
 800d184:	3718      	adds	r7, #24
 800d186:	46bd      	mov	sp, r7
 800d188:	bd80      	pop	{r7, pc}

0800d18a <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev, uint8_t epnum,
                                       uint8_t *pdata)
{
 800d18a:	b580      	push	{r7, lr}
 800d18c:	b086      	sub	sp, #24
 800d18e:	af00      	add	r7, sp, #0
 800d190:	60f8      	str	r0, [r7, #12]
 800d192:	460b      	mov	r3, r1
 800d194:	607a      	str	r2, [r7, #4]
 800d196:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;

  if(epnum == 0U)
 800d198:	7afb      	ldrb	r3, [r7, #11]
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d17f      	bne.n	800d29e <USBD_LL_DataInStage+0x114>
  {
    pep = &pdev->ep_in[0];
 800d19e:	68fb      	ldr	r3, [r7, #12]
 800d1a0:	3314      	adds	r3, #20
 800d1a2:	617b      	str	r3, [r7, #20]

    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 800d1a4:	68fb      	ldr	r3, [r7, #12]
 800d1a6:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d1aa:	2b02      	cmp	r3, #2
 800d1ac:	d15c      	bne.n	800d268 <USBD_LL_DataInStage+0xde>
    {
      if(pep->rem_length > pep->maxpacket)
 800d1ae:	697b      	ldr	r3, [r7, #20]
 800d1b0:	68da      	ldr	r2, [r3, #12]
 800d1b2:	697b      	ldr	r3, [r7, #20]
 800d1b4:	691b      	ldr	r3, [r3, #16]
 800d1b6:	429a      	cmp	r2, r3
 800d1b8:	d915      	bls.n	800d1e6 <USBD_LL_DataInStage+0x5c>
      {
        pep->rem_length -= pep->maxpacket;
 800d1ba:	697b      	ldr	r3, [r7, #20]
 800d1bc:	68da      	ldr	r2, [r3, #12]
 800d1be:	697b      	ldr	r3, [r7, #20]
 800d1c0:	691b      	ldr	r3, [r3, #16]
 800d1c2:	1ad2      	subs	r2, r2, r3
 800d1c4:	697b      	ldr	r3, [r7, #20]
 800d1c6:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData (pdev, pdata, (uint16_t)pep->rem_length);
 800d1c8:	697b      	ldr	r3, [r7, #20]
 800d1ca:	68db      	ldr	r3, [r3, #12]
 800d1cc:	b29b      	uxth	r3, r3
 800d1ce:	461a      	mov	r2, r3
 800d1d0:	6879      	ldr	r1, [r7, #4]
 800d1d2:	68f8      	ldr	r0, [r7, #12]
 800d1d4:	f000 fe4b 	bl	800de6e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d1d8:	2300      	movs	r3, #0
 800d1da:	2200      	movs	r2, #0
 800d1dc:	2100      	movs	r1, #0
 800d1de:	68f8      	ldr	r0, [r7, #12]
 800d1e0:	f004 fbba 	bl	8011958 <USBD_LL_PrepareReceive>
 800d1e4:	e04e      	b.n	800d284 <USBD_LL_DataInStage+0xfa>
      }
      else
      { /* last packet is MPS multiple, so send ZLP packet */
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	689b      	ldr	r3, [r3, #8]
 800d1ea:	697a      	ldr	r2, [r7, #20]
 800d1ec:	6912      	ldr	r2, [r2, #16]
 800d1ee:	fbb3 f1f2 	udiv	r1, r3, r2
 800d1f2:	fb01 f202 	mul.w	r2, r1, r2
 800d1f6:	1a9b      	subs	r3, r3, r2
 800d1f8:	2b00      	cmp	r3, #0
 800d1fa:	d11c      	bne.n	800d236 <USBD_LL_DataInStage+0xac>
           (pep->total_length >= pep->maxpacket) &&
 800d1fc:	697b      	ldr	r3, [r7, #20]
 800d1fe:	689a      	ldr	r2, [r3, #8]
 800d200:	697b      	ldr	r3, [r7, #20]
 800d202:	691b      	ldr	r3, [r3, #16]
        if((pep->total_length % pep->maxpacket == 0U) &&
 800d204:	429a      	cmp	r2, r3
 800d206:	d316      	bcc.n	800d236 <USBD_LL_DataInStage+0xac>
           (pep->total_length < pdev->ep0_data_len))
 800d208:	697b      	ldr	r3, [r7, #20]
 800d20a:	689a      	ldr	r2, [r3, #8]
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	f8d3 3270 	ldr.w	r3, [r3, #624]	; 0x270
           (pep->total_length >= pep->maxpacket) &&
 800d212:	429a      	cmp	r2, r3
 800d214:	d20f      	bcs.n	800d236 <USBD_LL_DataInStage+0xac>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800d216:	2200      	movs	r2, #0
 800d218:	2100      	movs	r1, #0
 800d21a:	68f8      	ldr	r0, [r7, #12]
 800d21c:	f000 fe27 	bl	800de6e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 800d220:	68fb      	ldr	r3, [r7, #12]
 800d222:	2200      	movs	r2, #0
 800d224:	f8c3 2270 	str.w	r2, [r3, #624]	; 0x270

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800d228:	2300      	movs	r3, #0
 800d22a:	2200      	movs	r2, #0
 800d22c:	2100      	movs	r1, #0
 800d22e:	68f8      	ldr	r0, [r7, #12]
 800d230:	f004 fb92 	bl	8011958 <USBD_LL_PrepareReceive>
 800d234:	e026      	b.n	800d284 <USBD_LL_DataInStage+0xfa>
        }
        else
        {
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d23c:	68db      	ldr	r3, [r3, #12]
 800d23e:	2b00      	cmp	r3, #0
 800d240:	d00a      	beq.n	800d258 <USBD_LL_DataInStage+0xce>
             (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
          if((pdev->pClass->EP0_TxSent != NULL)&&
 800d248:	2b03      	cmp	r3, #3
 800d24a:	d105      	bne.n	800d258 <USBD_LL_DataInStage+0xce>
          {
            pdev->pClass->EP0_TxSent(pdev);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d252:	68db      	ldr	r3, [r3, #12]
 800d254:	68f8      	ldr	r0, [r7, #12]
 800d256:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 800d258:	2180      	movs	r1, #128	; 0x80
 800d25a:	68f8      	ldr	r0, [r7, #12]
 800d25c:	f004 fad0 	bl	8011800 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 800d260:	68f8      	ldr	r0, [r7, #12]
 800d262:	f000 fe59 	bl	800df18 <USBD_CtlReceiveStatus>
 800d266:	e00d      	b.n	800d284 <USBD_LL_DataInStage+0xfa>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d268:	68fb      	ldr	r3, [r7, #12]
 800d26a:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
 800d26e:	2b04      	cmp	r3, #4
 800d270:	d004      	beq.n	800d27c <USBD_LL_DataInStage+0xf2>
          (pdev->ep0_state == USBD_EP0_IDLE))
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f8d3 326c 	ldr.w	r3, [r3, #620]	; 0x26c
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d103      	bne.n	800d284 <USBD_LL_DataInStage+0xfa>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 800d27c:	2180      	movs	r1, #128	; 0x80
 800d27e:	68f8      	ldr	r0, [r7, #12]
 800d280:	f004 fabe 	bl	8011800 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 800d284:	68fb      	ldr	r3, [r7, #12]
 800d286:	f893 3278 	ldrb.w	r3, [r3, #632]	; 0x278
 800d28a:	2b01      	cmp	r3, #1
 800d28c:	d11d      	bne.n	800d2ca <USBD_LL_DataInStage+0x140>
    {
      USBD_RunTestMode(pdev);
 800d28e:	68f8      	ldr	r0, [r7, #12]
 800d290:	f7ff fe81 	bl	800cf96 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800d294:	68fb      	ldr	r3, [r7, #12]
 800d296:	2200      	movs	r2, #0
 800d298:	f883 2278 	strb.w	r2, [r3, #632]	; 0x278
 800d29c:	e015      	b.n	800d2ca <USBD_LL_DataInStage+0x140>
    }
  }
  else if((pdev->pClass->DataIn != NULL) &&
 800d29e:	68fb      	ldr	r3, [r7, #12]
 800d2a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d2a4:	695b      	ldr	r3, [r3, #20]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d00d      	beq.n	800d2c6 <USBD_LL_DataInStage+0x13c>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
 800d2aa:	68fb      	ldr	r3, [r7, #12]
 800d2ac:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
  else if((pdev->pClass->DataIn != NULL) &&
 800d2b0:	2b03      	cmp	r3, #3
 800d2b2:	d108      	bne.n	800d2c6 <USBD_LL_DataInStage+0x13c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 800d2b4:	68fb      	ldr	r3, [r7, #12]
 800d2b6:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d2ba:	695b      	ldr	r3, [r3, #20]
 800d2bc:	7afa      	ldrb	r2, [r7, #11]
 800d2be:	4611      	mov	r1, r2
 800d2c0:	68f8      	ldr	r0, [r7, #12]
 800d2c2:	4798      	blx	r3
 800d2c4:	e001      	b.n	800d2ca <USBD_LL_DataInStage+0x140>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 800d2c6:	2302      	movs	r3, #2
 800d2c8:	e000      	b.n	800d2cc <USBD_LL_DataInStage+0x142>
  }

  return USBD_OK;
 800d2ca:	2300      	movs	r3, #0
}
 800d2cc:	4618      	mov	r0, r3
 800d2ce:	3718      	adds	r7, #24
 800d2d0:	46bd      	mov	sp, r7
 800d2d2:	bd80      	pop	{r7, pc}

0800d2d4 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b082      	sub	sp, #8
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2dc:	2340      	movs	r3, #64	; 0x40
 800d2de:	2200      	movs	r2, #0
 800d2e0:	2100      	movs	r1, #0
 800d2e2:	6878      	ldr	r0, [r7, #4]
 800d2e4:	f004 fa47 	bl	8011776 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	2201      	movs	r2, #1
 800d2ec:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	2240      	movs	r2, #64	; 0x40
 800d2f4:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800d2f8:	2340      	movs	r3, #64	; 0x40
 800d2fa:	2200      	movs	r2, #0
 800d2fc:	2180      	movs	r1, #128	; 0x80
 800d2fe:	6878      	ldr	r0, [r7, #4]
 800d300:	f004 fa39 	bl	8011776 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800d304:	687b      	ldr	r3, [r7, #4]
 800d306:	2201      	movs	r2, #1
 800d308:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	2240      	movs	r2, #64	; 0x40
 800d30e:	625a      	str	r2, [r3, #36]	; 0x24
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2201      	movs	r2, #1
 800d314:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  pdev->ep0_state = USBD_EP0_IDLE;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->dev_config= 0U;
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	2200      	movs	r2, #0
 800d324:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	2200      	movs	r2, #0
 800d32a:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c

  if (pdev->pClassData)
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 800d334:	2b00      	cmp	r3, #0
 800d336:	d009      	beq.n	800d34c <USBD_LL_Reset+0x78>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d33e:	685b      	ldr	r3, [r3, #4]
 800d340:	687a      	ldr	r2, [r7, #4]
 800d342:	6852      	ldr	r2, [r2, #4]
 800d344:	b2d2      	uxtb	r2, r2
 800d346:	4611      	mov	r1, r2
 800d348:	6878      	ldr	r0, [r7, #4]
 800d34a:	4798      	blx	r3
  }

  return USBD_OK;
 800d34c:	2300      	movs	r3, #0
}
 800d34e:	4618      	mov	r0, r3
 800d350:	3708      	adds	r7, #8
 800d352:	46bd      	mov	sp, r7
 800d354:	bd80      	pop	{r7, pc}

0800d356 <USBD_LL_SetSpeed>:
*         Handle Reset event
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
 800d356:	b480      	push	{r7}
 800d358:	b083      	sub	sp, #12
 800d35a:	af00      	add	r7, sp, #0
 800d35c:	6078      	str	r0, [r7, #4]
 800d35e:	460b      	mov	r3, r1
 800d360:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	78fa      	ldrb	r2, [r7, #3]
 800d366:	741a      	strb	r2, [r3, #16]
  return USBD_OK;
 800d368:	2300      	movs	r3, #0
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	370c      	adds	r7, #12
 800d36e:	46bd      	mov	sp, r7
 800d370:	bc80      	pop	{r7}
 800d372:	4770      	bx	lr

0800d374 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
 800d374:	b480      	push	{r7}
 800d376:	b083      	sub	sp, #12
 800d378:	af00      	add	r7, sp, #0
 800d37a:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 800d37c:	687b      	ldr	r3, [r7, #4]
 800d37e:	f893 2274 	ldrb.w	r2, [r3, #628]	; 0x274
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	f883 2275 	strb.w	r2, [r3, #629]	; 0x275
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	2204      	movs	r2, #4
 800d38c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d390:	2300      	movs	r3, #0
}
 800d392:	4618      	mov	r0, r3
 800d394:	370c      	adds	r7, #12
 800d396:	46bd      	mov	sp, r7
 800d398:	bc80      	pop	{r7}
 800d39a:	4770      	bx	lr

0800d39c <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
 800d39c:	b480      	push	{r7}
 800d39e:	b083      	sub	sp, #12
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	6078      	str	r0, [r7, #4]
  pdev->dev_state = pdev->dev_old_state;
 800d3a4:	687b      	ldr	r3, [r7, #4]
 800d3a6:	f893 2275 	ldrb.w	r2, [r3, #629]	; 0x275
 800d3aa:	687b      	ldr	r3, [r7, #4]
 800d3ac:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
  return USBD_OK;
 800d3b0:	2300      	movs	r3, #0
}
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	370c      	adds	r7, #12
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bc80      	pop	{r7}
 800d3ba:	4770      	bx	lr

0800d3bc <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b082      	sub	sp, #8
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d3ca:	2b03      	cmp	r3, #3
 800d3cc:	d10b      	bne.n	800d3e6 <USBD_LL_SOF+0x2a>
  {
    if(pdev->pClass->SOF != NULL)
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3d4:	69db      	ldr	r3, [r3, #28]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	d005      	beq.n	800d3e6 <USBD_LL_SOF+0x2a>
    {
      pdev->pClass->SOF(pdev);
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d3e0:	69db      	ldr	r3, [r3, #28]
 800d3e2:	6878      	ldr	r0, [r7, #4]
 800d3e4:	4798      	blx	r3
    }
  }
  return USBD_OK;
 800d3e6:	2300      	movs	r3, #0
}
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	3708      	adds	r7, #8
 800d3ec:	46bd      	mov	sp, r7
 800d3ee:	bd80      	pop	{r7, pc}

0800d3f0 <USBD_StdDevReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d3f0:	b580      	push	{r7, lr}
 800d3f2:	b084      	sub	sp, #16
 800d3f4:	af00      	add	r7, sp, #0
 800d3f6:	6078      	str	r0, [r7, #4]
 800d3f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d3fe:	683b      	ldr	r3, [r7, #0]
 800d400:	781b      	ldrb	r3, [r3, #0]
 800d402:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d406:	2b40      	cmp	r3, #64	; 0x40
 800d408:	d005      	beq.n	800d416 <USBD_StdDevReq+0x26>
 800d40a:	2b40      	cmp	r3, #64	; 0x40
 800d40c:	d84f      	bhi.n	800d4ae <USBD_StdDevReq+0xbe>
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d009      	beq.n	800d426 <USBD_StdDevReq+0x36>
 800d412:	2b20      	cmp	r3, #32
 800d414:	d14b      	bne.n	800d4ae <USBD_StdDevReq+0xbe>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup(pdev, req);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d41c:	689b      	ldr	r3, [r3, #8]
 800d41e:	6839      	ldr	r1, [r7, #0]
 800d420:	6878      	ldr	r0, [r7, #4]
 800d422:	4798      	blx	r3
    break;
 800d424:	e048      	b.n	800d4b8 <USBD_StdDevReq+0xc8>

  case USB_REQ_TYPE_STANDARD:

    switch (req->bRequest)
 800d426:	683b      	ldr	r3, [r7, #0]
 800d428:	785b      	ldrb	r3, [r3, #1]
 800d42a:	2b09      	cmp	r3, #9
 800d42c:	d839      	bhi.n	800d4a2 <USBD_StdDevReq+0xb2>
 800d42e:	a201      	add	r2, pc, #4	; (adr r2, 800d434 <USBD_StdDevReq+0x44>)
 800d430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d434:	0800d485 	.word	0x0800d485
 800d438:	0800d499 	.word	0x0800d499
 800d43c:	0800d4a3 	.word	0x0800d4a3
 800d440:	0800d48f 	.word	0x0800d48f
 800d444:	0800d4a3 	.word	0x0800d4a3
 800d448:	0800d467 	.word	0x0800d467
 800d44c:	0800d45d 	.word	0x0800d45d
 800d450:	0800d4a3 	.word	0x0800d4a3
 800d454:	0800d47b 	.word	0x0800d47b
 800d458:	0800d471 	.word	0x0800d471
    {
    case USB_REQ_GET_DESCRIPTOR:

      USBD_GetDescriptor (pdev, req);
 800d45c:	6839      	ldr	r1, [r7, #0]
 800d45e:	6878      	ldr	r0, [r7, #4]
 800d460:	f000 f9da 	bl	800d818 <USBD_GetDescriptor>
      break;
 800d464:	e022      	b.n	800d4ac <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_ADDRESS:
      USBD_SetAddress (pdev, req);
 800d466:	6839      	ldr	r1, [r7, #0]
 800d468:	6878      	ldr	r0, [r7, #4]
 800d46a:	f000 facf 	bl	800da0c <USBD_SetAddress>
      break;
 800d46e:	e01d      	b.n	800d4ac <USBD_StdDevReq+0xbc>

    case USB_REQ_SET_CONFIGURATION:
      USBD_SetConfig (pdev, req);
 800d470:	6839      	ldr	r1, [r7, #0]
 800d472:	6878      	ldr	r0, [r7, #4]
 800d474:	f000 fb0e 	bl	800da94 <USBD_SetConfig>
      break;
 800d478:	e018      	b.n	800d4ac <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_CONFIGURATION:
      USBD_GetConfig (pdev, req);
 800d47a:	6839      	ldr	r1, [r7, #0]
 800d47c:	6878      	ldr	r0, [r7, #4]
 800d47e:	f000 fb97 	bl	800dbb0 <USBD_GetConfig>
      break;
 800d482:	e013      	b.n	800d4ac <USBD_StdDevReq+0xbc>

    case USB_REQ_GET_STATUS:
      USBD_GetStatus (pdev, req);
 800d484:	6839      	ldr	r1, [r7, #0]
 800d486:	6878      	ldr	r0, [r7, #4]
 800d488:	f000 fbc7 	bl	800dc1a <USBD_GetStatus>
      break;
 800d48c:	e00e      	b.n	800d4ac <USBD_StdDevReq+0xbc>


    case USB_REQ_SET_FEATURE:
      USBD_SetFeature (pdev, req);
 800d48e:	6839      	ldr	r1, [r7, #0]
 800d490:	6878      	ldr	r0, [r7, #4]
 800d492:	f000 fbf5 	bl	800dc80 <USBD_SetFeature>
      break;
 800d496:	e009      	b.n	800d4ac <USBD_StdDevReq+0xbc>

    case USB_REQ_CLEAR_FEATURE:
      USBD_ClrFeature (pdev, req);
 800d498:	6839      	ldr	r1, [r7, #0]
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 fc04 	bl	800dca8 <USBD_ClrFeature>
      break;
 800d4a0:	e004      	b.n	800d4ac <USBD_StdDevReq+0xbc>

    default:
      USBD_CtlError(pdev, req);
 800d4a2:	6839      	ldr	r1, [r7, #0]
 800d4a4:	6878      	ldr	r0, [r7, #4]
 800d4a6:	f000 fc5c 	bl	800dd62 <USBD_CtlError>
      break;
 800d4aa:	bf00      	nop
    }
    break;
 800d4ac:	e004      	b.n	800d4b8 <USBD_StdDevReq+0xc8>

  default:
    USBD_CtlError(pdev, req);
 800d4ae:	6839      	ldr	r1, [r7, #0]
 800d4b0:	6878      	ldr	r0, [r7, #4]
 800d4b2:	f000 fc56 	bl	800dd62 <USBD_CtlError>
    break;
 800d4b6:	bf00      	nop
  }

  return ret;
 800d4b8:	7bfb      	ldrb	r3, [r7, #15]
}
 800d4ba:	4618      	mov	r0, r3
 800d4bc:	3710      	adds	r7, #16
 800d4be:	46bd      	mov	sp, r7
 800d4c0:	bd80      	pop	{r7, pc}
 800d4c2:	bf00      	nop

0800d4c4 <USBD_StdItfReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d4c4:	b580      	push	{r7, lr}
 800d4c6:	b084      	sub	sp, #16
 800d4c8:	af00      	add	r7, sp, #0
 800d4ca:	6078      	str	r0, [r7, #4]
 800d4cc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	781b      	ldrb	r3, [r3, #0]
 800d4d6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d4da:	2b40      	cmp	r3, #64	; 0x40
 800d4dc:	d005      	beq.n	800d4ea <USBD_StdItfReq+0x26>
 800d4de:	2b40      	cmp	r3, #64	; 0x40
 800d4e0:	d82e      	bhi.n	800d540 <USBD_StdItfReq+0x7c>
 800d4e2:	2b00      	cmp	r3, #0
 800d4e4:	d001      	beq.n	800d4ea <USBD_StdItfReq+0x26>
 800d4e6:	2b20      	cmp	r3, #32
 800d4e8:	d12a      	bne.n	800d540 <USBD_StdItfReq+0x7c>
  {
  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
  case USB_REQ_TYPE_STANDARD:
    switch (pdev->dev_state)
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d4f0:	3b01      	subs	r3, #1
 800d4f2:	2b02      	cmp	r3, #2
 800d4f4:	d81d      	bhi.n	800d532 <USBD_StdItfReq+0x6e>
    {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:

      if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	889b      	ldrh	r3, [r3, #4]
 800d4fa:	b2db      	uxtb	r3, r3
 800d4fc:	2b01      	cmp	r3, #1
 800d4fe:	d813      	bhi.n	800d528 <USBD_StdItfReq+0x64>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d506:	689b      	ldr	r3, [r3, #8]
 800d508:	6839      	ldr	r1, [r7, #0]
 800d50a:	6878      	ldr	r0, [r7, #4]
 800d50c:	4798      	blx	r3
 800d50e:	4603      	mov	r3, r0
 800d510:	73fb      	strb	r3, [r7, #15]

        if ((req->wLength == 0U) && (ret == USBD_OK))
 800d512:	683b      	ldr	r3, [r7, #0]
 800d514:	88db      	ldrh	r3, [r3, #6]
 800d516:	2b00      	cmp	r3, #0
 800d518:	d110      	bne.n	800d53c <USBD_StdItfReq+0x78>
 800d51a:	7bfb      	ldrb	r3, [r7, #15]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	d10d      	bne.n	800d53c <USBD_StdItfReq+0x78>
        {
          USBD_CtlSendStatus(pdev);
 800d520:	6878      	ldr	r0, [r7, #4]
 800d522:	f000 fce6 	bl	800def2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlError(pdev, req);
      }
      break;
 800d526:	e009      	b.n	800d53c <USBD_StdItfReq+0x78>
        USBD_CtlError(pdev, req);
 800d528:	6839      	ldr	r1, [r7, #0]
 800d52a:	6878      	ldr	r0, [r7, #4]
 800d52c:	f000 fc19 	bl	800dd62 <USBD_CtlError>
      break;
 800d530:	e004      	b.n	800d53c <USBD_StdItfReq+0x78>

    default:
      USBD_CtlError(pdev, req);
 800d532:	6839      	ldr	r1, [r7, #0]
 800d534:	6878      	ldr	r0, [r7, #4]
 800d536:	f000 fc14 	bl	800dd62 <USBD_CtlError>
      break;
 800d53a:	e000      	b.n	800d53e <USBD_StdItfReq+0x7a>
      break;
 800d53c:	bf00      	nop
    }
    break;
 800d53e:	e004      	b.n	800d54a <USBD_StdItfReq+0x86>

  default:
    USBD_CtlError(pdev, req);
 800d540:	6839      	ldr	r1, [r7, #0]
 800d542:	6878      	ldr	r0, [r7, #4]
 800d544:	f000 fc0d 	bl	800dd62 <USBD_CtlError>
    break;
 800d548:	bf00      	nop
  }

  return USBD_OK;
 800d54a:	2300      	movs	r3, #0
}
 800d54c:	4618      	mov	r0, r3
 800d54e:	3710      	adds	r7, #16
 800d550:	46bd      	mov	sp, r7
 800d552:	bd80      	pop	{r7, pc}

0800d554 <USBD_StdEPReq>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq (USBD_HandleTypeDef *pdev , USBD_SetupReqTypedef  *req)
{
 800d554:	b580      	push	{r7, lr}
 800d556:	b084      	sub	sp, #16
 800d558:	af00      	add	r7, sp, #0
 800d55a:	6078      	str	r0, [r7, #4]
 800d55c:	6039      	str	r1, [r7, #0]

  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 800d55e:	2300      	movs	r3, #0
 800d560:	73fb      	strb	r3, [r7, #15]
  USBD_EndpointTypeDef   *pep;
  ep_addr  = LOBYTE(req->wIndex);
 800d562:	683b      	ldr	r3, [r7, #0]
 800d564:	889b      	ldrh	r3, [r3, #4]
 800d566:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800d568:	683b      	ldr	r3, [r7, #0]
 800d56a:	781b      	ldrb	r3, [r3, #0]
 800d56c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d570:	2b40      	cmp	r3, #64	; 0x40
 800d572:	d007      	beq.n	800d584 <USBD_StdEPReq+0x30>
 800d574:	2b40      	cmp	r3, #64	; 0x40
 800d576:	f200 8144 	bhi.w	800d802 <USBD_StdEPReq+0x2ae>
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d00a      	beq.n	800d594 <USBD_StdEPReq+0x40>
 800d57e:	2b20      	cmp	r3, #32
 800d580:	f040 813f 	bne.w	800d802 <USBD_StdEPReq+0x2ae>
  {

  case USB_REQ_TYPE_CLASS:
  case USB_REQ_TYPE_VENDOR:
    pdev->pClass->Setup (pdev, req);
 800d584:	687b      	ldr	r3, [r7, #4]
 800d586:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	6839      	ldr	r1, [r7, #0]
 800d58e:	6878      	ldr	r0, [r7, #4]
 800d590:	4798      	blx	r3
    break;
 800d592:	e13b      	b.n	800d80c <USBD_StdEPReq+0x2b8>

  case USB_REQ_TYPE_STANDARD:
    /* Check if it is a class request */
    if ((req->bmRequest & 0x60U) == 0x20U)
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	781b      	ldrb	r3, [r3, #0]
 800d598:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800d59c:	2b20      	cmp	r3, #32
 800d59e:	d10a      	bne.n	800d5b6 <USBD_StdEPReq+0x62>
    {
      ret = (USBD_StatusTypeDef)pdev->pClass->Setup (pdev, req);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d5a6:	689b      	ldr	r3, [r3, #8]
 800d5a8:	6839      	ldr	r1, [r7, #0]
 800d5aa:	6878      	ldr	r0, [r7, #4]
 800d5ac:	4798      	blx	r3
 800d5ae:	4603      	mov	r3, r0
 800d5b0:	73fb      	strb	r3, [r7, #15]

      return ret;
 800d5b2:	7bfb      	ldrb	r3, [r7, #15]
 800d5b4:	e12b      	b.n	800d80e <USBD_StdEPReq+0x2ba>
    }

    switch (req->bRequest)
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	785b      	ldrb	r3, [r3, #1]
 800d5ba:	2b03      	cmp	r3, #3
 800d5bc:	d007      	beq.n	800d5ce <USBD_StdEPReq+0x7a>
 800d5be:	2b03      	cmp	r3, #3
 800d5c0:	f300 8119 	bgt.w	800d7f6 <USBD_StdEPReq+0x2a2>
 800d5c4:	2b00      	cmp	r3, #0
 800d5c6:	d072      	beq.n	800d6ae <USBD_StdEPReq+0x15a>
 800d5c8:	2b01      	cmp	r3, #1
 800d5ca:	d03a      	beq.n	800d642 <USBD_StdEPReq+0xee>
 800d5cc:	e113      	b.n	800d7f6 <USBD_StdEPReq+0x2a2>
    {

    case USB_REQ_SET_FEATURE :

      switch (pdev->dev_state)
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d5d4:	2b02      	cmp	r3, #2
 800d5d6:	d002      	beq.n	800d5de <USBD_StdEPReq+0x8a>
 800d5d8:	2b03      	cmp	r3, #3
 800d5da:	d015      	beq.n	800d608 <USBD_StdEPReq+0xb4>
 800d5dc:	e02b      	b.n	800d636 <USBD_StdEPReq+0xe2>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d5de:	7bbb      	ldrb	r3, [r7, #14]
 800d5e0:	2b00      	cmp	r3, #0
 800d5e2:	d00c      	beq.n	800d5fe <USBD_StdEPReq+0xaa>
 800d5e4:	7bbb      	ldrb	r3, [r7, #14]
 800d5e6:	2b80      	cmp	r3, #128	; 0x80
 800d5e8:	d009      	beq.n	800d5fe <USBD_StdEPReq+0xaa>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d5ea:	7bbb      	ldrb	r3, [r7, #14]
 800d5ec:	4619      	mov	r1, r3
 800d5ee:	6878      	ldr	r0, [r7, #4]
 800d5f0:	f004 f906 	bl	8011800 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d5f4:	2180      	movs	r1, #128	; 0x80
 800d5f6:	6878      	ldr	r0, [r7, #4]
 800d5f8:	f004 f902 	bl	8011800 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d5fc:	e020      	b.n	800d640 <USBD_StdEPReq+0xec>
          USBD_CtlError(pdev, req);
 800d5fe:	6839      	ldr	r1, [r7, #0]
 800d600:	6878      	ldr	r0, [r7, #4]
 800d602:	f000 fbae 	bl	800dd62 <USBD_CtlError>
        break;
 800d606:	e01b      	b.n	800d640 <USBD_StdEPReq+0xec>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d608:	683b      	ldr	r3, [r7, #0]
 800d60a:	885b      	ldrh	r3, [r3, #2]
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d10e      	bne.n	800d62e <USBD_StdEPReq+0xda>
        {
          if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 800d610:	7bbb      	ldrb	r3, [r7, #14]
 800d612:	2b00      	cmp	r3, #0
 800d614:	d00b      	beq.n	800d62e <USBD_StdEPReq+0xda>
 800d616:	7bbb      	ldrb	r3, [r7, #14]
 800d618:	2b80      	cmp	r3, #128	; 0x80
 800d61a:	d008      	beq.n	800d62e <USBD_StdEPReq+0xda>
 800d61c:	683b      	ldr	r3, [r7, #0]
 800d61e:	88db      	ldrh	r3, [r3, #6]
 800d620:	2b00      	cmp	r3, #0
 800d622:	d104      	bne.n	800d62e <USBD_StdEPReq+0xda>
          {
            USBD_LL_StallEP(pdev, ep_addr);
 800d624:	7bbb      	ldrb	r3, [r7, #14]
 800d626:	4619      	mov	r1, r3
 800d628:	6878      	ldr	r0, [r7, #4]
 800d62a:	f004 f8e9 	bl	8011800 <USBD_LL_StallEP>
          }
        }
        USBD_CtlSendStatus(pdev);
 800d62e:	6878      	ldr	r0, [r7, #4]
 800d630:	f000 fc5f 	bl	800def2 <USBD_CtlSendStatus>

        break;
 800d634:	e004      	b.n	800d640 <USBD_StdEPReq+0xec>

      default:
        USBD_CtlError(pdev, req);
 800d636:	6839      	ldr	r1, [r7, #0]
 800d638:	6878      	ldr	r0, [r7, #4]
 800d63a:	f000 fb92 	bl	800dd62 <USBD_CtlError>
        break;
 800d63e:	bf00      	nop
      }
      break;
 800d640:	e0de      	b.n	800d800 <USBD_StdEPReq+0x2ac>

    case USB_REQ_CLEAR_FEATURE :

      switch (pdev->dev_state)
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d648:	2b02      	cmp	r3, #2
 800d64a:	d002      	beq.n	800d652 <USBD_StdEPReq+0xfe>
 800d64c:	2b03      	cmp	r3, #3
 800d64e:	d015      	beq.n	800d67c <USBD_StdEPReq+0x128>
 800d650:	e026      	b.n	800d6a0 <USBD_StdEPReq+0x14c>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d652:	7bbb      	ldrb	r3, [r7, #14]
 800d654:	2b00      	cmp	r3, #0
 800d656:	d00c      	beq.n	800d672 <USBD_StdEPReq+0x11e>
 800d658:	7bbb      	ldrb	r3, [r7, #14]
 800d65a:	2b80      	cmp	r3, #128	; 0x80
 800d65c:	d009      	beq.n	800d672 <USBD_StdEPReq+0x11e>
        {
          USBD_LL_StallEP(pdev, ep_addr);
 800d65e:	7bbb      	ldrb	r3, [r7, #14]
 800d660:	4619      	mov	r1, r3
 800d662:	6878      	ldr	r0, [r7, #4]
 800d664:	f004 f8cc 	bl	8011800 <USBD_LL_StallEP>
          USBD_LL_StallEP(pdev, 0x80U);
 800d668:	2180      	movs	r1, #128	; 0x80
 800d66a:	6878      	ldr	r0, [r7, #4]
 800d66c:	f004 f8c8 	bl	8011800 <USBD_LL_StallEP>
        }
        else
        {
          USBD_CtlError(pdev, req);
        }
        break;
 800d670:	e01c      	b.n	800d6ac <USBD_StdEPReq+0x158>
          USBD_CtlError(pdev, req);
 800d672:	6839      	ldr	r1, [r7, #0]
 800d674:	6878      	ldr	r0, [r7, #4]
 800d676:	f000 fb74 	bl	800dd62 <USBD_CtlError>
        break;
 800d67a:	e017      	b.n	800d6ac <USBD_StdEPReq+0x158>

      case USBD_STATE_CONFIGURED:
        if (req->wValue == USB_FEATURE_EP_HALT)
 800d67c:	683b      	ldr	r3, [r7, #0]
 800d67e:	885b      	ldrh	r3, [r3, #2]
 800d680:	2b00      	cmp	r3, #0
 800d682:	d112      	bne.n	800d6aa <USBD_StdEPReq+0x156>
        {
          if ((ep_addr & 0x7FU) != 0x00U)
 800d684:	7bbb      	ldrb	r3, [r7, #14]
 800d686:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d004      	beq.n	800d698 <USBD_StdEPReq+0x144>
          {
            USBD_LL_ClearStallEP(pdev, ep_addr);
 800d68e:	7bbb      	ldrb	r3, [r7, #14]
 800d690:	4619      	mov	r1, r3
 800d692:	6878      	ldr	r0, [r7, #4]
 800d694:	f004 f8d3 	bl	801183e <USBD_LL_ClearStallEP>
          }
          USBD_CtlSendStatus(pdev);
 800d698:	6878      	ldr	r0, [r7, #4]
 800d69a:	f000 fc2a 	bl	800def2 <USBD_CtlSendStatus>
        }
        break;
 800d69e:	e004      	b.n	800d6aa <USBD_StdEPReq+0x156>

      default:
        USBD_CtlError(pdev, req);
 800d6a0:	6839      	ldr	r1, [r7, #0]
 800d6a2:	6878      	ldr	r0, [r7, #4]
 800d6a4:	f000 fb5d 	bl	800dd62 <USBD_CtlError>
        break;
 800d6a8:	e000      	b.n	800d6ac <USBD_StdEPReq+0x158>
        break;
 800d6aa:	bf00      	nop
      }
      break;
 800d6ac:	e0a8      	b.n	800d800 <USBD_StdEPReq+0x2ac>

    case USB_REQ_GET_STATUS:
      switch (pdev->dev_state)
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800d6b4:	2b02      	cmp	r3, #2
 800d6b6:	d002      	beq.n	800d6be <USBD_StdEPReq+0x16a>
 800d6b8:	2b03      	cmp	r3, #3
 800d6ba:	d031      	beq.n	800d720 <USBD_StdEPReq+0x1cc>
 800d6bc:	e095      	b.n	800d7ea <USBD_StdEPReq+0x296>
      {
      case USBD_STATE_ADDRESSED:
        if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 800d6be:	7bbb      	ldrb	r3, [r7, #14]
 800d6c0:	2b00      	cmp	r3, #0
 800d6c2:	d007      	beq.n	800d6d4 <USBD_StdEPReq+0x180>
 800d6c4:	7bbb      	ldrb	r3, [r7, #14]
 800d6c6:	2b80      	cmp	r3, #128	; 0x80
 800d6c8:	d004      	beq.n	800d6d4 <USBD_StdEPReq+0x180>
        {
          USBD_CtlError(pdev, req);
 800d6ca:	6839      	ldr	r1, [r7, #0]
 800d6cc:	6878      	ldr	r0, [r7, #4]
 800d6ce:	f000 fb48 	bl	800dd62 <USBD_CtlError>
          break;
 800d6d2:	e08f      	b.n	800d7f4 <USBD_StdEPReq+0x2a0>
        }
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d6d4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	da0b      	bge.n	800d6f4 <USBD_StdEPReq+0x1a0>
 800d6dc:	7bbb      	ldrb	r3, [r7, #14]
 800d6de:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d6e2:	4613      	mov	r3, r2
 800d6e4:	009b      	lsls	r3, r3, #2
 800d6e6:	4413      	add	r3, r2
 800d6e8:	009b      	lsls	r3, r3, #2
 800d6ea:	3310      	adds	r3, #16
 800d6ec:	687a      	ldr	r2, [r7, #4]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	3304      	adds	r3, #4
 800d6f2:	e00a      	b.n	800d70a <USBD_StdEPReq+0x1b6>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d6f4:	7bbb      	ldrb	r3, [r7, #14]
 800d6f6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d6fa:	4613      	mov	r3, r2
 800d6fc:	009b      	lsls	r3, r3, #2
 800d6fe:	4413      	add	r3, r2
 800d700:	009b      	lsls	r3, r3, #2
 800d702:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d706:	687a      	ldr	r2, [r7, #4]
 800d708:	4413      	add	r3, r2
 800d70a:	60bb      	str	r3, [r7, #8]

          pep->status = 0x0000U;
 800d70c:	68bb      	ldr	r3, [r7, #8]
 800d70e:	2200      	movs	r2, #0
 800d710:	601a      	str	r2, [r3, #0]

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2202      	movs	r2, #2
 800d716:	4619      	mov	r1, r3
 800d718:	6878      	ldr	r0, [r7, #4]
 800d71a:	f000 fb8c 	bl	800de36 <USBD_CtlSendData>
          break;
 800d71e:	e069      	b.n	800d7f4 <USBD_StdEPReq+0x2a0>

      case USBD_STATE_CONFIGURED:
        if((ep_addr & 0x80U) == 0x80U)
 800d720:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d724:	2b00      	cmp	r3, #0
 800d726:	da11      	bge.n	800d74c <USBD_StdEPReq+0x1f8>
        {
          if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 800d728:	7bbb      	ldrb	r3, [r7, #14]
 800d72a:	f003 020f 	and.w	r2, r3, #15
 800d72e:	6879      	ldr	r1, [r7, #4]
 800d730:	4613      	mov	r3, r2
 800d732:	009b      	lsls	r3, r3, #2
 800d734:	4413      	add	r3, r2
 800d736:	009b      	lsls	r3, r3, #2
 800d738:	440b      	add	r3, r1
 800d73a:	3318      	adds	r3, #24
 800d73c:	681b      	ldr	r3, [r3, #0]
 800d73e:	2b00      	cmp	r3, #0
 800d740:	d117      	bne.n	800d772 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d742:	6839      	ldr	r1, [r7, #0]
 800d744:	6878      	ldr	r0, [r7, #4]
 800d746:	f000 fb0c 	bl	800dd62 <USBD_CtlError>
            break;
 800d74a:	e053      	b.n	800d7f4 <USBD_StdEPReq+0x2a0>
          }
        }
        else
        {
          if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800d74c:	7bbb      	ldrb	r3, [r7, #14]
 800d74e:	f003 020f 	and.w	r2, r3, #15
 800d752:	6879      	ldr	r1, [r7, #4]
 800d754:	4613      	mov	r3, r2
 800d756:	009b      	lsls	r3, r3, #2
 800d758:	4413      	add	r3, r2
 800d75a:	009b      	lsls	r3, r3, #2
 800d75c:	440b      	add	r3, r1
 800d75e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800d762:	681b      	ldr	r3, [r3, #0]
 800d764:	2b00      	cmp	r3, #0
 800d766:	d104      	bne.n	800d772 <USBD_StdEPReq+0x21e>
          {
            USBD_CtlError(pdev, req);
 800d768:	6839      	ldr	r1, [r7, #0]
 800d76a:	6878      	ldr	r0, [r7, #4]
 800d76c:	f000 faf9 	bl	800dd62 <USBD_CtlError>
            break;
 800d770:	e040      	b.n	800d7f4 <USBD_StdEPReq+0x2a0>
          }
        }

        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d772:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800d776:	2b00      	cmp	r3, #0
 800d778:	da0b      	bge.n	800d792 <USBD_StdEPReq+0x23e>
 800d77a:	7bbb      	ldrb	r3, [r7, #14]
 800d77c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800d780:	4613      	mov	r3, r2
 800d782:	009b      	lsls	r3, r3, #2
 800d784:	4413      	add	r3, r2
 800d786:	009b      	lsls	r3, r3, #2
 800d788:	3310      	adds	r3, #16
 800d78a:	687a      	ldr	r2, [r7, #4]
 800d78c:	4413      	add	r3, r2
 800d78e:	3304      	adds	r3, #4
 800d790:	e00a      	b.n	800d7a8 <USBD_StdEPReq+0x254>
          &pdev->ep_out[ep_addr & 0x7FU];
 800d792:	7bbb      	ldrb	r3, [r7, #14]
 800d794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
        pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU]:\
 800d798:	4613      	mov	r3, r2
 800d79a:	009b      	lsls	r3, r3, #2
 800d79c:	4413      	add	r3, r2
 800d79e:	009b      	lsls	r3, r3, #2
 800d7a0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 800d7a4:	687a      	ldr	r2, [r7, #4]
 800d7a6:	4413      	add	r3, r2
 800d7a8:	60bb      	str	r3, [r7, #8]

          if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 800d7aa:	7bbb      	ldrb	r3, [r7, #14]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	d002      	beq.n	800d7b6 <USBD_StdEPReq+0x262>
 800d7b0:	7bbb      	ldrb	r3, [r7, #14]
 800d7b2:	2b80      	cmp	r3, #128	; 0x80
 800d7b4:	d103      	bne.n	800d7be <USBD_StdEPReq+0x26a>
          {
            pep->status = 0x0000U;
 800d7b6:	68bb      	ldr	r3, [r7, #8]
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	601a      	str	r2, [r3, #0]
 800d7bc:	e00e      	b.n	800d7dc <USBD_StdEPReq+0x288>
          }
          else if(USBD_LL_IsStallEP(pdev, ep_addr))
 800d7be:	7bbb      	ldrb	r3, [r7, #14]
 800d7c0:	4619      	mov	r1, r3
 800d7c2:	6878      	ldr	r0, [r7, #4]
 800d7c4:	f004 f85a 	bl	801187c <USBD_LL_IsStallEP>
 800d7c8:	4603      	mov	r3, r0
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <USBD_StdEPReq+0x282>
          {
            pep->status = 0x0001U;
 800d7ce:	68bb      	ldr	r3, [r7, #8]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	601a      	str	r2, [r3, #0]
 800d7d4:	e002      	b.n	800d7dc <USBD_StdEPReq+0x288>
          }
          else
          {
            pep->status = 0x0000U;
 800d7d6:	68bb      	ldr	r3, [r7, #8]
 800d7d8:	2200      	movs	r2, #0
 800d7da:	601a      	str	r2, [r3, #0]
          }

          USBD_CtlSendData (pdev, (uint8_t *)(void *)&pep->status, 2U);
 800d7dc:	68bb      	ldr	r3, [r7, #8]
 800d7de:	2202      	movs	r2, #2
 800d7e0:	4619      	mov	r1, r3
 800d7e2:	6878      	ldr	r0, [r7, #4]
 800d7e4:	f000 fb27 	bl	800de36 <USBD_CtlSendData>
          break;
 800d7e8:	e004      	b.n	800d7f4 <USBD_StdEPReq+0x2a0>

      default:
        USBD_CtlError(pdev, req);
 800d7ea:	6839      	ldr	r1, [r7, #0]
 800d7ec:	6878      	ldr	r0, [r7, #4]
 800d7ee:	f000 fab8 	bl	800dd62 <USBD_CtlError>
        break;
 800d7f2:	bf00      	nop
      }
      break;
 800d7f4:	e004      	b.n	800d800 <USBD_StdEPReq+0x2ac>

    default:
      USBD_CtlError(pdev, req);
 800d7f6:	6839      	ldr	r1, [r7, #0]
 800d7f8:	6878      	ldr	r0, [r7, #4]
 800d7fa:	f000 fab2 	bl	800dd62 <USBD_CtlError>
      break;
 800d7fe:	bf00      	nop
    }
    break;
 800d800:	e004      	b.n	800d80c <USBD_StdEPReq+0x2b8>

  default:
    USBD_CtlError(pdev, req);
 800d802:	6839      	ldr	r1, [r7, #0]
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f000 faac 	bl	800dd62 <USBD_CtlError>
    break;
 800d80a:	bf00      	nop
  }

  return ret;
 800d80c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d80e:	4618      	mov	r0, r3
 800d810:	3710      	adds	r7, #16
 800d812:	46bd      	mov	sp, r7
 800d814:	bd80      	pop	{r7, pc}
	...

0800d818 <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev ,
                               USBD_SetupReqTypedef *req)
{
 800d818:	b580      	push	{r7, lr}
 800d81a:	b084      	sub	sp, #16
 800d81c:	af00      	add	r7, sp, #0
 800d81e:	6078      	str	r0, [r7, #4]
 800d820:	6039      	str	r1, [r7, #0]
  uint16_t len;
  uint8_t *pbuf;


  switch (req->wValue >> 8)
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	885b      	ldrh	r3, [r3, #2]
 800d826:	0a1b      	lsrs	r3, r3, #8
 800d828:	b29b      	uxth	r3, r3
 800d82a:	3b01      	subs	r3, #1
 800d82c:	2b06      	cmp	r3, #6
 800d82e:	f200 80c9 	bhi.w	800d9c4 <USBD_GetDescriptor+0x1ac>
 800d832:	a201      	add	r2, pc, #4	; (adr r2, 800d838 <USBD_GetDescriptor+0x20>)
 800d834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d838:	0800d855 	.word	0x0800d855
 800d83c:	0800d86d 	.word	0x0800d86d
 800d840:	0800d8ad 	.word	0x0800d8ad
 800d844:	0800d9c5 	.word	0x0800d9c5
 800d848:	0800d9c5 	.word	0x0800d9c5
 800d84c:	0800d971 	.word	0x0800d971
 800d850:	0800d997 	.word	0x0800d997
  case USB_DESC_TYPE_BOS:
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
    break;
#endif
  case USB_DESC_TYPE_DEVICE:
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800d854:	687b      	ldr	r3, [r7, #4]
 800d856:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	687a      	ldr	r2, [r7, #4]
 800d85e:	7c12      	ldrb	r2, [r2, #16]
 800d860:	f107 010a 	add.w	r1, r7, #10
 800d864:	4610      	mov	r0, r2
 800d866:	4798      	blx	r3
 800d868:	60f8      	str	r0, [r7, #12]
    break;
 800d86a:	e0b0      	b.n	800d9ce <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH )
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	7c1b      	ldrb	r3, [r3, #16]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d10d      	bne.n	800d890 <USBD_GetDescriptor+0x78>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 800d874:	687b      	ldr	r3, [r7, #4]
 800d876:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d87a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d87c:	f107 020a 	add.w	r2, r7, #10
 800d880:	4610      	mov	r0, r2
 800d882:	4798      	blx	r3
 800d884:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	3301      	adds	r3, #1
 800d88a:	2202      	movs	r2, #2
 800d88c:	701a      	strb	r2, [r3, #0]
    else
    {
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
    }
    break;
 800d88e:	e09e      	b.n	800d9ce <USBD_GetDescriptor+0x1b6>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d898:	f107 020a 	add.w	r2, r7, #10
 800d89c:	4610      	mov	r0, r2
 800d89e:	4798      	blx	r3
 800d8a0:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800d8a2:	68fb      	ldr	r3, [r7, #12]
 800d8a4:	3301      	adds	r3, #1
 800d8a6:	2202      	movs	r2, #2
 800d8a8:	701a      	strb	r2, [r3, #0]
    break;
 800d8aa:	e090      	b.n	800d9ce <USBD_GetDescriptor+0x1b6>

  case USB_DESC_TYPE_STRING:
    switch ((uint8_t)(req->wValue))
 800d8ac:	683b      	ldr	r3, [r7, #0]
 800d8ae:	885b      	ldrh	r3, [r3, #2]
 800d8b0:	b2db      	uxtb	r3, r3
 800d8b2:	2b05      	cmp	r3, #5
 800d8b4:	d856      	bhi.n	800d964 <USBD_GetDescriptor+0x14c>
 800d8b6:	a201      	add	r2, pc, #4	; (adr r2, 800d8bc <USBD_GetDescriptor+0xa4>)
 800d8b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d8bc:	0800d8d5 	.word	0x0800d8d5
 800d8c0:	0800d8ed 	.word	0x0800d8ed
 800d8c4:	0800d905 	.word	0x0800d905
 800d8c8:	0800d91d 	.word	0x0800d91d
 800d8cc:	0800d935 	.word	0x0800d935
 800d8d0:	0800d94d 	.word	0x0800d94d
    {
    case USBD_IDX_LANGID_STR:
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d8da:	685b      	ldr	r3, [r3, #4]
 800d8dc:	687a      	ldr	r2, [r7, #4]
 800d8de:	7c12      	ldrb	r2, [r2, #16]
 800d8e0:	f107 010a 	add.w	r1, r7, #10
 800d8e4:	4610      	mov	r0, r2
 800d8e6:	4798      	blx	r3
 800d8e8:	60f8      	str	r0, [r7, #12]
      break;
 800d8ea:	e040      	b.n	800d96e <USBD_GetDescriptor+0x156>

    case USBD_IDX_MFC_STR:
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d8f2:	689b      	ldr	r3, [r3, #8]
 800d8f4:	687a      	ldr	r2, [r7, #4]
 800d8f6:	7c12      	ldrb	r2, [r2, #16]
 800d8f8:	f107 010a 	add.w	r1, r7, #10
 800d8fc:	4610      	mov	r0, r2
 800d8fe:	4798      	blx	r3
 800d900:	60f8      	str	r0, [r7, #12]
      break;
 800d902:	e034      	b.n	800d96e <USBD_GetDescriptor+0x156>

    case USBD_IDX_PRODUCT_STR:
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d90a:	68db      	ldr	r3, [r3, #12]
 800d90c:	687a      	ldr	r2, [r7, #4]
 800d90e:	7c12      	ldrb	r2, [r2, #16]
 800d910:	f107 010a 	add.w	r1, r7, #10
 800d914:	4610      	mov	r0, r2
 800d916:	4798      	blx	r3
 800d918:	60f8      	str	r0, [r7, #12]
      break;
 800d91a:	e028      	b.n	800d96e <USBD_GetDescriptor+0x156>

    case USBD_IDX_SERIAL_STR:
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800d91c:	687b      	ldr	r3, [r7, #4]
 800d91e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d922:	691b      	ldr	r3, [r3, #16]
 800d924:	687a      	ldr	r2, [r7, #4]
 800d926:	7c12      	ldrb	r2, [r2, #16]
 800d928:	f107 010a 	add.w	r1, r7, #10
 800d92c:	4610      	mov	r0, r2
 800d92e:	4798      	blx	r3
 800d930:	60f8      	str	r0, [r7, #12]
      break;
 800d932:	e01c      	b.n	800d96e <USBD_GetDescriptor+0x156>

    case USBD_IDX_CONFIG_STR:
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 800d934:	687b      	ldr	r3, [r7, #4]
 800d936:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d93a:	695b      	ldr	r3, [r3, #20]
 800d93c:	687a      	ldr	r2, [r7, #4]
 800d93e:	7c12      	ldrb	r2, [r2, #16]
 800d940:	f107 010a 	add.w	r1, r7, #10
 800d944:	4610      	mov	r0, r2
 800d946:	4798      	blx	r3
 800d948:	60f8      	str	r0, [r7, #12]
      break;
 800d94a:	e010      	b.n	800d96e <USBD_GetDescriptor+0x156>

    case USBD_IDX_INTERFACE_STR:
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800d94c:	687b      	ldr	r3, [r7, #4]
 800d94e:	f8d3 3288 	ldr.w	r3, [r3, #648]	; 0x288
 800d952:	699b      	ldr	r3, [r3, #24]
 800d954:	687a      	ldr	r2, [r7, #4]
 800d956:	7c12      	ldrb	r2, [r2, #16]
 800d958:	f107 010a 	add.w	r1, r7, #10
 800d95c:	4610      	mov	r0, r2
 800d95e:	4798      	blx	r3
 800d960:	60f8      	str	r0, [r7, #12]
      break;
 800d962:	e004      	b.n	800d96e <USBD_GetDescriptor+0x156>
    default:
#if (USBD_SUPPORT_USER_STRING == 1U)
      pbuf = pdev->pClass->GetUsrStrDescriptor(pdev, (req->wValue) , &len);
      break;
#else
       USBD_CtlError(pdev , req);
 800d964:	6839      	ldr	r1, [r7, #0]
 800d966:	6878      	ldr	r0, [r7, #4]
 800d968:	f000 f9fb 	bl	800dd62 <USBD_CtlError>
      return;
 800d96c:	e04b      	b.n	800da06 <USBD_GetDescriptor+0x1ee>
#endif
    }
    break;
 800d96e:	e02e      	b.n	800d9ce <USBD_GetDescriptor+0x1b6>
  case USB_DESC_TYPE_DEVICE_QUALIFIER:

    if(pdev->dev_speed == USBD_SPEED_HIGH)
 800d970:	687b      	ldr	r3, [r7, #4]
 800d972:	7c1b      	ldrb	r3, [r3, #16]
 800d974:	2b00      	cmp	r3, #0
 800d976:	d109      	bne.n	800d98c <USBD_GetDescriptor+0x174>
    {
      pbuf = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 800d978:	687b      	ldr	r3, [r7, #4]
 800d97a:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d97e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d980:	f107 020a 	add.w	r2, r7, #10
 800d984:	4610      	mov	r0, r2
 800d986:	4798      	blx	r3
 800d988:	60f8      	str	r0, [r7, #12]
      break;
 800d98a:	e020      	b.n	800d9ce <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d98c:	6839      	ldr	r1, [r7, #0]
 800d98e:	6878      	ldr	r0, [r7, #4]
 800d990:	f000 f9e7 	bl	800dd62 <USBD_CtlError>
      return;
 800d994:	e037      	b.n	800da06 <USBD_GetDescriptor+0x1ee>
    }

  case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
    if(pdev->dev_speed == USBD_SPEED_HIGH  )
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	7c1b      	ldrb	r3, [r3, #16]
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d10d      	bne.n	800d9ba <USBD_GetDescriptor+0x1a2>
    {
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	f8d3 328c 	ldr.w	r3, [r3, #652]	; 0x28c
 800d9a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d9a6:	f107 020a 	add.w	r2, r7, #10
 800d9aa:	4610      	mov	r0, r2
 800d9ac:	4798      	blx	r3
 800d9ae:	60f8      	str	r0, [r7, #12]
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800d9b0:	68fb      	ldr	r3, [r7, #12]
 800d9b2:	3301      	adds	r3, #1
 800d9b4:	2207      	movs	r2, #7
 800d9b6:	701a      	strb	r2, [r3, #0]
      break;
 800d9b8:	e009      	b.n	800d9ce <USBD_GetDescriptor+0x1b6>
    }
    else
    {
      USBD_CtlError(pdev , req);
 800d9ba:	6839      	ldr	r1, [r7, #0]
 800d9bc:	6878      	ldr	r0, [r7, #4]
 800d9be:	f000 f9d0 	bl	800dd62 <USBD_CtlError>
      return;
 800d9c2:	e020      	b.n	800da06 <USBD_GetDescriptor+0x1ee>
    }

  default:
     USBD_CtlError(pdev , req);
 800d9c4:	6839      	ldr	r1, [r7, #0]
 800d9c6:	6878      	ldr	r0, [r7, #4]
 800d9c8:	f000 f9cb 	bl	800dd62 <USBD_CtlError>
    return;
 800d9cc:	e01b      	b.n	800da06 <USBD_GetDescriptor+0x1ee>
  }

  if((len != 0U) && (req->wLength != 0U))
 800d9ce:	897b      	ldrh	r3, [r7, #10]
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d011      	beq.n	800d9f8 <USBD_GetDescriptor+0x1e0>
 800d9d4:	683b      	ldr	r3, [r7, #0]
 800d9d6:	88db      	ldrh	r3, [r3, #6]
 800d9d8:	2b00      	cmp	r3, #0
 800d9da:	d00d      	beq.n	800d9f8 <USBD_GetDescriptor+0x1e0>
  {

    len = MIN(len, req->wLength);
 800d9dc:	683b      	ldr	r3, [r7, #0]
 800d9de:	88da      	ldrh	r2, [r3, #6]
 800d9e0:	897b      	ldrh	r3, [r7, #10]
 800d9e2:	4293      	cmp	r3, r2
 800d9e4:	bf28      	it	cs
 800d9e6:	4613      	movcs	r3, r2
 800d9e8:	b29b      	uxth	r3, r3
 800d9ea:	817b      	strh	r3, [r7, #10]

    USBD_CtlSendData (pdev, pbuf, len);
 800d9ec:	897b      	ldrh	r3, [r7, #10]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	68f9      	ldr	r1, [r7, #12]
 800d9f2:	6878      	ldr	r0, [r7, #4]
 800d9f4:	f000 fa1f 	bl	800de36 <USBD_CtlSendData>
  }

  if(req->wLength == 0U)
 800d9f8:	683b      	ldr	r3, [r7, #0]
 800d9fa:	88db      	ldrh	r3, [r3, #6]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d102      	bne.n	800da06 <USBD_GetDescriptor+0x1ee>
  {
   USBD_CtlSendStatus(pdev);
 800da00:	6878      	ldr	r0, [r7, #4]
 800da02:	f000 fa76 	bl	800def2 <USBD_CtlSendStatus>
  }
}
 800da06:	3710      	adds	r7, #16
 800da08:	46bd      	mov	sp, r7
 800da0a:	bd80      	pop	{r7, pc}

0800da0c <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800da0c:	b580      	push	{r7, lr}
 800da0e:	b084      	sub	sp, #16
 800da10:	af00      	add	r7, sp, #0
 800da12:	6078      	str	r0, [r7, #4]
 800da14:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800da16:	683b      	ldr	r3, [r7, #0]
 800da18:	889b      	ldrh	r3, [r3, #4]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d130      	bne.n	800da80 <USBD_SetAddress+0x74>
 800da1e:	683b      	ldr	r3, [r7, #0]
 800da20:	88db      	ldrh	r3, [r3, #6]
 800da22:	2b00      	cmp	r3, #0
 800da24:	d12c      	bne.n	800da80 <USBD_SetAddress+0x74>
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	885b      	ldrh	r3, [r3, #2]
 800da2a:	2b7f      	cmp	r3, #127	; 0x7f
 800da2c:	d828      	bhi.n	800da80 <USBD_SetAddress+0x74>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800da2e:	683b      	ldr	r3, [r7, #0]
 800da30:	885b      	ldrh	r3, [r3, #2]
 800da32:	b2db      	uxtb	r3, r3
 800da34:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da38:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800da40:	2b03      	cmp	r3, #3
 800da42:	d104      	bne.n	800da4e <USBD_SetAddress+0x42>
    {
      USBD_CtlError(pdev , req);
 800da44:	6839      	ldr	r1, [r7, #0]
 800da46:	6878      	ldr	r0, [r7, #4]
 800da48:	f000 f98b 	bl	800dd62 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da4c:	e01d      	b.n	800da8a <USBD_SetAddress+0x7e>
    }
    else
    {
      pdev->dev_address = dev_addr;
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	7bfa      	ldrb	r2, [r7, #15]
 800da52:	f883 2276 	strb.w	r2, [r3, #630]	; 0x276
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800da56:	7bfb      	ldrb	r3, [r7, #15]
 800da58:	4619      	mov	r1, r3
 800da5a:	6878      	ldr	r0, [r7, #4]
 800da5c:	f003 ff3a 	bl	80118d4 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 800da60:	6878      	ldr	r0, [r7, #4]
 800da62:	f000 fa46 	bl	800def2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800da66:	7bfb      	ldrb	r3, [r7, #15]
 800da68:	2b00      	cmp	r3, #0
 800da6a:	d004      	beq.n	800da76 <USBD_SetAddress+0x6a>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800da6c:	687b      	ldr	r3, [r7, #4]
 800da6e:	2202      	movs	r2, #2
 800da70:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da74:	e009      	b.n	800da8a <USBD_SetAddress+0x7e>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	2201      	movs	r2, #1
 800da7a:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800da7e:	e004      	b.n	800da8a <USBD_SetAddress+0x7e>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800da80:	6839      	ldr	r1, [r7, #0]
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f000 f96d 	bl	800dd62 <USBD_CtlError>
  }
}
 800da88:	bf00      	nop
 800da8a:	bf00      	nop
 800da8c:	3710      	adds	r7, #16
 800da8e:	46bd      	mov	sp, r7
 800da90:	bd80      	pop	{r7, pc}
	...

0800da94 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800da94:	b580      	push	{r7, lr}
 800da96:	b082      	sub	sp, #8
 800da98:	af00      	add	r7, sp, #0
 800da9a:	6078      	str	r0, [r7, #4]
 800da9c:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800da9e:	683b      	ldr	r3, [r7, #0]
 800daa0:	885b      	ldrh	r3, [r3, #2]
 800daa2:	b2da      	uxtb	r2, r3
 800daa4:	4b41      	ldr	r3, [pc, #260]	; (800dbac <USBD_SetConfig+0x118>)
 800daa6:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800daa8:	4b40      	ldr	r3, [pc, #256]	; (800dbac <USBD_SetConfig+0x118>)
 800daaa:	781b      	ldrb	r3, [r3, #0]
 800daac:	2b01      	cmp	r3, #1
 800daae:	d904      	bls.n	800daba <USBD_SetConfig+0x26>
  {
    USBD_CtlError(pdev, req);
 800dab0:	6839      	ldr	r1, [r7, #0]
 800dab2:	6878      	ldr	r0, [r7, #4]
 800dab4:	f000 f955 	bl	800dd62 <USBD_CtlError>
 800dab8:	e075      	b.n	800dba6 <USBD_SetConfig+0x112>
  }
  else
  {
    switch (pdev->dev_state)
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dac0:	2b02      	cmp	r3, #2
 800dac2:	d002      	beq.n	800daca <USBD_SetConfig+0x36>
 800dac4:	2b03      	cmp	r3, #3
 800dac6:	d023      	beq.n	800db10 <USBD_SetConfig+0x7c>
 800dac8:	e062      	b.n	800db90 <USBD_SetConfig+0xfc>
    {
    case USBD_STATE_ADDRESSED:
      if (cfgidx)
 800daca:	4b38      	ldr	r3, [pc, #224]	; (800dbac <USBD_SetConfig+0x118>)
 800dacc:	781b      	ldrb	r3, [r3, #0]
 800dace:	2b00      	cmp	r3, #0
 800dad0:	d01a      	beq.n	800db08 <USBD_SetConfig+0x74>
      {
        pdev->dev_config = cfgidx;
 800dad2:	4b36      	ldr	r3, [pc, #216]	; (800dbac <USBD_SetConfig+0x118>)
 800dad4:	781b      	ldrb	r3, [r3, #0]
 800dad6:	461a      	mov	r2, r3
 800dad8:	687b      	ldr	r3, [r7, #4]
 800dada:	605a      	str	r2, [r3, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	2203      	movs	r2, #3
 800dae0:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800dae4:	4b31      	ldr	r3, [pc, #196]	; (800dbac <USBD_SetConfig+0x118>)
 800dae6:	781b      	ldrb	r3, [r3, #0]
 800dae8:	4619      	mov	r1, r3
 800daea:	6878      	ldr	r0, [r7, #4]
 800daec:	f7ff fa5d 	bl	800cfaa <USBD_SetClassConfig>
 800daf0:	4603      	mov	r3, r0
 800daf2:	2b02      	cmp	r3, #2
 800daf4:	d104      	bne.n	800db00 <USBD_SetConfig+0x6c>
        {
          USBD_CtlError(pdev, req);
 800daf6:	6839      	ldr	r1, [r7, #0]
 800daf8:	6878      	ldr	r0, [r7, #4]
 800dafa:	f000 f932 	bl	800dd62 <USBD_CtlError>
          return;
 800dafe:	e052      	b.n	800dba6 <USBD_SetConfig+0x112>
        }
        USBD_CtlSendStatus(pdev);
 800db00:	6878      	ldr	r0, [r7, #4]
 800db02:	f000 f9f6 	bl	800def2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800db06:	e04e      	b.n	800dba6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800db08:	6878      	ldr	r0, [r7, #4]
 800db0a:	f000 f9f2 	bl	800def2 <USBD_CtlSendStatus>
      break;
 800db0e:	e04a      	b.n	800dba6 <USBD_SetConfig+0x112>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800db10:	4b26      	ldr	r3, [pc, #152]	; (800dbac <USBD_SetConfig+0x118>)
 800db12:	781b      	ldrb	r3, [r3, #0]
 800db14:	2b00      	cmp	r3, #0
 800db16:	d112      	bne.n	800db3e <USBD_SetConfig+0xaa>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800db18:	687b      	ldr	r3, [r7, #4]
 800db1a:	2202      	movs	r2, #2
 800db1c:	f883 2274 	strb.w	r2, [r3, #628]	; 0x274
        pdev->dev_config = cfgidx;
 800db20:	4b22      	ldr	r3, [pc, #136]	; (800dbac <USBD_SetConfig+0x118>)
 800db22:	781b      	ldrb	r3, [r3, #0]
 800db24:	461a      	mov	r2, r3
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	605a      	str	r2, [r3, #4]
        USBD_ClrClassConfig(pdev, cfgidx);
 800db2a:	4b20      	ldr	r3, [pc, #128]	; (800dbac <USBD_SetConfig+0x118>)
 800db2c:	781b      	ldrb	r3, [r3, #0]
 800db2e:	4619      	mov	r1, r3
 800db30:	6878      	ldr	r0, [r7, #4]
 800db32:	f7ff fa59 	bl	800cfe8 <USBD_ClrClassConfig>
        USBD_CtlSendStatus(pdev);
 800db36:	6878      	ldr	r0, [r7, #4]
 800db38:	f000 f9db 	bl	800def2 <USBD_CtlSendStatus>
      }
      else
      {
        USBD_CtlSendStatus(pdev);
      }
      break;
 800db3c:	e033      	b.n	800dba6 <USBD_SetConfig+0x112>
      else if (cfgidx != pdev->dev_config)
 800db3e:	4b1b      	ldr	r3, [pc, #108]	; (800dbac <USBD_SetConfig+0x118>)
 800db40:	781b      	ldrb	r3, [r3, #0]
 800db42:	461a      	mov	r2, r3
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	685b      	ldr	r3, [r3, #4]
 800db48:	429a      	cmp	r2, r3
 800db4a:	d01d      	beq.n	800db88 <USBD_SetConfig+0xf4>
        USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	b2db      	uxtb	r3, r3
 800db52:	4619      	mov	r1, r3
 800db54:	6878      	ldr	r0, [r7, #4]
 800db56:	f7ff fa47 	bl	800cfe8 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800db5a:	4b14      	ldr	r3, [pc, #80]	; (800dbac <USBD_SetConfig+0x118>)
 800db5c:	781b      	ldrb	r3, [r3, #0]
 800db5e:	461a      	mov	r2, r3
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	605a      	str	r2, [r3, #4]
        if(USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800db64:	4b11      	ldr	r3, [pc, #68]	; (800dbac <USBD_SetConfig+0x118>)
 800db66:	781b      	ldrb	r3, [r3, #0]
 800db68:	4619      	mov	r1, r3
 800db6a:	6878      	ldr	r0, [r7, #4]
 800db6c:	f7ff fa1d 	bl	800cfaa <USBD_SetClassConfig>
 800db70:	4603      	mov	r3, r0
 800db72:	2b02      	cmp	r3, #2
 800db74:	d104      	bne.n	800db80 <USBD_SetConfig+0xec>
          USBD_CtlError(pdev, req);
 800db76:	6839      	ldr	r1, [r7, #0]
 800db78:	6878      	ldr	r0, [r7, #4]
 800db7a:	f000 f8f2 	bl	800dd62 <USBD_CtlError>
          return;
 800db7e:	e012      	b.n	800dba6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800db80:	6878      	ldr	r0, [r7, #4]
 800db82:	f000 f9b6 	bl	800def2 <USBD_CtlSendStatus>
      break;
 800db86:	e00e      	b.n	800dba6 <USBD_SetConfig+0x112>
        USBD_CtlSendStatus(pdev);
 800db88:	6878      	ldr	r0, [r7, #4]
 800db8a:	f000 f9b2 	bl	800def2 <USBD_CtlSendStatus>
      break;
 800db8e:	e00a      	b.n	800dba6 <USBD_SetConfig+0x112>

    default:
      USBD_CtlError(pdev, req);
 800db90:	6839      	ldr	r1, [r7, #0]
 800db92:	6878      	ldr	r0, [r7, #4]
 800db94:	f000 f8e5 	bl	800dd62 <USBD_CtlError>
      USBD_ClrClassConfig(pdev, cfgidx);
 800db98:	4b04      	ldr	r3, [pc, #16]	; (800dbac <USBD_SetConfig+0x118>)
 800db9a:	781b      	ldrb	r3, [r3, #0]
 800db9c:	4619      	mov	r1, r3
 800db9e:	6878      	ldr	r0, [r7, #4]
 800dba0:	f7ff fa22 	bl	800cfe8 <USBD_ClrClassConfig>
      break;
 800dba4:	bf00      	nop
    }
  }
}
 800dba6:	3708      	adds	r7, #8
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd80      	pop	{r7, pc}
 800dbac:	20000ecc 	.word	0x20000ecc

0800dbb0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dbb0:	b580      	push	{r7, lr}
 800dbb2:	b082      	sub	sp, #8
 800dbb4:	af00      	add	r7, sp, #0
 800dbb6:	6078      	str	r0, [r7, #4]
 800dbb8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800dbba:	683b      	ldr	r3, [r7, #0]
 800dbbc:	88db      	ldrh	r3, [r3, #6]
 800dbbe:	2b01      	cmp	r3, #1
 800dbc0:	d004      	beq.n	800dbcc <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev , req);
 800dbc2:	6839      	ldr	r1, [r7, #0]
 800dbc4:	6878      	ldr	r0, [r7, #4]
 800dbc6:	f000 f8cc 	bl	800dd62 <USBD_CtlError>
    default:
      USBD_CtlError(pdev , req);
      break;
    }
  }
}
 800dbca:	e022      	b.n	800dc12 <USBD_GetConfig+0x62>
    switch (pdev->dev_state)
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dbd2:	2b02      	cmp	r3, #2
 800dbd4:	dc02      	bgt.n	800dbdc <USBD_GetConfig+0x2c>
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	dc03      	bgt.n	800dbe2 <USBD_GetConfig+0x32>
 800dbda:	e015      	b.n	800dc08 <USBD_GetConfig+0x58>
 800dbdc:	2b03      	cmp	r3, #3
 800dbde:	d00b      	beq.n	800dbf8 <USBD_GetConfig+0x48>
 800dbe0:	e012      	b.n	800dc08 <USBD_GetConfig+0x58>
      pdev->dev_default_config = 0U;
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	2200      	movs	r2, #0
 800dbe6:	609a      	str	r2, [r3, #8]
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	3308      	adds	r3, #8
 800dbec:	2201      	movs	r2, #1
 800dbee:	4619      	mov	r1, r3
 800dbf0:	6878      	ldr	r0, [r7, #4]
 800dbf2:	f000 f920 	bl	800de36 <USBD_CtlSendData>
      break;
 800dbf6:	e00c      	b.n	800dc12 <USBD_GetConfig+0x62>
      USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	3304      	adds	r3, #4
 800dbfc:	2201      	movs	r2, #1
 800dbfe:	4619      	mov	r1, r3
 800dc00:	6878      	ldr	r0, [r7, #4]
 800dc02:	f000 f918 	bl	800de36 <USBD_CtlSendData>
      break;
 800dc06:	e004      	b.n	800dc12 <USBD_GetConfig+0x62>
      USBD_CtlError(pdev , req);
 800dc08:	6839      	ldr	r1, [r7, #0]
 800dc0a:	6878      	ldr	r0, [r7, #4]
 800dc0c:	f000 f8a9 	bl	800dd62 <USBD_CtlError>
      break;
 800dc10:	bf00      	nop
}
 800dc12:	bf00      	nop
 800dc14:	3708      	adds	r7, #8
 800dc16:	46bd      	mov	sp, r7
 800dc18:	bd80      	pop	{r7, pc}

0800dc1a <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800dc1a:	b580      	push	{r7, lr}
 800dc1c:	b082      	sub	sp, #8
 800dc1e:	af00      	add	r7, sp, #0
 800dc20:	6078      	str	r0, [r7, #4]
 800dc22:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dc24:	687b      	ldr	r3, [r7, #4]
 800dc26:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dc2a:	3b01      	subs	r3, #1
 800dc2c:	2b02      	cmp	r3, #2
 800dc2e:	d81e      	bhi.n	800dc6e <USBD_GetStatus+0x54>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if(req->wLength != 0x2U)
 800dc30:	683b      	ldr	r3, [r7, #0]
 800dc32:	88db      	ldrh	r3, [r3, #6]
 800dc34:	2b02      	cmp	r3, #2
 800dc36:	d004      	beq.n	800dc42 <USBD_GetStatus+0x28>
    {
      USBD_CtlError(pdev, req);
 800dc38:	6839      	ldr	r1, [r7, #0]
 800dc3a:	6878      	ldr	r0, [r7, #4]
 800dc3c:	f000 f891 	bl	800dd62 <USBD_CtlError>
      break;
 800dc40:	e01a      	b.n	800dc78 <USBD_GetStatus+0x5e>
    }

#if ( USBD_SELF_POWERED == 1U)
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800dc42:	687b      	ldr	r3, [r7, #4]
 800dc44:	2201      	movs	r2, #1
 800dc46:	60da      	str	r2, [r3, #12]
#else
    pdev->dev_config_status = 0U;
#endif

    if (pdev->dev_remote_wakeup)
 800dc48:	687b      	ldr	r3, [r7, #4]
 800dc4a:	f8d3 327c 	ldr.w	r3, [r3, #636]	; 0x27c
 800dc4e:	2b00      	cmp	r3, #0
 800dc50:	d005      	beq.n	800dc5e <USBD_GetStatus+0x44>
    {
      pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	68db      	ldr	r3, [r3, #12]
 800dc56:	f043 0202 	orr.w	r2, r3, #2
 800dc5a:	687b      	ldr	r3, [r7, #4]
 800dc5c:	60da      	str	r2, [r3, #12]
    }

    USBD_CtlSendData (pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	330c      	adds	r3, #12
 800dc62:	2202      	movs	r2, #2
 800dc64:	4619      	mov	r1, r3
 800dc66:	6878      	ldr	r0, [r7, #4]
 800dc68:	f000 f8e5 	bl	800de36 <USBD_CtlSendData>
    break;
 800dc6c:	e004      	b.n	800dc78 <USBD_GetStatus+0x5e>

  default :
    USBD_CtlError(pdev , req);
 800dc6e:	6839      	ldr	r1, [r7, #0]
 800dc70:	6878      	ldr	r0, [r7, #4]
 800dc72:	f000 f876 	bl	800dd62 <USBD_CtlError>
    break;
 800dc76:	bf00      	nop
  }
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}

0800dc80 <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b082      	sub	sp, #8
 800dc84:	af00      	add	r7, sp, #0
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]

  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	885b      	ldrh	r3, [r3, #2]
 800dc8e:	2b01      	cmp	r3, #1
 800dc90:	d106      	bne.n	800dca0 <USBD_SetFeature+0x20>
  {
    pdev->dev_remote_wakeup = 1U;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	2201      	movs	r2, #1
 800dc96:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
    USBD_CtlSendStatus(pdev);
 800dc9a:	6878      	ldr	r0, [r7, #4]
 800dc9c:	f000 f929 	bl	800def2 <USBD_CtlSendStatus>
  }

}
 800dca0:	bf00      	nop
 800dca2:	3708      	adds	r7, #8
 800dca4:	46bd      	mov	sp, r7
 800dca6:	bd80      	pop	{r7, pc}

0800dca8 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dca8:	b580      	push	{r7, lr}
 800dcaa:	b082      	sub	sp, #8
 800dcac:	af00      	add	r7, sp, #0
 800dcae:	6078      	str	r0, [r7, #4]
 800dcb0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	f893 3274 	ldrb.w	r3, [r3, #628]	; 0x274
 800dcb8:	3b01      	subs	r3, #1
 800dcba:	2b02      	cmp	r3, #2
 800dcbc:	d80b      	bhi.n	800dcd6 <USBD_ClrFeature+0x2e>
  {
  case USBD_STATE_DEFAULT:
  case USBD_STATE_ADDRESSED:
  case USBD_STATE_CONFIGURED:
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800dcbe:	683b      	ldr	r3, [r7, #0]
 800dcc0:	885b      	ldrh	r3, [r3, #2]
 800dcc2:	2b01      	cmp	r3, #1
 800dcc4:	d10c      	bne.n	800dce0 <USBD_ClrFeature+0x38>
    {
      pdev->dev_remote_wakeup = 0U;
 800dcc6:	687b      	ldr	r3, [r7, #4]
 800dcc8:	2200      	movs	r2, #0
 800dcca:	f8c3 227c 	str.w	r2, [r3, #636]	; 0x27c
      USBD_CtlSendStatus(pdev);
 800dcce:	6878      	ldr	r0, [r7, #4]
 800dcd0:	f000 f90f 	bl	800def2 <USBD_CtlSendStatus>
    }
    break;
 800dcd4:	e004      	b.n	800dce0 <USBD_ClrFeature+0x38>

  default :
     USBD_CtlError(pdev , req);
 800dcd6:	6839      	ldr	r1, [r7, #0]
 800dcd8:	6878      	ldr	r0, [r7, #4]
 800dcda:	f000 f842 	bl	800dd62 <USBD_CtlError>
    break;
 800dcde:	e000      	b.n	800dce2 <USBD_ClrFeature+0x3a>
    break;
 800dce0:	bf00      	nop
  }
}
 800dce2:	bf00      	nop
 800dce4:	3708      	adds	r7, #8
 800dce6:	46bd      	mov	sp, r7
 800dce8:	bd80      	pop	{r7, pc}

0800dcea <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800dcea:	b480      	push	{r7}
 800dcec:	b083      	sub	sp, #12
 800dcee:	af00      	add	r7, sp, #0
 800dcf0:	6078      	str	r0, [r7, #4]
 800dcf2:	6039      	str	r1, [r7, #0]
  req->bmRequest     = *(uint8_t *)  (pdata);
 800dcf4:	683b      	ldr	r3, [r7, #0]
 800dcf6:	781a      	ldrb	r2, [r3, #0]
 800dcf8:	687b      	ldr	r3, [r7, #4]
 800dcfa:	701a      	strb	r2, [r3, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 800dcfc:	683b      	ldr	r3, [r7, #0]
 800dcfe:	785a      	ldrb	r2, [r3, #1]
 800dd00:	687b      	ldr	r3, [r7, #4]
 800dd02:	705a      	strb	r2, [r3, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800dd04:	683b      	ldr	r3, [r7, #0]
 800dd06:	3302      	adds	r3, #2
 800dd08:	781b      	ldrb	r3, [r3, #0]
 800dd0a:	b29a      	uxth	r2, r3
 800dd0c:	683b      	ldr	r3, [r7, #0]
 800dd0e:	3303      	adds	r3, #3
 800dd10:	781b      	ldrb	r3, [r3, #0]
 800dd12:	b29b      	uxth	r3, r3
 800dd14:	021b      	lsls	r3, r3, #8
 800dd16:	b29b      	uxth	r3, r3
 800dd18:	4413      	add	r3, r2
 800dd1a:	b29a      	uxth	r2, r3
 800dd1c:	687b      	ldr	r3, [r7, #4]
 800dd1e:	805a      	strh	r2, [r3, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 800dd20:	683b      	ldr	r3, [r7, #0]
 800dd22:	3304      	adds	r3, #4
 800dd24:	781b      	ldrb	r3, [r3, #0]
 800dd26:	b29a      	uxth	r2, r3
 800dd28:	683b      	ldr	r3, [r7, #0]
 800dd2a:	3305      	adds	r3, #5
 800dd2c:	781b      	ldrb	r3, [r3, #0]
 800dd2e:	b29b      	uxth	r3, r3
 800dd30:	021b      	lsls	r3, r3, #8
 800dd32:	b29b      	uxth	r3, r3
 800dd34:	4413      	add	r3, r2
 800dd36:	b29a      	uxth	r2, r3
 800dd38:	687b      	ldr	r3, [r7, #4]
 800dd3a:	809a      	strh	r2, [r3, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800dd3c:	683b      	ldr	r3, [r7, #0]
 800dd3e:	3306      	adds	r3, #6
 800dd40:	781b      	ldrb	r3, [r3, #0]
 800dd42:	b29a      	uxth	r2, r3
 800dd44:	683b      	ldr	r3, [r7, #0]
 800dd46:	3307      	adds	r3, #7
 800dd48:	781b      	ldrb	r3, [r3, #0]
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	021b      	lsls	r3, r3, #8
 800dd4e:	b29b      	uxth	r3, r3
 800dd50:	4413      	add	r3, r2
 800dd52:	b29a      	uxth	r2, r3
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	80da      	strh	r2, [r3, #6]

}
 800dd58:	bf00      	nop
 800dd5a:	370c      	adds	r7, #12
 800dd5c:	46bd      	mov	sp, r7
 800dd5e:	bc80      	pop	{r7}
 800dd60:	4770      	bx	lr

0800dd62 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
                            USBD_SetupReqTypedef *req)
{
 800dd62:	b580      	push	{r7, lr}
 800dd64:	b082      	sub	sp, #8
 800dd66:	af00      	add	r7, sp, #0
 800dd68:	6078      	str	r0, [r7, #4]
 800dd6a:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev , 0x80U);
 800dd6c:	2180      	movs	r1, #128	; 0x80
 800dd6e:	6878      	ldr	r0, [r7, #4]
 800dd70:	f003 fd46 	bl	8011800 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0U);
 800dd74:	2100      	movs	r1, #0
 800dd76:	6878      	ldr	r0, [r7, #4]
 800dd78:	f003 fd42 	bl	8011800 <USBD_LL_StallEP>
}
 800dd7c:	bf00      	nop
 800dd7e:	3708      	adds	r7, #8
 800dd80:	46bd      	mov	sp, r7
 800dd82:	bd80      	pop	{r7, pc}

0800dd84 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800dd84:	b580      	push	{r7, lr}
 800dd86:	b086      	sub	sp, #24
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 800dd90:	2300      	movs	r3, #0
 800dd92:	75fb      	strb	r3, [r7, #23]

  if (desc != NULL)
 800dd94:	68fb      	ldr	r3, [r7, #12]
 800dd96:	2b00      	cmp	r3, #0
 800dd98:	d032      	beq.n	800de00 <USBD_GetString+0x7c>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 800dd9a:	68f8      	ldr	r0, [r7, #12]
 800dd9c:	f000 f834 	bl	800de08 <USBD_GetLen>
 800dda0:	4603      	mov	r3, r0
 800dda2:	3301      	adds	r3, #1
 800dda4:	b29b      	uxth	r3, r3
 800dda6:	005b      	lsls	r3, r3, #1
 800dda8:	b29a      	uxth	r2, r3
 800ddaa:	687b      	ldr	r3, [r7, #4]
 800ddac:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 800ddae:	7dfb      	ldrb	r3, [r7, #23]
 800ddb0:	1c5a      	adds	r2, r3, #1
 800ddb2:	75fa      	strb	r2, [r7, #23]
 800ddb4:	461a      	mov	r2, r3
 800ddb6:	68bb      	ldr	r3, [r7, #8]
 800ddb8:	4413      	add	r3, r2
 800ddba:	687a      	ldr	r2, [r7, #4]
 800ddbc:	7812      	ldrb	r2, [r2, #0]
 800ddbe:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 800ddc0:	7dfb      	ldrb	r3, [r7, #23]
 800ddc2:	1c5a      	adds	r2, r3, #1
 800ddc4:	75fa      	strb	r2, [r7, #23]
 800ddc6:	461a      	mov	r2, r3
 800ddc8:	68bb      	ldr	r3, [r7, #8]
 800ddca:	4413      	add	r3, r2
 800ddcc:	2203      	movs	r2, #3
 800ddce:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 800ddd0:	e012      	b.n	800ddf8 <USBD_GetString+0x74>
    {
      unicode[idx++] = *desc++;
 800ddd2:	68fb      	ldr	r3, [r7, #12]
 800ddd4:	1c5a      	adds	r2, r3, #1
 800ddd6:	60fa      	str	r2, [r7, #12]
 800ddd8:	7dfa      	ldrb	r2, [r7, #23]
 800ddda:	1c51      	adds	r1, r2, #1
 800dddc:	75f9      	strb	r1, [r7, #23]
 800ddde:	4611      	mov	r1, r2
 800dde0:	68ba      	ldr	r2, [r7, #8]
 800dde2:	440a      	add	r2, r1
 800dde4:	781b      	ldrb	r3, [r3, #0]
 800dde6:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 800dde8:	7dfb      	ldrb	r3, [r7, #23]
 800ddea:	1c5a      	adds	r2, r3, #1
 800ddec:	75fa      	strb	r2, [r7, #23]
 800ddee:	461a      	mov	r2, r3
 800ddf0:	68bb      	ldr	r3, [r7, #8]
 800ddf2:	4413      	add	r3, r2
 800ddf4:	2200      	movs	r2, #0
 800ddf6:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	781b      	ldrb	r3, [r3, #0]
 800ddfc:	2b00      	cmp	r3, #0
 800ddfe:	d1e8      	bne.n	800ddd2 <USBD_GetString+0x4e>
    }
  }
}
 800de00:	bf00      	nop
 800de02:	3718      	adds	r7, #24
 800de04:	46bd      	mov	sp, r7
 800de06:	bd80      	pop	{r7, pc}

0800de08 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800de08:	b480      	push	{r7}
 800de0a:	b085      	sub	sp, #20
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	6078      	str	r0, [r7, #4]
    uint8_t  len = 0U;
 800de10:	2300      	movs	r3, #0
 800de12:	73fb      	strb	r3, [r7, #15]

    while (*buf != '\0')
 800de14:	e005      	b.n	800de22 <USBD_GetLen+0x1a>
    {
        len++;
 800de16:	7bfb      	ldrb	r3, [r7, #15]
 800de18:	3301      	adds	r3, #1
 800de1a:	73fb      	strb	r3, [r7, #15]
        buf++;
 800de1c:	687b      	ldr	r3, [r7, #4]
 800de1e:	3301      	adds	r3, #1
 800de20:	607b      	str	r3, [r7, #4]
    while (*buf != '\0')
 800de22:	687b      	ldr	r3, [r7, #4]
 800de24:	781b      	ldrb	r3, [r3, #0]
 800de26:	2b00      	cmp	r3, #0
 800de28:	d1f5      	bne.n	800de16 <USBD_GetLen+0xe>
    }

    return len;
 800de2a:	7bfb      	ldrb	r3, [r7, #15]
}
 800de2c:	4618      	mov	r0, r3
 800de2e:	3714      	adds	r7, #20
 800de30:	46bd      	mov	sp, r7
 800de32:	bc80      	pop	{r7}
 800de34:	4770      	bx	lr

0800de36 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                     uint16_t len)
{
 800de36:	b580      	push	{r7, lr}
 800de38:	b084      	sub	sp, #16
 800de3a:	af00      	add	r7, sp, #0
 800de3c:	60f8      	str	r0, [r7, #12]
 800de3e:	60b9      	str	r1, [r7, #8]
 800de40:	4613      	mov	r3, r2
 800de42:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 800de44:	68fb      	ldr	r3, [r7, #12]
 800de46:	2202      	movs	r2, #2
 800de48:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_in[0].total_length = len;
 800de4c:	88fa      	ldrh	r2, [r7, #6]
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 800de52:	88fa      	ldrh	r2, [r7, #6]
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	621a      	str	r2, [r3, #32]

 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800de58:	88fb      	ldrh	r3, [r7, #6]
 800de5a:	68ba      	ldr	r2, [r7, #8]
 800de5c:	2100      	movs	r1, #0
 800de5e:	68f8      	ldr	r0, [r7, #12]
 800de60:	f003 fd57 	bl	8011912 <USBD_LL_Transmit>

  return USBD_OK;
 800de64:	2300      	movs	r3, #0
}
 800de66:	4618      	mov	r0, r3
 800de68:	3710      	adds	r7, #16
 800de6a:	46bd      	mov	sp, r7
 800de6c:	bd80      	pop	{r7, pc}

0800de6e <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData (USBD_HandleTypeDef *pdev,
                                             uint8_t *pbuf, uint16_t len)
{
 800de6e:	b580      	push	{r7, lr}
 800de70:	b084      	sub	sp, #16
 800de72:	af00      	add	r7, sp, #0
 800de74:	60f8      	str	r0, [r7, #12]
 800de76:	60b9      	str	r1, [r7, #8]
 800de78:	4613      	mov	r3, r2
 800de7a:	80fb      	strh	r3, [r7, #6]
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00U, pbuf, len);
 800de7c:	88fb      	ldrh	r3, [r7, #6]
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	2100      	movs	r1, #0
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f003 fd45 	bl	8011912 <USBD_LL_Transmit>

  return USBD_OK;
 800de88:	2300      	movs	r3, #0
}
 800de8a:	4618      	mov	r0, r3
 800de8c:	3710      	adds	r7, #16
 800de8e:	46bd      	mov	sp, r7
 800de90:	bd80      	pop	{r7, pc}

0800de92 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                      uint16_t len)
{
 800de92:	b580      	push	{r7, lr}
 800de94:	b084      	sub	sp, #16
 800de96:	af00      	add	r7, sp, #0
 800de98:	60f8      	str	r0, [r7, #12]
 800de9a:	60b9      	str	r1, [r7, #8]
 800de9c:	4613      	mov	r3, r2
 800de9e:	80fb      	strh	r3, [r7, #6]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800dea0:	68fb      	ldr	r3, [r7, #12]
 800dea2:	2203      	movs	r2, #3
 800dea4:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c
  pdev->ep_out[0].total_length = len;
 800dea8:	88fa      	ldrh	r2, [r7, #6]
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
  pdev->ep_out[0].rem_length   = len;
 800deb0:	88fa      	ldrh	r2, [r7, #6]
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, pbuf, len);
 800deb8:	88fb      	ldrh	r3, [r7, #6]
 800deba:	68ba      	ldr	r2, [r7, #8]
 800debc:	2100      	movs	r1, #0
 800debe:	68f8      	ldr	r0, [r7, #12]
 800dec0:	f003 fd4a 	bl	8011958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dec4:	2300      	movs	r3, #0
}
 800dec6:	4618      	mov	r0, r3
 800dec8:	3710      	adds	r7, #16
 800deca:	46bd      	mov	sp, r7
 800decc:	bd80      	pop	{r7, pc}

0800dece <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx (USBD_HandleTypeDef *pdev, uint8_t *pbuf,
                                       uint16_t len)
{
 800dece:	b580      	push	{r7, lr}
 800ded0:	b084      	sub	sp, #16
 800ded2:	af00      	add	r7, sp, #0
 800ded4:	60f8      	str	r0, [r7, #12]
 800ded6:	60b9      	str	r1, [r7, #8]
 800ded8:	4613      	mov	r3, r2
 800deda:	80fb      	strh	r3, [r7, #6]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800dedc:	88fb      	ldrh	r3, [r7, #6]
 800dede:	68ba      	ldr	r2, [r7, #8]
 800dee0:	2100      	movs	r1, #0
 800dee2:	68f8      	ldr	r0, [r7, #12]
 800dee4:	f003 fd38 	bl	8011958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800dee8:	2300      	movs	r3, #0
}
 800deea:	4618      	mov	r0, r3
 800deec:	3710      	adds	r7, #16
 800deee:	46bd      	mov	sp, r7
 800def0:	bd80      	pop	{r7, pc}

0800def2 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus (USBD_HandleTypeDef *pdev)
{
 800def2:	b580      	push	{r7, lr}
 800def4:	b082      	sub	sp, #8
 800def6:	af00      	add	r7, sp, #0
 800def8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800defa:	687b      	ldr	r3, [r7, #4]
 800defc:	2204      	movs	r2, #4
 800defe:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800df02:	2300      	movs	r3, #0
 800df04:	2200      	movs	r2, #0
 800df06:	2100      	movs	r1, #0
 800df08:	6878      	ldr	r0, [r7, #4]
 800df0a:	f003 fd02 	bl	8011912 <USBD_LL_Transmit>

  return USBD_OK;
 800df0e:	2300      	movs	r3, #0
}
 800df10:	4618      	mov	r0, r3
 800df12:	3708      	adds	r7, #8
 800df14:	46bd      	mov	sp, r7
 800df16:	bd80      	pop	{r7, pc}

0800df18 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus (USBD_HandleTypeDef *pdev)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b082      	sub	sp, #8
 800df1c:	af00      	add	r7, sp, #0
 800df1e:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	2205      	movs	r2, #5
 800df24:	f8c3 226c 	str.w	r2, [r3, #620]	; 0x26c

 /* Start the transfer */
  USBD_LL_PrepareReceive (pdev, 0U, NULL, 0U);
 800df28:	2300      	movs	r3, #0
 800df2a:	2200      	movs	r2, #0
 800df2c:	2100      	movs	r1, #0
 800df2e:	6878      	ldr	r0, [r7, #4]
 800df30:	f003 fd12 	bl	8011958 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800df34:	2300      	movs	r3, #0
}
 800df36:	4618      	mov	r0, r3
 800df38:	3708      	adds	r7, #8
 800df3a:	46bd      	mov	sp, r7
 800df3c:	bd80      	pop	{r7, pc}
	...

0800df40 <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b084      	sub	sp, #16
 800df44:	af00      	add	r7, sp, #0
 800df46:	4603      	mov	r3, r0
 800df48:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 800df4a:	79fb      	ldrb	r3, [r7, #7]
 800df4c:	4a08      	ldr	r2, [pc, #32]	; (800df70 <disk_status+0x30>)
 800df4e:	009b      	lsls	r3, r3, #2
 800df50:	4413      	add	r3, r2
 800df52:	685b      	ldr	r3, [r3, #4]
 800df54:	685b      	ldr	r3, [r3, #4]
 800df56:	79fa      	ldrb	r2, [r7, #7]
 800df58:	4905      	ldr	r1, [pc, #20]	; (800df70 <disk_status+0x30>)
 800df5a:	440a      	add	r2, r1
 800df5c:	7a12      	ldrb	r2, [r2, #8]
 800df5e:	4610      	mov	r0, r2
 800df60:	4798      	blx	r3
 800df62:	4603      	mov	r3, r0
 800df64:	73fb      	strb	r3, [r7, #15]
  return stat;
 800df66:	7bfb      	ldrb	r3, [r7, #15]
}
 800df68:	4618      	mov	r0, r3
 800df6a:	3710      	adds	r7, #16
 800df6c:	46bd      	mov	sp, r7
 800df6e:	bd80      	pop	{r7, pc}
 800df70:	200010f8 	.word	0x200010f8

0800df74 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 800df74:	b580      	push	{r7, lr}
 800df76:	b084      	sub	sp, #16
 800df78:	af00      	add	r7, sp, #0
 800df7a:	4603      	mov	r3, r0
 800df7c:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 800df7e:	2300      	movs	r3, #0
 800df80:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 800df82:	79fb      	ldrb	r3, [r7, #7]
 800df84:	4a0d      	ldr	r2, [pc, #52]	; (800dfbc <disk_initialize+0x48>)
 800df86:	5cd3      	ldrb	r3, [r2, r3]
 800df88:	2b00      	cmp	r3, #0
 800df8a:	d111      	bne.n	800dfb0 <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 800df8c:	79fb      	ldrb	r3, [r7, #7]
 800df8e:	4a0b      	ldr	r2, [pc, #44]	; (800dfbc <disk_initialize+0x48>)
 800df90:	2101      	movs	r1, #1
 800df92:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 800df94:	79fb      	ldrb	r3, [r7, #7]
 800df96:	4a09      	ldr	r2, [pc, #36]	; (800dfbc <disk_initialize+0x48>)
 800df98:	009b      	lsls	r3, r3, #2
 800df9a:	4413      	add	r3, r2
 800df9c:	685b      	ldr	r3, [r3, #4]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	79fa      	ldrb	r2, [r7, #7]
 800dfa2:	4906      	ldr	r1, [pc, #24]	; (800dfbc <disk_initialize+0x48>)
 800dfa4:	440a      	add	r2, r1
 800dfa6:	7a12      	ldrb	r2, [r2, #8]
 800dfa8:	4610      	mov	r0, r2
 800dfaa:	4798      	blx	r3
 800dfac:	4603      	mov	r3, r0
 800dfae:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800dfb0:	7bfb      	ldrb	r3, [r7, #15]
}
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	3710      	adds	r7, #16
 800dfb6:	46bd      	mov	sp, r7
 800dfb8:	bd80      	pop	{r7, pc}
 800dfba:	bf00      	nop
 800dfbc:	200010f8 	.word	0x200010f8

0800dfc0 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800dfc0:	b590      	push	{r4, r7, lr}
 800dfc2:	b087      	sub	sp, #28
 800dfc4:	af00      	add	r7, sp, #0
 800dfc6:	60b9      	str	r1, [r7, #8]
 800dfc8:	607a      	str	r2, [r7, #4]
 800dfca:	603b      	str	r3, [r7, #0]
 800dfcc:	4603      	mov	r3, r0
 800dfce:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800dfd0:	7bfb      	ldrb	r3, [r7, #15]
 800dfd2:	4a0a      	ldr	r2, [pc, #40]	; (800dffc <disk_read+0x3c>)
 800dfd4:	009b      	lsls	r3, r3, #2
 800dfd6:	4413      	add	r3, r2
 800dfd8:	685b      	ldr	r3, [r3, #4]
 800dfda:	689c      	ldr	r4, [r3, #8]
 800dfdc:	7bfb      	ldrb	r3, [r7, #15]
 800dfde:	4a07      	ldr	r2, [pc, #28]	; (800dffc <disk_read+0x3c>)
 800dfe0:	4413      	add	r3, r2
 800dfe2:	7a18      	ldrb	r0, [r3, #8]
 800dfe4:	683b      	ldr	r3, [r7, #0]
 800dfe6:	687a      	ldr	r2, [r7, #4]
 800dfe8:	68b9      	ldr	r1, [r7, #8]
 800dfea:	47a0      	blx	r4
 800dfec:	4603      	mov	r3, r0
 800dfee:	75fb      	strb	r3, [r7, #23]
  return res;
 800dff0:	7dfb      	ldrb	r3, [r7, #23]
}
 800dff2:	4618      	mov	r0, r3
 800dff4:	371c      	adds	r7, #28
 800dff6:	46bd      	mov	sp, r7
 800dff8:	bd90      	pop	{r4, r7, pc}
 800dffa:	bf00      	nop
 800dffc:	200010f8 	.word	0x200010f8

0800e000 <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800e000:	b590      	push	{r4, r7, lr}
 800e002:	b087      	sub	sp, #28
 800e004:	af00      	add	r7, sp, #0
 800e006:	60b9      	str	r1, [r7, #8]
 800e008:	607a      	str	r2, [r7, #4]
 800e00a:	603b      	str	r3, [r7, #0]
 800e00c:	4603      	mov	r3, r0
 800e00e:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800e010:	7bfb      	ldrb	r3, [r7, #15]
 800e012:	4a0a      	ldr	r2, [pc, #40]	; (800e03c <disk_write+0x3c>)
 800e014:	009b      	lsls	r3, r3, #2
 800e016:	4413      	add	r3, r2
 800e018:	685b      	ldr	r3, [r3, #4]
 800e01a:	68dc      	ldr	r4, [r3, #12]
 800e01c:	7bfb      	ldrb	r3, [r7, #15]
 800e01e:	4a07      	ldr	r2, [pc, #28]	; (800e03c <disk_write+0x3c>)
 800e020:	4413      	add	r3, r2
 800e022:	7a18      	ldrb	r0, [r3, #8]
 800e024:	683b      	ldr	r3, [r7, #0]
 800e026:	687a      	ldr	r2, [r7, #4]
 800e028:	68b9      	ldr	r1, [r7, #8]
 800e02a:	47a0      	blx	r4
 800e02c:	4603      	mov	r3, r0
 800e02e:	75fb      	strb	r3, [r7, #23]
  return res;
 800e030:	7dfb      	ldrb	r3, [r7, #23]
}
 800e032:	4618      	mov	r0, r3
 800e034:	371c      	adds	r7, #28
 800e036:	46bd      	mov	sp, r7
 800e038:	bd90      	pop	{r4, r7, pc}
 800e03a:	bf00      	nop
 800e03c:	200010f8 	.word	0x200010f8

0800e040 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 800e040:	b580      	push	{r7, lr}
 800e042:	b084      	sub	sp, #16
 800e044:	af00      	add	r7, sp, #0
 800e046:	4603      	mov	r3, r0
 800e048:	603a      	str	r2, [r7, #0]
 800e04a:	71fb      	strb	r3, [r7, #7]
 800e04c:	460b      	mov	r3, r1
 800e04e:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 800e050:	79fb      	ldrb	r3, [r7, #7]
 800e052:	4a09      	ldr	r2, [pc, #36]	; (800e078 <disk_ioctl+0x38>)
 800e054:	009b      	lsls	r3, r3, #2
 800e056:	4413      	add	r3, r2
 800e058:	685b      	ldr	r3, [r3, #4]
 800e05a:	691b      	ldr	r3, [r3, #16]
 800e05c:	79fa      	ldrb	r2, [r7, #7]
 800e05e:	4906      	ldr	r1, [pc, #24]	; (800e078 <disk_ioctl+0x38>)
 800e060:	440a      	add	r2, r1
 800e062:	7a10      	ldrb	r0, [r2, #8]
 800e064:	79b9      	ldrb	r1, [r7, #6]
 800e066:	683a      	ldr	r2, [r7, #0]
 800e068:	4798      	blx	r3
 800e06a:	4603      	mov	r3, r0
 800e06c:	73fb      	strb	r3, [r7, #15]
  return res;
 800e06e:	7bfb      	ldrb	r3, [r7, #15]
}
 800e070:	4618      	mov	r0, r3
 800e072:	3710      	adds	r7, #16
 800e074:	46bd      	mov	sp, r7
 800e076:	bd80      	pop	{r7, pc}
 800e078:	200010f8 	.word	0x200010f8

0800e07c <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 800e07c:	b480      	push	{r7}
 800e07e:	b085      	sub	sp, #20
 800e080:	af00      	add	r7, sp, #0
 800e082:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	3301      	adds	r3, #1
 800e088:	781b      	ldrb	r3, [r3, #0]
 800e08a:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 800e08c:	89fb      	ldrh	r3, [r7, #14]
 800e08e:	021b      	lsls	r3, r3, #8
 800e090:	b21a      	sxth	r2, r3
 800e092:	687b      	ldr	r3, [r7, #4]
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	b21b      	sxth	r3, r3
 800e098:	4313      	orrs	r3, r2
 800e09a:	b21b      	sxth	r3, r3
 800e09c:	81fb      	strh	r3, [r7, #14]
	return rv;
 800e09e:	89fb      	ldrh	r3, [r7, #14]
}
 800e0a0:	4618      	mov	r0, r3
 800e0a2:	3714      	adds	r7, #20
 800e0a4:	46bd      	mov	sp, r7
 800e0a6:	bc80      	pop	{r7}
 800e0a8:	4770      	bx	lr

0800e0aa <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 800e0aa:	b480      	push	{r7}
 800e0ac:	b085      	sub	sp, #20
 800e0ae:	af00      	add	r7, sp, #0
 800e0b0:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 800e0b2:	687b      	ldr	r3, [r7, #4]
 800e0b4:	3303      	adds	r3, #3
 800e0b6:	781b      	ldrb	r3, [r3, #0]
 800e0b8:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	021b      	lsls	r3, r3, #8
 800e0be:	687a      	ldr	r2, [r7, #4]
 800e0c0:	3202      	adds	r2, #2
 800e0c2:	7812      	ldrb	r2, [r2, #0]
 800e0c4:	4313      	orrs	r3, r2
 800e0c6:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	021b      	lsls	r3, r3, #8
 800e0cc:	687a      	ldr	r2, [r7, #4]
 800e0ce:	3201      	adds	r2, #1
 800e0d0:	7812      	ldrb	r2, [r2, #0]
 800e0d2:	4313      	orrs	r3, r2
 800e0d4:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	021b      	lsls	r3, r3, #8
 800e0da:	687a      	ldr	r2, [r7, #4]
 800e0dc:	7812      	ldrb	r2, [r2, #0]
 800e0de:	4313      	orrs	r3, r2
 800e0e0:	60fb      	str	r3, [r7, #12]
	return rv;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
}
 800e0e4:	4618      	mov	r0, r3
 800e0e6:	3714      	adds	r7, #20
 800e0e8:	46bd      	mov	sp, r7
 800e0ea:	bc80      	pop	{r7}
 800e0ec:	4770      	bx	lr

0800e0ee <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800e0ee:	b480      	push	{r7}
 800e0f0:	b083      	sub	sp, #12
 800e0f2:	af00      	add	r7, sp, #0
 800e0f4:	6078      	str	r0, [r7, #4]
 800e0f6:	460b      	mov	r3, r1
 800e0f8:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800e0fa:	687b      	ldr	r3, [r7, #4]
 800e0fc:	1c5a      	adds	r2, r3, #1
 800e0fe:	607a      	str	r2, [r7, #4]
 800e100:	887a      	ldrh	r2, [r7, #2]
 800e102:	b2d2      	uxtb	r2, r2
 800e104:	701a      	strb	r2, [r3, #0]
 800e106:	887b      	ldrh	r3, [r7, #2]
 800e108:	0a1b      	lsrs	r3, r3, #8
 800e10a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800e10c:	687b      	ldr	r3, [r7, #4]
 800e10e:	1c5a      	adds	r2, r3, #1
 800e110:	607a      	str	r2, [r7, #4]
 800e112:	887a      	ldrh	r2, [r7, #2]
 800e114:	b2d2      	uxtb	r2, r2
 800e116:	701a      	strb	r2, [r3, #0]
}
 800e118:	bf00      	nop
 800e11a:	370c      	adds	r7, #12
 800e11c:	46bd      	mov	sp, r7
 800e11e:	bc80      	pop	{r7}
 800e120:	4770      	bx	lr

0800e122 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 800e122:	b480      	push	{r7}
 800e124:	b083      	sub	sp, #12
 800e126:	af00      	add	r7, sp, #0
 800e128:	6078      	str	r0, [r7, #4]
 800e12a:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e12c:	687b      	ldr	r3, [r7, #4]
 800e12e:	1c5a      	adds	r2, r3, #1
 800e130:	607a      	str	r2, [r7, #4]
 800e132:	683a      	ldr	r2, [r7, #0]
 800e134:	b2d2      	uxtb	r2, r2
 800e136:	701a      	strb	r2, [r3, #0]
 800e138:	683b      	ldr	r3, [r7, #0]
 800e13a:	0a1b      	lsrs	r3, r3, #8
 800e13c:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	1c5a      	adds	r2, r3, #1
 800e142:	607a      	str	r2, [r7, #4]
 800e144:	683a      	ldr	r2, [r7, #0]
 800e146:	b2d2      	uxtb	r2, r2
 800e148:	701a      	strb	r2, [r3, #0]
 800e14a:	683b      	ldr	r3, [r7, #0]
 800e14c:	0a1b      	lsrs	r3, r3, #8
 800e14e:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	1c5a      	adds	r2, r3, #1
 800e154:	607a      	str	r2, [r7, #4]
 800e156:	683a      	ldr	r2, [r7, #0]
 800e158:	b2d2      	uxtb	r2, r2
 800e15a:	701a      	strb	r2, [r3, #0]
 800e15c:	683b      	ldr	r3, [r7, #0]
 800e15e:	0a1b      	lsrs	r3, r3, #8
 800e160:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	1c5a      	adds	r2, r3, #1
 800e166:	607a      	str	r2, [r7, #4]
 800e168:	683a      	ldr	r2, [r7, #0]
 800e16a:	b2d2      	uxtb	r2, r2
 800e16c:	701a      	strb	r2, [r3, #0]
}
 800e16e:	bf00      	nop
 800e170:	370c      	adds	r7, #12
 800e172:	46bd      	mov	sp, r7
 800e174:	bc80      	pop	{r7}
 800e176:	4770      	bx	lr

0800e178 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 800e178:	b480      	push	{r7}
 800e17a:	b087      	sub	sp, #28
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 800e188:	68bb      	ldr	r3, [r7, #8]
 800e18a:	613b      	str	r3, [r7, #16]

	if (cnt) {
 800e18c:	687b      	ldr	r3, [r7, #4]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d00d      	beq.n	800e1ae <mem_cpy+0x36>
		do {
			*d++ = *s++;
 800e192:	693a      	ldr	r2, [r7, #16]
 800e194:	1c53      	adds	r3, r2, #1
 800e196:	613b      	str	r3, [r7, #16]
 800e198:	697b      	ldr	r3, [r7, #20]
 800e19a:	1c59      	adds	r1, r3, #1
 800e19c:	6179      	str	r1, [r7, #20]
 800e19e:	7812      	ldrb	r2, [r2, #0]
 800e1a0:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	3b01      	subs	r3, #1
 800e1a6:	607b      	str	r3, [r7, #4]
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	2b00      	cmp	r3, #0
 800e1ac:	d1f1      	bne.n	800e192 <mem_cpy+0x1a>
	}
}
 800e1ae:	bf00      	nop
 800e1b0:	371c      	adds	r7, #28
 800e1b2:	46bd      	mov	sp, r7
 800e1b4:	bc80      	pop	{r7}
 800e1b6:	4770      	bx	lr

0800e1b8 <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 800e1b8:	b480      	push	{r7}
 800e1ba:	b087      	sub	sp, #28
 800e1bc:	af00      	add	r7, sp, #0
 800e1be:	60f8      	str	r0, [r7, #12]
 800e1c0:	60b9      	str	r1, [r7, #8]
 800e1c2:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 800e1c4:	68fb      	ldr	r3, [r7, #12]
 800e1c6:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 800e1c8:	697b      	ldr	r3, [r7, #20]
 800e1ca:	1c5a      	adds	r2, r3, #1
 800e1cc:	617a      	str	r2, [r7, #20]
 800e1ce:	68ba      	ldr	r2, [r7, #8]
 800e1d0:	b2d2      	uxtb	r2, r2
 800e1d2:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 800e1d4:	687b      	ldr	r3, [r7, #4]
 800e1d6:	3b01      	subs	r3, #1
 800e1d8:	607b      	str	r3, [r7, #4]
 800e1da:	687b      	ldr	r3, [r7, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	d1f3      	bne.n	800e1c8 <mem_set+0x10>
}
 800e1e0:	bf00      	nop
 800e1e2:	bf00      	nop
 800e1e4:	371c      	adds	r7, #28
 800e1e6:	46bd      	mov	sp, r7
 800e1e8:	bc80      	pop	{r7}
 800e1ea:	4770      	bx	lr

0800e1ec <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 800e1ec:	b480      	push	{r7}
 800e1ee:	b089      	sub	sp, #36	; 0x24
 800e1f0:	af00      	add	r7, sp, #0
 800e1f2:	60f8      	str	r0, [r7, #12]
 800e1f4:	60b9      	str	r1, [r7, #8]
 800e1f6:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	61fb      	str	r3, [r7, #28]
 800e1fc:	68bb      	ldr	r3, [r7, #8]
 800e1fe:	61bb      	str	r3, [r7, #24]
	int r = 0;
 800e200:	2300      	movs	r3, #0
 800e202:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 800e204:	69fb      	ldr	r3, [r7, #28]
 800e206:	1c5a      	adds	r2, r3, #1
 800e208:	61fa      	str	r2, [r7, #28]
 800e20a:	781b      	ldrb	r3, [r3, #0]
 800e20c:	4619      	mov	r1, r3
 800e20e:	69bb      	ldr	r3, [r7, #24]
 800e210:	1c5a      	adds	r2, r3, #1
 800e212:	61ba      	str	r2, [r7, #24]
 800e214:	781b      	ldrb	r3, [r3, #0]
 800e216:	1acb      	subs	r3, r1, r3
 800e218:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	3b01      	subs	r3, #1
 800e21e:	607b      	str	r3, [r7, #4]
 800e220:	687b      	ldr	r3, [r7, #4]
 800e222:	2b00      	cmp	r3, #0
 800e224:	d002      	beq.n	800e22c <mem_cmp+0x40>
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	2b00      	cmp	r3, #0
 800e22a:	d0eb      	beq.n	800e204 <mem_cmp+0x18>

	return r;
 800e22c:	697b      	ldr	r3, [r7, #20]
}
 800e22e:	4618      	mov	r0, r3
 800e230:	3724      	adds	r7, #36	; 0x24
 800e232:	46bd      	mov	sp, r7
 800e234:	bc80      	pop	{r7}
 800e236:	4770      	bx	lr

0800e238 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 800e238:	b480      	push	{r7}
 800e23a:	b083      	sub	sp, #12
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
 800e240:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 800e242:	e002      	b.n	800e24a <chk_chr+0x12>
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	3301      	adds	r3, #1
 800e248:	607b      	str	r3, [r7, #4]
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	781b      	ldrb	r3, [r3, #0]
 800e24e:	2b00      	cmp	r3, #0
 800e250:	d005      	beq.n	800e25e <chk_chr+0x26>
 800e252:	687b      	ldr	r3, [r7, #4]
 800e254:	781b      	ldrb	r3, [r3, #0]
 800e256:	461a      	mov	r2, r3
 800e258:	683b      	ldr	r3, [r7, #0]
 800e25a:	4293      	cmp	r3, r2
 800e25c:	d1f2      	bne.n	800e244 <chk_chr+0xc>
	return *str;
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	781b      	ldrb	r3, [r3, #0]
}
 800e262:	4618      	mov	r0, r3
 800e264:	370c      	adds	r7, #12
 800e266:	46bd      	mov	sp, r7
 800e268:	bc80      	pop	{r7}
 800e26a:	4770      	bx	lr

0800e26c <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e26c:	b480      	push	{r7}
 800e26e:	b085      	sub	sp, #20
 800e270:	af00      	add	r7, sp, #0
 800e272:	6078      	str	r0, [r7, #4]
 800e274:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e276:	2300      	movs	r3, #0
 800e278:	60bb      	str	r3, [r7, #8]
 800e27a:	68bb      	ldr	r3, [r7, #8]
 800e27c:	60fb      	str	r3, [r7, #12]
 800e27e:	e029      	b.n	800e2d4 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 800e280:	4a26      	ldr	r2, [pc, #152]	; (800e31c <chk_lock+0xb0>)
 800e282:	68fb      	ldr	r3, [r7, #12]
 800e284:	011b      	lsls	r3, r3, #4
 800e286:	4413      	add	r3, r2
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	2b00      	cmp	r3, #0
 800e28c:	d01d      	beq.n	800e2ca <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e28e:	4a23      	ldr	r2, [pc, #140]	; (800e31c <chk_lock+0xb0>)
 800e290:	68fb      	ldr	r3, [r7, #12]
 800e292:	011b      	lsls	r3, r3, #4
 800e294:	4413      	add	r3, r2
 800e296:	681a      	ldr	r2, [r3, #0]
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	681b      	ldr	r3, [r3, #0]
 800e29c:	429a      	cmp	r2, r3
 800e29e:	d116      	bne.n	800e2ce <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 800e2a0:	4a1e      	ldr	r2, [pc, #120]	; (800e31c <chk_lock+0xb0>)
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	011b      	lsls	r3, r3, #4
 800e2a6:	4413      	add	r3, r2
 800e2a8:	3304      	adds	r3, #4
 800e2aa:	681a      	ldr	r2, [r3, #0]
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 800e2b0:	429a      	cmp	r2, r3
 800e2b2:	d10c      	bne.n	800e2ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e2b4:	4a19      	ldr	r2, [pc, #100]	; (800e31c <chk_lock+0xb0>)
 800e2b6:	68fb      	ldr	r3, [r7, #12]
 800e2b8:	011b      	lsls	r3, r3, #4
 800e2ba:	4413      	add	r3, r2
 800e2bc:	3308      	adds	r3, #8
 800e2be:	681a      	ldr	r2, [r3, #0]
 800e2c0:	687b      	ldr	r3, [r7, #4]
 800e2c2:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 800e2c4:	429a      	cmp	r2, r3
 800e2c6:	d102      	bne.n	800e2ce <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 800e2c8:	e007      	b.n	800e2da <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 800e2ca:	2301      	movs	r3, #1
 800e2cc:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 800e2ce:	68fb      	ldr	r3, [r7, #12]
 800e2d0:	3301      	adds	r3, #1
 800e2d2:	60fb      	str	r3, [r7, #12]
 800e2d4:	68fb      	ldr	r3, [r7, #12]
 800e2d6:	2b01      	cmp	r3, #1
 800e2d8:	d9d2      	bls.n	800e280 <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 800e2da:	68fb      	ldr	r3, [r7, #12]
 800e2dc:	2b02      	cmp	r3, #2
 800e2de:	d109      	bne.n	800e2f4 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 800e2e0:	68bb      	ldr	r3, [r7, #8]
 800e2e2:	2b00      	cmp	r3, #0
 800e2e4:	d102      	bne.n	800e2ec <chk_lock+0x80>
 800e2e6:	683b      	ldr	r3, [r7, #0]
 800e2e8:	2b02      	cmp	r3, #2
 800e2ea:	d101      	bne.n	800e2f0 <chk_lock+0x84>
 800e2ec:	2300      	movs	r3, #0
 800e2ee:	e010      	b.n	800e312 <chk_lock+0xa6>
 800e2f0:	2312      	movs	r3, #18
 800e2f2:	e00e      	b.n	800e312 <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d108      	bne.n	800e30c <chk_lock+0xa0>
 800e2fa:	4a08      	ldr	r2, [pc, #32]	; (800e31c <chk_lock+0xb0>)
 800e2fc:	68fb      	ldr	r3, [r7, #12]
 800e2fe:	011b      	lsls	r3, r3, #4
 800e300:	4413      	add	r3, r2
 800e302:	330c      	adds	r3, #12
 800e304:	881b      	ldrh	r3, [r3, #0]
 800e306:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e30a:	d101      	bne.n	800e310 <chk_lock+0xa4>
 800e30c:	2310      	movs	r3, #16
 800e30e:	e000      	b.n	800e312 <chk_lock+0xa6>
 800e310:	2300      	movs	r3, #0
}
 800e312:	4618      	mov	r0, r3
 800e314:	3714      	adds	r7, #20
 800e316:	46bd      	mov	sp, r7
 800e318:	bc80      	pop	{r7}
 800e31a:	4770      	bx	lr
 800e31c:	20000ed8 	.word	0x20000ed8

0800e320 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 800e320:	b480      	push	{r7}
 800e322:	b083      	sub	sp, #12
 800e324:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e326:	2300      	movs	r3, #0
 800e328:	607b      	str	r3, [r7, #4]
 800e32a:	e002      	b.n	800e332 <enq_lock+0x12>
 800e32c:	687b      	ldr	r3, [r7, #4]
 800e32e:	3301      	adds	r3, #1
 800e330:	607b      	str	r3, [r7, #4]
 800e332:	687b      	ldr	r3, [r7, #4]
 800e334:	2b01      	cmp	r3, #1
 800e336:	d806      	bhi.n	800e346 <enq_lock+0x26>
 800e338:	4a08      	ldr	r2, [pc, #32]	; (800e35c <enq_lock+0x3c>)
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	011b      	lsls	r3, r3, #4
 800e33e:	4413      	add	r3, r2
 800e340:	681b      	ldr	r3, [r3, #0]
 800e342:	2b00      	cmp	r3, #0
 800e344:	d1f2      	bne.n	800e32c <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 800e346:	687b      	ldr	r3, [r7, #4]
 800e348:	2b02      	cmp	r3, #2
 800e34a:	bf14      	ite	ne
 800e34c:	2301      	movne	r3, #1
 800e34e:	2300      	moveq	r3, #0
 800e350:	b2db      	uxtb	r3, r3
}
 800e352:	4618      	mov	r0, r3
 800e354:	370c      	adds	r7, #12
 800e356:	46bd      	mov	sp, r7
 800e358:	bc80      	pop	{r7}
 800e35a:	4770      	bx	lr
 800e35c:	20000ed8 	.word	0x20000ed8

0800e360 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 800e360:	b480      	push	{r7}
 800e362:	b085      	sub	sp, #20
 800e364:	af00      	add	r7, sp, #0
 800e366:	6078      	str	r0, [r7, #4]
 800e368:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e36a:	2300      	movs	r3, #0
 800e36c:	60fb      	str	r3, [r7, #12]
 800e36e:	e01f      	b.n	800e3b0 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 800e370:	4a41      	ldr	r2, [pc, #260]	; (800e478 <inc_lock+0x118>)
 800e372:	68fb      	ldr	r3, [r7, #12]
 800e374:	011b      	lsls	r3, r3, #4
 800e376:	4413      	add	r3, r2
 800e378:	681a      	ldr	r2, [r3, #0]
 800e37a:	687b      	ldr	r3, [r7, #4]
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	429a      	cmp	r2, r3
 800e380:	d113      	bne.n	800e3aa <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 800e382:	4a3d      	ldr	r2, [pc, #244]	; (800e478 <inc_lock+0x118>)
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	011b      	lsls	r3, r3, #4
 800e388:	4413      	add	r3, r2
 800e38a:	3304      	adds	r3, #4
 800e38c:	681a      	ldr	r2, [r3, #0]
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 800e392:	429a      	cmp	r2, r3
 800e394:	d109      	bne.n	800e3aa <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 800e396:	4a38      	ldr	r2, [pc, #224]	; (800e478 <inc_lock+0x118>)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	011b      	lsls	r3, r3, #4
 800e39c:	4413      	add	r3, r2
 800e39e:	3308      	adds	r3, #8
 800e3a0:	681a      	ldr	r2, [r3, #0]
 800e3a2:	687b      	ldr	r3, [r7, #4]
 800e3a4:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 800e3a6:	429a      	cmp	r2, r3
 800e3a8:	d006      	beq.n	800e3b8 <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3301      	adds	r3, #1
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	2b01      	cmp	r3, #1
 800e3b4:	d9dc      	bls.n	800e370 <inc_lock+0x10>
 800e3b6:	e000      	b.n	800e3ba <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 800e3b8:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	2b02      	cmp	r3, #2
 800e3be:	d132      	bne.n	800e426 <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 800e3c0:	2300      	movs	r3, #0
 800e3c2:	60fb      	str	r3, [r7, #12]
 800e3c4:	e002      	b.n	800e3cc <inc_lock+0x6c>
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	3301      	adds	r3, #1
 800e3ca:	60fb      	str	r3, [r7, #12]
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	2b01      	cmp	r3, #1
 800e3d0:	d806      	bhi.n	800e3e0 <inc_lock+0x80>
 800e3d2:	4a29      	ldr	r2, [pc, #164]	; (800e478 <inc_lock+0x118>)
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	011b      	lsls	r3, r3, #4
 800e3d8:	4413      	add	r3, r2
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2b00      	cmp	r3, #0
 800e3de:	d1f2      	bne.n	800e3c6 <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 800e3e0:	68fb      	ldr	r3, [r7, #12]
 800e3e2:	2b02      	cmp	r3, #2
 800e3e4:	d101      	bne.n	800e3ea <inc_lock+0x8a>
 800e3e6:	2300      	movs	r3, #0
 800e3e8:	e040      	b.n	800e46c <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 800e3ea:	687b      	ldr	r3, [r7, #4]
 800e3ec:	681a      	ldr	r2, [r3, #0]
 800e3ee:	4922      	ldr	r1, [pc, #136]	; (800e478 <inc_lock+0x118>)
 800e3f0:	68fb      	ldr	r3, [r7, #12]
 800e3f2:	011b      	lsls	r3, r3, #4
 800e3f4:	440b      	add	r3, r1
 800e3f6:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	689a      	ldr	r2, [r3, #8]
 800e3fc:	491e      	ldr	r1, [pc, #120]	; (800e478 <inc_lock+0x118>)
 800e3fe:	68fb      	ldr	r3, [r7, #12]
 800e400:	011b      	lsls	r3, r3, #4
 800e402:	440b      	add	r3, r1
 800e404:	3304      	adds	r3, #4
 800e406:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 800e408:	687b      	ldr	r3, [r7, #4]
 800e40a:	695a      	ldr	r2, [r3, #20]
 800e40c:	491a      	ldr	r1, [pc, #104]	; (800e478 <inc_lock+0x118>)
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	011b      	lsls	r3, r3, #4
 800e412:	440b      	add	r3, r1
 800e414:	3308      	adds	r3, #8
 800e416:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 800e418:	4a17      	ldr	r2, [pc, #92]	; (800e478 <inc_lock+0x118>)
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	011b      	lsls	r3, r3, #4
 800e41e:	4413      	add	r3, r2
 800e420:	330c      	adds	r3, #12
 800e422:	2200      	movs	r2, #0
 800e424:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 800e426:	683b      	ldr	r3, [r7, #0]
 800e428:	2b00      	cmp	r3, #0
 800e42a:	d009      	beq.n	800e440 <inc_lock+0xe0>
 800e42c:	4a12      	ldr	r2, [pc, #72]	; (800e478 <inc_lock+0x118>)
 800e42e:	68fb      	ldr	r3, [r7, #12]
 800e430:	011b      	lsls	r3, r3, #4
 800e432:	4413      	add	r3, r2
 800e434:	330c      	adds	r3, #12
 800e436:	881b      	ldrh	r3, [r3, #0]
 800e438:	2b00      	cmp	r3, #0
 800e43a:	d001      	beq.n	800e440 <inc_lock+0xe0>
 800e43c:	2300      	movs	r3, #0
 800e43e:	e015      	b.n	800e46c <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 800e440:	683b      	ldr	r3, [r7, #0]
 800e442:	2b00      	cmp	r3, #0
 800e444:	d108      	bne.n	800e458 <inc_lock+0xf8>
 800e446:	4a0c      	ldr	r2, [pc, #48]	; (800e478 <inc_lock+0x118>)
 800e448:	68fb      	ldr	r3, [r7, #12]
 800e44a:	011b      	lsls	r3, r3, #4
 800e44c:	4413      	add	r3, r2
 800e44e:	330c      	adds	r3, #12
 800e450:	881b      	ldrh	r3, [r3, #0]
 800e452:	3301      	adds	r3, #1
 800e454:	b29a      	uxth	r2, r3
 800e456:	e001      	b.n	800e45c <inc_lock+0xfc>
 800e458:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e45c:	4906      	ldr	r1, [pc, #24]	; (800e478 <inc_lock+0x118>)
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	011b      	lsls	r3, r3, #4
 800e462:	440b      	add	r3, r1
 800e464:	330c      	adds	r3, #12
 800e466:	801a      	strh	r2, [r3, #0]

	return i + 1;
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	3301      	adds	r3, #1
}
 800e46c:	4618      	mov	r0, r3
 800e46e:	3714      	adds	r7, #20
 800e470:	46bd      	mov	sp, r7
 800e472:	bc80      	pop	{r7}
 800e474:	4770      	bx	lr
 800e476:	bf00      	nop
 800e478:	20000ed8 	.word	0x20000ed8

0800e47c <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 800e47c:	b480      	push	{r7}
 800e47e:	b085      	sub	sp, #20
 800e480:	af00      	add	r7, sp, #0
 800e482:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	3b01      	subs	r3, #1
 800e488:	607b      	str	r3, [r7, #4]
 800e48a:	687b      	ldr	r3, [r7, #4]
 800e48c:	2b01      	cmp	r3, #1
 800e48e:	d825      	bhi.n	800e4dc <dec_lock+0x60>
		n = Files[i].ctr;
 800e490:	4a16      	ldr	r2, [pc, #88]	; (800e4ec <dec_lock+0x70>)
 800e492:	687b      	ldr	r3, [r7, #4]
 800e494:	011b      	lsls	r3, r3, #4
 800e496:	4413      	add	r3, r2
 800e498:	330c      	adds	r3, #12
 800e49a:	881b      	ldrh	r3, [r3, #0]
 800e49c:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 800e49e:	89fb      	ldrh	r3, [r7, #14]
 800e4a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800e4a4:	d101      	bne.n	800e4aa <dec_lock+0x2e>
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 800e4aa:	89fb      	ldrh	r3, [r7, #14]
 800e4ac:	2b00      	cmp	r3, #0
 800e4ae:	d002      	beq.n	800e4b6 <dec_lock+0x3a>
 800e4b0:	89fb      	ldrh	r3, [r7, #14]
 800e4b2:	3b01      	subs	r3, #1
 800e4b4:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 800e4b6:	4a0d      	ldr	r2, [pc, #52]	; (800e4ec <dec_lock+0x70>)
 800e4b8:	687b      	ldr	r3, [r7, #4]
 800e4ba:	011b      	lsls	r3, r3, #4
 800e4bc:	4413      	add	r3, r2
 800e4be:	330c      	adds	r3, #12
 800e4c0:	89fa      	ldrh	r2, [r7, #14]
 800e4c2:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 800e4c4:	89fb      	ldrh	r3, [r7, #14]
 800e4c6:	2b00      	cmp	r3, #0
 800e4c8:	d105      	bne.n	800e4d6 <dec_lock+0x5a>
 800e4ca:	4a08      	ldr	r2, [pc, #32]	; (800e4ec <dec_lock+0x70>)
 800e4cc:	687b      	ldr	r3, [r7, #4]
 800e4ce:	011b      	lsls	r3, r3, #4
 800e4d0:	4413      	add	r3, r2
 800e4d2:	2200      	movs	r2, #0
 800e4d4:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 800e4d6:	2300      	movs	r3, #0
 800e4d8:	737b      	strb	r3, [r7, #13]
 800e4da:	e001      	b.n	800e4e0 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 800e4dc:	2302      	movs	r3, #2
 800e4de:	737b      	strb	r3, [r7, #13]
	}
	return res;
 800e4e0:	7b7b      	ldrb	r3, [r7, #13]
}
 800e4e2:	4618      	mov	r0, r3
 800e4e4:	3714      	adds	r7, #20
 800e4e6:	46bd      	mov	sp, r7
 800e4e8:	bc80      	pop	{r7}
 800e4ea:	4770      	bx	lr
 800e4ec:	20000ed8 	.word	0x20000ed8

0800e4f0 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b085      	sub	sp, #20
 800e4f4:	af00      	add	r7, sp, #0
 800e4f6:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 800e4f8:	2300      	movs	r3, #0
 800e4fa:	60fb      	str	r3, [r7, #12]
 800e4fc:	e010      	b.n	800e520 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 800e4fe:	4a0d      	ldr	r2, [pc, #52]	; (800e534 <clear_lock+0x44>)
 800e500:	68fb      	ldr	r3, [r7, #12]
 800e502:	011b      	lsls	r3, r3, #4
 800e504:	4413      	add	r3, r2
 800e506:	681b      	ldr	r3, [r3, #0]
 800e508:	687a      	ldr	r2, [r7, #4]
 800e50a:	429a      	cmp	r2, r3
 800e50c:	d105      	bne.n	800e51a <clear_lock+0x2a>
 800e50e:	4a09      	ldr	r2, [pc, #36]	; (800e534 <clear_lock+0x44>)
 800e510:	68fb      	ldr	r3, [r7, #12]
 800e512:	011b      	lsls	r3, r3, #4
 800e514:	4413      	add	r3, r2
 800e516:	2200      	movs	r2, #0
 800e518:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 800e51a:	68fb      	ldr	r3, [r7, #12]
 800e51c:	3301      	adds	r3, #1
 800e51e:	60fb      	str	r3, [r7, #12]
 800e520:	68fb      	ldr	r3, [r7, #12]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d9eb      	bls.n	800e4fe <clear_lock+0xe>
	}
}
 800e526:	bf00      	nop
 800e528:	bf00      	nop
 800e52a:	3714      	adds	r7, #20
 800e52c:	46bd      	mov	sp, r7
 800e52e:	bc80      	pop	{r7}
 800e530:	4770      	bx	lr
 800e532:	bf00      	nop
 800e534:	20000ed8 	.word	0x20000ed8

0800e538 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 800e538:	b580      	push	{r7, lr}
 800e53a:	b086      	sub	sp, #24
 800e53c:	af00      	add	r7, sp, #0
 800e53e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 800e540:	2300      	movs	r3, #0
 800e542:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 800e544:	687b      	ldr	r3, [r7, #4]
 800e546:	78db      	ldrb	r3, [r3, #3]
 800e548:	2b00      	cmp	r3, #0
 800e54a:	d034      	beq.n	800e5b6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 800e54c:	687b      	ldr	r3, [r7, #4]
 800e54e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e550:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	7858      	ldrb	r0, [r3, #1]
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e55c:	2301      	movs	r3, #1
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	f7ff fd4e 	bl	800e000 <disk_write>
 800e564:	4603      	mov	r3, r0
 800e566:	2b00      	cmp	r3, #0
 800e568:	d002      	beq.n	800e570 <sync_window+0x38>
			res = FR_DISK_ERR;
 800e56a:	2301      	movs	r3, #1
 800e56c:	73fb      	strb	r3, [r7, #15]
 800e56e:	e022      	b.n	800e5b6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 800e570:	687b      	ldr	r3, [r7, #4]
 800e572:	2200      	movs	r2, #0
 800e574:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 800e576:	687b      	ldr	r3, [r7, #4]
 800e578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e57a:	697a      	ldr	r2, [r7, #20]
 800e57c:	1ad2      	subs	r2, r2, r3
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	69db      	ldr	r3, [r3, #28]
 800e582:	429a      	cmp	r2, r3
 800e584:	d217      	bcs.n	800e5b6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e586:	687b      	ldr	r3, [r7, #4]
 800e588:	789b      	ldrb	r3, [r3, #2]
 800e58a:	613b      	str	r3, [r7, #16]
 800e58c:	e010      	b.n	800e5b0 <sync_window+0x78>
					wsect += fs->fsize;
 800e58e:	687b      	ldr	r3, [r7, #4]
 800e590:	69db      	ldr	r3, [r3, #28]
 800e592:	697a      	ldr	r2, [r7, #20]
 800e594:	4413      	add	r3, r2
 800e596:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	7858      	ldrb	r0, [r3, #1]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e5a2:	2301      	movs	r3, #1
 800e5a4:	697a      	ldr	r2, [r7, #20]
 800e5a6:	f7ff fd2b 	bl	800e000 <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 800e5aa:	693b      	ldr	r3, [r7, #16]
 800e5ac:	3b01      	subs	r3, #1
 800e5ae:	613b      	str	r3, [r7, #16]
 800e5b0:	693b      	ldr	r3, [r7, #16]
 800e5b2:	2b01      	cmp	r3, #1
 800e5b4:	d8eb      	bhi.n	800e58e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 800e5b6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}

0800e5c0 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b084      	sub	sp, #16
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
 800e5c8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 800e5ca:	2300      	movs	r3, #0
 800e5cc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 800e5ce:	687b      	ldr	r3, [r7, #4]
 800e5d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e5d2:	683a      	ldr	r2, [r7, #0]
 800e5d4:	429a      	cmp	r2, r3
 800e5d6:	d01b      	beq.n	800e610 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 800e5d8:	6878      	ldr	r0, [r7, #4]
 800e5da:	f7ff ffad 	bl	800e538 <sync_window>
 800e5de:	4603      	mov	r3, r0
 800e5e0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 800e5e2:	7bfb      	ldrb	r3, [r7, #15]
 800e5e4:	2b00      	cmp	r3, #0
 800e5e6:	d113      	bne.n	800e610 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	7858      	ldrb	r0, [r3, #1]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e5f2:	2301      	movs	r3, #1
 800e5f4:	683a      	ldr	r2, [r7, #0]
 800e5f6:	f7ff fce3 	bl	800dfc0 <disk_read>
 800e5fa:	4603      	mov	r3, r0
 800e5fc:	2b00      	cmp	r3, #0
 800e5fe:	d004      	beq.n	800e60a <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 800e600:	f04f 33ff 	mov.w	r3, #4294967295
 800e604:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 800e606:	2301      	movs	r3, #1
 800e608:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	683a      	ldr	r2, [r7, #0]
 800e60e:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 800e610:	7bfb      	ldrb	r3, [r7, #15]
}
 800e612:	4618      	mov	r0, r3
 800e614:	3710      	adds	r7, #16
 800e616:	46bd      	mov	sp, r7
 800e618:	bd80      	pop	{r7, pc}
	...

0800e61c <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 800e61c:	b580      	push	{r7, lr}
 800e61e:	b084      	sub	sp, #16
 800e620:	af00      	add	r7, sp, #0
 800e622:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 800e624:	6878      	ldr	r0, [r7, #4]
 800e626:	f7ff ff87 	bl	800e538 <sync_window>
 800e62a:	4603      	mov	r3, r0
 800e62c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800e62e:	7bfb      	ldrb	r3, [r7, #15]
 800e630:	2b00      	cmp	r3, #0
 800e632:	d158      	bne.n	800e6e6 <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 800e634:	687b      	ldr	r3, [r7, #4]
 800e636:	781b      	ldrb	r3, [r3, #0]
 800e638:	2b03      	cmp	r3, #3
 800e63a:	d148      	bne.n	800e6ce <sync_fs+0xb2>
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	791b      	ldrb	r3, [r3, #4]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d144      	bne.n	800e6ce <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	3334      	adds	r3, #52	; 0x34
 800e648:	f44f 7200 	mov.w	r2, #512	; 0x200
 800e64c:	2100      	movs	r1, #0
 800e64e:	4618      	mov	r0, r3
 800e650:	f7ff fdb2 	bl	800e1b8 <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	3334      	adds	r3, #52	; 0x34
 800e658:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800e65c:	f64a 2155 	movw	r1, #43605	; 0xaa55
 800e660:	4618      	mov	r0, r3
 800e662:	f7ff fd44 	bl	800e0ee <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	3334      	adds	r3, #52	; 0x34
 800e66a:	4921      	ldr	r1, [pc, #132]	; (800e6f0 <sync_fs+0xd4>)
 800e66c:	4618      	mov	r0, r3
 800e66e:	f7ff fd58 	bl	800e122 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 800e672:	687b      	ldr	r3, [r7, #4]
 800e674:	3334      	adds	r3, #52	; 0x34
 800e676:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 800e67a:	491e      	ldr	r1, [pc, #120]	; (800e6f4 <sync_fs+0xd8>)
 800e67c:	4618      	mov	r0, r3
 800e67e:	f7ff fd50 	bl	800e122 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	3334      	adds	r3, #52	; 0x34
 800e686:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 800e68a:	687b      	ldr	r3, [r7, #4]
 800e68c:	695b      	ldr	r3, [r3, #20]
 800e68e:	4619      	mov	r1, r3
 800e690:	4610      	mov	r0, r2
 800e692:	f7ff fd46 	bl	800e122 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 800e696:	687b      	ldr	r3, [r7, #4]
 800e698:	3334      	adds	r3, #52	; 0x34
 800e69a:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	691b      	ldr	r3, [r3, #16]
 800e6a2:	4619      	mov	r1, r3
 800e6a4:	4610      	mov	r0, r2
 800e6a6:	f7ff fd3c 	bl	800e122 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	6a1b      	ldr	r3, [r3, #32]
 800e6ae:	1c5a      	adds	r2, r3, #1
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 800e6b4:	687b      	ldr	r3, [r7, #4]
 800e6b6:	7858      	ldrb	r0, [r3, #1]
 800e6b8:	687b      	ldr	r3, [r7, #4]
 800e6ba:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800e6c2:	2301      	movs	r3, #1
 800e6c4:	f7ff fc9c 	bl	800e000 <disk_write>
			fs->fsi_flag = 0;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 800e6ce:	687b      	ldr	r3, [r7, #4]
 800e6d0:	785b      	ldrb	r3, [r3, #1]
 800e6d2:	2200      	movs	r2, #0
 800e6d4:	2100      	movs	r1, #0
 800e6d6:	4618      	mov	r0, r3
 800e6d8:	f7ff fcb2 	bl	800e040 <disk_ioctl>
 800e6dc:	4603      	mov	r3, r0
 800e6de:	2b00      	cmp	r3, #0
 800e6e0:	d001      	beq.n	800e6e6 <sync_fs+0xca>
 800e6e2:	2301      	movs	r3, #1
 800e6e4:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 800e6e6:	7bfb      	ldrb	r3, [r7, #15]
}
 800e6e8:	4618      	mov	r0, r3
 800e6ea:	3710      	adds	r7, #16
 800e6ec:	46bd      	mov	sp, r7
 800e6ee:	bd80      	pop	{r7, pc}
 800e6f0:	41615252 	.word	0x41615252
 800e6f4:	61417272 	.word	0x61417272

0800e6f8 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800e6f8:	b480      	push	{r7}
 800e6fa:	b083      	sub	sp, #12
 800e6fc:	af00      	add	r7, sp, #0
 800e6fe:	6078      	str	r0, [r7, #4]
 800e700:	6039      	str	r1, [r7, #0]
	clst -= 2;
 800e702:	683b      	ldr	r3, [r7, #0]
 800e704:	3b02      	subs	r3, #2
 800e706:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800e708:	687b      	ldr	r3, [r7, #4]
 800e70a:	699b      	ldr	r3, [r3, #24]
 800e70c:	3b02      	subs	r3, #2
 800e70e:	683a      	ldr	r2, [r7, #0]
 800e710:	429a      	cmp	r2, r3
 800e712:	d301      	bcc.n	800e718 <clust2sect+0x20>
 800e714:	2300      	movs	r3, #0
 800e716:	e008      	b.n	800e72a <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800e718:	687b      	ldr	r3, [r7, #4]
 800e71a:	895b      	ldrh	r3, [r3, #10]
 800e71c:	461a      	mov	r2, r3
 800e71e:	683b      	ldr	r3, [r7, #0]
 800e720:	fb03 f202 	mul.w	r2, r3, r2
 800e724:	687b      	ldr	r3, [r7, #4]
 800e726:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e728:	4413      	add	r3, r2
}
 800e72a:	4618      	mov	r0, r3
 800e72c:	370c      	adds	r7, #12
 800e72e:	46bd      	mov	sp, r7
 800e730:	bc80      	pop	{r7}
 800e732:	4770      	bx	lr

0800e734 <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 800e734:	b580      	push	{r7, lr}
 800e736:	b086      	sub	sp, #24
 800e738:	af00      	add	r7, sp, #0
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 800e73e:	687b      	ldr	r3, [r7, #4]
 800e740:	681b      	ldr	r3, [r3, #0]
 800e742:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 800e744:	683b      	ldr	r3, [r7, #0]
 800e746:	2b01      	cmp	r3, #1
 800e748:	d904      	bls.n	800e754 <get_fat+0x20>
 800e74a:	693b      	ldr	r3, [r7, #16]
 800e74c:	699b      	ldr	r3, [r3, #24]
 800e74e:	683a      	ldr	r2, [r7, #0]
 800e750:	429a      	cmp	r2, r3
 800e752:	d302      	bcc.n	800e75a <get_fat+0x26>
		val = 1;	/* Internal error */
 800e754:	2301      	movs	r3, #1
 800e756:	617b      	str	r3, [r7, #20]
 800e758:	e08f      	b.n	800e87a <get_fat+0x146>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 800e75a:	f04f 33ff 	mov.w	r3, #4294967295
 800e75e:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 800e760:	693b      	ldr	r3, [r7, #16]
 800e762:	781b      	ldrb	r3, [r3, #0]
 800e764:	2b03      	cmp	r3, #3
 800e766:	d062      	beq.n	800e82e <get_fat+0xfa>
 800e768:	2b03      	cmp	r3, #3
 800e76a:	dc7c      	bgt.n	800e866 <get_fat+0x132>
 800e76c:	2b01      	cmp	r3, #1
 800e76e:	d002      	beq.n	800e776 <get_fat+0x42>
 800e770:	2b02      	cmp	r3, #2
 800e772:	d042      	beq.n	800e7fa <get_fat+0xc6>
 800e774:	e077      	b.n	800e866 <get_fat+0x132>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 800e776:	683b      	ldr	r3, [r7, #0]
 800e778:	60fb      	str	r3, [r7, #12]
 800e77a:	68fb      	ldr	r3, [r7, #12]
 800e77c:	085b      	lsrs	r3, r3, #1
 800e77e:	68fa      	ldr	r2, [r7, #12]
 800e780:	4413      	add	r3, r2
 800e782:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e784:	693b      	ldr	r3, [r7, #16]
 800e786:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e788:	68fb      	ldr	r3, [r7, #12]
 800e78a:	0a5b      	lsrs	r3, r3, #9
 800e78c:	4413      	add	r3, r2
 800e78e:	4619      	mov	r1, r3
 800e790:	6938      	ldr	r0, [r7, #16]
 800e792:	f7ff ff15 	bl	800e5c0 <move_window>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d167      	bne.n	800e86c <get_fat+0x138>
			wc = fs->win[bc++ % SS(fs)];
 800e79c:	68fb      	ldr	r3, [r7, #12]
 800e79e:	1c5a      	adds	r2, r3, #1
 800e7a0:	60fa      	str	r2, [r7, #12]
 800e7a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7a6:	693a      	ldr	r2, [r7, #16]
 800e7a8:	4413      	add	r3, r2
 800e7aa:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7ae:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e7b0:	693b      	ldr	r3, [r7, #16]
 800e7b2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7b4:	68fb      	ldr	r3, [r7, #12]
 800e7b6:	0a5b      	lsrs	r3, r3, #9
 800e7b8:	4413      	add	r3, r2
 800e7ba:	4619      	mov	r1, r3
 800e7bc:	6938      	ldr	r0, [r7, #16]
 800e7be:	f7ff feff 	bl	800e5c0 <move_window>
 800e7c2:	4603      	mov	r3, r0
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	d153      	bne.n	800e870 <get_fat+0x13c>
			wc |= fs->win[bc % SS(fs)] << 8;
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e7ce:	693a      	ldr	r2, [r7, #16]
 800e7d0:	4413      	add	r3, r2
 800e7d2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e7d6:	021b      	lsls	r3, r3, #8
 800e7d8:	461a      	mov	r2, r3
 800e7da:	68bb      	ldr	r3, [r7, #8]
 800e7dc:	4313      	orrs	r3, r2
 800e7de:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 800e7e0:	683b      	ldr	r3, [r7, #0]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d002      	beq.n	800e7f0 <get_fat+0xbc>
 800e7ea:	68bb      	ldr	r3, [r7, #8]
 800e7ec:	091b      	lsrs	r3, r3, #4
 800e7ee:	e002      	b.n	800e7f6 <get_fat+0xc2>
 800e7f0:	68bb      	ldr	r3, [r7, #8]
 800e7f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800e7f6:	617b      	str	r3, [r7, #20]
			break;
 800e7f8:	e03f      	b.n	800e87a <get_fat+0x146>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e7fa:	693b      	ldr	r3, [r7, #16]
 800e7fc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e7fe:	683b      	ldr	r3, [r7, #0]
 800e800:	0a1b      	lsrs	r3, r3, #8
 800e802:	4413      	add	r3, r2
 800e804:	4619      	mov	r1, r3
 800e806:	6938      	ldr	r0, [r7, #16]
 800e808:	f7ff feda 	bl	800e5c0 <move_window>
 800e80c:	4603      	mov	r3, r0
 800e80e:	2b00      	cmp	r3, #0
 800e810:	d130      	bne.n	800e874 <get_fat+0x140>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 800e812:	693b      	ldr	r3, [r7, #16]
 800e814:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	005b      	lsls	r3, r3, #1
 800e81c:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e820:	4413      	add	r3, r2
 800e822:	4618      	mov	r0, r3
 800e824:	f7ff fc2a 	bl	800e07c <ld_word>
 800e828:	4603      	mov	r3, r0
 800e82a:	617b      	str	r3, [r7, #20]
			break;
 800e82c:	e025      	b.n	800e87a <get_fat+0x146>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e82e:	693b      	ldr	r3, [r7, #16]
 800e830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e832:	683b      	ldr	r3, [r7, #0]
 800e834:	09db      	lsrs	r3, r3, #7
 800e836:	4413      	add	r3, r2
 800e838:	4619      	mov	r1, r3
 800e83a:	6938      	ldr	r0, [r7, #16]
 800e83c:	f7ff fec0 	bl	800e5c0 <move_window>
 800e840:	4603      	mov	r3, r0
 800e842:	2b00      	cmp	r3, #0
 800e844:	d118      	bne.n	800e878 <get_fat+0x144>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 800e846:	693b      	ldr	r3, [r7, #16]
 800e848:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e84c:	683b      	ldr	r3, [r7, #0]
 800e84e:	009b      	lsls	r3, r3, #2
 800e850:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800e854:	4413      	add	r3, r2
 800e856:	4618      	mov	r0, r3
 800e858:	f7ff fc27 	bl	800e0aa <ld_dword>
 800e85c:	4603      	mov	r3, r0
 800e85e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 800e862:	617b      	str	r3, [r7, #20]
			break;
 800e864:	e009      	b.n	800e87a <get_fat+0x146>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 800e866:	2301      	movs	r3, #1
 800e868:	617b      	str	r3, [r7, #20]
 800e86a:	e006      	b.n	800e87a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e86c:	bf00      	nop
 800e86e:	e004      	b.n	800e87a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 800e870:	bf00      	nop
 800e872:	e002      	b.n	800e87a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800e874:	bf00      	nop
 800e876:	e000      	b.n	800e87a <get_fat+0x146>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 800e878:	bf00      	nop
		}
	}

	return val;
 800e87a:	697b      	ldr	r3, [r7, #20]
}
 800e87c:	4618      	mov	r0, r3
 800e87e:	3718      	adds	r7, #24
 800e880:	46bd      	mov	sp, r7
 800e882:	bd80      	pop	{r7, pc}

0800e884 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 800e884:	b590      	push	{r4, r7, lr}
 800e886:	b089      	sub	sp, #36	; 0x24
 800e888:	af00      	add	r7, sp, #0
 800e88a:	60f8      	str	r0, [r7, #12]
 800e88c:	60b9      	str	r1, [r7, #8]
 800e88e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 800e890:	2302      	movs	r3, #2
 800e892:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 800e894:	68bb      	ldr	r3, [r7, #8]
 800e896:	2b01      	cmp	r3, #1
 800e898:	f240 80d9 	bls.w	800ea4e <put_fat+0x1ca>
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	699b      	ldr	r3, [r3, #24]
 800e8a0:	68ba      	ldr	r2, [r7, #8]
 800e8a2:	429a      	cmp	r2, r3
 800e8a4:	f080 80d3 	bcs.w	800ea4e <put_fat+0x1ca>
		switch (fs->fs_type) {
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	781b      	ldrb	r3, [r3, #0]
 800e8ac:	2b03      	cmp	r3, #3
 800e8ae:	f000 8096 	beq.w	800e9de <put_fat+0x15a>
 800e8b2:	2b03      	cmp	r3, #3
 800e8b4:	f300 80cb 	bgt.w	800ea4e <put_fat+0x1ca>
 800e8b8:	2b01      	cmp	r3, #1
 800e8ba:	d002      	beq.n	800e8c2 <put_fat+0x3e>
 800e8bc:	2b02      	cmp	r3, #2
 800e8be:	d06e      	beq.n	800e99e <put_fat+0x11a>
 800e8c0:	e0c5      	b.n	800ea4e <put_fat+0x1ca>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 800e8c2:	68bb      	ldr	r3, [r7, #8]
 800e8c4:	61bb      	str	r3, [r7, #24]
 800e8c6:	69bb      	ldr	r3, [r7, #24]
 800e8c8:	085b      	lsrs	r3, r3, #1
 800e8ca:	69ba      	ldr	r2, [r7, #24]
 800e8cc:	4413      	add	r3, r2
 800e8ce:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e8d0:	68fb      	ldr	r3, [r7, #12]
 800e8d2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e8d4:	69bb      	ldr	r3, [r7, #24]
 800e8d6:	0a5b      	lsrs	r3, r3, #9
 800e8d8:	4413      	add	r3, r2
 800e8da:	4619      	mov	r1, r3
 800e8dc:	68f8      	ldr	r0, [r7, #12]
 800e8de:	f7ff fe6f 	bl	800e5c0 <move_window>
 800e8e2:	4603      	mov	r3, r0
 800e8e4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e8e6:	7ffb      	ldrb	r3, [r7, #31]
 800e8e8:	2b00      	cmp	r3, #0
 800e8ea:	f040 80a9 	bne.w	800ea40 <put_fat+0x1bc>
			p = fs->win + bc++ % SS(fs);
 800e8ee:	68fb      	ldr	r3, [r7, #12]
 800e8f0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e8f4:	69bb      	ldr	r3, [r7, #24]
 800e8f6:	1c59      	adds	r1, r3, #1
 800e8f8:	61b9      	str	r1, [r7, #24]
 800e8fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e8fe:	4413      	add	r3, r2
 800e900:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 800e902:	68bb      	ldr	r3, [r7, #8]
 800e904:	f003 0301 	and.w	r3, r3, #1
 800e908:	2b00      	cmp	r3, #0
 800e90a:	d00d      	beq.n	800e928 <put_fat+0xa4>
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	781b      	ldrb	r3, [r3, #0]
 800e910:	b25b      	sxtb	r3, r3
 800e912:	f003 030f 	and.w	r3, r3, #15
 800e916:	b25a      	sxtb	r2, r3
 800e918:	687b      	ldr	r3, [r7, #4]
 800e91a:	b2db      	uxtb	r3, r3
 800e91c:	011b      	lsls	r3, r3, #4
 800e91e:	b25b      	sxtb	r3, r3
 800e920:	4313      	orrs	r3, r2
 800e922:	b25b      	sxtb	r3, r3
 800e924:	b2db      	uxtb	r3, r3
 800e926:	e001      	b.n	800e92c <put_fat+0xa8>
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	b2db      	uxtb	r3, r3
 800e92c:	697a      	ldr	r2, [r7, #20]
 800e92e:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e930:	68fb      	ldr	r3, [r7, #12]
 800e932:	2201      	movs	r2, #1
 800e934:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e93a:	69bb      	ldr	r3, [r7, #24]
 800e93c:	0a5b      	lsrs	r3, r3, #9
 800e93e:	4413      	add	r3, r2
 800e940:	4619      	mov	r1, r3
 800e942:	68f8      	ldr	r0, [r7, #12]
 800e944:	f7ff fe3c 	bl	800e5c0 <move_window>
 800e948:	4603      	mov	r3, r0
 800e94a:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e94c:	7ffb      	ldrb	r3, [r7, #31]
 800e94e:	2b00      	cmp	r3, #0
 800e950:	d178      	bne.n	800ea44 <put_fat+0x1c0>
			p = fs->win + bc % SS(fs);
 800e952:	68fb      	ldr	r3, [r7, #12]
 800e954:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e958:	69bb      	ldr	r3, [r7, #24]
 800e95a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e95e:	4413      	add	r3, r2
 800e960:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 800e962:	68bb      	ldr	r3, [r7, #8]
 800e964:	f003 0301 	and.w	r3, r3, #1
 800e968:	2b00      	cmp	r3, #0
 800e96a:	d003      	beq.n	800e974 <put_fat+0xf0>
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	091b      	lsrs	r3, r3, #4
 800e970:	b2db      	uxtb	r3, r3
 800e972:	e00e      	b.n	800e992 <put_fat+0x10e>
 800e974:	697b      	ldr	r3, [r7, #20]
 800e976:	781b      	ldrb	r3, [r3, #0]
 800e978:	b25b      	sxtb	r3, r3
 800e97a:	f023 030f 	bic.w	r3, r3, #15
 800e97e:	b25a      	sxtb	r2, r3
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	0a1b      	lsrs	r3, r3, #8
 800e984:	b25b      	sxtb	r3, r3
 800e986:	f003 030f 	and.w	r3, r3, #15
 800e98a:	b25b      	sxtb	r3, r3
 800e98c:	4313      	orrs	r3, r2
 800e98e:	b25b      	sxtb	r3, r3
 800e990:	b2db      	uxtb	r3, r3
 800e992:	697a      	ldr	r2, [r7, #20]
 800e994:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 800e996:	68fb      	ldr	r3, [r7, #12]
 800e998:	2201      	movs	r2, #1
 800e99a:	70da      	strb	r2, [r3, #3]
			break;
 800e99c:	e057      	b.n	800ea4e <put_fat+0x1ca>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9a2:	68bb      	ldr	r3, [r7, #8]
 800e9a4:	0a1b      	lsrs	r3, r3, #8
 800e9a6:	4413      	add	r3, r2
 800e9a8:	4619      	mov	r1, r3
 800e9aa:	68f8      	ldr	r0, [r7, #12]
 800e9ac:	f7ff fe08 	bl	800e5c0 <move_window>
 800e9b0:	4603      	mov	r3, r0
 800e9b2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9b4:	7ffb      	ldrb	r3, [r7, #31]
 800e9b6:	2b00      	cmp	r3, #0
 800e9b8:	d146      	bne.n	800ea48 <put_fat+0x1c4>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800e9c0:	68bb      	ldr	r3, [r7, #8]
 800e9c2:	005b      	lsls	r3, r3, #1
 800e9c4:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800e9c8:	4413      	add	r3, r2
 800e9ca:	687a      	ldr	r2, [r7, #4]
 800e9cc:	b292      	uxth	r2, r2
 800e9ce:	4611      	mov	r1, r2
 800e9d0:	4618      	mov	r0, r3
 800e9d2:	f7ff fb8c 	bl	800e0ee <st_word>
			fs->wflag = 1;
 800e9d6:	68fb      	ldr	r3, [r7, #12]
 800e9d8:	2201      	movs	r2, #1
 800e9da:	70da      	strb	r2, [r3, #3]
			break;
 800e9dc:	e037      	b.n	800ea4e <put_fat+0x1ca>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800e9de:	68fb      	ldr	r3, [r7, #12]
 800e9e0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e9e2:	68bb      	ldr	r3, [r7, #8]
 800e9e4:	09db      	lsrs	r3, r3, #7
 800e9e6:	4413      	add	r3, r2
 800e9e8:	4619      	mov	r1, r3
 800e9ea:	68f8      	ldr	r0, [r7, #12]
 800e9ec:	f7ff fde8 	bl	800e5c0 <move_window>
 800e9f0:	4603      	mov	r3, r0
 800e9f2:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 800e9f4:	7ffb      	ldrb	r3, [r7, #31]
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d128      	bne.n	800ea4c <put_fat+0x1c8>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800ea00:	68fb      	ldr	r3, [r7, #12]
 800ea02:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea06:	68bb      	ldr	r3, [r7, #8]
 800ea08:	009b      	lsls	r3, r3, #2
 800ea0a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ea0e:	4413      	add	r3, r2
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7ff fb4a 	bl	800e0aa <ld_dword>
 800ea16:	4603      	mov	r3, r0
 800ea18:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800ea1c:	4323      	orrs	r3, r4
 800ea1e:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ea26:	68bb      	ldr	r3, [r7, #8]
 800ea28:	009b      	lsls	r3, r3, #2
 800ea2a:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800ea2e:	4413      	add	r3, r2
 800ea30:	6879      	ldr	r1, [r7, #4]
 800ea32:	4618      	mov	r0, r3
 800ea34:	f7ff fb75 	bl	800e122 <st_dword>
			fs->wflag = 1;
 800ea38:	68fb      	ldr	r3, [r7, #12]
 800ea3a:	2201      	movs	r2, #1
 800ea3c:	70da      	strb	r2, [r3, #3]
			break;
 800ea3e:	e006      	b.n	800ea4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea40:	bf00      	nop
 800ea42:	e004      	b.n	800ea4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea44:	bf00      	nop
 800ea46:	e002      	b.n	800ea4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea48:	bf00      	nop
 800ea4a:	e000      	b.n	800ea4e <put_fat+0x1ca>
			if (res != FR_OK) break;
 800ea4c:	bf00      	nop
		}
	}
	return res;
 800ea4e:	7ffb      	ldrb	r3, [r7, #31]
}
 800ea50:	4618      	mov	r0, r3
 800ea52:	3724      	adds	r7, #36	; 0x24
 800ea54:	46bd      	mov	sp, r7
 800ea56:	bd90      	pop	{r4, r7, pc}

0800ea58 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b088      	sub	sp, #32
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 800ea64:	2300      	movs	r3, #0
 800ea66:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 800ea68:	68fb      	ldr	r3, [r7, #12]
 800ea6a:	681b      	ldr	r3, [r3, #0]
 800ea6c:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 800ea6e:	68bb      	ldr	r3, [r7, #8]
 800ea70:	2b01      	cmp	r3, #1
 800ea72:	d904      	bls.n	800ea7e <remove_chain+0x26>
 800ea74:	69bb      	ldr	r3, [r7, #24]
 800ea76:	699b      	ldr	r3, [r3, #24]
 800ea78:	68ba      	ldr	r2, [r7, #8]
 800ea7a:	429a      	cmp	r2, r3
 800ea7c:	d301      	bcc.n	800ea82 <remove_chain+0x2a>
 800ea7e:	2302      	movs	r3, #2
 800ea80:	e04b      	b.n	800eb1a <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	2b00      	cmp	r3, #0
 800ea86:	d00c      	beq.n	800eaa2 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 800ea88:	f04f 32ff 	mov.w	r2, #4294967295
 800ea8c:	6879      	ldr	r1, [r7, #4]
 800ea8e:	69b8      	ldr	r0, [r7, #24]
 800ea90:	f7ff fef8 	bl	800e884 <put_fat>
 800ea94:	4603      	mov	r3, r0
 800ea96:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 800ea98:	7ffb      	ldrb	r3, [r7, #31]
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d001      	beq.n	800eaa2 <remove_chain+0x4a>
 800ea9e:	7ffb      	ldrb	r3, [r7, #31]
 800eaa0:	e03b      	b.n	800eb1a <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 800eaa2:	68b9      	ldr	r1, [r7, #8]
 800eaa4:	68f8      	ldr	r0, [r7, #12]
 800eaa6:	f7ff fe45 	bl	800e734 <get_fat>
 800eaaa:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d031      	beq.n	800eb16 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 800eab2:	697b      	ldr	r3, [r7, #20]
 800eab4:	2b01      	cmp	r3, #1
 800eab6:	d101      	bne.n	800eabc <remove_chain+0x64>
 800eab8:	2302      	movs	r3, #2
 800eaba:	e02e      	b.n	800eb1a <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800eabc:	697b      	ldr	r3, [r7, #20]
 800eabe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eac2:	d101      	bne.n	800eac8 <remove_chain+0x70>
 800eac4:	2301      	movs	r3, #1
 800eac6:	e028      	b.n	800eb1a <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 800eac8:	2200      	movs	r2, #0
 800eaca:	68b9      	ldr	r1, [r7, #8]
 800eacc:	69b8      	ldr	r0, [r7, #24]
 800eace:	f7ff fed9 	bl	800e884 <put_fat>
 800ead2:	4603      	mov	r3, r0
 800ead4:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 800ead6:	7ffb      	ldrb	r3, [r7, #31]
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d001      	beq.n	800eae0 <remove_chain+0x88>
 800eadc:	7ffb      	ldrb	r3, [r7, #31]
 800eade:	e01c      	b.n	800eb1a <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800eae0:	69bb      	ldr	r3, [r7, #24]
 800eae2:	695a      	ldr	r2, [r3, #20]
 800eae4:	69bb      	ldr	r3, [r7, #24]
 800eae6:	699b      	ldr	r3, [r3, #24]
 800eae8:	3b02      	subs	r3, #2
 800eaea:	429a      	cmp	r2, r3
 800eaec:	d20b      	bcs.n	800eb06 <remove_chain+0xae>
			fs->free_clst++;
 800eaee:	69bb      	ldr	r3, [r7, #24]
 800eaf0:	695b      	ldr	r3, [r3, #20]
 800eaf2:	1c5a      	adds	r2, r3, #1
 800eaf4:	69bb      	ldr	r3, [r7, #24]
 800eaf6:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 800eaf8:	69bb      	ldr	r3, [r7, #24]
 800eafa:	791b      	ldrb	r3, [r3, #4]
 800eafc:	f043 0301 	orr.w	r3, r3, #1
 800eb00:	b2da      	uxtb	r2, r3
 800eb02:	69bb      	ldr	r3, [r7, #24]
 800eb04:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 800eb06:	697b      	ldr	r3, [r7, #20]
 800eb08:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 800eb0a:	69bb      	ldr	r3, [r7, #24]
 800eb0c:	699b      	ldr	r3, [r3, #24]
 800eb0e:	68ba      	ldr	r2, [r7, #8]
 800eb10:	429a      	cmp	r2, r3
 800eb12:	d3c6      	bcc.n	800eaa2 <remove_chain+0x4a>
 800eb14:	e000      	b.n	800eb18 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 800eb16:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 800eb18:	2300      	movs	r3, #0
}
 800eb1a:	4618      	mov	r0, r3
 800eb1c:	3720      	adds	r7, #32
 800eb1e:	46bd      	mov	sp, r7
 800eb20:	bd80      	pop	{r7, pc}

0800eb22 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 800eb22:	b580      	push	{r7, lr}
 800eb24:	b088      	sub	sp, #32
 800eb26:	af00      	add	r7, sp, #0
 800eb28:	6078      	str	r0, [r7, #4]
 800eb2a:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	681b      	ldr	r3, [r3, #0]
 800eb30:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b00      	cmp	r3, #0
 800eb36:	d10d      	bne.n	800eb54 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 800eb38:	693b      	ldr	r3, [r7, #16]
 800eb3a:	691b      	ldr	r3, [r3, #16]
 800eb3c:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 800eb3e:	69bb      	ldr	r3, [r7, #24]
 800eb40:	2b00      	cmp	r3, #0
 800eb42:	d004      	beq.n	800eb4e <create_chain+0x2c>
 800eb44:	693b      	ldr	r3, [r7, #16]
 800eb46:	699b      	ldr	r3, [r3, #24]
 800eb48:	69ba      	ldr	r2, [r7, #24]
 800eb4a:	429a      	cmp	r2, r3
 800eb4c:	d31b      	bcc.n	800eb86 <create_chain+0x64>
 800eb4e:	2301      	movs	r3, #1
 800eb50:	61bb      	str	r3, [r7, #24]
 800eb52:	e018      	b.n	800eb86 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 800eb54:	6839      	ldr	r1, [r7, #0]
 800eb56:	6878      	ldr	r0, [r7, #4]
 800eb58:	f7ff fdec 	bl	800e734 <get_fat>
 800eb5c:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 800eb5e:	68fb      	ldr	r3, [r7, #12]
 800eb60:	2b01      	cmp	r3, #1
 800eb62:	d801      	bhi.n	800eb68 <create_chain+0x46>
 800eb64:	2301      	movs	r3, #1
 800eb66:	e070      	b.n	800ec4a <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 800eb68:	68fb      	ldr	r3, [r7, #12]
 800eb6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eb6e:	d101      	bne.n	800eb74 <create_chain+0x52>
 800eb70:	68fb      	ldr	r3, [r7, #12]
 800eb72:	e06a      	b.n	800ec4a <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800eb74:	693b      	ldr	r3, [r7, #16]
 800eb76:	699b      	ldr	r3, [r3, #24]
 800eb78:	68fa      	ldr	r2, [r7, #12]
 800eb7a:	429a      	cmp	r2, r3
 800eb7c:	d201      	bcs.n	800eb82 <create_chain+0x60>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	e063      	b.n	800ec4a <create_chain+0x128>
		scl = clst;
 800eb82:	683b      	ldr	r3, [r7, #0]
 800eb84:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 800eb86:	69bb      	ldr	r3, [r7, #24]
 800eb88:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 800eb8a:	69fb      	ldr	r3, [r7, #28]
 800eb8c:	3301      	adds	r3, #1
 800eb8e:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800eb90:	693b      	ldr	r3, [r7, #16]
 800eb92:	699b      	ldr	r3, [r3, #24]
 800eb94:	69fa      	ldr	r2, [r7, #28]
 800eb96:	429a      	cmp	r2, r3
 800eb98:	d307      	bcc.n	800ebaa <create_chain+0x88>
				ncl = 2;
 800eb9a:	2302      	movs	r3, #2
 800eb9c:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800eb9e:	69fa      	ldr	r2, [r7, #28]
 800eba0:	69bb      	ldr	r3, [r7, #24]
 800eba2:	429a      	cmp	r2, r3
 800eba4:	d901      	bls.n	800ebaa <create_chain+0x88>
 800eba6:	2300      	movs	r3, #0
 800eba8:	e04f      	b.n	800ec4a <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 800ebaa:	69f9      	ldr	r1, [r7, #28]
 800ebac:	6878      	ldr	r0, [r7, #4]
 800ebae:	f7ff fdc1 	bl	800e734 <get_fat>
 800ebb2:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 800ebb4:	68fb      	ldr	r3, [r7, #12]
 800ebb6:	2b00      	cmp	r3, #0
 800ebb8:	d00e      	beq.n	800ebd8 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 800ebba:	68fb      	ldr	r3, [r7, #12]
 800ebbc:	2b01      	cmp	r3, #1
 800ebbe:	d003      	beq.n	800ebc8 <create_chain+0xa6>
 800ebc0:	68fb      	ldr	r3, [r7, #12]
 800ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc6:	d101      	bne.n	800ebcc <create_chain+0xaa>
 800ebc8:	68fb      	ldr	r3, [r7, #12]
 800ebca:	e03e      	b.n	800ec4a <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800ebcc:	69fa      	ldr	r2, [r7, #28]
 800ebce:	69bb      	ldr	r3, [r7, #24]
 800ebd0:	429a      	cmp	r2, r3
 800ebd2:	d1da      	bne.n	800eb8a <create_chain+0x68>
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e038      	b.n	800ec4a <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 800ebd8:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 800ebda:	f04f 32ff 	mov.w	r2, #4294967295
 800ebde:	69f9      	ldr	r1, [r7, #28]
 800ebe0:	6938      	ldr	r0, [r7, #16]
 800ebe2:	f7ff fe4f 	bl	800e884 <put_fat>
 800ebe6:	4603      	mov	r3, r0
 800ebe8:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 800ebea:	7dfb      	ldrb	r3, [r7, #23]
 800ebec:	2b00      	cmp	r3, #0
 800ebee:	d109      	bne.n	800ec04 <create_chain+0xe2>
 800ebf0:	683b      	ldr	r3, [r7, #0]
 800ebf2:	2b00      	cmp	r3, #0
 800ebf4:	d006      	beq.n	800ec04 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 800ebf6:	69fa      	ldr	r2, [r7, #28]
 800ebf8:	6839      	ldr	r1, [r7, #0]
 800ebfa:	6938      	ldr	r0, [r7, #16]
 800ebfc:	f7ff fe42 	bl	800e884 <put_fat>
 800ec00:	4603      	mov	r3, r0
 800ec02:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 800ec04:	7dfb      	ldrb	r3, [r7, #23]
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d116      	bne.n	800ec38 <create_chain+0x116>
		fs->last_clst = ncl;
 800ec0a:	693b      	ldr	r3, [r7, #16]
 800ec0c:	69fa      	ldr	r2, [r7, #28]
 800ec0e:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800ec10:	693b      	ldr	r3, [r7, #16]
 800ec12:	695a      	ldr	r2, [r3, #20]
 800ec14:	693b      	ldr	r3, [r7, #16]
 800ec16:	699b      	ldr	r3, [r3, #24]
 800ec18:	3b02      	subs	r3, #2
 800ec1a:	429a      	cmp	r2, r3
 800ec1c:	d804      	bhi.n	800ec28 <create_chain+0x106>
 800ec1e:	693b      	ldr	r3, [r7, #16]
 800ec20:	695b      	ldr	r3, [r3, #20]
 800ec22:	1e5a      	subs	r2, r3, #1
 800ec24:	693b      	ldr	r3, [r7, #16]
 800ec26:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 800ec28:	693b      	ldr	r3, [r7, #16]
 800ec2a:	791b      	ldrb	r3, [r3, #4]
 800ec2c:	f043 0301 	orr.w	r3, r3, #1
 800ec30:	b2da      	uxtb	r2, r3
 800ec32:	693b      	ldr	r3, [r7, #16]
 800ec34:	711a      	strb	r2, [r3, #4]
 800ec36:	e007      	b.n	800ec48 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 800ec38:	7dfb      	ldrb	r3, [r7, #23]
 800ec3a:	2b01      	cmp	r3, #1
 800ec3c:	d102      	bne.n	800ec44 <create_chain+0x122>
 800ec3e:	f04f 33ff 	mov.w	r3, #4294967295
 800ec42:	e000      	b.n	800ec46 <create_chain+0x124>
 800ec44:	2301      	movs	r3, #1
 800ec46:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 800ec48:	69fb      	ldr	r3, [r7, #28]
}
 800ec4a:	4618      	mov	r0, r3
 800ec4c:	3720      	adds	r7, #32
 800ec4e:	46bd      	mov	sp, r7
 800ec50:	bd80      	pop	{r7, pc}

0800ec52 <clmt_clust>:
static
DWORD clmt_clust (	/* <2:Error, >=2:Cluster number */
	FIL* fp,		/* Pointer to the file object */
	FSIZE_t ofs		/* File offset to be converted to cluster# */
)
{
 800ec52:	b480      	push	{r7}
 800ec54:	b087      	sub	sp, #28
 800ec56:	af00      	add	r7, sp, #0
 800ec58:	6078      	str	r0, [r7, #4]
 800ec5a:	6039      	str	r1, [r7, #0]
	DWORD cl, ncl, *tbl;
	FATFS *fs = fp->obj.fs;
 800ec5c:	687b      	ldr	r3, [r7, #4]
 800ec5e:	681b      	ldr	r3, [r3, #0]
 800ec60:	60fb      	str	r3, [r7, #12]


	tbl = fp->cltbl + 1;	/* Top of CLMT */
 800ec62:	687b      	ldr	r3, [r7, #4]
 800ec64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec66:	3304      	adds	r3, #4
 800ec68:	613b      	str	r3, [r7, #16]
	cl = (DWORD)(ofs / SS(fs) / fs->csize);	/* Cluster order from top of the file */
 800ec6a:	683b      	ldr	r3, [r7, #0]
 800ec6c:	0a5b      	lsrs	r3, r3, #9
 800ec6e:	68fa      	ldr	r2, [r7, #12]
 800ec70:	8952      	ldrh	r2, [r2, #10]
 800ec72:	fbb3 f3f2 	udiv	r3, r3, r2
 800ec76:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800ec78:	693b      	ldr	r3, [r7, #16]
 800ec7a:	1d1a      	adds	r2, r3, #4
 800ec7c:	613a      	str	r2, [r7, #16]
 800ec7e:	681b      	ldr	r3, [r3, #0]
 800ec80:	60bb      	str	r3, [r7, #8]
		if (ncl == 0) return 0;	/* End of table? (error) */
 800ec82:	68bb      	ldr	r3, [r7, #8]
 800ec84:	2b00      	cmp	r3, #0
 800ec86:	d101      	bne.n	800ec8c <clmt_clust+0x3a>
 800ec88:	2300      	movs	r3, #0
 800ec8a:	e010      	b.n	800ecae <clmt_clust+0x5c>
		if (cl < ncl) break;	/* In this fragment? */
 800ec8c:	697a      	ldr	r2, [r7, #20]
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d307      	bcc.n	800eca4 <clmt_clust+0x52>
		cl -= ncl; tbl++;		/* Next fragment */
 800ec94:	697a      	ldr	r2, [r7, #20]
 800ec96:	68bb      	ldr	r3, [r7, #8]
 800ec98:	1ad3      	subs	r3, r2, r3
 800ec9a:	617b      	str	r3, [r7, #20]
 800ec9c:	693b      	ldr	r3, [r7, #16]
 800ec9e:	3304      	adds	r3, #4
 800eca0:	613b      	str	r3, [r7, #16]
		ncl = *tbl++;			/* Number of cluters in the fragment */
 800eca2:	e7e9      	b.n	800ec78 <clmt_clust+0x26>
		if (cl < ncl) break;	/* In this fragment? */
 800eca4:	bf00      	nop
	}
	return cl + *tbl;	/* Return the cluster number */
 800eca6:	693b      	ldr	r3, [r7, #16]
 800eca8:	681a      	ldr	r2, [r3, #0]
 800ecaa:	697b      	ldr	r3, [r7, #20]
 800ecac:	4413      	add	r3, r2
}
 800ecae:	4618      	mov	r0, r3
 800ecb0:	371c      	adds	r7, #28
 800ecb2:	46bd      	mov	sp, r7
 800ecb4:	bc80      	pop	{r7}
 800ecb6:	4770      	bx	lr

0800ecb8 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 800ecb8:	b580      	push	{r7, lr}
 800ecba:	b086      	sub	sp, #24
 800ecbc:	af00      	add	r7, sp, #0
 800ecbe:	6078      	str	r0, [r7, #4]
 800ecc0:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 800ecc2:	687b      	ldr	r3, [r7, #4]
 800ecc4:	681b      	ldr	r3, [r3, #0]
 800ecc6:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800ecce:	d204      	bcs.n	800ecda <dir_sdi+0x22>
 800ecd0:	683b      	ldr	r3, [r7, #0]
 800ecd2:	f003 031f 	and.w	r3, r3, #31
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d001      	beq.n	800ecde <dir_sdi+0x26>
		return FR_INT_ERR;
 800ecda:	2302      	movs	r3, #2
 800ecdc:	e063      	b.n	800eda6 <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	683a      	ldr	r2, [r7, #0]
 800ece2:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 800ece4:	687b      	ldr	r3, [r7, #4]
 800ece6:	689b      	ldr	r3, [r3, #8]
 800ece8:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 800ecea:	697b      	ldr	r3, [r7, #20]
 800ecec:	2b00      	cmp	r3, #0
 800ecee:	d106      	bne.n	800ecfe <dir_sdi+0x46>
 800ecf0:	693b      	ldr	r3, [r7, #16]
 800ecf2:	781b      	ldrb	r3, [r3, #0]
 800ecf4:	2b02      	cmp	r3, #2
 800ecf6:	d902      	bls.n	800ecfe <dir_sdi+0x46>
		clst = fs->dirbase;
 800ecf8:	693b      	ldr	r3, [r7, #16]
 800ecfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ecfc:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800ecfe:	697b      	ldr	r3, [r7, #20]
 800ed00:	2b00      	cmp	r3, #0
 800ed02:	d10c      	bne.n	800ed1e <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800ed04:	683b      	ldr	r3, [r7, #0]
 800ed06:	095b      	lsrs	r3, r3, #5
 800ed08:	693a      	ldr	r2, [r7, #16]
 800ed0a:	8912      	ldrh	r2, [r2, #8]
 800ed0c:	4293      	cmp	r3, r2
 800ed0e:	d301      	bcc.n	800ed14 <dir_sdi+0x5c>
 800ed10:	2302      	movs	r3, #2
 800ed12:	e048      	b.n	800eda6 <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800ed14:	693b      	ldr	r3, [r7, #16]
 800ed16:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	61da      	str	r2, [r3, #28]
 800ed1c:	e029      	b.n	800ed72 <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 800ed1e:	693b      	ldr	r3, [r7, #16]
 800ed20:	895b      	ldrh	r3, [r3, #10]
 800ed22:	025b      	lsls	r3, r3, #9
 800ed24:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed26:	e019      	b.n	800ed5c <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 800ed28:	687b      	ldr	r3, [r7, #4]
 800ed2a:	6979      	ldr	r1, [r7, #20]
 800ed2c:	4618      	mov	r0, r3
 800ed2e:	f7ff fd01 	bl	800e734 <get_fat>
 800ed32:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ed34:	697b      	ldr	r3, [r7, #20]
 800ed36:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3a:	d101      	bne.n	800ed40 <dir_sdi+0x88>
 800ed3c:	2301      	movs	r3, #1
 800ed3e:	e032      	b.n	800eda6 <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 800ed40:	697b      	ldr	r3, [r7, #20]
 800ed42:	2b01      	cmp	r3, #1
 800ed44:	d904      	bls.n	800ed50 <dir_sdi+0x98>
 800ed46:	693b      	ldr	r3, [r7, #16]
 800ed48:	699b      	ldr	r3, [r3, #24]
 800ed4a:	697a      	ldr	r2, [r7, #20]
 800ed4c:	429a      	cmp	r2, r3
 800ed4e:	d301      	bcc.n	800ed54 <dir_sdi+0x9c>
 800ed50:	2302      	movs	r3, #2
 800ed52:	e028      	b.n	800eda6 <dir_sdi+0xee>
			ofs -= csz;
 800ed54:	683a      	ldr	r2, [r7, #0]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	1ad3      	subs	r3, r2, r3
 800ed5a:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 800ed5c:	683a      	ldr	r2, [r7, #0]
 800ed5e:	68fb      	ldr	r3, [r7, #12]
 800ed60:	429a      	cmp	r2, r3
 800ed62:	d2e1      	bcs.n	800ed28 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800ed64:	6979      	ldr	r1, [r7, #20]
 800ed66:	6938      	ldr	r0, [r7, #16]
 800ed68:	f7ff fcc6 	bl	800e6f8 <clust2sect>
 800ed6c:	4602      	mov	r2, r0
 800ed6e:	687b      	ldr	r3, [r7, #4]
 800ed70:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	697a      	ldr	r2, [r7, #20]
 800ed76:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	69db      	ldr	r3, [r3, #28]
 800ed7c:	2b00      	cmp	r3, #0
 800ed7e:	d101      	bne.n	800ed84 <dir_sdi+0xcc>
 800ed80:	2302      	movs	r3, #2
 800ed82:	e010      	b.n	800eda6 <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	69da      	ldr	r2, [r3, #28]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	0a5b      	lsrs	r3, r3, #9
 800ed8c:	441a      	add	r2, r3
 800ed8e:	687b      	ldr	r3, [r7, #4]
 800ed90:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 800ed92:	693b      	ldr	r3, [r7, #16]
 800ed94:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ed9e:	441a      	add	r2, r3
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800eda4:	2300      	movs	r3, #0
}
 800eda6:	4618      	mov	r0, r3
 800eda8:	3718      	adds	r7, #24
 800edaa:	46bd      	mov	sp, r7
 800edac:	bd80      	pop	{r7, pc}

0800edae <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 800edae:	b580      	push	{r7, lr}
 800edb0:	b086      	sub	sp, #24
 800edb2:	af00      	add	r7, sp, #0
 800edb4:	6078      	str	r0, [r7, #4]
 800edb6:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	695b      	ldr	r3, [r3, #20]
 800edc2:	3320      	adds	r3, #32
 800edc4:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	69db      	ldr	r3, [r3, #28]
 800edca:	2b00      	cmp	r3, #0
 800edcc:	d003      	beq.n	800edd6 <dir_next+0x28>
 800edce:	68bb      	ldr	r3, [r7, #8]
 800edd0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800edd4:	d301      	bcc.n	800edda <dir_next+0x2c>
 800edd6:	2304      	movs	r3, #4
 800edd8:	e0aa      	b.n	800ef30 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 800edda:	68bb      	ldr	r3, [r7, #8]
 800eddc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ede0:	2b00      	cmp	r3, #0
 800ede2:	f040 8098 	bne.w	800ef16 <dir_next+0x168>
		dp->sect++;				/* Next sector */
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	69db      	ldr	r3, [r3, #28]
 800edea:	1c5a      	adds	r2, r3, #1
 800edec:	687b      	ldr	r3, [r7, #4]
 800edee:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 800edf0:	687b      	ldr	r3, [r7, #4]
 800edf2:	699b      	ldr	r3, [r3, #24]
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10b      	bne.n	800ee10 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	095b      	lsrs	r3, r3, #5
 800edfc:	68fa      	ldr	r2, [r7, #12]
 800edfe:	8912      	ldrh	r2, [r2, #8]
 800ee00:	4293      	cmp	r3, r2
 800ee02:	f0c0 8088 	bcc.w	800ef16 <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800ee06:	687b      	ldr	r3, [r7, #4]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	61da      	str	r2, [r3, #28]
 800ee0c:	2304      	movs	r3, #4
 800ee0e:	e08f      	b.n	800ef30 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	0a5b      	lsrs	r3, r3, #9
 800ee14:	68fa      	ldr	r2, [r7, #12]
 800ee16:	8952      	ldrh	r2, [r2, #10]
 800ee18:	3a01      	subs	r2, #1
 800ee1a:	4013      	ands	r3, r2
 800ee1c:	2b00      	cmp	r3, #0
 800ee1e:	d17a      	bne.n	800ef16 <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 800ee20:	687a      	ldr	r2, [r7, #4]
 800ee22:	687b      	ldr	r3, [r7, #4]
 800ee24:	699b      	ldr	r3, [r3, #24]
 800ee26:	4619      	mov	r1, r3
 800ee28:	4610      	mov	r0, r2
 800ee2a:	f7ff fc83 	bl	800e734 <get_fat>
 800ee2e:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 800ee30:	697b      	ldr	r3, [r7, #20]
 800ee32:	2b01      	cmp	r3, #1
 800ee34:	d801      	bhi.n	800ee3a <dir_next+0x8c>
 800ee36:	2302      	movs	r3, #2
 800ee38:	e07a      	b.n	800ef30 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 800ee3a:	697b      	ldr	r3, [r7, #20]
 800ee3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee40:	d101      	bne.n	800ee46 <dir_next+0x98>
 800ee42:	2301      	movs	r3, #1
 800ee44:	e074      	b.n	800ef30 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800ee46:	68fb      	ldr	r3, [r7, #12]
 800ee48:	699b      	ldr	r3, [r3, #24]
 800ee4a:	697a      	ldr	r2, [r7, #20]
 800ee4c:	429a      	cmp	r2, r3
 800ee4e:	d358      	bcc.n	800ef02 <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 800ee50:	683b      	ldr	r3, [r7, #0]
 800ee52:	2b00      	cmp	r3, #0
 800ee54:	d104      	bne.n	800ee60 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	2200      	movs	r2, #0
 800ee5a:	61da      	str	r2, [r3, #28]
 800ee5c:	2304      	movs	r3, #4
 800ee5e:	e067      	b.n	800ef30 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 800ee60:	687a      	ldr	r2, [r7, #4]
 800ee62:	687b      	ldr	r3, [r7, #4]
 800ee64:	699b      	ldr	r3, [r3, #24]
 800ee66:	4619      	mov	r1, r3
 800ee68:	4610      	mov	r0, r2
 800ee6a:	f7ff fe5a 	bl	800eb22 <create_chain>
 800ee6e:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 800ee70:	697b      	ldr	r3, [r7, #20]
 800ee72:	2b00      	cmp	r3, #0
 800ee74:	d101      	bne.n	800ee7a <dir_next+0xcc>
 800ee76:	2307      	movs	r3, #7
 800ee78:	e05a      	b.n	800ef30 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 800ee7a:	697b      	ldr	r3, [r7, #20]
 800ee7c:	2b01      	cmp	r3, #1
 800ee7e:	d101      	bne.n	800ee84 <dir_next+0xd6>
 800ee80:	2302      	movs	r3, #2
 800ee82:	e055      	b.n	800ef30 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800ee84:	697b      	ldr	r3, [r7, #20]
 800ee86:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee8a:	d101      	bne.n	800ee90 <dir_next+0xe2>
 800ee8c:	2301      	movs	r3, #1
 800ee8e:	e04f      	b.n	800ef30 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 800ee90:	68f8      	ldr	r0, [r7, #12]
 800ee92:	f7ff fb51 	bl	800e538 <sync_window>
 800ee96:	4603      	mov	r3, r0
 800ee98:	2b00      	cmp	r3, #0
 800ee9a:	d001      	beq.n	800eea0 <dir_next+0xf2>
 800ee9c:	2301      	movs	r3, #1
 800ee9e:	e047      	b.n	800ef30 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 800eea0:	68fb      	ldr	r3, [r7, #12]
 800eea2:	3334      	adds	r3, #52	; 0x34
 800eea4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800eea8:	2100      	movs	r1, #0
 800eeaa:	4618      	mov	r0, r3
 800eeac:	f7ff f984 	bl	800e1b8 <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eeb0:	2300      	movs	r3, #0
 800eeb2:	613b      	str	r3, [r7, #16]
 800eeb4:	6979      	ldr	r1, [r7, #20]
 800eeb6:	68f8      	ldr	r0, [r7, #12]
 800eeb8:	f7ff fc1e 	bl	800e6f8 <clust2sect>
 800eebc:	4602      	mov	r2, r0
 800eebe:	68fb      	ldr	r3, [r7, #12]
 800eec0:	631a      	str	r2, [r3, #48]	; 0x30
 800eec2:	e012      	b.n	800eeea <dir_next+0x13c>
						fs->wflag = 1;
 800eec4:	68fb      	ldr	r3, [r7, #12]
 800eec6:	2201      	movs	r2, #1
 800eec8:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 800eeca:	68f8      	ldr	r0, [r7, #12]
 800eecc:	f7ff fb34 	bl	800e538 <sync_window>
 800eed0:	4603      	mov	r3, r0
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d001      	beq.n	800eeda <dir_next+0x12c>
 800eed6:	2301      	movs	r3, #1
 800eed8:	e02a      	b.n	800ef30 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 800eeda:	693b      	ldr	r3, [r7, #16]
 800eedc:	3301      	adds	r3, #1
 800eede:	613b      	str	r3, [r7, #16]
 800eee0:	68fb      	ldr	r3, [r7, #12]
 800eee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eee4:	1c5a      	adds	r2, r3, #1
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	631a      	str	r2, [r3, #48]	; 0x30
 800eeea:	68fb      	ldr	r3, [r7, #12]
 800eeec:	895b      	ldrh	r3, [r3, #10]
 800eeee:	461a      	mov	r2, r3
 800eef0:	693b      	ldr	r3, [r7, #16]
 800eef2:	4293      	cmp	r3, r2
 800eef4:	d3e6      	bcc.n	800eec4 <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800eefa:	693b      	ldr	r3, [r7, #16]
 800eefc:	1ad2      	subs	r2, r2, r3
 800eefe:	68fb      	ldr	r3, [r7, #12]
 800ef00:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	697a      	ldr	r2, [r7, #20]
 800ef06:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 800ef08:	6979      	ldr	r1, [r7, #20]
 800ef0a:	68f8      	ldr	r0, [r7, #12]
 800ef0c:	f7ff fbf4 	bl	800e6f8 <clust2sect>
 800ef10:	4602      	mov	r2, r0
 800ef12:	687b      	ldr	r3, [r7, #4]
 800ef14:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800ef16:	687b      	ldr	r3, [r7, #4]
 800ef18:	68ba      	ldr	r2, [r7, #8]
 800ef1a:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 800ef1c:	68fb      	ldr	r3, [r7, #12]
 800ef1e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ef22:	68bb      	ldr	r3, [r7, #8]
 800ef24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ef28:	441a      	add	r2, r3
 800ef2a:	687b      	ldr	r3, [r7, #4]
 800ef2c:	621a      	str	r2, [r3, #32]

	return FR_OK;
 800ef2e:	2300      	movs	r3, #0
}
 800ef30:	4618      	mov	r0, r3
 800ef32:	3718      	adds	r7, #24
 800ef34:	46bd      	mov	sp, r7
 800ef36:	bd80      	pop	{r7, pc}

0800ef38 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 800ef38:	b580      	push	{r7, lr}
 800ef3a:	b086      	sub	sp, #24
 800ef3c:	af00      	add	r7, sp, #0
 800ef3e:	6078      	str	r0, [r7, #4]
 800ef40:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800ef42:	687b      	ldr	r3, [r7, #4]
 800ef44:	681b      	ldr	r3, [r3, #0]
 800ef46:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 800ef48:	2100      	movs	r1, #0
 800ef4a:	6878      	ldr	r0, [r7, #4]
 800ef4c:	f7ff feb4 	bl	800ecb8 <dir_sdi>
 800ef50:	4603      	mov	r3, r0
 800ef52:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800ef54:	7dfb      	ldrb	r3, [r7, #23]
 800ef56:	2b00      	cmp	r3, #0
 800ef58:	d12b      	bne.n	800efb2 <dir_alloc+0x7a>
		n = 0;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 800ef5e:	687b      	ldr	r3, [r7, #4]
 800ef60:	69db      	ldr	r3, [r3, #28]
 800ef62:	4619      	mov	r1, r3
 800ef64:	68f8      	ldr	r0, [r7, #12]
 800ef66:	f7ff fb2b 	bl	800e5c0 <move_window>
 800ef6a:	4603      	mov	r3, r0
 800ef6c:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800ef6e:	7dfb      	ldrb	r3, [r7, #23]
 800ef70:	2b00      	cmp	r3, #0
 800ef72:	d11d      	bne.n	800efb0 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800ef74:	687b      	ldr	r3, [r7, #4]
 800ef76:	6a1b      	ldr	r3, [r3, #32]
 800ef78:	781b      	ldrb	r3, [r3, #0]
 800ef7a:	2be5      	cmp	r3, #229	; 0xe5
 800ef7c:	d004      	beq.n	800ef88 <dir_alloc+0x50>
 800ef7e:	687b      	ldr	r3, [r7, #4]
 800ef80:	6a1b      	ldr	r3, [r3, #32]
 800ef82:	781b      	ldrb	r3, [r3, #0]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d107      	bne.n	800ef98 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 800ef88:	693b      	ldr	r3, [r7, #16]
 800ef8a:	3301      	adds	r3, #1
 800ef8c:	613b      	str	r3, [r7, #16]
 800ef8e:	693a      	ldr	r2, [r7, #16]
 800ef90:	683b      	ldr	r3, [r7, #0]
 800ef92:	429a      	cmp	r2, r3
 800ef94:	d102      	bne.n	800ef9c <dir_alloc+0x64>
 800ef96:	e00c      	b.n	800efb2 <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 800ef98:	2300      	movs	r3, #0
 800ef9a:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 800ef9c:	2101      	movs	r1, #1
 800ef9e:	6878      	ldr	r0, [r7, #4]
 800efa0:	f7ff ff05 	bl	800edae <dir_next>
 800efa4:	4603      	mov	r3, r0
 800efa6:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 800efa8:	7dfb      	ldrb	r3, [r7, #23]
 800efaa:	2b00      	cmp	r3, #0
 800efac:	d0d7      	beq.n	800ef5e <dir_alloc+0x26>
 800efae:	e000      	b.n	800efb2 <dir_alloc+0x7a>
			if (res != FR_OK) break;
 800efb0:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 800efb2:	7dfb      	ldrb	r3, [r7, #23]
 800efb4:	2b04      	cmp	r3, #4
 800efb6:	d101      	bne.n	800efbc <dir_alloc+0x84>
 800efb8:	2307      	movs	r3, #7
 800efba:	75fb      	strb	r3, [r7, #23]
	return res;
 800efbc:	7dfb      	ldrb	r3, [r7, #23]
}
 800efbe:	4618      	mov	r0, r3
 800efc0:	3718      	adds	r7, #24
 800efc2:	46bd      	mov	sp, r7
 800efc4:	bd80      	pop	{r7, pc}

0800efc6 <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 800efc6:	b580      	push	{r7, lr}
 800efc8:	b084      	sub	sp, #16
 800efca:	af00      	add	r7, sp, #0
 800efcc:	6078      	str	r0, [r7, #4]
 800efce:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	331a      	adds	r3, #26
 800efd4:	4618      	mov	r0, r3
 800efd6:	f7ff f851 	bl	800e07c <ld_word>
 800efda:	4603      	mov	r3, r0
 800efdc:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	781b      	ldrb	r3, [r3, #0]
 800efe2:	2b03      	cmp	r3, #3
 800efe4:	d109      	bne.n	800effa <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	3314      	adds	r3, #20
 800efea:	4618      	mov	r0, r3
 800efec:	f7ff f846 	bl	800e07c <ld_word>
 800eff0:	4603      	mov	r3, r0
 800eff2:	041b      	lsls	r3, r3, #16
 800eff4:	68fa      	ldr	r2, [r7, #12]
 800eff6:	4313      	orrs	r3, r2
 800eff8:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 800effa:	68fb      	ldr	r3, [r7, #12]
}
 800effc:	4618      	mov	r0, r3
 800effe:	3710      	adds	r7, #16
 800f000:	46bd      	mov	sp, r7
 800f002:	bd80      	pop	{r7, pc}

0800f004 <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800f004:	b580      	push	{r7, lr}
 800f006:	b084      	sub	sp, #16
 800f008:	af00      	add	r7, sp, #0
 800f00a:	60f8      	str	r0, [r7, #12]
 800f00c:	60b9      	str	r1, [r7, #8]
 800f00e:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 800f010:	68bb      	ldr	r3, [r7, #8]
 800f012:	331a      	adds	r3, #26
 800f014:	687a      	ldr	r2, [r7, #4]
 800f016:	b292      	uxth	r2, r2
 800f018:	4611      	mov	r1, r2
 800f01a:	4618      	mov	r0, r3
 800f01c:	f7ff f867 	bl	800e0ee <st_word>
	if (fs->fs_type == FS_FAT32) {
 800f020:	68fb      	ldr	r3, [r7, #12]
 800f022:	781b      	ldrb	r3, [r3, #0]
 800f024:	2b03      	cmp	r3, #3
 800f026:	d109      	bne.n	800f03c <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 800f028:	68bb      	ldr	r3, [r7, #8]
 800f02a:	f103 0214 	add.w	r2, r3, #20
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	0c1b      	lsrs	r3, r3, #16
 800f032:	b29b      	uxth	r3, r3
 800f034:	4619      	mov	r1, r3
 800f036:	4610      	mov	r0, r2
 800f038:	f7ff f859 	bl	800e0ee <st_word>
	}
}
 800f03c:	bf00      	nop
 800f03e:	3710      	adds	r7, #16
 800f040:	46bd      	mov	sp, r7
 800f042:	bd80      	pop	{r7, pc}

0800f044 <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800f044:	b590      	push	{r4, r7, lr}
 800f046:	b087      	sub	sp, #28
 800f048:	af00      	add	r7, sp, #0
 800f04a:	6078      	str	r0, [r7, #4]
 800f04c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 800f04e:	683b      	ldr	r3, [r7, #0]
 800f050:	331a      	adds	r3, #26
 800f052:	4618      	mov	r0, r3
 800f054:	f7ff f812 	bl	800e07c <ld_word>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d001      	beq.n	800f062 <cmp_lfn+0x1e>
 800f05e:	2300      	movs	r3, #0
 800f060:	e059      	b.n	800f116 <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800f062:	683b      	ldr	r3, [r7, #0]
 800f064:	781b      	ldrb	r3, [r3, #0]
 800f066:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f06a:	1e5a      	subs	r2, r3, #1
 800f06c:	4613      	mov	r3, r2
 800f06e:	005b      	lsls	r3, r3, #1
 800f070:	4413      	add	r3, r2
 800f072:	009b      	lsls	r3, r3, #2
 800f074:	4413      	add	r3, r2
 800f076:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f078:	2301      	movs	r3, #1
 800f07a:	81fb      	strh	r3, [r7, #14]
 800f07c:	2300      	movs	r3, #0
 800f07e:	613b      	str	r3, [r7, #16]
 800f080:	e033      	b.n	800f0ea <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f082:	4a27      	ldr	r2, [pc, #156]	; (800f120 <cmp_lfn+0xdc>)
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	4413      	add	r3, r2
 800f088:	781b      	ldrb	r3, [r3, #0]
 800f08a:	461a      	mov	r2, r3
 800f08c:	683b      	ldr	r3, [r7, #0]
 800f08e:	4413      	add	r3, r2
 800f090:	4618      	mov	r0, r3
 800f092:	f7fe fff3 	bl	800e07c <ld_word>
 800f096:	4603      	mov	r3, r0
 800f098:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f09a:	89fb      	ldrh	r3, [r7, #14]
 800f09c:	2b00      	cmp	r3, #0
 800f09e:	d01a      	beq.n	800f0d6 <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 800f0a0:	697b      	ldr	r3, [r7, #20]
 800f0a2:	2bfe      	cmp	r3, #254	; 0xfe
 800f0a4:	d812      	bhi.n	800f0cc <cmp_lfn+0x88>
 800f0a6:	89bb      	ldrh	r3, [r7, #12]
 800f0a8:	4618      	mov	r0, r3
 800f0aa:	f001 ff91 	bl	8010fd0 <ff_wtoupper>
 800f0ae:	4603      	mov	r3, r0
 800f0b0:	461c      	mov	r4, r3
 800f0b2:	697b      	ldr	r3, [r7, #20]
 800f0b4:	1c5a      	adds	r2, r3, #1
 800f0b6:	617a      	str	r2, [r7, #20]
 800f0b8:	005b      	lsls	r3, r3, #1
 800f0ba:	687a      	ldr	r2, [r7, #4]
 800f0bc:	4413      	add	r3, r2
 800f0be:	881b      	ldrh	r3, [r3, #0]
 800f0c0:	4618      	mov	r0, r3
 800f0c2:	f001 ff85 	bl	8010fd0 <ff_wtoupper>
 800f0c6:	4603      	mov	r3, r0
 800f0c8:	429c      	cmp	r4, r3
 800f0ca:	d001      	beq.n	800f0d0 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 800f0cc:	2300      	movs	r3, #0
 800f0ce:	e022      	b.n	800f116 <cmp_lfn+0xd2>
			}
			wc = uc;
 800f0d0:	89bb      	ldrh	r3, [r7, #12]
 800f0d2:	81fb      	strh	r3, [r7, #14]
 800f0d4:	e006      	b.n	800f0e4 <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f0d6:	89bb      	ldrh	r3, [r7, #12]
 800f0d8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f0dc:	4293      	cmp	r3, r2
 800f0de:	d001      	beq.n	800f0e4 <cmp_lfn+0xa0>
 800f0e0:	2300      	movs	r3, #0
 800f0e2:	e018      	b.n	800f116 <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f0e4:	693b      	ldr	r3, [r7, #16]
 800f0e6:	3301      	adds	r3, #1
 800f0e8:	613b      	str	r3, [r7, #16]
 800f0ea:	693b      	ldr	r3, [r7, #16]
 800f0ec:	2b0c      	cmp	r3, #12
 800f0ee:	d9c8      	bls.n	800f082 <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 800f0f0:	683b      	ldr	r3, [r7, #0]
 800f0f2:	781b      	ldrb	r3, [r3, #0]
 800f0f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f0f8:	2b00      	cmp	r3, #0
 800f0fa:	d00b      	beq.n	800f114 <cmp_lfn+0xd0>
 800f0fc:	89fb      	ldrh	r3, [r7, #14]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d008      	beq.n	800f114 <cmp_lfn+0xd0>
 800f102:	697b      	ldr	r3, [r7, #20]
 800f104:	005b      	lsls	r3, r3, #1
 800f106:	687a      	ldr	r2, [r7, #4]
 800f108:	4413      	add	r3, r2
 800f10a:	881b      	ldrh	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d001      	beq.n	800f114 <cmp_lfn+0xd0>
 800f110:	2300      	movs	r3, #0
 800f112:	e000      	b.n	800f116 <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800f114:	2301      	movs	r3, #1
}
 800f116:	4618      	mov	r0, r3
 800f118:	371c      	adds	r7, #28
 800f11a:	46bd      	mov	sp, r7
 800f11c:	bd90      	pop	{r4, r7, pc}
 800f11e:	bf00      	nop
 800f120:	080125f8 	.word	0x080125f8

0800f124 <pick_lfn>:
static
int pick_lfn (			/* 1:succeeded, 0:buffer overflow or invalid LFN entry */
	WCHAR* lfnbuf,		/* Pointer to the LFN working buffer */
	BYTE* dir			/* Pointer to the LFN entry */
)
{
 800f124:	b580      	push	{r7, lr}
 800f126:	b086      	sub	sp, #24
 800f128:	af00      	add	r7, sp, #0
 800f12a:	6078      	str	r0, [r7, #4]
 800f12c:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO is 0 */
 800f12e:	683b      	ldr	r3, [r7, #0]
 800f130:	331a      	adds	r3, #26
 800f132:	4618      	mov	r0, r3
 800f134:	f7fe ffa2 	bl	800e07c <ld_word>
 800f138:	4603      	mov	r3, r0
 800f13a:	2b00      	cmp	r3, #0
 800f13c:	d001      	beq.n	800f142 <pick_lfn+0x1e>
 800f13e:	2300      	movs	r3, #0
 800f140:	e04d      	b.n	800f1de <pick_lfn+0xba>

	i = ((dir[LDIR_Ord] & ~LLEF) - 1) * 13;	/* Offset in the LFN buffer */
 800f142:	683b      	ldr	r3, [r7, #0]
 800f144:	781b      	ldrb	r3, [r3, #0]
 800f146:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f14a:	1e5a      	subs	r2, r3, #1
 800f14c:	4613      	mov	r3, r2
 800f14e:	005b      	lsls	r3, r3, #1
 800f150:	4413      	add	r3, r2
 800f152:	009b      	lsls	r3, r3, #2
 800f154:	4413      	add	r3, r2
 800f156:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f158:	2301      	movs	r3, #1
 800f15a:	81fb      	strh	r3, [r7, #14]
 800f15c:	2300      	movs	r3, #0
 800f15e:	613b      	str	r3, [r7, #16]
 800f160:	e028      	b.n	800f1b4 <pick_lfn+0x90>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800f162:	4a21      	ldr	r2, [pc, #132]	; (800f1e8 <pick_lfn+0xc4>)
 800f164:	693b      	ldr	r3, [r7, #16]
 800f166:	4413      	add	r3, r2
 800f168:	781b      	ldrb	r3, [r3, #0]
 800f16a:	461a      	mov	r2, r3
 800f16c:	683b      	ldr	r3, [r7, #0]
 800f16e:	4413      	add	r3, r2
 800f170:	4618      	mov	r0, r3
 800f172:	f7fe ff83 	bl	800e07c <ld_word>
 800f176:	4603      	mov	r3, r0
 800f178:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 800f17a:	89fb      	ldrh	r3, [r7, #14]
 800f17c:	2b00      	cmp	r3, #0
 800f17e:	d00f      	beq.n	800f1a0 <pick_lfn+0x7c>
			if (i >= _MAX_LFN) return 0;	/* Buffer overflow? */
 800f180:	697b      	ldr	r3, [r7, #20]
 800f182:	2bfe      	cmp	r3, #254	; 0xfe
 800f184:	d901      	bls.n	800f18a <pick_lfn+0x66>
 800f186:	2300      	movs	r3, #0
 800f188:	e029      	b.n	800f1de <pick_lfn+0xba>
			lfnbuf[i++] = wc = uc;			/* Store it */
 800f18a:	89bb      	ldrh	r3, [r7, #12]
 800f18c:	81fb      	strh	r3, [r7, #14]
 800f18e:	697b      	ldr	r3, [r7, #20]
 800f190:	1c5a      	adds	r2, r3, #1
 800f192:	617a      	str	r2, [r7, #20]
 800f194:	005b      	lsls	r3, r3, #1
 800f196:	687a      	ldr	r2, [r7, #4]
 800f198:	4413      	add	r3, r2
 800f19a:	89fa      	ldrh	r2, [r7, #14]
 800f19c:	801a      	strh	r2, [r3, #0]
 800f19e:	e006      	b.n	800f1ae <pick_lfn+0x8a>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 800f1a0:	89bb      	ldrh	r3, [r7, #12]
 800f1a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1a6:	4293      	cmp	r3, r2
 800f1a8:	d001      	beq.n	800f1ae <pick_lfn+0x8a>
 800f1aa:	2300      	movs	r3, #0
 800f1ac:	e017      	b.n	800f1de <pick_lfn+0xba>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 800f1ae:	693b      	ldr	r3, [r7, #16]
 800f1b0:	3301      	adds	r3, #1
 800f1b2:	613b      	str	r3, [r7, #16]
 800f1b4:	693b      	ldr	r3, [r7, #16]
 800f1b6:	2b0c      	cmp	r3, #12
 800f1b8:	d9d3      	bls.n	800f162 <pick_lfn+0x3e>
		}
	}

	if (dir[LDIR_Ord] & LLEF) {				/* Put terminator if it is the last LFN part */
 800f1ba:	683b      	ldr	r3, [r7, #0]
 800f1bc:	781b      	ldrb	r3, [r3, #0]
 800f1be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d00a      	beq.n	800f1dc <pick_lfn+0xb8>
		if (i >= _MAX_LFN) return 0;		/* Buffer overflow? */
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	2bfe      	cmp	r3, #254	; 0xfe
 800f1ca:	d901      	bls.n	800f1d0 <pick_lfn+0xac>
 800f1cc:	2300      	movs	r3, #0
 800f1ce:	e006      	b.n	800f1de <pick_lfn+0xba>
		lfnbuf[i] = 0;
 800f1d0:	697b      	ldr	r3, [r7, #20]
 800f1d2:	005b      	lsls	r3, r3, #1
 800f1d4:	687a      	ldr	r2, [r7, #4]
 800f1d6:	4413      	add	r3, r2
 800f1d8:	2200      	movs	r2, #0
 800f1da:	801a      	strh	r2, [r3, #0]
	}

	return 1;		/* The part of LFN is valid */
 800f1dc:	2301      	movs	r3, #1
}
 800f1de:	4618      	mov	r0, r3
 800f1e0:	3718      	adds	r7, #24
 800f1e2:	46bd      	mov	sp, r7
 800f1e4:	bd80      	pop	{r7, pc}
 800f1e6:	bf00      	nop
 800f1e8:	080125f8 	.word	0x080125f8

0800f1ec <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800f1ec:	b580      	push	{r7, lr}
 800f1ee:	b088      	sub	sp, #32
 800f1f0:	af00      	add	r7, sp, #0
 800f1f2:	60f8      	str	r0, [r7, #12]
 800f1f4:	60b9      	str	r1, [r7, #8]
 800f1f6:	4611      	mov	r1, r2
 800f1f8:	461a      	mov	r2, r3
 800f1fa:	460b      	mov	r3, r1
 800f1fc:	71fb      	strb	r3, [r7, #7]
 800f1fe:	4613      	mov	r3, r2
 800f200:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 800f202:	68bb      	ldr	r3, [r7, #8]
 800f204:	330d      	adds	r3, #13
 800f206:	79ba      	ldrb	r2, [r7, #6]
 800f208:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800f20a:	68bb      	ldr	r3, [r7, #8]
 800f20c:	330b      	adds	r3, #11
 800f20e:	220f      	movs	r2, #15
 800f210:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	330c      	adds	r3, #12
 800f216:	2200      	movs	r2, #0
 800f218:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	331a      	adds	r3, #26
 800f21e:	2100      	movs	r1, #0
 800f220:	4618      	mov	r0, r3
 800f222:	f7fe ff64 	bl	800e0ee <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 800f226:	79fb      	ldrb	r3, [r7, #7]
 800f228:	1e5a      	subs	r2, r3, #1
 800f22a:	4613      	mov	r3, r2
 800f22c:	005b      	lsls	r3, r3, #1
 800f22e:	4413      	add	r3, r2
 800f230:	009b      	lsls	r3, r3, #2
 800f232:	4413      	add	r3, r2
 800f234:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 800f236:	2300      	movs	r3, #0
 800f238:	82fb      	strh	r3, [r7, #22]
 800f23a:	2300      	movs	r3, #0
 800f23c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800f23e:	8afb      	ldrh	r3, [r7, #22]
 800f240:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f244:	4293      	cmp	r3, r2
 800f246:	d007      	beq.n	800f258 <put_lfn+0x6c>
 800f248:	69fb      	ldr	r3, [r7, #28]
 800f24a:	1c5a      	adds	r2, r3, #1
 800f24c:	61fa      	str	r2, [r7, #28]
 800f24e:	005b      	lsls	r3, r3, #1
 800f250:	68fa      	ldr	r2, [r7, #12]
 800f252:	4413      	add	r3, r2
 800f254:	881b      	ldrh	r3, [r3, #0]
 800f256:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 800f258:	4a17      	ldr	r2, [pc, #92]	; (800f2b8 <put_lfn+0xcc>)
 800f25a:	69bb      	ldr	r3, [r7, #24]
 800f25c:	4413      	add	r3, r2
 800f25e:	781b      	ldrb	r3, [r3, #0]
 800f260:	461a      	mov	r2, r3
 800f262:	68bb      	ldr	r3, [r7, #8]
 800f264:	4413      	add	r3, r2
 800f266:	8afa      	ldrh	r2, [r7, #22]
 800f268:	4611      	mov	r1, r2
 800f26a:	4618      	mov	r0, r3
 800f26c:	f7fe ff3f 	bl	800e0ee <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 800f270:	8afb      	ldrh	r3, [r7, #22]
 800f272:	2b00      	cmp	r3, #0
 800f274:	d102      	bne.n	800f27c <put_lfn+0x90>
 800f276:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800f27a:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 800f27c:	69bb      	ldr	r3, [r7, #24]
 800f27e:	3301      	adds	r3, #1
 800f280:	61bb      	str	r3, [r7, #24]
 800f282:	69bb      	ldr	r3, [r7, #24]
 800f284:	2b0c      	cmp	r3, #12
 800f286:	d9da      	bls.n	800f23e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 800f288:	8afb      	ldrh	r3, [r7, #22]
 800f28a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f28e:	4293      	cmp	r3, r2
 800f290:	d006      	beq.n	800f2a0 <put_lfn+0xb4>
 800f292:	69fb      	ldr	r3, [r7, #28]
 800f294:	005b      	lsls	r3, r3, #1
 800f296:	68fa      	ldr	r2, [r7, #12]
 800f298:	4413      	add	r3, r2
 800f29a:	881b      	ldrh	r3, [r3, #0]
 800f29c:	2b00      	cmp	r3, #0
 800f29e:	d103      	bne.n	800f2a8 <put_lfn+0xbc>
 800f2a0:	79fb      	ldrb	r3, [r7, #7]
 800f2a2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f2a6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	79fa      	ldrb	r2, [r7, #7]
 800f2ac:	701a      	strb	r2, [r3, #0]
}
 800f2ae:	bf00      	nop
 800f2b0:	3720      	adds	r7, #32
 800f2b2:	46bd      	mov	sp, r7
 800f2b4:	bd80      	pop	{r7, pc}
 800f2b6:	bf00      	nop
 800f2b8:	080125f8 	.word	0x080125f8

0800f2bc <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 800f2bc:	b580      	push	{r7, lr}
 800f2be:	b08c      	sub	sp, #48	; 0x30
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	60f8      	str	r0, [r7, #12]
 800f2c4:	60b9      	str	r1, [r7, #8]
 800f2c6:	607a      	str	r2, [r7, #4]
 800f2c8:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 800f2ca:	220b      	movs	r2, #11
 800f2cc:	68b9      	ldr	r1, [r7, #8]
 800f2ce:	68f8      	ldr	r0, [r7, #12]
 800f2d0:	f7fe ff52 	bl	800e178 <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	2b05      	cmp	r3, #5
 800f2d8:	d92b      	bls.n	800f332 <gen_numname+0x76>
		sr = seq;
 800f2da:	683b      	ldr	r3, [r7, #0]
 800f2dc:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 800f2de:	e022      	b.n	800f326 <gen_numname+0x6a>
			wc = *lfn++;
 800f2e0:	687b      	ldr	r3, [r7, #4]
 800f2e2:	1c9a      	adds	r2, r3, #2
 800f2e4:	607a      	str	r2, [r7, #4]
 800f2e6:	881b      	ldrh	r3, [r3, #0]
 800f2e8:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800f2ee:	e017      	b.n	800f320 <gen_numname+0x64>
				sr = (sr << 1) + (wc & 1);
 800f2f0:	69fb      	ldr	r3, [r7, #28]
 800f2f2:	005a      	lsls	r2, r3, #1
 800f2f4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f2f6:	f003 0301 	and.w	r3, r3, #1
 800f2fa:	4413      	add	r3, r2
 800f2fc:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 800f2fe:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800f300:	085b      	lsrs	r3, r3, #1
 800f302:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 800f304:	69fb      	ldr	r3, [r7, #28]
 800f306:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d005      	beq.n	800f31a <gen_numname+0x5e>
 800f30e:	69fb      	ldr	r3, [r7, #28]
 800f310:	f483 3388 	eor.w	r3, r3, #69632	; 0x11000
 800f314:	f083 0321 	eor.w	r3, r3, #33	; 0x21
 800f318:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 800f31a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f31c:	3301      	adds	r3, #1
 800f31e:	62bb      	str	r3, [r7, #40]	; 0x28
 800f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f322:	2b0f      	cmp	r3, #15
 800f324:	d9e4      	bls.n	800f2f0 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	881b      	ldrh	r3, [r3, #0]
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d1d8      	bne.n	800f2e0 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 800f32e:	69fb      	ldr	r3, [r7, #28]
 800f330:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 800f332:	2307      	movs	r3, #7
 800f334:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 800f336:	683b      	ldr	r3, [r7, #0]
 800f338:	b2db      	uxtb	r3, r3
 800f33a:	f003 030f 	and.w	r3, r3, #15
 800f33e:	b2db      	uxtb	r3, r3
 800f340:	3330      	adds	r3, #48	; 0x30
 800f342:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 800f346:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f34a:	2b39      	cmp	r3, #57	; 0x39
 800f34c:	d904      	bls.n	800f358 <gen_numname+0x9c>
 800f34e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f352:	3307      	adds	r3, #7
 800f354:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 800f358:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f35a:	1e5a      	subs	r2, r3, #1
 800f35c:	62ba      	str	r2, [r7, #40]	; 0x28
 800f35e:	3330      	adds	r3, #48	; 0x30
 800f360:	443b      	add	r3, r7
 800f362:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800f366:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 800f36a:	683b      	ldr	r3, [r7, #0]
 800f36c:	091b      	lsrs	r3, r3, #4
 800f36e:	603b      	str	r3, [r7, #0]
	} while (seq);
 800f370:	683b      	ldr	r3, [r7, #0]
 800f372:	2b00      	cmp	r3, #0
 800f374:	d1df      	bne.n	800f336 <gen_numname+0x7a>
	ns[i] = '~';
 800f376:	f107 0214 	add.w	r2, r7, #20
 800f37a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f37c:	4413      	add	r3, r2
 800f37e:	227e      	movs	r2, #126	; 0x7e
 800f380:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 800f382:	2300      	movs	r3, #0
 800f384:	627b      	str	r3, [r7, #36]	; 0x24
 800f386:	e002      	b.n	800f38e <gen_numname+0xd2>
 800f388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f38a:	3301      	adds	r3, #1
 800f38c:	627b      	str	r3, [r7, #36]	; 0x24
 800f38e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f390:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f392:	429a      	cmp	r2, r3
 800f394:	d205      	bcs.n	800f3a2 <gen_numname+0xe6>
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f39a:	4413      	add	r3, r2
 800f39c:	781b      	ldrb	r3, [r3, #0]
 800f39e:	2b20      	cmp	r3, #32
 800f3a0:	d1f2      	bne.n	800f388 <gen_numname+0xcc>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 800f3a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3a4:	2b07      	cmp	r3, #7
 800f3a6:	d807      	bhi.n	800f3b8 <gen_numname+0xfc>
 800f3a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f3aa:	1c5a      	adds	r2, r3, #1
 800f3ac:	62ba      	str	r2, [r7, #40]	; 0x28
 800f3ae:	3330      	adds	r3, #48	; 0x30
 800f3b0:	443b      	add	r3, r7
 800f3b2:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 800f3b6:	e000      	b.n	800f3ba <gen_numname+0xfe>
 800f3b8:	2120      	movs	r1, #32
 800f3ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3bc:	1c5a      	adds	r2, r3, #1
 800f3be:	627a      	str	r2, [r7, #36]	; 0x24
 800f3c0:	68fa      	ldr	r2, [r7, #12]
 800f3c2:	4413      	add	r3, r2
 800f3c4:	460a      	mov	r2, r1
 800f3c6:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 800f3c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f3ca:	2b07      	cmp	r3, #7
 800f3cc:	d9e9      	bls.n	800f3a2 <gen_numname+0xe6>
}
 800f3ce:	bf00      	nop
 800f3d0:	bf00      	nop
 800f3d2:	3730      	adds	r7, #48	; 0x30
 800f3d4:	46bd      	mov	sp, r7
 800f3d6:	bd80      	pop	{r7, pc}

0800f3d8 <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 800f3d8:	b480      	push	{r7}
 800f3da:	b085      	sub	sp, #20
 800f3dc:	af00      	add	r7, sp, #0
 800f3de:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 800f3e0:	2300      	movs	r3, #0
 800f3e2:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 800f3e4:	230b      	movs	r3, #11
 800f3e6:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 800f3e8:	7bfb      	ldrb	r3, [r7, #15]
 800f3ea:	b2da      	uxtb	r2, r3
 800f3ec:	0852      	lsrs	r2, r2, #1
 800f3ee:	01db      	lsls	r3, r3, #7
 800f3f0:	4313      	orrs	r3, r2
 800f3f2:	b2da      	uxtb	r2, r3
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	1c59      	adds	r1, r3, #1
 800f3f8:	6079      	str	r1, [r7, #4]
 800f3fa:	781b      	ldrb	r3, [r3, #0]
 800f3fc:	4413      	add	r3, r2
 800f3fe:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 800f400:	68bb      	ldr	r3, [r7, #8]
 800f402:	3b01      	subs	r3, #1
 800f404:	60bb      	str	r3, [r7, #8]
 800f406:	68bb      	ldr	r3, [r7, #8]
 800f408:	2b00      	cmp	r3, #0
 800f40a:	d1ed      	bne.n	800f3e8 <sum_sfn+0x10>
	return sum;
 800f40c:	7bfb      	ldrb	r3, [r7, #15]
}
 800f40e:	4618      	mov	r0, r3
 800f410:	3714      	adds	r7, #20
 800f412:	46bd      	mov	sp, r7
 800f414:	bc80      	pop	{r7}
 800f416:	4770      	bx	lr

0800f418 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 800f418:	b580      	push	{r7, lr}
 800f41a:	b086      	sub	sp, #24
 800f41c:	af00      	add	r7, sp, #0
 800f41e:	6078      	str	r0, [r7, #4]
 800f420:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_NO_FILE;
 800f422:	2304      	movs	r3, #4
 800f424:	75fb      	strb	r3, [r7, #23]
	FATFS *fs = dp->obj.fs;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	613b      	str	r3, [r7, #16]
	BYTE a, c;
#if _USE_LFN != 0
	BYTE ord = 0xFF, sum = 0xFF;
 800f42c:	23ff      	movs	r3, #255	; 0xff
 800f42e:	757b      	strb	r3, [r7, #21]
 800f430:	23ff      	movs	r3, #255	; 0xff
 800f432:	753b      	strb	r3, [r7, #20]
#endif

	while (dp->sect) {
 800f434:	e081      	b.n	800f53a <dir_read+0x122>
		res = move_window(fs, dp->sect);
 800f436:	687b      	ldr	r3, [r7, #4]
 800f438:	69db      	ldr	r3, [r3, #28]
 800f43a:	4619      	mov	r1, r3
 800f43c:	6938      	ldr	r0, [r7, #16]
 800f43e:	f7ff f8bf 	bl	800e5c0 <move_window>
 800f442:	4603      	mov	r3, r0
 800f444:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f446:	7dfb      	ldrb	r3, [r7, #23]
 800f448:	2b00      	cmp	r3, #0
 800f44a:	d17c      	bne.n	800f546 <dir_read+0x12e>
		c = dp->dir[DIR_Name];	/* Test for the entry type */
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	6a1b      	ldr	r3, [r3, #32]
 800f450:	781b      	ldrb	r3, [r3, #0]
 800f452:	75bb      	strb	r3, [r7, #22]
		if (c == 0) {
 800f454:	7dbb      	ldrb	r3, [r7, #22]
 800f456:	2b00      	cmp	r3, #0
 800f458:	d102      	bne.n	800f460 <dir_read+0x48>
			res = FR_NO_FILE; break; /* Reached to end of the directory */
 800f45a:	2304      	movs	r3, #4
 800f45c:	75fb      	strb	r3, [r7, #23]
 800f45e:	e077      	b.n	800f550 <dir_read+0x138>
				}
			}
		} else
#endif
		{	/* On the FAT12/16/32 volume */
			dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;	/* Get attribute */
 800f460:	687b      	ldr	r3, [r7, #4]
 800f462:	6a1b      	ldr	r3, [r3, #32]
 800f464:	330b      	adds	r3, #11
 800f466:	781b      	ldrb	r3, [r3, #0]
 800f468:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f46c:	73fb      	strb	r3, [r7, #15]
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	7bfa      	ldrb	r2, [r7, #15]
 800f472:	719a      	strb	r2, [r3, #6]
#if _USE_LFN != 0	/* LFN configuration */
			if (c == DDEM || c == '.' || (int)((a & ~AM_ARC) == AM_VOL) != vol) {	/* An entry without valid data */
 800f474:	7dbb      	ldrb	r3, [r7, #22]
 800f476:	2be5      	cmp	r3, #229	; 0xe5
 800f478:	d00e      	beq.n	800f498 <dir_read+0x80>
 800f47a:	7dbb      	ldrb	r3, [r7, #22]
 800f47c:	2b2e      	cmp	r3, #46	; 0x2e
 800f47e:	d00b      	beq.n	800f498 <dir_read+0x80>
 800f480:	7bfb      	ldrb	r3, [r7, #15]
 800f482:	f023 0320 	bic.w	r3, r3, #32
 800f486:	2b08      	cmp	r3, #8
 800f488:	bf0c      	ite	eq
 800f48a:	2301      	moveq	r3, #1
 800f48c:	2300      	movne	r3, #0
 800f48e:	b2db      	uxtb	r3, r3
 800f490:	461a      	mov	r2, r3
 800f492:	683b      	ldr	r3, [r7, #0]
 800f494:	4293      	cmp	r3, r2
 800f496:	d002      	beq.n	800f49e <dir_read+0x86>
				ord = 0xFF;
 800f498:	23ff      	movs	r3, #255	; 0xff
 800f49a:	757b      	strb	r3, [r7, #21]
 800f49c:	e044      	b.n	800f528 <dir_read+0x110>
			} else {
				if (a == AM_LFN) {			/* An LFN entry is found */
 800f49e:	7bfb      	ldrb	r3, [r7, #15]
 800f4a0:	2b0f      	cmp	r3, #15
 800f4a2:	d12f      	bne.n	800f504 <dir_read+0xec>
					if (c & LLEF) {			/* Is it start of an LFN sequence? */
 800f4a4:	7dbb      	ldrb	r3, [r7, #22]
 800f4a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d00d      	beq.n	800f4ca <dir_read+0xb2>
						sum = dp->dir[LDIR_Chksum];
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	6a1b      	ldr	r3, [r3, #32]
 800f4b2:	7b5b      	ldrb	r3, [r3, #13]
 800f4b4:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;
 800f4b6:	7dbb      	ldrb	r3, [r7, #22]
 800f4b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f4bc:	75bb      	strb	r3, [r7, #22]
 800f4be:	7dbb      	ldrb	r3, [r7, #22]
 800f4c0:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;
 800f4c2:	687b      	ldr	r3, [r7, #4]
 800f4c4:	695a      	ldr	r2, [r3, #20]
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check LFN validity and capture it */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && pick_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f4ca:	7dba      	ldrb	r2, [r7, #22]
 800f4cc:	7d7b      	ldrb	r3, [r7, #21]
 800f4ce:	429a      	cmp	r2, r3
 800f4d0:	d115      	bne.n	800f4fe <dir_read+0xe6>
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	6a1b      	ldr	r3, [r3, #32]
 800f4d6:	330d      	adds	r3, #13
 800f4d8:	781b      	ldrb	r3, [r3, #0]
 800f4da:	7d3a      	ldrb	r2, [r7, #20]
 800f4dc:	429a      	cmp	r2, r3
 800f4de:	d10e      	bne.n	800f4fe <dir_read+0xe6>
 800f4e0:	693b      	ldr	r3, [r7, #16]
 800f4e2:	68da      	ldr	r2, [r3, #12]
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	6a1b      	ldr	r3, [r3, #32]
 800f4e8:	4619      	mov	r1, r3
 800f4ea:	4610      	mov	r0, r2
 800f4ec:	f7ff fe1a 	bl	800f124 <pick_lfn>
 800f4f0:	4603      	mov	r3, r0
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d003      	beq.n	800f4fe <dir_read+0xe6>
 800f4f6:	7d7b      	ldrb	r3, [r7, #21]
 800f4f8:	3b01      	subs	r3, #1
 800f4fa:	b2db      	uxtb	r3, r3
 800f4fc:	e000      	b.n	800f500 <dir_read+0xe8>
 800f4fe:	23ff      	movs	r3, #255	; 0xff
 800f500:	757b      	strb	r3, [r7, #21]
 800f502:	e011      	b.n	800f528 <dir_read+0x110>
				} else {					/* An SFN entry is found */
					if (ord || sum != sum_sfn(dp->dir)) {	/* Is there a valid LFN? */
 800f504:	7d7b      	ldrb	r3, [r7, #21]
 800f506:	2b00      	cmp	r3, #0
 800f508:	d109      	bne.n	800f51e <dir_read+0x106>
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	6a1b      	ldr	r3, [r3, #32]
 800f50e:	4618      	mov	r0, r3
 800f510:	f7ff ff62 	bl	800f3d8 <sum_sfn>
 800f514:	4603      	mov	r3, r0
 800f516:	461a      	mov	r2, r3
 800f518:	7d3b      	ldrb	r3, [r7, #20]
 800f51a:	4293      	cmp	r3, r2
 800f51c:	d015      	beq.n	800f54a <dir_read+0x132>
						dp->blk_ofs = 0xFFFFFFFF;			/* It has no LFN. */
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	f04f 32ff 	mov.w	r2, #4294967295
 800f524:	631a      	str	r2, [r3, #48]	; 0x30
					}
					break;
 800f526:	e010      	b.n	800f54a <dir_read+0x132>
			if (c != DDEM && c != '.' && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol) {	/* Is it a valid entry? */
				break;
			}
#endif
		}
		res = dir_next(dp, 0);		/* Next entry */
 800f528:	2100      	movs	r1, #0
 800f52a:	6878      	ldr	r0, [r7, #4]
 800f52c:	f7ff fc3f 	bl	800edae <dir_next>
 800f530:	4603      	mov	r3, r0
 800f532:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f534:	7dfb      	ldrb	r3, [r7, #23]
 800f536:	2b00      	cmp	r3, #0
 800f538:	d109      	bne.n	800f54e <dir_read+0x136>
	while (dp->sect) {
 800f53a:	687b      	ldr	r3, [r7, #4]
 800f53c:	69db      	ldr	r3, [r3, #28]
 800f53e:	2b00      	cmp	r3, #0
 800f540:	f47f af79 	bne.w	800f436 <dir_read+0x1e>
 800f544:	e004      	b.n	800f550 <dir_read+0x138>
		if (res != FR_OK) break;
 800f546:	bf00      	nop
 800f548:	e002      	b.n	800f550 <dir_read+0x138>
					break;
 800f54a:	bf00      	nop
 800f54c:	e000      	b.n	800f550 <dir_read+0x138>
		if (res != FR_OK) break;
 800f54e:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;		/* Terminate the read operation on error or EOT */
 800f550:	7dfb      	ldrb	r3, [r7, #23]
 800f552:	2b00      	cmp	r3, #0
 800f554:	d002      	beq.n	800f55c <dir_read+0x144>
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	2200      	movs	r2, #0
 800f55a:	61da      	str	r2, [r3, #28]
	return res;
 800f55c:	7dfb      	ldrb	r3, [r7, #23]
}
 800f55e:	4618      	mov	r0, r3
 800f560:	3718      	adds	r7, #24
 800f562:	46bd      	mov	sp, r7
 800f564:	bd80      	pop	{r7, pc}

0800f566 <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 800f566:	b580      	push	{r7, lr}
 800f568:	b086      	sub	sp, #24
 800f56a:	af00      	add	r7, sp, #0
 800f56c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 800f574:	2100      	movs	r1, #0
 800f576:	6878      	ldr	r0, [r7, #4]
 800f578:	f7ff fb9e 	bl	800ecb8 <dir_sdi>
 800f57c:	4603      	mov	r3, r0
 800f57e:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 800f580:	7dfb      	ldrb	r3, [r7, #23]
 800f582:	2b00      	cmp	r3, #0
 800f584:	d001      	beq.n	800f58a <dir_find+0x24>
 800f586:	7dfb      	ldrb	r3, [r7, #23]
 800f588:	e0a9      	b.n	800f6de <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f58a:	23ff      	movs	r3, #255	; 0xff
 800f58c:	753b      	strb	r3, [r7, #20]
 800f58e:	7d3b      	ldrb	r3, [r7, #20]
 800f590:	757b      	strb	r3, [r7, #21]
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	f04f 32ff 	mov.w	r2, #4294967295
 800f598:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 800f59a:	687b      	ldr	r3, [r7, #4]
 800f59c:	69db      	ldr	r3, [r3, #28]
 800f59e:	4619      	mov	r1, r3
 800f5a0:	6938      	ldr	r0, [r7, #16]
 800f5a2:	f7ff f80d 	bl	800e5c0 <move_window>
 800f5a6:	4603      	mov	r3, r0
 800f5a8:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 800f5aa:	7dfb      	ldrb	r3, [r7, #23]
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	f040 8090 	bne.w	800f6d2 <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	6a1b      	ldr	r3, [r3, #32]
 800f5b6:	781b      	ldrb	r3, [r3, #0]
 800f5b8:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 800f5ba:	7dbb      	ldrb	r3, [r7, #22]
 800f5bc:	2b00      	cmp	r3, #0
 800f5be:	d102      	bne.n	800f5c6 <dir_find+0x60>
 800f5c0:	2304      	movs	r3, #4
 800f5c2:	75fb      	strb	r3, [r7, #23]
 800f5c4:	e08a      	b.n	800f6dc <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 800f5c6:	687b      	ldr	r3, [r7, #4]
 800f5c8:	6a1b      	ldr	r3, [r3, #32]
 800f5ca:	330b      	adds	r3, #11
 800f5cc:	781b      	ldrb	r3, [r3, #0]
 800f5ce:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f5d2:	73fb      	strb	r3, [r7, #15]
 800f5d4:	687b      	ldr	r3, [r7, #4]
 800f5d6:	7bfa      	ldrb	r2, [r7, #15]
 800f5d8:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 800f5da:	7dbb      	ldrb	r3, [r7, #22]
 800f5dc:	2be5      	cmp	r3, #229	; 0xe5
 800f5de:	d007      	beq.n	800f5f0 <dir_find+0x8a>
 800f5e0:	7bfb      	ldrb	r3, [r7, #15]
 800f5e2:	f003 0308 	and.w	r3, r3, #8
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d009      	beq.n	800f5fe <dir_find+0x98>
 800f5ea:	7bfb      	ldrb	r3, [r7, #15]
 800f5ec:	2b0f      	cmp	r3, #15
 800f5ee:	d006      	beq.n	800f5fe <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f5f0:	23ff      	movs	r3, #255	; 0xff
 800f5f2:	757b      	strb	r3, [r7, #21]
 800f5f4:	687b      	ldr	r3, [r7, #4]
 800f5f6:	f04f 32ff 	mov.w	r2, #4294967295
 800f5fa:	631a      	str	r2, [r3, #48]	; 0x30
 800f5fc:	e05e      	b.n	800f6bc <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 800f5fe:	7bfb      	ldrb	r3, [r7, #15]
 800f600:	2b0f      	cmp	r3, #15
 800f602:	d136      	bne.n	800f672 <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 800f604:	687b      	ldr	r3, [r7, #4]
 800f606:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f60a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f60e:	2b00      	cmp	r3, #0
 800f610:	d154      	bne.n	800f6bc <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 800f612:	7dbb      	ldrb	r3, [r7, #22]
 800f614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f618:	2b00      	cmp	r3, #0
 800f61a:	d00d      	beq.n	800f638 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	6a1b      	ldr	r3, [r3, #32]
 800f620:	7b5b      	ldrb	r3, [r3, #13]
 800f622:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 800f624:	7dbb      	ldrb	r3, [r7, #22]
 800f626:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800f62a:	75bb      	strb	r3, [r7, #22]
 800f62c:	7dbb      	ldrb	r3, [r7, #22]
 800f62e:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	695a      	ldr	r2, [r3, #20]
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 800f638:	7dba      	ldrb	r2, [r7, #22]
 800f63a:	7d7b      	ldrb	r3, [r7, #21]
 800f63c:	429a      	cmp	r2, r3
 800f63e:	d115      	bne.n	800f66c <dir_find+0x106>
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	6a1b      	ldr	r3, [r3, #32]
 800f644:	330d      	adds	r3, #13
 800f646:	781b      	ldrb	r3, [r3, #0]
 800f648:	7d3a      	ldrb	r2, [r7, #20]
 800f64a:	429a      	cmp	r2, r3
 800f64c:	d10e      	bne.n	800f66c <dir_find+0x106>
 800f64e:	693b      	ldr	r3, [r7, #16]
 800f650:	68da      	ldr	r2, [r3, #12]
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	6a1b      	ldr	r3, [r3, #32]
 800f656:	4619      	mov	r1, r3
 800f658:	4610      	mov	r0, r2
 800f65a:	f7ff fcf3 	bl	800f044 <cmp_lfn>
 800f65e:	4603      	mov	r3, r0
 800f660:	2b00      	cmp	r3, #0
 800f662:	d003      	beq.n	800f66c <dir_find+0x106>
 800f664:	7d7b      	ldrb	r3, [r7, #21]
 800f666:	3b01      	subs	r3, #1
 800f668:	b2db      	uxtb	r3, r3
 800f66a:	e000      	b.n	800f66e <dir_find+0x108>
 800f66c:	23ff      	movs	r3, #255	; 0xff
 800f66e:	757b      	strb	r3, [r7, #21]
 800f670:	e024      	b.n	800f6bc <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f672:	7d7b      	ldrb	r3, [r7, #21]
 800f674:	2b00      	cmp	r3, #0
 800f676:	d109      	bne.n	800f68c <dir_find+0x126>
 800f678:	687b      	ldr	r3, [r7, #4]
 800f67a:	6a1b      	ldr	r3, [r3, #32]
 800f67c:	4618      	mov	r0, r3
 800f67e:	f7ff feab 	bl	800f3d8 <sum_sfn>
 800f682:	4603      	mov	r3, r0
 800f684:	461a      	mov	r2, r3
 800f686:	7d3b      	ldrb	r3, [r7, #20]
 800f688:	4293      	cmp	r3, r2
 800f68a:	d024      	beq.n	800f6d6 <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f68c:	687b      	ldr	r3, [r7, #4]
 800f68e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f692:	f003 0301 	and.w	r3, r3, #1
 800f696:	2b00      	cmp	r3, #0
 800f698:	d10a      	bne.n	800f6b0 <dir_find+0x14a>
 800f69a:	687b      	ldr	r3, [r7, #4]
 800f69c:	6a18      	ldr	r0, [r3, #32]
 800f69e:	687b      	ldr	r3, [r7, #4]
 800f6a0:	3324      	adds	r3, #36	; 0x24
 800f6a2:	220b      	movs	r2, #11
 800f6a4:	4619      	mov	r1, r3
 800f6a6:	f7fe fda1 	bl	800e1ec <mem_cmp>
 800f6aa:	4603      	mov	r3, r0
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d014      	beq.n	800f6da <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 800f6b0:	23ff      	movs	r3, #255	; 0xff
 800f6b2:	757b      	strb	r3, [r7, #21]
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	f04f 32ff 	mov.w	r2, #4294967295
 800f6ba:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 800f6bc:	2100      	movs	r1, #0
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	f7ff fb75 	bl	800edae <dir_next>
 800f6c4:	4603      	mov	r3, r0
 800f6c6:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 800f6c8:	7dfb      	ldrb	r3, [r7, #23]
 800f6ca:	2b00      	cmp	r3, #0
 800f6cc:	f43f af65 	beq.w	800f59a <dir_find+0x34>
 800f6d0:	e004      	b.n	800f6dc <dir_find+0x176>
		if (res != FR_OK) break;
 800f6d2:	bf00      	nop
 800f6d4:	e002      	b.n	800f6dc <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 800f6d6:	bf00      	nop
 800f6d8:	e000      	b.n	800f6dc <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 800f6da:	bf00      	nop

	return res;
 800f6dc:	7dfb      	ldrb	r3, [r7, #23]
}
 800f6de:	4618      	mov	r0, r3
 800f6e0:	3718      	adds	r7, #24
 800f6e2:	46bd      	mov	sp, r7
 800f6e4:	bd80      	pop	{r7, pc}
	...

0800f6e8 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 800f6e8:	b580      	push	{r7, lr}
 800f6ea:	b08c      	sub	sp, #48	; 0x30
 800f6ec:	af00      	add	r7, sp, #0
 800f6ee:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	681b      	ldr	r3, [r3, #0]
 800f6f4:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800f6fc:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800f700:	2b00      	cmp	r3, #0
 800f702:	d001      	beq.n	800f708 <dir_register+0x20>
 800f704:	2306      	movs	r3, #6
 800f706:	e0e0      	b.n	800f8ca <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 800f708:	2300      	movs	r3, #0
 800f70a:	627b      	str	r3, [r7, #36]	; 0x24
 800f70c:	e002      	b.n	800f714 <dir_register+0x2c>
 800f70e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f710:	3301      	adds	r3, #1
 800f712:	627b      	str	r3, [r7, #36]	; 0x24
 800f714:	69fb      	ldr	r3, [r7, #28]
 800f716:	68da      	ldr	r2, [r3, #12]
 800f718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f71a:	005b      	lsls	r3, r3, #1
 800f71c:	4413      	add	r3, r2
 800f71e:	881b      	ldrh	r3, [r3, #0]
 800f720:	2b00      	cmp	r3, #0
 800f722:	d1f4      	bne.n	800f70e <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 800f724:	687b      	ldr	r3, [r7, #4]
 800f726:	f103 0124 	add.w	r1, r3, #36	; 0x24
 800f72a:	f107 030c 	add.w	r3, r7, #12
 800f72e:	220c      	movs	r2, #12
 800f730:	4618      	mov	r0, r3
 800f732:	f7fe fd21 	bl	800e178 <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 800f736:	7dfb      	ldrb	r3, [r7, #23]
 800f738:	f003 0301 	and.w	r3, r3, #1
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d032      	beq.n	800f7a6 <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	2240      	movs	r2, #64	; 0x40
 800f744:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 800f748:	2301      	movs	r3, #1
 800f74a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f74c:	e016      	b.n	800f77c <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 800f74e:	687b      	ldr	r3, [r7, #4]
 800f750:	f103 0024 	add.w	r0, r3, #36	; 0x24
 800f754:	69fb      	ldr	r3, [r7, #28]
 800f756:	68da      	ldr	r2, [r3, #12]
 800f758:	f107 010c 	add.w	r1, r7, #12
 800f75c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f75e:	f7ff fdad 	bl	800f2bc <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 800f762:	6878      	ldr	r0, [r7, #4]
 800f764:	f7ff feff 	bl	800f566 <dir_find>
 800f768:	4603      	mov	r3, r0
 800f76a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 800f76e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f772:	2b00      	cmp	r3, #0
 800f774:	d106      	bne.n	800f784 <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 800f776:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f778:	3301      	adds	r3, #1
 800f77a:	62bb      	str	r3, [r7, #40]	; 0x28
 800f77c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f77e:	2b63      	cmp	r3, #99	; 0x63
 800f780:	d9e5      	bls.n	800f74e <dir_register+0x66>
 800f782:	e000      	b.n	800f786 <dir_register+0x9e>
			if (res != FR_OK) break;
 800f784:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 800f786:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f788:	2b64      	cmp	r3, #100	; 0x64
 800f78a:	d101      	bne.n	800f790 <dir_register+0xa8>
 800f78c:	2307      	movs	r3, #7
 800f78e:	e09c      	b.n	800f8ca <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 800f790:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f794:	2b04      	cmp	r3, #4
 800f796:	d002      	beq.n	800f79e <dir_register+0xb6>
 800f798:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f79c:	e095      	b.n	800f8ca <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 800f79e:	7dfa      	ldrb	r2, [r7, #23]
 800f7a0:	687b      	ldr	r3, [r7, #4]
 800f7a2:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 800f7a6:	7dfb      	ldrb	r3, [r7, #23]
 800f7a8:	f003 0302 	and.w	r3, r3, #2
 800f7ac:	2b00      	cmp	r3, #0
 800f7ae:	d007      	beq.n	800f7c0 <dir_register+0xd8>
 800f7b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b2:	330c      	adds	r3, #12
 800f7b4:	4a47      	ldr	r2, [pc, #284]	; (800f8d4 <dir_register+0x1ec>)
 800f7b6:	fba2 2303 	umull	r2, r3, r2, r3
 800f7ba:	089b      	lsrs	r3, r3, #2
 800f7bc:	3301      	adds	r3, #1
 800f7be:	e000      	b.n	800f7c2 <dir_register+0xda>
 800f7c0:	2301      	movs	r3, #1
 800f7c2:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 800f7c4:	6a39      	ldr	r1, [r7, #32]
 800f7c6:	6878      	ldr	r0, [r7, #4]
 800f7c8:	f7ff fbb6 	bl	800ef38 <dir_alloc>
 800f7cc:	4603      	mov	r3, r0
 800f7ce:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 800f7d2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f7d6:	2b00      	cmp	r3, #0
 800f7d8:	d148      	bne.n	800f86c <dir_register+0x184>
 800f7da:	6a3b      	ldr	r3, [r7, #32]
 800f7dc:	3b01      	subs	r3, #1
 800f7de:	623b      	str	r3, [r7, #32]
 800f7e0:	6a3b      	ldr	r3, [r7, #32]
 800f7e2:	2b00      	cmp	r3, #0
 800f7e4:	d042      	beq.n	800f86c <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	695a      	ldr	r2, [r3, #20]
 800f7ea:	6a3b      	ldr	r3, [r7, #32]
 800f7ec:	015b      	lsls	r3, r3, #5
 800f7ee:	1ad3      	subs	r3, r2, r3
 800f7f0:	4619      	mov	r1, r3
 800f7f2:	6878      	ldr	r0, [r7, #4]
 800f7f4:	f7ff fa60 	bl	800ecb8 <dir_sdi>
 800f7f8:	4603      	mov	r3, r0
 800f7fa:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f7fe:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f802:	2b00      	cmp	r3, #0
 800f804:	d132      	bne.n	800f86c <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	3324      	adds	r3, #36	; 0x24
 800f80a:	4618      	mov	r0, r3
 800f80c:	f7ff fde4 	bl	800f3d8 <sum_sfn>
 800f810:	4603      	mov	r3, r0
 800f812:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	69db      	ldr	r3, [r3, #28]
 800f818:	4619      	mov	r1, r3
 800f81a:	69f8      	ldr	r0, [r7, #28]
 800f81c:	f7fe fed0 	bl	800e5c0 <move_window>
 800f820:	4603      	mov	r3, r0
 800f822:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 800f826:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f82a:	2b00      	cmp	r3, #0
 800f82c:	d11d      	bne.n	800f86a <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 800f82e:	69fb      	ldr	r3, [r7, #28]
 800f830:	68d8      	ldr	r0, [r3, #12]
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	6a19      	ldr	r1, [r3, #32]
 800f836:	6a3b      	ldr	r3, [r7, #32]
 800f838:	b2da      	uxtb	r2, r3
 800f83a:	7efb      	ldrb	r3, [r7, #27]
 800f83c:	f7ff fcd6 	bl	800f1ec <put_lfn>
				fs->wflag = 1;
 800f840:	69fb      	ldr	r3, [r7, #28]
 800f842:	2201      	movs	r2, #1
 800f844:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 800f846:	2100      	movs	r1, #0
 800f848:	6878      	ldr	r0, [r7, #4]
 800f84a:	f7ff fab0 	bl	800edae <dir_next>
 800f84e:	4603      	mov	r3, r0
 800f850:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 800f854:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d107      	bne.n	800f86c <dir_register+0x184>
 800f85c:	6a3b      	ldr	r3, [r7, #32]
 800f85e:	3b01      	subs	r3, #1
 800f860:	623b      	str	r3, [r7, #32]
 800f862:	6a3b      	ldr	r3, [r7, #32]
 800f864:	2b00      	cmp	r3, #0
 800f866:	d1d5      	bne.n	800f814 <dir_register+0x12c>
 800f868:	e000      	b.n	800f86c <dir_register+0x184>
				if (res != FR_OK) break;
 800f86a:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 800f86c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f870:	2b00      	cmp	r3, #0
 800f872:	d128      	bne.n	800f8c6 <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	69db      	ldr	r3, [r3, #28]
 800f878:	4619      	mov	r1, r3
 800f87a:	69f8      	ldr	r0, [r7, #28]
 800f87c:	f7fe fea0 	bl	800e5c0 <move_window>
 800f880:	4603      	mov	r3, r0
 800f882:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 800f886:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f88a:	2b00      	cmp	r3, #0
 800f88c:	d11b      	bne.n	800f8c6 <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 800f88e:	687b      	ldr	r3, [r7, #4]
 800f890:	6a1b      	ldr	r3, [r3, #32]
 800f892:	2220      	movs	r2, #32
 800f894:	2100      	movs	r1, #0
 800f896:	4618      	mov	r0, r3
 800f898:	f7fe fc8e 	bl	800e1b8 <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 800f89c:	687b      	ldr	r3, [r7, #4]
 800f89e:	6a18      	ldr	r0, [r3, #32]
 800f8a0:	687b      	ldr	r3, [r7, #4]
 800f8a2:	3324      	adds	r3, #36	; 0x24
 800f8a4:	220b      	movs	r2, #11
 800f8a6:	4619      	mov	r1, r3
 800f8a8:	f7fe fc66 	bl	800e178 <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 800f8ac:	687b      	ldr	r3, [r7, #4]
 800f8ae:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 800f8b2:	687b      	ldr	r3, [r7, #4]
 800f8b4:	6a1b      	ldr	r3, [r3, #32]
 800f8b6:	330c      	adds	r3, #12
 800f8b8:	f002 0218 	and.w	r2, r2, #24
 800f8bc:	b2d2      	uxtb	r2, r2
 800f8be:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 800f8c0:	69fb      	ldr	r3, [r7, #28]
 800f8c2:	2201      	movs	r2, #1
 800f8c4:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 800f8c6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800f8ca:	4618      	mov	r0, r3
 800f8cc:	3730      	adds	r7, #48	; 0x30
 800f8ce:	46bd      	mov	sp, r7
 800f8d0:	bd80      	pop	{r7, pc}
 800f8d2:	bf00      	nop
 800f8d4:	4ec4ec4f 	.word	0x4ec4ec4f

0800f8d8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 800f8d8:	b580      	push	{r7, lr}
 800f8da:	b088      	sub	sp, #32
 800f8dc:	af00      	add	r7, sp, #0
 800f8de:	6078      	str	r0, [r7, #4]
 800f8e0:	6039      	str	r1, [r7, #0]
	UINT i, j;
	TCHAR c;
	DWORD tm;
#if _USE_LFN != 0
	WCHAR w, lfv;
	FATFS *fs = dp->obj.fs;
 800f8e2:	687b      	ldr	r3, [r7, #4]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	613b      	str	r3, [r7, #16]
#endif


	fno->fname[0] = 0;		/* Invaidate file info */
 800f8e8:	683b      	ldr	r3, [r7, #0]
 800f8ea:	2200      	movs	r2, #0
 800f8ec:	759a      	strb	r2, [r3, #22]
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800f8ee:	687b      	ldr	r3, [r7, #4]
 800f8f0:	69db      	ldr	r3, [r3, #28]
 800f8f2:	2b00      	cmp	r3, #0
 800f8f4:	f000 80c9 	beq.w	800fa8a <get_fileinfo+0x1b2>
		get_xdir_info(fs->dirbuf, fno);
		return;
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		if (dp->blk_ofs != 0xFFFFFFFF) {	/* Get LFN if available */
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f900:	d032      	beq.n	800f968 <get_fileinfo+0x90>
			i = j = 0;
 800f902:	2300      	movs	r3, #0
 800f904:	61bb      	str	r3, [r7, #24]
 800f906:	69bb      	ldr	r3, [r7, #24]
 800f908:	61fb      	str	r3, [r7, #28]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f90a:	e01b      	b.n	800f944 <get_fileinfo+0x6c>
#if !_LFN_UNICODE
				w = ff_convert(w, 0);		/* Unicode -> OEM */
 800f90c:	89fb      	ldrh	r3, [r7, #14]
 800f90e:	2100      	movs	r1, #0
 800f910:	4618      	mov	r0, r3
 800f912:	f001 fb23 	bl	8010f5c <ff_convert>
 800f916:	4603      	mov	r3, r0
 800f918:	81fb      	strh	r3, [r7, #14]
				if (w == 0) { i = 0; break; }	/* No LFN if it could not be converted */
 800f91a:	89fb      	ldrh	r3, [r7, #14]
 800f91c:	2b00      	cmp	r3, #0
 800f91e:	d102      	bne.n	800f926 <get_fileinfo+0x4e>
 800f920:	2300      	movs	r3, #0
 800f922:	61fb      	str	r3, [r7, #28]
 800f924:	e01a      	b.n	800f95c <get_fileinfo+0x84>
				if (_DF1S && w >= 0x100) {	/* Put 1st byte if it is a DBC (always false at SBCS cfg) */
					fno->fname[i++] = (char)(w >> 8);
				}
#endif
				if (i >= _MAX_LFN) { i = 0; break; }	/* No LFN if buffer overflow */
 800f926:	69fb      	ldr	r3, [r7, #28]
 800f928:	2bfe      	cmp	r3, #254	; 0xfe
 800f92a:	d902      	bls.n	800f932 <get_fileinfo+0x5a>
 800f92c:	2300      	movs	r3, #0
 800f92e:	61fb      	str	r3, [r7, #28]
 800f930:	e014      	b.n	800f95c <get_fileinfo+0x84>
				fno->fname[i++] = (TCHAR)w;
 800f932:	69fb      	ldr	r3, [r7, #28]
 800f934:	1c5a      	adds	r2, r3, #1
 800f936:	61fa      	str	r2, [r7, #28]
 800f938:	89fa      	ldrh	r2, [r7, #14]
 800f93a:	b2d1      	uxtb	r1, r2
 800f93c:	683a      	ldr	r2, [r7, #0]
 800f93e:	4413      	add	r3, r2
 800f940:	460a      	mov	r2, r1
 800f942:	759a      	strb	r2, [r3, #22]
			while ((w = fs->lfnbuf[j++]) != 0) {	/* Get an LFN character */
 800f944:	693b      	ldr	r3, [r7, #16]
 800f946:	68da      	ldr	r2, [r3, #12]
 800f948:	69bb      	ldr	r3, [r7, #24]
 800f94a:	1c59      	adds	r1, r3, #1
 800f94c:	61b9      	str	r1, [r7, #24]
 800f94e:	005b      	lsls	r3, r3, #1
 800f950:	4413      	add	r3, r2
 800f952:	881b      	ldrh	r3, [r3, #0]
 800f954:	81fb      	strh	r3, [r7, #14]
 800f956:	89fb      	ldrh	r3, [r7, #14]
 800f958:	2b00      	cmp	r3, #0
 800f95a:	d1d7      	bne.n	800f90c <get_fileinfo+0x34>
			}
			fno->fname[i] = 0;	/* Terminate the LFN */
 800f95c:	683a      	ldr	r2, [r7, #0]
 800f95e:	69fb      	ldr	r3, [r7, #28]
 800f960:	4413      	add	r3, r2
 800f962:	3316      	adds	r3, #22
 800f964:	2200      	movs	r2, #0
 800f966:	701a      	strb	r2, [r3, #0]
		}
	}

	i = j = 0;
 800f968:	2300      	movs	r3, #0
 800f96a:	61bb      	str	r3, [r7, #24]
 800f96c:	69bb      	ldr	r3, [r7, #24]
 800f96e:	61fb      	str	r3, [r7, #28]
	lfv = fno->fname[i];	/* LFN is exist if non-zero */
 800f970:	683a      	ldr	r2, [r7, #0]
 800f972:	69fb      	ldr	r3, [r7, #28]
 800f974:	4413      	add	r3, r2
 800f976:	3316      	adds	r3, #22
 800f978:	781b      	ldrb	r3, [r3, #0]
 800f97a:	81bb      	strh	r3, [r7, #12]
	while (i < 11) {		/* Copy name body and extension */
 800f97c:	e04c      	b.n	800fa18 <get_fileinfo+0x140>
		c = (TCHAR)dp->dir[i++];
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	6a1a      	ldr	r2, [r3, #32]
 800f982:	69fb      	ldr	r3, [r7, #28]
 800f984:	1c59      	adds	r1, r3, #1
 800f986:	61f9      	str	r1, [r7, #28]
 800f988:	4413      	add	r3, r2
 800f98a:	781b      	ldrb	r3, [r3, #0]
 800f98c:	75fb      	strb	r3, [r7, #23]
		if (c == ' ') continue;				/* Skip padding spaces */
 800f98e:	7dfb      	ldrb	r3, [r7, #23]
 800f990:	2b20      	cmp	r3, #32
 800f992:	d100      	bne.n	800f996 <get_fileinfo+0xbe>
 800f994:	e040      	b.n	800fa18 <get_fileinfo+0x140>
		if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 800f996:	7dfb      	ldrb	r3, [r7, #23]
 800f998:	2b05      	cmp	r3, #5
 800f99a:	d101      	bne.n	800f9a0 <get_fileinfo+0xc8>
 800f99c:	23e5      	movs	r3, #229	; 0xe5
 800f99e:	75fb      	strb	r3, [r7, #23]
		if (i == 9) {						/* Insert a . if extension is exist */
 800f9a0:	69fb      	ldr	r3, [r7, #28]
 800f9a2:	2b09      	cmp	r3, #9
 800f9a4:	d10f      	bne.n	800f9c6 <get_fileinfo+0xee>
			if (!lfv) fno->fname[j] = '.';
 800f9a6:	89bb      	ldrh	r3, [r7, #12]
 800f9a8:	2b00      	cmp	r3, #0
 800f9aa:	d105      	bne.n	800f9b8 <get_fileinfo+0xe0>
 800f9ac:	683a      	ldr	r2, [r7, #0]
 800f9ae:	69bb      	ldr	r3, [r7, #24]
 800f9b0:	4413      	add	r3, r2
 800f9b2:	3316      	adds	r3, #22
 800f9b4:	222e      	movs	r2, #46	; 0x2e
 800f9b6:	701a      	strb	r2, [r3, #0]
			fno->altname[j++] = '.';
 800f9b8:	69bb      	ldr	r3, [r7, #24]
 800f9ba:	1c5a      	adds	r2, r3, #1
 800f9bc:	61ba      	str	r2, [r7, #24]
 800f9be:	683a      	ldr	r2, [r7, #0]
 800f9c0:	4413      	add	r3, r2
 800f9c2:	222e      	movs	r2, #46	; 0x2e
 800f9c4:	725a      	strb	r2, [r3, #9]
			c = c << 8 | dp->dir[i++];
		}
		c = ff_convert(c, 1);	/* OEM -> Unicode */
		if (!c) c = '?';
#endif
		fno->altname[j] = c;
 800f9c6:	683a      	ldr	r2, [r7, #0]
 800f9c8:	69bb      	ldr	r3, [r7, #24]
 800f9ca:	4413      	add	r3, r2
 800f9cc:	3309      	adds	r3, #9
 800f9ce:	7dfa      	ldrb	r2, [r7, #23]
 800f9d0:	701a      	strb	r2, [r3, #0]
		if (!lfv) {
 800f9d2:	89bb      	ldrh	r3, [r7, #12]
 800f9d4:	2b00      	cmp	r3, #0
 800f9d6:	d11c      	bne.n	800fa12 <get_fileinfo+0x13a>
			if (IsUpper(c) && (dp->dir[DIR_NTres] & ((i >= 9) ? NS_EXT : NS_BODY))) {
 800f9d8:	7dfb      	ldrb	r3, [r7, #23]
 800f9da:	2b40      	cmp	r3, #64	; 0x40
 800f9dc:	d913      	bls.n	800fa06 <get_fileinfo+0x12e>
 800f9de:	7dfb      	ldrb	r3, [r7, #23]
 800f9e0:	2b5a      	cmp	r3, #90	; 0x5a
 800f9e2:	d810      	bhi.n	800fa06 <get_fileinfo+0x12e>
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	6a1b      	ldr	r3, [r3, #32]
 800f9e8:	330c      	adds	r3, #12
 800f9ea:	781b      	ldrb	r3, [r3, #0]
 800f9ec:	461a      	mov	r2, r3
 800f9ee:	69fb      	ldr	r3, [r7, #28]
 800f9f0:	2b08      	cmp	r3, #8
 800f9f2:	d901      	bls.n	800f9f8 <get_fileinfo+0x120>
 800f9f4:	2310      	movs	r3, #16
 800f9f6:	e000      	b.n	800f9fa <get_fileinfo+0x122>
 800f9f8:	2308      	movs	r3, #8
 800f9fa:	4013      	ands	r3, r2
 800f9fc:	2b00      	cmp	r3, #0
 800f9fe:	d002      	beq.n	800fa06 <get_fileinfo+0x12e>
				c += 0x20;			/* To lower */
 800fa00:	7dfb      	ldrb	r3, [r7, #23]
 800fa02:	3320      	adds	r3, #32
 800fa04:	75fb      	strb	r3, [r7, #23]
			}
			fno->fname[j] = c;
 800fa06:	683a      	ldr	r2, [r7, #0]
 800fa08:	69bb      	ldr	r3, [r7, #24]
 800fa0a:	4413      	add	r3, r2
 800fa0c:	3316      	adds	r3, #22
 800fa0e:	7dfa      	ldrb	r2, [r7, #23]
 800fa10:	701a      	strb	r2, [r3, #0]
		}
		j++;
 800fa12:	69bb      	ldr	r3, [r7, #24]
 800fa14:	3301      	adds	r3, #1
 800fa16:	61bb      	str	r3, [r7, #24]
	while (i < 11) {		/* Copy name body and extension */
 800fa18:	69fb      	ldr	r3, [r7, #28]
 800fa1a:	2b0a      	cmp	r3, #10
 800fa1c:	d9af      	bls.n	800f97e <get_fileinfo+0xa6>
	}
	if (!lfv) {
 800fa1e:	89bb      	ldrh	r3, [r7, #12]
 800fa20:	2b00      	cmp	r3, #0
 800fa22:	d10d      	bne.n	800fa40 <get_fileinfo+0x168>
		fno->fname[j] = 0;
 800fa24:	683a      	ldr	r2, [r7, #0]
 800fa26:	69bb      	ldr	r3, [r7, #24]
 800fa28:	4413      	add	r3, r2
 800fa2a:	3316      	adds	r3, #22
 800fa2c:	2200      	movs	r2, #0
 800fa2e:	701a      	strb	r2, [r3, #0]
		if (!dp->dir[DIR_NTres]) j = 0;	/* Altname is no longer needed if neither LFN nor case info is exist. */
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	6a1b      	ldr	r3, [r3, #32]
 800fa34:	330c      	adds	r3, #12
 800fa36:	781b      	ldrb	r3, [r3, #0]
 800fa38:	2b00      	cmp	r3, #0
 800fa3a:	d101      	bne.n	800fa40 <get_fileinfo+0x168>
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	61bb      	str	r3, [r7, #24]
	}
	fno->altname[j] = 0;	/* Terminate the SFN */
 800fa40:	683a      	ldr	r2, [r7, #0]
 800fa42:	69bb      	ldr	r3, [r7, #24]
 800fa44:	4413      	add	r3, r2
 800fa46:	3309      	adds	r3, #9
 800fa48:	2200      	movs	r2, #0
 800fa4a:	701a      	strb	r2, [r3, #0]
		fno->fname[j++] = c;
	}
	fno->fname[j] = 0;
#endif

	fno->fattrib = dp->dir[DIR_Attr];				/* Attribute */
 800fa4c:	687b      	ldr	r3, [r7, #4]
 800fa4e:	6a1b      	ldr	r3, [r3, #32]
 800fa50:	7ada      	ldrb	r2, [r3, #11]
 800fa52:	683b      	ldr	r3, [r7, #0]
 800fa54:	721a      	strb	r2, [r3, #8]
	fno->fsize = ld_dword(dp->dir + DIR_FileSize);	/* Size */
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	6a1b      	ldr	r3, [r3, #32]
 800fa5a:	331c      	adds	r3, #28
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7fe fb24 	bl	800e0aa <ld_dword>
 800fa62:	4602      	mov	r2, r0
 800fa64:	683b      	ldr	r3, [r7, #0]
 800fa66:	601a      	str	r2, [r3, #0]
	tm = ld_dword(dp->dir + DIR_ModTime);			/* Timestamp */
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	6a1b      	ldr	r3, [r3, #32]
 800fa6c:	3316      	adds	r3, #22
 800fa6e:	4618      	mov	r0, r3
 800fa70:	f7fe fb1b 	bl	800e0aa <ld_dword>
 800fa74:	60b8      	str	r0, [r7, #8]
	fno->ftime = (WORD)tm; fno->fdate = (WORD)(tm >> 16);
 800fa76:	68bb      	ldr	r3, [r7, #8]
 800fa78:	b29a      	uxth	r2, r3
 800fa7a:	683b      	ldr	r3, [r7, #0]
 800fa7c:	80da      	strh	r2, [r3, #6]
 800fa7e:	68bb      	ldr	r3, [r7, #8]
 800fa80:	0c1b      	lsrs	r3, r3, #16
 800fa82:	b29a      	uxth	r2, r3
 800fa84:	683b      	ldr	r3, [r7, #0]
 800fa86:	809a      	strh	r2, [r3, #4]
 800fa88:	e000      	b.n	800fa8c <get_fileinfo+0x1b4>
	if (!dp->sect) return;	/* Exit if read pointer has reached end of directory */
 800fa8a:	bf00      	nop
}
 800fa8c:	3720      	adds	r7, #32
 800fa8e:	46bd      	mov	sp, r7
 800fa90:	bd80      	pop	{r7, pc}
	...

0800fa94 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 800fa94:	b580      	push	{r7, lr}
 800fa96:	b08a      	sub	sp, #40	; 0x28
 800fa98:	af00      	add	r7, sp, #0
 800fa9a:	6078      	str	r0, [r7, #4]
 800fa9c:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 800fa9e:	683b      	ldr	r3, [r7, #0]
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	613b      	str	r3, [r7, #16]
 800faa4:	687b      	ldr	r3, [r7, #4]
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	68db      	ldr	r3, [r3, #12]
 800faaa:	60fb      	str	r3, [r7, #12]
 800faac:	2300      	movs	r3, #0
 800faae:	617b      	str	r3, [r7, #20]
 800fab0:	697b      	ldr	r3, [r7, #20]
 800fab2:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 800fab4:	69bb      	ldr	r3, [r7, #24]
 800fab6:	1c5a      	adds	r2, r3, #1
 800fab8:	61ba      	str	r2, [r7, #24]
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	4413      	add	r3, r2
 800fabe:	781b      	ldrb	r3, [r3, #0]
 800fac0:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 800fac2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fac4:	2b1f      	cmp	r3, #31
 800fac6:	d940      	bls.n	800fb4a <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 800fac8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800faca:	2b2f      	cmp	r3, #47	; 0x2f
 800facc:	d006      	beq.n	800fadc <create_name+0x48>
 800face:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fad0:	2b5c      	cmp	r3, #92	; 0x5c
 800fad2:	d110      	bne.n	800faf6 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 800fad4:	e002      	b.n	800fadc <create_name+0x48>
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	3301      	adds	r3, #1
 800fada:	61bb      	str	r3, [r7, #24]
 800fadc:	693a      	ldr	r2, [r7, #16]
 800fade:	69bb      	ldr	r3, [r7, #24]
 800fae0:	4413      	add	r3, r2
 800fae2:	781b      	ldrb	r3, [r3, #0]
 800fae4:	2b2f      	cmp	r3, #47	; 0x2f
 800fae6:	d0f6      	beq.n	800fad6 <create_name+0x42>
 800fae8:	693a      	ldr	r2, [r7, #16]
 800faea:	69bb      	ldr	r3, [r7, #24]
 800faec:	4413      	add	r3, r2
 800faee:	781b      	ldrb	r3, [r3, #0]
 800faf0:	2b5c      	cmp	r3, #92	; 0x5c
 800faf2:	d0f0      	beq.n	800fad6 <create_name+0x42>
			break;
 800faf4:	e02a      	b.n	800fb4c <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 800faf6:	697b      	ldr	r3, [r7, #20]
 800faf8:	2bfe      	cmp	r3, #254	; 0xfe
 800fafa:	d901      	bls.n	800fb00 <create_name+0x6c>
 800fafc:	2306      	movs	r3, #6
 800fafe:	e17d      	b.n	800fdfc <create_name+0x368>
#if !_LFN_UNICODE
		w &= 0xFF;
 800fb00:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb02:	b2db      	uxtb	r3, r3
 800fb04:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 800fb06:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb08:	2101      	movs	r1, #1
 800fb0a:	4618      	mov	r0, r3
 800fb0c:	f001 fa26 	bl	8010f5c <ff_convert>
 800fb10:	4603      	mov	r3, r0
 800fb12:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 800fb14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb16:	2b00      	cmp	r3, #0
 800fb18:	d101      	bne.n	800fb1e <create_name+0x8a>
 800fb1a:	2306      	movs	r3, #6
 800fb1c:	e16e      	b.n	800fdfc <create_name+0x368>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 800fb1e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb20:	2b7f      	cmp	r3, #127	; 0x7f
 800fb22:	d809      	bhi.n	800fb38 <create_name+0xa4>
 800fb24:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb26:	4619      	mov	r1, r3
 800fb28:	488d      	ldr	r0, [pc, #564]	; (800fd60 <create_name+0x2cc>)
 800fb2a:	f7fe fb85 	bl	800e238 <chk_chr>
 800fb2e:	4603      	mov	r3, r0
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	d001      	beq.n	800fb38 <create_name+0xa4>
 800fb34:	2306      	movs	r3, #6
 800fb36:	e161      	b.n	800fdfc <create_name+0x368>
		lfn[di++] = w;					/* Store the Unicode character */
 800fb38:	697b      	ldr	r3, [r7, #20]
 800fb3a:	1c5a      	adds	r2, r3, #1
 800fb3c:	617a      	str	r2, [r7, #20]
 800fb3e:	005b      	lsls	r3, r3, #1
 800fb40:	68fa      	ldr	r2, [r7, #12]
 800fb42:	4413      	add	r3, r2
 800fb44:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fb46:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 800fb48:	e7b4      	b.n	800fab4 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 800fb4a:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 800fb4c:	693a      	ldr	r2, [r7, #16]
 800fb4e:	69bb      	ldr	r3, [r7, #24]
 800fb50:	441a      	add	r2, r3
 800fb52:	683b      	ldr	r3, [r7, #0]
 800fb54:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 800fb56:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb58:	2b1f      	cmp	r3, #31
 800fb5a:	d801      	bhi.n	800fb60 <create_name+0xcc>
 800fb5c:	2304      	movs	r3, #4
 800fb5e:	e000      	b.n	800fb62 <create_name+0xce>
 800fb60:	2300      	movs	r3, #0
 800fb62:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fb66:	e011      	b.n	800fb8c <create_name+0xf8>
		w = lfn[di - 1];
 800fb68:	697b      	ldr	r3, [r7, #20]
 800fb6a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fb6e:	3b01      	subs	r3, #1
 800fb70:	005b      	lsls	r3, r3, #1
 800fb72:	68fa      	ldr	r2, [r7, #12]
 800fb74:	4413      	add	r3, r2
 800fb76:	881b      	ldrh	r3, [r3, #0]
 800fb78:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 800fb7a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb7c:	2b20      	cmp	r3, #32
 800fb7e:	d002      	beq.n	800fb86 <create_name+0xf2>
 800fb80:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fb82:	2b2e      	cmp	r3, #46	; 0x2e
 800fb84:	d106      	bne.n	800fb94 <create_name+0x100>
		di--;
 800fb86:	697b      	ldr	r3, [r7, #20]
 800fb88:	3b01      	subs	r3, #1
 800fb8a:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 800fb8c:	697b      	ldr	r3, [r7, #20]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d1ea      	bne.n	800fb68 <create_name+0xd4>
 800fb92:	e000      	b.n	800fb96 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 800fb94:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 800fb96:	697b      	ldr	r3, [r7, #20]
 800fb98:	005b      	lsls	r3, r3, #1
 800fb9a:	68fa      	ldr	r2, [r7, #12]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	2200      	movs	r2, #0
 800fba0:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 800fba2:	697b      	ldr	r3, [r7, #20]
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d101      	bne.n	800fbac <create_name+0x118>
 800fba8:	2306      	movs	r3, #6
 800fbaa:	e127      	b.n	800fdfc <create_name+0x368>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 800fbac:	687b      	ldr	r3, [r7, #4]
 800fbae:	3324      	adds	r3, #36	; 0x24
 800fbb0:	220b      	movs	r2, #11
 800fbb2:	2120      	movs	r1, #32
 800fbb4:	4618      	mov	r0, r3
 800fbb6:	f7fe faff 	bl	800e1b8 <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 800fbba:	2300      	movs	r3, #0
 800fbbc:	61bb      	str	r3, [r7, #24]
 800fbbe:	e002      	b.n	800fbc6 <create_name+0x132>
 800fbc0:	69bb      	ldr	r3, [r7, #24]
 800fbc2:	3301      	adds	r3, #1
 800fbc4:	61bb      	str	r3, [r7, #24]
 800fbc6:	69bb      	ldr	r3, [r7, #24]
 800fbc8:	005b      	lsls	r3, r3, #1
 800fbca:	68fa      	ldr	r2, [r7, #12]
 800fbcc:	4413      	add	r3, r2
 800fbce:	881b      	ldrh	r3, [r3, #0]
 800fbd0:	2b20      	cmp	r3, #32
 800fbd2:	d0f5      	beq.n	800fbc0 <create_name+0x12c>
 800fbd4:	69bb      	ldr	r3, [r7, #24]
 800fbd6:	005b      	lsls	r3, r3, #1
 800fbd8:	68fa      	ldr	r2, [r7, #12]
 800fbda:	4413      	add	r3, r2
 800fbdc:	881b      	ldrh	r3, [r3, #0]
 800fbde:	2b2e      	cmp	r3, #46	; 0x2e
 800fbe0:	d0ee      	beq.n	800fbc0 <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800fbe2:	69bb      	ldr	r3, [r7, #24]
 800fbe4:	2b00      	cmp	r3, #0
 800fbe6:	d009      	beq.n	800fbfc <create_name+0x168>
 800fbe8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fbec:	f043 0303 	orr.w	r3, r3, #3
 800fbf0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 800fbf4:	e002      	b.n	800fbfc <create_name+0x168>
 800fbf6:	697b      	ldr	r3, [r7, #20]
 800fbf8:	3b01      	subs	r3, #1
 800fbfa:	617b      	str	r3, [r7, #20]
 800fbfc:	697b      	ldr	r3, [r7, #20]
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	d009      	beq.n	800fc16 <create_name+0x182>
 800fc02:	697b      	ldr	r3, [r7, #20]
 800fc04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800fc08:	3b01      	subs	r3, #1
 800fc0a:	005b      	lsls	r3, r3, #1
 800fc0c:	68fa      	ldr	r2, [r7, #12]
 800fc0e:	4413      	add	r3, r2
 800fc10:	881b      	ldrh	r3, [r3, #0]
 800fc12:	2b2e      	cmp	r3, #46	; 0x2e
 800fc14:	d1ef      	bne.n	800fbf6 <create_name+0x162>

	i = b = 0; ni = 8;
 800fc16:	2300      	movs	r3, #0
 800fc18:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fc1c:	2300      	movs	r3, #0
 800fc1e:	623b      	str	r3, [r7, #32]
 800fc20:	2308      	movs	r3, #8
 800fc22:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 800fc24:	69bb      	ldr	r3, [r7, #24]
 800fc26:	1c5a      	adds	r2, r3, #1
 800fc28:	61ba      	str	r2, [r7, #24]
 800fc2a:	005b      	lsls	r3, r3, #1
 800fc2c:	68fa      	ldr	r2, [r7, #12]
 800fc2e:	4413      	add	r3, r2
 800fc30:	881b      	ldrh	r3, [r3, #0]
 800fc32:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 800fc34:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc36:	2b00      	cmp	r3, #0
 800fc38:	f000 8090 	beq.w	800fd5c <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 800fc3c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc3e:	2b20      	cmp	r3, #32
 800fc40:	d006      	beq.n	800fc50 <create_name+0x1bc>
 800fc42:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fc44:	2b2e      	cmp	r3, #46	; 0x2e
 800fc46:	d10a      	bne.n	800fc5e <create_name+0x1ca>
 800fc48:	69ba      	ldr	r2, [r7, #24]
 800fc4a:	697b      	ldr	r3, [r7, #20]
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d006      	beq.n	800fc5e <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800fc50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc54:	f043 0303 	orr.w	r3, r3, #3
 800fc58:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc5c:	e07d      	b.n	800fd5a <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 800fc5e:	6a3a      	ldr	r2, [r7, #32]
 800fc60:	69fb      	ldr	r3, [r7, #28]
 800fc62:	429a      	cmp	r2, r3
 800fc64:	d203      	bcs.n	800fc6e <create_name+0x1da>
 800fc66:	69ba      	ldr	r2, [r7, #24]
 800fc68:	697b      	ldr	r3, [r7, #20]
 800fc6a:	429a      	cmp	r2, r3
 800fc6c:	d123      	bne.n	800fcb6 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 800fc6e:	69fb      	ldr	r3, [r7, #28]
 800fc70:	2b0b      	cmp	r3, #11
 800fc72:	d106      	bne.n	800fc82 <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 800fc74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc78:	f043 0303 	orr.w	r3, r3, #3
 800fc7c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fc80:	e075      	b.n	800fd6e <create_name+0x2da>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 800fc82:	69ba      	ldr	r2, [r7, #24]
 800fc84:	697b      	ldr	r3, [r7, #20]
 800fc86:	429a      	cmp	r2, r3
 800fc88:	d005      	beq.n	800fc96 <create_name+0x202>
 800fc8a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fc8e:	f043 0303 	orr.w	r3, r3, #3
 800fc92:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 800fc96:	69ba      	ldr	r2, [r7, #24]
 800fc98:	697b      	ldr	r3, [r7, #20]
 800fc9a:	429a      	cmp	r2, r3
 800fc9c:	d866      	bhi.n	800fd6c <create_name+0x2d8>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 800fc9e:	697b      	ldr	r3, [r7, #20]
 800fca0:	61bb      	str	r3, [r7, #24]
 800fca2:	2308      	movs	r3, #8
 800fca4:	623b      	str	r3, [r7, #32]
 800fca6:	230b      	movs	r3, #11
 800fca8:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 800fcaa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fcb4:	e051      	b.n	800fd5a <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 800fcb6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcb8:	2b7f      	cmp	r3, #127	; 0x7f
 800fcba:	d914      	bls.n	800fce6 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 800fcbc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcbe:	2100      	movs	r1, #0
 800fcc0:	4618      	mov	r0, r3
 800fcc2:	f001 f94b 	bl	8010f5c <ff_convert>
 800fcc6:	4603      	mov	r3, r0
 800fcc8:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 800fcca:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fccc:	2b00      	cmp	r3, #0
 800fcce:	d004      	beq.n	800fcda <create_name+0x246>
 800fcd0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcd2:	3b80      	subs	r3, #128	; 0x80
 800fcd4:	4a23      	ldr	r2, [pc, #140]	; (800fd64 <create_name+0x2d0>)
 800fcd6:	5cd3      	ldrb	r3, [r2, r3]
 800fcd8:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 800fcda:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcde:	f043 0302 	orr.w	r3, r3, #2
 800fce2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 800fce6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fce8:	2b00      	cmp	r3, #0
 800fcea:	d007      	beq.n	800fcfc <create_name+0x268>
 800fcec:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fcee:	4619      	mov	r1, r3
 800fcf0:	481d      	ldr	r0, [pc, #116]	; (800fd68 <create_name+0x2d4>)
 800fcf2:	f7fe faa1 	bl	800e238 <chk_chr>
 800fcf6:	4603      	mov	r3, r0
 800fcf8:	2b00      	cmp	r3, #0
 800fcfa:	d008      	beq.n	800fd0e <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 800fcfc:	235f      	movs	r3, #95	; 0x5f
 800fcfe:	84bb      	strh	r3, [r7, #36]	; 0x24
 800fd00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fd04:	f043 0303 	orr.w	r3, r3, #3
 800fd08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800fd0c:	e01b      	b.n	800fd46 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800fd0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd10:	2b40      	cmp	r3, #64	; 0x40
 800fd12:	d909      	bls.n	800fd28 <create_name+0x294>
 800fd14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd16:	2b5a      	cmp	r3, #90	; 0x5a
 800fd18:	d806      	bhi.n	800fd28 <create_name+0x294>
					b |= 2;
 800fd1a:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd1e:	f043 0302 	orr.w	r3, r3, #2
 800fd22:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd26:	e00e      	b.n	800fd46 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 800fd28:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd2a:	2b60      	cmp	r3, #96	; 0x60
 800fd2c:	d90b      	bls.n	800fd46 <create_name+0x2b2>
 800fd2e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd30:	2b7a      	cmp	r3, #122	; 0x7a
 800fd32:	d808      	bhi.n	800fd46 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 800fd34:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd38:	f043 0301 	orr.w	r3, r3, #1
 800fd3c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800fd40:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800fd42:	3b20      	subs	r3, #32
 800fd44:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 800fd46:	6a3b      	ldr	r3, [r7, #32]
 800fd48:	1c5a      	adds	r2, r3, #1
 800fd4a:	623a      	str	r2, [r7, #32]
 800fd4c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800fd4e:	b2d1      	uxtb	r1, r2
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	4413      	add	r3, r2
 800fd54:	460a      	mov	r2, r1
 800fd56:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 800fd5a:	e763      	b.n	800fc24 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 800fd5c:	bf00      	nop
 800fd5e:	e006      	b.n	800fd6e <create_name+0x2da>
 800fd60:	080124b8 	.word	0x080124b8
 800fd64:	08012578 	.word	0x08012578
 800fd68:	080124c4 	.word	0x080124c4
			if (si > di) break;			/* No extension */
 800fd6c:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800fd74:	2be5      	cmp	r3, #229	; 0xe5
 800fd76:	d103      	bne.n	800fd80 <create_name+0x2ec>
 800fd78:	687b      	ldr	r3, [r7, #4]
 800fd7a:	2205      	movs	r2, #5
 800fd7c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 800fd80:	69fb      	ldr	r3, [r7, #28]
 800fd82:	2b08      	cmp	r3, #8
 800fd84:	d104      	bne.n	800fd90 <create_name+0x2fc>
 800fd86:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd8a:	009b      	lsls	r3, r3, #2
 800fd8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 800fd90:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fd94:	f003 030c 	and.w	r3, r3, #12
 800fd98:	2b0c      	cmp	r3, #12
 800fd9a:	d005      	beq.n	800fda8 <create_name+0x314>
 800fd9c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fda0:	f003 0303 	and.w	r3, r3, #3
 800fda4:	2b03      	cmp	r3, #3
 800fda6:	d105      	bne.n	800fdb4 <create_name+0x320>
 800fda8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdac:	f043 0302 	orr.w	r3, r3, #2
 800fdb0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 800fdb4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdb8:	f003 0302 	and.w	r3, r3, #2
 800fdbc:	2b00      	cmp	r3, #0
 800fdbe:	d117      	bne.n	800fdf0 <create_name+0x35c>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 800fdc0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fdc4:	f003 0303 	and.w	r3, r3, #3
 800fdc8:	2b01      	cmp	r3, #1
 800fdca:	d105      	bne.n	800fdd8 <create_name+0x344>
 800fdcc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fdd0:	f043 0310 	orr.w	r3, r3, #16
 800fdd4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 800fdd8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800fddc:	f003 030c 	and.w	r3, r3, #12
 800fde0:	2b04      	cmp	r3, #4
 800fde2:	d105      	bne.n	800fdf0 <create_name+0x35c>
 800fde4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fde8:	f043 0308 	orr.w	r3, r3, #8
 800fdec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 800fdf6:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800fdfa:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800fdfc:	4618      	mov	r0, r3
 800fdfe:	3728      	adds	r7, #40	; 0x28
 800fe00:	46bd      	mov	sp, r7
 800fe02:	bd80      	pop	{r7, pc}

0800fe04 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 800fe04:	b580      	push	{r7, lr}
 800fe06:	b086      	sub	sp, #24
 800fe08:	af00      	add	r7, sp, #0
 800fe0a:	6078      	str	r0, [r7, #4]
 800fe0c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800fe0e:	687b      	ldr	r3, [r7, #4]
 800fe10:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800fe12:	693b      	ldr	r3, [r7, #16]
 800fe14:	681b      	ldr	r3, [r3, #0]
 800fe16:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 800fe18:	e002      	b.n	800fe20 <follow_path+0x1c>
 800fe1a:	683b      	ldr	r3, [r7, #0]
 800fe1c:	3301      	adds	r3, #1
 800fe1e:	603b      	str	r3, [r7, #0]
 800fe20:	683b      	ldr	r3, [r7, #0]
 800fe22:	781b      	ldrb	r3, [r3, #0]
 800fe24:	2b2f      	cmp	r3, #47	; 0x2f
 800fe26:	d0f8      	beq.n	800fe1a <follow_path+0x16>
 800fe28:	683b      	ldr	r3, [r7, #0]
 800fe2a:	781b      	ldrb	r3, [r3, #0]
 800fe2c:	2b5c      	cmp	r3, #92	; 0x5c
 800fe2e:	d0f4      	beq.n	800fe1a <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800fe30:	693b      	ldr	r3, [r7, #16]
 800fe32:	2200      	movs	r2, #0
 800fe34:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 800fe36:	683b      	ldr	r3, [r7, #0]
 800fe38:	781b      	ldrb	r3, [r3, #0]
 800fe3a:	2b1f      	cmp	r3, #31
 800fe3c:	d80a      	bhi.n	800fe54 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	2280      	movs	r2, #128	; 0x80
 800fe42:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 800fe46:	2100      	movs	r1, #0
 800fe48:	6878      	ldr	r0, [r7, #4]
 800fe4a:	f7fe ff35 	bl	800ecb8 <dir_sdi>
 800fe4e:	4603      	mov	r3, r0
 800fe50:	75fb      	strb	r3, [r7, #23]
 800fe52:	e043      	b.n	800fedc <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fe54:	463b      	mov	r3, r7
 800fe56:	4619      	mov	r1, r3
 800fe58:	6878      	ldr	r0, [r7, #4]
 800fe5a:	f7ff fe1b 	bl	800fa94 <create_name>
 800fe5e:	4603      	mov	r3, r0
 800fe60:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 800fe62:	7dfb      	ldrb	r3, [r7, #23]
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d134      	bne.n	800fed2 <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 800fe68:	6878      	ldr	r0, [r7, #4]
 800fe6a:	f7ff fb7c 	bl	800f566 <dir_find>
 800fe6e:	4603      	mov	r3, r0
 800fe70:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 800fe78:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 800fe7a:	7dfb      	ldrb	r3, [r7, #23]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d00a      	beq.n	800fe96 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800fe80:	7dfb      	ldrb	r3, [r7, #23]
 800fe82:	2b04      	cmp	r3, #4
 800fe84:	d127      	bne.n	800fed6 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800fe86:	7afb      	ldrb	r3, [r7, #11]
 800fe88:	f003 0304 	and.w	r3, r3, #4
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d122      	bne.n	800fed6 <follow_path+0xd2>
 800fe90:	2305      	movs	r3, #5
 800fe92:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 800fe94:	e01f      	b.n	800fed6 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800fe96:	7afb      	ldrb	r3, [r7, #11]
 800fe98:	f003 0304 	and.w	r3, r3, #4
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d11c      	bne.n	800feda <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 800fea0:	693b      	ldr	r3, [r7, #16]
 800fea2:	799b      	ldrb	r3, [r3, #6]
 800fea4:	f003 0310 	and.w	r3, r3, #16
 800fea8:	2b00      	cmp	r3, #0
 800feaa:	d102      	bne.n	800feb2 <follow_path+0xae>
				res = FR_NO_PATH; break;
 800feac:	2305      	movs	r3, #5
 800feae:	75fb      	strb	r3, [r7, #23]
 800feb0:	e014      	b.n	800fedc <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 800feb2:	68fb      	ldr	r3, [r7, #12]
 800feb4:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800feb8:	687b      	ldr	r3, [r7, #4]
 800feba:	695b      	ldr	r3, [r3, #20]
 800febc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800fec0:	4413      	add	r3, r2
 800fec2:	4619      	mov	r1, r3
 800fec4:	68f8      	ldr	r0, [r7, #12]
 800fec6:	f7ff f87e 	bl	800efc6 <ld_clust>
 800feca:	4602      	mov	r2, r0
 800fecc:	693b      	ldr	r3, [r7, #16]
 800fece:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800fed0:	e7c0      	b.n	800fe54 <follow_path+0x50>
			if (res != FR_OK) break;
 800fed2:	bf00      	nop
 800fed4:	e002      	b.n	800fedc <follow_path+0xd8>
				break;
 800fed6:	bf00      	nop
 800fed8:	e000      	b.n	800fedc <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800feda:	bf00      	nop
			}
		}
	}

	return res;
 800fedc:	7dfb      	ldrb	r3, [r7, #23]
}
 800fede:	4618      	mov	r0, r3
 800fee0:	3718      	adds	r7, #24
 800fee2:	46bd      	mov	sp, r7
 800fee4:	bd80      	pop	{r7, pc}

0800fee6 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800fee6:	b480      	push	{r7}
 800fee8:	b087      	sub	sp, #28
 800feea:	af00      	add	r7, sp, #0
 800feec:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800feee:	f04f 33ff 	mov.w	r3, #4294967295
 800fef2:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 800fef4:	687b      	ldr	r3, [r7, #4]
 800fef6:	681b      	ldr	r3, [r3, #0]
 800fef8:	2b00      	cmp	r3, #0
 800fefa:	d031      	beq.n	800ff60 <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 800fefc:	687b      	ldr	r3, [r7, #4]
 800fefe:	681b      	ldr	r3, [r3, #0]
 800ff00:	617b      	str	r3, [r7, #20]
 800ff02:	e002      	b.n	800ff0a <get_ldnumber+0x24>
 800ff04:	697b      	ldr	r3, [r7, #20]
 800ff06:	3301      	adds	r3, #1
 800ff08:	617b      	str	r3, [r7, #20]
 800ff0a:	697b      	ldr	r3, [r7, #20]
 800ff0c:	781b      	ldrb	r3, [r3, #0]
 800ff0e:	2b1f      	cmp	r3, #31
 800ff10:	d903      	bls.n	800ff1a <get_ldnumber+0x34>
 800ff12:	697b      	ldr	r3, [r7, #20]
 800ff14:	781b      	ldrb	r3, [r3, #0]
 800ff16:	2b3a      	cmp	r3, #58	; 0x3a
 800ff18:	d1f4      	bne.n	800ff04 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	781b      	ldrb	r3, [r3, #0]
 800ff1e:	2b3a      	cmp	r3, #58	; 0x3a
 800ff20:	d11c      	bne.n	800ff5c <get_ldnumber+0x76>
			tp = *path;
 800ff22:	687b      	ldr	r3, [r7, #4]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 800ff28:	68fb      	ldr	r3, [r7, #12]
 800ff2a:	1c5a      	adds	r2, r3, #1
 800ff2c:	60fa      	str	r2, [r7, #12]
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	3b30      	subs	r3, #48	; 0x30
 800ff32:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 800ff34:	68bb      	ldr	r3, [r7, #8]
 800ff36:	2b09      	cmp	r3, #9
 800ff38:	d80e      	bhi.n	800ff58 <get_ldnumber+0x72>
 800ff3a:	68fa      	ldr	r2, [r7, #12]
 800ff3c:	697b      	ldr	r3, [r7, #20]
 800ff3e:	429a      	cmp	r2, r3
 800ff40:	d10a      	bne.n	800ff58 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800ff42:	68bb      	ldr	r3, [r7, #8]
 800ff44:	2b00      	cmp	r3, #0
 800ff46:	d107      	bne.n	800ff58 <get_ldnumber+0x72>
					vol = (int)i;
 800ff48:	68bb      	ldr	r3, [r7, #8]
 800ff4a:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 800ff4c:	697b      	ldr	r3, [r7, #20]
 800ff4e:	3301      	adds	r3, #1
 800ff50:	617b      	str	r3, [r7, #20]
 800ff52:	687b      	ldr	r3, [r7, #4]
 800ff54:	697a      	ldr	r2, [r7, #20]
 800ff56:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 800ff58:	693b      	ldr	r3, [r7, #16]
 800ff5a:	e002      	b.n	800ff62 <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 800ff5c:	2300      	movs	r3, #0
 800ff5e:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 800ff60:	693b      	ldr	r3, [r7, #16]
}
 800ff62:	4618      	mov	r0, r3
 800ff64:	371c      	adds	r7, #28
 800ff66:	46bd      	mov	sp, r7
 800ff68:	bc80      	pop	{r7}
 800ff6a:	4770      	bx	lr

0800ff6c <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 800ff6c:	b580      	push	{r7, lr}
 800ff6e:	b082      	sub	sp, #8
 800ff70:	af00      	add	r7, sp, #0
 800ff72:	6078      	str	r0, [r7, #4]
 800ff74:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2200      	movs	r2, #0
 800ff7a:	70da      	strb	r2, [r3, #3]
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ff82:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 800ff84:	6839      	ldr	r1, [r7, #0]
 800ff86:	6878      	ldr	r0, [r7, #4]
 800ff88:	f7fe fb1a 	bl	800e5c0 <move_window>
 800ff8c:	4603      	mov	r3, r0
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d001      	beq.n	800ff96 <check_fs+0x2a>
 800ff92:	2304      	movs	r3, #4
 800ff94:	e038      	b.n	8010008 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 800ff96:	687b      	ldr	r3, [r7, #4]
 800ff98:	3334      	adds	r3, #52	; 0x34
 800ff9a:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 800ff9e:	4618      	mov	r0, r3
 800ffa0:	f7fe f86c 	bl	800e07c <ld_word>
 800ffa4:	4603      	mov	r3, r0
 800ffa6:	461a      	mov	r2, r3
 800ffa8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 800ffac:	429a      	cmp	r2, r3
 800ffae:	d001      	beq.n	800ffb4 <check_fs+0x48>
 800ffb0:	2303      	movs	r3, #3
 800ffb2:	e029      	b.n	8010008 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 800ffb4:	687b      	ldr	r3, [r7, #4]
 800ffb6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ffba:	2be9      	cmp	r3, #233	; 0xe9
 800ffbc:	d009      	beq.n	800ffd2 <check_fs+0x66>
 800ffbe:	687b      	ldr	r3, [r7, #4]
 800ffc0:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800ffc4:	2beb      	cmp	r3, #235	; 0xeb
 800ffc6:	d11e      	bne.n	8010006 <check_fs+0x9a>
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800ffce:	2b90      	cmp	r3, #144	; 0x90
 800ffd0:	d119      	bne.n	8010006 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 800ffd2:	687b      	ldr	r3, [r7, #4]
 800ffd4:	3334      	adds	r3, #52	; 0x34
 800ffd6:	3336      	adds	r3, #54	; 0x36
 800ffd8:	4618      	mov	r0, r3
 800ffda:	f7fe f866 	bl	800e0aa <ld_dword>
 800ffde:	4603      	mov	r3, r0
 800ffe0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800ffe4:	4a0a      	ldr	r2, [pc, #40]	; (8010010 <check_fs+0xa4>)
 800ffe6:	4293      	cmp	r3, r2
 800ffe8:	d101      	bne.n	800ffee <check_fs+0x82>
 800ffea:	2300      	movs	r3, #0
 800ffec:	e00c      	b.n	8010008 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	3334      	adds	r3, #52	; 0x34
 800fff2:	3352      	adds	r3, #82	; 0x52
 800fff4:	4618      	mov	r0, r3
 800fff6:	f7fe f858 	bl	800e0aa <ld_dword>
 800fffa:	4603      	mov	r3, r0
 800fffc:	4a05      	ldr	r2, [pc, #20]	; (8010014 <check_fs+0xa8>)
 800fffe:	4293      	cmp	r3, r2
 8010000:	d101      	bne.n	8010006 <check_fs+0x9a>
 8010002:	2300      	movs	r3, #0
 8010004:	e000      	b.n	8010008 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8010006:	2302      	movs	r3, #2
}
 8010008:	4618      	mov	r0, r3
 801000a:	3708      	adds	r7, #8
 801000c:	46bd      	mov	sp, r7
 801000e:	bd80      	pop	{r7, pc}
 8010010:	00544146 	.word	0x00544146
 8010014:	33544146 	.word	0x33544146

08010018 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8010018:	b580      	push	{r7, lr}
 801001a:	b096      	sub	sp, #88	; 0x58
 801001c:	af00      	add	r7, sp, #0
 801001e:	60f8      	str	r0, [r7, #12]
 8010020:	60b9      	str	r1, [r7, #8]
 8010022:	4613      	mov	r3, r2
 8010024:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8010026:	68bb      	ldr	r3, [r7, #8]
 8010028:	2200      	movs	r2, #0
 801002a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 801002c:	68f8      	ldr	r0, [r7, #12]
 801002e:	f7ff ff5a 	bl	800fee6 <get_ldnumber>
 8010032:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8010034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010036:	2b00      	cmp	r3, #0
 8010038:	da01      	bge.n	801003e <find_volume+0x26>
 801003a:	230b      	movs	r3, #11
 801003c:	e230      	b.n	80104a0 <find_volume+0x488>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 801003e:	4aa1      	ldr	r2, [pc, #644]	; (80102c4 <find_volume+0x2ac>)
 8010040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010042:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010046:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8010048:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801004a:	2b00      	cmp	r3, #0
 801004c:	d101      	bne.n	8010052 <find_volume+0x3a>
 801004e:	230c      	movs	r3, #12
 8010050:	e226      	b.n	80104a0 <find_volume+0x488>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 8010052:	68bb      	ldr	r3, [r7, #8]
 8010054:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8010056:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 8010058:	79fb      	ldrb	r3, [r7, #7]
 801005a:	f023 0301 	bic.w	r3, r3, #1
 801005e:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 8010060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010062:	781b      	ldrb	r3, [r3, #0]
 8010064:	2b00      	cmp	r3, #0
 8010066:	d01a      	beq.n	801009e <find_volume+0x86>
		stat = disk_status(fs->drv);
 8010068:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801006a:	785b      	ldrb	r3, [r3, #1]
 801006c:	4618      	mov	r0, r3
 801006e:	f7fd ff67 	bl	800df40 <disk_status>
 8010072:	4603      	mov	r3, r0
 8010074:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 8010078:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801007c:	f003 0301 	and.w	r3, r3, #1
 8010080:	2b00      	cmp	r3, #0
 8010082:	d10c      	bne.n	801009e <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 8010084:	79fb      	ldrb	r3, [r7, #7]
 8010086:	2b00      	cmp	r3, #0
 8010088:	d007      	beq.n	801009a <find_volume+0x82>
 801008a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801008e:	f003 0304 	and.w	r3, r3, #4
 8010092:	2b00      	cmp	r3, #0
 8010094:	d001      	beq.n	801009a <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 8010096:	230a      	movs	r3, #10
 8010098:	e202      	b.n	80104a0 <find_volume+0x488>
			}
			return FR_OK;				/* The file system object is valid */
 801009a:	2300      	movs	r3, #0
 801009c:	e200      	b.n	80104a0 <find_volume+0x488>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 801009e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100a0:	2200      	movs	r2, #0
 80100a2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80100a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80100a6:	b2da      	uxtb	r2, r3
 80100a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100aa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80100ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80100ae:	785b      	ldrb	r3, [r3, #1]
 80100b0:	4618      	mov	r0, r3
 80100b2:	f7fd ff5f 	bl	800df74 <disk_initialize>
 80100b6:	4603      	mov	r3, r0
 80100b8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 80100bc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100c0:	f003 0301 	and.w	r3, r3, #1
 80100c4:	2b00      	cmp	r3, #0
 80100c6:	d001      	beq.n	80100cc <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 80100c8:	2303      	movs	r3, #3
 80100ca:	e1e9      	b.n	80104a0 <find_volume+0x488>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 80100cc:	79fb      	ldrb	r3, [r7, #7]
 80100ce:	2b00      	cmp	r3, #0
 80100d0:	d007      	beq.n	80100e2 <find_volume+0xca>
 80100d2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80100d6:	f003 0304 	and.w	r3, r3, #4
 80100da:	2b00      	cmp	r3, #0
 80100dc:	d001      	beq.n	80100e2 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 80100de:	230a      	movs	r3, #10
 80100e0:	e1de      	b.n	80104a0 <find_volume+0x488>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 80100e2:	2300      	movs	r3, #0
 80100e4:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 80100e6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80100e8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80100ea:	f7ff ff3f 	bl	800ff6c <check_fs>
 80100ee:	4603      	mov	r3, r0
 80100f0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 80100f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80100f8:	2b02      	cmp	r3, #2
 80100fa:	d149      	bne.n	8010190 <find_volume+0x178>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 80100fc:	2300      	movs	r3, #0
 80100fe:	643b      	str	r3, [r7, #64]	; 0x40
 8010100:	e01e      	b.n	8010140 <find_volume+0x128>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8010102:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010104:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8010108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801010a:	011b      	lsls	r3, r3, #4
 801010c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8010110:	4413      	add	r3, r2
 8010112:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8010114:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010116:	3304      	adds	r3, #4
 8010118:	781b      	ldrb	r3, [r3, #0]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d006      	beq.n	801012c <find_volume+0x114>
 801011e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010120:	3308      	adds	r3, #8
 8010122:	4618      	mov	r0, r3
 8010124:	f7fd ffc1 	bl	800e0aa <ld_dword>
 8010128:	4602      	mov	r2, r0
 801012a:	e000      	b.n	801012e <find_volume+0x116>
 801012c:	2200      	movs	r2, #0
 801012e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010130:	009b      	lsls	r3, r3, #2
 8010132:	3358      	adds	r3, #88	; 0x58
 8010134:	443b      	add	r3, r7
 8010136:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 801013a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801013c:	3301      	adds	r3, #1
 801013e:	643b      	str	r3, [r7, #64]	; 0x40
 8010140:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010142:	2b03      	cmp	r3, #3
 8010144:	d9dd      	bls.n	8010102 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8010146:	2300      	movs	r3, #0
 8010148:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 801014a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801014c:	2b00      	cmp	r3, #0
 801014e:	d002      	beq.n	8010156 <find_volume+0x13e>
 8010150:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010152:	3b01      	subs	r3, #1
 8010154:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 8010156:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010158:	009b      	lsls	r3, r3, #2
 801015a:	3358      	adds	r3, #88	; 0x58
 801015c:	443b      	add	r3, r7
 801015e:	f853 3c44 	ldr.w	r3, [r3, #-68]
 8010162:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 8010164:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8010166:	2b00      	cmp	r3, #0
 8010168:	d005      	beq.n	8010176 <find_volume+0x15e>
 801016a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 801016c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801016e:	f7ff fefd 	bl	800ff6c <check_fs>
 8010172:	4603      	mov	r3, r0
 8010174:	e000      	b.n	8010178 <find_volume+0x160>
 8010176:	2303      	movs	r3, #3
 8010178:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 801017c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010180:	2b01      	cmp	r3, #1
 8010182:	d905      	bls.n	8010190 <find_volume+0x178>
 8010184:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010186:	3301      	adds	r3, #1
 8010188:	643b      	str	r3, [r7, #64]	; 0x40
 801018a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801018c:	2b03      	cmp	r3, #3
 801018e:	d9e2      	bls.n	8010156 <find_volume+0x13e>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8010190:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8010194:	2b04      	cmp	r3, #4
 8010196:	d101      	bne.n	801019c <find_volume+0x184>
 8010198:	2301      	movs	r3, #1
 801019a:	e181      	b.n	80104a0 <find_volume+0x488>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 801019c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80101a0:	2b01      	cmp	r3, #1
 80101a2:	d901      	bls.n	80101a8 <find_volume+0x190>
 80101a4:	230d      	movs	r3, #13
 80101a6:	e17b      	b.n	80104a0 <find_volume+0x488>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80101a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101aa:	3334      	adds	r3, #52	; 0x34
 80101ac:	330b      	adds	r3, #11
 80101ae:	4618      	mov	r0, r3
 80101b0:	f7fd ff64 	bl	800e07c <ld_word>
 80101b4:	4603      	mov	r3, r0
 80101b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80101ba:	d001      	beq.n	80101c0 <find_volume+0x1a8>
 80101bc:	230d      	movs	r3, #13
 80101be:	e16f      	b.n	80104a0 <find_volume+0x488>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 80101c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101c2:	3334      	adds	r3, #52	; 0x34
 80101c4:	3316      	adds	r3, #22
 80101c6:	4618      	mov	r0, r3
 80101c8:	f7fd ff58 	bl	800e07c <ld_word>
 80101cc:	4603      	mov	r3, r0
 80101ce:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 80101d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d106      	bne.n	80101e4 <find_volume+0x1cc>
 80101d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101d8:	3334      	adds	r3, #52	; 0x34
 80101da:	3324      	adds	r3, #36	; 0x24
 80101dc:	4618      	mov	r0, r3
 80101de:	f7fd ff64 	bl	800e0aa <ld_dword>
 80101e2:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 80101e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80101e8:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 80101ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101ec:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 80101f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f2:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 80101f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101f6:	789b      	ldrb	r3, [r3, #2]
 80101f8:	2b01      	cmp	r3, #1
 80101fa:	d005      	beq.n	8010208 <find_volume+0x1f0>
 80101fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80101fe:	789b      	ldrb	r3, [r3, #2]
 8010200:	2b02      	cmp	r3, #2
 8010202:	d001      	beq.n	8010208 <find_volume+0x1f0>
 8010204:	230d      	movs	r3, #13
 8010206:	e14b      	b.n	80104a0 <find_volume+0x488>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 8010208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801020a:	789b      	ldrb	r3, [r3, #2]
 801020c:	461a      	mov	r2, r3
 801020e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010210:	fb02 f303 	mul.w	r3, r2, r3
 8010214:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 8010216:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010218:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 801021c:	b29a      	uxth	r2, r3
 801021e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010220:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8010222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010224:	895b      	ldrh	r3, [r3, #10]
 8010226:	2b00      	cmp	r3, #0
 8010228:	d008      	beq.n	801023c <find_volume+0x224>
 801022a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801022c:	895b      	ldrh	r3, [r3, #10]
 801022e:	461a      	mov	r2, r3
 8010230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010232:	895b      	ldrh	r3, [r3, #10]
 8010234:	3b01      	subs	r3, #1
 8010236:	4013      	ands	r3, r2
 8010238:	2b00      	cmp	r3, #0
 801023a:	d001      	beq.n	8010240 <find_volume+0x228>
 801023c:	230d      	movs	r3, #13
 801023e:	e12f      	b.n	80104a0 <find_volume+0x488>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8010240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010242:	3334      	adds	r3, #52	; 0x34
 8010244:	3311      	adds	r3, #17
 8010246:	4618      	mov	r0, r3
 8010248:	f7fd ff18 	bl	800e07c <ld_word>
 801024c:	4603      	mov	r3, r0
 801024e:	461a      	mov	r2, r3
 8010250:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010252:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 8010254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010256:	891b      	ldrh	r3, [r3, #8]
 8010258:	f003 030f 	and.w	r3, r3, #15
 801025c:	b29b      	uxth	r3, r3
 801025e:	2b00      	cmp	r3, #0
 8010260:	d001      	beq.n	8010266 <find_volume+0x24e>
 8010262:	230d      	movs	r3, #13
 8010264:	e11c      	b.n	80104a0 <find_volume+0x488>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 8010266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010268:	3334      	adds	r3, #52	; 0x34
 801026a:	3313      	adds	r3, #19
 801026c:	4618      	mov	r0, r3
 801026e:	f7fd ff05 	bl	800e07c <ld_word>
 8010272:	4603      	mov	r3, r0
 8010274:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 8010276:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010278:	2b00      	cmp	r3, #0
 801027a:	d106      	bne.n	801028a <find_volume+0x272>
 801027c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801027e:	3334      	adds	r3, #52	; 0x34
 8010280:	3320      	adds	r3, #32
 8010282:	4618      	mov	r0, r3
 8010284:	f7fd ff11 	bl	800e0aa <ld_dword>
 8010288:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 801028a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801028c:	3334      	adds	r3, #52	; 0x34
 801028e:	330e      	adds	r3, #14
 8010290:	4618      	mov	r0, r3
 8010292:	f7fd fef3 	bl	800e07c <ld_word>
 8010296:	4603      	mov	r3, r0
 8010298:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 801029a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801029c:	2b00      	cmp	r3, #0
 801029e:	d101      	bne.n	80102a4 <find_volume+0x28c>
 80102a0:	230d      	movs	r3, #13
 80102a2:	e0fd      	b.n	80104a0 <find_volume+0x488>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80102a4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80102a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80102a8:	4413      	add	r3, r2
 80102aa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102ac:	8912      	ldrh	r2, [r2, #8]
 80102ae:	0912      	lsrs	r2, r2, #4
 80102b0:	b292      	uxth	r2, r2
 80102b2:	4413      	add	r3, r2
 80102b4:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 80102b6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102ba:	429a      	cmp	r2, r3
 80102bc:	d204      	bcs.n	80102c8 <find_volume+0x2b0>
 80102be:	230d      	movs	r3, #13
 80102c0:	e0ee      	b.n	80104a0 <find_volume+0x488>
 80102c2:	bf00      	nop
 80102c4:	20000ed0 	.word	0x20000ed0
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 80102c8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80102ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80102d0:	8952      	ldrh	r2, [r2, #10]
 80102d2:	fbb3 f3f2 	udiv	r3, r3, r2
 80102d6:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 80102d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d101      	bne.n	80102e2 <find_volume+0x2ca>
 80102de:	230d      	movs	r3, #13
 80102e0:	e0de      	b.n	80104a0 <find_volume+0x488>
		fmt = FS_FAT32;
 80102e2:	2303      	movs	r3, #3
 80102e4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 80102e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102ea:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80102ee:	4293      	cmp	r3, r2
 80102f0:	d802      	bhi.n	80102f8 <find_volume+0x2e0>
 80102f2:	2302      	movs	r3, #2
 80102f4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 80102f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102fa:	f640 72f5 	movw	r2, #4085	; 0xff5
 80102fe:	4293      	cmp	r3, r2
 8010300:	d802      	bhi.n	8010308 <find_volume+0x2f0>
 8010302:	2301      	movs	r3, #1
 8010304:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 8010308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801030a:	1c9a      	adds	r2, r3, #2
 801030c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801030e:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8010310:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010312:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010314:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8010316:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801031a:	441a      	add	r2, r3
 801031c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801031e:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8010320:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010324:	441a      	add	r2, r3
 8010326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010328:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 801032a:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801032e:	2b03      	cmp	r3, #3
 8010330:	d11e      	bne.n	8010370 <find_volume+0x358>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8010332:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010334:	3334      	adds	r3, #52	; 0x34
 8010336:	332a      	adds	r3, #42	; 0x2a
 8010338:	4618      	mov	r0, r3
 801033a:	f7fd fe9f 	bl	800e07c <ld_word>
 801033e:	4603      	mov	r3, r0
 8010340:	2b00      	cmp	r3, #0
 8010342:	d001      	beq.n	8010348 <find_volume+0x330>
 8010344:	230d      	movs	r3, #13
 8010346:	e0ab      	b.n	80104a0 <find_volume+0x488>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 8010348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801034a:	891b      	ldrh	r3, [r3, #8]
 801034c:	2b00      	cmp	r3, #0
 801034e:	d001      	beq.n	8010354 <find_volume+0x33c>
 8010350:	230d      	movs	r3, #13
 8010352:	e0a5      	b.n	80104a0 <find_volume+0x488>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 8010354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010356:	3334      	adds	r3, #52	; 0x34
 8010358:	332c      	adds	r3, #44	; 0x2c
 801035a:	4618      	mov	r0, r3
 801035c:	f7fd fea5 	bl	800e0aa <ld_dword>
 8010360:	4602      	mov	r2, r0
 8010362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010364:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 8010366:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010368:	699b      	ldr	r3, [r3, #24]
 801036a:	009b      	lsls	r3, r3, #2
 801036c:	647b      	str	r3, [r7, #68]	; 0x44
 801036e:	e01f      	b.n	80103b0 <find_volume+0x398>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 8010370:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010372:	891b      	ldrh	r3, [r3, #8]
 8010374:	2b00      	cmp	r3, #0
 8010376:	d101      	bne.n	801037c <find_volume+0x364>
 8010378:	230d      	movs	r3, #13
 801037a:	e091      	b.n	80104a0 <find_volume+0x488>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 801037c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801037e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010382:	441a      	add	r2, r3
 8010384:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010386:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8010388:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 801038c:	2b02      	cmp	r3, #2
 801038e:	d103      	bne.n	8010398 <find_volume+0x380>
 8010390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010392:	699b      	ldr	r3, [r3, #24]
 8010394:	005b      	lsls	r3, r3, #1
 8010396:	e00a      	b.n	80103ae <find_volume+0x396>
 8010398:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801039a:	699a      	ldr	r2, [r3, #24]
 801039c:	4613      	mov	r3, r2
 801039e:	005b      	lsls	r3, r3, #1
 80103a0:	4413      	add	r3, r2
 80103a2:	085a      	lsrs	r2, r3, #1
 80103a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103a6:	699b      	ldr	r3, [r3, #24]
 80103a8:	f003 0301 	and.w	r3, r3, #1
 80103ac:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 80103ae:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 80103b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103b2:	69da      	ldr	r2, [r3, #28]
 80103b4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80103b6:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 80103ba:	0a5b      	lsrs	r3, r3, #9
 80103bc:	429a      	cmp	r2, r3
 80103be:	d201      	bcs.n	80103c4 <find_volume+0x3ac>
 80103c0:	230d      	movs	r3, #13
 80103c2:	e06d      	b.n	80104a0 <find_volume+0x488>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 80103c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103c6:	f04f 32ff 	mov.w	r2, #4294967295
 80103ca:	615a      	str	r2, [r3, #20]
 80103cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103ce:	695a      	ldr	r2, [r3, #20]
 80103d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d2:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 80103d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103d6:	2280      	movs	r2, #128	; 0x80
 80103d8:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 80103da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80103de:	2b03      	cmp	r3, #3
 80103e0:	d149      	bne.n	8010476 <find_volume+0x45e>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 80103e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80103e4:	3334      	adds	r3, #52	; 0x34
 80103e6:	3330      	adds	r3, #48	; 0x30
 80103e8:	4618      	mov	r0, r3
 80103ea:	f7fd fe47 	bl	800e07c <ld_word>
 80103ee:	4603      	mov	r3, r0
 80103f0:	2b01      	cmp	r3, #1
 80103f2:	d140      	bne.n	8010476 <find_volume+0x45e>
			&& move_window(fs, bsect + 1) == FR_OK)
 80103f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80103f6:	3301      	adds	r3, #1
 80103f8:	4619      	mov	r1, r3
 80103fa:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80103fc:	f7fe f8e0 	bl	800e5c0 <move_window>
 8010400:	4603      	mov	r3, r0
 8010402:	2b00      	cmp	r3, #0
 8010404:	d137      	bne.n	8010476 <find_volume+0x45e>
		{
			fs->fsi_flag = 0;
 8010406:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010408:	2200      	movs	r2, #0
 801040a:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 801040c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801040e:	3334      	adds	r3, #52	; 0x34
 8010410:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8010414:	4618      	mov	r0, r3
 8010416:	f7fd fe31 	bl	800e07c <ld_word>
 801041a:	4603      	mov	r3, r0
 801041c:	461a      	mov	r2, r3
 801041e:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8010422:	429a      	cmp	r2, r3
 8010424:	d127      	bne.n	8010476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8010426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010428:	3334      	adds	r3, #52	; 0x34
 801042a:	4618      	mov	r0, r3
 801042c:	f7fd fe3d 	bl	800e0aa <ld_dword>
 8010430:	4603      	mov	r3, r0
 8010432:	4a1d      	ldr	r2, [pc, #116]	; (80104a8 <find_volume+0x490>)
 8010434:	4293      	cmp	r3, r2
 8010436:	d11e      	bne.n	8010476 <find_volume+0x45e>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 8010438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801043a:	3334      	adds	r3, #52	; 0x34
 801043c:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8010440:	4618      	mov	r0, r3
 8010442:	f7fd fe32 	bl	800e0aa <ld_dword>
 8010446:	4603      	mov	r3, r0
 8010448:	4a18      	ldr	r2, [pc, #96]	; (80104ac <find_volume+0x494>)
 801044a:	4293      	cmp	r3, r2
 801044c:	d113      	bne.n	8010476 <find_volume+0x45e>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 801044e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010450:	3334      	adds	r3, #52	; 0x34
 8010452:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 8010456:	4618      	mov	r0, r3
 8010458:	f7fd fe27 	bl	800e0aa <ld_dword>
 801045c:	4602      	mov	r2, r0
 801045e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010460:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 8010462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010464:	3334      	adds	r3, #52	; 0x34
 8010466:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 801046a:	4618      	mov	r0, r3
 801046c:	f7fd fe1d 	bl	800e0aa <ld_dword>
 8010470:	4602      	mov	r2, r0
 8010472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010474:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 8010476:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010478:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 801047c:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 801047e:	4b0c      	ldr	r3, [pc, #48]	; (80104b0 <find_volume+0x498>)
 8010480:	881b      	ldrh	r3, [r3, #0]
 8010482:	3301      	adds	r3, #1
 8010484:	b29a      	uxth	r2, r3
 8010486:	4b0a      	ldr	r3, [pc, #40]	; (80104b0 <find_volume+0x498>)
 8010488:	801a      	strh	r2, [r3, #0]
 801048a:	4b09      	ldr	r3, [pc, #36]	; (80104b0 <find_volume+0x498>)
 801048c:	881a      	ldrh	r2, [r3, #0]
 801048e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010490:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 8010492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010494:	4a07      	ldr	r2, [pc, #28]	; (80104b4 <find_volume+0x49c>)
 8010496:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 8010498:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 801049a:	f7fe f829 	bl	800e4f0 <clear_lock>
#endif
	return FR_OK;
 801049e:	2300      	movs	r3, #0
}
 80104a0:	4618      	mov	r0, r3
 80104a2:	3758      	adds	r7, #88	; 0x58
 80104a4:	46bd      	mov	sp, r7
 80104a6:	bd80      	pop	{r7, pc}
 80104a8:	41615252 	.word	0x41615252
 80104ac:	61417272 	.word	0x61417272
 80104b0:	20000ed4 	.word	0x20000ed4
 80104b4:	20000ef8 	.word	0x20000ef8

080104b8 <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b084      	sub	sp, #16
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 80104c2:	2309      	movs	r3, #9
 80104c4:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d01c      	beq.n	8010506 <validate+0x4e>
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	681b      	ldr	r3, [r3, #0]
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d018      	beq.n	8010506 <validate+0x4e>
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	781b      	ldrb	r3, [r3, #0]
 80104da:	2b00      	cmp	r3, #0
 80104dc:	d013      	beq.n	8010506 <validate+0x4e>
 80104de:	687b      	ldr	r3, [r7, #4]
 80104e0:	889a      	ldrh	r2, [r3, #4]
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	681b      	ldr	r3, [r3, #0]
 80104e6:	88db      	ldrh	r3, [r3, #6]
 80104e8:	429a      	cmp	r2, r3
 80104ea:	d10c      	bne.n	8010506 <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 80104ec:	687b      	ldr	r3, [r7, #4]
 80104ee:	681b      	ldr	r3, [r3, #0]
 80104f0:	785b      	ldrb	r3, [r3, #1]
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fd fd24 	bl	800df40 <disk_status>
 80104f8:	4603      	mov	r3, r0
 80104fa:	f003 0301 	and.w	r3, r3, #1
 80104fe:	2b00      	cmp	r3, #0
 8010500:	d101      	bne.n	8010506 <validate+0x4e>
			res = FR_OK;
 8010502:	2300      	movs	r3, #0
 8010504:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 8010506:	7bfb      	ldrb	r3, [r7, #15]
 8010508:	2b00      	cmp	r3, #0
 801050a:	d102      	bne.n	8010512 <validate+0x5a>
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	e000      	b.n	8010514 <validate+0x5c>
 8010512:	2300      	movs	r3, #0
 8010514:	683a      	ldr	r2, [r7, #0]
 8010516:	6013      	str	r3, [r2, #0]
	return res;
 8010518:	7bfb      	ldrb	r3, [r7, #15]
}
 801051a:	4618      	mov	r0, r3
 801051c:	3710      	adds	r7, #16
 801051e:	46bd      	mov	sp, r7
 8010520:	bd80      	pop	{r7, pc}
	...

08010524 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b088      	sub	sp, #32
 8010528:	af00      	add	r7, sp, #0
 801052a:	60f8      	str	r0, [r7, #12]
 801052c:	60b9      	str	r1, [r7, #8]
 801052e:	4613      	mov	r3, r2
 8010530:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8010532:	68bb      	ldr	r3, [r7, #8]
 8010534:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 8010536:	f107 0310 	add.w	r3, r7, #16
 801053a:	4618      	mov	r0, r3
 801053c:	f7ff fcd3 	bl	800fee6 <get_ldnumber>
 8010540:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8010542:	69fb      	ldr	r3, [r7, #28]
 8010544:	2b00      	cmp	r3, #0
 8010546:	da01      	bge.n	801054c <f_mount+0x28>
 8010548:	230b      	movs	r3, #11
 801054a:	e02b      	b.n	80105a4 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 801054c:	4a17      	ldr	r2, [pc, #92]	; (80105ac <f_mount+0x88>)
 801054e:	69fb      	ldr	r3, [r7, #28]
 8010550:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010554:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	2b00      	cmp	r3, #0
 801055a:	d005      	beq.n	8010568 <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 801055c:	69b8      	ldr	r0, [r7, #24]
 801055e:	f7fd ffc7 	bl	800e4f0 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8010562:	69bb      	ldr	r3, [r7, #24]
 8010564:	2200      	movs	r2, #0
 8010566:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8010568:	68fb      	ldr	r3, [r7, #12]
 801056a:	2b00      	cmp	r3, #0
 801056c:	d002      	beq.n	8010574 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 801056e:	68fb      	ldr	r3, [r7, #12]
 8010570:	2200      	movs	r2, #0
 8010572:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8010574:	68fa      	ldr	r2, [r7, #12]
 8010576:	490d      	ldr	r1, [pc, #52]	; (80105ac <f_mount+0x88>)
 8010578:	69fb      	ldr	r3, [r7, #28]
 801057a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 801057e:	68fb      	ldr	r3, [r7, #12]
 8010580:	2b00      	cmp	r3, #0
 8010582:	d002      	beq.n	801058a <f_mount+0x66>
 8010584:	79fb      	ldrb	r3, [r7, #7]
 8010586:	2b01      	cmp	r3, #1
 8010588:	d001      	beq.n	801058e <f_mount+0x6a>
 801058a:	2300      	movs	r3, #0
 801058c:	e00a      	b.n	80105a4 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 801058e:	f107 010c 	add.w	r1, r7, #12
 8010592:	f107 0308 	add.w	r3, r7, #8
 8010596:	2200      	movs	r2, #0
 8010598:	4618      	mov	r0, r3
 801059a:	f7ff fd3d 	bl	8010018 <find_volume>
 801059e:	4603      	mov	r3, r0
 80105a0:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80105a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80105a4:	4618      	mov	r0, r3
 80105a6:	3720      	adds	r7, #32
 80105a8:	46bd      	mov	sp, r7
 80105aa:	bd80      	pop	{r7, pc}
 80105ac:	20000ed0 	.word	0x20000ed0

080105b0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80105b0:	b580      	push	{r7, lr}
 80105b2:	b09a      	sub	sp, #104	; 0x68
 80105b4:	af00      	add	r7, sp, #0
 80105b6:	60f8      	str	r0, [r7, #12]
 80105b8:	60b9      	str	r1, [r7, #8]
 80105ba:	4613      	mov	r3, r2
 80105bc:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	2b00      	cmp	r3, #0
 80105c2:	d101      	bne.n	80105c8 <f_open+0x18>
 80105c4:	2309      	movs	r3, #9
 80105c6:	e1ad      	b.n	8010924 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 80105c8:	79fb      	ldrb	r3, [r7, #7]
 80105ca:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80105ce:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 80105d0:	79fa      	ldrb	r2, [r7, #7]
 80105d2:	f107 0114 	add.w	r1, r7, #20
 80105d6:	f107 0308 	add.w	r3, r7, #8
 80105da:	4618      	mov	r0, r3
 80105dc:	f7ff fd1c 	bl	8010018 <find_volume>
 80105e0:	4603      	mov	r3, r0
 80105e2:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 80105e6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80105ea:	2b00      	cmp	r3, #0
 80105ec:	f040 8191 	bne.w	8010912 <f_open+0x362>
		dj.obj.fs = fs;
 80105f0:	697b      	ldr	r3, [r7, #20]
 80105f2:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 80105f4:	68ba      	ldr	r2, [r7, #8]
 80105f6:	f107 0318 	add.w	r3, r7, #24
 80105fa:	4611      	mov	r1, r2
 80105fc:	4618      	mov	r0, r3
 80105fe:	f7ff fc01 	bl	800fe04 <follow_path>
 8010602:	4603      	mov	r3, r0
 8010604:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8010608:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801060c:	2b00      	cmp	r3, #0
 801060e:	d11a      	bne.n	8010646 <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8010610:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8010614:	b25b      	sxtb	r3, r3
 8010616:	2b00      	cmp	r3, #0
 8010618:	da03      	bge.n	8010622 <f_open+0x72>
				res = FR_INVALID_NAME;
 801061a:	2306      	movs	r3, #6
 801061c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010620:	e011      	b.n	8010646 <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8010622:	79fb      	ldrb	r3, [r7, #7]
 8010624:	f023 0301 	bic.w	r3, r3, #1
 8010628:	2b00      	cmp	r3, #0
 801062a:	bf14      	ite	ne
 801062c:	2301      	movne	r3, #1
 801062e:	2300      	moveq	r3, #0
 8010630:	b2db      	uxtb	r3, r3
 8010632:	461a      	mov	r2, r3
 8010634:	f107 0318 	add.w	r3, r7, #24
 8010638:	4611      	mov	r1, r2
 801063a:	4618      	mov	r0, r3
 801063c:	f7fd fe16 	bl	800e26c <chk_lock>
 8010640:	4603      	mov	r3, r0
 8010642:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8010646:	79fb      	ldrb	r3, [r7, #7]
 8010648:	f003 031c 	and.w	r3, r3, #28
 801064c:	2b00      	cmp	r3, #0
 801064e:	d07f      	beq.n	8010750 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8010650:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010654:	2b00      	cmp	r3, #0
 8010656:	d017      	beq.n	8010688 <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8010658:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 801065c:	2b04      	cmp	r3, #4
 801065e:	d10e      	bne.n	801067e <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8010660:	f7fd fe5e 	bl	800e320 <enq_lock>
 8010664:	4603      	mov	r3, r0
 8010666:	2b00      	cmp	r3, #0
 8010668:	d006      	beq.n	8010678 <f_open+0xc8>
 801066a:	f107 0318 	add.w	r3, r7, #24
 801066e:	4618      	mov	r0, r3
 8010670:	f7ff f83a 	bl	800f6e8 <dir_register>
 8010674:	4603      	mov	r3, r0
 8010676:	e000      	b.n	801067a <f_open+0xca>
 8010678:	2312      	movs	r3, #18
 801067a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 801067e:	79fb      	ldrb	r3, [r7, #7]
 8010680:	f043 0308 	orr.w	r3, r3, #8
 8010684:	71fb      	strb	r3, [r7, #7]
 8010686:	e010      	b.n	80106aa <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8010688:	7fbb      	ldrb	r3, [r7, #30]
 801068a:	f003 0311 	and.w	r3, r3, #17
 801068e:	2b00      	cmp	r3, #0
 8010690:	d003      	beq.n	801069a <f_open+0xea>
					res = FR_DENIED;
 8010692:	2307      	movs	r3, #7
 8010694:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010698:	e007      	b.n	80106aa <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 801069a:	79fb      	ldrb	r3, [r7, #7]
 801069c:	f003 0304 	and.w	r3, r3, #4
 80106a0:	2b00      	cmp	r3, #0
 80106a2:	d002      	beq.n	80106aa <f_open+0xfa>
 80106a4:	2308      	movs	r3, #8
 80106a6:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 80106aa:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80106ae:	2b00      	cmp	r3, #0
 80106b0:	d168      	bne.n	8010784 <f_open+0x1d4>
 80106b2:	79fb      	ldrb	r3, [r7, #7]
 80106b4:	f003 0308 	and.w	r3, r3, #8
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d063      	beq.n	8010784 <f_open+0x1d4>
				dw = GET_FATTIME();
 80106bc:	f7fb fc08 	bl	800bed0 <get_fattime>
 80106c0:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 80106c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106c4:	330e      	adds	r3, #14
 80106c6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106c8:	4618      	mov	r0, r3
 80106ca:	f7fd fd2a 	bl	800e122 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 80106ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106d0:	3316      	adds	r3, #22
 80106d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80106d4:	4618      	mov	r0, r3
 80106d6:	f7fd fd24 	bl	800e122 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 80106da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106dc:	330b      	adds	r3, #11
 80106de:	2220      	movs	r2, #32
 80106e0:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 80106e2:	697b      	ldr	r3, [r7, #20]
 80106e4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80106e6:	4611      	mov	r1, r2
 80106e8:	4618      	mov	r0, r3
 80106ea:	f7fe fc6c 	bl	800efc6 <ld_clust>
 80106ee:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 80106f0:	697b      	ldr	r3, [r7, #20]
 80106f2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80106f4:	2200      	movs	r2, #0
 80106f6:	4618      	mov	r0, r3
 80106f8:	f7fe fc84 	bl	800f004 <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 80106fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80106fe:	331c      	adds	r3, #28
 8010700:	2100      	movs	r1, #0
 8010702:	4618      	mov	r0, r3
 8010704:	f7fd fd0d 	bl	800e122 <st_dword>
					fs->wflag = 1;
 8010708:	697b      	ldr	r3, [r7, #20]
 801070a:	2201      	movs	r2, #1
 801070c:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 801070e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8010710:	2b00      	cmp	r3, #0
 8010712:	d037      	beq.n	8010784 <f_open+0x1d4>
						dw = fs->winsect;
 8010714:	697b      	ldr	r3, [r7, #20]
 8010716:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010718:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 801071a:	f107 0318 	add.w	r3, r7, #24
 801071e:	2200      	movs	r2, #0
 8010720:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8010722:	4618      	mov	r0, r3
 8010724:	f7fe f998 	bl	800ea58 <remove_chain>
 8010728:	4603      	mov	r3, r0
 801072a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 801072e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010732:	2b00      	cmp	r3, #0
 8010734:	d126      	bne.n	8010784 <f_open+0x1d4>
							res = move_window(fs, dw);
 8010736:	697b      	ldr	r3, [r7, #20]
 8010738:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801073a:	4618      	mov	r0, r3
 801073c:	f7fd ff40 	bl	800e5c0 <move_window>
 8010740:	4603      	mov	r3, r0
 8010742:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8010746:	697b      	ldr	r3, [r7, #20]
 8010748:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801074a:	3a01      	subs	r2, #1
 801074c:	611a      	str	r2, [r3, #16]
 801074e:	e019      	b.n	8010784 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8010750:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010754:	2b00      	cmp	r3, #0
 8010756:	d115      	bne.n	8010784 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8010758:	7fbb      	ldrb	r3, [r7, #30]
 801075a:	f003 0310 	and.w	r3, r3, #16
 801075e:	2b00      	cmp	r3, #0
 8010760:	d003      	beq.n	801076a <f_open+0x1ba>
					res = FR_NO_FILE;
 8010762:	2304      	movs	r3, #4
 8010764:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8010768:	e00c      	b.n	8010784 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 801076a:	79fb      	ldrb	r3, [r7, #7]
 801076c:	f003 0302 	and.w	r3, r3, #2
 8010770:	2b00      	cmp	r3, #0
 8010772:	d007      	beq.n	8010784 <f_open+0x1d4>
 8010774:	7fbb      	ldrb	r3, [r7, #30]
 8010776:	f003 0301 	and.w	r3, r3, #1
 801077a:	2b00      	cmp	r3, #0
 801077c:	d002      	beq.n	8010784 <f_open+0x1d4>
						res = FR_DENIED;
 801077e:	2307      	movs	r3, #7
 8010780:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8010784:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010788:	2b00      	cmp	r3, #0
 801078a:	d128      	bne.n	80107de <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 801078c:	79fb      	ldrb	r3, [r7, #7]
 801078e:	f003 0308 	and.w	r3, r3, #8
 8010792:	2b00      	cmp	r3, #0
 8010794:	d003      	beq.n	801079e <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8010796:	79fb      	ldrb	r3, [r7, #7]
 8010798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801079c:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 801079e:	697b      	ldr	r3, [r7, #20]
 80107a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80107a2:	68fb      	ldr	r3, [r7, #12]
 80107a4:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 80107a6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107a8:	68fb      	ldr	r3, [r7, #12]
 80107aa:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 80107ac:	79fb      	ldrb	r3, [r7, #7]
 80107ae:	f023 0301 	bic.w	r3, r3, #1
 80107b2:	2b00      	cmp	r3, #0
 80107b4:	bf14      	ite	ne
 80107b6:	2301      	movne	r3, #1
 80107b8:	2300      	moveq	r3, #0
 80107ba:	b2db      	uxtb	r3, r3
 80107bc:	461a      	mov	r2, r3
 80107be:	f107 0318 	add.w	r3, r7, #24
 80107c2:	4611      	mov	r1, r2
 80107c4:	4618      	mov	r0, r3
 80107c6:	f7fd fdcb 	bl	800e360 <inc_lock>
 80107ca:	4602      	mov	r2, r0
 80107cc:	68fb      	ldr	r3, [r7, #12]
 80107ce:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 80107d0:	68fb      	ldr	r3, [r7, #12]
 80107d2:	691b      	ldr	r3, [r3, #16]
 80107d4:	2b00      	cmp	r3, #0
 80107d6:	d102      	bne.n	80107de <f_open+0x22e>
 80107d8:	2302      	movs	r3, #2
 80107da:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 80107de:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80107e2:	2b00      	cmp	r3, #0
 80107e4:	f040 8095 	bne.w	8010912 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 80107e8:	697b      	ldr	r3, [r7, #20]
 80107ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80107ec:	4611      	mov	r1, r2
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7fe fbe9 	bl	800efc6 <ld_clust>
 80107f4:	4602      	mov	r2, r0
 80107f6:	68fb      	ldr	r3, [r7, #12]
 80107f8:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 80107fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107fc:	331c      	adds	r3, #28
 80107fe:	4618      	mov	r0, r3
 8010800:	f7fd fc53 	bl	800e0aa <ld_dword>
 8010804:	4602      	mov	r2, r0
 8010806:	68fb      	ldr	r3, [r7, #12]
 8010808:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 801080a:	68fb      	ldr	r3, [r7, #12]
 801080c:	2200      	movs	r2, #0
 801080e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8010810:	697a      	ldr	r2, [r7, #20]
 8010812:	68fb      	ldr	r3, [r7, #12]
 8010814:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8010816:	697b      	ldr	r3, [r7, #20]
 8010818:	88da      	ldrh	r2, [r3, #6]
 801081a:	68fb      	ldr	r3, [r7, #12]
 801081c:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 801081e:	68fb      	ldr	r3, [r7, #12]
 8010820:	79fa      	ldrb	r2, [r7, #7]
 8010822:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8010824:	68fb      	ldr	r3, [r7, #12]
 8010826:	2200      	movs	r2, #0
 8010828:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 801082a:	68fb      	ldr	r3, [r7, #12]
 801082c:	2200      	movs	r2, #0
 801082e:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8010830:	68fb      	ldr	r3, [r7, #12]
 8010832:	2200      	movs	r2, #0
 8010834:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8010836:	68fb      	ldr	r3, [r7, #12]
 8010838:	3330      	adds	r3, #48	; 0x30
 801083a:	f44f 7200 	mov.w	r2, #512	; 0x200
 801083e:	2100      	movs	r1, #0
 8010840:	4618      	mov	r0, r3
 8010842:	f7fd fcb9 	bl	800e1b8 <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8010846:	79fb      	ldrb	r3, [r7, #7]
 8010848:	f003 0320 	and.w	r3, r3, #32
 801084c:	2b00      	cmp	r3, #0
 801084e:	d060      	beq.n	8010912 <f_open+0x362>
 8010850:	68fb      	ldr	r3, [r7, #12]
 8010852:	68db      	ldr	r3, [r3, #12]
 8010854:	2b00      	cmp	r3, #0
 8010856:	d05c      	beq.n	8010912 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8010858:	68fb      	ldr	r3, [r7, #12]
 801085a:	68da      	ldr	r2, [r3, #12]
 801085c:	68fb      	ldr	r3, [r7, #12]
 801085e:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8010860:	697b      	ldr	r3, [r7, #20]
 8010862:	895b      	ldrh	r3, [r3, #10]
 8010864:	025b      	lsls	r3, r3, #9
 8010866:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8010868:	68fb      	ldr	r3, [r7, #12]
 801086a:	689b      	ldr	r3, [r3, #8]
 801086c:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801086e:	68fb      	ldr	r3, [r7, #12]
 8010870:	68db      	ldr	r3, [r3, #12]
 8010872:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010874:	e016      	b.n	80108a4 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8010876:	68fb      	ldr	r3, [r7, #12]
 8010878:	6e39      	ldr	r1, [r7, #96]	; 0x60
 801087a:	4618      	mov	r0, r3
 801087c:	f7fd ff5a 	bl	800e734 <get_fat>
 8010880:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8010882:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010884:	2b01      	cmp	r3, #1
 8010886:	d802      	bhi.n	801088e <f_open+0x2de>
 8010888:	2302      	movs	r3, #2
 801088a:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 801088e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8010890:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010894:	d102      	bne.n	801089c <f_open+0x2ec>
 8010896:	2301      	movs	r3, #1
 8010898:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 801089c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801089e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108a0:	1ad3      	subs	r3, r2, r3
 80108a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80108a4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d103      	bne.n	80108b4 <f_open+0x304>
 80108ac:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80108ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80108b0:	429a      	cmp	r2, r3
 80108b2:	d8e0      	bhi.n	8010876 <f_open+0x2c6>
				}
				fp->clust = clst;
 80108b4:	68fb      	ldr	r3, [r7, #12]
 80108b6:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80108b8:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 80108ba:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80108be:	2b00      	cmp	r3, #0
 80108c0:	d127      	bne.n	8010912 <f_open+0x362>
 80108c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108c8:	2b00      	cmp	r3, #0
 80108ca:	d022      	beq.n	8010912 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 80108cc:	697b      	ldr	r3, [r7, #20]
 80108ce:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80108d0:	4618      	mov	r0, r3
 80108d2:	f7fd ff11 	bl	800e6f8 <clust2sect>
 80108d6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80108d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d103      	bne.n	80108e6 <f_open+0x336>
						res = FR_INT_ERR;
 80108de:	2302      	movs	r3, #2
 80108e0:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80108e4:	e015      	b.n	8010912 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 80108e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80108e8:	0a5a      	lsrs	r2, r3, #9
 80108ea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80108ec:	441a      	add	r2, r3
 80108ee:	68fb      	ldr	r3, [r7, #12]
 80108f0:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 80108f2:	697b      	ldr	r3, [r7, #20]
 80108f4:	7858      	ldrb	r0, [r3, #1]
 80108f6:	68fb      	ldr	r3, [r7, #12]
 80108f8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 80108fc:	68fb      	ldr	r3, [r7, #12]
 80108fe:	6a1a      	ldr	r2, [r3, #32]
 8010900:	2301      	movs	r3, #1
 8010902:	f7fd fb5d 	bl	800dfc0 <disk_read>
 8010906:	4603      	mov	r3, r0
 8010908:	2b00      	cmp	r3, #0
 801090a:	d002      	beq.n	8010912 <f_open+0x362>
 801090c:	2301      	movs	r3, #1
 801090e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8010912:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8010916:	2b00      	cmp	r3, #0
 8010918:	d002      	beq.n	8010920 <f_open+0x370>
 801091a:	68fb      	ldr	r3, [r7, #12]
 801091c:	2200      	movs	r2, #0
 801091e:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010920:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8010924:	4618      	mov	r0, r3
 8010926:	3768      	adds	r7, #104	; 0x68
 8010928:	46bd      	mov	sp, r7
 801092a:	bd80      	pop	{r7, pc}

0801092c <f_read>:
	FIL* fp, 	/* Pointer to the file object */
	void* buff,	/* Pointer to data buffer */
	UINT btr,	/* Number of bytes to read */
	UINT* br	/* Pointer to number of bytes read */
)
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b08e      	sub	sp, #56	; 0x38
 8010930:	af00      	add	r7, sp, #0
 8010932:	60f8      	str	r0, [r7, #12]
 8010934:	60b9      	str	r1, [r7, #8]
 8010936:	607a      	str	r2, [r7, #4]
 8010938:	603b      	str	r3, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DWORD clst, sect;
	FSIZE_t remain;
	UINT rcnt, cc, csect;
	BYTE *rbuff = (BYTE*)buff;
 801093a:	68bb      	ldr	r3, [r7, #8]
 801093c:	627b      	str	r3, [r7, #36]	; 0x24


	*br = 0;	/* Clear read byte counter */
 801093e:	683b      	ldr	r3, [r7, #0]
 8010940:	2200      	movs	r2, #0
 8010942:	601a      	str	r2, [r3, #0]
	res = validate(&fp->obj, &fs);				/* Check validity of the file object */
 8010944:	68fb      	ldr	r3, [r7, #12]
 8010946:	f107 0214 	add.w	r2, r7, #20
 801094a:	4611      	mov	r1, r2
 801094c:	4618      	mov	r0, r3
 801094e:	f7ff fdb3 	bl	80104b8 <validate>
 8010952:	4603      	mov	r3, r0
 8010954:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (res != FR_OK || (res = (FRESULT)fp->err) != FR_OK) LEAVE_FF(fs, res);	/* Check validity */
 8010958:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801095c:	2b00      	cmp	r3, #0
 801095e:	d107      	bne.n	8010970 <f_read+0x44>
 8010960:	68fb      	ldr	r3, [r7, #12]
 8010962:	7d5b      	ldrb	r3, [r3, #21]
 8010964:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8010968:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 801096c:	2b00      	cmp	r3, #0
 801096e:	d002      	beq.n	8010976 <f_read+0x4a>
 8010970:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8010974:	e115      	b.n	8010ba2 <f_read+0x276>
	if (!(fp->flag & FA_READ)) LEAVE_FF(fs, FR_DENIED); /* Check access mode */
 8010976:	68fb      	ldr	r3, [r7, #12]
 8010978:	7d1b      	ldrb	r3, [r3, #20]
 801097a:	f003 0301 	and.w	r3, r3, #1
 801097e:	2b00      	cmp	r3, #0
 8010980:	d101      	bne.n	8010986 <f_read+0x5a>
 8010982:	2307      	movs	r3, #7
 8010984:	e10d      	b.n	8010ba2 <f_read+0x276>
	remain = fp->obj.objsize - fp->fptr;
 8010986:	68fb      	ldr	r3, [r7, #12]
 8010988:	68da      	ldr	r2, [r3, #12]
 801098a:	68fb      	ldr	r3, [r7, #12]
 801098c:	699b      	ldr	r3, [r3, #24]
 801098e:	1ad3      	subs	r3, r2, r3
 8010990:	623b      	str	r3, [r7, #32]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8010992:	687a      	ldr	r2, [r7, #4]
 8010994:	6a3b      	ldr	r3, [r7, #32]
 8010996:	429a      	cmp	r2, r3
 8010998:	f240 80fe 	bls.w	8010b98 <f_read+0x26c>
 801099c:	6a3b      	ldr	r3, [r7, #32]
 801099e:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 80109a0:	e0fa      	b.n	8010b98 <f_read+0x26c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if (fp->fptr % SS(fs) == 0) {			/* On the sector boundary? */
 80109a2:	68fb      	ldr	r3, [r7, #12]
 80109a4:	699b      	ldr	r3, [r3, #24]
 80109a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109aa:	2b00      	cmp	r3, #0
 80109ac:	f040 80c6 	bne.w	8010b3c <f_read+0x210>
			csect = (UINT)(fp->fptr / SS(fs) & (fs->csize - 1));	/* Sector offset in the cluster */
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	699b      	ldr	r3, [r3, #24]
 80109b4:	0a5b      	lsrs	r3, r3, #9
 80109b6:	697a      	ldr	r2, [r7, #20]
 80109b8:	8952      	ldrh	r2, [r2, #10]
 80109ba:	3a01      	subs	r2, #1
 80109bc:	4013      	ands	r3, r2
 80109be:	61fb      	str	r3, [r7, #28]
			if (csect == 0) {					/* On the cluster boundary? */
 80109c0:	69fb      	ldr	r3, [r7, #28]
 80109c2:	2b00      	cmp	r3, #0
 80109c4:	d12f      	bne.n	8010a26 <f_read+0xfa>
				if (fp->fptr == 0) {			/* On the top of the file? */
 80109c6:	68fb      	ldr	r3, [r7, #12]
 80109c8:	699b      	ldr	r3, [r3, #24]
 80109ca:	2b00      	cmp	r3, #0
 80109cc:	d103      	bne.n	80109d6 <f_read+0xaa>
					clst = fp->obj.sclust;		/* Follow cluster chain from the origin */
 80109ce:	68fb      	ldr	r3, [r7, #12]
 80109d0:	689b      	ldr	r3, [r3, #8]
 80109d2:	633b      	str	r3, [r7, #48]	; 0x30
 80109d4:	e013      	b.n	80109fe <f_read+0xd2>
				} else {						/* Middle or end of the file */
#if _USE_FASTSEEK
					if (fp->cltbl) {
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d007      	beq.n	80109ee <f_read+0xc2>
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	699b      	ldr	r3, [r3, #24]
 80109e2:	4619      	mov	r1, r3
 80109e4:	68f8      	ldr	r0, [r7, #12]
 80109e6:	f7fe f934 	bl	800ec52 <clmt_clust>
 80109ea:	6338      	str	r0, [r7, #48]	; 0x30
 80109ec:	e007      	b.n	80109fe <f_read+0xd2>
					} else
#endif
					{
						clst = get_fat(&fp->obj, fp->clust);	/* Follow cluster chain on the FAT */
 80109ee:	68fa      	ldr	r2, [r7, #12]
 80109f0:	68fb      	ldr	r3, [r7, #12]
 80109f2:	69db      	ldr	r3, [r3, #28]
 80109f4:	4619      	mov	r1, r3
 80109f6:	4610      	mov	r0, r2
 80109f8:	f7fd fe9c 	bl	800e734 <get_fat>
 80109fc:	6338      	str	r0, [r7, #48]	; 0x30
					}
				}
				if (clst < 2) ABORT(fs, FR_INT_ERR);
 80109fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a00:	2b01      	cmp	r3, #1
 8010a02:	d804      	bhi.n	8010a0e <f_read+0xe2>
 8010a04:	68fb      	ldr	r3, [r7, #12]
 8010a06:	2202      	movs	r2, #2
 8010a08:	755a      	strb	r2, [r3, #21]
 8010a0a:	2302      	movs	r3, #2
 8010a0c:	e0c9      	b.n	8010ba2 <f_read+0x276>
				if (clst == 0xFFFFFFFF) ABORT(fs, FR_DISK_ERR);
 8010a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010a10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a14:	d104      	bne.n	8010a20 <f_read+0xf4>
 8010a16:	68fb      	ldr	r3, [r7, #12]
 8010a18:	2201      	movs	r2, #1
 8010a1a:	755a      	strb	r2, [r3, #21]
 8010a1c:	2301      	movs	r3, #1
 8010a1e:	e0c0      	b.n	8010ba2 <f_read+0x276>
				fp->clust = clst;				/* Update current cluster */
 8010a20:	68fb      	ldr	r3, [r7, #12]
 8010a22:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010a24:	61da      	str	r2, [r3, #28]
			}
			sect = clust2sect(fs, fp->clust);	/* Get current sector */
 8010a26:	697a      	ldr	r2, [r7, #20]
 8010a28:	68fb      	ldr	r3, [r7, #12]
 8010a2a:	69db      	ldr	r3, [r3, #28]
 8010a2c:	4619      	mov	r1, r3
 8010a2e:	4610      	mov	r0, r2
 8010a30:	f7fd fe62 	bl	800e6f8 <clust2sect>
 8010a34:	61b8      	str	r0, [r7, #24]
			if (!sect) ABORT(fs, FR_INT_ERR);
 8010a36:	69bb      	ldr	r3, [r7, #24]
 8010a38:	2b00      	cmp	r3, #0
 8010a3a:	d104      	bne.n	8010a46 <f_read+0x11a>
 8010a3c:	68fb      	ldr	r3, [r7, #12]
 8010a3e:	2202      	movs	r2, #2
 8010a40:	755a      	strb	r2, [r3, #21]
 8010a42:	2302      	movs	r3, #2
 8010a44:	e0ad      	b.n	8010ba2 <f_read+0x276>
			sect += csect;
 8010a46:	69ba      	ldr	r2, [r7, #24]
 8010a48:	69fb      	ldr	r3, [r7, #28]
 8010a4a:	4413      	add	r3, r2
 8010a4c:	61bb      	str	r3, [r7, #24]
			cc = btr / SS(fs);					/* When remaining bytes >= sector size, */
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	0a5b      	lsrs	r3, r3, #9
 8010a52:	62bb      	str	r3, [r7, #40]	; 0x28
			if (cc) {							/* Read maximum contiguous sectors directly */
 8010a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a56:	2b00      	cmp	r3, #0
 8010a58:	d039      	beq.n	8010ace <f_read+0x1a2>
				if (csect + cc > fs->csize) {	/* Clip at cluster boundary */
 8010a5a:	69fa      	ldr	r2, [r7, #28]
 8010a5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a5e:	4413      	add	r3, r2
 8010a60:	697a      	ldr	r2, [r7, #20]
 8010a62:	8952      	ldrh	r2, [r2, #10]
 8010a64:	4293      	cmp	r3, r2
 8010a66:	d905      	bls.n	8010a74 <f_read+0x148>
					cc = fs->csize - csect;
 8010a68:	697b      	ldr	r3, [r7, #20]
 8010a6a:	895b      	ldrh	r3, [r3, #10]
 8010a6c:	461a      	mov	r2, r3
 8010a6e:	69fb      	ldr	r3, [r7, #28]
 8010a70:	1ad3      	subs	r3, r2, r3
 8010a72:	62bb      	str	r3, [r7, #40]	; 0x28
				}
				if (disk_read(fs->drv, rbuff, sect, cc) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010a74:	697b      	ldr	r3, [r7, #20]
 8010a76:	7858      	ldrb	r0, [r3, #1]
 8010a78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a7a:	69ba      	ldr	r2, [r7, #24]
 8010a7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8010a7e:	f7fd fa9f 	bl	800dfc0 <disk_read>
 8010a82:	4603      	mov	r3, r0
 8010a84:	2b00      	cmp	r3, #0
 8010a86:	d004      	beq.n	8010a92 <f_read+0x166>
 8010a88:	68fb      	ldr	r3, [r7, #12]
 8010a8a:	2201      	movs	r2, #1
 8010a8c:	755a      	strb	r2, [r3, #21]
 8010a8e:	2301      	movs	r3, #1
 8010a90:	e087      	b.n	8010ba2 <f_read+0x276>
#if _FS_TINY
				if (fs->wflag && fs->winsect - sect < cc) {
					mem_cpy(rbuff + ((fs->winsect - sect) * SS(fs)), fs->win, SS(fs));
				}
#else
				if ((fp->flag & FA_DIRTY) && fp->sect - sect < cc) {
 8010a92:	68fb      	ldr	r3, [r7, #12]
 8010a94:	7d1b      	ldrb	r3, [r3, #20]
 8010a96:	b25b      	sxtb	r3, r3
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	da14      	bge.n	8010ac6 <f_read+0x19a>
 8010a9c:	68fb      	ldr	r3, [r7, #12]
 8010a9e:	6a1a      	ldr	r2, [r3, #32]
 8010aa0:	69bb      	ldr	r3, [r7, #24]
 8010aa2:	1ad3      	subs	r3, r2, r3
 8010aa4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010aa6:	429a      	cmp	r2, r3
 8010aa8:	d90d      	bls.n	8010ac6 <f_read+0x19a>
					mem_cpy(rbuff + ((fp->sect - sect) * SS(fs)), fp->buf, SS(fs));
 8010aaa:	68fb      	ldr	r3, [r7, #12]
 8010aac:	6a1a      	ldr	r2, [r3, #32]
 8010aae:	69bb      	ldr	r3, [r7, #24]
 8010ab0:	1ad3      	subs	r3, r2, r3
 8010ab2:	025b      	lsls	r3, r3, #9
 8010ab4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ab6:	18d0      	adds	r0, r2, r3
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	3330      	adds	r3, #48	; 0x30
 8010abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8010ac0:	4619      	mov	r1, r3
 8010ac2:	f7fd fb59 	bl	800e178 <mem_cpy>
				}
#endif
#endif
				rcnt = SS(fs) * cc;				/* Number of bytes transferred */
 8010ac6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ac8:	025b      	lsls	r3, r3, #9
 8010aca:	62fb      	str	r3, [r7, #44]	; 0x2c
				continue;
 8010acc:	e050      	b.n	8010b70 <f_read+0x244>
			}
#if !_FS_TINY
			if (fp->sect != sect) {			/* Load data sector if not in cache */
 8010ace:	68fb      	ldr	r3, [r7, #12]
 8010ad0:	6a1b      	ldr	r3, [r3, #32]
 8010ad2:	69ba      	ldr	r2, [r7, #24]
 8010ad4:	429a      	cmp	r2, r3
 8010ad6:	d02e      	beq.n	8010b36 <f_read+0x20a>
#if !_FS_READONLY
				if (fp->flag & FA_DIRTY) {		/* Write-back dirty sector cache */
 8010ad8:	68fb      	ldr	r3, [r7, #12]
 8010ada:	7d1b      	ldrb	r3, [r3, #20]
 8010adc:	b25b      	sxtb	r3, r3
 8010ade:	2b00      	cmp	r3, #0
 8010ae0:	da18      	bge.n	8010b14 <f_read+0x1e8>
					if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) ABORT(fs, FR_DISK_ERR);
 8010ae2:	697b      	ldr	r3, [r7, #20]
 8010ae4:	7858      	ldrb	r0, [r3, #1]
 8010ae6:	68fb      	ldr	r3, [r7, #12]
 8010ae8:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010aec:	68fb      	ldr	r3, [r7, #12]
 8010aee:	6a1a      	ldr	r2, [r3, #32]
 8010af0:	2301      	movs	r3, #1
 8010af2:	f7fd fa85 	bl	800e000 <disk_write>
 8010af6:	4603      	mov	r3, r0
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d004      	beq.n	8010b06 <f_read+0x1da>
 8010afc:	68fb      	ldr	r3, [r7, #12]
 8010afe:	2201      	movs	r2, #1
 8010b00:	755a      	strb	r2, [r3, #21]
 8010b02:	2301      	movs	r3, #1
 8010b04:	e04d      	b.n	8010ba2 <f_read+0x276>
					fp->flag &= (BYTE)~FA_DIRTY;
 8010b06:	68fb      	ldr	r3, [r7, #12]
 8010b08:	7d1b      	ldrb	r3, [r3, #20]
 8010b0a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010b0e:	b2da      	uxtb	r2, r3
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	751a      	strb	r2, [r3, #20]
				}
#endif
				if (disk_read(fs->drv, fp->buf, sect, 1) != RES_OK)	ABORT(fs, FR_DISK_ERR);	/* Fill sector cache */
 8010b14:	697b      	ldr	r3, [r7, #20]
 8010b16:	7858      	ldrb	r0, [r3, #1]
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010b1e:	2301      	movs	r3, #1
 8010b20:	69ba      	ldr	r2, [r7, #24]
 8010b22:	f7fd fa4d 	bl	800dfc0 <disk_read>
 8010b26:	4603      	mov	r3, r0
 8010b28:	2b00      	cmp	r3, #0
 8010b2a:	d004      	beq.n	8010b36 <f_read+0x20a>
 8010b2c:	68fb      	ldr	r3, [r7, #12]
 8010b2e:	2201      	movs	r2, #1
 8010b30:	755a      	strb	r2, [r3, #21]
 8010b32:	2301      	movs	r3, #1
 8010b34:	e035      	b.n	8010ba2 <f_read+0x276>
			}
#endif
			fp->sect = sect;
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	69ba      	ldr	r2, [r7, #24]
 8010b3a:	621a      	str	r2, [r3, #32]
		}
		rcnt = SS(fs) - (UINT)fp->fptr % SS(fs);	/* Number of bytes left in the sector */
 8010b3c:	68fb      	ldr	r3, [r7, #12]
 8010b3e:	699b      	ldr	r3, [r3, #24]
 8010b40:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b44:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8010b48:	62fb      	str	r3, [r7, #44]	; 0x2c
		if (rcnt > btr) rcnt = btr;					/* Clip it by btr if needed */
 8010b4a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b4c:	687b      	ldr	r3, [r7, #4]
 8010b4e:	429a      	cmp	r2, r3
 8010b50:	d901      	bls.n	8010b56 <f_read+0x22a>
 8010b52:	687b      	ldr	r3, [r7, #4]
 8010b54:	62fb      	str	r3, [r7, #44]	; 0x2c
#if _FS_TINY
		if (move_window(fs, fp->sect) != FR_OK) ABORT(fs, FR_DISK_ERR);	/* Move sector window */
		mem_cpy(rbuff, fs->win + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
#else
		mem_cpy(rbuff, fp->buf + fp->fptr % SS(fs), rcnt);	/* Extract partial sector */
 8010b56:	68fb      	ldr	r3, [r7, #12]
 8010b58:	f103 0230 	add.w	r2, r3, #48	; 0x30
 8010b5c:	68fb      	ldr	r3, [r7, #12]
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010b64:	4413      	add	r3, r2
 8010b66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010b68:	4619      	mov	r1, r3
 8010b6a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010b6c:	f7fd fb04 	bl	800e178 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8010b70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b74:	4413      	add	r3, r2
 8010b76:	627b      	str	r3, [r7, #36]	; 0x24
 8010b78:	68fb      	ldr	r3, [r7, #12]
 8010b7a:	699a      	ldr	r2, [r3, #24]
 8010b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b7e:	441a      	add	r2, r3
 8010b80:	68fb      	ldr	r3, [r7, #12]
 8010b82:	619a      	str	r2, [r3, #24]
 8010b84:	683b      	ldr	r3, [r7, #0]
 8010b86:	681a      	ldr	r2, [r3, #0]
 8010b88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b8a:	441a      	add	r2, r3
 8010b8c:	683b      	ldr	r3, [r7, #0]
 8010b8e:	601a      	str	r2, [r3, #0]
 8010b90:	687a      	ldr	r2, [r7, #4]
 8010b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010b94:	1ad3      	subs	r3, r2, r3
 8010b96:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8010b98:	687b      	ldr	r3, [r7, #4]
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	f47f af01 	bne.w	80109a2 <f_read+0x76>
#endif
	}

	LEAVE_FF(fs, FR_OK);
 8010ba0:	2300      	movs	r3, #0
}
 8010ba2:	4618      	mov	r0, r3
 8010ba4:	3738      	adds	r7, #56	; 0x38
 8010ba6:	46bd      	mov	sp, r7
 8010ba8:	bd80      	pop	{r7, pc}

08010baa <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8010baa:	b580      	push	{r7, lr}
 8010bac:	b086      	sub	sp, #24
 8010bae:	af00      	add	r7, sp, #0
 8010bb0:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f107 0208 	add.w	r2, r7, #8
 8010bb8:	4611      	mov	r1, r2
 8010bba:	4618      	mov	r0, r3
 8010bbc:	f7ff fc7c 	bl	80104b8 <validate>
 8010bc0:	4603      	mov	r3, r0
 8010bc2:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010bc4:	7dfb      	ldrb	r3, [r7, #23]
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d168      	bne.n	8010c9c <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8010bca:	687b      	ldr	r3, [r7, #4]
 8010bcc:	7d1b      	ldrb	r3, [r3, #20]
 8010bce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8010bd2:	2b00      	cmp	r3, #0
 8010bd4:	d062      	beq.n	8010c9c <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	7d1b      	ldrb	r3, [r3, #20]
 8010bda:	b25b      	sxtb	r3, r3
 8010bdc:	2b00      	cmp	r3, #0
 8010bde:	da15      	bge.n	8010c0c <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8010be0:	68bb      	ldr	r3, [r7, #8]
 8010be2:	7858      	ldrb	r0, [r3, #1]
 8010be4:	687b      	ldr	r3, [r7, #4]
 8010be6:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8010bea:	687b      	ldr	r3, [r7, #4]
 8010bec:	6a1a      	ldr	r2, [r3, #32]
 8010bee:	2301      	movs	r3, #1
 8010bf0:	f7fd fa06 	bl	800e000 <disk_write>
 8010bf4:	4603      	mov	r3, r0
 8010bf6:	2b00      	cmp	r3, #0
 8010bf8:	d001      	beq.n	8010bfe <f_sync+0x54>
 8010bfa:	2301      	movs	r3, #1
 8010bfc:	e04f      	b.n	8010c9e <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	7d1b      	ldrb	r3, [r3, #20]
 8010c02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010c06:	b2da      	uxtb	r2, r3
 8010c08:	687b      	ldr	r3, [r7, #4]
 8010c0a:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8010c0c:	f7fb f960 	bl	800bed0 <get_fattime>
 8010c10:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8010c12:	68ba      	ldr	r2, [r7, #8]
 8010c14:	687b      	ldr	r3, [r7, #4]
 8010c16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010c18:	4619      	mov	r1, r3
 8010c1a:	4610      	mov	r0, r2
 8010c1c:	f7fd fcd0 	bl	800e5c0 <move_window>
 8010c20:	4603      	mov	r3, r0
 8010c22:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8010c24:	7dfb      	ldrb	r3, [r7, #23]
 8010c26:	2b00      	cmp	r3, #0
 8010c28:	d138      	bne.n	8010c9c <f_sync+0xf2>
					dir = fp->dir_ptr;
 8010c2a:	687b      	ldr	r3, [r7, #4]
 8010c2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010c2e:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8010c30:	68fb      	ldr	r3, [r7, #12]
 8010c32:	330b      	adds	r3, #11
 8010c34:	781a      	ldrb	r2, [r3, #0]
 8010c36:	68fb      	ldr	r3, [r7, #12]
 8010c38:	330b      	adds	r3, #11
 8010c3a:	f042 0220 	orr.w	r2, r2, #32
 8010c3e:	b2d2      	uxtb	r2, r2
 8010c40:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8010c42:	687b      	ldr	r3, [r7, #4]
 8010c44:	6818      	ldr	r0, [r3, #0]
 8010c46:	687b      	ldr	r3, [r7, #4]
 8010c48:	689b      	ldr	r3, [r3, #8]
 8010c4a:	461a      	mov	r2, r3
 8010c4c:	68f9      	ldr	r1, [r7, #12]
 8010c4e:	f7fe f9d9 	bl	800f004 <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8010c52:	68fb      	ldr	r3, [r7, #12]
 8010c54:	f103 021c 	add.w	r2, r3, #28
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	68db      	ldr	r3, [r3, #12]
 8010c5c:	4619      	mov	r1, r3
 8010c5e:	4610      	mov	r0, r2
 8010c60:	f7fd fa5f 	bl	800e122 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8010c64:	68fb      	ldr	r3, [r7, #12]
 8010c66:	3316      	adds	r3, #22
 8010c68:	6939      	ldr	r1, [r7, #16]
 8010c6a:	4618      	mov	r0, r3
 8010c6c:	f7fd fa59 	bl	800e122 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8010c70:	68fb      	ldr	r3, [r7, #12]
 8010c72:	3312      	adds	r3, #18
 8010c74:	2100      	movs	r1, #0
 8010c76:	4618      	mov	r0, r3
 8010c78:	f7fd fa39 	bl	800e0ee <st_word>
					fs->wflag = 1;
 8010c7c:	68bb      	ldr	r3, [r7, #8]
 8010c7e:	2201      	movs	r2, #1
 8010c80:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8010c82:	68bb      	ldr	r3, [r7, #8]
 8010c84:	4618      	mov	r0, r3
 8010c86:	f7fd fcc9 	bl	800e61c <sync_fs>
 8010c8a:	4603      	mov	r3, r0
 8010c8c:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	7d1b      	ldrb	r3, [r3, #20]
 8010c92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8010c96:	b2da      	uxtb	r2, r3
 8010c98:	687b      	ldr	r3, [r7, #4]
 8010c9a:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8010c9c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3718      	adds	r7, #24
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}

08010ca6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8010ca6:	b580      	push	{r7, lr}
 8010ca8:	b084      	sub	sp, #16
 8010caa:	af00      	add	r7, sp, #0
 8010cac:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8010cae:	6878      	ldr	r0, [r7, #4]
 8010cb0:	f7ff ff7b 	bl	8010baa <f_sync>
 8010cb4:	4603      	mov	r3, r0
 8010cb6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8010cb8:	7bfb      	ldrb	r3, [r7, #15]
 8010cba:	2b00      	cmp	r3, #0
 8010cbc:	d118      	bne.n	8010cf0 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f107 0208 	add.w	r2, r7, #8
 8010cc4:	4611      	mov	r1, r2
 8010cc6:	4618      	mov	r0, r3
 8010cc8:	f7ff fbf6 	bl	80104b8 <validate>
 8010ccc:	4603      	mov	r3, r0
 8010cce:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8010cd0:	7bfb      	ldrb	r3, [r7, #15]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d10c      	bne.n	8010cf0 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8010cd6:	687b      	ldr	r3, [r7, #4]
 8010cd8:	691b      	ldr	r3, [r3, #16]
 8010cda:	4618      	mov	r0, r3
 8010cdc:	f7fd fbce 	bl	800e47c <dec_lock>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8010ce4:	7bfb      	ldrb	r3, [r7, #15]
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d102      	bne.n	8010cf0 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8010cea:	687b      	ldr	r3, [r7, #4]
 8010cec:	2200      	movs	r2, #0
 8010cee:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8010cf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8010cf2:	4618      	mov	r0, r3
 8010cf4:	3710      	adds	r7, #16
 8010cf6:	46bd      	mov	sp, r7
 8010cf8:	bd80      	pop	{r7, pc}

08010cfa <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 8010cfa:	b580      	push	{r7, lr}
 8010cfc:	b086      	sub	sp, #24
 8010cfe:	af00      	add	r7, sp, #0
 8010d00:	6078      	str	r0, [r7, #4]
 8010d02:	6039      	str	r1, [r7, #0]
	FATFS *fs;
	_FDID *obj;
	DEF_NAMBUF


	if (!dp) return FR_INVALID_OBJECT;
 8010d04:	687b      	ldr	r3, [r7, #4]
 8010d06:	2b00      	cmp	r3, #0
 8010d08:	d101      	bne.n	8010d0e <f_opendir+0x14>
 8010d0a:	2309      	movs	r3, #9
 8010d0c:	e064      	b.n	8010dd8 <f_opendir+0xde>

	/* Get logical drive */
	obj = &dp->obj;
 8010d0e:	687b      	ldr	r3, [r7, #4]
 8010d10:	613b      	str	r3, [r7, #16]
	res = find_volume(&path, &fs, 0);
 8010d12:	f107 010c 	add.w	r1, r7, #12
 8010d16:	463b      	mov	r3, r7
 8010d18:	2200      	movs	r2, #0
 8010d1a:	4618      	mov	r0, r3
 8010d1c:	f7ff f97c 	bl	8010018 <find_volume>
 8010d20:	4603      	mov	r3, r0
 8010d22:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8010d24:	7dfb      	ldrb	r3, [r7, #23]
 8010d26:	2b00      	cmp	r3, #0
 8010d28:	d14f      	bne.n	8010dca <f_opendir+0xd0>
		obj->fs = fs;
 8010d2a:	68fa      	ldr	r2, [r7, #12]
 8010d2c:	693b      	ldr	r3, [r7, #16]
 8010d2e:	601a      	str	r2, [r3, #0]
		INIT_NAMBUF(fs);
		res = follow_path(dp, path);			/* Follow the path to the directory */
 8010d30:	683b      	ldr	r3, [r7, #0]
 8010d32:	4619      	mov	r1, r3
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7ff f865 	bl	800fe04 <follow_path>
 8010d3a:	4603      	mov	r3, r0
 8010d3c:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK) {						/* Follow completed */
 8010d3e:	7dfb      	ldrb	r3, [r7, #23]
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d13d      	bne.n	8010dc0 <f_opendir+0xc6>
			if (!(dp->fn[NSFLAG] & NS_NONAME)) {	/* It is not the origin directory itself */
 8010d44:	687b      	ldr	r3, [r7, #4]
 8010d46:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8010d4a:	b25b      	sxtb	r3, r3
 8010d4c:	2b00      	cmp	r3, #0
 8010d4e:	db12      	blt.n	8010d76 <f_opendir+0x7c>
				if (obj->attr & AM_DIR) {		/* This object is a sub-directory */
 8010d50:	693b      	ldr	r3, [r7, #16]
 8010d52:	799b      	ldrb	r3, [r3, #6]
 8010d54:	f003 0310 	and.w	r3, r3, #16
 8010d58:	2b00      	cmp	r3, #0
 8010d5a:	d00a      	beq.n	8010d72 <f_opendir+0x78>
						obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
						obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
					} else
#endif
					{
						obj->sclust = ld_clust(fs, dp->dir);	/* Get object allocation info */
 8010d5c:	68fa      	ldr	r2, [r7, #12]
 8010d5e:	687b      	ldr	r3, [r7, #4]
 8010d60:	6a1b      	ldr	r3, [r3, #32]
 8010d62:	4619      	mov	r1, r3
 8010d64:	4610      	mov	r0, r2
 8010d66:	f7fe f92e 	bl	800efc6 <ld_clust>
 8010d6a:	4602      	mov	r2, r0
 8010d6c:	693b      	ldr	r3, [r7, #16]
 8010d6e:	609a      	str	r2, [r3, #8]
 8010d70:	e001      	b.n	8010d76 <f_opendir+0x7c>
					}
				} else {						/* This object is a file */
					res = FR_NO_PATH;
 8010d72:	2305      	movs	r3, #5
 8010d74:	75fb      	strb	r3, [r7, #23]
				}
			}
			if (res == FR_OK) {
 8010d76:	7dfb      	ldrb	r3, [r7, #23]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d121      	bne.n	8010dc0 <f_opendir+0xc6>
				obj->id = fs->id;
 8010d7c:	68fb      	ldr	r3, [r7, #12]
 8010d7e:	88da      	ldrh	r2, [r3, #6]
 8010d80:	693b      	ldr	r3, [r7, #16]
 8010d82:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8010d84:	2100      	movs	r1, #0
 8010d86:	6878      	ldr	r0, [r7, #4]
 8010d88:	f7fd ff96 	bl	800ecb8 <dir_sdi>
 8010d8c:	4603      	mov	r3, r0
 8010d8e:	75fb      	strb	r3, [r7, #23]
#if _FS_LOCK != 0
				if (res == FR_OK) {
 8010d90:	7dfb      	ldrb	r3, [r7, #23]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	d114      	bne.n	8010dc0 <f_opendir+0xc6>
					if (obj->sclust) {
 8010d96:	693b      	ldr	r3, [r7, #16]
 8010d98:	689b      	ldr	r3, [r3, #8]
 8010d9a:	2b00      	cmp	r3, #0
 8010d9c:	d00d      	beq.n	8010dba <f_opendir+0xc0>
						obj->lockid = inc_lock(dp, 0);	/* Lock the sub directory */
 8010d9e:	2100      	movs	r1, #0
 8010da0:	6878      	ldr	r0, [r7, #4]
 8010da2:	f7fd fadd 	bl	800e360 <inc_lock>
 8010da6:	4602      	mov	r2, r0
 8010da8:	693b      	ldr	r3, [r7, #16]
 8010daa:	611a      	str	r2, [r3, #16]
						if (!obj->lockid) res = FR_TOO_MANY_OPEN_FILES;
 8010dac:	693b      	ldr	r3, [r7, #16]
 8010dae:	691b      	ldr	r3, [r3, #16]
 8010db0:	2b00      	cmp	r3, #0
 8010db2:	d105      	bne.n	8010dc0 <f_opendir+0xc6>
 8010db4:	2312      	movs	r3, #18
 8010db6:	75fb      	strb	r3, [r7, #23]
 8010db8:	e002      	b.n	8010dc0 <f_opendir+0xc6>
					} else {
						obj->lockid = 0;	/* Root directory need not to be locked */
 8010dba:	693b      	ldr	r3, [r7, #16]
 8010dbc:	2200      	movs	r2, #0
 8010dbe:	611a      	str	r2, [r3, #16]
				}
#endif
			}
		}
		FREE_NAMBUF();
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8010dc0:	7dfb      	ldrb	r3, [r7, #23]
 8010dc2:	2b04      	cmp	r3, #4
 8010dc4:	d101      	bne.n	8010dca <f_opendir+0xd0>
 8010dc6:	2305      	movs	r3, #5
 8010dc8:	75fb      	strb	r3, [r7, #23]
	}
	if (res != FR_OK) obj->fs = 0;		/* Invalidate the directory object if function faild */
 8010dca:	7dfb      	ldrb	r3, [r7, #23]
 8010dcc:	2b00      	cmp	r3, #0
 8010dce:	d002      	beq.n	8010dd6 <f_opendir+0xdc>
 8010dd0:	693b      	ldr	r3, [r7, #16]
 8010dd2:	2200      	movs	r2, #0
 8010dd4:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8010dd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8010dd8:	4618      	mov	r0, r3
 8010dda:	3718      	adds	r7, #24
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	bd80      	pop	{r7, pc}

08010de0 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8010de0:	b580      	push	{r7, lr}
 8010de2:	b084      	sub	sp, #16
 8010de4:	af00      	add	r7, sp, #0
 8010de6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;


	res = validate(&dp->obj, &fs);			/* Check validity of the file object */
 8010de8:	687b      	ldr	r3, [r7, #4]
 8010dea:	f107 0208 	add.w	r2, r7, #8
 8010dee:	4611      	mov	r1, r2
 8010df0:	4618      	mov	r0, r3
 8010df2:	f7ff fb61 	bl	80104b8 <validate>
 8010df6:	4603      	mov	r3, r0
 8010df8:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010dfa:	7bfb      	ldrb	r3, [r7, #15]
 8010dfc:	2b00      	cmp	r3, #0
 8010dfe:	d110      	bne.n	8010e22 <f_closedir+0x42>
#if _FS_LOCK != 0
		if (dp->obj.lockid) {				/* Decrement sub-directory open counter */
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	691b      	ldr	r3, [r3, #16]
 8010e04:	2b00      	cmp	r3, #0
 8010e06:	d006      	beq.n	8010e16 <f_closedir+0x36>
			res = dec_lock(dp->obj.lockid);
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	691b      	ldr	r3, [r3, #16]
 8010e0c:	4618      	mov	r0, r3
 8010e0e:	f7fd fb35 	bl	800e47c <dec_lock>
 8010e12:	4603      	mov	r3, r0
 8010e14:	73fb      	strb	r3, [r7, #15]
		}
		if (res == FR_OK)
 8010e16:	7bfb      	ldrb	r3, [r7, #15]
 8010e18:	2b00      	cmp	r3, #0
 8010e1a:	d102      	bne.n	8010e22 <f_closedir+0x42>
#endif
		{
			dp->obj.fs = 0;			/* Invalidate directory object */
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	2200      	movs	r2, #0
 8010e20:	601a      	str	r2, [r3, #0]
		}
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8010e22:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e24:	4618      	mov	r0, r3
 8010e26:	3710      	adds	r7, #16
 8010e28:	46bd      	mov	sp, r7
 8010e2a:	bd80      	pop	{r7, pc}

08010e2c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 8010e2c:	b580      	push	{r7, lr}
 8010e2e:	b084      	sub	sp, #16
 8010e30:	af00      	add	r7, sp, #0
 8010e32:	6078      	str	r0, [r7, #4]
 8010e34:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS *fs;
	DEF_NAMBUF


	res = validate(&dp->obj, &fs);	/* Check validity of the directory object */
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	f107 0208 	add.w	r2, r7, #8
 8010e3c:	4611      	mov	r1, r2
 8010e3e:	4618      	mov	r0, r3
 8010e40:	f7ff fb3a 	bl	80104b8 <validate>
 8010e44:	4603      	mov	r3, r0
 8010e46:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8010e48:	7bfb      	ldrb	r3, [r7, #15]
 8010e4a:	2b00      	cmp	r3, #0
 8010e4c:	d126      	bne.n	8010e9c <f_readdir+0x70>
		if (!fno) {
 8010e4e:	683b      	ldr	r3, [r7, #0]
 8010e50:	2b00      	cmp	r3, #0
 8010e52:	d106      	bne.n	8010e62 <f_readdir+0x36>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 8010e54:	2100      	movs	r1, #0
 8010e56:	6878      	ldr	r0, [r7, #4]
 8010e58:	f7fd ff2e 	bl	800ecb8 <dir_sdi>
 8010e5c:	4603      	mov	r3, r0
 8010e5e:	73fb      	strb	r3, [r7, #15]
 8010e60:	e01c      	b.n	8010e9c <f_readdir+0x70>
		} else {
			INIT_NAMBUF(fs);
			res = dir_read(dp, 0);			/* Read an item */
 8010e62:	2100      	movs	r1, #0
 8010e64:	6878      	ldr	r0, [r7, #4]
 8010e66:	f7fe fad7 	bl	800f418 <dir_read>
 8010e6a:	4603      	mov	r3, r0
 8010e6c:	73fb      	strb	r3, [r7, #15]
			if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory */
 8010e6e:	7bfb      	ldrb	r3, [r7, #15]
 8010e70:	2b04      	cmp	r3, #4
 8010e72:	d101      	bne.n	8010e78 <f_readdir+0x4c>
 8010e74:	2300      	movs	r3, #0
 8010e76:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK) {				/* A valid entry is found */
 8010e78:	7bfb      	ldrb	r3, [r7, #15]
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d10e      	bne.n	8010e9c <f_readdir+0x70>
				get_fileinfo(dp, fno);		/* Get the object information */
 8010e7e:	6839      	ldr	r1, [r7, #0]
 8010e80:	6878      	ldr	r0, [r7, #4]
 8010e82:	f7fe fd29 	bl	800f8d8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 8010e86:	2100      	movs	r1, #0
 8010e88:	6878      	ldr	r0, [r7, #4]
 8010e8a:	f7fd ff90 	bl	800edae <dir_next>
 8010e8e:	4603      	mov	r3, r0
 8010e90:	73fb      	strb	r3, [r7, #15]
				if (res == FR_NO_FILE) res = FR_OK;	/* Ignore end of directory now */
 8010e92:	7bfb      	ldrb	r3, [r7, #15]
 8010e94:	2b04      	cmp	r3, #4
 8010e96:	d101      	bne.n	8010e9c <f_readdir+0x70>
 8010e98:	2300      	movs	r3, #0
 8010e9a:	73fb      	strb	r3, [r7, #15]
			}
			FREE_NAMBUF();
		}
	}
	LEAVE_FF(fs, res);
 8010e9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8010e9e:	4618      	mov	r0, r3
 8010ea0:	3710      	adds	r7, #16
 8010ea2:	46bd      	mov	sp, r7
 8010ea4:	bd80      	pop	{r7, pc}
	...

08010ea8 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8010ea8:	b480      	push	{r7}
 8010eaa:	b087      	sub	sp, #28
 8010eac:	af00      	add	r7, sp, #0
 8010eae:	60f8      	str	r0, [r7, #12]
 8010eb0:	60b9      	str	r1, [r7, #8]
 8010eb2:	4613      	mov	r3, r2
 8010eb4:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8010eb6:	2301      	movs	r3, #1
 8010eb8:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8010eba:	2300      	movs	r3, #0
 8010ebc:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8010ebe:	4b1e      	ldr	r3, [pc, #120]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010ec0:	7a5b      	ldrb	r3, [r3, #9]
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	2b00      	cmp	r3, #0
 8010ec6:	d131      	bne.n	8010f2c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8010ec8:	4b1b      	ldr	r3, [pc, #108]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010eca:	7a5b      	ldrb	r3, [r3, #9]
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	461a      	mov	r2, r3
 8010ed0:	4b19      	ldr	r3, [pc, #100]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010ed2:	2100      	movs	r1, #0
 8010ed4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8010ed6:	4b18      	ldr	r3, [pc, #96]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010ed8:	7a5b      	ldrb	r3, [r3, #9]
 8010eda:	b2db      	uxtb	r3, r3
 8010edc:	4a16      	ldr	r2, [pc, #88]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	4413      	add	r3, r2
 8010ee2:	68fa      	ldr	r2, [r7, #12]
 8010ee4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8010ee6:	4b14      	ldr	r3, [pc, #80]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010ee8:	7a5b      	ldrb	r3, [r3, #9]
 8010eea:	b2db      	uxtb	r3, r3
 8010eec:	461a      	mov	r2, r3
 8010eee:	4b12      	ldr	r3, [pc, #72]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010ef0:	4413      	add	r3, r2
 8010ef2:	79fa      	ldrb	r2, [r7, #7]
 8010ef4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8010ef6:	4b10      	ldr	r3, [pc, #64]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010ef8:	7a5b      	ldrb	r3, [r3, #9]
 8010efa:	b2db      	uxtb	r3, r3
 8010efc:	1c5a      	adds	r2, r3, #1
 8010efe:	b2d1      	uxtb	r1, r2
 8010f00:	4a0d      	ldr	r2, [pc, #52]	; (8010f38 <FATFS_LinkDriverEx+0x90>)
 8010f02:	7251      	strb	r1, [r2, #9]
 8010f04:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8010f06:	7dbb      	ldrb	r3, [r7, #22]
 8010f08:	3330      	adds	r3, #48	; 0x30
 8010f0a:	b2da      	uxtb	r2, r3
 8010f0c:	68bb      	ldr	r3, [r7, #8]
 8010f0e:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8010f10:	68bb      	ldr	r3, [r7, #8]
 8010f12:	3301      	adds	r3, #1
 8010f14:	223a      	movs	r2, #58	; 0x3a
 8010f16:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	3302      	adds	r3, #2
 8010f1c:	222f      	movs	r2, #47	; 0x2f
 8010f1e:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8010f20:	68bb      	ldr	r3, [r7, #8]
 8010f22:	3303      	adds	r3, #3
 8010f24:	2200      	movs	r2, #0
 8010f26:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8010f28:	2300      	movs	r3, #0
 8010f2a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8010f2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8010f2e:	4618      	mov	r0, r3
 8010f30:	371c      	adds	r7, #28
 8010f32:	46bd      	mov	sp, r7
 8010f34:	bc80      	pop	{r7}
 8010f36:	4770      	bx	lr
 8010f38:	200010f8 	.word	0x200010f8

08010f3c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8010f3c:	b580      	push	{r7, lr}
 8010f3e:	b082      	sub	sp, #8
 8010f40:	af00      	add	r7, sp, #0
 8010f42:	6078      	str	r0, [r7, #4]
 8010f44:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8010f46:	2200      	movs	r2, #0
 8010f48:	6839      	ldr	r1, [r7, #0]
 8010f4a:	6878      	ldr	r0, [r7, #4]
 8010f4c:	f7ff ffac 	bl	8010ea8 <FATFS_LinkDriverEx>
 8010f50:	4603      	mov	r3, r0
}
 8010f52:	4618      	mov	r0, r3
 8010f54:	3708      	adds	r7, #8
 8010f56:	46bd      	mov	sp, r7
 8010f58:	bd80      	pop	{r7, pc}
	...

08010f5c <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8010f5c:	b480      	push	{r7}
 8010f5e:	b085      	sub	sp, #20
 8010f60:	af00      	add	r7, sp, #0
 8010f62:	4603      	mov	r3, r0
 8010f64:	6039      	str	r1, [r7, #0]
 8010f66:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8010f68:	88fb      	ldrh	r3, [r7, #6]
 8010f6a:	2b7f      	cmp	r3, #127	; 0x7f
 8010f6c:	d802      	bhi.n	8010f74 <ff_convert+0x18>
		c = chr;
 8010f6e:	88fb      	ldrh	r3, [r7, #6]
 8010f70:	81fb      	strh	r3, [r7, #14]
 8010f72:	e025      	b.n	8010fc0 <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8010f74:	683b      	ldr	r3, [r7, #0]
 8010f76:	2b00      	cmp	r3, #0
 8010f78:	d00b      	beq.n	8010f92 <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8010f7a:	88fb      	ldrh	r3, [r7, #6]
 8010f7c:	2bff      	cmp	r3, #255	; 0xff
 8010f7e:	d805      	bhi.n	8010f8c <ff_convert+0x30>
 8010f80:	88fb      	ldrh	r3, [r7, #6]
 8010f82:	3b80      	subs	r3, #128	; 0x80
 8010f84:	4a11      	ldr	r2, [pc, #68]	; (8010fcc <ff_convert+0x70>)
 8010f86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010f8a:	e000      	b.n	8010f8e <ff_convert+0x32>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	81fb      	strh	r3, [r7, #14]
 8010f90:	e016      	b.n	8010fc0 <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8010f92:	2300      	movs	r3, #0
 8010f94:	81fb      	strh	r3, [r7, #14]
 8010f96:	e009      	b.n	8010fac <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8010f98:	89fb      	ldrh	r3, [r7, #14]
 8010f9a:	4a0c      	ldr	r2, [pc, #48]	; (8010fcc <ff_convert+0x70>)
 8010f9c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8010fa0:	88fa      	ldrh	r2, [r7, #6]
 8010fa2:	429a      	cmp	r2, r3
 8010fa4:	d006      	beq.n	8010fb4 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8010fa6:	89fb      	ldrh	r3, [r7, #14]
 8010fa8:	3301      	adds	r3, #1
 8010faa:	81fb      	strh	r3, [r7, #14]
 8010fac:	89fb      	ldrh	r3, [r7, #14]
 8010fae:	2b7f      	cmp	r3, #127	; 0x7f
 8010fb0:	d9f2      	bls.n	8010f98 <ff_convert+0x3c>
 8010fb2:	e000      	b.n	8010fb6 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8010fb4:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8010fb6:	89fb      	ldrh	r3, [r7, #14]
 8010fb8:	3380      	adds	r3, #128	; 0x80
 8010fba:	b29b      	uxth	r3, r3
 8010fbc:	b2db      	uxtb	r3, r3
 8010fbe:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8010fc0:	89fb      	ldrh	r3, [r7, #14]
}
 8010fc2:	4618      	mov	r0, r3
 8010fc4:	3714      	adds	r7, #20
 8010fc6:	46bd      	mov	sp, r7
 8010fc8:	bc80      	pop	{r7}
 8010fca:	4770      	bx	lr
 8010fcc:	08012608 	.word	0x08012608

08010fd0 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8010fd0:	b480      	push	{r7}
 8010fd2:	b087      	sub	sp, #28
 8010fd4:	af00      	add	r7, sp, #0
 8010fd6:	4603      	mov	r3, r0
 8010fd8:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 8010fda:	88fb      	ldrh	r3, [r7, #6]
 8010fdc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010fe0:	d201      	bcs.n	8010fe6 <ff_wtoupper+0x16>
 8010fe2:	4b3d      	ldr	r3, [pc, #244]	; (80110d8 <ff_wtoupper+0x108>)
 8010fe4:	e000      	b.n	8010fe8 <ff_wtoupper+0x18>
 8010fe6:	4b3d      	ldr	r3, [pc, #244]	; (80110dc <ff_wtoupper+0x10c>)
 8010fe8:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 8010fea:	697b      	ldr	r3, [r7, #20]
 8010fec:	1c9a      	adds	r2, r3, #2
 8010fee:	617a      	str	r2, [r7, #20]
 8010ff0:	881b      	ldrh	r3, [r3, #0]
 8010ff2:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8010ff4:	8a7b      	ldrh	r3, [r7, #18]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d068      	beq.n	80110cc <ff_wtoupper+0xfc>
 8010ffa:	88fa      	ldrh	r2, [r7, #6]
 8010ffc:	8a7b      	ldrh	r3, [r7, #18]
 8010ffe:	429a      	cmp	r2, r3
 8011000:	d364      	bcc.n	80110cc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8011002:	697b      	ldr	r3, [r7, #20]
 8011004:	1c9a      	adds	r2, r3, #2
 8011006:	617a      	str	r2, [r7, #20]
 8011008:	881b      	ldrh	r3, [r3, #0]
 801100a:	823b      	strh	r3, [r7, #16]
 801100c:	8a3b      	ldrh	r3, [r7, #16]
 801100e:	0a1b      	lsrs	r3, r3, #8
 8011010:	81fb      	strh	r3, [r7, #14]
 8011012:	8a3b      	ldrh	r3, [r7, #16]
 8011014:	b2db      	uxtb	r3, r3
 8011016:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8011018:	88fa      	ldrh	r2, [r7, #6]
 801101a:	8a79      	ldrh	r1, [r7, #18]
 801101c:	8a3b      	ldrh	r3, [r7, #16]
 801101e:	440b      	add	r3, r1
 8011020:	429a      	cmp	r2, r3
 8011022:	da49      	bge.n	80110b8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8011024:	89fb      	ldrh	r3, [r7, #14]
 8011026:	2b08      	cmp	r3, #8
 8011028:	d84f      	bhi.n	80110ca <ff_wtoupper+0xfa>
 801102a:	a201      	add	r2, pc, #4	; (adr r2, 8011030 <ff_wtoupper+0x60>)
 801102c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011030:	08011055 	.word	0x08011055
 8011034:	08011067 	.word	0x08011067
 8011038:	0801107d 	.word	0x0801107d
 801103c:	08011085 	.word	0x08011085
 8011040:	0801108d 	.word	0x0801108d
 8011044:	08011095 	.word	0x08011095
 8011048:	0801109d 	.word	0x0801109d
 801104c:	080110a5 	.word	0x080110a5
 8011050:	080110ad 	.word	0x080110ad
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8011054:	88fa      	ldrh	r2, [r7, #6]
 8011056:	8a7b      	ldrh	r3, [r7, #18]
 8011058:	1ad3      	subs	r3, r2, r3
 801105a:	005b      	lsls	r3, r3, #1
 801105c:	697a      	ldr	r2, [r7, #20]
 801105e:	4413      	add	r3, r2
 8011060:	881b      	ldrh	r3, [r3, #0]
 8011062:	80fb      	strh	r3, [r7, #6]
 8011064:	e027      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8011066:	88fa      	ldrh	r2, [r7, #6]
 8011068:	8a7b      	ldrh	r3, [r7, #18]
 801106a:	1ad3      	subs	r3, r2, r3
 801106c:	b29b      	uxth	r3, r3
 801106e:	f003 0301 	and.w	r3, r3, #1
 8011072:	b29b      	uxth	r3, r3
 8011074:	88fa      	ldrh	r2, [r7, #6]
 8011076:	1ad3      	subs	r3, r2, r3
 8011078:	80fb      	strh	r3, [r7, #6]
 801107a:	e01c      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 801107c:	88fb      	ldrh	r3, [r7, #6]
 801107e:	3b10      	subs	r3, #16
 8011080:	80fb      	strh	r3, [r7, #6]
 8011082:	e018      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 8011084:	88fb      	ldrh	r3, [r7, #6]
 8011086:	3b20      	subs	r3, #32
 8011088:	80fb      	strh	r3, [r7, #6]
 801108a:	e014      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 801108c:	88fb      	ldrh	r3, [r7, #6]
 801108e:	3b30      	subs	r3, #48	; 0x30
 8011090:	80fb      	strh	r3, [r7, #6]
 8011092:	e010      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 8011094:	88fb      	ldrh	r3, [r7, #6]
 8011096:	3b1a      	subs	r3, #26
 8011098:	80fb      	strh	r3, [r7, #6]
 801109a:	e00c      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 801109c:	88fb      	ldrh	r3, [r7, #6]
 801109e:	3308      	adds	r3, #8
 80110a0:	80fb      	strh	r3, [r7, #6]
 80110a2:	e008      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80110a4:	88fb      	ldrh	r3, [r7, #6]
 80110a6:	3b50      	subs	r3, #80	; 0x50
 80110a8:	80fb      	strh	r3, [r7, #6]
 80110aa:	e004      	b.n	80110b6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80110ac:	88fb      	ldrh	r3, [r7, #6]
 80110ae:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80110b2:	80fb      	strh	r3, [r7, #6]
 80110b4:	bf00      	nop
			}
			break;
 80110b6:	e008      	b.n	80110ca <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80110b8:	89fb      	ldrh	r3, [r7, #14]
 80110ba:	2b00      	cmp	r3, #0
 80110bc:	d195      	bne.n	8010fea <ff_wtoupper+0x1a>
 80110be:	8a3b      	ldrh	r3, [r7, #16]
 80110c0:	005b      	lsls	r3, r3, #1
 80110c2:	697a      	ldr	r2, [r7, #20]
 80110c4:	4413      	add	r3, r2
 80110c6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80110c8:	e78f      	b.n	8010fea <ff_wtoupper+0x1a>
			break;
 80110ca:	bf00      	nop
	}

	return chr;
 80110cc:	88fb      	ldrh	r3, [r7, #6]
}
 80110ce:	4618      	mov	r0, r3
 80110d0:	371c      	adds	r7, #28
 80110d2:	46bd      	mov	sp, r7
 80110d4:	bc80      	pop	{r7}
 80110d6:	4770      	bx	lr
 80110d8:	08012708 	.word	0x08012708
 80110dc:	080128fc 	.word	0x080128fc

080110e0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80110e0:	b580      	push	{r7, lr}
 80110e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80110e4:	2200      	movs	r2, #0
 80110e6:	4912      	ldr	r1, [pc, #72]	; (8011130 <MX_USB_DEVICE_Init+0x50>)
 80110e8:	4812      	ldr	r0, [pc, #72]	; (8011134 <MX_USB_DEVICE_Init+0x54>)
 80110ea:	f7fb ff04 	bl	800cef6 <USBD_Init>
 80110ee:	4603      	mov	r3, r0
 80110f0:	2b00      	cmp	r3, #0
 80110f2:	d001      	beq.n	80110f8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80110f4:	f7f2 fe70 	bl	8003dd8 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80110f8:	490f      	ldr	r1, [pc, #60]	; (8011138 <MX_USB_DEVICE_Init+0x58>)
 80110fa:	480e      	ldr	r0, [pc, #56]	; (8011134 <MX_USB_DEVICE_Init+0x54>)
 80110fc:	f7fb ff26 	bl	800cf4c <USBD_RegisterClass>
 8011100:	4603      	mov	r3, r0
 8011102:	2b00      	cmp	r3, #0
 8011104:	d001      	beq.n	801110a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8011106:	f7f2 fe67 	bl	8003dd8 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 801110a:	490c      	ldr	r1, [pc, #48]	; (801113c <MX_USB_DEVICE_Init+0x5c>)
 801110c:	4809      	ldr	r0, [pc, #36]	; (8011134 <MX_USB_DEVICE_Init+0x54>)
 801110e:	f7fb fe57 	bl	800cdc0 <USBD_CDC_RegisterInterface>
 8011112:	4603      	mov	r3, r0
 8011114:	2b00      	cmp	r3, #0
 8011116:	d001      	beq.n	801111c <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8011118:	f7f2 fe5e 	bl	8003dd8 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 801111c:	4805      	ldr	r0, [pc, #20]	; (8011134 <MX_USB_DEVICE_Init+0x54>)
 801111e:	f7fb ff2e 	bl	800cf7e <USBD_Start>
 8011122:	4603      	mov	r3, r0
 8011124:	2b00      	cmp	r3, #0
 8011126:	d001      	beq.n	801112c <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8011128:	f7f2 fe56 	bl	8003dd8 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 801112c:	bf00      	nop
 801112e:	bd80      	pop	{r7, pc}
 8011130:	200001c8 	.word	0x200001c8
 8011134:	20001104 	.word	0x20001104
 8011138:	200000b4 	.word	0x200000b4
 801113c:	200001b8 	.word	0x200001b8

08011140 <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 8011140:	b580      	push	{r7, lr}
 8011142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8011144:	2200      	movs	r2, #0
 8011146:	4905      	ldr	r1, [pc, #20]	; (801115c <CDC_Init_FS+0x1c>)
 8011148:	4805      	ldr	r0, [pc, #20]	; (8011160 <CDC_Init_FS+0x20>)
 801114a:	f7fb fe4f 	bl	800cdec <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801114e:	4905      	ldr	r1, [pc, #20]	; (8011164 <CDC_Init_FS+0x24>)
 8011150:	4803      	ldr	r0, [pc, #12]	; (8011160 <CDC_Init_FS+0x20>)
 8011152:	f7fb fe64 	bl	800ce1e <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8011156:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 8011158:	4618      	mov	r0, r3
 801115a:	bd80      	pop	{r7, pc}
 801115c:	20001788 	.word	0x20001788
 8011160:	20001104 	.word	0x20001104
 8011164:	200013a0 	.word	0x200013a0

08011168 <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 8011168:	b480      	push	{r7}
 801116a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 801116c:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 801116e:	4618      	mov	r0, r3
 8011170:	46bd      	mov	sp, r7
 8011172:	bc80      	pop	{r7}
 8011174:	4770      	bx	lr
	...

08011178 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8011178:	b480      	push	{r7}
 801117a:	b083      	sub	sp, #12
 801117c:	af00      	add	r7, sp, #0
 801117e:	4603      	mov	r3, r0
 8011180:	6039      	str	r1, [r7, #0]
 8011182:	71fb      	strb	r3, [r7, #7]
 8011184:	4613      	mov	r3, r2
 8011186:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 8011188:	79fb      	ldrb	r3, [r7, #7]
 801118a:	2b23      	cmp	r3, #35	; 0x23
 801118c:	d84a      	bhi.n	8011224 <CDC_Control_FS+0xac>
 801118e:	a201      	add	r2, pc, #4	; (adr r2, 8011194 <CDC_Control_FS+0x1c>)
 8011190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011194:	08011225 	.word	0x08011225
 8011198:	08011225 	.word	0x08011225
 801119c:	08011225 	.word	0x08011225
 80111a0:	08011225 	.word	0x08011225
 80111a4:	08011225 	.word	0x08011225
 80111a8:	08011225 	.word	0x08011225
 80111ac:	08011225 	.word	0x08011225
 80111b0:	08011225 	.word	0x08011225
 80111b4:	08011225 	.word	0x08011225
 80111b8:	08011225 	.word	0x08011225
 80111bc:	08011225 	.word	0x08011225
 80111c0:	08011225 	.word	0x08011225
 80111c4:	08011225 	.word	0x08011225
 80111c8:	08011225 	.word	0x08011225
 80111cc:	08011225 	.word	0x08011225
 80111d0:	08011225 	.word	0x08011225
 80111d4:	08011225 	.word	0x08011225
 80111d8:	08011225 	.word	0x08011225
 80111dc:	08011225 	.word	0x08011225
 80111e0:	08011225 	.word	0x08011225
 80111e4:	08011225 	.word	0x08011225
 80111e8:	08011225 	.word	0x08011225
 80111ec:	08011225 	.word	0x08011225
 80111f0:	08011225 	.word	0x08011225
 80111f4:	08011225 	.word	0x08011225
 80111f8:	08011225 	.word	0x08011225
 80111fc:	08011225 	.word	0x08011225
 8011200:	08011225 	.word	0x08011225
 8011204:	08011225 	.word	0x08011225
 8011208:	08011225 	.word	0x08011225
 801120c:	08011225 	.word	0x08011225
 8011210:	08011225 	.word	0x08011225
 8011214:	08011225 	.word	0x08011225
 8011218:	08011225 	.word	0x08011225
 801121c:	08011225 	.word	0x08011225
 8011220:	08011225 	.word	0x08011225
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 8011224:	bf00      	nop
  }

  return (USBD_OK);
 8011226:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 8011228:	4618      	mov	r0, r3
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	bc80      	pop	{r7}
 8011230:	4770      	bx	lr
 8011232:	bf00      	nop

08011234 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8011234:	b580      	push	{r7, lr}
 8011236:	b082      	sub	sp, #8
 8011238:	af00      	add	r7, sp, #0
 801123a:	6078      	str	r0, [r7, #4]
 801123c:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 801123e:	6879      	ldr	r1, [r7, #4]
 8011240:	4807      	ldr	r0, [pc, #28]	; (8011260 <CDC_Receive_FS+0x2c>)
 8011242:	f7fb fdec 	bl	800ce1e <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8011246:	4806      	ldr	r0, [pc, #24]	; (8011260 <CDC_Receive_FS+0x2c>)
 8011248:	f7fb fe2b 	bl	800cea2 <USBD_CDC_ReceivePacket>

  //then copy contents
//  memcpy(USB_Rx_Buf, Buf, (uint8_t)*Len);

  //handle the parsing of the buffer in the main function
  USBDataReceived_IT(Buf, Len);
 801124c:	6839      	ldr	r1, [r7, #0]
 801124e:	6878      	ldr	r0, [r7, #4]
 8011250:	f7f2 fd5e 	bl	8003d10 <USBDataReceived_IT>

  return (USBD_OK);
 8011254:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 8011256:	4618      	mov	r0, r3
 8011258:	3708      	adds	r7, #8
 801125a:	46bd      	mov	sp, r7
 801125c:	bd80      	pop	{r7, pc}
 801125e:	bf00      	nop
 8011260:	20001104 	.word	0x20001104

08011264 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8011264:	b580      	push	{r7, lr}
 8011266:	b084      	sub	sp, #16
 8011268:	af00      	add	r7, sp, #0
 801126a:	6078      	str	r0, [r7, #4]
 801126c:	460b      	mov	r3, r1
 801126e:	807b      	strh	r3, [r7, #2]
  uint8_t result = USBD_OK;
 8011270:	2300      	movs	r3, #0
 8011272:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8011274:	4b0d      	ldr	r3, [pc, #52]	; (80112ac <CDC_Transmit_FS+0x48>)
 8011276:	f8d3 3290 	ldr.w	r3, [r3, #656]	; 0x290
 801127a:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 801127c:	68bb      	ldr	r3, [r7, #8]
 801127e:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8011282:	2b00      	cmp	r3, #0
 8011284:	d001      	beq.n	801128a <CDC_Transmit_FS+0x26>
    return USBD_BUSY;
 8011286:	2301      	movs	r3, #1
 8011288:	e00b      	b.n	80112a2 <CDC_Transmit_FS+0x3e>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 801128a:	887b      	ldrh	r3, [r7, #2]
 801128c:	461a      	mov	r2, r3
 801128e:	6879      	ldr	r1, [r7, #4]
 8011290:	4806      	ldr	r0, [pc, #24]	; (80112ac <CDC_Transmit_FS+0x48>)
 8011292:	f7fb fdab 	bl	800cdec <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8011296:	4805      	ldr	r0, [pc, #20]	; (80112ac <CDC_Transmit_FS+0x48>)
 8011298:	f7fb fdd4 	bl	800ce44 <USBD_CDC_TransmitPacket>
 801129c:	4603      	mov	r3, r0
 801129e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE END 7 */
  return result;
 80112a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80112a2:	4618      	mov	r0, r3
 80112a4:	3710      	adds	r7, #16
 80112a6:	46bd      	mov	sp, r7
 80112a8:	bd80      	pop	{r7, pc}
 80112aa:	bf00      	nop
 80112ac:	20001104 	.word	0x20001104

080112b0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112b0:	b480      	push	{r7}
 80112b2:	b083      	sub	sp, #12
 80112b4:	af00      	add	r7, sp, #0
 80112b6:	4603      	mov	r3, r0
 80112b8:	6039      	str	r1, [r7, #0]
 80112ba:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80112bc:	683b      	ldr	r3, [r7, #0]
 80112be:	2212      	movs	r2, #18
 80112c0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80112c2:	4b03      	ldr	r3, [pc, #12]	; (80112d0 <USBD_FS_DeviceDescriptor+0x20>)
}
 80112c4:	4618      	mov	r0, r3
 80112c6:	370c      	adds	r7, #12
 80112c8:	46bd      	mov	sp, r7
 80112ca:	bc80      	pop	{r7}
 80112cc:	4770      	bx	lr
 80112ce:	bf00      	nop
 80112d0:	200001e4 	.word	0x200001e4

080112d4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112d4:	b480      	push	{r7}
 80112d6:	b083      	sub	sp, #12
 80112d8:	af00      	add	r7, sp, #0
 80112da:	4603      	mov	r3, r0
 80112dc:	6039      	str	r1, [r7, #0]
 80112de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80112e0:	683b      	ldr	r3, [r7, #0]
 80112e2:	2204      	movs	r2, #4
 80112e4:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80112e6:	4b03      	ldr	r3, [pc, #12]	; (80112f4 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	370c      	adds	r7, #12
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bc80      	pop	{r7}
 80112f0:	4770      	bx	lr
 80112f2:	bf00      	nop
 80112f4:	200001f8 	.word	0x200001f8

080112f8 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80112f8:	b580      	push	{r7, lr}
 80112fa:	b082      	sub	sp, #8
 80112fc:	af00      	add	r7, sp, #0
 80112fe:	4603      	mov	r3, r0
 8011300:	6039      	str	r1, [r7, #0]
 8011302:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8011304:	79fb      	ldrb	r3, [r7, #7]
 8011306:	2b00      	cmp	r3, #0
 8011308:	d105      	bne.n	8011316 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801130a:	683a      	ldr	r2, [r7, #0]
 801130c:	4907      	ldr	r1, [pc, #28]	; (801132c <USBD_FS_ProductStrDescriptor+0x34>)
 801130e:	4808      	ldr	r0, [pc, #32]	; (8011330 <USBD_FS_ProductStrDescriptor+0x38>)
 8011310:	f7fc fd38 	bl	800dd84 <USBD_GetString>
 8011314:	e004      	b.n	8011320 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8011316:	683a      	ldr	r2, [r7, #0]
 8011318:	4904      	ldr	r1, [pc, #16]	; (801132c <USBD_FS_ProductStrDescriptor+0x34>)
 801131a:	4805      	ldr	r0, [pc, #20]	; (8011330 <USBD_FS_ProductStrDescriptor+0x38>)
 801131c:	f7fc fd32 	bl	800dd84 <USBD_GetString>
  }
  return USBD_StrDesc;
 8011320:	4b02      	ldr	r3, [pc, #8]	; (801132c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8011322:	4618      	mov	r0, r3
 8011324:	3708      	adds	r7, #8
 8011326:	46bd      	mov	sp, r7
 8011328:	bd80      	pop	{r7, pc}
 801132a:	bf00      	nop
 801132c:	20001b70 	.word	0x20001b70
 8011330:	08012500 	.word	0x08012500

08011334 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011334:	b580      	push	{r7, lr}
 8011336:	b082      	sub	sp, #8
 8011338:	af00      	add	r7, sp, #0
 801133a:	4603      	mov	r3, r0
 801133c:	6039      	str	r1, [r7, #0]
 801133e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8011340:	683a      	ldr	r2, [r7, #0]
 8011342:	4904      	ldr	r1, [pc, #16]	; (8011354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8011344:	4804      	ldr	r0, [pc, #16]	; (8011358 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8011346:	f7fc fd1d 	bl	800dd84 <USBD_GetString>
  return USBD_StrDesc;
 801134a:	4b02      	ldr	r3, [pc, #8]	; (8011354 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 801134c:	4618      	mov	r0, r3
 801134e:	3708      	adds	r7, #8
 8011350:	46bd      	mov	sp, r7
 8011352:	bd80      	pop	{r7, pc}
 8011354:	20001b70 	.word	0x20001b70
 8011358:	08012524 	.word	0x08012524

0801135c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801135c:	b580      	push	{r7, lr}
 801135e:	b082      	sub	sp, #8
 8011360:	af00      	add	r7, sp, #0
 8011362:	4603      	mov	r3, r0
 8011364:	6039      	str	r1, [r7, #0]
 8011366:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8011368:	683b      	ldr	r3, [r7, #0]
 801136a:	221a      	movs	r2, #26
 801136c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 801136e:	f000 f843 	bl	80113f8 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8011372:	4b02      	ldr	r3, [pc, #8]	; (801137c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8011374:	4618      	mov	r0, r3
 8011376:	3708      	adds	r7, #8
 8011378:	46bd      	mov	sp, r7
 801137a:	bd80      	pop	{r7, pc}
 801137c:	200001fc 	.word	0x200001fc

08011380 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8011380:	b580      	push	{r7, lr}
 8011382:	b082      	sub	sp, #8
 8011384:	af00      	add	r7, sp, #0
 8011386:	4603      	mov	r3, r0
 8011388:	6039      	str	r1, [r7, #0]
 801138a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 801138c:	79fb      	ldrb	r3, [r7, #7]
 801138e:	2b00      	cmp	r3, #0
 8011390:	d105      	bne.n	801139e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8011392:	683a      	ldr	r2, [r7, #0]
 8011394:	4907      	ldr	r1, [pc, #28]	; (80113b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8011396:	4808      	ldr	r0, [pc, #32]	; (80113b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8011398:	f7fc fcf4 	bl	800dd84 <USBD_GetString>
 801139c:	e004      	b.n	80113a8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 801139e:	683a      	ldr	r2, [r7, #0]
 80113a0:	4904      	ldr	r1, [pc, #16]	; (80113b4 <USBD_FS_ConfigStrDescriptor+0x34>)
 80113a2:	4805      	ldr	r0, [pc, #20]	; (80113b8 <USBD_FS_ConfigStrDescriptor+0x38>)
 80113a4:	f7fc fcee 	bl	800dd84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113a8:	4b02      	ldr	r3, [pc, #8]	; (80113b4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80113aa:	4618      	mov	r0, r3
 80113ac:	3708      	adds	r7, #8
 80113ae:	46bd      	mov	sp, r7
 80113b0:	bd80      	pop	{r7, pc}
 80113b2:	bf00      	nop
 80113b4:	20001b70 	.word	0x20001b70
 80113b8:	08012538 	.word	0x08012538

080113bc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80113bc:	b580      	push	{r7, lr}
 80113be:	b082      	sub	sp, #8
 80113c0:	af00      	add	r7, sp, #0
 80113c2:	4603      	mov	r3, r0
 80113c4:	6039      	str	r1, [r7, #0]
 80113c6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80113c8:	79fb      	ldrb	r3, [r7, #7]
 80113ca:	2b00      	cmp	r3, #0
 80113cc:	d105      	bne.n	80113da <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80113ce:	683a      	ldr	r2, [r7, #0]
 80113d0:	4907      	ldr	r1, [pc, #28]	; (80113f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80113d2:	4808      	ldr	r0, [pc, #32]	; (80113f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80113d4:	f7fc fcd6 	bl	800dd84 <USBD_GetString>
 80113d8:	e004      	b.n	80113e4 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80113da:	683a      	ldr	r2, [r7, #0]
 80113dc:	4904      	ldr	r1, [pc, #16]	; (80113f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80113de:	4805      	ldr	r0, [pc, #20]	; (80113f4 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80113e0:	f7fc fcd0 	bl	800dd84 <USBD_GetString>
  }
  return USBD_StrDesc;
 80113e4:	4b02      	ldr	r3, [pc, #8]	; (80113f0 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80113e6:	4618      	mov	r0, r3
 80113e8:	3708      	adds	r7, #8
 80113ea:	46bd      	mov	sp, r7
 80113ec:	bd80      	pop	{r7, pc}
 80113ee:	bf00      	nop
 80113f0:	20001b70 	.word	0x20001b70
 80113f4:	08012544 	.word	0x08012544

080113f8 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80113f8:	b580      	push	{r7, lr}
 80113fa:	b084      	sub	sp, #16
 80113fc:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80113fe:	4b0f      	ldr	r3, [pc, #60]	; (801143c <Get_SerialNum+0x44>)
 8011400:	681b      	ldr	r3, [r3, #0]
 8011402:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8011404:	4b0e      	ldr	r3, [pc, #56]	; (8011440 <Get_SerialNum+0x48>)
 8011406:	681b      	ldr	r3, [r3, #0]
 8011408:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 801140a:	4b0e      	ldr	r3, [pc, #56]	; (8011444 <Get_SerialNum+0x4c>)
 801140c:	681b      	ldr	r3, [r3, #0]
 801140e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8011410:	68fa      	ldr	r2, [r7, #12]
 8011412:	687b      	ldr	r3, [r7, #4]
 8011414:	4413      	add	r3, r2
 8011416:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8011418:	68fb      	ldr	r3, [r7, #12]
 801141a:	2b00      	cmp	r3, #0
 801141c:	d009      	beq.n	8011432 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801141e:	2208      	movs	r2, #8
 8011420:	4909      	ldr	r1, [pc, #36]	; (8011448 <Get_SerialNum+0x50>)
 8011422:	68f8      	ldr	r0, [r7, #12]
 8011424:	f000 f814 	bl	8011450 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8011428:	2204      	movs	r2, #4
 801142a:	4908      	ldr	r1, [pc, #32]	; (801144c <Get_SerialNum+0x54>)
 801142c:	68b8      	ldr	r0, [r7, #8]
 801142e:	f000 f80f 	bl	8011450 <IntToUnicode>
  }
}
 8011432:	bf00      	nop
 8011434:	3710      	adds	r7, #16
 8011436:	46bd      	mov	sp, r7
 8011438:	bd80      	pop	{r7, pc}
 801143a:	bf00      	nop
 801143c:	1ff80050 	.word	0x1ff80050
 8011440:	1ff80054 	.word	0x1ff80054
 8011444:	1ff80058 	.word	0x1ff80058
 8011448:	200001fe 	.word	0x200001fe
 801144c:	2000020e 	.word	0x2000020e

08011450 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8011450:	b480      	push	{r7}
 8011452:	b087      	sub	sp, #28
 8011454:	af00      	add	r7, sp, #0
 8011456:	60f8      	str	r0, [r7, #12]
 8011458:	60b9      	str	r1, [r7, #8]
 801145a:	4613      	mov	r3, r2
 801145c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 801145e:	2300      	movs	r3, #0
 8011460:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8011462:	2300      	movs	r3, #0
 8011464:	75fb      	strb	r3, [r7, #23]
 8011466:	e027      	b.n	80114b8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8011468:	68fb      	ldr	r3, [r7, #12]
 801146a:	0f1b      	lsrs	r3, r3, #28
 801146c:	2b09      	cmp	r3, #9
 801146e:	d80b      	bhi.n	8011488 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8011470:	68fb      	ldr	r3, [r7, #12]
 8011472:	0f1b      	lsrs	r3, r3, #28
 8011474:	b2da      	uxtb	r2, r3
 8011476:	7dfb      	ldrb	r3, [r7, #23]
 8011478:	005b      	lsls	r3, r3, #1
 801147a:	4619      	mov	r1, r3
 801147c:	68bb      	ldr	r3, [r7, #8]
 801147e:	440b      	add	r3, r1
 8011480:	3230      	adds	r2, #48	; 0x30
 8011482:	b2d2      	uxtb	r2, r2
 8011484:	701a      	strb	r2, [r3, #0]
 8011486:	e00a      	b.n	801149e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8011488:	68fb      	ldr	r3, [r7, #12]
 801148a:	0f1b      	lsrs	r3, r3, #28
 801148c:	b2da      	uxtb	r2, r3
 801148e:	7dfb      	ldrb	r3, [r7, #23]
 8011490:	005b      	lsls	r3, r3, #1
 8011492:	4619      	mov	r1, r3
 8011494:	68bb      	ldr	r3, [r7, #8]
 8011496:	440b      	add	r3, r1
 8011498:	3237      	adds	r2, #55	; 0x37
 801149a:	b2d2      	uxtb	r2, r2
 801149c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	011b      	lsls	r3, r3, #4
 80114a2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 80114a4:	7dfb      	ldrb	r3, [r7, #23]
 80114a6:	005b      	lsls	r3, r3, #1
 80114a8:	3301      	adds	r3, #1
 80114aa:	68ba      	ldr	r2, [r7, #8]
 80114ac:	4413      	add	r3, r2
 80114ae:	2200      	movs	r2, #0
 80114b0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 80114b2:	7dfb      	ldrb	r3, [r7, #23]
 80114b4:	3301      	adds	r3, #1
 80114b6:	75fb      	strb	r3, [r7, #23]
 80114b8:	7dfa      	ldrb	r2, [r7, #23]
 80114ba:	79fb      	ldrb	r3, [r7, #7]
 80114bc:	429a      	cmp	r2, r3
 80114be:	d3d3      	bcc.n	8011468 <IntToUnicode+0x18>
  }
}
 80114c0:	bf00      	nop
 80114c2:	bf00      	nop
 80114c4:	371c      	adds	r7, #28
 80114c6:	46bd      	mov	sp, r7
 80114c8:	bc80      	pop	{r7}
 80114ca:	4770      	bx	lr

080114cc <HAL_PCDEx_SetConnectionState>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#else
void HAL_PCDEx_SetConnectionState(PCD_HandleTypeDef *hpcd, uint8_t state)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80114cc:	b480      	push	{r7}
 80114ce:	b083      	sub	sp, #12
 80114d0:	af00      	add	r7, sp, #0
 80114d2:	6078      	str	r0, [r7, #4]
 80114d4:	460b      	mov	r3, r1
 80114d6:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN 6 */
  if (state == 1)
 80114d8:	78fb      	ldrb	r3, [r7, #3]
 80114da:	2b01      	cmp	r3, #1
 80114dc:	d106      	bne.n	80114ec <HAL_PCDEx_SetConnectionState+0x20>
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_ENABLE();
 80114de:	4b09      	ldr	r3, [pc, #36]	; (8011504 <HAL_PCDEx_SetConnectionState+0x38>)
 80114e0:	685b      	ldr	r3, [r3, #4]
 80114e2:	4a08      	ldr	r2, [pc, #32]	; (8011504 <HAL_PCDEx_SetConnectionState+0x38>)
 80114e4:	f043 0301 	orr.w	r3, r3, #1
 80114e8:	6053      	str	r3, [r2, #4]
  {
    /*  DP Pull-Down is Internal */
    __HAL_SYSCFG_USBPULLUP_DISABLE();
  }
  /* USER CODE END 6 */
}
 80114ea:	e005      	b.n	80114f8 <HAL_PCDEx_SetConnectionState+0x2c>
    __HAL_SYSCFG_USBPULLUP_DISABLE();
 80114ec:	4b05      	ldr	r3, [pc, #20]	; (8011504 <HAL_PCDEx_SetConnectionState+0x38>)
 80114ee:	685b      	ldr	r3, [r3, #4]
 80114f0:	4a04      	ldr	r2, [pc, #16]	; (8011504 <HAL_PCDEx_SetConnectionState+0x38>)
 80114f2:	f023 0301 	bic.w	r3, r3, #1
 80114f6:	6053      	str	r3, [r2, #4]
}
 80114f8:	bf00      	nop
 80114fa:	370c      	adds	r7, #12
 80114fc:	46bd      	mov	sp, r7
 80114fe:	bc80      	pop	{r7}
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	40010000 	.word	0x40010000

08011508 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8011508:	b580      	push	{r7, lr}
 801150a:	b084      	sub	sp, #16
 801150c:	af00      	add	r7, sp, #0
 801150e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8011510:	687b      	ldr	r3, [r7, #4]
 8011512:	681b      	ldr	r3, [r3, #0]
 8011514:	4a0d      	ldr	r2, [pc, #52]	; (801154c <HAL_PCD_MspInit+0x44>)
 8011516:	4293      	cmp	r3, r2
 8011518:	d113      	bne.n	8011542 <HAL_PCD_MspInit+0x3a>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801151a:	4b0d      	ldr	r3, [pc, #52]	; (8011550 <HAL_PCD_MspInit+0x48>)
 801151c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801151e:	4a0c      	ldr	r2, [pc, #48]	; (8011550 <HAL_PCD_MspInit+0x48>)
 8011520:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8011524:	6253      	str	r3, [r2, #36]	; 0x24
 8011526:	4b0a      	ldr	r3, [pc, #40]	; (8011550 <HAL_PCD_MspInit+0x48>)
 8011528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801152a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 801152e:	60fb      	str	r3, [r7, #12]
 8011530:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_LP_IRQn, 0, 0);
 8011532:	2200      	movs	r2, #0
 8011534:	2100      	movs	r1, #0
 8011536:	2014      	movs	r0, #20
 8011538:	f7f3 fd0d 	bl	8004f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_LP_IRQn);
 801153c:	2014      	movs	r0, #20
 801153e:	f7f3 fd26 	bl	8004f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8011542:	bf00      	nop
 8011544:	3710      	adds	r7, #16
 8011546:	46bd      	mov	sp, r7
 8011548:	bd80      	pop	{r7, pc}
 801154a:	bf00      	nop
 801154c:	40005c00 	.word	0x40005c00
 8011550:	40023800 	.word	0x40023800

08011554 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011554:	b580      	push	{r7, lr}
 8011556:	b082      	sub	sp, #8
 8011558:	af00      	add	r7, sp, #0
 801155a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 801155c:	687b      	ldr	r3, [r7, #4]
 801155e:	f8d3 22e8 	ldr.w	r2, [r3, #744]	; 0x2e8
 8011562:	687b      	ldr	r3, [r7, #4]
 8011564:	f503 732c 	add.w	r3, r3, #688	; 0x2b0
 8011568:	4619      	mov	r1, r3
 801156a:	4610      	mov	r0, r2
 801156c:	f7fb fd4f 	bl	800d00e <USBD_LL_SetupStage>
}
 8011570:	bf00      	nop
 8011572:	3708      	adds	r7, #8
 8011574:	46bd      	mov	sp, r7
 8011576:	bd80      	pop	{r7, pc}

08011578 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011578:	b580      	push	{r7, lr}
 801157a:	b082      	sub	sp, #8
 801157c:	af00      	add	r7, sp, #0
 801157e:	6078      	str	r0, [r7, #4]
 8011580:	460b      	mov	r3, r1
 8011582:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8011584:	687b      	ldr	r3, [r7, #4]
 8011586:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 801158a:	78fa      	ldrb	r2, [r7, #3]
 801158c:	6879      	ldr	r1, [r7, #4]
 801158e:	4613      	mov	r3, r2
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	4413      	add	r3, r2
 8011594:	00db      	lsls	r3, r3, #3
 8011596:	440b      	add	r3, r1
 8011598:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 801159c:	681a      	ldr	r2, [r3, #0]
 801159e:	78fb      	ldrb	r3, [r7, #3]
 80115a0:	4619      	mov	r1, r3
 80115a2:	f7fb fd81 	bl	800d0a8 <USBD_LL_DataOutStage>
}
 80115a6:	bf00      	nop
 80115a8:	3708      	adds	r7, #8
 80115aa:	46bd      	mov	sp, r7
 80115ac:	bd80      	pop	{r7, pc}

080115ae <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115ae:	b580      	push	{r7, lr}
 80115b0:	b082      	sub	sp, #8
 80115b2:	af00      	add	r7, sp, #0
 80115b4:	6078      	str	r0, [r7, #4]
 80115b6:	460b      	mov	r3, r1
 80115b8:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80115ba:	687b      	ldr	r3, [r7, #4]
 80115bc:	f8d3 02e8 	ldr.w	r0, [r3, #744]	; 0x2e8
 80115c0:	78fa      	ldrb	r2, [r7, #3]
 80115c2:	6879      	ldr	r1, [r7, #4]
 80115c4:	4613      	mov	r3, r2
 80115c6:	009b      	lsls	r3, r3, #2
 80115c8:	4413      	add	r3, r2
 80115ca:	00db      	lsls	r3, r3, #3
 80115cc:	440b      	add	r3, r1
 80115ce:	333c      	adds	r3, #60	; 0x3c
 80115d0:	681a      	ldr	r2, [r3, #0]
 80115d2:	78fb      	ldrb	r3, [r7, #3]
 80115d4:	4619      	mov	r1, r3
 80115d6:	f7fb fdd8 	bl	800d18a <USBD_LL_DataInStage>
}
 80115da:	bf00      	nop
 80115dc:	3708      	adds	r7, #8
 80115de:	46bd      	mov	sp, r7
 80115e0:	bd80      	pop	{r7, pc}

080115e2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115e2:	b580      	push	{r7, lr}
 80115e4:	b082      	sub	sp, #8
 80115e6:	af00      	add	r7, sp, #0
 80115e8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80115ea:	687b      	ldr	r3, [r7, #4]
 80115ec:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 80115f0:	4618      	mov	r0, r3
 80115f2:	f7fb fee3 	bl	800d3bc <USBD_LL_SOF>
}
 80115f6:	bf00      	nop
 80115f8:	3708      	adds	r7, #8
 80115fa:	46bd      	mov	sp, r7
 80115fc:	bd80      	pop	{r7, pc}

080115fe <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80115fe:	b580      	push	{r7, lr}
 8011600:	b084      	sub	sp, #16
 8011602:	af00      	add	r7, sp, #0
 8011604:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8011606:	2301      	movs	r3, #1
 8011608:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	689b      	ldr	r3, [r3, #8]
 801160e:	2b02      	cmp	r3, #2
 8011610:	d001      	beq.n	8011616 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8011612:	f7f2 fbe1 	bl	8003dd8 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8011616:	687b      	ldr	r3, [r7, #4]
 8011618:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801161c:	7bfa      	ldrb	r2, [r7, #15]
 801161e:	4611      	mov	r1, r2
 8011620:	4618      	mov	r0, r3
 8011622:	f7fb fe98 	bl	800d356 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8011626:	687b      	ldr	r3, [r7, #4]
 8011628:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801162c:	4618      	mov	r0, r3
 801162e:	f7fb fe51 	bl	800d2d4 <USBD_LL_Reset>
}
 8011632:	bf00      	nop
 8011634:	3710      	adds	r7, #16
 8011636:	46bd      	mov	sp, r7
 8011638:	bd80      	pop	{r7, pc}
	...

0801163c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801163c:	b580      	push	{r7, lr}
 801163e:	b082      	sub	sp, #8
 8011640:	af00      	add	r7, sp, #0
 8011642:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8011644:	687b      	ldr	r3, [r7, #4]
 8011646:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801164a:	4618      	mov	r0, r3
 801164c:	f7fb fe92 	bl	800d374 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8011650:	687b      	ldr	r3, [r7, #4]
 8011652:	699b      	ldr	r3, [r3, #24]
 8011654:	2b00      	cmp	r3, #0
 8011656:	d005      	beq.n	8011664 <HAL_PCD_SuspendCallback+0x28>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8011658:	4b04      	ldr	r3, [pc, #16]	; (801166c <HAL_PCD_SuspendCallback+0x30>)
 801165a:	691b      	ldr	r3, [r3, #16]
 801165c:	4a03      	ldr	r2, [pc, #12]	; (801166c <HAL_PCD_SuspendCallback+0x30>)
 801165e:	f043 0306 	orr.w	r3, r3, #6
 8011662:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8011664:	bf00      	nop
 8011666:	3708      	adds	r7, #8
 8011668:	46bd      	mov	sp, r7
 801166a:	bd80      	pop	{r7, pc}
 801166c:	e000ed00 	.word	0xe000ed00

08011670 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8011670:	b580      	push	{r7, lr}
 8011672:	b082      	sub	sp, #8
 8011674:	af00      	add	r7, sp, #0
 8011676:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	f8d3 32e8 	ldr.w	r3, [r3, #744]	; 0x2e8
 801167e:	4618      	mov	r0, r3
 8011680:	f7fb fe8c 	bl	800d39c <USBD_LL_Resume>
}
 8011684:	bf00      	nop
 8011686:	3708      	adds	r7, #8
 8011688:	46bd      	mov	sp, r7
 801168a:	bd80      	pop	{r7, pc}

0801168c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801168c:	b580      	push	{r7, lr}
 801168e:	b082      	sub	sp, #8
 8011690:	af00      	add	r7, sp, #0
 8011692:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8011694:	4a28      	ldr	r2, [pc, #160]	; (8011738 <USBD_LL_Init+0xac>)
 8011696:	687b      	ldr	r3, [r7, #4]
 8011698:	f8c2 32e8 	str.w	r3, [r2, #744]	; 0x2e8
  pdev->pData = &hpcd_USB_FS;
 801169c:	687b      	ldr	r3, [r7, #4]
 801169e:	4a26      	ldr	r2, [pc, #152]	; (8011738 <USBD_LL_Init+0xac>)
 80116a0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  hpcd_USB_FS.Instance = USB;
 80116a4:	4b24      	ldr	r3, [pc, #144]	; (8011738 <USBD_LL_Init+0xac>)
 80116a6:	4a25      	ldr	r2, [pc, #148]	; (801173c <USBD_LL_Init+0xb0>)
 80116a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80116aa:	4b23      	ldr	r3, [pc, #140]	; (8011738 <USBD_LL_Init+0xac>)
 80116ac:	2208      	movs	r2, #8
 80116ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80116b0:	4b21      	ldr	r3, [pc, #132]	; (8011738 <USBD_LL_Init+0xac>)
 80116b2:	2202      	movs	r2, #2
 80116b4:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80116b6:	4b20      	ldr	r3, [pc, #128]	; (8011738 <USBD_LL_Init+0xac>)
 80116b8:	2202      	movs	r2, #2
 80116ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80116bc:	4b1e      	ldr	r3, [pc, #120]	; (8011738 <USBD_LL_Init+0xac>)
 80116be:	2200      	movs	r2, #0
 80116c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80116c2:	4b1d      	ldr	r3, [pc, #116]	; (8011738 <USBD_LL_Init+0xac>)
 80116c4:	2200      	movs	r2, #0
 80116c6:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80116c8:	481b      	ldr	r0, [pc, #108]	; (8011738 <USBD_LL_Init+0xac>)
 80116ca:	f7f4 faa5 	bl	8005c18 <HAL_PCD_Init>
 80116ce:	4603      	mov	r3, r0
 80116d0:	2b00      	cmp	r3, #0
 80116d2:	d001      	beq.n	80116d8 <USBD_LL_Init+0x4c>
  {
    Error_Handler( );
 80116d4:	f7f2 fb80 	bl	8003dd8 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80116de:	2318      	movs	r3, #24
 80116e0:	2200      	movs	r2, #0
 80116e2:	2100      	movs	r1, #0
 80116e4:	f7f5 fe82 	bl	80073ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80116ee:	2358      	movs	r3, #88	; 0x58
 80116f0:	2200      	movs	r2, #0
 80116f2:	2180      	movs	r1, #128	; 0x80
 80116f4:	f7f5 fe7a 	bl	80073ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80116f8:	687b      	ldr	r3, [r7, #4]
 80116fa:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 80116fe:	23c0      	movs	r3, #192	; 0xc0
 8011700:	2200      	movs	r2, #0
 8011702:	2181      	movs	r1, #129	; 0x81
 8011704:	f7f5 fe72 	bl	80073ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801170e:	f44f 7388 	mov.w	r3, #272	; 0x110
 8011712:	2200      	movs	r2, #0
 8011714:	2101      	movs	r1, #1
 8011716:	f7f5 fe69 	bl	80073ec <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011720:	f44f 7380 	mov.w	r3, #256	; 0x100
 8011724:	2200      	movs	r2, #0
 8011726:	2182      	movs	r1, #130	; 0x82
 8011728:	f7f5 fe60 	bl	80073ec <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 801172c:	2300      	movs	r3, #0
}
 801172e:	4618      	mov	r0, r3
 8011730:	3708      	adds	r7, #8
 8011732:	46bd      	mov	sp, r7
 8011734:	bd80      	pop	{r7, pc}
 8011736:	bf00      	nop
 8011738:	20001d70 	.word	0x20001d70
 801173c:	40005c00 	.word	0x40005c00

08011740 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8011740:	b580      	push	{r7, lr}
 8011742:	b084      	sub	sp, #16
 8011744:	af00      	add	r7, sp, #0
 8011746:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011748:	2300      	movs	r3, #0
 801174a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801174c:	2300      	movs	r3, #0
 801174e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011756:	4618      	mov	r0, r3
 8011758:	f7f4 fb3c 	bl	8005dd4 <HAL_PCD_Start>
 801175c:	4603      	mov	r3, r0
 801175e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011760:	7bfb      	ldrb	r3, [r7, #15]
 8011762:	4618      	mov	r0, r3
 8011764:	f000 f944 	bl	80119f0 <USBD_Get_USB_Status>
 8011768:	4603      	mov	r3, r0
 801176a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801176c:	7bbb      	ldrb	r3, [r7, #14]
}
 801176e:	4618      	mov	r0, r3
 8011770:	3710      	adds	r7, #16
 8011772:	46bd      	mov	sp, r7
 8011774:	bd80      	pop	{r7, pc}

08011776 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8011776:	b580      	push	{r7, lr}
 8011778:	b084      	sub	sp, #16
 801177a:	af00      	add	r7, sp, #0
 801177c:	6078      	str	r0, [r7, #4]
 801177e:	4608      	mov	r0, r1
 8011780:	4611      	mov	r1, r2
 8011782:	461a      	mov	r2, r3
 8011784:	4603      	mov	r3, r0
 8011786:	70fb      	strb	r3, [r7, #3]
 8011788:	460b      	mov	r3, r1
 801178a:	70bb      	strb	r3, [r7, #2]
 801178c:	4613      	mov	r3, r2
 801178e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011790:	2300      	movs	r3, #0
 8011792:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011794:	2300      	movs	r3, #0
 8011796:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8011798:	687b      	ldr	r3, [r7, #4]
 801179a:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801179e:	78bb      	ldrb	r3, [r7, #2]
 80117a0:	883a      	ldrh	r2, [r7, #0]
 80117a2:	78f9      	ldrb	r1, [r7, #3]
 80117a4:	f7f4 fc58 	bl	8006058 <HAL_PCD_EP_Open>
 80117a8:	4603      	mov	r3, r0
 80117aa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ac:	7bfb      	ldrb	r3, [r7, #15]
 80117ae:	4618      	mov	r0, r3
 80117b0:	f000 f91e 	bl	80119f0 <USBD_Get_USB_Status>
 80117b4:	4603      	mov	r3, r0
 80117b6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117b8:	7bbb      	ldrb	r3, [r7, #14]
}
 80117ba:	4618      	mov	r0, r3
 80117bc:	3710      	adds	r7, #16
 80117be:	46bd      	mov	sp, r7
 80117c0:	bd80      	pop	{r7, pc}

080117c2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80117c2:	b580      	push	{r7, lr}
 80117c4:	b084      	sub	sp, #16
 80117c6:	af00      	add	r7, sp, #0
 80117c8:	6078      	str	r0, [r7, #4]
 80117ca:	460b      	mov	r3, r1
 80117cc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80117ce:	2300      	movs	r3, #0
 80117d0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80117d2:	2300      	movs	r3, #0
 80117d4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80117d6:	687b      	ldr	r3, [r7, #4]
 80117d8:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80117dc:	78fa      	ldrb	r2, [r7, #3]
 80117de:	4611      	mov	r1, r2
 80117e0:	4618      	mov	r0, r3
 80117e2:	f7f4 fc9f 	bl	8006124 <HAL_PCD_EP_Close>
 80117e6:	4603      	mov	r3, r0
 80117e8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80117ea:	7bfb      	ldrb	r3, [r7, #15]
 80117ec:	4618      	mov	r0, r3
 80117ee:	f000 f8ff 	bl	80119f0 <USBD_Get_USB_Status>
 80117f2:	4603      	mov	r3, r0
 80117f4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80117f6:	7bbb      	ldrb	r3, [r7, #14]
}
 80117f8:	4618      	mov	r0, r3
 80117fa:	3710      	adds	r7, #16
 80117fc:	46bd      	mov	sp, r7
 80117fe:	bd80      	pop	{r7, pc}

08011800 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	b084      	sub	sp, #16
 8011804:	af00      	add	r7, sp, #0
 8011806:	6078      	str	r0, [r7, #4]
 8011808:	460b      	mov	r3, r1
 801180a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801180c:	2300      	movs	r3, #0
 801180e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011810:	2300      	movs	r3, #0
 8011812:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8011814:	687b      	ldr	r3, [r7, #4]
 8011816:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801181a:	78fa      	ldrb	r2, [r7, #3]
 801181c:	4611      	mov	r1, r2
 801181e:	4618      	mov	r0, r3
 8011820:	f7f4 fd5f 	bl	80062e2 <HAL_PCD_EP_SetStall>
 8011824:	4603      	mov	r3, r0
 8011826:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011828:	7bfb      	ldrb	r3, [r7, #15]
 801182a:	4618      	mov	r0, r3
 801182c:	f000 f8e0 	bl	80119f0 <USBD_Get_USB_Status>
 8011830:	4603      	mov	r3, r0
 8011832:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011834:	7bbb      	ldrb	r3, [r7, #14]
}
 8011836:	4618      	mov	r0, r3
 8011838:	3710      	adds	r7, #16
 801183a:	46bd      	mov	sp, r7
 801183c:	bd80      	pop	{r7, pc}

0801183e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801183e:	b580      	push	{r7, lr}
 8011840:	b084      	sub	sp, #16
 8011842:	af00      	add	r7, sp, #0
 8011844:	6078      	str	r0, [r7, #4]
 8011846:	460b      	mov	r3, r1
 8011848:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801184a:	2300      	movs	r3, #0
 801184c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801184e:	2300      	movs	r3, #0
 8011850:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8011852:	687b      	ldr	r3, [r7, #4]
 8011854:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 8011858:	78fa      	ldrb	r2, [r7, #3]
 801185a:	4611      	mov	r1, r2
 801185c:	4618      	mov	r0, r3
 801185e:	f7f4 fd92 	bl	8006386 <HAL_PCD_EP_ClrStall>
 8011862:	4603      	mov	r3, r0
 8011864:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011866:	7bfb      	ldrb	r3, [r7, #15]
 8011868:	4618      	mov	r0, r3
 801186a:	f000 f8c1 	bl	80119f0 <USBD_Get_USB_Status>
 801186e:	4603      	mov	r3, r0
 8011870:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011872:	7bbb      	ldrb	r3, [r7, #14]
}
 8011874:	4618      	mov	r0, r3
 8011876:	3710      	adds	r7, #16
 8011878:	46bd      	mov	sp, r7
 801187a:	bd80      	pop	{r7, pc}

0801187c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801187c:	b480      	push	{r7}
 801187e:	b085      	sub	sp, #20
 8011880:	af00      	add	r7, sp, #0
 8011882:	6078      	str	r0, [r7, #4]
 8011884:	460b      	mov	r3, r1
 8011886:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8011888:	687b      	ldr	r3, [r7, #4]
 801188a:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 801188e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8011890:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8011894:	2b00      	cmp	r3, #0
 8011896:	da0c      	bge.n	80118b2 <USBD_LL_IsStallEP+0x36>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8011898:	78fb      	ldrb	r3, [r7, #3]
 801189a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801189e:	68f9      	ldr	r1, [r7, #12]
 80118a0:	1c5a      	adds	r2, r3, #1
 80118a2:	4613      	mov	r3, r2
 80118a4:	009b      	lsls	r3, r3, #2
 80118a6:	4413      	add	r3, r2
 80118a8:	00db      	lsls	r3, r3, #3
 80118aa:	440b      	add	r3, r1
 80118ac:	3302      	adds	r3, #2
 80118ae:	781b      	ldrb	r3, [r3, #0]
 80118b0:	e00b      	b.n	80118ca <USBD_LL_IsStallEP+0x4e>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80118b2:	78fb      	ldrb	r3, [r7, #3]
 80118b4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80118b8:	68f9      	ldr	r1, [r7, #12]
 80118ba:	4613      	mov	r3, r2
 80118bc:	009b      	lsls	r3, r3, #2
 80118be:	4413      	add	r3, r2
 80118c0:	00db      	lsls	r3, r3, #3
 80118c2:	440b      	add	r3, r1
 80118c4:	f503 73b5 	add.w	r3, r3, #362	; 0x16a
 80118c8:	781b      	ldrb	r3, [r3, #0]
  }
}
 80118ca:	4618      	mov	r0, r3
 80118cc:	3714      	adds	r7, #20
 80118ce:	46bd      	mov	sp, r7
 80118d0:	bc80      	pop	{r7}
 80118d2:	4770      	bx	lr

080118d4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80118d4:	b580      	push	{r7, lr}
 80118d6:	b084      	sub	sp, #16
 80118d8:	af00      	add	r7, sp, #0
 80118da:	6078      	str	r0, [r7, #4]
 80118dc:	460b      	mov	r3, r1
 80118de:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80118e0:	2300      	movs	r3, #0
 80118e2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80118e4:	2300      	movs	r3, #0
 80118e6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80118e8:	687b      	ldr	r3, [r7, #4]
 80118ea:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80118ee:	78fa      	ldrb	r2, [r7, #3]
 80118f0:	4611      	mov	r1, r2
 80118f2:	4618      	mov	r0, r3
 80118f4:	f7f4 fb8b 	bl	800600e <HAL_PCD_SetAddress>
 80118f8:	4603      	mov	r3, r0
 80118fa:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80118fc:	7bfb      	ldrb	r3, [r7, #15]
 80118fe:	4618      	mov	r0, r3
 8011900:	f000 f876 	bl	80119f0 <USBD_Get_USB_Status>
 8011904:	4603      	mov	r3, r0
 8011906:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8011908:	7bbb      	ldrb	r3, [r7, #14]
}
 801190a:	4618      	mov	r0, r3
 801190c:	3710      	adds	r7, #16
 801190e:	46bd      	mov	sp, r7
 8011910:	bd80      	pop	{r7, pc}

08011912 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011912:	b580      	push	{r7, lr}
 8011914:	b086      	sub	sp, #24
 8011916:	af00      	add	r7, sp, #0
 8011918:	60f8      	str	r0, [r7, #12]
 801191a:	607a      	str	r2, [r7, #4]
 801191c:	461a      	mov	r2, r3
 801191e:	460b      	mov	r3, r1
 8011920:	72fb      	strb	r3, [r7, #11]
 8011922:	4613      	mov	r3, r2
 8011924:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8011926:	2300      	movs	r3, #0
 8011928:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801192a:	2300      	movs	r3, #0
 801192c:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 801192e:	68fb      	ldr	r3, [r7, #12]
 8011930:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 8011934:	893b      	ldrh	r3, [r7, #8]
 8011936:	7af9      	ldrb	r1, [r7, #11]
 8011938:	687a      	ldr	r2, [r7, #4]
 801193a:	f7f4 fc8f 	bl	800625c <HAL_PCD_EP_Transmit>
 801193e:	4603      	mov	r3, r0
 8011940:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011942:	7dfb      	ldrb	r3, [r7, #23]
 8011944:	4618      	mov	r0, r3
 8011946:	f000 f853 	bl	80119f0 <USBD_Get_USB_Status>
 801194a:	4603      	mov	r3, r0
 801194c:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 801194e:	7dbb      	ldrb	r3, [r7, #22]
}
 8011950:	4618      	mov	r0, r3
 8011952:	3718      	adds	r7, #24
 8011954:	46bd      	mov	sp, r7
 8011956:	bd80      	pop	{r7, pc}

08011958 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8011958:	b580      	push	{r7, lr}
 801195a:	b086      	sub	sp, #24
 801195c:	af00      	add	r7, sp, #0
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	607a      	str	r2, [r7, #4]
 8011962:	461a      	mov	r2, r3
 8011964:	460b      	mov	r3, r1
 8011966:	72fb      	strb	r3, [r7, #11]
 8011968:	4613      	mov	r3, r2
 801196a:	813b      	strh	r3, [r7, #8]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801196c:	2300      	movs	r3, #0
 801196e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8011970:	2300      	movs	r3, #0
 8011972:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8011974:	68fb      	ldr	r3, [r7, #12]
 8011976:	f8d3 0298 	ldr.w	r0, [r3, #664]	; 0x298
 801197a:	893b      	ldrh	r3, [r7, #8]
 801197c:	7af9      	ldrb	r1, [r7, #11]
 801197e:	687a      	ldr	r2, [r7, #4]
 8011980:	f7f4 fc18 	bl	80061b4 <HAL_PCD_EP_Receive>
 8011984:	4603      	mov	r3, r0
 8011986:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8011988:	7dfb      	ldrb	r3, [r7, #23]
 801198a:	4618      	mov	r0, r3
 801198c:	f000 f830 	bl	80119f0 <USBD_Get_USB_Status>
 8011990:	4603      	mov	r3, r0
 8011992:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8011994:	7dbb      	ldrb	r3, [r7, #22]
}
 8011996:	4618      	mov	r0, r3
 8011998:	3718      	adds	r7, #24
 801199a:	46bd      	mov	sp, r7
 801199c:	bd80      	pop	{r7, pc}

0801199e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801199e:	b580      	push	{r7, lr}
 80119a0:	b082      	sub	sp, #8
 80119a2:	af00      	add	r7, sp, #0
 80119a4:	6078      	str	r0, [r7, #4]
 80119a6:	460b      	mov	r3, r1
 80119a8:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 80119aa:	687b      	ldr	r3, [r7, #4]
 80119ac:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
 80119b0:	78fa      	ldrb	r2, [r7, #3]
 80119b2:	4611      	mov	r1, r2
 80119b4:	4618      	mov	r0, r3
 80119b6:	f7f4 fc3a 	bl	800622e <HAL_PCD_EP_GetRxCount>
 80119ba:	4603      	mov	r3, r0
}
 80119bc:	4618      	mov	r0, r3
 80119be:	3708      	adds	r7, #8
 80119c0:	46bd      	mov	sp, r7
 80119c2:	bd80      	pop	{r7, pc}

080119c4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80119c4:	b480      	push	{r7}
 80119c6:	b083      	sub	sp, #12
 80119c8:	af00      	add	r7, sp, #0
 80119ca:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80119cc:	4b02      	ldr	r3, [pc, #8]	; (80119d8 <USBD_static_malloc+0x14>)
}
 80119ce:	4618      	mov	r0, r3
 80119d0:	370c      	adds	r7, #12
 80119d2:	46bd      	mov	sp, r7
 80119d4:	bc80      	pop	{r7}
 80119d6:	4770      	bx	lr
 80119d8:	2000205c 	.word	0x2000205c

080119dc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80119dc:	b480      	push	{r7}
 80119de:	b083      	sub	sp, #12
 80119e0:	af00      	add	r7, sp, #0
 80119e2:	6078      	str	r0, [r7, #4]

}
 80119e4:	bf00      	nop
 80119e6:	370c      	adds	r7, #12
 80119e8:	46bd      	mov	sp, r7
 80119ea:	bc80      	pop	{r7}
 80119ec:	4770      	bx	lr
	...

080119f0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80119f0:	b480      	push	{r7}
 80119f2:	b085      	sub	sp, #20
 80119f4:	af00      	add	r7, sp, #0
 80119f6:	4603      	mov	r3, r0
 80119f8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80119fa:	2300      	movs	r3, #0
 80119fc:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80119fe:	79fb      	ldrb	r3, [r7, #7]
 8011a00:	2b03      	cmp	r3, #3
 8011a02:	d817      	bhi.n	8011a34 <USBD_Get_USB_Status+0x44>
 8011a04:	a201      	add	r2, pc, #4	; (adr r2, 8011a0c <USBD_Get_USB_Status+0x1c>)
 8011a06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011a0a:	bf00      	nop
 8011a0c:	08011a1d 	.word	0x08011a1d
 8011a10:	08011a23 	.word	0x08011a23
 8011a14:	08011a29 	.word	0x08011a29
 8011a18:	08011a2f 	.word	0x08011a2f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8011a1c:	2300      	movs	r3, #0
 8011a1e:	73fb      	strb	r3, [r7, #15]
    break;
 8011a20:	e00b      	b.n	8011a3a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8011a22:	2302      	movs	r3, #2
 8011a24:	73fb      	strb	r3, [r7, #15]
    break;
 8011a26:	e008      	b.n	8011a3a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8011a28:	2301      	movs	r3, #1
 8011a2a:	73fb      	strb	r3, [r7, #15]
    break;
 8011a2c:	e005      	b.n	8011a3a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8011a2e:	2302      	movs	r3, #2
 8011a30:	73fb      	strb	r3, [r7, #15]
    break;
 8011a32:	e002      	b.n	8011a3a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8011a34:	2302      	movs	r3, #2
 8011a36:	73fb      	strb	r3, [r7, #15]
    break;
 8011a38:	bf00      	nop
  }
  return usb_status;
 8011a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8011a3c:	4618      	mov	r0, r3
 8011a3e:	3714      	adds	r7, #20
 8011a40:	46bd      	mov	sp, r7
 8011a42:	bc80      	pop	{r7}
 8011a44:	4770      	bx	lr
 8011a46:	bf00      	nop

08011a48 <siprintf>:
 8011a48:	b40e      	push	{r1, r2, r3}
 8011a4a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8011a4e:	b500      	push	{lr}
 8011a50:	b09c      	sub	sp, #112	; 0x70
 8011a52:	ab1d      	add	r3, sp, #116	; 0x74
 8011a54:	9002      	str	r0, [sp, #8]
 8011a56:	9006      	str	r0, [sp, #24]
 8011a58:	9107      	str	r1, [sp, #28]
 8011a5a:	9104      	str	r1, [sp, #16]
 8011a5c:	4808      	ldr	r0, [pc, #32]	; (8011a80 <siprintf+0x38>)
 8011a5e:	4909      	ldr	r1, [pc, #36]	; (8011a84 <siprintf+0x3c>)
 8011a60:	f853 2b04 	ldr.w	r2, [r3], #4
 8011a64:	9105      	str	r1, [sp, #20]
 8011a66:	6800      	ldr	r0, [r0, #0]
 8011a68:	a902      	add	r1, sp, #8
 8011a6a:	9301      	str	r3, [sp, #4]
 8011a6c:	f000 f9b0 	bl	8011dd0 <_svfiprintf_r>
 8011a70:	2200      	movs	r2, #0
 8011a72:	9b02      	ldr	r3, [sp, #8]
 8011a74:	701a      	strb	r2, [r3, #0]
 8011a76:	b01c      	add	sp, #112	; 0x70
 8011a78:	f85d eb04 	ldr.w	lr, [sp], #4
 8011a7c:	b003      	add	sp, #12
 8011a7e:	4770      	bx	lr
 8011a80:	20000264 	.word	0x20000264
 8011a84:	ffff0208 	.word	0xffff0208

08011a88 <memset>:
 8011a88:	4603      	mov	r3, r0
 8011a8a:	4402      	add	r2, r0
 8011a8c:	4293      	cmp	r3, r2
 8011a8e:	d100      	bne.n	8011a92 <memset+0xa>
 8011a90:	4770      	bx	lr
 8011a92:	f803 1b01 	strb.w	r1, [r3], #1
 8011a96:	e7f9      	b.n	8011a8c <memset+0x4>

08011a98 <strncpy>:
 8011a98:	4603      	mov	r3, r0
 8011a9a:	b510      	push	{r4, lr}
 8011a9c:	3901      	subs	r1, #1
 8011a9e:	b132      	cbz	r2, 8011aae <strncpy+0x16>
 8011aa0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8011aa4:	3a01      	subs	r2, #1
 8011aa6:	f803 4b01 	strb.w	r4, [r3], #1
 8011aaa:	2c00      	cmp	r4, #0
 8011aac:	d1f7      	bne.n	8011a9e <strncpy+0x6>
 8011aae:	2100      	movs	r1, #0
 8011ab0:	441a      	add	r2, r3
 8011ab2:	4293      	cmp	r3, r2
 8011ab4:	d100      	bne.n	8011ab8 <strncpy+0x20>
 8011ab6:	bd10      	pop	{r4, pc}
 8011ab8:	f803 1b01 	strb.w	r1, [r3], #1
 8011abc:	e7f9      	b.n	8011ab2 <strncpy+0x1a>
	...

08011ac0 <__errno>:
 8011ac0:	4b01      	ldr	r3, [pc, #4]	; (8011ac8 <__errno+0x8>)
 8011ac2:	6818      	ldr	r0, [r3, #0]
 8011ac4:	4770      	bx	lr
 8011ac6:	bf00      	nop
 8011ac8:	20000264 	.word	0x20000264

08011acc <__libc_init_array>:
 8011acc:	b570      	push	{r4, r5, r6, lr}
 8011ace:	2600      	movs	r6, #0
 8011ad0:	4d0c      	ldr	r5, [pc, #48]	; (8011b04 <__libc_init_array+0x38>)
 8011ad2:	4c0d      	ldr	r4, [pc, #52]	; (8011b08 <__libc_init_array+0x3c>)
 8011ad4:	1b64      	subs	r4, r4, r5
 8011ad6:	10a4      	asrs	r4, r4, #2
 8011ad8:	42a6      	cmp	r6, r4
 8011ada:	d109      	bne.n	8011af0 <__libc_init_array+0x24>
 8011adc:	f000 fc7a 	bl	80123d4 <_init>
 8011ae0:	2600      	movs	r6, #0
 8011ae2:	4d0a      	ldr	r5, [pc, #40]	; (8011b0c <__libc_init_array+0x40>)
 8011ae4:	4c0a      	ldr	r4, [pc, #40]	; (8011b10 <__libc_init_array+0x44>)
 8011ae6:	1b64      	subs	r4, r4, r5
 8011ae8:	10a4      	asrs	r4, r4, #2
 8011aea:	42a6      	cmp	r6, r4
 8011aec:	d105      	bne.n	8011afa <__libc_init_array+0x2e>
 8011aee:	bd70      	pop	{r4, r5, r6, pc}
 8011af0:	f855 3b04 	ldr.w	r3, [r5], #4
 8011af4:	4798      	blx	r3
 8011af6:	3601      	adds	r6, #1
 8011af8:	e7ee      	b.n	8011ad8 <__libc_init_array+0xc>
 8011afa:	f855 3b04 	ldr.w	r3, [r5], #4
 8011afe:	4798      	blx	r3
 8011b00:	3601      	adds	r6, #1
 8011b02:	e7f2      	b.n	8011aea <__libc_init_array+0x1e>
 8011b04:	080129f4 	.word	0x080129f4
 8011b08:	080129f4 	.word	0x080129f4
 8011b0c:	080129f4 	.word	0x080129f4
 8011b10:	080129f8 	.word	0x080129f8

08011b14 <__retarget_lock_acquire_recursive>:
 8011b14:	4770      	bx	lr

08011b16 <__retarget_lock_release_recursive>:
 8011b16:	4770      	bx	lr

08011b18 <memcpy>:
 8011b18:	440a      	add	r2, r1
 8011b1a:	4291      	cmp	r1, r2
 8011b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8011b20:	d100      	bne.n	8011b24 <memcpy+0xc>
 8011b22:	4770      	bx	lr
 8011b24:	b510      	push	{r4, lr}
 8011b26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8011b2a:	4291      	cmp	r1, r2
 8011b2c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8011b30:	d1f9      	bne.n	8011b26 <memcpy+0xe>
 8011b32:	bd10      	pop	{r4, pc}

08011b34 <_free_r>:
 8011b34:	b538      	push	{r3, r4, r5, lr}
 8011b36:	4605      	mov	r5, r0
 8011b38:	2900      	cmp	r1, #0
 8011b3a:	d040      	beq.n	8011bbe <_free_r+0x8a>
 8011b3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8011b40:	1f0c      	subs	r4, r1, #4
 8011b42:	2b00      	cmp	r3, #0
 8011b44:	bfb8      	it	lt
 8011b46:	18e4      	addlt	r4, r4, r3
 8011b48:	f000 f8dc 	bl	8011d04 <__malloc_lock>
 8011b4c:	4a1c      	ldr	r2, [pc, #112]	; (8011bc0 <_free_r+0x8c>)
 8011b4e:	6813      	ldr	r3, [r2, #0]
 8011b50:	b933      	cbnz	r3, 8011b60 <_free_r+0x2c>
 8011b52:	6063      	str	r3, [r4, #4]
 8011b54:	6014      	str	r4, [r2, #0]
 8011b56:	4628      	mov	r0, r5
 8011b58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8011b5c:	f000 b8d8 	b.w	8011d10 <__malloc_unlock>
 8011b60:	42a3      	cmp	r3, r4
 8011b62:	d908      	bls.n	8011b76 <_free_r+0x42>
 8011b64:	6820      	ldr	r0, [r4, #0]
 8011b66:	1821      	adds	r1, r4, r0
 8011b68:	428b      	cmp	r3, r1
 8011b6a:	bf01      	itttt	eq
 8011b6c:	6819      	ldreq	r1, [r3, #0]
 8011b6e:	685b      	ldreq	r3, [r3, #4]
 8011b70:	1809      	addeq	r1, r1, r0
 8011b72:	6021      	streq	r1, [r4, #0]
 8011b74:	e7ed      	b.n	8011b52 <_free_r+0x1e>
 8011b76:	461a      	mov	r2, r3
 8011b78:	685b      	ldr	r3, [r3, #4]
 8011b7a:	b10b      	cbz	r3, 8011b80 <_free_r+0x4c>
 8011b7c:	42a3      	cmp	r3, r4
 8011b7e:	d9fa      	bls.n	8011b76 <_free_r+0x42>
 8011b80:	6811      	ldr	r1, [r2, #0]
 8011b82:	1850      	adds	r0, r2, r1
 8011b84:	42a0      	cmp	r0, r4
 8011b86:	d10b      	bne.n	8011ba0 <_free_r+0x6c>
 8011b88:	6820      	ldr	r0, [r4, #0]
 8011b8a:	4401      	add	r1, r0
 8011b8c:	1850      	adds	r0, r2, r1
 8011b8e:	4283      	cmp	r3, r0
 8011b90:	6011      	str	r1, [r2, #0]
 8011b92:	d1e0      	bne.n	8011b56 <_free_r+0x22>
 8011b94:	6818      	ldr	r0, [r3, #0]
 8011b96:	685b      	ldr	r3, [r3, #4]
 8011b98:	4408      	add	r0, r1
 8011b9a:	6010      	str	r0, [r2, #0]
 8011b9c:	6053      	str	r3, [r2, #4]
 8011b9e:	e7da      	b.n	8011b56 <_free_r+0x22>
 8011ba0:	d902      	bls.n	8011ba8 <_free_r+0x74>
 8011ba2:	230c      	movs	r3, #12
 8011ba4:	602b      	str	r3, [r5, #0]
 8011ba6:	e7d6      	b.n	8011b56 <_free_r+0x22>
 8011ba8:	6820      	ldr	r0, [r4, #0]
 8011baa:	1821      	adds	r1, r4, r0
 8011bac:	428b      	cmp	r3, r1
 8011bae:	bf01      	itttt	eq
 8011bb0:	6819      	ldreq	r1, [r3, #0]
 8011bb2:	685b      	ldreq	r3, [r3, #4]
 8011bb4:	1809      	addeq	r1, r1, r0
 8011bb6:	6021      	streq	r1, [r4, #0]
 8011bb8:	6063      	str	r3, [r4, #4]
 8011bba:	6054      	str	r4, [r2, #4]
 8011bbc:	e7cb      	b.n	8011b56 <_free_r+0x22>
 8011bbe:	bd38      	pop	{r3, r4, r5, pc}
 8011bc0:	200023bc 	.word	0x200023bc

08011bc4 <sbrk_aligned>:
 8011bc4:	b570      	push	{r4, r5, r6, lr}
 8011bc6:	4e0e      	ldr	r6, [pc, #56]	; (8011c00 <sbrk_aligned+0x3c>)
 8011bc8:	460c      	mov	r4, r1
 8011bca:	6831      	ldr	r1, [r6, #0]
 8011bcc:	4605      	mov	r5, r0
 8011bce:	b911      	cbnz	r1, 8011bd6 <sbrk_aligned+0x12>
 8011bd0:	f000 fbaa 	bl	8012328 <_sbrk_r>
 8011bd4:	6030      	str	r0, [r6, #0]
 8011bd6:	4621      	mov	r1, r4
 8011bd8:	4628      	mov	r0, r5
 8011bda:	f000 fba5 	bl	8012328 <_sbrk_r>
 8011bde:	1c43      	adds	r3, r0, #1
 8011be0:	d00a      	beq.n	8011bf8 <sbrk_aligned+0x34>
 8011be2:	1cc4      	adds	r4, r0, #3
 8011be4:	f024 0403 	bic.w	r4, r4, #3
 8011be8:	42a0      	cmp	r0, r4
 8011bea:	d007      	beq.n	8011bfc <sbrk_aligned+0x38>
 8011bec:	1a21      	subs	r1, r4, r0
 8011bee:	4628      	mov	r0, r5
 8011bf0:	f000 fb9a 	bl	8012328 <_sbrk_r>
 8011bf4:	3001      	adds	r0, #1
 8011bf6:	d101      	bne.n	8011bfc <sbrk_aligned+0x38>
 8011bf8:	f04f 34ff 	mov.w	r4, #4294967295
 8011bfc:	4620      	mov	r0, r4
 8011bfe:	bd70      	pop	{r4, r5, r6, pc}
 8011c00:	200023c0 	.word	0x200023c0

08011c04 <_malloc_r>:
 8011c04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8011c08:	1ccd      	adds	r5, r1, #3
 8011c0a:	f025 0503 	bic.w	r5, r5, #3
 8011c0e:	3508      	adds	r5, #8
 8011c10:	2d0c      	cmp	r5, #12
 8011c12:	bf38      	it	cc
 8011c14:	250c      	movcc	r5, #12
 8011c16:	2d00      	cmp	r5, #0
 8011c18:	4607      	mov	r7, r0
 8011c1a:	db01      	blt.n	8011c20 <_malloc_r+0x1c>
 8011c1c:	42a9      	cmp	r1, r5
 8011c1e:	d905      	bls.n	8011c2c <_malloc_r+0x28>
 8011c20:	230c      	movs	r3, #12
 8011c22:	2600      	movs	r6, #0
 8011c24:	603b      	str	r3, [r7, #0]
 8011c26:	4630      	mov	r0, r6
 8011c28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8011c2c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8011d00 <_malloc_r+0xfc>
 8011c30:	f000 f868 	bl	8011d04 <__malloc_lock>
 8011c34:	f8d8 3000 	ldr.w	r3, [r8]
 8011c38:	461c      	mov	r4, r3
 8011c3a:	bb5c      	cbnz	r4, 8011c94 <_malloc_r+0x90>
 8011c3c:	4629      	mov	r1, r5
 8011c3e:	4638      	mov	r0, r7
 8011c40:	f7ff ffc0 	bl	8011bc4 <sbrk_aligned>
 8011c44:	1c43      	adds	r3, r0, #1
 8011c46:	4604      	mov	r4, r0
 8011c48:	d155      	bne.n	8011cf6 <_malloc_r+0xf2>
 8011c4a:	f8d8 4000 	ldr.w	r4, [r8]
 8011c4e:	4626      	mov	r6, r4
 8011c50:	2e00      	cmp	r6, #0
 8011c52:	d145      	bne.n	8011ce0 <_malloc_r+0xdc>
 8011c54:	2c00      	cmp	r4, #0
 8011c56:	d048      	beq.n	8011cea <_malloc_r+0xe6>
 8011c58:	6823      	ldr	r3, [r4, #0]
 8011c5a:	4631      	mov	r1, r6
 8011c5c:	4638      	mov	r0, r7
 8011c5e:	eb04 0903 	add.w	r9, r4, r3
 8011c62:	f000 fb61 	bl	8012328 <_sbrk_r>
 8011c66:	4581      	cmp	r9, r0
 8011c68:	d13f      	bne.n	8011cea <_malloc_r+0xe6>
 8011c6a:	6821      	ldr	r1, [r4, #0]
 8011c6c:	4638      	mov	r0, r7
 8011c6e:	1a6d      	subs	r5, r5, r1
 8011c70:	4629      	mov	r1, r5
 8011c72:	f7ff ffa7 	bl	8011bc4 <sbrk_aligned>
 8011c76:	3001      	adds	r0, #1
 8011c78:	d037      	beq.n	8011cea <_malloc_r+0xe6>
 8011c7a:	6823      	ldr	r3, [r4, #0]
 8011c7c:	442b      	add	r3, r5
 8011c7e:	6023      	str	r3, [r4, #0]
 8011c80:	f8d8 3000 	ldr.w	r3, [r8]
 8011c84:	2b00      	cmp	r3, #0
 8011c86:	d038      	beq.n	8011cfa <_malloc_r+0xf6>
 8011c88:	685a      	ldr	r2, [r3, #4]
 8011c8a:	42a2      	cmp	r2, r4
 8011c8c:	d12b      	bne.n	8011ce6 <_malloc_r+0xe2>
 8011c8e:	2200      	movs	r2, #0
 8011c90:	605a      	str	r2, [r3, #4]
 8011c92:	e00f      	b.n	8011cb4 <_malloc_r+0xb0>
 8011c94:	6822      	ldr	r2, [r4, #0]
 8011c96:	1b52      	subs	r2, r2, r5
 8011c98:	d41f      	bmi.n	8011cda <_malloc_r+0xd6>
 8011c9a:	2a0b      	cmp	r2, #11
 8011c9c:	d917      	bls.n	8011cce <_malloc_r+0xca>
 8011c9e:	1961      	adds	r1, r4, r5
 8011ca0:	42a3      	cmp	r3, r4
 8011ca2:	6025      	str	r5, [r4, #0]
 8011ca4:	bf18      	it	ne
 8011ca6:	6059      	strne	r1, [r3, #4]
 8011ca8:	6863      	ldr	r3, [r4, #4]
 8011caa:	bf08      	it	eq
 8011cac:	f8c8 1000 	streq.w	r1, [r8]
 8011cb0:	5162      	str	r2, [r4, r5]
 8011cb2:	604b      	str	r3, [r1, #4]
 8011cb4:	4638      	mov	r0, r7
 8011cb6:	f104 060b 	add.w	r6, r4, #11
 8011cba:	f000 f829 	bl	8011d10 <__malloc_unlock>
 8011cbe:	f026 0607 	bic.w	r6, r6, #7
 8011cc2:	1d23      	adds	r3, r4, #4
 8011cc4:	1af2      	subs	r2, r6, r3
 8011cc6:	d0ae      	beq.n	8011c26 <_malloc_r+0x22>
 8011cc8:	1b9b      	subs	r3, r3, r6
 8011cca:	50a3      	str	r3, [r4, r2]
 8011ccc:	e7ab      	b.n	8011c26 <_malloc_r+0x22>
 8011cce:	42a3      	cmp	r3, r4
 8011cd0:	6862      	ldr	r2, [r4, #4]
 8011cd2:	d1dd      	bne.n	8011c90 <_malloc_r+0x8c>
 8011cd4:	f8c8 2000 	str.w	r2, [r8]
 8011cd8:	e7ec      	b.n	8011cb4 <_malloc_r+0xb0>
 8011cda:	4623      	mov	r3, r4
 8011cdc:	6864      	ldr	r4, [r4, #4]
 8011cde:	e7ac      	b.n	8011c3a <_malloc_r+0x36>
 8011ce0:	4634      	mov	r4, r6
 8011ce2:	6876      	ldr	r6, [r6, #4]
 8011ce4:	e7b4      	b.n	8011c50 <_malloc_r+0x4c>
 8011ce6:	4613      	mov	r3, r2
 8011ce8:	e7cc      	b.n	8011c84 <_malloc_r+0x80>
 8011cea:	230c      	movs	r3, #12
 8011cec:	4638      	mov	r0, r7
 8011cee:	603b      	str	r3, [r7, #0]
 8011cf0:	f000 f80e 	bl	8011d10 <__malloc_unlock>
 8011cf4:	e797      	b.n	8011c26 <_malloc_r+0x22>
 8011cf6:	6025      	str	r5, [r4, #0]
 8011cf8:	e7dc      	b.n	8011cb4 <_malloc_r+0xb0>
 8011cfa:	605b      	str	r3, [r3, #4]
 8011cfc:	deff      	udf	#255	; 0xff
 8011cfe:	bf00      	nop
 8011d00:	200023bc 	.word	0x200023bc

08011d04 <__malloc_lock>:
 8011d04:	4801      	ldr	r0, [pc, #4]	; (8011d0c <__malloc_lock+0x8>)
 8011d06:	f7ff bf05 	b.w	8011b14 <__retarget_lock_acquire_recursive>
 8011d0a:	bf00      	nop
 8011d0c:	200023b8 	.word	0x200023b8

08011d10 <__malloc_unlock>:
 8011d10:	4801      	ldr	r0, [pc, #4]	; (8011d18 <__malloc_unlock+0x8>)
 8011d12:	f7ff bf00 	b.w	8011b16 <__retarget_lock_release_recursive>
 8011d16:	bf00      	nop
 8011d18:	200023b8 	.word	0x200023b8

08011d1c <__ssputs_r>:
 8011d1c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d20:	461f      	mov	r7, r3
 8011d22:	688e      	ldr	r6, [r1, #8]
 8011d24:	4682      	mov	sl, r0
 8011d26:	42be      	cmp	r6, r7
 8011d28:	460c      	mov	r4, r1
 8011d2a:	4690      	mov	r8, r2
 8011d2c:	680b      	ldr	r3, [r1, #0]
 8011d2e:	d82c      	bhi.n	8011d8a <__ssputs_r+0x6e>
 8011d30:	898a      	ldrh	r2, [r1, #12]
 8011d32:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8011d36:	d026      	beq.n	8011d86 <__ssputs_r+0x6a>
 8011d38:	6965      	ldr	r5, [r4, #20]
 8011d3a:	6909      	ldr	r1, [r1, #16]
 8011d3c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8011d40:	eba3 0901 	sub.w	r9, r3, r1
 8011d44:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8011d48:	1c7b      	adds	r3, r7, #1
 8011d4a:	444b      	add	r3, r9
 8011d4c:	106d      	asrs	r5, r5, #1
 8011d4e:	429d      	cmp	r5, r3
 8011d50:	bf38      	it	cc
 8011d52:	461d      	movcc	r5, r3
 8011d54:	0553      	lsls	r3, r2, #21
 8011d56:	d527      	bpl.n	8011da8 <__ssputs_r+0x8c>
 8011d58:	4629      	mov	r1, r5
 8011d5a:	f7ff ff53 	bl	8011c04 <_malloc_r>
 8011d5e:	4606      	mov	r6, r0
 8011d60:	b360      	cbz	r0, 8011dbc <__ssputs_r+0xa0>
 8011d62:	464a      	mov	r2, r9
 8011d64:	6921      	ldr	r1, [r4, #16]
 8011d66:	f7ff fed7 	bl	8011b18 <memcpy>
 8011d6a:	89a3      	ldrh	r3, [r4, #12]
 8011d6c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8011d70:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011d74:	81a3      	strh	r3, [r4, #12]
 8011d76:	6126      	str	r6, [r4, #16]
 8011d78:	444e      	add	r6, r9
 8011d7a:	6026      	str	r6, [r4, #0]
 8011d7c:	463e      	mov	r6, r7
 8011d7e:	6165      	str	r5, [r4, #20]
 8011d80:	eba5 0509 	sub.w	r5, r5, r9
 8011d84:	60a5      	str	r5, [r4, #8]
 8011d86:	42be      	cmp	r6, r7
 8011d88:	d900      	bls.n	8011d8c <__ssputs_r+0x70>
 8011d8a:	463e      	mov	r6, r7
 8011d8c:	4632      	mov	r2, r6
 8011d8e:	4641      	mov	r1, r8
 8011d90:	6820      	ldr	r0, [r4, #0]
 8011d92:	f000 faaf 	bl	80122f4 <memmove>
 8011d96:	2000      	movs	r0, #0
 8011d98:	68a3      	ldr	r3, [r4, #8]
 8011d9a:	1b9b      	subs	r3, r3, r6
 8011d9c:	60a3      	str	r3, [r4, #8]
 8011d9e:	6823      	ldr	r3, [r4, #0]
 8011da0:	4433      	add	r3, r6
 8011da2:	6023      	str	r3, [r4, #0]
 8011da4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011da8:	462a      	mov	r2, r5
 8011daa:	f000 fadb 	bl	8012364 <_realloc_r>
 8011dae:	4606      	mov	r6, r0
 8011db0:	2800      	cmp	r0, #0
 8011db2:	d1e0      	bne.n	8011d76 <__ssputs_r+0x5a>
 8011db4:	4650      	mov	r0, sl
 8011db6:	6921      	ldr	r1, [r4, #16]
 8011db8:	f7ff febc 	bl	8011b34 <_free_r>
 8011dbc:	230c      	movs	r3, #12
 8011dbe:	f8ca 3000 	str.w	r3, [sl]
 8011dc2:	89a3      	ldrh	r3, [r4, #12]
 8011dc4:	f04f 30ff 	mov.w	r0, #4294967295
 8011dc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8011dcc:	81a3      	strh	r3, [r4, #12]
 8011dce:	e7e9      	b.n	8011da4 <__ssputs_r+0x88>

08011dd0 <_svfiprintf_r>:
 8011dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011dd4:	4698      	mov	r8, r3
 8011dd6:	898b      	ldrh	r3, [r1, #12]
 8011dd8:	4607      	mov	r7, r0
 8011dda:	061b      	lsls	r3, r3, #24
 8011ddc:	460d      	mov	r5, r1
 8011dde:	4614      	mov	r4, r2
 8011de0:	b09d      	sub	sp, #116	; 0x74
 8011de2:	d50e      	bpl.n	8011e02 <_svfiprintf_r+0x32>
 8011de4:	690b      	ldr	r3, [r1, #16]
 8011de6:	b963      	cbnz	r3, 8011e02 <_svfiprintf_r+0x32>
 8011de8:	2140      	movs	r1, #64	; 0x40
 8011dea:	f7ff ff0b 	bl	8011c04 <_malloc_r>
 8011dee:	6028      	str	r0, [r5, #0]
 8011df0:	6128      	str	r0, [r5, #16]
 8011df2:	b920      	cbnz	r0, 8011dfe <_svfiprintf_r+0x2e>
 8011df4:	230c      	movs	r3, #12
 8011df6:	603b      	str	r3, [r7, #0]
 8011df8:	f04f 30ff 	mov.w	r0, #4294967295
 8011dfc:	e0d0      	b.n	8011fa0 <_svfiprintf_r+0x1d0>
 8011dfe:	2340      	movs	r3, #64	; 0x40
 8011e00:	616b      	str	r3, [r5, #20]
 8011e02:	2300      	movs	r3, #0
 8011e04:	9309      	str	r3, [sp, #36]	; 0x24
 8011e06:	2320      	movs	r3, #32
 8011e08:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8011e0c:	2330      	movs	r3, #48	; 0x30
 8011e0e:	f04f 0901 	mov.w	r9, #1
 8011e12:	f8cd 800c 	str.w	r8, [sp, #12]
 8011e16:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 8011fb8 <_svfiprintf_r+0x1e8>
 8011e1a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8011e1e:	4623      	mov	r3, r4
 8011e20:	469a      	mov	sl, r3
 8011e22:	f813 2b01 	ldrb.w	r2, [r3], #1
 8011e26:	b10a      	cbz	r2, 8011e2c <_svfiprintf_r+0x5c>
 8011e28:	2a25      	cmp	r2, #37	; 0x25
 8011e2a:	d1f9      	bne.n	8011e20 <_svfiprintf_r+0x50>
 8011e2c:	ebba 0b04 	subs.w	fp, sl, r4
 8011e30:	d00b      	beq.n	8011e4a <_svfiprintf_r+0x7a>
 8011e32:	465b      	mov	r3, fp
 8011e34:	4622      	mov	r2, r4
 8011e36:	4629      	mov	r1, r5
 8011e38:	4638      	mov	r0, r7
 8011e3a:	f7ff ff6f 	bl	8011d1c <__ssputs_r>
 8011e3e:	3001      	adds	r0, #1
 8011e40:	f000 80a9 	beq.w	8011f96 <_svfiprintf_r+0x1c6>
 8011e44:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8011e46:	445a      	add	r2, fp
 8011e48:	9209      	str	r2, [sp, #36]	; 0x24
 8011e4a:	f89a 3000 	ldrb.w	r3, [sl]
 8011e4e:	2b00      	cmp	r3, #0
 8011e50:	f000 80a1 	beq.w	8011f96 <_svfiprintf_r+0x1c6>
 8011e54:	2300      	movs	r3, #0
 8011e56:	f04f 32ff 	mov.w	r2, #4294967295
 8011e5a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8011e5e:	f10a 0a01 	add.w	sl, sl, #1
 8011e62:	9304      	str	r3, [sp, #16]
 8011e64:	9307      	str	r3, [sp, #28]
 8011e66:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8011e6a:	931a      	str	r3, [sp, #104]	; 0x68
 8011e6c:	4654      	mov	r4, sl
 8011e6e:	2205      	movs	r2, #5
 8011e70:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011e74:	4850      	ldr	r0, [pc, #320]	; (8011fb8 <_svfiprintf_r+0x1e8>)
 8011e76:	f000 fa67 	bl	8012348 <memchr>
 8011e7a:	9a04      	ldr	r2, [sp, #16]
 8011e7c:	b9d8      	cbnz	r0, 8011eb6 <_svfiprintf_r+0xe6>
 8011e7e:	06d0      	lsls	r0, r2, #27
 8011e80:	bf44      	itt	mi
 8011e82:	2320      	movmi	r3, #32
 8011e84:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e88:	0711      	lsls	r1, r2, #28
 8011e8a:	bf44      	itt	mi
 8011e8c:	232b      	movmi	r3, #43	; 0x2b
 8011e8e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8011e92:	f89a 3000 	ldrb.w	r3, [sl]
 8011e96:	2b2a      	cmp	r3, #42	; 0x2a
 8011e98:	d015      	beq.n	8011ec6 <_svfiprintf_r+0xf6>
 8011e9a:	4654      	mov	r4, sl
 8011e9c:	2000      	movs	r0, #0
 8011e9e:	f04f 0c0a 	mov.w	ip, #10
 8011ea2:	9a07      	ldr	r2, [sp, #28]
 8011ea4:	4621      	mov	r1, r4
 8011ea6:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011eaa:	3b30      	subs	r3, #48	; 0x30
 8011eac:	2b09      	cmp	r3, #9
 8011eae:	d94d      	bls.n	8011f4c <_svfiprintf_r+0x17c>
 8011eb0:	b1b0      	cbz	r0, 8011ee0 <_svfiprintf_r+0x110>
 8011eb2:	9207      	str	r2, [sp, #28]
 8011eb4:	e014      	b.n	8011ee0 <_svfiprintf_r+0x110>
 8011eb6:	eba0 0308 	sub.w	r3, r0, r8
 8011eba:	fa09 f303 	lsl.w	r3, r9, r3
 8011ebe:	4313      	orrs	r3, r2
 8011ec0:	46a2      	mov	sl, r4
 8011ec2:	9304      	str	r3, [sp, #16]
 8011ec4:	e7d2      	b.n	8011e6c <_svfiprintf_r+0x9c>
 8011ec6:	9b03      	ldr	r3, [sp, #12]
 8011ec8:	1d19      	adds	r1, r3, #4
 8011eca:	681b      	ldr	r3, [r3, #0]
 8011ecc:	9103      	str	r1, [sp, #12]
 8011ece:	2b00      	cmp	r3, #0
 8011ed0:	bfbb      	ittet	lt
 8011ed2:	425b      	neglt	r3, r3
 8011ed4:	f042 0202 	orrlt.w	r2, r2, #2
 8011ed8:	9307      	strge	r3, [sp, #28]
 8011eda:	9307      	strlt	r3, [sp, #28]
 8011edc:	bfb8      	it	lt
 8011ede:	9204      	strlt	r2, [sp, #16]
 8011ee0:	7823      	ldrb	r3, [r4, #0]
 8011ee2:	2b2e      	cmp	r3, #46	; 0x2e
 8011ee4:	d10c      	bne.n	8011f00 <_svfiprintf_r+0x130>
 8011ee6:	7863      	ldrb	r3, [r4, #1]
 8011ee8:	2b2a      	cmp	r3, #42	; 0x2a
 8011eea:	d134      	bne.n	8011f56 <_svfiprintf_r+0x186>
 8011eec:	9b03      	ldr	r3, [sp, #12]
 8011eee:	3402      	adds	r4, #2
 8011ef0:	1d1a      	adds	r2, r3, #4
 8011ef2:	681b      	ldr	r3, [r3, #0]
 8011ef4:	9203      	str	r2, [sp, #12]
 8011ef6:	2b00      	cmp	r3, #0
 8011ef8:	bfb8      	it	lt
 8011efa:	f04f 33ff 	movlt.w	r3, #4294967295
 8011efe:	9305      	str	r3, [sp, #20]
 8011f00:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8011fbc <_svfiprintf_r+0x1ec>
 8011f04:	2203      	movs	r2, #3
 8011f06:	4650      	mov	r0, sl
 8011f08:	7821      	ldrb	r1, [r4, #0]
 8011f0a:	f000 fa1d 	bl	8012348 <memchr>
 8011f0e:	b138      	cbz	r0, 8011f20 <_svfiprintf_r+0x150>
 8011f10:	2240      	movs	r2, #64	; 0x40
 8011f12:	9b04      	ldr	r3, [sp, #16]
 8011f14:	eba0 000a 	sub.w	r0, r0, sl
 8011f18:	4082      	lsls	r2, r0
 8011f1a:	4313      	orrs	r3, r2
 8011f1c:	3401      	adds	r4, #1
 8011f1e:	9304      	str	r3, [sp, #16]
 8011f20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8011f24:	2206      	movs	r2, #6
 8011f26:	4826      	ldr	r0, [pc, #152]	; (8011fc0 <_svfiprintf_r+0x1f0>)
 8011f28:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8011f2c:	f000 fa0c 	bl	8012348 <memchr>
 8011f30:	2800      	cmp	r0, #0
 8011f32:	d038      	beq.n	8011fa6 <_svfiprintf_r+0x1d6>
 8011f34:	4b23      	ldr	r3, [pc, #140]	; (8011fc4 <_svfiprintf_r+0x1f4>)
 8011f36:	bb1b      	cbnz	r3, 8011f80 <_svfiprintf_r+0x1b0>
 8011f38:	9b03      	ldr	r3, [sp, #12]
 8011f3a:	3307      	adds	r3, #7
 8011f3c:	f023 0307 	bic.w	r3, r3, #7
 8011f40:	3308      	adds	r3, #8
 8011f42:	9303      	str	r3, [sp, #12]
 8011f44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8011f46:	4433      	add	r3, r6
 8011f48:	9309      	str	r3, [sp, #36]	; 0x24
 8011f4a:	e768      	b.n	8011e1e <_svfiprintf_r+0x4e>
 8011f4c:	460c      	mov	r4, r1
 8011f4e:	2001      	movs	r0, #1
 8011f50:	fb0c 3202 	mla	r2, ip, r2, r3
 8011f54:	e7a6      	b.n	8011ea4 <_svfiprintf_r+0xd4>
 8011f56:	2300      	movs	r3, #0
 8011f58:	f04f 0c0a 	mov.w	ip, #10
 8011f5c:	4619      	mov	r1, r3
 8011f5e:	3401      	adds	r4, #1
 8011f60:	9305      	str	r3, [sp, #20]
 8011f62:	4620      	mov	r0, r4
 8011f64:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011f68:	3a30      	subs	r2, #48	; 0x30
 8011f6a:	2a09      	cmp	r2, #9
 8011f6c:	d903      	bls.n	8011f76 <_svfiprintf_r+0x1a6>
 8011f6e:	2b00      	cmp	r3, #0
 8011f70:	d0c6      	beq.n	8011f00 <_svfiprintf_r+0x130>
 8011f72:	9105      	str	r1, [sp, #20]
 8011f74:	e7c4      	b.n	8011f00 <_svfiprintf_r+0x130>
 8011f76:	4604      	mov	r4, r0
 8011f78:	2301      	movs	r3, #1
 8011f7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8011f7e:	e7f0      	b.n	8011f62 <_svfiprintf_r+0x192>
 8011f80:	ab03      	add	r3, sp, #12
 8011f82:	9300      	str	r3, [sp, #0]
 8011f84:	462a      	mov	r2, r5
 8011f86:	4638      	mov	r0, r7
 8011f88:	4b0f      	ldr	r3, [pc, #60]	; (8011fc8 <_svfiprintf_r+0x1f8>)
 8011f8a:	a904      	add	r1, sp, #16
 8011f8c:	f3af 8000 	nop.w
 8011f90:	1c42      	adds	r2, r0, #1
 8011f92:	4606      	mov	r6, r0
 8011f94:	d1d6      	bne.n	8011f44 <_svfiprintf_r+0x174>
 8011f96:	89ab      	ldrh	r3, [r5, #12]
 8011f98:	065b      	lsls	r3, r3, #25
 8011f9a:	f53f af2d 	bmi.w	8011df8 <_svfiprintf_r+0x28>
 8011f9e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8011fa0:	b01d      	add	sp, #116	; 0x74
 8011fa2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fa6:	ab03      	add	r3, sp, #12
 8011fa8:	9300      	str	r3, [sp, #0]
 8011faa:	462a      	mov	r2, r5
 8011fac:	4638      	mov	r0, r7
 8011fae:	4b06      	ldr	r3, [pc, #24]	; (8011fc8 <_svfiprintf_r+0x1f8>)
 8011fb0:	a904      	add	r1, sp, #16
 8011fb2:	f000 f87d 	bl	80120b0 <_printf_i>
 8011fb6:	e7eb      	b.n	8011f90 <_svfiprintf_r+0x1c0>
 8011fb8:	080129b8 	.word	0x080129b8
 8011fbc:	080129be 	.word	0x080129be
 8011fc0:	080129c2 	.word	0x080129c2
 8011fc4:	00000000 	.word	0x00000000
 8011fc8:	08011d1d 	.word	0x08011d1d

08011fcc <_printf_common>:
 8011fcc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011fd0:	4616      	mov	r6, r2
 8011fd2:	4699      	mov	r9, r3
 8011fd4:	688a      	ldr	r2, [r1, #8]
 8011fd6:	690b      	ldr	r3, [r1, #16]
 8011fd8:	4607      	mov	r7, r0
 8011fda:	4293      	cmp	r3, r2
 8011fdc:	bfb8      	it	lt
 8011fde:	4613      	movlt	r3, r2
 8011fe0:	6033      	str	r3, [r6, #0]
 8011fe2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8011fe6:	460c      	mov	r4, r1
 8011fe8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8011fec:	b10a      	cbz	r2, 8011ff2 <_printf_common+0x26>
 8011fee:	3301      	adds	r3, #1
 8011ff0:	6033      	str	r3, [r6, #0]
 8011ff2:	6823      	ldr	r3, [r4, #0]
 8011ff4:	0699      	lsls	r1, r3, #26
 8011ff6:	bf42      	ittt	mi
 8011ff8:	6833      	ldrmi	r3, [r6, #0]
 8011ffa:	3302      	addmi	r3, #2
 8011ffc:	6033      	strmi	r3, [r6, #0]
 8011ffe:	6825      	ldr	r5, [r4, #0]
 8012000:	f015 0506 	ands.w	r5, r5, #6
 8012004:	d106      	bne.n	8012014 <_printf_common+0x48>
 8012006:	f104 0a19 	add.w	sl, r4, #25
 801200a:	68e3      	ldr	r3, [r4, #12]
 801200c:	6832      	ldr	r2, [r6, #0]
 801200e:	1a9b      	subs	r3, r3, r2
 8012010:	42ab      	cmp	r3, r5
 8012012:	dc2b      	bgt.n	801206c <_printf_common+0xa0>
 8012014:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8012018:	1e13      	subs	r3, r2, #0
 801201a:	6822      	ldr	r2, [r4, #0]
 801201c:	bf18      	it	ne
 801201e:	2301      	movne	r3, #1
 8012020:	0692      	lsls	r2, r2, #26
 8012022:	d430      	bmi.n	8012086 <_printf_common+0xba>
 8012024:	4649      	mov	r1, r9
 8012026:	4638      	mov	r0, r7
 8012028:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801202c:	47c0      	blx	r8
 801202e:	3001      	adds	r0, #1
 8012030:	d023      	beq.n	801207a <_printf_common+0xae>
 8012032:	6823      	ldr	r3, [r4, #0]
 8012034:	6922      	ldr	r2, [r4, #16]
 8012036:	f003 0306 	and.w	r3, r3, #6
 801203a:	2b04      	cmp	r3, #4
 801203c:	bf14      	ite	ne
 801203e:	2500      	movne	r5, #0
 8012040:	6833      	ldreq	r3, [r6, #0]
 8012042:	f04f 0600 	mov.w	r6, #0
 8012046:	bf08      	it	eq
 8012048:	68e5      	ldreq	r5, [r4, #12]
 801204a:	f104 041a 	add.w	r4, r4, #26
 801204e:	bf08      	it	eq
 8012050:	1aed      	subeq	r5, r5, r3
 8012052:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8012056:	bf08      	it	eq
 8012058:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801205c:	4293      	cmp	r3, r2
 801205e:	bfc4      	itt	gt
 8012060:	1a9b      	subgt	r3, r3, r2
 8012062:	18ed      	addgt	r5, r5, r3
 8012064:	42b5      	cmp	r5, r6
 8012066:	d11a      	bne.n	801209e <_printf_common+0xd2>
 8012068:	2000      	movs	r0, #0
 801206a:	e008      	b.n	801207e <_printf_common+0xb2>
 801206c:	2301      	movs	r3, #1
 801206e:	4652      	mov	r2, sl
 8012070:	4649      	mov	r1, r9
 8012072:	4638      	mov	r0, r7
 8012074:	47c0      	blx	r8
 8012076:	3001      	adds	r0, #1
 8012078:	d103      	bne.n	8012082 <_printf_common+0xb6>
 801207a:	f04f 30ff 	mov.w	r0, #4294967295
 801207e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012082:	3501      	adds	r5, #1
 8012084:	e7c1      	b.n	801200a <_printf_common+0x3e>
 8012086:	2030      	movs	r0, #48	; 0x30
 8012088:	18e1      	adds	r1, r4, r3
 801208a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801208e:	1c5a      	adds	r2, r3, #1
 8012090:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8012094:	4422      	add	r2, r4
 8012096:	3302      	adds	r3, #2
 8012098:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801209c:	e7c2      	b.n	8012024 <_printf_common+0x58>
 801209e:	2301      	movs	r3, #1
 80120a0:	4622      	mov	r2, r4
 80120a2:	4649      	mov	r1, r9
 80120a4:	4638      	mov	r0, r7
 80120a6:	47c0      	blx	r8
 80120a8:	3001      	adds	r0, #1
 80120aa:	d0e6      	beq.n	801207a <_printf_common+0xae>
 80120ac:	3601      	adds	r6, #1
 80120ae:	e7d9      	b.n	8012064 <_printf_common+0x98>

080120b0 <_printf_i>:
 80120b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80120b4:	7e0f      	ldrb	r7, [r1, #24]
 80120b6:	4691      	mov	r9, r2
 80120b8:	2f78      	cmp	r7, #120	; 0x78
 80120ba:	4680      	mov	r8, r0
 80120bc:	460c      	mov	r4, r1
 80120be:	469a      	mov	sl, r3
 80120c0:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80120c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80120c6:	d807      	bhi.n	80120d8 <_printf_i+0x28>
 80120c8:	2f62      	cmp	r7, #98	; 0x62
 80120ca:	d80a      	bhi.n	80120e2 <_printf_i+0x32>
 80120cc:	2f00      	cmp	r7, #0
 80120ce:	f000 80d5 	beq.w	801227c <_printf_i+0x1cc>
 80120d2:	2f58      	cmp	r7, #88	; 0x58
 80120d4:	f000 80c1 	beq.w	801225a <_printf_i+0x1aa>
 80120d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80120dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80120e0:	e03a      	b.n	8012158 <_printf_i+0xa8>
 80120e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80120e6:	2b15      	cmp	r3, #21
 80120e8:	d8f6      	bhi.n	80120d8 <_printf_i+0x28>
 80120ea:	a101      	add	r1, pc, #4	; (adr r1, 80120f0 <_printf_i+0x40>)
 80120ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80120f0:	08012149 	.word	0x08012149
 80120f4:	0801215d 	.word	0x0801215d
 80120f8:	080120d9 	.word	0x080120d9
 80120fc:	080120d9 	.word	0x080120d9
 8012100:	080120d9 	.word	0x080120d9
 8012104:	080120d9 	.word	0x080120d9
 8012108:	0801215d 	.word	0x0801215d
 801210c:	080120d9 	.word	0x080120d9
 8012110:	080120d9 	.word	0x080120d9
 8012114:	080120d9 	.word	0x080120d9
 8012118:	080120d9 	.word	0x080120d9
 801211c:	08012263 	.word	0x08012263
 8012120:	08012189 	.word	0x08012189
 8012124:	0801221d 	.word	0x0801221d
 8012128:	080120d9 	.word	0x080120d9
 801212c:	080120d9 	.word	0x080120d9
 8012130:	08012285 	.word	0x08012285
 8012134:	080120d9 	.word	0x080120d9
 8012138:	08012189 	.word	0x08012189
 801213c:	080120d9 	.word	0x080120d9
 8012140:	080120d9 	.word	0x080120d9
 8012144:	08012225 	.word	0x08012225
 8012148:	682b      	ldr	r3, [r5, #0]
 801214a:	1d1a      	adds	r2, r3, #4
 801214c:	681b      	ldr	r3, [r3, #0]
 801214e:	602a      	str	r2, [r5, #0]
 8012150:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8012154:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8012158:	2301      	movs	r3, #1
 801215a:	e0a0      	b.n	801229e <_printf_i+0x1ee>
 801215c:	6820      	ldr	r0, [r4, #0]
 801215e:	682b      	ldr	r3, [r5, #0]
 8012160:	0607      	lsls	r7, r0, #24
 8012162:	f103 0104 	add.w	r1, r3, #4
 8012166:	6029      	str	r1, [r5, #0]
 8012168:	d501      	bpl.n	801216e <_printf_i+0xbe>
 801216a:	681e      	ldr	r6, [r3, #0]
 801216c:	e003      	b.n	8012176 <_printf_i+0xc6>
 801216e:	0646      	lsls	r6, r0, #25
 8012170:	d5fb      	bpl.n	801216a <_printf_i+0xba>
 8012172:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012176:	2e00      	cmp	r6, #0
 8012178:	da03      	bge.n	8012182 <_printf_i+0xd2>
 801217a:	232d      	movs	r3, #45	; 0x2d
 801217c:	4276      	negs	r6, r6
 801217e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8012182:	230a      	movs	r3, #10
 8012184:	4859      	ldr	r0, [pc, #356]	; (80122ec <_printf_i+0x23c>)
 8012186:	e012      	b.n	80121ae <_printf_i+0xfe>
 8012188:	682b      	ldr	r3, [r5, #0]
 801218a:	6820      	ldr	r0, [r4, #0]
 801218c:	1d19      	adds	r1, r3, #4
 801218e:	6029      	str	r1, [r5, #0]
 8012190:	0605      	lsls	r5, r0, #24
 8012192:	d501      	bpl.n	8012198 <_printf_i+0xe8>
 8012194:	681e      	ldr	r6, [r3, #0]
 8012196:	e002      	b.n	801219e <_printf_i+0xee>
 8012198:	0641      	lsls	r1, r0, #25
 801219a:	d5fb      	bpl.n	8012194 <_printf_i+0xe4>
 801219c:	881e      	ldrh	r6, [r3, #0]
 801219e:	2f6f      	cmp	r7, #111	; 0x6f
 80121a0:	bf0c      	ite	eq
 80121a2:	2308      	moveq	r3, #8
 80121a4:	230a      	movne	r3, #10
 80121a6:	4851      	ldr	r0, [pc, #324]	; (80122ec <_printf_i+0x23c>)
 80121a8:	2100      	movs	r1, #0
 80121aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80121ae:	6865      	ldr	r5, [r4, #4]
 80121b0:	2d00      	cmp	r5, #0
 80121b2:	bfa8      	it	ge
 80121b4:	6821      	ldrge	r1, [r4, #0]
 80121b6:	60a5      	str	r5, [r4, #8]
 80121b8:	bfa4      	itt	ge
 80121ba:	f021 0104 	bicge.w	r1, r1, #4
 80121be:	6021      	strge	r1, [r4, #0]
 80121c0:	b90e      	cbnz	r6, 80121c6 <_printf_i+0x116>
 80121c2:	2d00      	cmp	r5, #0
 80121c4:	d04b      	beq.n	801225e <_printf_i+0x1ae>
 80121c6:	4615      	mov	r5, r2
 80121c8:	fbb6 f1f3 	udiv	r1, r6, r3
 80121cc:	fb03 6711 	mls	r7, r3, r1, r6
 80121d0:	5dc7      	ldrb	r7, [r0, r7]
 80121d2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80121d6:	4637      	mov	r7, r6
 80121d8:	42bb      	cmp	r3, r7
 80121da:	460e      	mov	r6, r1
 80121dc:	d9f4      	bls.n	80121c8 <_printf_i+0x118>
 80121de:	2b08      	cmp	r3, #8
 80121e0:	d10b      	bne.n	80121fa <_printf_i+0x14a>
 80121e2:	6823      	ldr	r3, [r4, #0]
 80121e4:	07de      	lsls	r6, r3, #31
 80121e6:	d508      	bpl.n	80121fa <_printf_i+0x14a>
 80121e8:	6923      	ldr	r3, [r4, #16]
 80121ea:	6861      	ldr	r1, [r4, #4]
 80121ec:	4299      	cmp	r1, r3
 80121ee:	bfde      	ittt	le
 80121f0:	2330      	movle	r3, #48	; 0x30
 80121f2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80121f6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80121fa:	1b52      	subs	r2, r2, r5
 80121fc:	6122      	str	r2, [r4, #16]
 80121fe:	464b      	mov	r3, r9
 8012200:	4621      	mov	r1, r4
 8012202:	4640      	mov	r0, r8
 8012204:	f8cd a000 	str.w	sl, [sp]
 8012208:	aa03      	add	r2, sp, #12
 801220a:	f7ff fedf 	bl	8011fcc <_printf_common>
 801220e:	3001      	adds	r0, #1
 8012210:	d14a      	bne.n	80122a8 <_printf_i+0x1f8>
 8012212:	f04f 30ff 	mov.w	r0, #4294967295
 8012216:	b004      	add	sp, #16
 8012218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801221c:	6823      	ldr	r3, [r4, #0]
 801221e:	f043 0320 	orr.w	r3, r3, #32
 8012222:	6023      	str	r3, [r4, #0]
 8012224:	2778      	movs	r7, #120	; 0x78
 8012226:	4832      	ldr	r0, [pc, #200]	; (80122f0 <_printf_i+0x240>)
 8012228:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801222c:	6823      	ldr	r3, [r4, #0]
 801222e:	6829      	ldr	r1, [r5, #0]
 8012230:	061f      	lsls	r7, r3, #24
 8012232:	f851 6b04 	ldr.w	r6, [r1], #4
 8012236:	d402      	bmi.n	801223e <_printf_i+0x18e>
 8012238:	065f      	lsls	r7, r3, #25
 801223a:	bf48      	it	mi
 801223c:	b2b6      	uxthmi	r6, r6
 801223e:	07df      	lsls	r7, r3, #31
 8012240:	bf48      	it	mi
 8012242:	f043 0320 	orrmi.w	r3, r3, #32
 8012246:	6029      	str	r1, [r5, #0]
 8012248:	bf48      	it	mi
 801224a:	6023      	strmi	r3, [r4, #0]
 801224c:	b91e      	cbnz	r6, 8012256 <_printf_i+0x1a6>
 801224e:	6823      	ldr	r3, [r4, #0]
 8012250:	f023 0320 	bic.w	r3, r3, #32
 8012254:	6023      	str	r3, [r4, #0]
 8012256:	2310      	movs	r3, #16
 8012258:	e7a6      	b.n	80121a8 <_printf_i+0xf8>
 801225a:	4824      	ldr	r0, [pc, #144]	; (80122ec <_printf_i+0x23c>)
 801225c:	e7e4      	b.n	8012228 <_printf_i+0x178>
 801225e:	4615      	mov	r5, r2
 8012260:	e7bd      	b.n	80121de <_printf_i+0x12e>
 8012262:	682b      	ldr	r3, [r5, #0]
 8012264:	6826      	ldr	r6, [r4, #0]
 8012266:	1d18      	adds	r0, r3, #4
 8012268:	6961      	ldr	r1, [r4, #20]
 801226a:	6028      	str	r0, [r5, #0]
 801226c:	0635      	lsls	r5, r6, #24
 801226e:	681b      	ldr	r3, [r3, #0]
 8012270:	d501      	bpl.n	8012276 <_printf_i+0x1c6>
 8012272:	6019      	str	r1, [r3, #0]
 8012274:	e002      	b.n	801227c <_printf_i+0x1cc>
 8012276:	0670      	lsls	r0, r6, #25
 8012278:	d5fb      	bpl.n	8012272 <_printf_i+0x1c2>
 801227a:	8019      	strh	r1, [r3, #0]
 801227c:	2300      	movs	r3, #0
 801227e:	4615      	mov	r5, r2
 8012280:	6123      	str	r3, [r4, #16]
 8012282:	e7bc      	b.n	80121fe <_printf_i+0x14e>
 8012284:	682b      	ldr	r3, [r5, #0]
 8012286:	2100      	movs	r1, #0
 8012288:	1d1a      	adds	r2, r3, #4
 801228a:	602a      	str	r2, [r5, #0]
 801228c:	681d      	ldr	r5, [r3, #0]
 801228e:	6862      	ldr	r2, [r4, #4]
 8012290:	4628      	mov	r0, r5
 8012292:	f000 f859 	bl	8012348 <memchr>
 8012296:	b108      	cbz	r0, 801229c <_printf_i+0x1ec>
 8012298:	1b40      	subs	r0, r0, r5
 801229a:	6060      	str	r0, [r4, #4]
 801229c:	6863      	ldr	r3, [r4, #4]
 801229e:	6123      	str	r3, [r4, #16]
 80122a0:	2300      	movs	r3, #0
 80122a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80122a6:	e7aa      	b.n	80121fe <_printf_i+0x14e>
 80122a8:	462a      	mov	r2, r5
 80122aa:	4649      	mov	r1, r9
 80122ac:	4640      	mov	r0, r8
 80122ae:	6923      	ldr	r3, [r4, #16]
 80122b0:	47d0      	blx	sl
 80122b2:	3001      	adds	r0, #1
 80122b4:	d0ad      	beq.n	8012212 <_printf_i+0x162>
 80122b6:	6823      	ldr	r3, [r4, #0]
 80122b8:	079b      	lsls	r3, r3, #30
 80122ba:	d413      	bmi.n	80122e4 <_printf_i+0x234>
 80122bc:	68e0      	ldr	r0, [r4, #12]
 80122be:	9b03      	ldr	r3, [sp, #12]
 80122c0:	4298      	cmp	r0, r3
 80122c2:	bfb8      	it	lt
 80122c4:	4618      	movlt	r0, r3
 80122c6:	e7a6      	b.n	8012216 <_printf_i+0x166>
 80122c8:	2301      	movs	r3, #1
 80122ca:	4632      	mov	r2, r6
 80122cc:	4649      	mov	r1, r9
 80122ce:	4640      	mov	r0, r8
 80122d0:	47d0      	blx	sl
 80122d2:	3001      	adds	r0, #1
 80122d4:	d09d      	beq.n	8012212 <_printf_i+0x162>
 80122d6:	3501      	adds	r5, #1
 80122d8:	68e3      	ldr	r3, [r4, #12]
 80122da:	9903      	ldr	r1, [sp, #12]
 80122dc:	1a5b      	subs	r3, r3, r1
 80122de:	42ab      	cmp	r3, r5
 80122e0:	dcf2      	bgt.n	80122c8 <_printf_i+0x218>
 80122e2:	e7eb      	b.n	80122bc <_printf_i+0x20c>
 80122e4:	2500      	movs	r5, #0
 80122e6:	f104 0619 	add.w	r6, r4, #25
 80122ea:	e7f5      	b.n	80122d8 <_printf_i+0x228>
 80122ec:	080129c9 	.word	0x080129c9
 80122f0:	080129da 	.word	0x080129da

080122f4 <memmove>:
 80122f4:	4288      	cmp	r0, r1
 80122f6:	b510      	push	{r4, lr}
 80122f8:	eb01 0402 	add.w	r4, r1, r2
 80122fc:	d902      	bls.n	8012304 <memmove+0x10>
 80122fe:	4284      	cmp	r4, r0
 8012300:	4623      	mov	r3, r4
 8012302:	d807      	bhi.n	8012314 <memmove+0x20>
 8012304:	1e43      	subs	r3, r0, #1
 8012306:	42a1      	cmp	r1, r4
 8012308:	d008      	beq.n	801231c <memmove+0x28>
 801230a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801230e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8012312:	e7f8      	b.n	8012306 <memmove+0x12>
 8012314:	4601      	mov	r1, r0
 8012316:	4402      	add	r2, r0
 8012318:	428a      	cmp	r2, r1
 801231a:	d100      	bne.n	801231e <memmove+0x2a>
 801231c:	bd10      	pop	{r4, pc}
 801231e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8012322:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8012326:	e7f7      	b.n	8012318 <memmove+0x24>

08012328 <_sbrk_r>:
 8012328:	b538      	push	{r3, r4, r5, lr}
 801232a:	2300      	movs	r3, #0
 801232c:	4d05      	ldr	r5, [pc, #20]	; (8012344 <_sbrk_r+0x1c>)
 801232e:	4604      	mov	r4, r0
 8012330:	4608      	mov	r0, r1
 8012332:	602b      	str	r3, [r5, #0]
 8012334:	f7f2 f87e 	bl	8004434 <_sbrk>
 8012338:	1c43      	adds	r3, r0, #1
 801233a:	d102      	bne.n	8012342 <_sbrk_r+0x1a>
 801233c:	682b      	ldr	r3, [r5, #0]
 801233e:	b103      	cbz	r3, 8012342 <_sbrk_r+0x1a>
 8012340:	6023      	str	r3, [r4, #0]
 8012342:	bd38      	pop	{r3, r4, r5, pc}
 8012344:	200023b4 	.word	0x200023b4

08012348 <memchr>:
 8012348:	4603      	mov	r3, r0
 801234a:	b510      	push	{r4, lr}
 801234c:	b2c9      	uxtb	r1, r1
 801234e:	4402      	add	r2, r0
 8012350:	4293      	cmp	r3, r2
 8012352:	4618      	mov	r0, r3
 8012354:	d101      	bne.n	801235a <memchr+0x12>
 8012356:	2000      	movs	r0, #0
 8012358:	e003      	b.n	8012362 <memchr+0x1a>
 801235a:	7804      	ldrb	r4, [r0, #0]
 801235c:	3301      	adds	r3, #1
 801235e:	428c      	cmp	r4, r1
 8012360:	d1f6      	bne.n	8012350 <memchr+0x8>
 8012362:	bd10      	pop	{r4, pc}

08012364 <_realloc_r>:
 8012364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012368:	4680      	mov	r8, r0
 801236a:	4614      	mov	r4, r2
 801236c:	460e      	mov	r6, r1
 801236e:	b921      	cbnz	r1, 801237a <_realloc_r+0x16>
 8012370:	4611      	mov	r1, r2
 8012372:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012376:	f7ff bc45 	b.w	8011c04 <_malloc_r>
 801237a:	b92a      	cbnz	r2, 8012388 <_realloc_r+0x24>
 801237c:	f7ff fbda 	bl	8011b34 <_free_r>
 8012380:	4625      	mov	r5, r4
 8012382:	4628      	mov	r0, r5
 8012384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012388:	f000 f81b 	bl	80123c2 <_malloc_usable_size_r>
 801238c:	4284      	cmp	r4, r0
 801238e:	4607      	mov	r7, r0
 8012390:	d802      	bhi.n	8012398 <_realloc_r+0x34>
 8012392:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8012396:	d812      	bhi.n	80123be <_realloc_r+0x5a>
 8012398:	4621      	mov	r1, r4
 801239a:	4640      	mov	r0, r8
 801239c:	f7ff fc32 	bl	8011c04 <_malloc_r>
 80123a0:	4605      	mov	r5, r0
 80123a2:	2800      	cmp	r0, #0
 80123a4:	d0ed      	beq.n	8012382 <_realloc_r+0x1e>
 80123a6:	42bc      	cmp	r4, r7
 80123a8:	4622      	mov	r2, r4
 80123aa:	4631      	mov	r1, r6
 80123ac:	bf28      	it	cs
 80123ae:	463a      	movcs	r2, r7
 80123b0:	f7ff fbb2 	bl	8011b18 <memcpy>
 80123b4:	4631      	mov	r1, r6
 80123b6:	4640      	mov	r0, r8
 80123b8:	f7ff fbbc 	bl	8011b34 <_free_r>
 80123bc:	e7e1      	b.n	8012382 <_realloc_r+0x1e>
 80123be:	4635      	mov	r5, r6
 80123c0:	e7df      	b.n	8012382 <_realloc_r+0x1e>

080123c2 <_malloc_usable_size_r>:
 80123c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80123c6:	1f18      	subs	r0, r3, #4
 80123c8:	2b00      	cmp	r3, #0
 80123ca:	bfbc      	itt	lt
 80123cc:	580b      	ldrlt	r3, [r1, r0]
 80123ce:	18c0      	addlt	r0, r0, r3
 80123d0:	4770      	bx	lr
	...

080123d4 <_init>:
 80123d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123d6:	bf00      	nop
 80123d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123da:	bc08      	pop	{r3}
 80123dc:	469e      	mov	lr, r3
 80123de:	4770      	bx	lr

080123e0 <_fini>:
 80123e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80123e2:	bf00      	nop
 80123e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80123e6:	bc08      	pop	{r3}
 80123e8:	469e      	mov	lr, r3
 80123ea:	4770      	bx	lr
